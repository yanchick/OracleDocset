<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79264"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Understanding%20Source%20Objects"></a><title>Understanding Source Objects</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-06-27T7:32:41Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP Java API Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17707-05"/>
<meta name="dcterms.isVersionOf" content="OLAAP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="create.htm" title="Previous" type="text/html"/>
<link rel="Next" href="select.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17707-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/19</span> <!-- End Header -->
<div class="chapter"><a id="g1030586"></a> <a id="i1006410"></a>
<h1 class="chapter"><span class="secnum">5</span> Understanding Source Objects</h1>
<p>This chapter describes <code>Source</code> objects, which you use to specify a query. With a <code>Source</code>, you specify the data that you want to retrieve from the data store and the analytical or other operations that you want to perform on the data. <a href="select.htm#g1017484">Chapter 6, &#34;Making Queries Using Source Methods&#34;</a>, provides examples of using <code>Source</code> objects. <a href="template.htm#g1013092">Chapter 10, &#34;Creating Dynamic Queries&#34;</a>, describes using <code>Template</code> objects to make modifiable queries.</p>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#i1014035">Overview of Source Objects</a></p>
</li>
<li>
<p><a href="#i1014040">Kinds of Source Objects</a></p>
</li>
<li>
<p><a href="#i1012910">Characteristics of Source Objects</a></p>
</li>
<li>
<p><a href="#i1019564">Inputs and Outputs of a Source</a></p>
</li>
<li>
<p><a href="#CBAIJAAA">Describing Parameterized Source Objects</a></p>
</li>
</ul>
<a id="i1014035"></a>
<div class="sect1">
<h2 class="sect1">Overview of Source Objects</h2>
<p><a id="sthref498"></a><a id="sthref499"></a><a id="sthref500"></a>You use <code>Source</code> objects to create a query that specifies the data that you want to retrieve from the database. As a query, a <code>Source</code> is similar to a SQL <code>SELECT</code> statement.</p>
<p>To create a query, you typically use the classes in the <code>oracle.olapi.metadata.mdm</code> package to get <code>MdmSource</code> objects that represent OLAP metadata objects. From an <code>MdmSource</code> object, you can get a <code>Source</code> object. You can also create other kinds of <code>Source</code> objects with methods of a <code>DataProvider</code>. You can then use these <code>Source</code> objects to create a query. To retrieve the data specified by the query, you create a <code>Cursor</code> for the <code>Source</code>.</p>
<p>With the methods of a <code>Source</code>, you can specify selections of dimension members, attribute values, or measure values. You can also specify operations on the elements of the <code>Source</code>, such as mathematical calculations, comparisons, and ordering, adding, or removing elements of a query.</p>
<p><a id="sthref501"></a>The <code>Source</code> class has a few basic methods and many shortcut methods that use one or more of the basic methods. The most complex basic methods are the <code>join(Source joined, Source comparison, int comparisonRule, boolean visible)</code> method and the <code>recursiveJoin(Source joined, Source compariso4n, Source parent, int comparisonRule, boolean parentsFirst, boolean parentsRestrictedToBase, int maxIterations, boolean visible)</code> method. The many other signatures of the <code>join</code> and <code>recursiveJoin</code> methods are shortcuts for certain operations of the basic methods.</p>
<p>In this chapter, the information about the <code>join</code> method applies equally to the <code>recursiveJoin</code> method, except where otherwise noted. With the <code>join</code> method you can relate the elements of one <code>Source</code> to those of another <code>Source</code> by joining a <code>Source</code> with an input to a <code>Source</code> that matches with that input. For example, to specify the dimension members that are required to retrieve the data of a measure that has the dimension as an input, you use a <code>join</code> method to relate the dimension members to the measure. The <code>join</code> method and the inputs of a <code>Source</code> are described in <a href="#i1019564">&#34;Inputs and Outputs of a Source&#34;</a>.</p>
<p>A <code>Source</code> has certain characteristics, such as a type and a data type, and it can have one or more inputs or outputs. This chapter describes these concepts. It also describes the different kinds of <code>Source</code> objects and how you get them, and the <code>join</code> method and other <code>Source</code> methods and how you use those methods to specify a query.</p>
</div>
<!-- class="sect1" -->
<a id="i1014040"></a>
<div class="sect1">
<h2 class="sect1">Kinds of Source Objects</h2>
<p><a id="sthref502"></a><a id="sthref503"></a>The kinds of <code>Source</code> objects that you use to specify data and to perform analysis, and the ways that you get them, are the following:</p>
<ul>
<li>
<p><a id="sthref504"></a>Primary <code>Source</code> objects, which are returned by the <code>getSource</code> method of an <code>MdmSource</code> object such as an <code>MdmDimension</code> or an <code>MdmDimensionedObject</code>. A primary <code>Source</code> provides access to the data that the <code>MdmSource</code> represents. Getting primary <code>Source</code> objects is usually the first step in creating a query. You then typically select elements from the primary <code>Source</code> objects, thereby producing derived <code>Source</code> objects.</p>
</li>
<li>
<p><a id="sthref505"></a>Derived <code>Source</code> objects, which you get by calling some of the methods of a <code>Source</code> object. Methods such as <code>join</code> return a new <code>Source</code> that is derived from the <code>Source</code> on which you call the method. All queries on the data store, other than a simple list of values specified by the primary <code>Source</code> for an <code>MdmDimension</code>, are derived <code>Source</code> objects.</p>
</li>
<li>
<p><a id="sthref506"></a>Fundamental <code>Source</code> objects, which are returned by the <code>getSource</code> method of a <code>FundamentalMetadataObject</code>. These <code>Source</code> objects represent the OLAP Java API data types.</p>
</li>
<li>
<p><a id="sthref507"></a><a id="sthref508"></a>List or range <code>Source</code> objects, which are returned by the <code>createConstantSource</code>, <code>createListSource</code>, or <code>createRangeSource</code> methods of a <code>DataProvider</code>. Typically, you use this kind of <code>Source</code> as the <code>joined</code> or <code>comparison</code> parameter to a <code>join</code> method.</p>
</li>
<li>
<p><a id="sthref509"></a><a id="sthref510"></a><a id="sthref511"></a><a id="sthref512"></a><a id="sthref513"></a><a id="sthref514"></a><a id="sthref515"></a>Empty, null, or void <code>Source</code> objects. The empty and void <code>Source</code> objects are returned by the <code>getEmptySource</code> or <code>getVoidSource</code> method of a <code>DataProvider</code>, and the null <code>Source</code> object is returned by the <code>nullSource</code> method of a <code>Source</code>. The empty <code>Source</code> has no elements. The void <code>Source</code> and a null <code>Source</code> each has one element that has the value of <code>null</code>. The difference between the void <code>Source</code> and a null <code>Source</code> is that the type of the void <code>Source</code> is the <code>FundamentalMetadataObject</code> for the Value data type and the type of a null <code>Source</code> is the <code>Source</code> whose <code>nullSource</code> method returned it. Typically, you use these kinds of <code>Source</code> objects as the <code>joined</code> or <code>comparison</code> parameter to a <code>join</code> method.</p>
</li>
<li>
<p><a id="sthref516"></a>Dynamic <code>Source</code> objects, which are returned by the <code>getSource</code> method of a <code>DynamicDefinition</code>. A dynamic <code>Source</code> is usually a derived <code>Source</code>. It is generated by a <code>Template</code>, which you use to create a dynamic query that you can revise after interacting with an end user.</p>
</li>
<li>
<p><a id="sthref517"></a>Parameterized <code>Source</code> objects, which are returned by the <code>createSource</code> methods of a <code>Parameter</code>. Like a list or range <code>Source</code>, you use a parameterized <code>Source</code> as a parameter to the <code>join</code> method. Unlike a list or range <code>Source</code>, however, you can change the value that the <code>Parameter</code> represents after the join operation and thereby change the selection that the derived <code>Source</code> represents. You can create a <code>Cursor</code> for that derived <code>Source</code> and retrieve the results of the query. You can then change the value of the <code>Parameter</code>, and, without having to create a new <code>Cursor</code> for the derived <code>Source</code>, use that same <code>Cursor</code> to retrieve the results of the modified query.</p>
</li>
</ul>
<p><a id="sthref518"></a>The <code>Source</code> class has the following subclasses:</p>
<ul>
<li>
<p><code>BooleanSource</code></p>
</li>
<li>
<p><code>DateSource</code></p>
</li>
<li>
<p><code>NumberSource</code></p>
</li>
<li>
<p><code>StringSource</code></p>
</li>
</ul>
<p>These subclasses have different data types and implement <code>Source</code> methods that require those data types. Each subclass also implements methods unique to it, such as the <code>implies</code> method of a <code>BooleanSource</code> or the <code>indexOf</code> method of a <code>StringSource</code>.</p>
</div>
<!-- class="sect1" -->
<a id="i1012910"></a>
<div class="sect1">
<h2 class="sect1">Characteristics of Source Objects</h2>
<p>A <code>Source</code> has a data type, a type, and an identifier (ID), and all <code>Source</code> objects except the empty <code>Source</code> have one or more elements. This topic describes these concepts. Some <code>Source</code> objects have one or more inputs or outputs. Those complex concepts are discussed in <a href="#i1019564">&#34;Inputs and Outputs of a Source&#34;</a>.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref519"></a>
<h3 class="sect2">Elements and Values of a Source</h3>
<p><a id="sthref520"></a><a id="sthref521"></a><a id="sthref522"></a>All <code>Source</code> objects, except the empty <code>Source</code>, have one or more elements. An element of a <code>Source</code> has a value, which can be null. For example, the <code>Source</code> for the <code>MdmPrimaryDimension</code> object for the CHANNEL_AWJ dimension has four elements. The values of those elements are the unique values of the members of the dimension, which are the following.</p>
<pre>CHANNEL_PRIMARY::CHANNEL::TOTAL
CHANNEL_PRIMARY::CHANNEL::CAT
CHANNEL_PRIMARY::CHANNEL::DIR
CHANNEL_PRIMARY::CHANNEL::INT
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref523"></a>
<h3 class="sect2">Data Type of a Source</h3>
<p><a id="sthref524"></a><a id="sthref525"></a><a id="sthref526"></a><a id="sthref527"></a>The <code>FundamentalMetadataObject</code> class represents the data type of the values of the elements of an <code>MdmSource</code>. The data type of a <code>Source</code> is represented by a fundamental <code>Source</code>. For example, a <code>BooleanSource</code> has elements that have Java <code>boolean</code> values. The data type of a <code>BooleanSource</code> is the fundamental <code>Source</code> that represents OLAP Java API Boolean values.</p>
<p><a id="sthref528"></a>To get the fundamental <code>Source</code> that represents the data type of a <code>Source</code>, call the <code>getDataType</code> method of the <code>Source</code>. You can also get a fundamental <code>Source</code> by calling the <code>getSource</code> method of a <code>FundamentalMetadataObject</code>.</p>
<p>The data type for a primary <code>Source</code> is related to the SQL data type of the associated metadata object. For example, an <code>MdmBaseAttribute</code> that has a SQL data type of <code>VARCHAR2(30)</code> would produce a <code>Source</code> whose data type is the fundamental <code>Source</code> that represents OLAP Java API String values. The following code gets that fundamental <code>Source</code>.</p>
<pre><a id="sthref529"></a>fmp.getStringDataType().getSource(); // fmp is the FundamentalMetadataProvider.
</pre>
<p><a id="sthref530"></a>A typical use of a <code>Source</code> for a data type is as the comparison <code>Source</code> for a join or a recursive join operation. As such it represents the set of all values of that data type. For examples of the use of the <code>getDataType</code> method, see <a href="select.htm#CBBEBEJH">Example 6-3</a>, <a href="select.htm#CBBDDAHE">Example 6-5</a>, and <a href="select.htm#CBBJDIAC">Example 6-11</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref531"></a>
<h3 class="sect2">Type of a Source</h3>
<p><a id="sthref532"></a><a id="sthref533"></a><a id="sthref534"></a><a id="sthref535"></a><a id="sthref536"></a>Along with a data type, a <code>Source</code> has a type, which is the <code>Source</code> from which the elements of the <code>Source</code> are drawn. The type of a <code>Source</code> determines whether the <code>join</code> method can match the <code>Source</code> with the input of another <code>Source</code>. The only <code>Source</code> that does not have a type is the fundamental <code>Source</code> for the OLAP Java API Value data type, which represents the set of all values, and from which all other <code>Source</code> objects ultimately descend. You can find the type by calling the <code>getType</code> method of a <code>Source</code>.</p>
<p>The type of a fundamental <code>Source</code> is the data type of the <code>Source</code>. The type of a list or range <code>Source</code> is the data type of the values of the elements of the list or range <code>Source</code>.</p>
<p>The type of a primary <code>Source</code> is one of the following:</p>
<ul>
<li>
<p>The fundamental <code>Source</code> that represents the data type of the values of the elements of the primary <code>Source</code>. For example, the type of the <code>Source</code> returned by the <code>getSource</code> method of a typical numeric <code>MdmMeasure</code> is the fundamental <code>Source</code> that represents the set of all OLAP Java API number values.</p>
</li>
<li>
<p>The <code>Source</code> for the object that contains the primary <code>Source</code>. For example, the type of the <code>Source</code> returned by the <code>getSource</code> method of an <code>MdmLevelHierarchy</code> is the <code>Source</code> for the <code>MdmPrimaryDimension</code> that contains the hierarchy.</p>
</li>
</ul>
<p>The type of a derived <code>Source</code> is one of the following:</p>
<ul>
<li>
<p><a id="sthref537"></a>The base <code>Source</code>, which is the <code>Source</code> whose method returned the derived <code>Source</code>. A <code>Source</code> returned by the <code>alias</code>, <code>distinct</code>, <code>extract</code>, <code>join</code>, <code>recursiveJoin</code>, or <code>value</code> methods, or one of their shortcuts, has the base <code>Source</code> as the type.</p>
</li>
<li>
<p>A fundamental <code>Source</code>. The type of the <code>Source</code> returned by methods such as <code>position</code> and <code>count</code> is the fundamental <code>Source</code> for the OLAP Java API Integer data type. The type of the <code>Source</code> returned by methods that make comparisons, such as <code>eq</code>, <code>le</code>, and so on, is the fundamental <code>Source</code> for the Boolean data type. The type of the <code>Source</code> returned by methods that perform aggregate functions, such as the <code>NumberSource</code> methods <code>total</code> and <code>average</code>, is a fundamental <code>Source</code> that represents the function.</p>
</li>
</ul>
<p><a id="sthref538"></a><a id="sthref539"></a><a id="sthref540"></a><a id="sthref541"></a>A derived <code>Source</code> that has the base <code>Source</code> as the type is a subtype of the <code>Source</code> from which it is derived. A derived Source that has a fundamental <code>Source</code> as the type is a subtype of the fundamental <code>Source</code>. You can use the <code>isSubtypeOf</code> method to determine if a <code>Source</code> is a subtype of another <code>Source</code>.</p>
<p><a id="sthref542"></a>For example, in <a href="#i1015161">Example 5-1</a> the <code>myList</code> object is a list <code>Source</code>. The example uses <code>myList</code> to select values from <code>prodHier</code>, a <code>Source</code> for an <code>MdmLevelHierarchy</code> of the <code>MdmPrimaryDimension</code> for the PRODUCT_AWJ dimension. In the example, <code>dp</code> is the <code>DataProvider</code>.</p>
<div class="example">
<p class="titleinexample"><a id="i1015161"></a>Example 5-1 Using the isSubtypeOf Method</p>
<pre>Source myList = dp.createListSource(new String[] {
                                     &#34;PRODUCT_PRIMARY::FAMILY::LTPC&#34;,
                                     &#34;PRODUCT_PRIMARY::FAMILY::DTPC&#34;,
                                     &#34;PRODUCT_PRIMARY::FAMILY::ACC&#34;,
                                     &#34;PRODUCT_PRIMARY::FAMILY::MON&#34;});
Source prodSel = prodHier.selectValues(myList);
if (prodSel.isSubtypeOf(prodHier))
  println(&#34;prodSel is a subtype of prodHier.&#34;);
else
  println(&#34;prodSel is not a subtype of prodHier.&#34;);
</pre>
<p>Because <code>prodSel</code> is a subtype of <code>prodHier</code>, the condition in the <code>if</code> statement is true and the example displays the following:</p>
<pre>prodSel is a subtype of prodHier.
</pre>
<p>The type of <code>myList</code> is the fundamental String <code>Source</code>. The type of <code>prodHier</code> is the <code>Source</code> for the PRODUCT_AWJ dimension. The type of <code>prodSel</code> is <code>prodHier</code> because the elements of <code>prodSel</code> are derived from the elements of <code>prodHier</code>.</p>
<p>The supertype of a <code>Source</code> is the type of the type of a <code>Source</code>, and so on, up through the types to the <code>Source</code> for the fundamental Value data type. For example, the fundamental Value <code>Source</code> is the type of the fundamental String <code>Source</code>, which is the type of <code>prodHier</code>, which is the type of <code>prodSel</code>. The fundamental Value <code>Source</code> and the fundamental String <code>Source</code> are both supertypes of <code>prodSel</code>. The <code>prodSel</code> <code>Source</code> is a subtype of <code>prodHier</code>, and of the fundamental String <code>Source</code>, and of the fundamental Value <code>Source</code>.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref543"></a>
<h3 class="sect2">Source Identification and SourceDefinition of a Source</h3>
<p><a id="sthref544"></a><a id="sthref545"></a><a id="sthref546"></a><a id="sthref547"></a>A <code>Source</code> has an identification, an ID, which is a <code>String</code> that uniquely identifies it during the current connection to the database. You can get the identification by calling the <code>getID</code> method of a <code>Source</code>. For example, the following code gets the identification of the <code>Source</code> for the <code>MdmPrimaryDimension</code> for the PRODUCT_AWJ dimension and displays the value.</p>
<pre>println(&#34;The Source ID of prodDim is &#34; + prodDim.getID());
</pre>
<p>The preceding code displays the following:</p>
<pre>The Source ID of prodDim is Hidden..GLOBAL.PRODUCT_AWJ
</pre>
<p><a id="sthref548"></a><a id="sthref549"></a>Each <code>Source</code> also has a <code>SourceDefinition</code> object, which records information about the <code>Source</code>. Oracle OLAP uses this information internally. For example, the <code>SourceDefinition</code> of a derived <code>Source</code> records the parameters of the join operation that produced the <code>Source</code>, such as the base <code>Source</code>, the joined <code>Source</code>, the comparison <code>Source</code>, the comparison rule, and the value of the <code>visible</code> parameter.</p>
<p>The <code>DynamicDefinition</code> class is a subclass of <code>SourceDefinition</code>. An OLAP Java API client application uses the <code>DynamicDefinition</code> of a <code>Template</code> to get the dynamic <code>Source</code> of the <code>Template</code>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1019564"></a>
<div class="sect1">
<h2 class="sect1">Inputs and Outputs of a Source</h2>
<p>An input of a <code>Source</code> indicates that the elements of the <code>Source</code> have a relation to those of another <code>Source</code>. An output of a <code>Source</code> contains elements from which values of the <code>Source</code> with the output are derived. A <code>Source</code> with one or more outputs is somewhat like an array of arrays.</p>
<p>A <code>Source</code> can have inputs and it can have outputs. The inputs and the outputs of a <code>Source</code> are other <code>Source</code> objects.</p>
<p>The inputs and outputs of a base <code>Source</code> influence the elements of a <code>Source</code> that you derive from that base <code>Source</code>. To derive a <code>Source</code>, you use methods of the base <code>Source</code>. The derived <code>Source</code> can have outputs or inputs or both or neither, depending on the method and the parameters of the method.</p>
<p>Some <code>Source</code> methods, such as the <code>value</code> and <code>position</code> methods, return a <code>Source</code> that has an input. The <code>join</code> and <code>recursiveJoin</code> methods can return a <code>Source</code> that has an output. If the join operation involves a <code>Source</code> with an input and a <code>Source</code> that matches with that input, then the input acts as a filter in producing the elements of the derived <code>Source</code>.</p>
<p>This topic describes the <code>join</code> method, the concepts of outputs and inputs, and the matching of inputs. It provides examples of producing <code>Source</code> objects that have outputs, <code>Source</code> objects that have inputs, and join operations that match an input with a <code>Source</code>.</p>
<a id="BABGBJAG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Describing the join Method</h3>
<p><a id="sthref550"></a><a id="sthref551"></a>With the <code>join</code> method, you join the elements of one <code>Source</code> with those of another <code>Source</code> to produce a derived <code>Source</code>. The derived <code>Source</code> could have inputs or outputs. The elements of the derived <code>Source</code>, and whether it has any inputs or outputs, depend on the values of the parameters that you pass to the <code>join</code> method.</p>
<p>The full signature of the <code>join</code> method is the following.</p>
<pre>Source join(Source joined,
            Source comparison,
            int comparisonRule,
            boolean visible)
</pre>
<p><a id="sthref552"></a><a id="sthref553"></a>The <code>Source</code> on which you call the <code>join</code> method is the base of the join operation. The parameters of the method are the following.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref554"></a>
<h4 class="sect3">Describing the joined Parameter</h4>
<p><a id="sthref555"></a><a id="sthref556"></a>The <code>joined</code> parameter is a <code>Source</code> object. The <code>join</code> method joins the elements of the base <code>Source</code> and the elements of the joined <code>Source</code>, with results that are determined by the values of the other <code>join</code> parameters. If the values of the joined <code>Source</code> are not related to the values of the base <code>Source</code>, that is, if neither the joined <code>Source</code> nor the base <code>Source</code> matches with an input of the other, then the join produces a Cartesian product of the elements of the base and the joined <code>Source</code> objects. The examples in the <a href="#BABJEAGH">&#34;Outputs of a Source&#34;</a> topic demonstrate this kind of join operation.</p>
<p>If the values of the joined <code>Source</code> are related to the values of the base <code>Source</code>, that is, if either the joined <code>Source</code> or the base <code>Source</code> is an input of the other, then the elements of the derived <code>Source</code> are the result of the matching of the input. The examples in <a href="#i1018188">&#34;Matching a Source with an Input&#34;</a> demonstrate this kind of join operation.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref557"></a>
<h4 class="sect3">Describing the comparison Parameter</h4>
<p><a id="sthref558"></a>The <code>comparison</code> parameter is another <code>Source</code> object. The join operation compares the values of the elements of the comparison <code>Source</code> to the values of the joined <code>Source</code>. The values that are the same in the joined and comparison objects participate in the join operation or are removed from participation, depending on the value of the <code>comparisonRule</code> parameter.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref559"></a>
<h4 class="sect3">Describing the comparisonRule Parameter</h4>
<p><a id="sthref560"></a><a id="sthref561"></a>The value of the <code>comparisonRule</code> parameter specifies which values of the joined <code>Source</code> participate in the join operation. The <code>comparisonRule</code> value also determines the sort order of the participating values. The comparison rule is one of the static constant fields of the <code>Source</code> class. The basic comparison rules are the following.</p>
<ul>
<li>
<p><a id="sthref562"></a><a id="sthref563"></a><code>COMPARISON_RULE_SELECT</code>, which specifies that only the elements of the joined <code>Source</code> that are also in the comparison <code>Source</code> participate in the join operation.</p>
</li>
<li>
<p><a id="sthref564"></a><a id="sthref565"></a><code>COMPARISON_RULE_REMOVE</code>, which specifies that only the elements of the joined <code>Source</code> that are not in the comparison <code>Source</code> participate in the join operation.</p>
</li>
</ul>
<p>The other comparison rules are all select operations that sort the resulting values in various ways. Those rules are the following.</p>
<ul>
<li>
<p><a id="sthref566"></a><code>COMPARISON_RULE_ASCENDING</code></p>
</li>
<li>
<p><code>COMPARISON_RULE_ASCENDING_NULLS_FIRST</code></p>
</li>
<li>
<p><code>COMPARISON_RULE_ASCENDING_NULLS_LAST</code></p>
</li>
<li>
<p><a id="sthref567"></a><code>COMPARISON_RULE_DESCENDING</code></p>
</li>
<li>
<p><code>COMPARISON_RULE_DESCENDING_NULLS_FIRST</code></p>
</li>
<li>
<p><code>COMPARISON_RULE_DESCENDING_NULLS_LAST</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref568"></a>
<h4 class="sect3">Describing the visible Parameter</h4>
<p><a id="sthref569"></a>The <code>visible</code> parameter is a <code>boolean</code> value that specifies whether the joined <code>Source</code> appears as an output of the <code>Source</code> that is derived by the join operation. If the value of the <code>visible</code> parameter is <code>true</code>, then the derived <code>Source</code> has an output that contains the elements drawn from the joined <code>Source</code>. If the value is <code>false</code>, then the derived <code>Source</code> does not have an output for the joined <code>Source</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABJEAGH"></a>
<div class="sect2">
<h3 class="sect2">Outputs of a Source</h3>
<p><a id="sthref570"></a><a id="sthref571"></a>The <code>join</code> method returns a derived <code>Source</code> that has the values of the elements of the base <code>Source</code> that are specified by the parameters of the method. Those values are the base values of the derived <code>Source</code>.</p>
<p>If the value of the <code>visible</code> parameter of the <code>join</code> method is <code>true</code>, then the joined <code>Source</code> becomes an output of the derived <code>Source</code>. The elements of the derived <code>Source</code> then have the values of the output and the base values, as specified by the other parameters of the join operation.</p>
<p><a id="sthref572"></a><a id="sthref573"></a><a id="sthref574"></a>A derived <code>Source</code> can have from zero to many outputs. A <code>Source</code> that is an output can itself have outputs. You can get the outputs of a <code>Source</code> by calling the <code>getOutputs</code> method, which returns a <code>List</code> of <code>Source</code> objects.</p>
<p>The examples in this <a href="#BABJEAGH">&#34;Outputs of a Source&#34;</a> topic all have simple join operations that produce <code>Source</code> objects that have one or more outputs. Because none of the <code>Source</code> objects in the join operations have inputs, the values of the derived <code>Source</code> objects produced by the join operations are the Cartesian products of the base and the joined <code>Source</code> objects.</p>
<p>Very different results occur from a join operation that involves a <code>Source</code> that has an input and a <code>Source</code> that matches with that input. For examples of <code>Source</code> objects with inputs and the matching of inputs, see <a href="#BABFDHFA">&#34;Inputs of a Source&#34;</a> and <a href="#i1018188">&#34;Matching a Source with an Input&#34;</a>.</p>
<a id="BABDCEHG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Producing a Source with an Output</h4>
<p><a id="sthref575"></a><a href="#BABFCECA">Example 5-2</a> uses the simplest signature of the <code>join</code> method to produce a <code>Source</code> that has one output. The example creates a list <code>Source</code>, <code>letters</code>, that has three elements, the values of which are A, B, and C. It also creates a list <code>Source</code>, <code>names</code>, that has three elements, the values of which are Stephen, Leo, and Molly.</p>
<div class="example">
<p class="titleinexample"><a id="BABFCECA"></a>Example 5-2 A Simple Join That Produces a Source with an Output</p>
<pre>Source letters = dp.createListSource(new String[] {&#34;A&#34;, &#34;B&#34;, &#34;C&#34;});
Source names = dp.createListSource(new String[] {&#34;Stephen&#34;, &#34;Leo&#34;, &#34;Molly&#34;});
Source lettersWithNames = letters.join(names);

// Oracle OLAP translates this shortcut signature of the join method into the
// following full signature, where dp is the DataProvider for the session.
// Source letters.join(names,
<a id="sthref576"></a>//                     dp.getEmptySource(),
//                     Source.COMPARISON_RULE_REMOVE,
//                     true);
</pre></div>
<!-- class="example" -->
<p>The <code>letters.join(names)</code> operation joins the elements of the base <code>Source</code>, <code>letters</code>, and the joined <code>Source</code>, <code>names</code>. Because the comparison <code>Source</code> has no elements, the join operation does not remove any of the elements that are in the joined <code>Source</code> in producing the derived <code>Source</code>. (The comparison <code>Source</code> is the empty <code>Source</code> that is returned by the <code>dp.getEmptySource()</code> parameter of the full <code>join</code> signature shown in the example.) The resulting derived <code>Source</code>, <code>lettersWithNames</code>, is the Cartesian product of the elements of the base <code>letters</code> and the joined <code>names</code>. Because both <code>letters</code> and <code>names</code> have three elements, the number of elements in <code>lettersWithNames</code> is nine.</p>
<p>Because the <code>visible</code> parameter of <code>letters.join(names)</code> is <code>true</code>, the derived <code>Source</code> has an output. Because no <code>elements</code> were removed from the joined <code>Source</code>, the derived <code>Source</code> has the values of all of the elements of the joined <code>Source</code>.</p>
<p>A <code>Cursor</code> for a <code>Source</code> has the same structure as the <code>Source</code>. A <code>Cursor</code> for the <code>lettersWithNames</code> <code>Source</code> has a <code>ValueCursor</code> for the base values of the derived <code>Source</code> and a <code>ValueCursor</code> for the output values. The following table presents the values of the <code>ValueCursor</code> objects. The table includes headings that are not in the <code>ValueCursor</code> objects.</p>
<pre>Output Values     Base Values
   Stephen             A
   Stephen             B
   Stephen             C
   Leo                 A
   Leo                 B
   Leo                 C
   Molly               A
   Molly               B
   Molly               C
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref577"></a>
<h4 class="sect3">Using COMPARISON_RULE_SELECT</h4>
<p><a id="sthref578"></a><a href="#BABHAHJD">Example 5-3</a> demonstrates using a comparison <code>Source</code> that has values and the comparison rule <code>COMPARISON_RULE_SELECT</code>. The example uses the <code>letter</code> and <code>names</code> <code>Source</code> objects from <a href="#BABFCECA">Example 5-2</a> and adds the <code>someNames</code> <code>Source</code>. It uses <code>someNames</code> as the comparison <code>Source</code>. The output of the <code>Source</code> derived from the join operation has only the names that are in both the joined <code>Source</code> and the comparison <code>Source</code>.</p>
<div class="example">
<p class="titleinexample"><a id="BABHAHJD"></a>Example 5-3 A Simple Join That Selects Elements of the Joined Source</p>
<pre>Source someNames = dp.createListSource(new String[] {&#34;Stephen&#34;, &#34;Molly&#34;});
Source lettersAndSelectedNames = 
  letters.join(names, someNames, Source.COMPARISON_RULE_SELECT, true);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>lettersAndSelectedNames</code> <code>Source</code> has the values specified by the <code>Source</code>. The following table presents the <code>Cursor</code> values and has headings added.</p>
<pre>Output Values     Base Values
   Stephen             A
   Stephen             B
   Stephen             C
   Molly               A
   Molly               B
   Molly               C
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref579"></a>
<h4 class="sect3">Using COMPARISON_RULE_REMOVE</h4>
<p><a id="sthref580"></a><a href="#BABFJAAH">Example 5-4</a> demonstrates using a comparison <code>Source</code> that has values and the comparison rule <code>COMPARISON_RULE_REMOVE</code>. That comparison rule removes from participation in the join operation those values that are the same in the joined and in the comparison <code>Source</code> objects. The output of the derived <code>Source</code> therefore has only the name from the joined <code>Source</code> that is not in the comparison <code>Source</code>.</p>
<p>The example has the same base, joined, and comparison <code>Source</code> objects as <a href="#BABHAHJD">Example 5-3</a>.</p>
<div class="example">
<p class="titleinexample"><a id="BABFJAAH"></a>Example 5-4 A Simple Join That Removes Elements of the Joined Source</p>
<pre>Source lettersAndNamesWithoutRemovedNames =
  letters.join(names,
               someNames,
               Source.COMPARISON_RULE_REMOVE, 
               true);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>lettersAndNamesWithoutRemovedNames</code> <code>Source</code> has the values specified by the <code>Source</code>. The following table presents the values and has headings added.</p>
<pre>Output Values     Base Values
   Leo                 A
   Leo                 B
   Leo                 C
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref581"></a>
<h4 class="sect3">Producing a Source with Two Outputs</h4>
<p>If you join a <code>Source</code> to a <code>Source</code> that has an output, and if the <code>visible</code> <code>parameter</code> is <code>true</code>, then the join operation produces a <code>Source</code> that has the joined <code>Source</code> as an additional output. The additional output becomes the first output, as shown in <a href="#BABBAIFI">Example 5-5</a>.</p>
<p><a id="sthref582"></a><a href="#BABBAIFI">Example 5-5</a> uses the <code>Source</code> objects from <a href="#BABHAHJD">Example 5-3</a> and creates another list <code>Source</code>, <code>colors</code>, that contains the names of two colors. The example joins the <code>colors</code> <code>Source</code> to the <code>lettersWithSelectedNames</code> <code>Source</code> to produce the <code>lettersWithSelectedNamesAndColors</code> <code>Source</code>.</p>
<p>The <code>lettersWithSelectedNames</code> <code>Source</code> has <code>names</code> as an output. The <code>lettersWithSelectedNamesAndColors</code> <code>Source</code> has both <code>colors</code> and <code>names</code> as outputs. The first output is <code>colors</code> and the second output is <code>names</code>.</p>
<div class="example">
<p class="titleinexample"><a id="BABBAIFI"></a>Example 5-5 A Simple Join That Produces a Source with Two Outputs</p>
<pre>Source colors = dp.createListSource(new String[] {&#34;Green&#34;, &#34;Maroon&#34;});

Source lettersWithSelectedNames = 
  letters.join(names,
               someNames,
               Source.COMPARISON_RULE_SELECT,
               true);
Source lettersWithSelectedNamesAndColors =
  lettersWithSelectedNames.join(colors);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>lettersWithSelectedNamesAndColors</code> <code>Source</code> has the values shown in the following table. The table has headings added.</p>
<pre>Output 1 Values     Output 2 Values     Base Values
      Green            Stephen               A
      Green            Stephen               B
      Green            Stephen               C
      Green            Molly                 A
      Green            Molly                 B
      Green            Molly                 C
      Maroon           Stephen               A
      Maroon           Stephen               B
      Maroon           Stephen               C
      Maroon           Molly                 A
      Maroon           Molly                 B
      Maroon           Molly                 C
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref583"></a>
<h4 class="sect3">Hiding an Output</h4>
<p><a id="sthref584"></a><a id="sthref585"></a>If the <code>visible</code> parameter of a <code>join</code> method is <code>false</code>, then the joined <code>Source</code> participates in the join operation but does not appear as an output of the <code>Source</code> derived by the join. <a href="#BABDJJDJ">Example 5-6</a> uses the <code>joinHidden</code> shortcut method to join the <code>lettersWithSelectedNames</code> and the <code>colors</code> <code>Source</code> objects from <a href="#BABBAIFI">Example 5-5</a>. The example includes in a comment the full <code>join</code> signature for the <code>joinHidden</code> shortcut.</p>
<div class="example">
<p class="titleinexample"><a id="BABDJJDJ"></a>Example 5-6 A Simple Join That Hides An Output</p>
<pre>Source lettersWithSelectedNamesAndHiddenColors =
  lettersWithSelectedNames.joinHidden(colors);

// The full signature of the joinHidden shortcut method is
// Source result = base.join(joined,
//                           dp.getEmptySource(),
//                           Source.COMPARISON_RULE_REMOVE,
//                           false);
// So if Source base = lettersWithSelectedNames and
// Source joined = colors, then the result Source is the same as the 
// lettersWithSelectedNamesAndHiddenColors Source.
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>lettersWithSelectedNamesAndHiddenColors</code> <code>Source</code> has the values shown in the following table. The table has headings added.</p>
<p>Note that the derived <code>lettersWithSelectedNamesAndHiddenColors</code> <code>Source</code> still has twelve elements, even though the values for the <code>colors</code> <code>Source</code> do not appear as output values. The derived <code>Source</code> has one set of the six values of the <code>lettersWithSelectedNames</code> <code>Source</code> for each value of the hidden <code>colors</code> <code>Source</code>.</p>
<p><a href="#BABBAIFI">Example 5-5</a> displays the following output.</p>
<pre>Output Values     Base Values
   Stephen             A
   Stephen             B
   Stephen             C
   Molly               A
   Molly               B
   Molly               C
   Stephen             A
   Stephen             B
   Stephen             C
   Molly               A
   Molly               B
   Molly               C
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABFDHFA"></a>
<div class="sect2">
<h3 class="sect2">Inputs of a Source</h3>
<p><a id="sthref586"></a><a id="sthref587"></a><a id="sthref588"></a>The examples in the <a href="#BABJEAGH">&#34;Outputs of a Source&#34;</a> topic all produce derived <code>Source</code> objects that have elements that are the Cartesian product of the unrelated base and joined <code>Source</code> objects. While such an operation can be useful, a more powerful aspect of <code>Source</code> objects is the ability to relate the elements of one <code>Source</code> to another <code>Source</code>. When such a relationship exists, you can derive other <code>Source</code> objects that are the result of operations between the related elements. For example, you can derive a <code>Source</code> that contains only selected elements of another <code>Source</code>. This relationship between elements is represented by the input of a <code>Source</code>.</p>
<p>A <code>Source</code> with an input is an incomplete specification of data. The input represents the type of <code>Source</code> that can have the elements that a join operation requires to complete the data specification. Before you can retrieve the data with a <code>Cursor</code>, you must match the input with a <code>Source</code> that has the elements that complete the specification.</p>
<p>You match an input with a <code>Source</code> by using the <code>join</code> or <code>recursiveJoin</code> method. The match occurs between the base <code>Source</code> and the joined <code>Source</code>.</p>
<p>The matching of an input acts as a filter so that the <code>Source</code> derived by the join operation has only the elements of the base <code>Source</code> whose values are related to those of the elements of the joined <code>Source</code>. The rules related to matching a <code>Source</code> with an input are described in <a href="#i1018188">&#34;Matching a Source with an Input&#34;</a>. That topic has examples that produce derived <code>Source</code> objects that are the result of the matching of an input.</p>
<p><a id="sthref589"></a><a id="sthref590"></a><a id="sthref591"></a>A <code>Source</code> can have from zero to many inputs. You can get all of the inputs of a <code>Source</code> by calling the <code>getInputs</code> method.</p>
<p>Some primary <code>Source</code> objects have inputs. You can derive a <code>Source</code> that has an input by using some methods of the <code>Source</code> class.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref592"></a>
<h4 class="sect3">Primary Source Objects with Inputs</h4>
<p><a id="sthref593"></a><a id="sthref594"></a><a id="sthref595"></a><a id="sthref596"></a>The primary <code>Source</code> objects for the <code>MdmDimensionedObject</code> subclasses <code>MdmAttribute</code> and <code>MdmMeasure</code> have inputs. The primary <code>Source</code> for an <code>MdmAttribute</code> has one input. The primary <code>Source</code> for an <code>MdmMeasure</code> has one or more inputs.</p>
<p><a id="sthref597"></a><a id="sthref598"></a>The inputs of an <code>MdmAttribute</code> or an <code>MdmMeasure</code> are the <code>Source</code> objects for the <code>MdmPrimaryDimension</code> objects that dimension the attribute or measure. To get the value of an attribute or a measure, you must join the attribute or measure with a <code>Source</code> that contains the related dimension members. The join operation matches the input of the attribute or measure with the <code>Source</code> that contains the dimension members. <a href="#BABJHBEG">Example 5-7</a> matches the input of an attribute with the dimension of that attribute. <a href="#BABFIEJH">Example 5-8</a> matches the inputs of a measure with the dimensions of that measure.</p>
</div>
<!-- class="sect3" -->
<a id="BABIBDAB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Deriving a Source with an Input</h4>
<p><a id="sthref599"></a><a id="sthref600"></a><a id="sthref601"></a><a id="sthref602"></a><a id="sthref603"></a>Some <code>Source</code> methods always return a <code>Source</code> that has an input. The <code>Source</code> returned by the <code>extract</code>, <code>position</code>, or <code>value</code> method has the base <code>Source</code> as an input. You can use these methods to produce a <code>Source</code> whose elements are derived, or filtered, from the elements of another <code>Source</code>.</p>
<p>The <code>value</code> method returns a <code>Source</code> that has the elements of the base <code>Source</code> and has the base <code>Source</code> as an input. You typically use the <code>Source</code> returned by the <code>value</code> method as the base or joined <code>Source</code> of a <code>join</code> method, or sometimes as the comparison <code>Source</code>. Several examples in this chapter and in <a href="select.htm#g1017484">Chapter 6</a> use the <code>value</code> method.</p>
<p>The <code>position</code> method returns a <code>Source</code> that has the position of each element of the base <code>Source</code> and that has the base <code>Source</code> as an input. For an example of using the <code>position</code> method, see <a href="select.htm#CBBHFCIH">Example 6-4</a>.</p>
<p>You use the <code>extract</code> method when elements of the <code>Source</code> objects that you want to join have <code>Source</code> objects as values. For examples of using the <code>extract</code> method, see <a href="#BABIJIFI">Example 5-12</a>, <a href="select.htm#CBBBGBGC">Example 6-8</a>, <a href="select.htm#CBBHGDGG">Example 6-13</a>, and <a href="select.htm#CBBFEDFJ">Example 6-14</a>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref604"></a>
<h4 class="sect3">Type of Inputs</h4>
<p><a id="sthref605"></a><a id="sthref606"></a><a id="sthref607"></a>The input of a <code>Source</code> derived by the <code>position</code> or <code>value</code> method, and an input intrinsic to an <code>MdmDimensionedObject</code>, are regular inputs. A regular input relates the elements of the <code>Source</code> with the input to the elements of the <code>Source</code> that matches with the input. You can get the regular inputs by calling the <code>getRegularInputs</code> method.</p>
<p><a id="sthref608"></a>The input of a <code>Source</code> returned by the <code>extract</code> method is an extraction input. You can get the extraction inputs by calling the <code>getExtractionInputs</code> method.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1018188"></a>
<div class="sect2">
<h3 class="sect2">Matching a Source with an Input</h3>
<p><a id="sthref609"></a><a id="sthref610"></a><a id="sthref611"></a><a id="sthref612"></a>In a join operation, the matching of a <code>Source</code> with an input occurs only between the base <code>Source</code> and the joined <code>Source</code>. A <code>Source</code> matches with an input if one of the following conditions is true.</p>
<ol>
<li>
<p>The <code>Source</code> is the same object as the input or it is a subtype of the input.</p>
</li>
<li>
<p>The <code>Source</code> has an output that is the same object as the input or the output is a subtype of the input.</p>
</li>
</ol>
<p>The join operation looks for the conditions in the order shown in the preceding list. It searches the list of outputs of the <code>Source</code> recursively, including any outputs of an output, looking for a match with the input. The search ends with the first matching <code>Source</code>. An input can match with only one <code>Source</code>.</p>
<p>When a <code>Source</code> with an input is joined to a <code>Source</code> that matches with the input, the derived <code>Source</code> returned by the <code>join</code> method has the elements of the base that are related to the elements specified by the parameters of the method. The derived <code>Source</code> does not have the input.</p>
<p>Matching a <code>Source</code> with an input does not affect the outputs of the base <code>Source</code> or the joined <code>Source</code>. If a base <code>Source</code> has an output that matches with the input of the joined <code>Source</code>, then the resulting <code>Source</code> does not have the input but it does have the output. If the base <code>Source</code> or the joined <code>Source</code> in a join operation has an input that is not matched in the operation, then the unmatched input is an input of the resulting <code>Source</code>.</p>
<p>The comparison <code>Source</code> of a <code>join</code> method does not participate in the input matching. If the comparison <code>Source</code> has an input, then that input is not matched and the <code>Source</code> returned by the <code>join</code> method has that same input.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref613"></a>
<h4 class="sect3">Matching the Input of the Source for an MdmAttribute</h4>
<p><a href="#BABJHBEG">Example 5-7</a> demonstrates the joining of the <code>Source</code> for an <code>MdmBaseAttribute</code> to the <code>Source</code> for an <code>MdmPrimaryDimension</code>. The example gets the local value attribute from the <code>MdmPrimaryDimension</code> for the CHANNEL_AWJ dimension. The <code>Source</code> for the attribute, <code>locValAttr</code>, has the <code>Source</code> for the <code>MdmPrimaryDimension</code> as an input.</p>
<p>In the example, <code>locValAttr</code> is the base <code>Source</code> of the join operation and <code>chanDim</code> is the joined <code>Source</code>. Because <code>chanDim</code> is an instance of the <code>Source</code> for the <code>MdmPrimaryDimension</code> for the CHANNEL_AWJ dimension, <code>chanDim</code> matches with the input of <code>locValAttr</code>. The result of the join is <code>dimMembersWithLocalValue</code>, which has <code>chanDim</code> as an output and does not have any inputs.</p>
<p>The <code>locValAttr</code> <code>Source</code> has four elements because each of the four members of the CHANNEL_AWJ dimension has a different local value. The <code>Source</code> derived by the join operation, <code>dimMembersWithLocalValue</code>, has four elements. The value of each element is the dimension member and the related attribute value. The dimension member is a value from the output and the attribute value is from the base.</p>
<p><a href="#BABJHBEG">Example 5-7</a> demonstrates matching the input of a base <code>Source</code> with the joined <code>Source</code>. In the example, <code>mdmDBSchema</code> is the <code>MdmDatabaseSchema</code> for the GLOBAL schema.</p>
<div class="example">
<p class="titleinexample"><a id="BABJHBEG"></a>Example 5-7 Getting an Attribute for a Dimension Member</p>
<pre>MdmStandardDimension mdmChanDim =
  mdmDBSchema.findOrCreateStandardDimension(&#34;CHANNEL_AWJ&#34;);
Source chanDim = mdmChanDim.getSource();
Source locValAttr = mdmChanDim.getLocalValueAttribute().getSource();
Source dimMembersWithLocalValue = locValAttr.join(chanDim);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>dimMembersWithLocalValue</code> <code>Source</code> has the values shown in the following table. The output values are the unique dimension member values derived from the joined <code>Source</code>, <code>chanDim</code>. The base values are derived from the base <code>Source</code>, <code>locValAttr</code>. The table has headings added.</p>
<pre>           Output Values                 Base Values
CHANNEL_PRIMARY::TOTAL_CHANNEL::TOTAL       TOTAL
CHANNEL_PRIMARY::CHANNEL::CAT               CAT
CHANNEL_PRIMARY::CHANNEL::DIR               DIR
CHANNEL_PRIMARY::CHANNEL::INT               INT
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref614"></a>
<h4 class="sect3">Matching the Inputs of a Measure</h4>
<p><a id="sthref615"></a><a href="#BABFIEJH">Example 5-8</a> demonstrates getting values from a measure. The example gets the <code>MdmCube</code> that contains the UNIT_PRICE measure and gets the <code>MdmBaseMeasure</code> for the measure from that cube. The cube, and the measures of the cube, are dimensioned by the PRODUCT_AWJ and TIME_AWJ dimensions. The example gets the <code>MdmPrimaryDimension</code> objects for those dimensions and gets the <code>Source</code> objects for those metadata objects.</p>
<p>The <code>Source</code> for the measure, <code>unitPrice</code>, has the <code>Source</code> objects for the two <code>MdmPrimaryDimension</code> objects as inputs. The example joins the <code>Source</code> for the measure with the <code>Source</code> objects for the dimensions. The join operations match the inputs of the measure with the <code>Source</code> objects for the dimensions.</p>
<p>The example first joins the <code>Source</code> for the PRODUCT_AWJ dimension to the <code>Source</code> for the measure. That <code>unitPrice.join(prodDim)</code> operation derives a <code>Source</code> that has base values from <code>unitPrice</code> and has <code>prodDim</code> as an output. It also has the <code>Source</code> for the TIME_AWJ dimension as an input. The next join operation joins the <code>Source</code> derived by <code>unitPrice.join(prodDim)</code> with <code>timeDim</code>, the <code>Source</code> for the TIME_AWJ dimension. That join operation matches the input of the <code>Source</code> derived by <code>unitPrice.join(prodDim)</code> with <code>timeDim</code>.</p>
<p>The <code>Source</code> derived by the second join operation is <code>pricesByProductAndTime</code>. That <code>Source</code> has no inputs and has the <code>Source</code> objects for the PRODUCT_AWJ and TIME_AWJ dimensions as outputs. A <code>Cursor</code> for <code>pricesByProductAndTime</code> contains the price of each product value for every time value.</p>
<p><a id="sthref616"></a>The example finally calls the <code>count</code> method of <code>pricesByProductAndTime</code>. That method returns the <code>NumberSource</code> <code>numPricesByProductAndTime</code>, which contains the number of elements of the <code>pricesByProductAndTime</code> <code>Source</code>. A <code>Cursor</code> for the <code>numPricesByProductAndTime</code> <code>Source</code> contains the value 4998, which is the number of measure values for the product and time tuples.</p>
<p><a id="sthref617"></a><a href="#BABFIEJH">Example 5-8</a> demonstrates matching the inputs of the base <code>Source</code> with the joined <code>Source</code>. In the example, <code>mdmDBSchema</code> is the <code>MdmDatabaseSchema</code> for the GLOBAL schema.</p>
<div class="example">
<p class="titleinexample"><a id="BABFIEJH"></a>Example 5-8 Getting Measure Values</p>
<pre>MdmCube mdmPriceCube =
  mdmDBSchema.findOrCreateCube(&#34;PRICE_CUBE_AWJ&#34;);
MdmBaseMeasure mdmUnitPrice =
  mdmPriceCube.findOrCreateBaseMeasure(&#34;UNIT_PRICE&#34;);
MdmStandardDimension mdmProdDim =
  mdmDBSchema.findOrCreateStandardDimension(&#34;PRODUCT_AWJ&#34;);
MdmTimeDimension mdmTimeDim =
  mdmDBSchema.findOrCreateTimeDimension(&#34;TIME_AWJ&#34;);

Source prodDim = mdmProdDim.getSource();
Source timeDim = mdmTimeDim.getSource();
Source unitPrice = mdmUnitPrice.getSource();

Source pricesByProductAndTime = unitPrice.join(prodDim).join(timeDim);
NumberSource numPricesByProductAndTime = pricesByProductAndTime.count();
</pre></div>
<!-- class="example" -->
<p>To produce a <code>Source</code> that contains only the measure values for certain products and times, you need to join the <code>Source</code> for the measure with <code>Source</code> objects that specify the dimension values that you want. You can produce such a selection by using methods of the primary <code>Source</code> for the dimension. One means of producing a <code>Source</code> that represents a selection of values of a <code>Source</code> is to use the <code>value</code> method.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref618"></a>
<h4 class="sect3">Using the value Method to Derive a Source with an Input</h4>
<p><a id="sthref619"></a><a id="sthref620"></a>In <a href="#BABFCCIA">Example 5-9</a>, the <code>lettersValue</code> <code>Source</code> is returned by the <code>letters.value()</code> method. The <code>lettersValue</code> <code>Source</code> has <code>letters</code> as an input. The input represents a relation between the values of the <code>Source</code> with the input and the values of the <code>Source</code> that matches with the input.</p>
<p>In the example, the join operation has <code>letters</code> as the base <code>Source</code> and <code>lettersValue</code> as the joined <code>Source</code>. The base <code>Source</code>, <code>letters</code>, matches with the input of <code>lettersValue</code>, which is also <code>letters</code>, because they are the same. The <code>Source</code> produced by the join operation, <code>lettersByLettersValue</code> has <code>lettersValue</code> as an output. It does not have an input. Each element of <code>lettersByLettersValue</code> has a base value from <code>letters</code> and the related value from <code>lettersValue</code>.</p>
<div class="example">
<p class="titleinexample"><a id="BABFCCIA"></a>Example 5-9 Using the value Method to Relate a Source to Itself</p>
<pre>Source letters = dp.createListSource(new String[] {&#34;A&#34;, &#34;B&#34;, &#34;C&#34;});
Source lettersValue = letters.value();
Source lettersByLettersValue = letters.join(lettersValue); 
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>lettersByLettersValue</code> <code>Source</code> has the values shown in the following table. The table has headings added.</p>
<pre>Output Values     Base Values
       A               A
       B               B
       C               C
</pre>
<p>Because <code>lettersByLettersValue</code> contains only those values of the base and joined <code>Source</code> objects that are related, the base values of the <code>Cursor</code> for <code>lettersByLettersValue</code> <code>Source</code> are the same as the output values. If the base and joined <code>Source</code> objects had been unrelated, as in <code>letters.join(letters)</code>, then the <code>Source</code> produced by the join operation would contain the Cartesian product of the base and joined <code>Source</code> objects.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref621"></a>
<h4 class="sect3">Using the value Method to Select Values of a Source</h4>
<p><a id="sthref622"></a><a id="sthref623"></a><a id="sthref624"></a><a id="sthref625"></a>By using the <code>value</code> method, you can derive a <code>Source</code> that is a selection of the elements of another <code>Source</code>. <a href="#BABBBAFI">Example 5-10</a> selects two elements from the <code>Source</code> for the PRODUCT_AWJ dimension from <a href="#BABJHBEG">Example 5-7</a>. The example demonstrates a base <code>Source</code> matching with the input of the joined <code>Source</code>.</p>
<div class="example">
<p class="titleinexample"><a id="BABBBAFI"></a>Example 5-10 Using the value Method to Select Elements of a Source</p>
<pre>Source productsToSelect = dp.createListSource(new String[]
                                  {&#34;PRODUCT_PRIMARY::ITEM::ENVY EXE&#34;,
                                   &#34;PRODUCT_PRIMARY::ITEM::ENVY STD&#34;});
Source selectedProducts = prodDim.join(prodDim.value(),
                                       productsToSelect,
                                       Source.COMPARISON_RULE_SELECT,
                                       false);  // Hide the output.
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>productsToSelect</code> <code>Source</code> has the following values.</p>
<pre>PRODUCT_PRIMARY::ITEM::ENVY EXE
PRODUCT_PRIMARY::ITEM::ENVY STD
</pre>
<p>A <code>Cursor</code> for the <code>selectedProducts</code> <code>Source</code> has the following values.</p>
<pre>PRODUCT_PRIMARY::ITEM::ENVY EXE
PRODUCT_PRIMARY::ITEM::ENVY STD
</pre>
<p><a id="sthref626"></a>The two <code>Source</code> objects contain the same values. However, the types of the objects are different. The type of the <code>productsToSelect</code> <code>Source</code> is the <code>Source</code> for the <code>FundamentalMetadataObject</code> for the String data type. The type of the <code>selectedProducts</code> <code>Source</code> is <code>prodDim</code> because <code>selectedProducts</code> is derived from <code>prodDim</code>. Therefore, <code>selectedProducts</code> is a subtype of <code>prodDim</code> and as such it can match with a <code>Source</code> that has the <code>Source</code> for the PRODUCT_AWJ dimension as an input, as shown in <a href="#BABBCGED">Example 5-11</a>.</p>
<p><a id="sthref627"></a><a href="#BABBCGED">Example 5-11</a> selects elements from the <code>Source</code> objects for two dimensions and then gets the measure values for the selected dimension members. <a href="#BABBCGED">Example 5-11</a> uses the same dimensions and measure as in <a href="#BABFIEJH">Example 5-8</a>. In <a href="#BABBCGED">Example 5-11</a>, however, the <code>Source</code> objects that match with the inputs of the <code>Source</code> for the measure are not the <code>Source</code> objects for the dimensions. Instead they are subtypes of the <code>Source</code> objects for the dimensions. The subtypes specify selected members of the dimensions. The <code>Source</code> that is derived by joining the measure with the dimensions, <code>pricesForSelectedProductsAndTimes</code>, has six elements, which specify only the measure values for the two products for the three time values, instead of the 4998 elements of the <code>pricesByProductAndTime</code> <code>Source</code> in <a href="#BABFIEJH">Example 5-8</a>. In <a href="#BABBCGED">Example 5-11</a>, <code>mdmDBSchema</code> is the <code>MdmDatabaseSchema</code> for the GLOBAL schema.</p>
<div class="example">
<p class="titleinexample"><a id="BABBCGED"></a>Example 5-11 Using Derived Source Objects to Select Measure Values</p>
<pre>// Create lists of product and time dimension members.
Source productsToSelect = dp.createListSource(new String[]
                                           {&#34;PRODUCT_PRIMARY::ITEM::ENVY EXE&#34;,
                                            &#34;PRODUCT_PRIMARY::ITEM::ENVY STD&#34;});
Source timesToSelect = dp.createListSource(new String[]
                                           {&#34;CALENDAR_YEAR::MONTH::2000.01&#34;,
                                            &#34;CALENDAR_YEAR::MONTH::2001.01&#34;,
                                            &#34;CALENDAR_YEAR::MONTH::2002.01&#34;});
// Get the PRICE_CUBE_AWJ cube.
MdmCube mdmPriceCube = mdmDBSchema.findOrCreateCube(&#34;PRICE_CUBE_AWJ&#34;);
// Get the UNIT_PRICE measure from the cube.
MdmBaseMeasure mdmUnitPrice = 
  mdmPriceCube.findOrCreateBaseMeasure(&#34;UNIT_PRICE&#34;);
// Get the PRODUCT_AWJ and TIME_AWJ dimensions.
MdmStandardDimension mdmProdDim =
  mdmDBSchema.findOrCreateStandardDimension(&#34;PRODUCT_AWJ&#34;);
MdmTimeDimension mdmTimeDim =
  mdmDBSchema.findOrCreateTimeDimension(&#34;TIME_AWJ&#34;);
// Get the Source objects for the dimensions and the measure.
Source prodDim = mdmProdDim.getSource();
Source timeDim = mdmTimeDim.getSource();
Source unitPrice = mdmUnitPrice.getSource();
// Using the value method, derive Source objects that specify the selected 
// dimension members.
Source selectedProducts = prodDim.join(prodDim.value(),
                                       productsToSelect,
                                       Source.COMPARISON_RULE_SELECT,
                                       false);
Source selectedTimes = timeDim.join(timeDim.value(),
                                    timesToSelect,
                                    Source.COMPARISON_RULE_SELECT,
                                    false);
// Derive a Source that specifies the unitPrice values for the selected products
// and times.
Source pricesForSelectedProductsAndTimes = unitPrice.join(selectedProducts)
                                                    .join(selectedTimes);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>pricesForSelectedProductsAndTimes</code> <code>Source</code> has the values shown in the following table. The table has headings added.</p>
<pre>            Month                         Product                Price
-----------------------------  -------------------------------  -------
CALENDAR_YEAR::MONTH::2000.01  PRODUCT_PRIMARY::ITEM::ENVY EXE  3358.02
CALENDAR_YEAR::MONTH::2000.01  PRODUCT_PRIMARY::ITEM::ENVY STD  3000.11
CALENDAR_YEAR::MONTH::2001.01  PRODUCT_PRIMARY::ITEM::ENVY EXE  3223.28
CALENDAR_YEAR::MONTH::2001.01  PRODUCT_PRIMARY::ITEM::ENVY STD  2426.07
CALENDAR_YEAR::MONTH::2002.01  PRODUCT_PRIMARY::ITEM::ENVY EXE  3008.95
CALENDAR_YEAR::MONTH::2002.01  PRODUCT_PRIMARY::ITEM::ENVY STD  2140.71
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref628"></a>
<h4 class="sect3">Using the extract Method to Combine Elements of Source Objects</h4>
<p>The <code>extract</code> method derives a <code>Source</code> that has the base <code>Source</code> as an input. You use the <code>extract</code> method when the values of the elements of a <code>Source</code> are <code>Source</code> objects themselves.</p>
<p><a id="sthref629"></a><a href="#BABIJIFI">Example 5-12</a> uses the <code>selectValues</code> method to derive two selections of elements from a <code>StringSource</code> for the PRODUCT_AWJ dimension. The <code>selectValues</code> method is a shortcut for the full <code>join</code> signature of the methods in <a href="#BABBBAFI">Example 5-10</a> and <a href="#BABBCGED">Example 5-11</a> that produce the <code>selectedProducts</code> and <code>selectedTimes</code> <code>Source</code> objects.</p>
<p><a id="sthref630"></a><a href="#BABIJIFI">Example 5-12</a> creates a list <code>Source</code>, <code>sourcesToCombine</code>, that has the two derived <code>Source</code> objects as element values. The <code>sourcesToCombine.extract()</code> method produces <code>sourcesToCombineWithAnInput</code>, which is a <code>Source</code> that has <code>sourcesToCombine</code> as an input. The join operation <code>sourcesToCombineWithAnInput.joinHidden(sourcesToCombine)</code> matches the input of <code>sourcesToCombineWithAnInput</code> with the joined <code>sourcesToCombine</code> and produces <code>combinedSources</code>, which has no inputs or outputs. A shortcut for this combining of <code>Source</code> elements is the <code>appendValues</code> method.</p>
<div class="example">
<p class="titleinexample"><a id="BABIJIFI"></a>Example 5-12 Extracting Elements of a Source</p>
<pre>MdmStandardDimension mdmProdDim =
  mdmDBSchema.findOrCreateStandardDimension(&#34;PRODUCT_AWJ&#34;);
StringSource prodDim = (StringSource) mdmProdDim.getSource();
Source productsToSelect = prodDim.selectValues(new String[]
                                           {&#34;PRODUCT_PRIMARY::ITEM::ENVY ABM&#34;,
                                            &#34;PRODUCT_PRIMARY::ITEM::ENVY EXE&#34;,
                                            &#34;PRODUCT_PRIMARY::ITEM::ENVY STD&#34;});
Source moreProductsToSelect = prodDim.selectValues(new String[]
                                           {&#34;PRODUCT_PRIMARY::ITEM::SENT FIN&#34;,
                                            &#34;PRODUCT_PRIMARY::ITEM::SENT MM&#34;,
                                            &#34;PRODUCT_PRIMARY::ITEM::SENT STD&#34;});
Source sourcesToCombine = 
  dp.createListSource(new Source[] {productsToSelect, moreProductsToSelect});
Source sourcesToCombineWithAnInput = sourcesToCombine.extract();
Source combinedProducts = 
  sourcesToCombineWithAnInput.joinHidden(sourcesToCombine);
</pre></div>
<!-- class="example" -->
<p>A <code>Cursor</code> for the <code>combinedProducts</code> <code>Source</code> has the following values.</p>
<pre>PRODUCT_PRIMARY::ITEM::ENVY ABM
PRODUCT_PRIMARY::ITEM::ENVY EXE
PRODUCT_PRIMARY::ITEM::ENVY STD
PRODUCT_PRIMARY::ITEM::SENT FIN
PRODUCT_PRIMARY::ITEM::SENT MM
PRODUCT_PRIMARY::ITEM::SENT STD
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBAIJAAA"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Describing Parameterized Source Objects</h2>
<p><a id="sthref631"></a><a id="sthref632"></a><a id="sthref633"></a><a id="sthref634"></a>Parameterized <code>Source</code> objects provide a way of specifying a query and retrieving different result sets for the query by changing the set of elements specified by the parameterized <code>Source</code>. You create a parameterized <code>Source</code> with a <code>createSource</code> method of the <code>Parameter</code>. The <code>Parameter</code> supplies the value that the parameterized <code>Source</code> specifies.</p>
<p><a href="#CBAGGBDB">Example 5-13</a> in this topic is a very simple demonstration of using a <code>Parameter</code> object. A typical use of a <code>Parameter</code> is to specify the page edges of a cube, as shown in <a href="select.htm#CBAGDGHE">Example 6-9</a>. Another use of a <code>Parameter</code> is to fetch from the server only the set of elements that you currently need. <a href="select.htm#CBBCFEBC">Example 6-15</a> demonstrates using <code>Parameter</code> objects to fetch different sets of elements.</p>
<p>When you create a <code>Parameter</code> object, you supply an initial value for the <code>Parameter</code>. You then create the parameterized <code>Source</code> using the <code>Parameter</code>. You include the parameterized <code>Source</code> in specifying a query. You create a <code>Cursor</code> for the query. You can change the value of the <code>Parameter</code> with the <code>setValue</code> method, which changes the set of elements that the query specifies. Using the same <code>Cursor</code>, you can then retrieve the new set of values.</p>
<p><a id="sthref635"></a><a id="sthref636"></a><a id="sthref637"></a><a id="sthref638"></a><a id="sthref639"></a><a href="#CBAGGBDB">Example 5-13</a> demonstrates the use of a <code>Parameter</code> and a parameterized <code>Source</code> to specify a member in a dimension. The example gets the <code>MdmStandardDimension</code> for the PRODUCT_AWJ dimension and gets the <code>Source</code> for the <code>MdmStandardDimension</code> cast as a <code>StringSource</code>.</p>
<p>The example creates a <code>StringParameter</code> object that has a dimension member as the initial value. It then creates a parameterized <code>Source</code>, <code>paramProdSel</code>, by using the <code>createSource</code> method of the <code>StringParameter</code>. Next it uses <code>paramProdSel</code> as the comparison <code>Source</code> in a join operation that selects the dimension member.</p>
<p>The example gets the <code>Source</code> for the local value attribute of the dimension. It joins that <code>Source</code>, <code>locValAttr</code>, with <code>paramProdSel</code>. That join operation produces the <code>dimMemberWithLocalValue</code> <code>Source</code>.</p>
<p>The example creates a <code>Cursor</code> for <code>dimMemberWithLocalValue</code> and displays the value of the <code>Cursor</code>. After resetting the <code>Cursor</code> position and changing the value of the <code>prodParam</code> <code>StringParameter</code>, the example displays the value of the <code>Cursor</code> again.</p>
<p>The <code>dp</code> object is the <code>DataProvider</code>. The <code>getContext</code> method gets a <code>Context11g</code> object that has a method that commits the current <code>Transaction</code> and a method that displays the values of a <code>Cursor</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CBAGGBDB"></a>Example 5-13 <a id="sthref640"></a><a id="sthref641"></a><a id="sthref642"></a><a id="sthref643"></a>Using a Parameterized Source to Change a Dimension Selection</p>
<pre>MdmStandardDimension mdmProdDim =
  mdmDBSchema.findOrCreateStandardDimension(&#34;PRODUCT_AWJ&#34;);
StringSource prodDim = (StringSource) mdmProdDim.getSource();

StringParameter prodParam =
  new StringParameter(dp, &#34;PRODUCT_PRIMARY::FAMILY::LTPC&#34;);
Source prodParamSrc = prodParam.createSource();
Source paramProdSel = prodDim.join(prodDim.value(), prodParamSrc);

Source locValAttr = mdmProdDim.getLocalValueAttribute().getSource();
Source dimMemberWithLocalValue = locValAttr.join(paramProdSel);

// Commit the Transaction.
getContext().commit();

// Create a Cursor for the Source.
CursorManager  cursorMngr = dp.createCursorManager(dimMemberWithLocalValue);
Cursor cursor = cursorMngr.createCursor();

// Display the value of the Cursor.
getContext().displayCursor(cursor);

// Change the product parameter value.
prodParam.setValue(&#34;PRODUCT_PRIMARY::FAMILY::DTPC&#34;);

// Reset the Cursor position to 1
cursor.setPosition(1);

// Display the value of the Cursor again.
getContext().displayCursor(cursor);
</pre></div>
<!-- class="example" -->
<p>The <code>Cursor</code> for <code>dimMemberWithLocalValue</code> displays the following.</p>
<pre>PRODUCT_PRIMARY::FAMILY::LTPC,LTPC
</pre>
<p>After changing the value of the <code>StringParameter</code> and resetting the position of the <code>Cursor</code>, the <code>Cursor</code> for <code>dimMemberWithLocalValue</code> displays the following.</p>
<pre>PRODUCT_PRIMARY::FAMILY::DTPC,DTPC
</pre></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4769">
<tr>
<td class="cellalignment4776">
<table class="cellalignment4774">
<tr>
<td class="cellalignment4773"><a href="create.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4773"><a href="select.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4778">
<table class="cellalignment4772">
<tr>
<td class="cellalignment4773"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4773"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4773"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4773"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4773"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4773"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>