<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79262"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Understanding%20OLAP%20Java%20API%20Metadata"></a><title>Understanding OLAP Java API Metadata</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-06-27T7:32:40Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP Java API Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17707-05"/>
<meta name="dcterms.isVersionOf" content="OLAAP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="intro.htm" title="Previous" type="text/html"/>
<link rel="Next" href="discover.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17707-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/19</span> <!-- End Header -->
<div class="chapter"><a id="BABHIFDH"></a>
<h1 class="chapter"><span class="secnum">2</span> Understanding OLAP Java API Metadata</h1>
<p>This chapter describes the classes in the Oracle OLAP Java API that represent OLAP dimensional and relational metadata objects. It also describes the classes that provide access to the metadata objects and to data sources, or that contain information about the metadata objects. This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#CIADBGIG">Overview of OLAP Java API Metadata Classes</a></p>
</li>
<li>
<p><a href="#CIAHJBEH">Identifying, Describing, and Classifying Metadata Objects</a></p>
</li>
<li>
<p><a href="#CIAIJDCI">Providing Metadata Objects</a></p>
</li>
<li>
<p><a href="#CIACJDHG">Providing Access to Data Sources</a></p>
</li>
</ul>
<p>For more information on getting existing metadata objects, see <a href="discover.htm#g1015325">Chapter 3, &#34;Discovering Metadata&#34;</a>. For more information on creating metadata objects, see <a href="create.htm#g1008851">Chapter 4, &#34;Creating Metadata and Analytic Workspaces&#34;</a>.</p>
<a id="CIADBGIG"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of OLAP Java API Metadata Classes</h2>
<p><a href="intro.htm#g1010651">Chapter 1</a> describes the OLAP dimensional data model and briefly mentions some of the OLAP Java API classes that implement that model. Those classes are in the <code>oracle.olapi.metadata</code> packages. Using those classes, you can do the following tasks.</p>
<ul>
<li>
<p>Gain access to the available metadata objects</p>
</li>
<li>
<p>Create new metadata objects</p>
</li>
<li>
<p>Deploy metadata objects in an analytic workspace or as relational objects</p>
</li>
<li>
<p>Map metadata objects to data sources</p>
</li>
<li>
<p>Export metadata objects to XML or import them from XML</p>
</li>
<li>
<p>Create <code>Source</code> objects to query the data</p>
</li>
</ul>
<p><a href="#CIAFCFGJ">Figure 2-1</a> shows the <code>oracle.olapi.metadata</code> packages.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIAFCFGJ"></a>Figure 2-1 The oracle.olapi.metadata Packages</p>
<img width="339" height="171" src="img/mtdtpkgs.gif" alt="Description of Figure 2-1 follows"/><br/>
<a id="sthref88" href="img_text/mtdtpkgs.htm">Description of &#34;Figure 2-1 The oracle.olapi.metadata Packages&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a id="sthref89"></a><a id="sthref90"></a>The packages are the following:</p>
<ul>
<li>
<p><code>oracle.olapi.metadata</code>, which has interfaces and abstract classes that specify the most basic characteristics of metadata objects and metadata providers.</p>
</li>
<li>
<p><a id="sthref91"></a><a id="sthref92"></a><code>oracle.olapi.metadata.mdm</code>, which has classes that implement the MDM (multidimensional model) metadata model. This package has classes that represent the metadata objects, classes that provide access to those objects, and classes that contain descriptive information about the objects.</p>
</li>
<li>
<p><code>oracle.olapi.metadata.deployment</code>, which has classes that specify the organization of a metadata object as an analytic workspace object or as a relational object.</p>
</li>
<li>
<p><code>oracle.olapi.metadata.mapping</code>, which has classes that map a metadata object to relational data sources.</p>
</li>
</ul>
<p><a id="sthref93"></a><a id="sthref94"></a>Some of the classes in the <code>oracle.olapi.metadata.mdm</code> package directly correspond to OLAP dimensional metadata objects. <a href="#CIAIBAEB">Table 2-1</a> presents some of these correspondences.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref95"></a><a id="CIAIBAEB"></a>Table 2-1 Corresponding Dimensional and MDM Objects</p>
<table class="cellalignment4781" title="Corresponding Dimensional and MDM Objects" summary="OLAP dimensional metadata objects and corresponding MDM metadata objects." dir="ltr">
<thead>
<tr class="cellalignment4770">
<th class="cellalignment4782" id="r1c1-t2">Dimensional Metadata Objects</th>
<th class="cellalignment4782" id="r1c2-t2">MDM Metadata Objects</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r2c1-t2" headers="r1c1-t2">
<p>Cube</p>
</td>
<td class="cellalignment4776" headers="r2c1-t2 r1c2-t2">
<p><code>MdmCube</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r3c1-t2" headers="r1c1-t2">
<p>Measure</p>
</td>
<td class="cellalignment4776" headers="r3c1-t2 r1c2-t2">
<p><code>MdmBaseMeasure</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r4c1-t2" headers="r1c1-t2">
<p>Calculated measure</p>
</td>
<td class="cellalignment4776" headers="r4c1-t2 r1c2-t2">
<p><code>MdmDerivedMeasure</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r5c1-t2" headers="r1c1-t2">
<p>Measure folder</p>
</td>
<td class="cellalignment4776" headers="r5c1-t2 r1c2-t2">
<p><code>MdmOrganizationalSchema</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r6c1-t2" headers="r1c1-t2">
<p>Dimension</p>
</td>
<td class="cellalignment4776" headers="r6c1-t2 r1c2-t2">
<p><code>MdmTimeDimension</code> and <code>MdmStandardDimension</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r7c1-t2" headers="r1c1-t2">
<p>Hierarchy</p>
</td>
<td class="cellalignment4776" headers="r7c1-t2 r1c2-t2">
<p><code>MdmLevelHierarchy</code> and <code>MdmValueHierarchy</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r8c1-t2" headers="r1c1-t2">
<p>Level</p>
</td>
<td class="cellalignment4776" headers="r8c1-t2 r1c2-t2">
<p><code>MdmDimensionLevel</code> and <code>MdmHierarchyLevel</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r9c1-t2" headers="r1c1-t2">
<p>Attribute</p>
</td>
<td class="cellalignment4776" headers="r9c1-t2 r1c2-t2">
<p><code>MdmBaseAttribute</code> and <code>MdmDerivedAttribute</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a id="sthref96"></a><a id="sthref97"></a>Other classes in the package correspond to relational objects. <a href="#CIAEJDCH">Table 2-2</a> shows those correspondences.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref98"></a><a id="CIAEJDCH"></a>Table 2-2 Corresponding Relational and MDM Objects</p>
<table class="cellalignment4781" title="Corresponding Relational and MDM Objects" summary="Relational objects and corresponding MDM metadata objects." dir="ltr">
<thead>
<tr class="cellalignment4770">
<th class="cellalignment4782" id="r1c1-t3">Relational Objects</th>
<th class="cellalignment4782" id="r1c2-t3">MDM Metadata Objects</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r2c1-t3" headers="r1c1-t3">
<p>Schema</p>
</td>
<td class="cellalignment4776" headers="r2c1-t3 r1c2-t3">
<p><code>MdmDatabaseSchema</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r3c1-t3" headers="r1c1-t3">
<p>Table</p>
</td>
<td class="cellalignment4776" headers="r3c1-t3 r1c2-t3">
<p><code>MdmTable</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r4c1-t3" headers="r1c1-t3">
<p>Table column</p>
</td>
<td class="cellalignment4776" headers="r4c1-t3 r1c2-t3">
<p><code>MdmColumn</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="CIAHJBEH"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Identifying, Describing, and Classifying Metadata Objects</h2>
<p>Most OLAP Java API metadata objects have a unique identifier (ID), a name, and an owner or a containing object. You can also associate descriptions and classifications to most metadata objects.</p>
<p><a id="sthref99"></a>Most metadata classes extend the abstract <code>oracle.olapi.metadata.BaseMetadataObject</code> class. A <code>BaseMetadataObject</code> can have a name and an ID. You can get most metadata objects by name. The ID is used internally by Oracle OLAP, but an application can also use the ID to get some metadata objects.</p>
<p><a id="sthref100"></a><a id="sthref101"></a><a id="sthref102"></a><a id="sthref103"></a>A <code>BaseMetadataObject</code> also has an owner, which is returned by the <code>getOwner</code> method. For most metadata objects, the owner is an <code>MdmDatabaseSchema</code>. For the <code>MdmRootSchema</code> and <code>MdmMeasureDimension</code> objects, the owner is the root schema. For an <code>MdmViewColumn</code>, which is not a subclass of <code>BaseMetadataObject</code>, the <code>getOwner</code> method returns the owning implementation of the <code>MdmViewColumnOwner</code> interface, such as an <code>MdmPrimaryDimension</code>, an <code>MdmBaseAttribute</code>, or an <code>MdmMeasure</code>. An <code>MdmViewColumn</code> represents a column in an OLAP view. For information on OLAP views, see <a href="#BABJBAIF">&#34;Using OLAP Views&#34;</a>.</p>
<p><a id="sthref104"></a><a id="sthref105"></a>Some <code>BaseMetadataObject</code> objects are contained by the metadata object that created them. For example, an <code>MdmBaseMeasure</code> is contained by the <code>MdmCube</code> that created it. You can get the container for a metadata object by calling the <code>getContainedByObject</code> method.</p>
<p>The <code>MdmObject</code> class, which is an abstract subclass of <code>BaseMetadataObject</code>, adds associations with descriptive objects and classifications. Typically, a descriptive object contains a name or descriptive text that you associate with the metadata object itself. Applications often use a descriptive object for display purposes in a user interface. A classification is a string value that your application assigns to the metadata object. Your application handles the classification for whatever purpose you want.</p>
<a id="CIAEGDJC"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Identifying Objects</h3>
<p>You can identify a <code>BaseMetadataObject</code> object by name and by ID. Namespaces identify the type and the format of legacy metadata objects.</p>
<a id="BABDICBC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Getting and Setting Names</h4>
<p><a id="sthref106"></a><a id="sthref107"></a><a id="sthref108"></a><a id="sthref109"></a>Most metadata objects have a name that you can get by calling the <code>getName</code> method of the object. For some objects, you can assign a name when you create the object. For example, an <code>oracle.olapi.metadata.deployment.AW</code> object represents an analytic workspace. When you create an <code>AW</code> by calling the <code>findOrCreateAW</code> method of an <code>MdmDatabaseSchema</code>, you use the <code>publicName</code> parameter of the method to specify a name for the <code>AW</code> object that the method returns.</p>
<p><a id="sthref110"></a><a id="sthref111"></a><a id="sthref112"></a>For some objects, you can use the <code>setName</code> method to change the name of an existing object. For example, you can change the name of an <code>MdmStandardDimension</code> by calling the <code>setName</code> method of the dimension object. The new name does not take effect until you commit the root <code>Transaction</code> of the session. After you call <code>setName</code>, but before you commit the root <code>Transaction</code>, the <code>getNewName</code> method returns the new name while the <code>getName</code> method returns the existing name. For more information on getting objects by name, see <a href="transact.htm#i1006165">&#34;About Creating a Metadata Object or a Query in a Transaction&#34;</a></p>
<p>You can get some objects by name from an <code>MdmDatabaseSchema</code>. For more information on getting objects by name, see <a href="#CIAGFAGH">&#34;Representing Schemas&#34;</a>.</p>
<p>For use in displaying names or descriptions in a user interface, or for any purpose you want, you can associate any number of names and descriptions with an <code>MdmObject</code> by using the <code>MdmDescription</code> class. For information on using that class, see <a href="#CIACGGDE">&#34;Using Descriptions&#34;</a>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref113"></a>
<h4 class="sect3">Describing Unique Identifiers</h4>
<p><a id="sthref114"></a><a id="sthref115"></a><a id="sthref116"></a>Most metadata objects have a unique identifier (ID). The identifier has one of the following forms.</p>
<ul>
<li>
<p><code>objectName</code></p>
</li>
<li>
<p><code>ownerName.objectName</code></p>
</li>
<li>
<p><code>ownerName.containerName.objectName</code></p>
</li>
</ul>
<p><a id="sthref117"></a>For example, for the <code>MdmDatabaseSchema</code> that represents the schema for the user <code>GLOBAL</code>, the identifier returned by the <code>getID</code> method is <code>GLOBAL</code>. For an <code>MdmPrimaryDimension</code> named PRODUCT_AWJ, the <code>getID</code> method returns <code>GLOBAL.PRODUCT_AWJ</code> and for an <code>MdmLevelHierarchy</code> of that dimension named PRODUCT_PRIMARY, the method returns <code>GLOBAL.PRODUCT_AWJ.PRODUCT_PRIMARY</code>.</p>
<p>The ID of a metadata object is persistent. However, if the name or the owner of a metadata object changes, then the ID changes as well. For more information on getting objects by ID, see <a href="#CIAHDIGB">&#34;Getting Metadata Objects by ID&#34;</a>.</p>
<p>For a legacy 10g metadata object, the first part of the identifier is a namespace. The namespace is followed by the namespace delimiter, which is two periods. An example of the identifier of a 10g dimension is <code>AWXML_DIMENSION..GLOBAL.PRODUCT_AW</code>.</p>
</div>
<!-- class="sect3" -->
<a id="BABFCIJH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Supporting Legacy Metadata Objects</h4>
<p><a id="sthref118"></a><a id="sthref119"></a>In Oracle Database, Release 11<span class="italic">g</span>, Oracle Database, Release 11<span class="italic">g</span> Oracle OLAP supports legacy 10<span class="italic">g</span> OLAP Java API applications. Namespaces identify 10<span class="italic">g</span> metadata objects and enable them to exist in the same session as 11<span class="italic">g</span> objects.</p>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref120"></a>
<h5 class="sect4">Supporting Legacy Applications</h5>
<p><a id="sthref121"></a>To support legacy applications that use OLAP metadata objects that were created in 10<span class="italic">g</span>, the <code>oracle.olapi.data.source.DataProvider</code> class has a metadata reader mode. By default, the metadata reader recognizes Oracle OLAP 10<span class="italic">g</span> and 11<span class="italic">g</span> metadata objects. You can specify a metadata reader mode with a property of a <code>java.util.Properties</code> object or with a string in the proper XML format. For information on the modes and how to specify one, see the constructor methods of the <code>DataProvider</code> class in the <a class="olink OLAPI" href="../OLAPI/toc.htm"><span class="italic">Oracle OLAP Java API Reference</span></a> documentation.</p>
</div>
<!-- class="sect4" -->
<a id="BABCJAED"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Describing Namespaces</h5>
<p><a id="sthref122"></a><a id="sthref123"></a><a id="sthref124"></a>In Oracle Database, Release 10<span class="italic">g</span>, an Oracle OLAP cube, dimension, or measure folder could have the same name as a relational table or view. In Release 11<span class="italic">g</span>, top-level OLAP metadata objects are stored in the Oracle Database data dictionary, so they cannot have the same name as another relational object. A namespace designation allows a legacy OLAP Java API 10<span class="italic">g</span> metadata object to exist in the same session as 11<span class="italic">g</span> metadata objects. Such legacy metadata objects were created by using classes in the <code>oracle.olapi.AWXML</code> package of the Oracle OLAP Analytic Workspace Java API or by using CWM PL/SQL packages. For 10<span class="italic">g</span> and 11<span class="italic">g</span> objects to exist in the same session, the metadata reader mode of the <code>DataProvider</code> must be set to <code>ALL</code>. The <code>ALL</code> mode is the default metadata reader mode. For more information on metadata reader mode settings, see the <code>DataProvider</code> class documentation in <a class="olink OLAPI" href="../OLAPI/toc.htm"><span class="italic">Oracle OLAP Java API Reference</span></a>.</p>
<p>The metadata objects for a 10<span class="italic">g</span> cube, dimension, and measure folder are represented in 11<span class="italic">g</span> by the <code>MdmCube</code>, <code>MdmPrimaryDimension</code>, and <code>MdmSchema</code> classes. An instance of one of those classes can have a namespace associated with it, which is returned by the <code>getNamespace</code> method. For an 11<span class="italic">g</span> object, the namespace is null.</p>
<p>The 11<span class="italic">g</span> XML definition of a 10<span class="italic">g</span> object has a <code>Namespace</code> attribute. For information on exporting and importing XML definitions of metadata objects, see <a href="#BABCIGIG">&#34;Exporting and Importing Metadata as XML Templates&#34;</a>.</p>
<p>The namespace of a legacy metadata object identifies the metadata format and the type of object. It begins with either <code>AWXML_</code> or <code>CWM_</code> and then has the type of object, such as <code>CUBE</code> or <code>DIMENSION</code>. For example, a dimension created by using the Oracle OLAP Analytic Workspace Java API in Oracle Database 10<span class="italic">g</span>, Release 2 (10.2), would have the namespace <code>AWXML_DIMENSION</code> in 11<span class="italic">g</span>.</p>
<p><a id="sthref125"></a>The valid namespaces are represented by static constant fields of the <code>MdmMetadataProvider</code> class. The <code>getValidNamespaces</code> method of that class returns a list of the valid namespaces, including the default namespace. You cannot create a new namespace.</p>
<p><a id="sthref126"></a>You can use the constant fields to get a legacy metadata object from an <code>MdmDatabaseSchema</code>. For example, the following code gets the PRODUCT_AW dimension. In the code, <code>mdmDBSchema</code> is the <code>MdmDatabaseSchema</code> for the GLOBAL user.</p>
<pre>MdmStandardDimension mdmProdAWDim =
  mdmDBSchema.findOrCreateStandardDimension(&#34;PRODUCT_AW&#34;,
    MdmMetadataProvider.AWXML_DIMENSION_NAMESPACE);
</pre>
<p><a id="sthref127"></a>In the <code>ALL</code> metadata reader mode, you get an existing 10<span class="italic">g</span> metadata object but you cannot create a new one. If the legacy metadata object does not exist, the method returns an 11<span class="italic">g</span> object that has the specified name.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIACGGDE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Descriptions</h3>
<p><a id="sthref128"></a><a id="sthref129"></a>With an <code>MdmDescription</code> object, you can associate descriptive information with an <code>MdmObject</code> object. An <code>MdmDescriptionType</code> object represents the type of description of an <code>MdmDescription</code>. You can use <code>MdmDescription</code> objects to display names, descriptions, or other information for a metadata object in a user interface. <code>MdmDescription</code> objects are created, assigned, and handled entirely by your application.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A descriptive name that you associate with an <code>MdmObject</code> through an <code>MdmDescription</code> is not the object name that is returned by the <code>MdmObject.getName</code> method. The object name is used by Oracle OLAP to identify the object internally. A descriptive name is used only by an application.</div>
<p><a id="sthref130"></a><a id="sthref131"></a>The OLAP Java API defines some types of descriptions. The <code>MdmDescriptionType</code> class has static methods that provide the following description types.</p>
<div class="inftblinformal">
<table class="cellalignment4783" title="Defined Description Types" summary="Description types that are available through static methods of the MdmDescriptionType class." dir="ltr">
<thead>
<tr class="cellalignment4770">
<th class="cellalignment4782" id="r1c1-tinf1" colspan="3">Description Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r2c1-tinf1" headers="r1c1-tinf1">Name</td>
<td class="cellalignment4776" headers="r1c1-tinf1">Plural name</td>
<td class="cellalignment4776" headers="r1c1-tinf1">Description</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r3c1-tinf1" headers="r1c1-tinf1">Short name</td>
<td class="cellalignment4776" headers="r1c1-tinf1">Short plural name</td>
<td class="cellalignment4776" headers="r1c1-tinf1">Short description</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r4c1-tinf1" headers="r1c1-tinf1">Long name</td>
<td class="cellalignment4776" headers="r1c1-tinf1">Long plural name</td>
<td class="cellalignment4776" headers="r1c1-tinf1">Long description</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>You get one of these defined description types by calling a method of <code>MdmDescriptionType</code>. For example, the following code gets the description type object for a long name and a long description.</p>
<pre>MdmDescriptionType mdmLongNameDescrType =
  MdmDescriptionType.getLongNameDescriptionType();
MdmDescriptionType mdmLongDescrDescrType =
  MdmDescriptionType.getLongDescriptionDescriptionType();
</pre>
<p>You can create a new type of description by using a constructor method of <code>MdmDescriptionType</code>. You can get the type of an <code>MdmDescriptionType</code> object with the <code>getDescriptiveType</code> method. <a href="#CIADHBCG">Figure 2-2</a> shows the methods of <code>MdmDescriptionType</code>.</p>
<p>Some of the defined description types have an associated default description type. You change a default description type or assign a default description type for a new or existing <code>MdmDescriptionType</code> by using the <code>MdmDescriptionType(java.lang.String type, MdmDescriptionType defaultType)</code> constructor method. You can get the default type of an <code>MdmDescriptionType</code> object with the <code>getDescriptiveTypeDefault</code> method.</p>
<p><a id="sthref132"></a><a id="sthref133"></a>To associate an <code>MdmDescription</code> object with an <code>MdmObject</code>, use the <code>findOrCreateDescription</code> or a <code>setDescription</code> method of the <code>MdmObject</code>. The <code>findOrCreateDescription</code> method returns an <code>MdmDescription</code> object. To specify a value for the description, use the <code>setValue</code> method of <code>MdmDescription</code>.</p>
<p><a id="sthref134"></a><a href="#CIAEGDEA">Example 2-1</a> shows both ways of associating an <code>MdmDescription</code> with an <code>MdmObject</code>. In the example, <code>mdmProdDim</code> is an <code>MdmStandardDimension</code> object.</p>
<div class="example">
<p class="titleinexample"><a id="CIAEGDEA"></a>Example 2-1 Associating a Description with an MdmObject</p>
<pre>MdmDescription mdmShortNameDescr = 
  mdmProdDim.findOrCreateDescription(
    MdmDescriptionType.getShortNameDescriptionType(), &#34;AMERICAN&#34;);
mdmShortNameDescr.setValue(&#34;Product&#34;);

mdmProdDim.setDescription(
  MdmDescriptionType.getLongNameDescriptionType(), &#34;Product Dimension&#34;);
</pre></div>
<!-- class="example" -->
<p><a id="sthref135"></a><a id="sthref136"></a><a id="sthref137"></a><a id="sthref138"></a><a href="#CIADHBCG">Figure 2-2</a> shows the methods of <code>MdmObject</code> that use <code>MdmDescription</code> and <code>MdmDescriptionType</code> objects. It also shows the <code>MdmDescription</code> and <code>MdmDescriptionType</code> classes and their methods, and the associations between the classes. An <code>MdmObject</code> can have from zero to many <code>MdmDescription</code> objects. An <code>MdmDescription</code> is associated with one <code>MdmObject</code> and one <code>MdmDescriptionType</code>. An <code>MdmDescriptionType</code> can be associated with one or more <code>MdmDescription</code> objects.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIADHBCG"></a>Figure 2-2 MdmObject and MdmDescription Associations</p>
<img width="561" height="447" src="img/mdmdsctp.gif" alt="Description of Figure 2-2 follows"/><br/>
<a id="sthref139" href="img_text/mdmdsctp.htm">Description of &#34;Figure 2-2 MdmObject and MdmDescription Associations&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a id="sthref140"></a>Versions of the OLAP Java API before 11<span class="italic">g</span> did not have the <code>MdmDescription</code> and <code>MdmDescriptionType</code> classes. In those versions, the <code>MdmObject</code> class had only the following methods for getting and setting descriptions.</p>
<div class="figure">
<p class="titleinfigure"><a id="sthref141"></a>Figure 2-3 Methods for Getting and Setting Descriptions Before 11g</p>
<img width="228" height="99" src="img/mdmobjds.gif" alt="Description of Figure 2-3 follows"/><br/>
<a id="sthref142" href="img_text/mdmobjds.htm">Description of &#34;Figure 2-3 Methods for Getting and Setting Descriptions Before 11g&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>For backward compatibility, the OLAP Java API still supports these methods, but implements them internally using <code>MdmDescription</code> and <code>MdmDescriptionType</code> objects.</p>
</div>
<!-- class="sect2" -->
<a id="BABFGBII"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Classifications</h3>
<p><a id="sthref143"></a><a id="sthref144"></a><a id="sthref145"></a>A classification is a property of an <code>MdmObject</code>. You assign a classification to an object and then use the classification as you please. For example, you could add a classification with the value of &#34;HIDDEN&#34; to indicate that an application should not display the object in the user interface. You can assign a classification to an <code>MdmObject</code> by using the <code>addObjectClassification</code> method of the object. You can get the classifications with the <code>getObjectClassifications</code> method and remove one with the <code>removeObjectClassification</code> method.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIAIJDCI"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Providing Metadata Objects</h2>
<p>Access to Oracle OLAP Java API metadata objects is initially provided by an <code>MdmMetadataProvider</code> and by <code>MdmSchema</code> objects. The <code>MdmMetadataProvider</code> also has the ability to import or export an XML representation of a metadata object.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref146"></a>
<h3 class="sect2">Describing Metadata Providers</h3>
<p><a id="sthref147"></a>Before you can get or create OLAP Java API metadata objects, you must first create an <code>MdmMetadataProvider</code>. For information on creating an <code>MdmMetadataProvider</code>, see <a href="discover.htm#i1006595">&#34;Creating an MdmMetadataProvider&#34;</a>.</p>
<p><a id="sthref148"></a><a id="sthref149"></a><a id="sthref150"></a>With the <code>getRootSchema</code> method of the <code>MdmMetadataProvider</code>, you can get the root <code>MdmSchema</code> object, which is an instance of the <code>MdmRootSchema</code> class. The root schema is a container for <code>MdmDatabaseSchema</code> objects.</p>
<p><a id="sthref151"></a><a id="sthref152"></a><a id="sthref153"></a><a id="sthref154"></a><a id="sthref155"></a><code>MdmDatabaseSchema</code> objects are owners of top-level metadata objects such as <code>AW</code>, <code>MdmCube</code>, and <code>MdmPrimaryDimension</code> objects. The top-level objects are first-class data objects and are represented in the Oracle Database data dictionary. Because they are in the data dictionary, these OLAP data objects are available to SQL queries. You create top-level metadata objects by using <code>findOrCreate</code> methods of an <code>MdmDatabaseSchema</code>.</p>
<p>The top-level objects are the containers of objects such as <code>MdmMeasure</code>, <code>MdmHierarchy</code>, and <code>MdmAttribute</code> objects. You create the contained objects by using methods of the top-level objects.</p>
<p>For more information on <code>MdmSchema</code> objects, see <a href="#CIAGFAGH">&#34;Representing Schemas&#34;</a>. For information on top-level metadata objects, see <a href="#CIACJDHG">&#34;Providing Access to Data Sources&#34;</a>.</p>
<p>You can also get an existing metadata object by calling the <code>getMetadataObject</code> or <code>getMetadataObjects</code> method of the <code>MdmMetadataProvider</code> and providing the ID of the metadata object.</p>
<a id="CIAHDIGB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Getting Metadata Objects by ID</h4>
<p><a id="sthref156"></a><a id="sthref157"></a><a id="sthref158"></a><a id="sthref159"></a>Usually, you get or create metadata objects by calling <code>findOrCreate</code> methods on the owning object. For example, you can get or create an <code>MdmCube</code> by calling the <code>findOrCreateCube</code> method of an <code>MdmDatabaseSchema</code> object. However, you can also get an existing metadata object from an <code>MdmMetadataProvider</code> by specifying the ID of the object. The <code>MdmMetadataProvider.getMetadataObject</code> method takes a <code>String</code> that is the ID of an object and returns the object. The <code>getMetadataObjects</code> method takes a <code>List</code> of IDs and returns a <code>List</code> of objects.</p>
<p>You can store the ID of a metadata object from one session and then get the object by that ID in another session. Of course, getting an object by a stored ID assumes that the object still exists and that the ID of the object has not changed. For some metadata objects, you can change the name or the owner. If the name or owner of the object changes, then the ID of the object changes.</p>
</div>
<!-- class="sect3" -->
<a id="BABCIGIG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Exporting and Importing Metadata as XML Templates</h4>
<p>The <code>MdmMetadataProvider</code> class has many methods for exporting and importing metadata objects to and from XML definitions of those objects. The XML definition is a template from which Oracle OLAP can create the metadata objects defined.</p>
<p>You can use XML templates to transport metadata objects between Oracle Database instances. You can exchange XML templates between Analytic Workspace Manager and an OLAP Java API application; that is, in Analytic Workspace Manager you can import a template that you created with an <code>MdmMetadataProvider</code> export XML method, and you can use an <code>importXML</code> method to import an XML template created by Analytic Workspace Manager.</p>
<p><a id="sthref160"></a>When exporting XML, you can rename objects or specify bind variables for the values of XML attributes. You can also supply an implementation of the <code>XMLWriterCallback</code> interface to manage some aspects of the export process. When importing XML, you can specify an <code>MdmDatabaseSchema</code> to own the imported objects, bind values to replace the bind variables in the exported XML, and an implementation of the <code>XMLParserCallback</code> interface to manage some aspects of the import process.</p>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref161"></a>
<h5 class="sect4">Exporting XML Templates</h5>
<p><a id="sthref162"></a><a id="sthref163"></a><a id="sthref164"></a>For exporting metadata objects to XML templates, <code>MdmMetadataProvider</code> has many signatures of the <code>exportFullXML</code> and <code>exportIncrementalXML</code> methods. The methods export a template to a <code>java.lang.String</code> or to a <code>java.io.Writer</code>.</p>
<p>You can use an XML template produced by these methods to import metadata objects through the <code>importXML</code> methods of <code>MdmMetadataProvider</code>. You can also use the XML template to import metadata objects in Analytic Workspace Manager.</p>
<p><a id="sthref165"></a><a id="sthref166"></a>An <code>exportFullXML</code> method exports the complete XML definitions for the specified objects or for the objects that you have created or modified since a specified <code>oracle.olapi.transaction.Transaction</code>. For an example of using the <code>exportFullXML</code> method, see <a href="create.htm#BABGCBEB">Example 4-10, &#34;Exporting to an XML Template&#34;</a>.</p>
<p>An <code>exportIncrementalXML</code> method exports only the XML attributes that have changed for a metadata object since a specified <code>Transaction</code>. If you specify a <code>List</code> of objects, then the exported templates contain the XML attributes that have changed for the objects that are in the list. The exported incremental XML includes the type and name of the objects in the ownership and containment hierarchy of the changed object.</p>
<p>The <code>exportFullXML</code> and <code>exportIncrementalXML</code> methods take various combinations of the following parameters.</p>
<ul>
<li>
<p>A <code>List</code> of the objects to export or a <code>Transaction</code>.</p>
</li>
<li>
<p>A <code>Writer</code> to which Oracle OLAP exports the XML. If you do not specify a <code>Writer</code>, then the method returns a <code>java.lang.String</code> that contains the XML.</p>
</li>
<li>
<p>A <code>java.util.Map</code> that has metadata object references as keys and that has, as the objects for the keys, <code>String</code> values that contain new names for the referenced objects. With this <code>Map</code>, you can rename an object that you export. You can specify <code>null</code> for the parameter if you do not want to rename any objects.</p>
<p>If you specify a <code>Map</code> for this <code>renameMap</code> parameter, then the Oracle OLAP XML generator renames a referenced object during the export. You can copy the definition of an existing object this way, by renaming an object during the export of an XML template and then importing the template.</p>
</li>
<li>
<p>A <code>boolean</code> that specifies whether or not to include the name of the owning object in the exported XML.</p>
</li>
<li>
<p>An optional <code>Map</code> that has metadata object references as keys and that has, as the objects for the keys, <code>String</code> values that function like SQL bind variables. For more information on the bind variables in this parameter, see <a href="#CIADHFAD">&#34;Describing Bind Variables in XML Templates&#34;</a>.</p>
</li>
<li>
<p><a id="sthref167"></a><a id="sthref168"></a>An optional implementation of the <code>oracle.olapi.metadata.XMLWriterCallback</code> interface. With an <code>XMLWriterCallback</code>, you can specify whether or not to exclude an attribute or an owner name from the exported XML.</p>
</li>
</ul>
<p>All metadata objects that share an ancestor are grouped together in the exported XML. For any object that is not a top-level object and whose top-level container is not in the <code>List</code> of the objects to export, the exported template contains an incremental definition to the object and a full definition below that. This supports the export of objects such as a calculated measure in a cube without having to export the entire cube template.</p>
<p>If an <code>MdmDatabaseSchema</code> is in the <code>List</code> of objects to export, then the exported template includes all objects within the database schema. If an <code>oracle.olapi.metadata.deployment.AW</code> object is in the <code>List</code>, then the exported template includes all of the objects that are contained by the <code>AW</code>. If the <code>MdmRootSchema</code> is in the list, it is ignored.</p>
</div>
<!-- class="sect4" -->
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref169"></a>
<h5 class="sect4">Importing XML Templates</h5>
<p><a id="sthref170"></a><a id="sthref171"></a><a id="sthref172"></a><a id="sthref173"></a>For importing metadata objects as XML templates, <code>MdmMetadataProvider</code> has several signatures of the <code>importXML</code> method.</p>
<p>An <code>importXML</code> method imports XML definitions of objects and either creates new objects or modifies existing objects. The <code>importXML</code> method take various combinations of the following parameters.</p>
<ul>
<li>
<p>A <code>java.io.Reader</code> for input of the XML or a <code>String</code> that contains the XML to import.</p>
</li>
<li>
<p>An <code>MdmDatabaseSchema</code> to contain the new or modified metadata objects.</p>
</li>
<li>
<p>A <code>boolean</code>, <code>modifyIfExists</code>, that indicates whether or not you want differences in the imported XML definition to modify an existing object of the same name.</p>
</li>
<li>
<p>An optional <code>Map</code>, <code>bindValues</code>, that contains bind variables as keys and, as the objects for the keys, <code>String</code> values to replace the bind variables. For more information on the bind values in this parameter, see <a href="#CIADHFAD">&#34;Describing Bind Variables in XML Templates&#34;</a>.</p>
</li>
<li>
<p>An optional implementation of the <code>oracle.olapi.metadata.XMLParserCallback</code> interface.</p>
</li>
</ul>
<p>If the value of the <code>modifyIfExists</code> parameter is <code>true</code> and if the imported XML contains a full definition for an object that already exists and the object definition is different from the XML, then the method merges the new or changed elements of the object definition with the existing definition of the object. If the value of <code>modifyIfExists</code> is <code>false</code> and if the XML contains a full definition for an object that already exists, then the <code>importXML</code> method throws an exception.</p>
<p>With the <code>bindValues</code> parameter, you can specify a <code>Map</code> that has key/object pairs that Oracle OLAP uses to replace bind variables when importing an XML template. A key in the <code>Map</code> is a bind variable to replace and the object paired to the key is the value with which to replace the bind variable. When you import a template, if you specify a <code>Map</code> that contains bind variables as keys, then Oracle OLAP replaces a bind variable in the imported XML with the value specified for the bind variable in the <code>bindValues</code> <code>Map</code>.</p>
<p>You can pass an implementation of the <code>XMLParserCallback</code> interface to an <code>importXML</code> method as the <code>parserCallback</code> parameter. With the <code>XMLParserCallback</code>, you can specify how Oracle OLAP handles an error that might occur when importing XML. The <code>XML11_2_ParserCallback</code> interface adds methods for renaming the imported object and for suppressing attributes of the imported object.</p>
</div>
<!-- class="sect4" -->
<a id="CIADHFAD"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Describing Bind Variables in XML Templates</h5>
<p><a id="sthref174"></a><a id="sthref175"></a><a id="sthref176"></a>The <code>exportFullXML</code> and <code>exportIncrementalXML</code> methods have an optional <code>bindVariables</code> parameter. This parameter is a <code>Map</code> that has metadata objects as keys and <code>String</code> values as the objects for the keys. The <code>String</code> values function like SQL bind variables. During the export of the XML, the Oracle OLAP XML generator replaces the name of the referenced object with the bind variable.</p>
<p>If you provide a <code>Map</code> for the <code>bindVariables</code> parameter to an <code>exportFullXML</code> or <code>exportIncrementalXML</code> method, then the XML produced by the method begins with the following declaration.</p>
<pre>&lt;!DOCTYPE Metadata [
&lt;!ENTITY % BIND_VALUES PUBLIC &#34;OLAP BIND VALUES&#34; &#34;OLAP METADATA&#34;&gt;
%BIND_VALUES;
 ]&gt;
</pre>
<p>A value specified in the <code>bindVariables</code> map appears in the exported XML in the format <code>&#34;&amp;BV;&#34;</code>, where <code>BV</code> is the bind variable.</p>
<p>The <code>bindValues</code> parameter of an <code>importXML</code> method specifies values that Oracle OLAP uses to replace the bind variables when importing an XML template. When you import a template, if you specify a <code>Map</code> that contains bind variables as keys, then Oracle OLAP replaces a bind variable in the imported XML with the <code>String</code> specified as the object for the bind variable key in the <code>Map</code>.</p>
<p>If you provide a <code>Map</code> for the <code>bindValues</code> parameter, then the <code>inXML</code> string that you provide to the method must include the <code>!DOCTYPE Metadata</code> declaration and the bind variables in the XML to import must be in the <code>&#34;&amp;BV;&#34;</code> format.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIAGFAGH"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Representing Schemas</h3>
<p><a id="sthref177"></a>Schemas are represented by the <code>MdmSchema</code> class and the subclasses of it. An <code>MdmSchema</code> is owner of, or a container for, <code>MdmCube</code>, <code>MdmDimension</code>, and other <code>MdmObject</code> objects, including other <code>MdmSchema</code> objects. In the 10<span class="italic">g</span> and earlier versions of the OLAP Java API, the <code>MdmSchema</code> class had more than one role. The API had one root <code>MdmSchema</code>, an <code>MdmSchema</code> for each measure folder, and custom <code>MdmSchema</code> objects that an application could create.</p>
<p>The 11<span class="italic">g</span> OLAP Java API introduced subclasses of <code>MdmSchema</code> to separate and define the different roles. In 11<span class="italic">g</span>, <code>MdmSchema</code> remains a concrete class for compatibility with the earlier versions and for use in 10<span class="italic">g</span> metadata reader modes.</p>
<p><a id="sthref178"></a>In 11<span class="italic">g</span>, an <code>MdmSchema</code> is an instance of one of the following subclasses of <code>MdmSchema</code>:</p>
<ul>
<li>
<p><code>MdmRootSchema</code>, which is a container for <code>MdmDatabaseSchema</code> objects and is supplied by the system.</p>
</li>
<li>
<p><code>MdmDatabaseSchema</code>, which represents the relational schema for a database user and which creates and owns <code>MdmCube</code>, <code>MdmDimension</code>, and other <code>MdmObject</code> objects. <code>MdmDatabaseSchema</code> objects are supplied by the system.</p>
</li>
<li>
<p><code>MdmOrganizationalSchema</code>, which you can use to organize measures and other <code>MdmOrganizationalSchema</code> objects.</p>
</li>
</ul>
<p>This remainder of this topic describes the subclasses of <code>MdmSchema</code>.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref179"></a>
<h4 class="sect3">Representing the Root Schema</h4>
<p><a id="sthref180"></a><a id="sthref181"></a>The root schema is a container for database schema objects. This top-level schema is represented by the <code>MdmRootSchema</code> class. You get the <code>MdmRootSchema</code> with the <code>getRootSchema</code> method of the <code>MdmMetadataProvider</code>. From the <code>MdmRootSchema</code> you can get all of the <code>MdmDatabaseSchema</code> objects or you can get an individual <code>MdmDatabaseSchema</code> by name.</p>
<p>The <code>MdmRootSchema</code> class also contains all of the <code>MdmCube</code>, <code>MdmMeasure</code>, and <code>MdmPrimaryDimension</code> objects that are provided by the <code>MdmMetadataProvider</code>, and has methods for getting those objects. However, the <code>List</code> of objects returned by those methods contains only the cubes, measures, or dimensions that the user has permission to see.</p>
<p><a id="sthref182"></a><a id="sthref183"></a><a href="#CIAEBHHF">Figure 2-4</a> shows the associations between an <code>MdmMetadataProvider</code> and the subclasses of <code>MdmSchema</code>.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIAEBHHF"></a>Figure 2-4 Associations Between MdmMetadataProvider and the MdmSchema Subclasses</p>
<img width="526" height="171" src="img/mdmschas.gif" alt="Description of Figure 2-4 follows"/><br/>
<a id="sthref184" href="img_text/mdmschas.htm">Description of &#34;Figure 2-4 Associations Between MdmMetadataProvider and the MdmSchema Subclasses&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref185"></a>
<h4 class="sect3">Representing Database Schemas</h4>
<p><a id="sthref186"></a><a id="sthref187"></a><a id="sthref188"></a><a id="sthref189"></a>Each Oracle Database user owns a relational schema. The schema for a database user is represented by an <code>MdmDatabaseSchema</code> object. The <code>MdmRootSchema</code> has one <code>MdmDatabaseSchema</code> object for each database user. An <code>MdmDatabaseSchema</code> has the same name as the database user. For example, the name of the <code>MdmDatabaseSchema</code> for the user GLOBAL is <code>GLOBAL</code>.</p>
<p>You can get one or all of the <code>MdmDatabaseSchema</code> objects with methods of the <code>MdmRootSchema</code>. However, access to the objects that are owned by an <code>MdmDatabaseSchema</code> is determined by the security privileges granted to the user of the session. For information on object and data security management and privileges, see <a class="olink OLAUG600" href="../OLAUG/security.htm#OLAUG600"><span class="italic">Oracle OLAP User&#39;s Guide</span></a>.</p>
<p><a id="sthref190"></a><a id="sthref191"></a>An <code>MdmDatabaseSchema</code> is the owner of top-level OLAP metadata objects and the objects created by them. You use an <code>MdmDatabaseSchema</code> to get existing metadata objects or to create new ones. The top-level objects are the following.</p>
<div class="inftblinformal">
<table class="cellalignment4783" title="Top-level MdmDatabaseSchema Metadata Objects" summary="Top-level metadata objects that are owned by an MdmDatabaseSchema." dir="ltr">
<thead>
<tr class="cellalignment4770">
<th class="cellalignment4782" id="r1c1-tinf2" colspan="3">Top-level Objects</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r2c1-tinf2" headers="r1c1-tinf2"><code>AW</code></td>
<td class="cellalignment4776" headers="r1c1-tinf2"><code>MdmNamedBuildProcess</code></td>
<td class="cellalignment4776" headers="r1c1-tinf2"><code>MdmPrimaryDimension</code></td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r3c1-tinf2" headers="r1c1-tinf2"><code>MdmCube</code></td>
<td class="cellalignment4776" headers="r1c1-tinf2"><code>MdmOrganizationalSchema</code></td>
<td class="cellalignment4776" headers="r1c1-tinf2"><code>MdmTable</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p><a id="sthref192"></a>Except for an <code>MdmTable</code>, you can create new top-level objects, or get existing ones, with the <code>findOrCreate</code> methods such as <code>findOrCreateAW</code> and <code>findOrCreateStandardDimension</code>. Creating objects is described in <a href="discover.htm#g1015325">Chapter 3</a>.</p>
<p><a id="sthref193"></a>When you commit the <code>Transaction</code> in which you have created top-level OLAP metadata objects, those objects then exist in the Oracle data dictionary. They are available for use by ordinary SQL queries as well as for use by applications that use the Oracle OLAP Java API.</p>
<p><a id="sthref194"></a><a id="sthref195"></a>Because the metadata objects exist in the Oracle data dictionary, an Oracle Database DBA can restrict access to certain types of the metadata objects. In a client application, you can set such restrictions by using the JDBC API to send standard SQL <code>GRANT</code> and <code>REVOKE</code> commands through the JDBC connection for the user session.</p>
<p><a id="sthref196"></a><a id="sthref197"></a><a id="sthref198"></a>You can get an <code>MdmTable</code>, or other top-level object, with the <code>getTopLevelObject</code> method. You can get all of the instances of a particular type of top-level object with methods such as <code>getAWs</code>, <code>getDimensions</code>, or <code>getOrganizationalSchemas</code>, or you can use the <code>getSchemaObjects</code> to get all of the objects owned by the <code>MdmDatabaseSchema</code>. You can add or remove top-level objects with methods like <code>addAW</code> and <code>removeSchemaObject</code>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref199"></a>
<h4 class="sect3">Representing Organizational Schemas</h4>
<p><a id="sthref200"></a><a id="sthref201"></a>An OLAP measure folder organizes measures, cubes, and dimensions. A measure folder is represented by the <code>MdmOrganizationalSchema</code> class. Measure folders provide a way to differentiate among the similarly named measures. For example, a user may have access to several schemas with measures named SALES or COSTS. You could separate measures that have the same name into different <code>MdmOrganizationalSchema</code> objects. An <code>MdmOrganizationalSchema</code> has methods for adding or removing cubes, dimensions, and measures. You can nest organizational schemas, so the class also has methods for adding and removing other <code>MdmOrganizationalSchema</code> objects.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIACJDHG"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Providing Access to Data Sources</h2>
<p><a id="sthref202"></a><a id="sthref203"></a>Some of the classes in the <code>mdm</code> package that represent objects that contain or provide access to the data in the data store. Some of these classes represent OLAP dimensional data model objects, which include cubes, measures, dimensions, levels, hierarchies, and attributes. Other <code>mdm</code> classes represent relational objects such as tables, or columns in a view or table.</p>
<p><a id="sthref204"></a><a href="#CIAHFADJ">Figure 2-5</a> shows the associations between the classes that implement dimensional data model objects. An <code>MdmCube</code> can contain from zero to many <code>MdmMeasure</code> objects. An <code>MdmMeasure</code> is contained by one <code>MdmCube</code> object. An <code>MdmCube</code> can have from zero to many <code>MdmPrimaryDimension</code> objects, which are associated with it through <code>MdmDimensionality</code> objects. An <code>MdmPrimaryDimension</code> can contain from zero to many <code>MdmDimensionLevel</code> objects, <code>MdmHierarchy</code> objects, and <code>MdmAttribute</code> objects.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIAHFADJ"></a>Figure 2-5 Associations of Dimensional Data Model Classes</p>
<img width="429" height="136" src="img/dimmodel.gif" alt="Description of Figure 2-5 follows"/><br/>
<a id="sthref205" href="img_text/dimmodel.htm">Description of &#34;Figure 2-5 Associations of Dimensional Data Model Classes&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a id="sthref206"></a>The classes that represent these dimensional or relational data objects are subclasses of the <code>MdmSource</code> class. Subclasses of <code>MdmSource</code> have a <code>getSource</code> method, which returns a <code>Source</code> object. You use <code>Source</code> objects to define a query of the data. You then use <code>Cursor</code> objects to retrieve the data. For more information about working with <code>Source</code> and <code>Cursor</code> objects, see <a href="query.htm#g1030586">Chapter 5, &#34;Understanding Source Objects&#34;</a> and <a href="crscncpt.htm#g1014888">Chapter 8, &#34;Understanding Cursor Classes and Concepts&#34;</a>.</p>
<p>You can also use SQL to query the views that Oracle OLAP automatically generates for the cubes, dimensions, and hierarchies. For information on querying these views, see <a href="#CIAIHIEF">&#34;Getting Dimension and Hierarchy View and View Column Names&#34;</a>.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref207"></a>
<h3 class="sect2">Representing Cubes and Measures</h3>
<p>Cubes are the physical implementation of the dimensional model. They organize measures that have the same set of dimensions. Cubes and measures are dimensioned objects; the dimensions associated with a cube identify and categorize the data of the measures.</p>
<a id="BABCABFG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Representing Cubes</h4>
<p><a id="sthref208"></a><a id="sthref209"></a><a id="sthref210"></a><a id="sthref211"></a>An OLAP cube is represented by the <code>MdmCube</code> class. An <code>MdmCube</code> is a container for <code>MdmMeasure</code> objects that are dimensioned by the same set of <code>MdmPrimaryDimension</code> objects. An application creates <code>MdmBaseMeasure</code> or <code>MdmDerivedMeasure</code> objects with the <code>findOrCreateBaseMeasure</code> and <code>findOrCreateDerivedMeasure</code> methods of an <code>MdmCube</code>. It associates each of the dimensions of the measures with the cube by using the <code>addDimension</code> method.</p>
<p><a id="sthref212"></a><a id="sthref213"></a><a id="sthref214"></a>An <code>MdmCube</code> usually corresponds to a single fact table or view. To associate the table or view with the cube, you use <code>Query</code> and <code>CubeMap</code> objects. You get the <code>Query</code> for the table or view and then associate the <code>Query</code> with the <code>CubeMap</code> by using the <code>setQuery</code> method of the <code>CubeMap</code>.</p>
<p><a id="sthref215"></a><a id="sthref216"></a><a id="sthref217"></a>The <code>CubeMap</code> contains <code>MeasureMap</code> and <code>CubeDimensionalityMap</code> objects that map the measures and dimensions of the cube to data sources. With the <code>MeasureMap</code>, you specify an <code>MdmBaseMeasure</code> and an <code>Expression</code> that identifies the column in the fact table or view that contains the base data for the measure.</p>
<p><a id="sthref218"></a>To map the dimensions of the cube you get the <code>MdmDimensionality</code> objects of the cube. You create a <code>CubeDimensionalityMap</code> for each <code>MdmDimensionality</code>. You then specify an <code>Expression</code> for the <code>CubeDimensionalityMap</code> that identifies the foreign key column for the dimension in the fact table or view. If you want to specify a dimension column other than the column for the leaf-level dimension members, then you must specify a join <code>Condition</code> with the <code>setJoinCondition</code> method of the <code>CubeDimensionalityMap</code>.</p>
<p><a id="sthref219"></a><a id="sthref220"></a>An <code>MdmCube</code> has an associated <code>CubeOrganization</code>. The <code>CubeOrganization</code> deploys the cube in an analytic workspace or as a relational database object. To deploy a cube to an analytic workspace, you call the <code>findOrCreateAWCubeOrganization</code> method of the <code>MdmCube</code>. You use the <code>AWCubeOrganization</code> returned by that method to specify characteristics of the cube, such as how Oracle OLAP builds the cube, how the cube stores measure data, and whether the database creates materialized views for the cube. For information on the <code>AWCubeOrganization</code> class, see <a class="olink OLAPI" href="../OLAPI/toc.htm"><span class="italic">Oracle OLAP Java API Reference</span></a>.</p>
<p><a id="sthref221"></a><a id="sthref222"></a><a id="sthref223"></a><a id="sthref224"></a><a id="sthref225"></a><a id="sthref226"></a>If the <code>AWCubeOrganization</code> has a materialized view option of <code>REWRITE_MV_OPTION</code>, then Oracle OLAP creates a materialized view for the cube that can be used by the database query rewrite system. If the materialized view option is <code>REWRITE_WITH_ATTRIBUTES_MV_OPTION</code>, then Oracle OLAP includes in the rewrite materialized view the dimension attributes for which the <code>isPopulateLineage</code> method returns <code>true</code>. You set the materialized view options with the <code>setMVOption</code> method of the <code>AWCubeOrganization</code>.</p>
<p><a id="sthref227"></a><a id="sthref228"></a><a id="sthref229"></a>An <code>MdmCube</code> also has a <code>ConsistentSolveSpecification</code> object, which contains one or more <code>ConsistentSolveCommand</code> objects that specify how Oracle OLAP calculates (or <span class="italic">solves</span>) the values of the measures of the cube. For example, as the <code>ConsistentSolveCommand</code>, you could specify an <code>AggregationCommand</code> that represents the <code>SUM</code> or the <code>MAX</code> function. You specify the <code>ConsistentSolveSpecification</code> with the <code>setConsistentSolveSpecification</code> method of the cube.</p>
<p><a id="sthref230"></a><a id="sthref231"></a>A cube is <span class="italic">consistent</span> when the values of the measures match the specification, for example, when the values of the parents are equal to the <code>SUM</code> of the values of their children. A cube becomes consistent when the <code>BuildProcess</code> executes the <code>ConsistentSolveCommand</code>.</p>
<p>For examples of creating <code>MdmCube</code> and <code>MdmMeasure</code> objects and mapping them, and of the other operations described in this topic, see <a href="create.htm#BABHHCBI">Example 4-7, &#34;Creating and Mapping an MdmCube&#34;</a> and <a href="create.htm#BABICJFH">Example 4-8, &#34;Creating and Mapping Measures&#34;</a>.</p>
<p><a id="sthref232"></a><a href="#BABIDFDC">Figure 2-6</a> shows the associations between an <code>MdmCube</code> and the some of the classes mentioned in this topic. The figure shows an <code>MdmCube</code> as deployed in an analytic workspace.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABIDFDC"></a>Figure 2-6 MdmCube and Associated Objects</p>
<img width="524" height="237" src="img/cubeasso.gif" alt="Description of Figure 2-6 follows"/><br/>
<a id="sthref233" href="img_text/cubeasso.htm">Description of &#34;Figure 2-6 MdmCube and Associated Objects&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref234"></a>
<h4 class="sect3">Representing Measures</h4>
<p><a id="sthref235"></a><a id="sthref236"></a>An <code>MdmMeasure</code> is an abstract class that represents a set of data that is organized by one or more <code>MdmPrimaryDimension</code> objects. The structure of the data is similar to that of a multidimensional array. Like the dimensions of an array, which provide the indexes for identifying a specific cell in the array, the <code>MdmPrimaryDimension</code> objects that organize an <code>MdmMeasure</code> provide the indexes for identifying a specific value of the <code>MdmMeasure</code>.</p>
<p>For example, suppose you have an <code>MdmMeasure</code> that has data that records the number of product units sold to a customer during a time period and through a sales channel. The data of the measure is organized by dimensions for products, times, customers, and channels (with a channel representing the sales avenue, such as catalog or internet.). You can think of the data as occupying a four-dimensional array with the product, time, customer, and channel dimensions providing the organizational structure. The values of these four dimensions are indexes for identifying each particular cell in the array. Each cell contains a single data value for the number of units sold. You must specify a value for each dimension in order to identify a value in the array.</p>
<p>The values of an <code>MdmMeasure</code> are usually numeric, but a measure can have values of other data types. The concrete subclasses of <code>MdmMeasure</code> are <code>MdmBaseMeasure</code> and <code>MdmDerivedMeasure</code>.</p>
<p><a id="sthref237"></a><a id="sthref238"></a>An <code>MdmBaseMeasure</code> in an analytic workspace has associated physical storage structures. Typically an <code>MdmCube</code> gets the base data for an <code>MdmBaseMeasure</code> from a column in a fact table. Oracle OLAP then calculates the aggregate values of the measure and stores those values in an OLAP view for the cube.</p>
<p><a id="sthref239"></a>When you create an <code>MdmBaseMeasure</code>, you can specify the SQL data type of the measure with the <code>setSQLDataType</code> method. If you do not specify it, then the <code>MdmBaseMeasure</code> has the data type of the source data to which you map it.</p>
<p><a id="sthref240"></a><a id="sthref241"></a>By specifying <code>true</code> with the <code>setAllowAutoDataTypeChange</code> method, you can allow Oracle OLAP to automatically set the SQL data type of the measure. This can be useful if the data type of a measure changes. If you allow the automatic changing of the SQL data type, then Oracle OLAP determines the appropriate SQL data type whether or not you have specified one with the <code>setSQLDataType</code> method.</p>
<p><a id="sthref242"></a>An <code>MdmDerivedMeasure</code> has no associated physical storage. Oracle OLAP dynamically calculates the values for an <code>MdmDerivedMeasure</code> as needed.</p>
<p><a id="sthref243"></a>The values of an <code>MdmMeasure</code> are determined by the structure of the <code>MdmPrimaryDimension</code> objects of the <code>MdmMeasure</code>. That is, each value of an <code>MdmMeasure</code> is identified by a tuple, which is a unique combination of members from the <code>MdmPrimaryDimension</code> objects.</p>
<p><a id="sthref244"></a>The <code>MdmPrimaryDimension</code> objects of an <code>MdmMeasure</code> are <code>MdmStandardDimension</code> or <code>MdmTimeDimension</code> objects. They usually have at least one hierarchical structure. Those <code>MdmPrimaryDimension</code> objects include all of the members of their component <code>MdmHierarchy</code> objects. Because of this structure, the values of an <code>MdmMeasure</code> are of one or more of the following:</p>
<ul>
<li>
<p>Values from the fact table column, view, or calculation on which the <code>MdmMeasure</code> is based. These values are identified by a combination of the members at the leaf levels of the hierarchies of a dimension.</p>
</li>
<li>
<p>Aggregated values that Oracle OLAP has provided. These measure values are identified by at least one member from an aggregate level of a hierarchy.</p>
</li>
<li>
<p>Values specified by an <code>Expression</code> for a <code>MdmDerivedMeasure</code> or a custom dimension member.</p>
</li>
</ul>
<p>As an example, imagine an <code>MdmBaseMeasure</code> that is dimensioned by an <code>MdmTimeDimension</code> and an <code>MdmStandardDimension</code> of products. The metadata objects for the measure and the dimensions are <code>mdmUnitCost</code>, <code>mdmTimeDim</code>, and <code>mdmProdDim</code>. Each of the <code>mdmTimeDim</code> and the <code>mdmProdDim</code> objects has all of the leaf members and aggregate members of the dimension it represents. A leaf member is one that has no children. An aggregate member has one or more children.</p>
<p>A unique combination of two members, one from <code>mdmTimeDim</code> and one from <code>mdmProdDim</code>, identifies each <code>mdmUnitCost</code> value, and every possible combination of dimension members is used to specify the entire set of <code>mdmUnitCost</code> values.</p>
<p>Some <code>mdmUnitCost</code> values are identified by a combination of leaf members (for example, a particular product item and a particular month). Other <code>mdmUnitCost</code> values are identified by a combination of aggregate members (for example, a particular product family and a particular quarter). Still other <code>mdmUnitCost</code> values are identified by a mixture of leaf and aggregate members.</p>
<p>The values of <code>mdmUnitCost</code> that are identified only by leaf members come directly from the column in the database fact table (or fact table calculation). They represent the lowest level of data. However, the values that are identified by at least one aggregate member are calculated by Oracle OLAP. These higher-level values represent aggregated, or rolled-up, data. Thus, the data represented by an <code>MdmBaseMeasure</code> is a mixture of fact table data from the data store and aggregated data that Oracle OLAP makes available for analytical manipulation.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref245"></a>
<h3 class="sect2">Representing Dimensions, Levels, and Hierarchies</h3>
<p><a id="sthref246"></a><a id="sthref247"></a><a id="sthref248"></a><a id="sthref249"></a><a id="sthref250"></a>A dimension represents the general concept of a list of members that can organize a set of data. For example, if you have a set of figures that are the prices of product items during month time periods, then the unit price data is represented by an <code>MdmMeasure</code> that is dimensioned by dimensions for time and product values. The time dimension includes the month values and the product dimension includes item values. The month and item values act as indexes for identifying each particular value in the set of unit price data.</p>
<p>A dimension can contain levels and hierarchies. Levels can group dimension members into parent and child relationships, where members of lower levels are the children of parents that are in higher levels. Hierarchies define the relationships between the levels. Dimensions usually have associated attributes.</p>
<p>The base class for dimension, level, and hierarchy objects is the abstract class <code>MdmDimension</code>, which extends <code>MdmSource</code>. An <code>MdmDimension</code> has methods for getting and for removing the attributes associated with the object. It also has methods for getting and setting the cardinality and the custom order of the members of the object. The direct subclasses of <code>MdmDimension</code> are the abstract <code>MdmPrimaryDimension</code> and <code>MdmSubDimension</code> classes.</p>
<p><code>MdmPrimaryDimension</code> and <code>MdmHierarchyLevel</code> objects can have associated <code>MdmAttribute</code> objects. For information on attributes, see <a href="#BABEAJCH">&#34;Representing Dimension Attributes&#34;</a>.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref251"></a>
<h4 class="sect3">Representing Dimensions</h4>
<p><a id="sthref252"></a><a id="sthref253"></a>Dimensions are represented by instances of the <code>MdmPrimaryDimension</code> class, which is an abstract subclass of <code>MdmDimension</code>. The concrete subclasses of the <code>MdmPrimaryDimension</code> class represent different types of data. The concrete subclasses of <code>MdmPrimaryDimension</code> are the following:</p>
<ul>
<li>
<p><a id="sthref254"></a><code>MdmMeasureDimension</code>, which has all of the <code>MdmMeasure</code> objects in the data store as the values of the dimension members. A data store has only one <code>MdmMeasureDimension</code>. You can obtain the <code>MdmMeasureDimension</code> by calling the <code>getMeasureDimension</code> method of the <code>MdmRootSchema</code>. You can get the measures of the data store by calling the <code>getMeasures</code> method of the <code>MdmMeasureDimension</code>.</p>
</li>
<li>
<p><a id="sthref255"></a><code>MdmStandardDimension</code>, which has no special characteristics, and which typically represent dimensions of products, customers, distribution channels, and so on.</p>
</li>
<li>
<p><a id="sthref256"></a><a id="sthref257"></a><a id="sthref258"></a><code>MdmTimeDimension</code>, which has time periods as the values of the members. Each time period has an end date and a time span. An <code>MdmTimeDimension</code> has methods for getting the attributes that record that information.</p>
</li>
</ul>
<p><a id="sthref259"></a>An <code>MdmPrimaryDimension</code> implements the following interfaces.</p>
<ul>
<li>
<p><a id="sthref260"></a><code>Buildable</code>, which is a marker interface for objects that you can specify in constructing a <code>BuildItem</code>.</p>
</li>
<li>
<p><a id="sthref261"></a><code>MdmMemberListMapOwner</code>, which defines methods for finding or creating, or getting, a <code>MemberListMap</code> object.</p>
</li>
<li>
<p><a id="sthref262"></a><code>MdmViewColumnOwner</code>, which is marker interface for objects that can have an associated <code>MdmViewColumn</code>.</p>
</li>
<li>
<p><a id="sthref263"></a><code>MetadataObject</code>, which defines a method for getting a unique identifier.</p>
</li>
<li>
<p><a id="sthref264"></a><code>MdmQuery</code>, which defines methods for getting the <code>Query</code> object associated with the implementing class and for getting information about the <code>Query</code>.</p>
</li>
</ul>
<p>An <code>MdmPrimaryDimension</code> can have component <code>MdmDimensionLevel</code> objects that organize the dimension members into levels. It also can have <code>MdmHierarchy</code> objects, which organize the levels into the hierarchies. An <code>MdmPrimaryDimension</code> has all of the members of the component <code>MdmHierarchy</code> objects, while each of the <code>MdmHierarchy</code> objects has only the members in that hierarchy.</p>
<p>You can get all of the <code>MdmPrimaryDimension</code> objects that are contained by an <code>MdmDatabaseSchema</code> or an <code>MdmOrganizationalSchema</code> by calling the <code>getDimensions</code> method of the object. An <code>MdmDatabaseSchema</code> has methods for finding an <code>MdmTimeDimension</code> or an <code>MdmStandardDimension</code> by name or creating the object if it does not already exist.</p>
<p><code>MdmStandardDimension</code> and <code>MdmTimeDimension</code> objects contain <code>MdmAttribute</code> objects. Some of the attributes are derived by Oracle OLAP, such as the parent attribute, and others you map to data in relational tables or to data that you specify by an <code>Expression</code>. For information on attributes, see <a href="#BABEAJCH">&#34;Representing Dimension Attributes&#34;</a>.</p>
<p><a id="sthref265"></a>An <code>MdmPrimaryDimension</code> can organize the dimension members into one or more levels. Each level is represented by an <code>MdmDimensionLevel</code> object. An <code>MdmStandardDimension</code> or an <code>MdmTimeDimension</code> can contain <code>MdmHierarchy</code> objects that organize the levels into hierarchical relationships. In an <code>MdmLevelHierarchy</code> the dimension levels are represented by <code>MdmHierarchyLevel</code> objects. The concrete <code>MdmDimensionLevel</code> and <code>MdmHierarchyLevel</code> classes, and the abstract <code>MdmHierarchy</code> class, are the direct subclasses of the abstract <code>MdmSubDimension</code> class.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref266"></a>
<h4 class="sect3">Representing Dimension Levels</h4>
<p><a id="sthref267"></a><a id="sthref268"></a><a id="sthref269"></a><a id="sthref270"></a><a id="sthref271"></a>An <code>MdmDimensionLevel</code> represents a set of dimension members that are at the same level. A dimension member can be in at most one dimension level. You get or create an <code>MdmDimensionLevel</code> with the <code>findOrCreateDimensionLevel</code> of an <code>MdmPrimaryDimension</code>. You can map an <code>MdmDimensionLevel</code> to a data source by using a <code>MemberListMap</code>.</p>
<p>An <code>MdmPrimaryDimension</code> has a method for getting a list of all of the <code>MdmDimensionLevel</code> objects that it contains. It also has a method for finding an <code>MdmDimensionLevel</code> by name or creating the object if it does not already exist.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref272"></a>
<h4 class="sect3">Representing Hierarchies</h4>
<p><a id="sthref273"></a><code>MdmHierarchy</code> is an abstract subclass of <code>MdmSubDimension</code>. The concrete subclasses of <code>MdmHierarchy</code> are <code>MdmLevelHierarchy</code> and <code>MdmValueHierarchy</code>.</p>
<p><a id="sthref274"></a>An <code>MdmHierarchy</code> organizes the members of a dimension into a hierarchical structure. The parent-child hierarchical relationships of an <code>MdmLevelHierarchy</code> are based on the levels of the dimension. In an <code>MdmValueHierarchy</code>, the hierarchical relationships are based on dimension member values and not on levels. An <code>MdmPrimaryDimension</code> can have more than one of either or both kinds of hierarchies.</p>
<p><a id="sthref275"></a><a id="sthref276"></a><a id="sthref277"></a><a id="sthref278"></a><a id="sthref279"></a>The parent of a hierarchy member is recorded in a parent <code>MdmAttribute</code>, which you can get by calling the <code>getParentAttribute</code> method of the <code>MdmHierarchy</code>. The ancestors of a hierarchy member are recorded in an ancestors <code>MdmAttribute</code>, which you can get by calling the <code>getAncestorsAttribute</code> method.</p>
<p>An <code>MdmPrimaryDimension</code> has a method for getting a list of all of the <code>MdmHierarchy</code> objects that it contains. It also has methods for finding an <code>MdmLevelHierarchy</code> or <code>MdmValueHierarchy</code> by name or creating the object if it does not already exist.</p>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref280"></a>
<h5 class="sect4">Representing a Level-based Hierarchy</h5>
<p><a id="sthref281"></a><a id="sthref282"></a><a id="sthref283"></a><a id="sthref284"></a><code>MdmLevelHierarchy</code> is a subclass of <code>MdmHierarchy</code>. An <code>MdmLevelHierarchy</code> has a tree-like structure with a top, or highest, level, and a leaf, or lowest, level. Each member may have zero or one parent in the hierarchy. Cycles are not allowed, for example where member A is the parent of member B, member B is the parent of member C, and member C is the parent of member A.</p>
<p>Members that are not the child of any other member are the <span class="italic">top</span> members. Members with children are <span class="italic">aggregates</span> or <span class="italic">aggregate members</span> of the hierarchy. Members with no children are the <span class="italic">leaves</span> or <span class="italic">leaf members</span> of the hierarchy.</p>
<p>Each member is in a level. The levels are ordered, from top level to leaf level. The order is determined by the order in which you create the <code>MdmDimensionLevel</code> objects of the <code>MdmPrimaryDimension</code>. The first <code>MdmDimensionLevel</code> that you create is the top level and the last one you create is the leaf level. For example, for the CALENDAR_YEAR hierarchy of the TIME_AWJ dimension, the <code>CreateAndBuildAW.java</code> and <code>SpecifyAWValues</code> example programs create four <code>MdmDimensionLevel</code> objects in the following order: TOTAL_TIME, YEAR, QUARTER, and MONTH. The top level is TOTAL_TIME and the leaf level is MONTH.</p>
<p><a id="sthref285"></a><a id="sthref286"></a>If a member of the hierarchy has a parent, then that parent must be in a higher level. Oracle OLAP expects that all leaf members in the hierarchy are in the leaf level. You can specify that Oracle OLAP allow the hierarchy to be <span class="italic">ragged</span>. In a ragged hierarchy, one or more leaf members are not in the leaf level. You can specify allowing the hierarchy to be ragged by calling the <code>setIsRagged(true)</code> method of the <code>MdmLevelHierarchy</code>.</p>
<p><a id="sthref287"></a><a id="sthref288"></a>Oracle OLAP also expects that if a member is in a level below the top level, then that member has a parent, and that the parent is in the level just above the level of the member. If a member is not at the top level and that member either does not have a parent or the parent is not in the next higher level, then the hierarchy is a <code>skip-level</code> hierarchy. You can specify allowing a skip-level hierarchy by calling the <code>setIsSkipLevel(true)</code> method of the <code>MdmLevelHierarchy</code>.</p>
<p><a href="#BABBDICA">Figure 2-7</a> illustrates the relationships of members in a regular hierarchy, a ragged hierarchy, and two types of skip-level hierarchies.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABBDICA"></a>Figure 2-7 Regular, Ragged, and Skip-level Hierarchies</p>
<img width="491" height="132" src="img/ragskip.gif" alt="Description of Figure 2-7 follows"/><br/>
<a id="sthref289" href="img_text/ragskip.htm">Description of &#34;Figure 2-7 Regular, Ragged, and Skip-level Hierarchies&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The different levels of an <code>MdmLevelHierarchy</code> are represented by <code>MdmHierarchyLevel</code> objects. For an example of creating a level-based hierarchy, see <a href="create.htm#CACBHABH">&#34;Creating and Mapping an MdmLevelHierarchy&#34;</a>.</p>
<p>The <code>MdmLevelHierarchy</code> has all of the members of the hierarchy, and each of the component <code>MdmHierarchyLevel</code> objects has only the members at the level that it represents. An <code>MdmLevelHierarchy</code> can also represent a nonhierarchical list of members, in which case the <code>MdmLevelHierarchy</code> has one <code>MdmHierarchyLevel</code>, and both objects have the same members. You get the levels of an <code>MdmLevelHierarchy</code> by calling the <code>getHierarchyLevels</code> method.</p>
<p>An <code>MdmLevelHierarchy</code> has a method for getting a list of all of the <code>MdmHierarchyLevel</code> objects that it contains. It also has a method for finding an <code>MdmHierarchyLevel</code> by name or creating the object if it does not already exist.</p>
<p>An <code>MdmPrimaryDimension</code> can contain more than one <code>MdmLevelHierarchy</code>. For example, an <code>MdmTimeDimension</code> dimension might have two <code>MdmLevelHierarchy</code> objects, one organized by calendar year time periods and the other organized by fiscal year time periods. The <code>MdmHierarchyLevel</code> objects of one hierarchy associate <code>MdmDimensionLevel</code> objects of calendar year time periods with the hierarchy. The <code>MdmHierarchyLevel</code> objects of the other hierarchy associate <code>MdmDimensionLevel</code> objects of fiscal year time periods with that hierarchy. Generally, level-based hierarchies share the lowest level, so the <code>MdmHierarchyLevel</code> for the lowest level of each of the hierarchies associates the same <code>MdmDimensionLevel</code> with each hierarchy. For example, the calendar year hierarchy and the fiscal year hierarchy share the same <code>MdmHierarchyLevel</code> of month time periods.</p>
</div>
<!-- class="sect4" -->
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref290"></a>
<h5 class="sect4">Representing a Value-based Hierarchy</h5>
<p><a id="sthref291"></a><a id="sthref292"></a>A value-based hierarchy is one in which levels are not meaningful in defining the hierarchical relationships. This type of hierarchy is represented by the <code>MdmValueHierarchy</code> class, which is a subclass of <code>MdmHierarchy</code>. An example of a value hierarchy is the employee reporting structure of a company, which can be represented with parent-child relationships but without levels. For an example of creating a value-based hierarchy, see <a href="create.htm#CACGIGFE">&#34;Creating and Mapping an MdmValueHierarchy&#34;</a>.</p>
<p>The OLAP view for the value hierarchy has a column that contains all employees, including those who are managers. It has another column that contains the parent members. Another column identifies the depth of the member in the hierarchy, where the member that has no manager is at depth 0 (zero), the employees who report to that manager are at level 1, and so on.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref293"></a>
<h4 class="sect3">Representing Hierarchy Levels</h4>
<p><a id="sthref294"></a><code>MdmHierarchyLevel</code> is a subclass of <code>MdmSubDimension</code>. An <code>MdmHierarchyLevel</code> associates an <code>MdmDimensionLevel</code> with an <code>MdmLevelHierarchy</code>.</p>
<p>The order of the levels in the hierarchy is specified by the order in which you create the <code>MdmHierarchyLevel</code> objects for the <code>MdmLevelHierarchy</code>. The first <code>MdmHierarchyLevel</code> that you create is the highest level and the last one that you create is the lowest level. For an example of creating a hierarchy, see <a href="create.htm#CACBHABH">&#34;Creating and Mapping an MdmLevelHierarchy&#34;</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABEAJCH"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Representing Dimension Attributes</h3>
<p><a id="sthref295"></a><a id="sthref296"></a><a id="sthref297"></a>An OLAP dimension attribute is represented by an <code>MdmAttribute</code> object. An <code>MdmAttribute</code> has values that are related to members of an <code>MdmPrimaryDimension</code>. The <code>MdmAttribute</code> class is a subclass of <code>MdmDimensionedObject</code> because, like an <code>MdmMeasure</code>, the values of an <code>MdmAttribute</code> have meaning in relation to the members of the dimension.</p>
<p><a id="sthref298"></a><a id="sthref299"></a>The relation can be one-to-one, many-to-one, or one-to-many. For example, the PRODUCT_AWJ dimension has a short description attribute, a package attribute, and an ancestors attribute. The short description attribute has a separate value for each dimension member. The package attribute has a set of values, each of which applies to more than one dimension member. The ancestors attribute has multiple values that apply to a single dimension member. If an <code>MdmAttribute</code> does not apply to a member of an <code>MdmDimension</code>, then the <code>MdmAttribute</code> value for that member is <code>null</code>.</p>
<p><a href="#BABFEAGF">Table 2-3</a> shows the first few members of the PRODUCT_AWJ dimension and their related short description and package attribute values. Only some of the members of the ITEM level of the dimension have a package attribute. For other items, and for higher levels, the package attribute value is <code>null</code>, which appears as <code>NA</code> in the table.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref300"></a><a id="BABFEAGF"></a>Table 2-3 Dimension Members and Related Attribute Values</p>
<table class="cellalignment4781" title="Dimension Members and Related Attribute Values" summary="Members of the Product dimenson members and related short description and package attribute values." dir="ltr">
<thead>
<tr class="cellalignment4770">
<th class="cellalignment4782" id="r1c1-t7">Dimension Member</th>
<th class="cellalignment4782" id="r1c2-t7">Related Short Description</th>
<th class="cellalignment4782" id="r1c3-t7">Related Package</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r2c1-t7" headers="r1c1-t7">
<p><code>TOTAL_PRODUCT::TOTAL</code></p>
</td>
<td class="cellalignment4776" headers="r2c1-t7 r1c2-t7">
<p><code>Total Product</code></p>
</td>
<td class="cellalignment4776" headers="r2c1-t7 r1c3-t7">
<p><code>NA</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r3c1-t7" headers="r1c1-t7">
<p><code>CLASS::HRD</code></p>
</td>
<td class="cellalignment4776" headers="r3c1-t7 r1c2-t7">
<p><code>Hardware</code></p>
</td>
<td class="cellalignment4776" headers="r3c1-t7 r1c3-t7">
<p><code>NA</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r4c1-t7" headers="r1c1-t7">
<p><code>FAMILY::DISK</code></p>
</td>
<td class="cellalignment4776" headers="r4c1-t7 r1c2-t7">
<p><code>CD/DVD</code></p>
</td>
<td class="cellalignment4776" headers="r4c1-t7 r1c3-t7">
<p><code>NA</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r5c1-t7" headers="r1c1-t7">
<p><code>ITEM::EXT CD ROM</code></p>
</td>
<td class="cellalignment4776" headers="r5c1-t7 r1c2-t7">
<p><code>External 48X CD-ROM</code></p>
</td>
<td class="cellalignment4776" headers="r5c1-t7 r1c3-t7">
<p><code>NA</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r6c1-t7" headers="r1c1-t7">
<p><code>ITEM::EXT DVD</code></p>
</td>
<td class="cellalignment4776" headers="r6c1-t7 r1c2-t7">
<p><code>External - DVD-RW - 8X</code></p>
</td>
<td class="cellalignment4776" headers="r6c1-t7 r1c3-t7">
<p><code>Executive</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r7c1-t7" headers="r1c1-t7">
<p><code>ITEM::INT 8X DVD</code></p>
</td>
<td class="cellalignment4776" headers="r7c1-t7 r1c2-t7">
<p><code>Internal - DVD-RW - 8X</code></p>
</td>
<td class="cellalignment4776" headers="r7c1-t7 r1c3-t7">
<p><code>NA</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r8c1-t7" headers="r1c1-t7">
<p><code>ITEM::INT CD ROM</code></p>
</td>
<td class="cellalignment4776" headers="r8c1-t7 r1c2-t7">
<p><code>Internal 48X CD-ROM</code></p>
</td>
<td class="cellalignment4776" headers="r8c1-t7 r1c3-t7">
<p><code>Laptop Value Pack</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r9c1-t7" headers="r1c1-t7">
<p><code>ITEM::INT CD USB</code></p>
</td>
<td class="cellalignment4776" headers="r9c1-t7 r1c2-t7">
<p><code>Internal 48X CD-ROM USB</code></p>
</td>
<td class="cellalignment4776" headers="r9c1-t7 r1c3-t7">
<p><code>NA</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r10c1-t7" headers="r1c1-t7">
<p><code>ITEM::INT RW DVD</code></p>
</td>
<td class="cellalignment4776" headers="r10c1-t7 r1c2-t7">
<p><code>Internal - DVD-RW - 6X</code></p>
</td>
<td class="cellalignment4776" headers="r10c1-t7 r1c3-t7">
<p><code>Multimedia</code></p>
</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r11c1-t7" headers="r1c1-t7">
<p>...</p>
</td>
<td class="cellalignment4776" headers="r11c1-t7 r1c2-t7">
<p>...</p>
</td>
<td class="cellalignment4776" headers="r11c1-t7 r1c3-t7">
<p>...</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>To get values from an <code>MdmAttribute</code>, you must join the <code>Source</code> for the <code>MdmAttribute</code> and a <code>Source</code> that specifies one or more members of the <code>MdmDimension</code>. For an explanation of joining <code>Source</code> objects, see <a href="query.htm#g1030586">Chapter 5</a>. For examples of joining the <code>Source</code> objects for an <code>MdmAttribute</code> and an <code>MdmDimension</code>, see <a href="create.htm#BABDCIBA">Example 4-5</a> and examples from <a href="query.htm#g1030586">Chapter 5</a> and <a href="select.htm#g1017484">Chapter 6</a>, such as <a href="query.htm#BABJHBEG">Example 5-7</a> and <a href="select.htm#CBBGEGFA">Example 6-10</a>.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref301"></a>
<h4 class="sect3">Describing the MdmAttribute Class</h4>
<p><a id="sthref302"></a>The abstract <code>MdmAttribute</code> class has a subclass, which is the abstract class <code>MdmSingleValuedAttribute</code>. That class has two concrete subclasses: <code>MdmBaseAttribute</code> and <code>MdmDerivedAttribute</code>.</p>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref303"></a>
<h5 class="sect4">Describing Types of Attributes</h5>
<p><a id="sthref304"></a><a id="sthref305"></a><a id="sthref306"></a><a id="sthref307"></a>An <code>MdmAttribute</code> is contained by the <code>MdmPrimaryDimension</code> that creates it. Some attributes, such as the parent attribute and the level attribute, are derived by Oracle OLAP from the structure of the dimension. Others are common attributes for which an <code>MdmPrimaryDimension</code> has accessor methods, such as the long and short description attributes, or the end date and time span attributes that an <code>MdmTimeDimension</code> requires. After you create one of those attributes, you associate it with the dimension through a method such as the <code>setShortValueDescriptionAttribute</code> method of an <code>MdmPrimaryDimension</code> or the <code>setTimeSpanAttribute</code> method of an <code>MdmTimeDimension</code>. You can also create attributes for your own purposes, such as the PACKAGE attribute in the GLOBAL_AWJ example analytic workspace.</p>
</div>
<!-- class="sect4" -->
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref308"></a>
<h5 class="sect4">Associating an Attribute with an MdmSubDimension</h5>
<p>After you create an attribute, you associate it with an <code>MdmSubDimension</code>. You can associate it with just a single <code>MdmSubDimension</code> by using the <code>addAttribute</code> method of the <code>MdmSubDimension</code>. You can also associate it with all of the <code>MdmDimensionLevel</code> objects of an <code>MdmPrimaryDimension</code> by using the <code>setIsVisibleForAll</code> method of the <code>MdmAttribute</code>. If you specify <code>true</code> with the <code>setIsVisibleForAll</code> method, then the attribute applies to all of the <code>MdmDimensionLevel</code> objects that are currently contained by the <code>MdmPrimaryDimension</code> and to any <code>MdmDimensionLevel</code> objects that you subsequently create or add to the dimension.</p>
</div>
<!-- class="sect4" -->
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref309"></a>
<h5 class="sect4">Getting MdmAttribute Objects</h5>
<p>The <code>getAttributes</code> method of an <code>MdmPrimaryDimension</code> returns all of the <code>MdmAttribute</code> objects that were created by a client application. The <code>getAttributes</code> method of an <code>MdmSubDimension</code> returns only those attributes that the application added to it with it the <code>addAttribute</code> method. Other methods of an <code>MdmPrimaryDimension</code> return specific attributes that Oracle OLAP generates, such as the <code>getHierarchyAttribute</code>, the <code>getLevelDepthAttribute</code>, or the <code>getParentAttribute</code> method.</p>
</div>
<!-- class="sect4" -->
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref310"></a>
<h5 class="sect4">Specifying a Target Dimension</h5>
<p><a id="sthref311"></a><a id="sthref312"></a>A target dimension for an attribute is similar to defining a foreign key constraint between columns in a table. All of the values of the attribute must also be keys of the target dimension.</p>
<p>You can specify a target dimension for an attribute by using the <code>setTargetDimension</code> method of the <code>MdmAttribute</code>. The relational table that is the <code>Query</code> for the target dimension must have a column that contains all of the values that are in the column of the dimension table to which you map the attribute.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref313"></a>
<h4 class="sect3">Describing the MdmBaseAttribute Class</h4>
<p><a id="sthref314"></a>An <code>MdmBaseAttribute</code> has values that are stored in the OLAP views for the dimension that contains it and the hierarchy to which it applies. For information on OLAP views, see <a href="#BABJBAIF">&#34;Using OLAP Views&#34;</a>.</p>
<p><a id="sthref315"></a><a id="sthref316"></a><a id="sthref317"></a><a id="sthref318"></a>You create an <code>MdmBaseAttribute</code> with the <code>findOrCreateBaseAttribute</code> method of an <code>MdmPrimaryDimension</code>. You map the <code>MdmBaseAttribute</code> to a column in a relational table or view. When you build the <code>MdmPrimaryDimension</code> that created the attribute, Oracle OLAP stores the values of the <code>MdmBaseAttribute</code> in an OLAP view. You can get the column for the <code>MdmBaseAttribute</code> in the OLAP view by using the <code>getETAttributeColumn</code> method. That method returns an <code>MdmViewColumn</code> object.</p>
<p>Examples of <code>MdmBaseAttribute</code> objects are the name attribute created and mapped in <a href="create.htm#BABDCIBA">Example 4-5</a> and the long description attribute created in <a href="create.htm#BABEHBJF">Example 4-6</a>. The mapping for that long description attribute is in <a href="create.htm#BABDJEDC">Example 4-3</a>.</p>
<p><a id="sthref319"></a>For regular OLAP queries, using <code>Source</code> objects, you only need to map an <code>MdmBaseAttribute</code> to <code>MdmDimensionLevel</code> objects by using <code>MemberListMap</code> objects. For SQL queries against OLAP views, you should map the attributes to <code>MdmHierarchyLevel</code> objects by using <code>HierarchyLevelMap</code> objects.</p>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref320"></a>
<h5 class="sect4">Specifying a Data Type</h5>
<p><a id="sthref321"></a>When you create an <code>MdmBaseAttribute</code>, you can specify the SQL data type with the <code>setSQLDataType</code> method. If you do not specify it, then the <code>MdmBaseAttribute</code> has the data type of the source data to which you map it. For example, the SQL data type of the short description attribute is <code>VARCHAR2</code> and the data type of the end date attribute is <code>DATE</code>.</p>
<p><a id="sthref322"></a><a id="sthref323"></a>By specifying <code>true</code> with the <code>setAllowAutoDataTypeChange</code> method, you can allow Oracle OLAP to automatically set the SQL data type. If you allow the automatic changing of the SQL data type, then Oracle OLAP ignores the SQL data type specified by the <code>setSQLDataType</code> method. This can be useful if you map the same attribute to levels that have different data types, or if the data type of a level changes.</p>
</div>
<!-- class="sect4" -->
<a id="BABBDEIG"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Grouping Attributes</h5>
<p><a id="sthref324"></a><a id="sthref325"></a><a id="sthref326"></a>With the <code>setAttributeGroupName</code> method of an <code>MdmBaseAttribute</code>, you can specify a name for an attribute group. You can specify the same group name for other attributes. For example, you could create a long description attribute for each dimension level and give each attribute the group name of LONG_DESCRIPTION. You could use the group name to identify similar kinds of attributes. You get the group name with the <code>getAttributeGroupName</code> method.</p>
</div>
<!-- class="sect4" -->
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref327"></a>
<h5 class="sect4">Creating an Index</h5>
<p><a id="sthref328"></a><a id="sthref329"></a><a id="sthref330"></a>You can improve the performance of attribute-based queries by creating an index for the attribute. Creating an index adds maintenance time and increases the size of the analytic workspace, which may increase the build time for extremely large dimensions. You create an index for an attribute by specifying <code>true</code> with the <code>setCreateAttributeIndex</code> method of the <code>AWAttributeOrganization</code> for the <code>MdmBaseAttribute</code>.</p>
</div>
<!-- class="sect4" -->
<a id="BABEHIEC"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Specifying a Language for an Attribute</h5>
<p><a id="sthref331"></a><a id="sthref332"></a><a id="sthref333"></a><a id="sthref334"></a>When you create an <code>AttributeMap</code> for an <code>MdmBaseAttribute</code>, you can specify a language for the attribute. For example, to specify French as the language for the long description attribute for the <code>MdmDimensionLevel</code> named <code>CHANNEL</code>, you would create an <code>AttributeMap</code> by calling the <code>MemberListMap.findOrCreateAttributeMap</code> method and passing in the long description <code>MdmBaseAttribute</code> and <code>FRENCH</code> as the <code>String</code> that specifies the language. You would then specify <code>GLOBAL.CHANNEL_DIM.CHANNEL_DSC_FRENCH</code> as the <code>Expression</code> for the <code>AttributeMap</code>. By using the <code>setLanguage</code> method of an <code>AttributeMap</code>, you can specify a language for an <code>AttributeMap</code> after you have created it.</p>
</div>
<!-- class="sect4" -->
<a id="BABJHGGF"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Specifying Multilingual Attributes</h5>
<p><a id="sthref335"></a><a id="sthref336"></a><a id="sthref337"></a>The <code>MdmBaseAttribute.setMultiLingual</code> method allows you to map more than one language column to the same attribute. To do so, you specify true with the <code>setMultiLingual</code> method of the attribute. You then create a separate <code>AttributeMap</code> for each language but you use the same <code>MdmBaseAttribute</code>.</p>
<p>The language in use for the database determines which language appears in the OLAP view for the dimension. Only one language is in use at a time in a session, but if the language in use changes, then the language in the attribute column in the OLAP view also changes. For more information on specifying languages for database sessions, see <a class="olink NLSPG" href="../NLSPG/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</p>
<p>For materialized views, you should create a separate attribute for each language, so that there is a long description attribute for English, one for French, and so on. That behavior is more typical in SQL, which does not expect multivalued columns.</p>
</div>
<!-- class="sect4" -->
<a id="BABBJDDC"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Populating OLAP Views with Hierarchical Attribute Values</h5>
<p><a id="sthref338"></a><a id="sthref339"></a><a id="sthref340"></a><a id="sthref341"></a><a id="sthref342"></a>For SQL queries, you should populate the lineage of the attributes in the view by specifying <code>true</code> with the <code>MdmBaseAttribute.setPopulateLineage</code> method. Populating the lineage means that in the column for an attribute in an OLAP view, Oracle OLAP populates the rows for lower levels in a dimension hierarchy with the attribute values that are mapped at a higher level. Populating the lineage for the attributes is also useful if you are creating materialized views for an analytic workspace cube.</p>
<p>If you specify <code>setPopulateLineage(false)</code>, which is the default for the setting, then the attribute values appear only in the rows for the hierarchy members at the level to which the attribute is mapped. For hierarchy members at other levels, the attribute value is <code>null</code>. If you specify <code>setPopulateLineage(true)</code>, then the attribute values appear in the rows for the members of the mapped level and for the hierarchy members of all levels that are descendants of the mapped level.</p>
<p>Populating the hierarchy lineage in an OLAP view makes the contents of the view more like the contents of a relational table in a star schema. For example, you could create a separate long description attribute on the dimension for each <code>MdmDimensionLevel</code> of the dimension. You would specify populating the lineage of those attributes by calling the <code>setPopulateLineage(true)</code> method of each attribute. You would then make the attribute visible for a hierarchy level by adding the attribute to the <code>MdmHierarchyLevel</code> with the <code>addAttribute</code> method.</p>
<p>The OLAP view for a hierarchy of the dimension would then have a column for each of the long description attributes. Those columns would contain the long description attribute values for the members of the mapped hierarchy level and for the hierarchy members of all levels that are descendants of the mapped level.</p>
<p>For example, the <code>CreateAndBuildAW</code> example class has a line of code that specifies populating the lineage for the <code>MdmBaseAttribute</code> objects that it adds to each individual <code>MdmHierarchyLevel</code>. The following line appears in the <code>createLineageAttributes</code> method of the class.</p>
<pre>  mdmAttr.setPopulateLineage(true);
</pre>
<p><a href="#BABCCFHJ">Example 2-2</a> shows the results of the following SQL query when that line of code is commented out. <a href="#BABIDGEH">Example 2-3</a> shows the results of the SQL query when the line is included in the class. Both examples show the values that are in the selected columns of the OLAP view for the PRODUCT_PRIMARY hierarchy. The view name is PRODUCT_AWJ_PRODUCT_PRIMA_VIEW. The examples show only a few of the lines returned by the SQL query.</p>
<pre>SELECT TOTAL_PRODUCT_SHORT_DESC || &#39;*&#39; || CLASS_SHORT_DESC || &#39;*&#39; ||
        FAMILY_SHORT_DESC || &#39;*&#39; || ITEM_SHORT_DESC
  FROM PRODUCT_AWJ_PRODUCT_PRIMA_VIEW
  ORDER BY TOTAL_PRODUCT nulls first, CLASS nulls first,
           FAMILY nulls first, ITEM nulls first;
</pre>
<p>In <a href="#BABCCFHJ">Example 2-2</a>, the attribute rows of the OLAP view have only the attribute values for the hierarchy level to which the dimension member belongs.</p>
<div class="example">
<p class="titleinexample"><a id="BABCCFHJ"></a>Example 2-2 Values in OLAP View Columns After setPopulateLineage(false)</p>
<pre>TOTAL_PRODUCT_SHORT_DESC||&#39;*&#39;||CLASS_SHORT_DESC||&#39;*&#39;||FAMILY_SHORT_DESC||&#39;*&#39;||IT
--------------------------------------------------------------------------------
Total Product***
*Hardware**
**CD/DVD*
***External 48X CD-ROM
***External - DVD-RW - 8X
***Internal - DVD-RW - 8X
...
**Desktop PCs*
***Sentinel Financial
***Sentinel Multimedia
***Sentinel Standard
**Portable PCs*
***Envoy Ambassador
***Envoy Executive
***Envoy Standard
...
</pre></div>
<!-- class="example" -->
<p>In <a href="#BABIDGEH">Example 2-3</a>, the attribute rows of the OLAP view are populated with the attribute values for the ancestors of a dimension member. For example, the first row contains only the value Total Product because TOTAL_PRODUCT is the highest level in the hierarchy. The row that contains the value <code>Envoy Standard</code> also has the values for the TOTAL_PRODUCT, CLASS, and FAMILY levels.</p>
<div class="example">
<p class="titleinexample"><a id="BABIDGEH"></a>Example 2-3 Values in OLAP View Columns After setPopulateLineage(true)</p>
<pre>TOTAL_PRODUCT_SHORT_DESC||&#39;*&#39;||CLASS_SHORT_DESC||&#39;*&#39;||FAMILY_SHORT_DESC||&#39;*&#39;||IT
--------------------------------------------------------------------------------
Total Product***
Total Product*Hardware**
Total Product*Hardware*CD/DVD*
Total Product*Hardware*CD/DVD*External 48X CD-ROM
Total Product*Hardware*CD/DVD*External - DVD-RW - 8X
Total Product*Hardware*CD/DVD*Internal - DVD-RW - 8X
...
Total Product*Hardware*Desktop PCs*
Total Product*Hardware*Desktop PCs*Sentinel Financial
Total Product*Hardware*Desktop PCs*Sentinel Multimedia
Total Product*Hardware*Desktop PCs*Sentinel Standard
Total Product*Hardware*Portable PCs*
Total Product*Hardware*Portable PCs*Envoy Ambassador
Total Product*Hardware*Portable PCs*Envoy Executive
Total Product*Hardware*Portable PCs*Envoy Standard
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect4" -->
<a id="BABJEJBF"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Preparing Attributes for Materialized Views</h5>
<p><a id="sthref343"></a><a id="sthref344"></a><a id="sthref345"></a><a id="sthref346"></a><a id="sthref347"></a>To generate materialized views for the OLAP metadata objects, for each <code>MdmDimensionLevel</code> you must create an <code>MdmBaseAttribute</code>, map it to a unique key for the <code>MdmDimensionLevel</code>, and add it to the <code>MdmDimensionLevel</code>. An <code>MdmDimensionLevel</code> has methods for adding, getting, and removing unique key attributes. The <code>EnableMVs.java</code> example program creates unique key attributes and adds them to the <code>MdmDimensionLevel</code> objects of the dimensions. For information about using materialized views, see <a class="olink OLAUG9156" href="../OLAUG/cubes.htm#OLAUG9156"><span class="italic">Oracle OLAP User&#39;s Guide</span></a>.</p>
<p><a id="sthref348"></a><a id="sthref349"></a><a id="sthref350"></a><a id="sthref351"></a>When Oracle OLAP creates a materialized view for a cube, it creates columns for the attributes of the dimensions of the cube. For the name of a column, it uses the name of the attribute column from the OLAP view of the dimension. To ensure that the column name is unique, Oracle OLAP adds a default prefix to the name. You can specify the prefix by using the <code>setETAttrPrefix</code> method of the <code>MdmDimensionality</code> object for a dimension of the cube.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref352"></a>
<h4 class="sect3">Describing the MdmDerivedAttribute Class</h4>
<p><a id="sthref353"></a>An <code>MdmDerivedAttribute</code> has values that Oracle OLAP calculates on the fly as you need them. Oracle OLAP generates several <code>MdmDerivedAttribute</code> objects, such as the attributes returned by the <code>getParentAttribute</code> and the <code>getAncestorsAttribute</code> methods of an <code>MdmPrimaryDimension</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABJBAIF"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using OLAP Views</h3>
<p><a id="sthref354"></a>For each instance of an <code>MdmCube</code>, <code>MdmPrimaryDimension</code>, and <code>MdmHierarchy</code> in an analytic workspace, Oracle OLAP automatically creates an associated relational view. Oracle OLAP uses these views internally to provide access to the aggregate and calculated data that is generated by the analytic workspace. An OLAP Java API query transparently uses the views. In the OLAP Java API, these views are called ET (embedded totals) views.</p>
<p><a id="sthref355"></a><a id="sthref356"></a><a id="sthref357"></a><a id="sthref358"></a>A SQL application can directly query these views, using them as it would the fact tables and dimension tables of a star or snowflake schema. The <a class="olink OLAUG9159" href="../OLAUG/query.htm#OLAUG9159"><span class="italic">Oracle OLAP User&#39;s Guide</span></a> documentation refers to these views as OLAP views and describes them in detail. For those detailed descriptions, see <a class="olink OLAUG9159" href="../OLAUG/query.htm#OLAUG9159"><span class="italic">Oracle OLAP User&#39;s Guide</span></a>.</p>
<p>A client OLAP Java API application can get the names of the OLAP views and get the names of columns in the views. The application could display the names to the end user of the application, and the end user could then use the names in a SQL <code>SELECT</code> statement to query the OLAP objects.</p>
<div class="sect3"><a id="sthref359"></a>
<h4 class="sect3">Getting Cube View and View Column Names</h4>
<p><a id="sthref360"></a>To get the name of a cube view, call the <code>MdmCube.getViewName()</code> method. For example, the following code gets the name of the view for the <code>MdmCube</code> that is named UNITS_CUBE_AWJ. In the code, the <code>mdmDBSchema</code> object is the <code>MdmDatabaseSchema</code> for the GLOBAL user.</p>
<pre>MdmCube mdmUnitsCube =
 (MdmCube)mdmDBSchema.getTopLevelObject(&#34;UNITS_CUBE_AWJ&#34;);
String cubeViewName = mdmUnitsCube.getViewName();
println(&#34;The name of the view for the &#34; +
         mdmUnitsCube.getName() + &#34; cube is &#34; + cubeViewName + &#34;.&#34;);
</pre>
<p>The output of the code is the following.</p>
<pre>The name of the view for the UNITS_CUBE_AWJ cube is UNITS_CUBE_AWJ_VIEW.
</pre>
<p>You can change the name of the OLAP view by using the <code>MdmCube.setViewName</code> method. To make the name change permanent, you must commit the <code>Transaction</code>.</p>
<p>The OLAP view for an <code>MdmCube</code> has a column for each measure of the cube, including each derived measure. In <a class="olink OLAUG9187" href="../OLAUG/calculations.htm#OLAUG9187"><span class="italic">Oracle OLAP User&#39;s Guide</span></a>, a derived measure is known as a calculated measure. A cube view also has a column for each dimension of the cube. For example, for the <code>MdmCube</code> named UNITS_CUBE_AWJ, the view is named UNITS_CUBE_AWJ_VIEW. The following code gets the names of the view columns.</p>
<pre><a id="sthref361"></a>MdmCube mdmUnitsCube = mdmDBSchema.findOrCreateCube(&#34;UNITS_CUBE_AWJ&#34;);
List&lt;MdmQueryColumn&gt; mdmQCols = mdmUnitsCube.getQueryColumns();
for (MdmQueryColumn mdmQCol : mdmQCols )
{
  MdmViewColumn mdmViewCol = (MdmViewColumn) mdmQCol;
  println(mdmViewCol.getViewColumnName());
}
</pre>
<p>The code displays the following output.</p>
<pre>TIME_AWJ
PRODUCT_AWJ
CUSTOMER_AWJ
CHANNEL_AWJ
UNITS
SALES
COST
</pre>
<p>The <code>UNITS</code>, <code>SALES</code>, and <code>COST</code> columns are for the measures of the cube, and the other four columns are for the dimensions of the cube.</p>
</div>
<!-- class="sect3" -->
<a id="CIAIHIEF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Getting Dimension and Hierarchy View and View Column Names</h4>
<p><a id="sthref362"></a>To get the name of the OLAP view for a dimension or a hierarchy, call the <code>getETViewName()</code> method of the <code>MdmPrimaryDimension</code> or <code>MdmHierarchy</code>. You can get the name of a column in the view by calling the appropriate method of the metadata object. For example, the following code gets the name of the key column for the CHANNEL_AWJ dimension and the parent column for the CHANNEL_PRIMARY hierarchy.</p>
<pre>println(mdmChanDim.getETKeyColumn().getViewColumnName());
MdmViewColumn mdmParentCol =(MdmViewColumn) mdmChanHier.getETParentColumn();
println(mdmParentCol.getViewColumnName());
</pre>
<p>The code displays the following output.</p>
<pre>DIM_KEY
PARENT
</pre>
<p>You can change the name of the OLAP view by using the <code>setETViewName</code> method of the <code>MdmPrimaryDimension</code> or <code>MdmHierarchy</code>.</p>
<p>The OLAP view for an <code>MdmPrimaryDimension</code> has a column for the dimension keys, a column for each dimension level, and a column for each attribute associated with the dimension. For example, for the <code>MdmStandardDimension</code> named CHANNEL_AWJ, the view is named CHANNEL_AWJ_VIEW. The SQL command <code>DESCRIBE CHANNEL_AWJ_VIEW</code> displays the names of the following columns.</p>
<pre>DIM_KEY
LEVEL_NAME
MEMBER_TYPE
DIM_ORDER
LONG_DESCRIPTION
SHORT_DESCRIPTION
TOTAL_CHANNEL_LONG_DESC
TOTAL_CHANNEL_SHORT_DESC
CHANNEL_LONG_DESC
CHANNEL_SHORT_DESC
</pre>
<p>The OLAP view for an <code>MdmHierarchy</code> has a column for the dimension keys and a column for the parent of a hierarchy member. If it is an <code>MdmLevelHierarchy</code>, then it also has a column for each hierarchy level and a column for the depth of a level. If the hierarchy has one or more added attributes, then the view has a column for each attribute. For example, for the <code>MdmLevelHierarchy</code> named CHANNEL_PRIMARY, the view is named CHANNEL_AWJ_CHANNEL_PRIMA_VIEW. The SQL command <code>DESCRIBE CHANNEL_AWJ_CHANNEL_PRIMA_VIEW</code> displays the names of the following columns.</p>
<pre>DIM_KEY
LEVEL_NAME
MEMBER_TYPE
DIM_ORDER
HIER_ORDER
LONG_DESCRIPTION
SHORT_DESCRIPTION
TOTAL_CHANNEL_LONG_DESC
TOTAL_CHANNEL_SHORT_DESC
CHANNEL_LONG_DESC
CHANNEL_SHORT_DESC
PARENT
DEPTH
TOTAL_CHANNEL
CHANNEL
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref363"></a>
<h4 class="sect3">Using OLAP View Columns</h4>
<p>See <a class="olink OLAUG9170" href="../OLAUG/query.htm#OLAUG9170"><span class="italic">Oracle OLAP User&#39;s Guide</span></a> for several examples of how to create SQL queries using the OLAP views. An OLAP Java API query that uses <code>Source</code> objects automatically uses these views.</p>
<p>You can also provide direct access to the OLAP views to the users of your OLAP Java API application. You could allow users to specify a SQL <code>SELECT</code> statement that uses the views and then send that SQL query to the database.</p>
<p><a href="#BABGGGHA">Example 2-4</a> reproduces Example 4-2 of <a class="olink OLAUG9171" href="../OLAUG/query.htm#OLAUG9171"><span class="italic">Oracle OLAP User&#39;s Guide</span></a> except that it uses the cubes and dimensions of the analytic workspace. The example selects the SALES measure from UNITS_CUBE_AWJ_VIEW, and joins the keys from the cube view to the hierarchy views to select the data.</p>
<p>In the example, <code>mdmDBSchema</code> is the <code>MdmDatabaseSchema</code> for the GLOBAL user. The example is an excerpt from the <code>BasicCubeViewQuery.java</code> example program.</p>
<div class="example">
<p class="titleinexample"><a id="BABGGGHA"></a>Example 2-4 Basic Cube View Query</p>
<pre>// In a method...
  // Get the cube.
  MdmCube mdmUnitsCube =
     MdmCube)mdmDBSchema.getTopLevelObject(&#34;UNITS_CUBE_AWJ&#34;);
  // Get the OLAP view for the cube.
  String cubeViewName = mdmUnitsCube.getViewName();
  // Display the name of the OLAP view for the cube.
  println(&#34;The name of the OLAP view for the &#34; + mdmUnitsCube.getName()
          + &#34; cube is:\n  &#34; + cubeViewName);

  // Get the dimensions and the hierarchies of the dimensions.
  MdmPrimaryDimension mdmTimeDim =
   (MdmPrimaryDimension)mdmDBSchema.getTopLevelObject(&#34;TIME_AWJ&#34;);
<a id="sthref364"></a>  MdmLevelHierarchy mdmCalHier =
    mdmTimeDim.findOrCreateLevelHierarchy(&#34;CALENDAR_YEAR&#34;);

  // Display the name of the OLAP view name for the hierarchy and 
  // display the names of the hierarchy levels.
  displayViewAndLevelNames(mdmCalHier);

  MdmPrimaryDimension mdmProdDim =
   (MdmPrimaryDimension)mdmDBSchema.getTopLevelObject(&#34;PRODUCT_AWJ&#34;);
  MdmLevelHierarchy mdmProdHier =     mdmProdDim.findOrCreateLevelHierarchy(&#34;PRODUCT_PRIMARY&#34;);
  displayViewAndLevelNames(mdmProdHier);

  MdmPrimaryDimension mdmCustDim =
   (MdmPrimaryDimension)mdmDBSchema.getTopLevelObject(&#34;CUSTOMER_AWJ&#34;);
  MdmLevelHierarchy mdmShipHier =
    mdmCustDim.findOrCreateLevelHierarchy(&#34;SHIPMENTS&#34;);
  displayViewAndLevelNames(mdmShipHier);

  MdmPrimaryDimension mdmChanDim =
   (MdmPrimaryDimension)mdmDBSchema.getTopLevelObject(&#34;CHANNEL_AWJ&#34;);
  MdmLevelHierarchy mdmChanHier =
    mdmChanDim.findOrCreateLevelHierarchy(&#34;CHANNEL_PRIMARY&#34;);
  displayViewAndLevelNames(mdmChanHier);

  // Create a SQL SELECT statement using the names of the views and the
  // levels.
  // UNITS_CUBE_AWJ_VIEW has a column named SALES for the sales measure.
  // TIME_AWJ_CALENDAR_YEAR_VIEW has a column named LONG_DESCRIPTION
  // for the long description attribute.
  // The hierarchy views have columns that have the same names as the levels.
  String sql = &#34;SELECT t.long_description time,\n&#34; +
                    &#34;     ROUND(f.sales) sales\n&#34; +
                    &#34;  FROM TIME_AWJ_CALENDAR_YEAR_VIEW t,\n&#34; +
                    &#34;     PRODUCT_AWJ_PRODUCT_PRIMA_VIEW p,\n&#34; +
                    &#34;     CUSTOMER_AWJ_SHIPMENTS_VIEW cu,\n&#34; +
                    &#34;     CHANNEL_AWJ_CHANNEL_PRIMA_VIEW ch,\n&#34; +
                    &#34;     UNITS_CUBE_AWJ_VIEW f\n&#34; +
                    &#34;  WHERE t.level_name = &#39;YEAR&#39;\n&#34; +
                    &#34;     AND p.level_name = &#39;TOTAL_PRODUCT&#39;\n&#34; +
                    &#34;     AND cu.level_name = &#39;TOTAL_CUSTOMER&#39;\n&#34; +
                    &#34;     AND ch.level_name = &#39;TOTAL_CHANNEL&#39;\n&#34; +
                    &#34;     AND t.dim_key = f.time_awj\n&#34; +
                    &#34;     AND p.dim_key = f.product_awj\n&#34; +
                    &#34;     AND cu.dim_key = f.customer_awj\n&#34; +
                    &#34;     AND ch.dim_key = f.channel_awj\n&#34; +
                    &#34;  ORDER BY t.end_date&#34;;

  // Display the SQL SELECT statement.
  println(&#34;\nThe SQL SELECT statement is:\n&#34; + sql);

  // Display the results of the SQL query.
  String title = &#34;\nThe results of the SQL query are:\n&#34;;
  executeSQL(sql, title);
// ...
} // End of method.

private void displayViewAndLevelNames(MdmLevelHierarchy mdmLevelHier)
{
  // Get the OLAP view name for the hierarchy.
  String levelHierViewName = mdmLevelHier.getETViewName();
  // Display the name of the OLAP view for the hierarchy.
  println(&#34;\nThe OLAP view for the &#34; + mdmLevelHier.getName() + 
          &#34; hierarchy is:\n  &#34; + levelHierViewName);
  
  // Display the names of the levels of the hierarchy.
  displayLevelNames(mdmLevelHier);
}
 
private void displayLevelNames(MdmLevelHierarchy mdmLevelHier)
{
  List&lt;MdmHierarchyLevel&gt; mdmHierLevelList = 
    mdmLevelHier.getHierarchyLevels();
 println(&#34;The names of the levels of the &#34;
         + mdmLevelHier.getName() + &#34; hierarchy are:&#34;);
 for (MdmHierarchyLevel mdmHierLevel :  mdmHierLevelList)
 {
   println(&#34;  &#34; + mdmHierLevel.getName());
 }
}

// The executeSQL method is in the BaseExample11g class.
protected void executeSQL(String sql, String heading)
{
  try
  {
    Statement statement = dp.getConnection().createStatement();
    println(heading);
    ResultSet rs = statement.executeQuery(sql);
    SQLResultSetPrinter.printResultSet(getCursorPrintWriter(), rs);
    rs.close();
    statement.close();
  }
  catch (SQLException e)
  {
    println(&#34;Could not execute SQL statement. &#34; + e);
  }
}
</pre></div>
<!-- class="example" -->
<p>The output of <a href="#BABGGGHA">Example 2-4</a> is the following.</p>
<pre>The name of the OLAP view for the UNITS_CUBE_AWJ cube is:
  UNITS_CUBE_AWJ_VIEW

The OLAP view for the CALENDAR_YEAR hierarchy is:
  TIME_AWJ_CALENDAR_YEAR_VIEW
The names of the levels of the CALENDAR_YEAR hierarchy are:
  TOTAL_TIME
  YEAR
  QUARTER
  MONTH

The OLAP view for the PRODUCT_PRIMARY hierarchy is:
  PRODUCT_AWJ_PRODUCT_PRIMA_VIEW
The names of the levels of the PRODUCT_PRIMARY hierarchy are:
  TOTAL_PRODUCT
  CLASS
  FAMILY
  ITEM

The OLAP view for the SHIPMENTS hierarchy is:
  CUSTOMER_AWJ_SHIPMENTS_VIEW
The names of the levels of the SHIPMENTS hierarchy are:
  TOTAL_CUSTOMER
  REGION
  WAREHOUSE
  SHIP_TO

The OLAP view for the CHANNEL_PRIMARY hierarchy is:
  CHANNEL_AWJ_CHANNEL_PRIMA_VIEW
The names of the levels of the CHANNEL_PRIMARY hierarchy are:
  TOTAL_CHANNEL
  CHANNEL

The SQL SELECT statement is:
SELECT t.long_description time,
     ROUND(f.sales) sales
  FROM TIME_AWJ_CALENDAR_YEAR_VIEW t,
     PRODUCT_AWJ_PRODUCT_PRIMA_VIEW p,
     CUSTOMER_AWJ_SHIPMENTS_VIEW cu,
     CHANNEL_AWJ_CHANNEL_PRIMA_VIEW ch,
     UNITS_CUBE_AWJ_VIEW f
  WHERE t.level_name = &#39;YEAR&#39;
     AND p.level_name = &#39;TOTAL_PRODUCT&#39;
     AND cu.level_name = &#39;TOTAL_CUSTOMER&#39;
     AND ch.level_name = &#39;TOTAL_CHANNEL&#39;
     AND t.dim_key = f.time_awj
     AND p.dim_key = f.product_awj
     AND cu.dim_key = f.customer_awj
     AND ch.dim_key = f.channel_awj
  ORDER BY t.end_date

The results of the SQL query are:

TIME       SALES                 
---------- ----------------------
1998       100870877             
1999       134109248             
2000       124173522             
2001       116931722             
2002       92515295              
2003       130276514             
2004       144290686             
2005       136986572             
2006       140138317             
2007       &lt;null&gt;      
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref365"></a>
<h4 class="sect3">Using Source Objects</h4>
<p><a href="#BABGGGHA">Example 2-4</a> demonstrates how to create a SQL statement using the OLAP views. You can produce the same results by using OLAP Java API <code>Source</code> objects, as shown in <a href="#BABFECGF">Example 2-5</a>. The code in <a href="#BABFECGF">Example 2-5</a> uses the <code>MdmLevelHierarchy</code> objects from <a href="#BABGGGHA">Example 2-4</a>.</p>
<div class="example">
<p class="titleinexample"><a id="BABFECGF"></a>Example 2-5 Basic Cube Query Using Source Objects</p>
<pre>// Get the SALES measure and the Source for it.
<a id="sthref366"></a>MdmBaseMeasure mdmSales = mdmUnitsCube.findOrCreateBaseMeasure(&#34;SALES&#34;);
NumberSource sales = (NumberSource)mdmSales.getSource();

// Get the Source objects for the PRODUCT_PRIMARY, CHANNEL_PRIMARY
// and the SHIPMENTS hierarchies.
StringSource prodHier = (StringSource)mdmProdHier.getSource();
    StringSource shipHier = (StringSource)mdmShipHier.getSource();  
StringSource chanHier = (StringSource)mdmChanHier.getSource();
 
// Get the YEAR hierarchy level.
List&lt;MdmHierarchyLevel&gt; hierLevels = mdmCalHier.getLevels();
MdmHierarchyLevel mdmYearHierLevel = null;
for(MdmHierarchyLevel mdmHierLevel : hierLevels)
{
  mdmYearHierLevel = mdmHierLevel;
  if(mdmYearHierLevel.getName().equals(&#34;YEAR&#34;))
  {
    break;
  }
}
// Get the Source for the YEAR level of the CALENDAR_YEAR hierarchy.
Source yearLevel = mdmYearHierLevel.getSource();

// Select single values for the hierarchies except for the time hierarchy.
Source prodSel = prodHier.selectValue(&#34;PRODUCT_PRIMARY::TOTAL_PRODUCT::TOTAL&#34;);
Source custSel = shipHier.selectValue(&#34;SHIPMENTS::TOTAL_CUSTOMER::TOTAL&#34;);
Source chanSel = chanHier.selectValue(&#34;CHANNEL_PRIMARY::TOTAL_CHANNEL::TOTAL&#34;);

// Get the long description attribute for the TIME_AWJ dimension.
MdmBaseAttribute mdmTimeLDAttr = (MdmBaseAttribute)
  mdmTimeDim.getValueDescriptionAttribute();
Source timeLDAttr = mdmTimeLDAttr.getSource();

Source yearsWithLDValue = timeLDAttr.join(yearLevel);

Source result = sales.joinHidden(prodSel)
                     .joinHidden(custSel)
                     .joinHidden(chanSel)
                     .join(yearsWithLDValue);

getContext().commit();
getContext().displayResult(result);
</pre></div>
<!-- class="example" -->
<p>The values of the <code>Cursor</code> for the <code>result</code> <code>Source</code> are the following. The code for formatting the values is not shown. For the complete code for <a href="#BABGGGHA">Example 2-4</a> and <a href="#BABFECGF">Example 2-5</a>, see the <code>BasicCubeViewQuery.java</code> example program.</p>
<pre>Year  Sales
----  ------------
1998  100870876.58
1999  134109248.15
2000  124173521.55
2001  116931722.03
2002   92515295.02
2003  130276513.86
2004  144290685.55
2005  136986571.96
2006  140138317.39
2007  NA
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4769">
<tr>
<td class="cellalignment4776">
<table class="cellalignment4774">
<tr>
<td class="cellalignment4773"><a href="intro.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4773"><a href="discover.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4778">
<table class="cellalignment4772">
<tr>
<td class="cellalignment4773"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4773"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4773"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4773"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4773"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4773"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>