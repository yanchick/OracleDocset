<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79242"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Understanding%20Cursor%20Classes%20and%20Concepts"></a><title>Understanding Cursor Classes and Concepts</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-06-27T7:32:42Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP Java API Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17707-05"/>
<meta name="dcterms.isVersionOf" content="OLAAP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="transact.htm" title="Previous" type="text/html"/>
<link rel="Next" href="cursors.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17707-05.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">14/19</span> <!-- End Header -->
<div class="chapter"><a id="g1014888"></a>
<h1 class="chapter"><span class="secnum">8</span> Understanding Cursor Classes and Concepts</h1>
<p>This chapter describes the Oracle OLAP Java API <code>Cursor</code> class and the related classes that you use to retrieve the results of a query. This chapter also describes the <code>Cursor</code> concepts of position, fetch size, and extent. For examples of creating and using a <code>Cursor</code> and its related objects, see <a href="cursors.htm#g1018004">Chapter 9, &#34;Retrieving Query Results&#34;</a>.</p>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#i1007525">Overview of the OLAP Java API Cursor Objects</a></p>
</li>
<li>
<p><a href="#i1008791">Cursor Classes</a></p>
</li>
<li>
<p><a href="#CIHDAHDI">CursorInfoSpecification Classes</a></p>
</li>
<li>
<p><a href="#CIHCDCGI">CursorManager Class</a></p>
</li>
<li>
<p><a href="#i1007527">About Cursor Positions and Extent</a></p>
</li>
<li>
<p><a href="#i1007529">About Fetch Sizes</a></p>
</li>
</ul>
<a id="i1007525"></a>
<div class="sect1">
<h2 class="sect1">Overview of the OLAP Java API Cursor Objects</h2>
<p><a id="sthref784"></a>A <code>Cursor</code> retrieves the result set specified by a <code>Source</code>. You create a <code>Cursor</code> by calling the <code>createCursor</code> method of a <code>CursorManager</code>. You create a <code>CursorManager</code> by calling the <code>createCursorManager</code> method of a <code>DataProvider</code>.</p>
<p><a id="sthref785"></a><a id="sthref786"></a>You can get the SQL generated for a <code>Source</code> by the Oracle OLAP SQL generator without having to create a <code>Cursor</code>. To get the SQL for the <code>Source</code>, you create an <code>SQLCursorManager</code> by using a <code>createSQLCursorManager</code> method of a <code>DataProvider</code>. You can then use classes outside of the OLAP Java API, or other methods, to retrieve data using the generated SQL.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref787"></a>
<h3 class="sect2">Creating a Cursor</h3>
<p><a id="sthref788"></a><a id="sthref789"></a><a id="sthref790"></a><a id="sthref791"></a>You create a <code>Cursor</code> for a <code>Source</code> by doing the following:</p>
<ol>
<li>
<p>Creating a <code>CursorManager</code> by calling one of the <code>createCursorManager</code> methods of the <code>DataProvider</code> and passing it the <code>Source</code>. If you want to alter the behavior of the <code>Cursor</code>, then you can create a <code>CursorInfoSpecification</code> and use the methods of it to specify the behavior. You then create a <code>CursorManager</code> with a method that takes the <code>Source</code> and the <code>CursorInfoSpecification</code>.</p>
</li>
<li>
<p>Creating a <code>Cursor</code> by calling the <code>createCursor</code> method of the <code>CursorManager</code>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref792"></a>
<h3 class="sect2">Sources For Which You Cannot Create a Cursor</h3>
<p><a id="sthref793"></a><a id="sthref794"></a>Some <code>Source</code> objects do not specify data that a <code>Cursor</code> can retrieve from the data store. The following are <code>Source</code> objects for which you cannot create a <code>Cursor</code> that contains values.</p>
<ul>
<li>
<p>A <code>Source</code> that specifies an operation that is not computationally possible. An example is a <code>Source</code> that specifies an infinite recursion.</p>
</li>
<li>
<p>A <code>Source</code> that defines an infinite result set. An example is the fundamental <code>Source</code> that represents the set of all <code>String</code> objects.</p>
</li>
<li>
<p>A <code>Source</code> that has no elements or includes another <code>Source</code> that has no elements. Examples are a <code>Source</code> returned by the <code>getEmptySource</code> method of <code>DataProvider</code> and another <code>Source</code> derived from the empty <code>Source</code>. Another example is a derived <code>Source</code> that results from selecting a value from a primary <code>Source</code> that you got from an <code>MdmDimension</code> and the selected value does not exist in the dimension.</p>
</li>
</ul>
<p>If you create a <code>Cursor</code> for such a <code>Source</code> and try to get the values of the <code>Cursor</code>, then an <code>Exception</code> occurs.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref795"></a>
<h3 class="sect2">Cursor Objects and Transaction Objects</h3>
<p><a id="sthref796"></a><a id="sthref797"></a><a id="sthref798"></a>When you create a derived <code>Source</code> or change the state of a <code>Template</code>, you create the <code>Source</code> in the context of the current <code>Transaction</code>. The <code>Source</code> is active in the <code>Transaction</code> in which you create it or in a child <code>Transaction</code> of that <code>Transaction</code>. A <code>Source</code> must be active in the current <code>Transaction</code> for you to be able to create a <code>Cursor</code> for it.</p>
<p>Creating a derived <code>Source</code> occurs in a write <code>Transaction</code>. Creating a <code>Cursor</code> occurs in a read <code>Transaction</code>. After creating a derived <code>Source</code>, and before you can create a <code>Cursor</code> for that <code>Source</code>, you must change the write <code>Transaction</code> into a read <code>Transaction</code> by calling the <code>commitCurrentTransaction</code> methods of the <code>TransactionProvider</code> your application is using. For information on <code>Transaction</code> and <code>TransactionProvider</code> objects, see <a href="transact.htm#g1010472">Chapter 7, &#34;Using a TransactionProvider&#34;</a>.</p>
<p>For a <code>Cursor</code> that you create for a query that includes a parameterized <code>Source</code>, you can change the value of the <code>Parameter</code> object and then get the new values of the <code>Cursor</code> without having to commit the <code>Transaction</code> again. For information on parameterized <code>Source</code> objects, see <a href="query.htm#g1030586">Chapter 5, &#34;Understanding Source Objects&#34;</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008791"></a>
<div class="sect1">
<h2 class="sect1">Cursor Classes</h2>
<p>In the <code>oracle.olapi.data.cursor</code> package, the Oracle OLAP Java API defines the interfaces described in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment4783" title="Cursor Interface and Its Subinterfaces" summary="This table lists the Cursor class hierarchy and provides brief descriptions of the interfaces." dir="ltr">
<thead>
<tr class="cellalignment4770">
<th class="cellalignment4782" id="r1c1-t2">Interface</th>
<th class="cellalignment4782" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r2c1-t2" headers="r1c1-t2"><code>Cursor</code></td>
<td class="cellalignment4776" headers="r2c1-t2 r1c2-t2">An abstract superclass that encapsulates the notion of a current position.</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r3c1-t2" headers="r1c1-t2"><code>ValueCursor</code></td>
<td class="cellalignment4776" headers="r3c1-t2 r1c2-t2">A <code>Cursor</code> that has a value at the current position. A <code>ValueCursor</code> has no child <code>Cursor</code> objects.</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r4c1-t2" headers="r1c1-t2"><code>CompoundCursor</code></td>
<td class="cellalignment4776" headers="r4c1-t2 r1c2-t2">A <code>Cursor</code> that has child <code>Cursor</code> objects, which are a child <code>ValueCursor</code> for the values of the <code>Source</code> associated with it and an output child <code>Cursor</code> for each output of the <code>Source</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<a id="i1007660"></a>
<div class="sect2">
<h3 class="sect2">Structure of a Cursor</h3>
<p><a id="sthref799"></a><a id="sthref800"></a><a id="sthref801"></a>The structure of a <code>Cursor</code> mirrors the structure of the <code>Source</code> associated with it. If the <code>Source</code> does not have any outputs, then the <code>Cursor</code> for that <code>Source</code> is a <code>ValueCursor</code>. If the <code>Source</code> has one or more outputs, then the <code>Cursor</code> for that <code>Source</code> is a <code>CompoundCursor</code>. A <code>CompoundCursor</code> has as children a base <code>ValueCursor</code>, which has the values of the base of the <code>Source</code> of the <code>CompoundCursor</code>, and one or more output <code>Cursor</code> objects.</p>
<p>The output of a <code>Source</code> is another <code>Source</code>. An output <code>Source</code> can itself have outputs. The child <code>Cursor</code> for an output of a <code>Source</code> is a <code>ValueCursor</code> if the output <code>Source</code> does not have any outputs and a <code>CompoundCursor</code> if it does.</p>
<p><a href="#CIHHEGAG">Example 8-1</a> creates a query that specifies the prices of selected product items for selected months. In the example, <code>timeHier</code> is a <code>Source</code> for a hierarchy of a dimension of time values, and <code>prodHier</code> is a <code>Source</code> for a hierarchy of a dimension of product values.</p>
<p>If you create a <code>Cursor</code> for <code>prodSel</code> or for <code>timeSel</code>, then either <code>Cursor</code> is a <code>ValueCursor</code> because both <code>prodSel</code> and <code>timeSel</code> have no outputs.</p>
<p>The <code>unitPrice</code> object is a <code>Source</code> for an <code>MdmBaseMeasure</code> that represents values for the price of product units. The <code>MdmBaseMeasure</code> has as inputs the <code>MdmPrimaryDimension</code> objects representing products and times, and the <code>unitPrice</code> <code>Source</code> has as inputs the <code>Source</code> objects for those dimensions.</p>
<p>The example selects elements of the dimension hierarchies and then joins the <code>Source</code> objects for the selections to that of the measure to produce <code>querySource</code>, which has <code>prodSel</code> and <code>timeSel</code> as outputs.</p>
<div class="example">
<p class="titleinexample"><a id="CIHHEGAG"></a>Example 8-1 Creating the querySource Query</p>
<pre>Source timeSel = timeHier.selectValues(new String[] 
                                          {&#34;CALENDAR_YEAR::MONTH::2001.01&#34;,
                                           &#34;CALENDAR_YEAR::MONTH::2001.04&#34;,
                                           &#34;CALENDAR_YEAR::MONTH::2001.07&#34;,
                                           &#34;CALENDAR_YEAR::MONTH::2001.10&#34;});
 
Source prodSel = prodHier.selectValues(new String[]
                                          {&#34;PRODUCT_PRIMARY::ITEM::ENVY ABM&#34;,
                                           &#34;PRODUCT_PRIMARY::ITEM::ENVY EXE&#34;,
                                           &#34;PRODUCT_PRIMARY::ITEM::ENVY STD&#34;});
 
Source querySource = unitPrice.join(timeSel).join(prodSel);
</pre></div>
<!-- class="example" -->
<p><a id="sthref802"></a><a id="sthref803"></a><a id="sthref804"></a>The result set defined by <code>querySource</code> is the unit price values for the selected products for the selected months. The results are organized by the outputs. Since <code>timeSel</code> is joined to the <code>Source</code> produced by the <code>unitPrice.join(prodSel)</code> operation, <code>timeSel</code> is the slower varying output, which means that the result set specifies the set of selected products for each selected time value. For each time value the result set has three product values so the product values vary faster than the time values. The values of the base <code>ValueCursor</code> of <code>querySource</code> are the fastest varying of all, because there is one price value for each product for each day.</p>
<p><a href="cursors.htm#i1006606">Example 9-1</a> in <a href="cursors.htm#g1018004">Chapter 9</a>, creates a <code>Cursor</code>, <code>queryCursor</code>, for <code>querySource</code>. Since <code>querySource</code> has outputs, <code>queryCursor</code> is a <code>CompoundCursor</code>. The base <code>ValueCursor</code> of <code>queryCursor</code> has values from <code>unitPrice</code>, which is the base <code>Source</code> of the operation that created <code>querySource</code>. The values from <code>unitPrice</code> are those specified by the outputs. The outputs for <code>queryCursor</code> are a <code>ValueCursor</code> that has values from <code>prodSel</code> and a <code>ValueCursor</code> that has values from <code>timeSel</code>.</p>
<p><a href="#i1006814">Figure 8-1</a> illustrates the structure of <code>queryCursor</code>. The base <code>ValueCursor</code> and the two output <code>ValueCursor</code> objects are the children of <code>queryCursor</code>, which is the parent <code>CompoundCursor</code>.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1006814"></a>Figure 8-1 Structure of the queryCursor CompoundCursor</p>
<img width="405" height="138" src="img/qrycrstr.gif" alt="Description of Figure 8-1 follows"/><br/>
<a id="sthref805" href="img_text/qrycrstr.htm">Description of &#34;Figure 8-1 Structure of the queryCursor CompoundCursor&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The following table displays the values from <code>queryCursor</code> in a table. The left column has time values, the middle column has product values, and the right column has the unit price of the product for the month.</p>
<div class="inftblruleinformal">
<table class="cellalignment4783" title="Values of queryCursor" summary="This table lists the values of the base and output ValueCursor components of the queryCursor CompoundCursor." dir="ltr">
<thead>
<tr class="cellalignment4770">
<th class="cellalignment4784" id="r1c1-t3"><span class="bold">Month</span></th>
<th class="cellalignment4784" id="r1c2-t3">Product</th>
<th class="cellalignment4784" id="r1c3-t3">Price of Unit</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r2c1-t3" headers="r1c1-t3">2001.01</td>
<td class="cellalignment4776" headers="r2c1-t3 r1c2-t3">ENVY ABM</td>
<td class="cellalignment4776" headers="r2c1-t3 r1c3-t3">3042.22</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r3c1-t3" headers="r1c1-t3">2001.01</td>
<td class="cellalignment4776" headers="r3c1-t3 r1c2-t3">ENVY EXE</td>
<td class="cellalignment4776" headers="r3c1-t3 r1c3-t3">3223.28</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r4c1-t3" headers="r1c1-t3">2001.01</td>
<td class="cellalignment4776" headers="r4c1-t3 r1c2-t3">ENVY STD</td>
<td class="cellalignment4776" headers="r4c1-t3 r1c3-t3">3042.22</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r5c1-t3" headers="r1c1-t3">2001.04</td>
<td class="cellalignment4776" headers="r5c1-t3 r1c2-t3">ENVY ABM</td>
<td class="cellalignment4776" headers="r5c1-t3 r1c3-t3">2412.42</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r6c1-t3" headers="r1c1-t3">2001.04</td>
<td class="cellalignment4776" headers="r6c1-t3 r1c2-t3">ENVY EXE</td>
<td class="cellalignment4776" headers="r6c1-t3 r1c3-t3">3107.65</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r7c1-t3" headers="r1c1-t3">2001.04</td>
<td class="cellalignment4776" headers="r7c1-t3 r1c2-t3">ENVY STD</td>
<td class="cellalignment4776" headers="r7c1-t3 r1c3-t3">3026.12</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r8c1-t3" headers="r1c1-t3">2001.07</td>
<td class="cellalignment4776" headers="r8c1-t3 r1c2-t3">ENVY ABM</td>
<td class="cellalignment4776" headers="r8c1-t3 r1c3-t3">2505.57</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r9c1-t3" headers="r1c1-t3">2001.07</td>
<td class="cellalignment4776" headers="r9c1-t3 r1c2-t3">ENVY EXE</td>
<td class="cellalignment4776" headers="r9c1-t3 r1c3-t3">3155.91</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r10c1-t3" headers="r1c1-t3">2001.07</td>
<td class="cellalignment4776" headers="r10c1-t3 r1c2-t3">ENVY STD</td>
<td class="cellalignment4776" headers="r10c1-t3 r1c3-t3">2892.18</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r11c1-t3" headers="r1c1-t3">2001.10</td>
<td class="cellalignment4776" headers="r11c1-t3 r1c2-t3">ENVY ABM</td>
<td class="cellalignment4776" headers="r11c1-t3 r1c3-t3">2337.30</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r12c1-t3" headers="r1c1-t3">2001.10</td>
<td class="cellalignment4776" headers="r12c1-t3 r1c2-t3">ENVY EXE</td>
<td class="cellalignment4776" headers="r12c1-t3 r1c3-t3">3105.53</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r13c1-t3" headers="r1c1-t3">2001.10</td>
<td class="cellalignment4776" headers="r13c1-t3 r1c2-t3">ENVY STD</td>
<td class="cellalignment4776" headers="r13c1-t3 r1c3-t3">2856.86</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblruleinformal" -->
<p>For examples of getting the values from a <code>ValueCursor</code>, see <a href="cursors.htm#g1018004">Chapter 9</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref806"></a>
<h3 class="sect2">Specifying the Behavior of a Cursor</h3>
<p><a id="sthref807"></a><code>CursorSpecification</code> objects specify some aspects of the behavior of their corresponding <code>Cursor</code> objects. You must specify the behavior on a <code>CursorSpecification</code> before creating the corresponding <code>Cursor</code>. To specify the behavior, use the following <code>CursorSpecification</code> methods:</p>
<ul>
<li>
<p><code>setDefaultFetchSize</code></p>
</li>
<li>
<p><code>setExtentCalculationSpecified</code></p>
</li>
<li>
<p><code>setParentEndCalculationSpecified</code></p>
</li>
<li>
<p><code>setParentStartCalculationSpecified</code></p>
</li>
<li>
<p><code>specifyDefaultFetchSizeOnChildren</code><br/>
(for a <code>CompoundCursorSpecification</code> only)</p>
</li>
</ul>
<p>A <code>CursorSpecification</code> also has methods that you can use to discover if the behavior is specified. Those methods are the following:</p>
<ul>
<li>
<p><code>isExtentCalculationSpecified</code></p>
</li>
<li>
<p><code>isParentEndCalculationSpecified</code></p>
</li>
<li>
<p><code>isParentStartCalculationSpecified</code></p>
</li>
</ul>
<p>If you have used the <code>CursorSpecification</code> methods to set the default fetch size, or to calculate the extent or the starting or ending positions of a value in the parent of the value, then you can successfully use the following <code>Cursor</code> methods:</p>
<ul>
<li>
<p><code>getExtent</code></p>
</li>
<li>
<p><code>getFetchSize</code></p>
</li>
<li>
<p><code>getParentEnd</code></p>
</li>
<li>
<p><code>getParentStart</code></p>
</li>
<li>
<p><code>setFetchSize</code></p>
</li>
</ul>
<p>For examples of specifying <code>Cursor</code> behavior, see <a href="cursors.htm#g1018004">Chapter 9</a>. For information on fetch sizes, see <a href="#i1007529">&#34;About Fetch Sizes&#34;</a>. For information on the extent of a <code>Cursor</code>, see <a href="#i1006922">&#34;What is the Extent of a Cursor?&#34;</a>. For information on the starting and ending positions in a parent <code>Cursor</code> of the current value of a <code>Cursor</code>, see <a href="#i1007613">&#34;About the Parent Starting and Ending Positions in a Cursor&#34;</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHDAHDI"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">CursorInfoSpecification Classes</h2>
<p><a id="sthref808"></a><a id="sthref809"></a>The <code>CursorInfoSpecification</code> interface and the subinterfaces <code>CompoundCursorInfoSpecification</code> and <code>ValueCursorInfoSpecification</code>, specify methods for the abstract <code>CursorSpecification</code> class and the concrete <code>CompoundCursorSpecification</code> and <code>ValueCursorSpecification</code> classes. A <code>CursorSpecification</code> specifies certain aspects of the behavior of the <code>Cursor</code> that corresponds to it. You can create instances of classes that implement the <code>CursorInfoSpecification</code> interface either directly or indirectly.</p>
<p>You can create a <code>CursorSpecification</code> for a <code>Source</code> by calling the <code>createCursorInfoSpecification</code> method of a <code>DataProvider</code>. That method returns a <code>CompoundCursorSpecification</code> or a <code>ValueCursorSpecification</code>. You can use the methods of the <code>CursorSpecification</code> to specify aspects of the behavior of a <code>Cursor</code>. You can then use the <code>CursorSpecification</code> in creating a <code>CursorManager</code> by passing it as the <code>cursorInfoSpec</code> argument to the <code>createCursorManager</code> method of a <code>DataProvider</code>.</p>
<p>With <code>CursorSpecification</code> methods, you can do the following:</p>
<ul>
<li>
<p>Get the <code>Source</code> that corresponds to the <code>CursorSpecification</code>.</p>
</li>
<li>
<p>Get or set the default fetch size for the corresponding <code>Cursor</code>.</p>
</li>
<li>
<p>Specify that Oracle OLAP should calculate the extent of a <code>Cursor</code>.</p>
</li>
<li>
<p>Determine whether calculating the extent is specified.</p>
</li>
<li>
<p>Specify that Oracle OLAP should calculate the starting or ending position of the current value of the corresponding <code>Cursor</code> in the parent <code>Cursor</code>. If you know the starting and ending positions of a value in the parent, then you can determine how many faster varying elements the parent <code>Cursor</code> has for that value.</p>
</li>
<li>
<p>Determine whether calculating the starting or ending position of the current value of the corresponding <code>Cursor</code> in the parent is specified.</p>
</li>
<li>
<p>Accept a <code>CursorSpecificationVisitor</code>.</p>
</li>
</ul>
<p>For more information, see <a href="#i1007527">&#34;About Cursor Positions and Extent&#34;</a> and <a href="#i1007529">&#34;About Fetch Sizes&#34;</a>.</p>
<p>In the <code>oracle.olapi.data.source</code> package, the Oracle OLAP Java API defines the classes described in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment4783" title="CursorSpecification Interface and Its Subinterfaces" summary="This table lists the CursorSpecification class hierarchy and gives brief descriptions of the interfaces." dir="ltr">
<thead>
<tr class="cellalignment4770">
<th class="cellalignment4782" id="r1c1-t4">Interface</th>
<th class="cellalignment4782" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r2c1-t4" headers="r1c1-t4"><code>CursorInfoSpecification</code></td>
<td class="cellalignment4776" headers="r2c1-t4 r1c2-t4">An interface that specifies methods for <code>CursorSpecification</code> objects.</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r3c1-t4" headers="r1c1-t4"><code>CursorSpecification</code></td>
<td class="cellalignment4776" headers="r3c1-t4 r1c2-t4">An abstract class that implements some methods of the <code>CursorInfoSpecification</code> interface.</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r4c1-t4" headers="r1c1-t4"><code>CompoundCursorSpecification</code></td>
<td class="cellalignment4776" headers="r4c1-t4 r1c2-t4">A <code>CursorSpecification</code> for a <code>Source</code> that has one or more outputs. A <code>CompoundCursorSpecification</code> has component child <code>CursorSpecification</code> objects.</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r5c1-t4" headers="r1c1-t4"><code>CompoundInfoCursorSpecification</code></td>
<td class="cellalignment4776" headers="r5c1-t4 r1c2-t4">An interface that specifies methods for <code>CompoundCursorSpecification</code> objects.</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r6c1-t4" headers="r1c1-t4"><code>ValueCursorSpecification</code></td>
<td class="cellalignment4776" headers="r6c1-t4 r1c2-t4">A <code>CursorSpecification</code> for a <code>Source</code> that has values and no outputs.</td>
</tr>
<tr class="cellalignment4770">
<td class="cellalignment4776" id="r7c1-t4" headers="r1c1-t4"><code>ValueCursorInfoSpecification</code></td>
<td class="cellalignment4776" headers="r7c1-t4 r1c2-t4">An interface for <code>ValueCursorSpecification</code> objects.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>A <code>Cursor</code> has the same structure as the <code>CursorSpecification</code>. Every <code>ValueCursorSpecification</code> or <code>CompoundCursorSpecification</code> has a corresponding <code>ValueCursor</code> or <code>CompoundCursor</code>. To be able to get certain information or behavior from a <code>Cursor</code>, your application must specify that it wants that information or behavior by calling methods of the corresponding <code>CursorSpecification</code> before it creates the <code>Cursor</code>.</p>
</div>
<!-- class="sect1" -->
<a id="CIHCDCGI"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">CursorManager Class</h2>
<p><a id="sthref810"></a><a id="sthref811"></a><a id="sthref812"></a>With a <code>CursorManager</code>, you can create a <code>Cursor</code> for a <code>Source</code>. The class returned by one of the <code>createCursorManager</code> methods of a <code>DataProvider</code> manages the buffering of data for the <code>Cursor</code> objects it creates.</p>
<p>You can create more than one <code>Cursor</code> from the same <code>CursorManager</code>, which is useful for displaying data from a result set in different formats such as a table or a graph. All of the <code>Cursor</code> objects created by a <code>CursorManager</code> have the same specifications, such as the default fetch sizes. Because the <code>Cursor</code> objects have the same specifications, they can share the data managed by the <code>CursorManager</code>.</p>
<p><a id="sthref813"></a><a id="sthref814"></a>A <code>SQLCursorManager</code> has methods that return the SQL generated by the Oracle OLAP SQL generator for a <code>Source</code>. You create one or more <code>SQLCursorManager</code> objects by calling the <code>createSQLCursorManager</code> or <code>createSQLCursorManagers</code> methods of a <code>DataProvider</code>. You do not use a <code>SQLCursorManager</code> to create a <code>Cursor</code>. Instead, you use the SQL returned by the <code>SQLCursorManager</code> with classes outside of the OLAP Java API, or by other means, to retrieve the data specified by the query.</p>
<div class="sect2"><a id="sthref815"></a>
<h3 class="sect2">Updating the CursorInfoSpecification for a CursorManager</h3>
<p><a id="sthref816"></a>If your application is using OLAP Java API <code>Template</code> objects and the state of a <code>Template</code> changes in a way that alters the structure of the <code>Source</code> produced by the <code>Template</code>, then any <code>CursorInfoSpecification</code> objects for the <code>Source</code> are no longer valid. You need to create new <code>CursorInfoSpecification</code> objects for the changed <code>Source</code>.</p>
<p>After creating a new <code>CursorInfoSpecification</code>, you can create a new <code>CursorManager</code> for the <code>Source</code>. You do not, however, need to create a new <code>CursorManager</code>. You can call the <code>updateSpecification</code> method of the existing <code>CursorManager</code> to replace the previous <code>CursorInfoSpecification</code> with the new <code>CursorInfoSpecification</code>. You can then create a new <code>Cursor</code> from the <code>CursorManager</code>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007527"></a>
<div class="sect1">
<h2 class="sect1">About Cursor Positions and Extent</h2>
<p><a id="sthref817"></a><a id="sthref818"></a><a id="sthref819"></a><a id="sthref820"></a>A <code>Cursor</code> has one or more positions. The current position of a <code>Cursor</code> is the position that is currently active in the <code>Cursor</code>. To move the current position of a <code>Cursor</code> call the <code>setPosition</code> or <code>next</code> methods of the <code>Cursor</code>.</p>
<p>Oracle OLAP does not validate the position that you set on the <code>Cursor</code> until you attempt an operation on the <code>Cursor</code>, such as calling the <code>getCurrentValue</code> method. If you set the current position to a negative value or to a value that is greater than the number of positions in the <code>Cursor</code> and then attempt a <code>Cursor</code> operation, then the <code>Cursor</code> throws a <code>PositionOutOfBoundsException</code>.</p>
<p>The extent of a <code>Cursor</code> is described in <a href="#i1006922">&#34;What is the Extent of a Cursor?&#34;</a>.</p>
<div class="sect2"><a id="sthref821"></a>
<h3 class="sect2">Positions of a ValueCursor</h3>
<p><a id="sthref822"></a><a id="sthref823"></a><a id="sthref824"></a>The current position of a <code>ValueCursor</code> specifies a value, which you can retrieve. For example, <code>prodSel</code>, a derived <code>Source</code> described in <a href="#i1007660">&#34;Structure of a Cursor&#34;</a>, is a selection of three products from a primary <code>Source</code> that specifies a dimension of products and their hierarchical groupings. The <code>ValueCursor</code> for <code>prodSel</code> has three elements. The following example gets the position of each element of the <code>ValueCursor</code>, and displays the value at that position.</p>
<pre>// prodSelValCursor is the ValueCursor for prodSel
println(&#34;ValueCursor Position  Value &#34;);
println(&#34;--------------------  ------------------------&#34;);
do 
{
  println(&#34;          &#34; + prodSelValCursor.getPosition() + 
          &#34;           &#34; + prodSelValCursor.getCurrentValue());
} while(prodSelValCursor.next());
</pre>
<p>The preceding example displays the following:</p>
<pre>ValueCursor Position               Value 
--------------------  -------------------------------
          1           PRODUCT_PRIMARY::ITEM::ENVY ABM
          2           PRODUCT_PRIMARY::ITEM::ENVY EXE
          3           PRODUCT_PRIMARY::ITEM::ENVY STD
</pre>
<p>The following example sets the current position of <code>prodSelValCursor</code> to 2 and retrieves the value at that position.</p>
<pre>prodSelValCursor.setPosition(2);
println(prodSelValCursor.getCurrentString());
</pre>
<p>The preceding example displays the following:</p>
<pre>PRODUCT_PRIMARY::ITEM::ENVY EXE
</pre>
<p>For more examples of getting the current value of a <code>ValueCursor</code>, see <a href="cursors.htm#g1018004">Chapter 9</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref825"></a>
<h3 class="sect2">Positions of a CompoundCursor</h3>
<p><a id="sthref826"></a><a id="sthref827"></a>A <code>CompoundCursor</code> has one position for each set of the elements of the descendent <code>ValueCursor</code> objects. The current position of the <code>CompoundCursor</code> specifies one of those sets.</p>
<p>For example, <code>querySource</code>, the <code>Source</code> created in <a href="#CIHHEGAG">Example 8-1</a>, has values from a measure, <code>unitPrice</code>. The values are the prices of product units at different times. The outputs of <code>querySource</code> are <code>Source</code> objects that represent selections of four month values from a time dimension and three product values from a product dimension.</p>
<p><a id="sthref828"></a>The result set for <code>querySource</code> has one measure value for each tuple (each set of output values), so the total number of values is twelve (one value for each of the three products for each of the four months). Therefore, the <code>queryCursor</code> <code>CompoundCursor</code> created for <code>querySource</code> has twelve positions.</p>
<p><a id="sthref829"></a>Each position of <code>queryCursor</code> specifies one set of positions of the outputs and the base <code>ValueCursor</code>. For example, position 1 of <code>queryCursor</code> defines the following set of positions for the outputs and the base <code>ValueCursor</code>:</p>
<ul>
<li>
<p>Position 1 of output 1 (the <code>ValueCursor</code> for <code>timeSel</code>)</p>
</li>
<li>
<p>Position 1 of output 2 (the <code>ValueCursor</code> for <code>prodSel</code>)</p>
</li>
<li>
<p>Position 1 of the base <code>ValueCursor</code> for <code>queryCursor</code> (This position has the value from the <code>unitPrice</code> measure that is specified by the values of the outputs.)</p>
</li>
</ul>
<p><a href="#i1006958">Figure 8-2</a> illustrates the positions of <code>queryCursor</code> <code>CompoundCursor</code>, the base <code>ValueCursor</code>, and the outputs.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1006958"></a>Figure 8-2 Cursor Positions in queryCursor</p>
<img width="418" height="421" src="img/qrycrspo.gif" alt="Description of Figure 8-2 follows"/><br/>
<a id="sthref830" href="img_text/qrycrspo.htm">Description of &#34;Figure 8-2 Cursor Positions in queryCursor&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The <code>ValueCursor</code> for <code>queryCursor</code> has only one position because only one value of <code>unitPrice</code> is specified by any one set of values of the outputs. For a query such as <code>querySource</code>, the <code>ValueCursor</code> of the <code>Cursor</code> has only one value, and therefore only one position, at a time for any one position of the root <code>CompoundCursor</code>.</p>
<p><a href="#CIHGEHGB">Figure 8-3</a> illustrates one possible display of the data from <code>queryCursor</code>. It is a crosstab view with four columns and five rows. In the left column are the month values. In the top row are the product values. In each of the intersecting cells of the crosstab is the price of the product for the month.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIHGEHGB"></a>Figure 8-3 Crosstab Display of queryCursor</p>
<img width="300" height="145" src="img/xtabvudp.gif" alt="Description of Figure 8-3 follows"/><br/>
<a id="sthref831" href="img_text/xtabvudp.htm">Description of &#34;Figure 8-3 Crosstab Display of queryCursor&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>A <code>CompoundCursor</code> coordinates the positions of the <code>ValueCursor</code> objects relative to each other. The current position of the <code>CompoundCursor</code> specifies the current positions of the descendent <code>ValueCursor</code> objects. <a href="#i1007689">Example 8-2</a> sets the position of <code>queryCursor</code> and then gets the current values and the positions of the child <code>Cursor</code> objects.</p>
<div class="example">
<p class="titleinexample"><a id="i1007689"></a>Example 8-2 Setting the CompoundCursor Position and Getting the Current Values</p>
<pre>CompoundCursor rootCursor = (CompoundCursor) queryCursor;
ValueCursor baseValueCursor = rootCursor.getValueCursor();
List outputs = rootCursor.getOutputs();
ValueCursor output1 = (ValueCursor) outputs.get(0);
ValueCursor output2 = (ValueCursor) outputs.get(1);
int pos = 5;
rootCursor.setPosition(pos);
println(&#34;CompoundCursor position set to &#34; + pos + &#34;.&#34;);
println(&#34;The current position of the CompoundCursor is = &#34; +
        rootCursor.getPosition() + &#34;.&#34;);
println(&#34;Output 1 position = &#34; + output1.getPosition() +
        &#34;, value = &#34; + output1.getCurrentValue());
println(&#34;Output 2 position = &#34; + output2.getPosition() +
        &#34;, value = &#34; + output2.getCurrentValue());
println(&#34;VC position = &#34; + baseValueCursor.getPosition() +
        &#34;, value = &#34; + baseValueCursor.getCurrentValue());
</pre>
<p><a href="#i1007689">Example 8-2</a> displays the following:</p>
<pre>CompoundCursor position set to 5.
The current position of the CompoundCursor is 5.
Output 1 position = 2, value = CALENDAR_YEAR::MONTH::2001.04
Output 2 position = 2, value = PRODUCT_PRIMARY::ITEM::ENVY EXE
VC position = 1, value = 3107.65
</pre>
<p><a id="sthref832"></a>The positions of <code>queryCursor</code> are symmetric in that the result set for <code>querySource</code> always has three product values for each time value. The <code>ValueCursor</code> for <code>prodSel</code>, therefore, always has three positions for each value of the <code>timeSel</code> <code>ValueCursor</code>. The <code>timeSel</code> output <code>ValueCursor</code> is slower varying than the <code>prodSel</code> <code>ValueCursor</code>.</p>
<p>In an asymmetric case, however, the number of positions in a <code>ValueCursor</code> is not always the same relative to the slower varying output. For example, if the price of units for product ENVY ABM for month 2001.10 were null because that product was no longer being sold by that date, and if null values were suppressed in the query, then <code>queryCursor</code> would only have eleven positions. The <code>ValueCursor</code> for <code>prodSel</code> would only have two positions when the position of the <code>ValueCursor</code> for <code>timeSel</code> was 4.</p>
<p><a id="sthref833"></a><a href="#i1007713">Example 8-3</a> demonstrates an asymmetric result set that is produced by selecting elements of one dimension based on a comparison of measure values. The example uses the same product and time selections as in <a href="#CIHHEGAG">Example 8-1</a>. It uses a <code>Source</code> for a measure of product units sold, <code>units</code>, that is dimensioned by product, time, sales channels, and customer dimensions. The <code>chanSel</code> and <code>custSel</code> objects are selections of single values of the dimensions. The example produces a <code>Source</code>, <code>querySource2</code>, that specifies which of the selected products sold more than one unit for the selected time, channel, and customer values. Because <code>querySource2</code> is a derived <code>Source</code>, this example commits the current <code>Transaction</code>.</p>
<p>The example creates a <code>Cursor</code> for <code>querySource2</code>, loops through the positions of the <code>CompoundCursor</code>, gets the position and current value of the first output <code>ValueCursor</code> and the <code>ValueCursor</code> of the <code>CompoundCursor</code>, and displays the positions and values of the <code>ValueCursor</code> objects. The <code>getLocalValue</code> method is a method in the program that extracts the local value from a unique value.</p>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="i1007713"></a>Example 8-3 Positions in an Asymmetric Query</p>
<pre>// Create the query
prodSel.join(chanSel).join(custSel).join(timeSel).select(units.gt(1));
 
// Commit the current Transaction.
try
{  // The DataProvider is dp.
  (dp.getTransactionProvider()).commitCurrentTransaction();
}
catch(Exception e)
{
  output.println(&#34;Cannot commit current Transaction &#34; + e);
}

// Create the CursorManager and the Cursor.
<a id="sthref834"></a>CursorManager cursorManager = dp.createCursorManager(querySource2);
<a id="sthref835"></a>Cursor queryCursor2 = cursorManager.createCursor();

CompoundCursor rootCursor = (CompoundCursor) queryCursor2;
ValueCursor baseValueCursor = rootCursor.getValueCursor();
List outputs = rootCursor.getOutputs();
ValueCursor output1 = (ValueCursor) outputs.get(0);

// Get the positions and values and display them.
println(&#34;CompoundCursor  Output ValueCursor        ValueCursor&#34;);
println(&#34;  position      position  |  value    position  |  value&#34;);
do
{
  println(sp6 + rootCursor.getPosition() +  // sp6 is 6 spaces
          sp13 + output1.getPosition() +    // sp13 is 13 spaces
          sp7 + getLocalValue(output1.getCurrentString()) + //sp7 is 7 spaces
          sp7 + baseValueCursor.getPosition() +
          sp7 + getLocalValue(baseValueCursor.getCurrentString()));
}
while(queryCursor2.next());
</pre>
<p><a href="#i1007713">Example 8-3</a> displays the following:</p>
<pre>CompoundCursor  Output ValueCursor        ValueCursor
  position      position |   value    position |   value
      1             1       2001.01       1       ENVY ABM
      2             1       2001.01       2       ENVY EXE
      3             1       2001.01       3       ENVY STD
      4             2       2001.04       1       ENVY ABM
      5             3       2001.07       1       ENVY ABM
      6             3       2001.07       2       ENVY EXE
      7             4       2001.10       1       ENVY EXE
      8             4       2001.10       2       ENVY STD
</pre></div>
<!-- class="example" -->
<p>Because not every combination of product and time selections has unit sales greater than 1 for the specified channel and customer selections, the number of elements of the <code>ValueCursor</code> for the values derived from <code>prodSel</code> is not the same for each value of the output <code>ValueCursor</code>. For time value 2001.01, all three products have sales greater than one, but for time value 2001.04, only one of the products does. The other two time values, 2001.07 and 2001.10, have two products that meet the criteria. Therefore, the <code>ValueCursor</code> for the <code>CompoundCursor</code> has three positions for time 2001.01, only one position for time 2001.04, and two positions for times 2001.07 and 2001.10.</p>
</div>
<!-- class="sect2" -->
<a id="i1007613"></a>
<div class="sect2">
<h3 class="sect2">About the Parent Starting and Ending Positions in a Cursor</h3>
<p><a id="sthref836"></a><a id="sthref837"></a>To effectively manage the display of the data that you get from a <code>CompoundCursor</code>, you sometimes need to know how many faster varying values exist for the current slower varying value. For example, suppose that you are displaying in a crosstab one row of values from an edge of a cube, then you might want to know how many columns to draw in the display for the row.</p>
<p>To determine how many faster varying values exist for the current value of a child <code>Cursor</code>, you find the starting and ending positions of that current value in the parent <code>Cursor</code>. Subtract the starting position from the ending position and then add 1, as in the following.</p>
<pre>long span = (cursor.getParentEnd() - cursor.getParentStart()) + 1;
</pre>
<p><a id="sthref838"></a><a id="sthref839"></a>The result is the span of the current value of the child <code>Cursor</code> in the parent <code>Cursor</code>, which tells you how many values of the fastest varying child <code>Cursor</code> exist for the current value. Calculating the starting and ending positions is costly in time and computing resources, so you should only specify that you want those calculations performed when your application needs the information.</p>
<p>An Oracle OLAP Java API <code>Cursor</code> enables your application to have only the data that it is currently displaying actually present on the client computer. For information on specifying the amount of data for a <code>Cursor</code>, see <a href="#i1007529">&#34;About Fetch Sizes&#34;</a>.</p>
<p>From the data on the client computer, however, you cannot determine at what position of the parent <code>Cursor</code> the current value of a child <code>Cursor</code> begins or ends. To get that information, you use the <code>getParentStart</code> and <code>getParentEnd</code> methods of a <code>Cursor</code>.</p>
<p>To specify that you want Oracle OLAP to calculate the starting and ending positions of a value of a child <code>Cursor</code> in the parent <code>Cursor</code>, call the <code>setParentStartCalculationSpecified</code> and <code>setParentEndCalculationSpecified</code> methods of the <code>CursorSpecification</code> corresponding to the <code>Cursor</code>. You can determine whether calculating the starting or ending positions is specified by calling the <code>isParentStartCalculationSpecified</code> or <code>isParentEndCalculationSpecified</code> methods of the <code>CursorSpecification</code>. For an example of specifying these calculations, see <a href="cursors.htm#g1018004">Chapter 9</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i1006922"></a>
<div class="sect2">
<h3 class="sect2">What is the Extent of a Cursor?</h3>
<p><a id="sthref840"></a><a id="sthref841"></a><a id="sthref842"></a>The extent of a <code>Cursor</code> is the total number of elements it contains relative to any slower varying outputs.</p>
<p><a id="sthref843"></a>The extent is information that you can use, for example, to display the correct number of columns or correctly-sized scroll bars. The extent, however, can be expensive to calculate. For example, a <code>Source</code> that represents a cube might have four outputs. Each output might have hundreds of values. If all null values and zero values of the measure for the sets of outputs are eliminated from the result set, then to calculate the extent of the <code>CompoundCursor</code> for the <code>Source</code>, Oracle OLAP must traverse the entire result space before it creates the <code>CompoundCursor</code>. If you do not specify that you wants the extent calculated, then Oracle OLAP only needs to traverse the sets of elements defined by the outputs of the cube as specified by the fetch size of the <code>Cursor</code> and as needed by your application.</p>
<p>To specify that you want Oracle OLAP to calculate the extent for a <code>Cursor</code>, call the <code>setExtentCalculationSpecified</code> method of the <code>CursorSpecification</code> corresponding to the <code>Cursor</code>. You can determine whether calculating the extent is specified by calling the <code>isExtentCalculationSpecified</code> method of the <code>CursorSpecification</code>. For an example of specifying the calculation of the extent of a <code>Cursor</code>, see <a href="cursors.htm#g1018004">Chapter 9</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007529"></a>
<div class="sect1">
<h2 class="sect1">About Fetch Sizes</h2>
<p><a id="sthref844"></a><a id="sthref845"></a>An OLAP Java API <code>Cursor</code> represents the entire result set for a <code>Source</code>. The <code>Cursor</code> is a virtual <code>Cursor</code>, however, because it retrieves only a portion of the result set at a time from Oracle OLAP. A <code>CursorManager</code> manages a virtual <code>Cursor</code> and retrieves results from Oracle OLAP as your application needs them. By managing the virtual <code>Cursor</code>, the <code>CursorManager</code> relieves your application of a substantial burden.</p>
<p><a id="sthref846"></a><a id="sthref847"></a>The amount of data that a <code>Cursor</code> retrieves in a single fetch operation is determined by the fetch size specified for the <code>Cursor</code>. You specify a fetch size to limit the amount of data your application needs to cache on the local computer and to maximize the efficiency of the fetch by customizing it to meet the needs of your method of displaying the data.</p>
<p>You can also regulate the number of elements that Oracle OLAP returns by using <code>Parameter</code> and parameterized <code>Source</code> objects in constructing your query. For more information on <code>Parameter</code> objects, see <a href="query.htm#g1030586">Chapter 5, &#34;Understanding Source Objects&#34;</a>. For examples of using parameterized <code>Source</code> objects, see <a href="select.htm#g1017484">Chapter 6, &#34;Making Queries Using Source Methods&#34;</a>.</p>
<p>When you create a <code>CursorManager</code> for a <code>Source</code>, Oracle OLAP specifies a default fetch size on the root <code>CursorSpecification</code>. You can change the default fetch size with the <code>setDefaultFetchSize</code> method of the root <code>CursorSpecification</code>.</p>
<p>You can create two or more <code>Cursor</code> objects from the same <code>CursorManager</code> and use both <code>Cursor</code> objects simultaneously. Rather than having separate data caches, the <code>Cursor</code> objects can share the data managed by the <code>CursorManager</code>.</p>
<p>An example is an application that displays the results of a query to the user as both a table and a graph. The application creates a <code>CursorManager</code> for the <code>Source</code>. The application creates two separate <code>Cursor</code> objects from the same <code>CursorManager</code>, one for a table view and one for a graph view. The two views share the same query and display the same data, just in different formats. <a href="#i1007426">Figure 8-4</a> illustrates the relationship between the <code>Source</code>, the <code>Cursor</code> objects, and the views.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1007426"></a>Figure 8-4 A Source and Two Cursors for Different Views of the Values</p>
<img width="484" height="323" src="img/crsvlvus.gif" alt="Description of Figure 8-4 follows"/><br/>
<a id="sthref848" href="img_text/crsvlvus.htm">Description of &#34;Figure 8-4 A Source and Two Cursors for Different Views of the Values&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4769">
<tr>
<td class="cellalignment4776">
<table class="cellalignment4774">
<tr>
<td class="cellalignment4773"><a href="transact.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4773"><a href="cursors.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4778">
<table class="cellalignment4772">
<tr>
<td class="cellalignment4773"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4773"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4773"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4773"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4773"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4773"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>