<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1613"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/XMLType%20Views"></a><title>XMLType Views</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="You can create XMLType views over relational and object-relational data."/>
<meta name="keywords" content="non-schema-based view, definition, XML schema-based view"/>
<meta name="dcterms.created" content="2016-12-08T13:53:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E41152-15"/>
<meta name="dcterms.isVersionOf" content="ADXDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="xdb_rel_views.htm" title="Previous" type="text/html"/>
<link rel="Next" href="partpg3.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41152-15.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-9F0A7B1F-269B-411F-AD8B-8F1CB2E2A671"></a> <span id="PAGE" style="display:none;">20/61</span> <!-- End Header -->
<a id="ADXDB1800"></a>
<h1 id="ADXDB-GUID-9F0A7B1F-269B-411F-AD8B-8F1CB2E2A671" class="sect1"><span class="enumeration_chapter">10</span> XMLType Views</h1>
<div>
<p>You can create <code>XMLType</code> views over relational and object-relational data.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb14vie.htm#GUID-EF747930-3691-4BFA-B1C7-99FC449C3BFE" title="XMLType views wrap existing relational and object-relational data in XML formats. This lets you use existing data in contexts that expect XML data and exploit XML features, including XML Schema.">What Are XMLType Views?</a></p>
</li>
<li>
<p><a href="xdb14vie.htm#GUID-69A4022C-9FCA-4529-8A29-084EB2185FCF" title="The XML data in a non XML Schema-based XMLType view is not constrained to conform to a registered XML schema. You can create a non-schema-based XMLType view using SQL/XML publishing functions.">Creating Non-Schema-Based XMLType Views</a></p>
</li>
<li>
<p><a href="xdb14vie.htm#GUID-4BA4C794-3CAA-43D6-B8C4-5FE946FC1134" title="The XML data in an XML Schema-based XMLType view is constrained to conform to an XML schema. You can create a schema-based XMLType view using SQL/XML publishing functions or using object types or views.">Creating XML Schema-Based XMLType Views</a></p>
</li>
<li>
<p><a href="xdb14vie.htm#GUID-5191DBB9-EEA9-402C-BAD2-28AB6894E63D" title="An XMLType view can be created on an XMLType table, for example, to transform the XML data or to restrict the rows returned.">Creating XMLType Views from XMLType Tables</a></p>
</li>
<li>
<p><a href="xdb14vie.htm#GUID-72A94695-5890-4BA1-8FD1-6D26E1C4349B" title="You can reference an XMLType view object using SQL function ref.">Referencing XMLType View Objects Using SQL Function REF</a></p>
</li>
<li>
<p><a href="xdb14vie.htm#GUID-FF5B6A10-191B-45E0-810F-A7F0CFF71711" title="A given XMLType view might not be implicitly updatable. In that case, you must write instead-of triggers to handle all DML. To determine whether an XMLType view is implicitly updatable, query it to see whether it is based on an object view or constructor that is itself inherently updatable.">Using DML (Data Manipulation Language) on XMLType Views</a></p>
</li>
</ul>
</div>
<a id="ADXDB5166"></a>
<div class="props_rev_3"><a id="GUID-EF747930-3691-4BFA-B1C7-99FC449C3BFE"></a>
<h2 id="ADXDB-GUID-EF747930-3691-4BFA-B1C7-99FC449C3BFE" class="sect2"><span class="enumeration_section">10.1</span> What Are XMLType Views?</h2>
<div>
<p><code>XMLType</code> views wrap existing relational and object-relational data in XML formats. This lets you use existing data in contexts that expect XML data and exploit XML features, including XML Schema.</p>
<p>The major advantages of using <code>XMLType</code> views are:</p>
<ul style="list-style-type: disc;">
<li>
<p>You can exploit Oracle XML&nbsp;DB XML features that use XML Schema functionality without having to migrate your base legacy data.</p>
</li>
<li>
<p>With <code>XMLType</code> views, you can experiment with various forms of storage for your data. You need not decide immediately whether to store it as <code>XMLType</code> or which <code>XMLType</code> storage model to use.</p>
</li>
</ul>
<p><code>XMLType</code> views are similar to object views. Each row of an <code>XMLType</code> view corresponds to an <code>XMLType</code> instance. The object identifier for uniquely identifying each row in the view can be created using SQL/XML functions <code>XMLCast</code> and <code>XMLQuery</code>.</p>
<p>Throughout this chapter XML schema refers to the W3C XML Schema 1.0 recommendation, <a href="http://www.w3.org/XML/Schema" target="_blank"><code>http://www.w3.org/XML/Schema</code></a>.</p>
<p>There are two types of <code>XMLType</code> views:</p>
<ul style="list-style-type: disc;">
<li>
<p><strong class="term">Non-schema-based XMLType views.</strong> These views do not confirm to a particular XML schema.</p>
</li>
<li>
<p><strong class="term">XML schema-based XMLType views.</strong> As with <code>XMLType</code> tables, <code>XMLType</code> views that conform to a particular XML schema are called XML schema-based <code>XMLType</code> views. These provide stronger typing than non-schema-based <code>XMLType</code> views.</p>
</li>
</ul>
<p>XPath rewrite of queries over <code>XMLType</code> views is enabled for both XML schema-based and non-schema-based <code>XMLType</code> views. XPath rewrite is described in <a href="xdb_rewrite.htm#GUID-35551023-CCAC-477B-8BBF-CD0E0B44C962" title="For XMLType data stored object-relationally, queries involving XPath expression arguments to various SQL functions can often be automatically rewritten to queries against the underlying SQL tables, which are highly optimized.">XPath Rewrite for Object-Relational Storage</a>.</p>
<p>To create an XML schema-based <code>XMLType</code> view, first register your XML schema. If the view is an object view, that is, if it is constructed using an object type, then the XML schema should have annotations that represent the bidirectional mapping from XML to SQL object types. <code>XMLType</code> views conforming to this registered XML schema can then be created by providing an underlying query that constructs instances of the appropriate SQL object type.</p>
<div class="infoboxnotealso" id="GUID-EF747930-3691-4BFA-B1C7-99FC449C3BFE__GUID-456F7A6E-BA5F-4C37-AF8F-35E126240D17">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb05sto.htm#GUID-C09824C1-6B02-4556-A265-B1749DEE8DE1" title="XML Schema is a standard for describing the content and structure of XML documents. You can register, update, and delete an XML schema used with Oracle XML&nbsp;DB. You can define storage structures to use for your XML schema-based data and map XML Schema data types to SQL data types.">XML Schema Storage and Query: Basic</a></p>
</li>
<li>
<p><a href="xdb_rel_views.htm#GUID-420496CE-D62F-4EBE-A76E-861B932AE1E6" title="Relational database views over XML data provide conventional, relational access to XML content.">Relational Views over XML Data</a></p>
</li>
<li>
<p><a href="xdb_storage.htm#GUID-F1EE5B88-69E1-47B4-97FC-92F184C0CBA1" title="Important design choices for your application include what XMLType storage model to use and which indexing approaches to use.">Choice of XMLType Storage and Indexing</a></p>
</li>
</ul>
</div>
<p>You can create <code>XMLType</code> views in any of the following ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>Based on SQL/XML publishing functions, such as <code>XMLElement</code>, <code>XMLForest</code>, <code>XMLConcat</code>, and <code>XMLAgg</code>. SQL/XML publishing functions can be used to construct both non-schema-based <code>XMLType</code> views and XML schema-based <code>XMLType</code> views. This enables construction of <code>XMLType</code> view from the underlying relational tables directly without physically migrating those relational legacy data into XML. However, to construct XML schema-based <code>XMLType</code> view, the XML schema must be registered and the XML value generated by SQL/XML publishing functions must be constrained to the XML schema.</p>
</li>
<li>
<p>Based on object types or object views. This enables the construction of the <code>XMLType</code> view from underlying relational or object relational tables directly without physically migrating the relational or object relational legacy data into XML. Creating an XML-schema-based <code>XMLType</code> view requires that you annotate the XML schema with a mapping to existing object types or that you generate the XML schema from the existing object types.</p>
</li>
<li>
<p>Directly from an <code>XMLType</code> table.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDB5168"></a><a id="ADXDB5167"></a>
<div class="props_rev_3"><a id="GUID-30E3C3B8-46F7-4D1E-97DE-B7A261BC2995"></a>
<h2 id="ADXDB-GUID-30E3C3B8-46F7-4D1E-97DE-B7A261BC2995" class="sect2"><span class="enumeration_section">10.2</span> CREATE VIEW for XMLType Views: Syntax</h2>
<div>
<p>The syntax for the <code>CREATE VIEW</code> clause for creating <code>XMLType</code> views is presented.</p>
<div class="section">
<p><a href="xdb14vie.htm#GUID-30E3C3B8-46F7-4D1E-97DE-B7A261BC2995__CJIBFAFH">Figure 10-1</a> shows this syntax. See <a class="olink SQLRF01504" target="_blank" href="../SQLRF/statements_8004.htm#SQLRF01504"><span class="italic">Oracle Database SQL Language Reference</span></a> for details on the <code>CREATE VIEW</code> syntax.</p>
<div class="figure" id="GUID-30E3C3B8-46F7-4D1E-97DE-B7A261BC2995__CJIBFAFH">
<p class="titleinfigure">Figure 10-1 Creating XMLType Views Clause: Syntax</p>
<img width="725" height="91" src="img/GUID-5FADE71F-1628-4D82-BF7C-6CF89F2778D5-default.gif" alt="Description of Figure 10-1 follows" title="Description of Figure 10-1 follows"/><br/>
<a href="img_text/GUID-5FADE71F-1628-4D82-BF7C-6CF89F2778D5-print.htm">Description of &#34;Figure 10-1 Creating XMLType Views Clause: Syntax&#34;</a></div>
<!-- class="figure" --></div>
<!-- class="section" --></div>
</div>
<a id="ADXDB5171"></a><a id="ADXDB5169"></a>
<div class="props_rev_3"><a id="GUID-69A4022C-9FCA-4529-8A29-084EB2185FCF"></a>
<h2 id="ADXDB-GUID-69A4022C-9FCA-4529-8A29-084EB2185FCF" class="sect2"><span class="enumeration_section">10.3</span> Creating Non-Schema-Based XMLType Views</h2>
<div>
<p>The XML data in a non XML Schema-based <code>XMLType</code> view is not constrained to conform to a registered XML schema. You can create a non-schema-based <code>XMLType</code> view using SQL/XML publishing functions.</p>
<div class="section">
<p><a href="xdb14vie.htm#GUID-69A4022C-9FCA-4529-8A29-084EB2185FCF__i1027167">Example 10-1</a> shows how to create an <code>XMLType</code> view using SQL/XML function <code>XMLELement</code>.</p>
<p>Existing data in relational tables or views can be exposed as XML data this way. If a view is generated using a SQL/XML publishing function then queries that access that view using XQuery expressions can often be rewritten. These optimized queries can then directly access the underlying relational columns. See <a href="xdb_rewrite.htm#GUID-35551023-CCAC-477B-8BBF-CD0E0B44C962" title="For XMLType data stored object-relationally, queries involving XPath expression arguments to various SQL functions can often be automatically rewritten to queries against the underlying SQL tables, which are highly optimized.">XPath Rewrite for Object-Relational Storage</a> for details.</p>
<p>You can perform a DML operation on an <code>XMLType</code> view, but, in general, you must write instead-of triggers to handle the DML operation.</p>
<div class="infoboxnotealso" id="GUID-69A4022C-9FCA-4529-8A29-084EB2185FCF__GUID-89523654-DEE2-42CE-9A71-4B32E974C95F">
<p class="notep1">See Also:</p>
<p><a href="xdb13gen.htm#GUID-3BEB9A88-8B44-4AA3-89F4-8CBF6F8FA686" title="Oracle XML&nbsp;DB provides features for generating (constructing) XML data from relational data in the database. There are both SQL/XML standard functions and Oracle-specific functions and packages for generating XML data from relational content.">Generation of XML Data from Relational Data</a>, for details on SQL/XML publishing functions</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-69A4022C-9FCA-4529-8A29-084EB2185FCF__i1027167">
<p class="titleinexample">Example 10-1 Creating an XMLType View Using XMLELEMENT</p>
<pre dir="ltr">CREATE OR REPLACE VIEW emp_view OF XMLType
  WITH OBJECT ID (XMLCast(XMLQuery(&#39;/Emp/@empno&#39;
                                   PASSING OBJECT_VALUE RETURNING CONTENT)
                          AS BINARY_DOUBLE)) AS
  SELECT XMLElement(&#34;Emp&#34;,
                    XMLAttributes(employee_id AS &#34;empno&#34;),
                    XMLForest(e.first_name ||&#39; &#39;|| e.last_name AS &#34;name&#34;,
                              e.hire_date AS &#34;hiredate&#34;))
    AS &#34;result&#34; FROM employees e WHERE salary &gt; 15000;

SELECT * FROM emp_view;
 
SYS_NC_ROWINFO$
-------------------------------------------------------------------------------------
&lt;Emp empno=&#34;100&#34;&gt;&lt;name&gt;Steven King&lt;/name&gt;&lt;hiredate&gt;2003-06-17&lt;/hiredate&gt;&lt;/Emp&gt; 
&lt;Emp empno=&#34;101&#34;&gt;&lt;name&gt;Neena Kochhar&lt;/name&gt;&lt;hiredate&gt;2005-09-21&lt;/hiredate&gt;&lt;/Emp&gt; 
&lt;Emp empno=&#34;102&#34;&gt;&lt;name&gt;Lex De Haan&lt;/name&gt;&lt;hiredate&gt;2001-01-13&lt;/hiredate&gt;&lt;/Emp&gt; 
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5174"></a>
<div class="props_rev_3"><a id="GUID-4BA4C794-3CAA-43D6-B8C4-5FE946FC1134"></a>
<h2 id="ADXDB-GUID-4BA4C794-3CAA-43D6-B8C4-5FE946FC1134" class="sect2"><span class="enumeration_section">10.4</span> Creating XML Schema-Based XMLType Views</h2>
<div>
<p>The XML data in an XML Schema-based <code>XMLType</code> view is constrained to conform to an XML schema. You can create a schema-based <code>XMLType</code> view using SQL/XML publishing functions or using object types or views.</p>
<p>Create a schema-based view in either of these ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>Using SQL/XML publishing functions.</p>
<div class="infoboxnotealso" id="GUID-4BA4C794-3CAA-43D6-B8C4-5FE946FC1134__GUID-9BB973AD-024E-482B-A688-D3C30123F4BB">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb14vie.htm#GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9" title="You can use SQL/XML publishing functions to create an XML Schema-based XMLType view.">Creating XML Schema-Based XMLType Views Using SQL/XML Publishing Functions</a>&#34;</span></p>
</div>
</li>
<li>
<p>Using object types or object views. This is convenient when you already have object types, views, and tables that you want to map to XML data.</p>
<div class="infoboxnotealso" id="GUID-4BA4C794-3CAA-43D6-B8C4-5FE946FC1134__GUID-CECD75F9-7C8F-4E01-97BF-CFD972D2411C">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb14vie.htm#GUID-E50ECA03-3E64-4089-9770-62C98D23DD67" title="You can create an XML Schema-based XMLType view from object types or views by annotating the XML schema to define a mapping between XML types and SQL object types and object attributes.">Creating XML Schema-Based XMLType Views Using Object Types or Object Views</a>&#34;</span></p>
</div>
</li>
</ul>
</div>
<a id="ADXDB5176"></a><a id="ADXDB5177"></a><a id="ADXDB5178"></a><a id="ADXDB5175"></a>
<div class="props_rev_3"><a id="GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9"></a>
<h3 id="ADXDB-GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9" class="sect3"><span class="enumeration_section">10.4.1</span> Creating XML Schema-Based XMLType Views Using SQL/XML Publishing Functions</h3>
<div>
<p>You can use SQL/XML publishing functions to create an XML Schema-based <code>XMLType</code> view.</p>
<div class="section">
<ol>
<li>
<p>Create and register the XML schema document that contains the necessary XML structures. You do not need to annotate the XML schema to define the mapping between XML types and SQL object types.</p>
</li>
<li>
<p>Use SQL/XML publishing functions to create an <code>XMLType</code> view that conforms to the XML schema.</p>
</li>
</ol>
<p>These two steps are illustrated in <a href="xdb14vie.htm#GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9__CHDHDHAD">Example 10-2</a> and <a href="xdb14vie.htm#GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9__CHDFDJCH">Example 10-3</a>, respectively.</p>
<p><a href="xdb14vie.htm#GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9__CHDGIHBA">Example 10-4</a> illustrates querying an <code>XMLType</code> view.</p>
<p><a href="xdb14vie.htm#GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9__CHDHDHAD">Example 10-2</a> assumes that you have an XML schema <code>emp_simple.xsd</code> that contains XML structures defining an employee. It registers the XML schema with the target location <code>http://www.oracle.com/emp_simple.xsd</code>.</p>
<p>When using SQL/XML publishing functions to generate XML schema-based content, you must specify the appropriate namespace information for all of the elements and also indicate the location of the schema using attribute <code>xsi:schemaLocation</code>. These can be specified using the <code>XMLAttributes</code> clause. <a href="xdb14vie.htm#GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9__CHDFDJCH">Example 10-3</a> illustrates this.</p>
<div class="infobox-note" id="GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9__GUID-E130F07E-D0D8-4C96-A03D-33A64077C1D9">
<p class="notep1">Note:</p>
<p>Whenever you use SQL/XML function <code>XMLAttributes</code> with an XML schema reference to create an <code>XMLType</code> view, register the XML schema before creating the view, if possible. Otherwise, you must recompile the view after registering the XML schema, in order for the generated documents to be based on the XML schema.</p>
</div>
<p>In <a href="xdb14vie.htm#GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9__CHDFDJCH">Example 10-3</a>, function <code>XMLElement</code> creates XML element <code>Employee</code>. Function <code>XMLForest</code> creates the children of element <code>Employee</code>. The <code>XMLAttributes</code> clause inside <code>XMLElement</code> constructs the required XML <code>namespace</code> and schema <code>location</code> attributes, so that the XML data that is generated conforms to the XML schema of the view. The innermost call to <code>XMLForest</code> creates the children of element <code>department</code>, which is a child of element <code>Employee</code>.</p>
<p>By default, the XML generation functions create a non-schema-based XML instance. However, when the schema location is specified, using attribute <code>xsi:schemaLocation</code> or <code>xsi:noNamespaceSchemaLocation</code>, Oracle XML DB generates XML schema-based XML data. For <code>XMLType</code> views, as long as the names of the elements and attributes match those in the XML schema, the XML data is converted implicitly into a valid XML schema-based document. Any errors in the generated XML data are caught later, when operations such as validation or extraction operations are performed on the XML instance.</p>
<p><a href="xdb14vie.htm#GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9__CHDGIHBA">Example 10-4</a> queries the <code>XMLType</code> view, returning an XML result from tables <code>employees</code> and <code>departments</code>. The result of the query is shown pretty-printed, for clarity.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9__CHDHDHAD">
<p class="titleinexample">Example 10-2 Registering XML Schema emp_simple.xsd</p>
<pre dir="ltr">BEGIN
  DBMS_XMLSCHEMA.registerSchema(
   SCHEMAURL =&gt; &#39;http://www.oracle.com/emp_simple.xsd&#39;,
   SCHEMADOC =&gt; &#39;&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
                         targetNamespace=&#34;http://www.oracle.com/emp_simple.xsd&#34;
                         version=&#34;1.0&#34;
                         xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34; 
                         elementFormDefault=&#34;qualified&#34;&gt; 
                   &lt;element name = &#34;Employee&#34;&gt; 
                     &lt;complexType&gt; 
                       &lt;sequence&gt; 
                         &lt;element name = &#34;EmployeeId&#34;
                                  type = &#34;positiveInteger&#34; minOccurs = &#34;0&#34;/&gt; 
                         &lt;element name = &#34;Name&#34;
                                  type = &#34;string&#34; minOccurs = &#34;0&#34;/&gt; 
                         &lt;element name = &#34;Job&#34;
                                  type = &#34;string&#34; minOccurs = &#34;0&#34;/&gt; 
                         &lt;element name = &#34;Manager&#34;
                                  type = &#34;positiveInteger&#34; minOccurs = &#34;0&#34;/&gt; 
                         &lt;element name = &#34;HireDate&#34;
                                  type = &#34;date&#34; minOccurs = &#34;0&#34;/&gt; 
                         &lt;element name = &#34;Salary&#34;
                                  type = &#34;positiveInteger&#34; minOccurs = &#34;0&#34;/&gt; 
                         &lt;element name = &#34;Commission&#34;
                                  type = &#34;positiveInteger&#34; minOccurs = &#34;0&#34;/&gt; 
                         &lt;element name = &#34;Dept&#34;&gt; 
                           &lt;complexType&gt; 
                             &lt;sequence&gt; 
                               &lt;element name = &#34;DeptNo&#34;
                                        type = &#34;positiveInteger&#34; minOccurs = &#34;0&#34;/&gt; 
                               &lt;element name = &#34;DeptName&#34;
                                        type = &#34;string&#34; minOccurs = &#34;0&#34;/&gt; 
                               &lt;element name = &#34;Location&#34;
                                        type = &#34;positiveInteger&#34; minOccurs = &#34;0&#34;/&gt; 
                             &lt;/sequence&gt; 
                           &lt;/complexType&gt; 
                         &lt;/element&gt; 
                       &lt;/sequence&gt; 
                     &lt;/complexType&gt; 
                   &lt;/element&gt; 
                 &lt;/schema&gt;&#39;,
   LOCAL     =&gt; TRUE,
   GENTYPES  =&gt; TRUE);
END;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9__CHDFDJCH">
<p class="titleinexample">Example 10-3 Creating an XMLType View Using SQL/XML Publishing Functions</p>
<pre dir="ltr">CREATE OR REPLACE VIEW <span class="bold">emp_simple_xml</span> OF XMLType
  XMLSCHEMA &#34;http://www.oracle.com/<span class="/&#34;/&#34;bold&#34;&#34;">emp_simple.xsd</span>&#34; ELEMENT &#34;Employee&#34;
   WITH OBJECT ID (XMLCast(XMLQuery(&#39;/Employee/EmployeeId/text()&#39;
                                    PASSING OBJECT_VALUE
                                    RETURNING CONTENT)
                           AS BINARY_DOUBLE)) AS
   SELECT
     XMLElement(&#34;Employee&#34;,
                XMLAttributes(
                  &#39;http://www.oracle.com/emp_simple.xsd&#39; AS &#34;xmlns&#34; ,
                  &#39;http://www.w3.org/2001/XMLSchema-instance&#39; AS &#34;xmlns:xsi&#34;,
                  &#39;http://www.oracle.com/emp_simple.xsd
                   http://www.oracle.com/emp_simple.xsd&#39;
                  AS &#34;xsi:schemaLocation&#34;),
                XMLForest(e.employee_id    AS &#34;EmployeeId&#34;,
                          e.last_name      AS &#34;Name&#34;,
                          e.job_id         AS &#34;Job&#34;,
                          e.manager_id     AS &#34;Manager&#34;,
                          e.hire_date      AS &#34;HireDate&#34;,
                          e.salary         AS &#34;Salary&#34;,
                          e.commission_pct AS &#34;Commission&#34;,
                          XMLForest(
                            d.department_id   AS &#34;DeptNo&#34;,
                            d.department_name AS &#34;DeptName&#34;,
                            d.location_id     AS &#34;Location&#34;) AS &#34;Dept&#34;))
     FROM employees e, departments d
     WHERE e.department_id = d.department_id;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-B3F5A02B-8D97-411A-B542-3D441BE3DEF9__CHDGIHBA">
<p class="titleinexample">Example 10-4 Querying an XMLType View</p>
<pre dir="ltr">SELECT OBJECT_VALUE AS RESULT FROM emp_simple_xml WHERE ROWNUM &lt; 2;

RESULT
---------------------------------------------------------------------
&lt;Employee xmlns=&#34;http://www.oracle.com/emp_simple.xsd&#34;
          xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
          xsi:schemaLocation=&#34;http://www.oracle.com/emp_simple.xsd 
                              http://www.oracle.com/emp_simple.xsd&#34;&gt;
  &lt;EmployeeId&gt;200&lt;/EmployeeId&gt;
  &lt;Name&gt;Whalen&lt;/Name&gt;
  &lt;Job&gt;AD_ASST&lt;/Job&gt;
  &lt;Manager&gt;101&lt;/Manager&gt;
  &lt;HireDate&gt;2003-09-17&lt;/HireDate&gt;
  &lt;Salary&gt;4400&lt;/Salary&gt;
  &lt;Dept&gt;
    &lt;DeptNo&gt;10&lt;/Deptno&gt;
    &lt;DeptName&gt;Administration&lt;/DeptName&gt;
    &lt;Location&gt;1700&lt;/Location&gt;
  &lt;/Dept&gt;
&lt;/Employee&gt;
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB5180"></a><a id="ADXDB5897"></a><a id="ADXDB5898"></a><a id="ADXDB5181"></a><a id="ADXDB5179"></a>
<div class="props_rev_3"><a id="GUID-5AA7CC36-1A4D-49D6-8071-5F2AB5CB27FE"></a>
<h4 id="ADXDB-GUID-5AA7CC36-1A4D-49D6-8071-5F2AB5CB27FE" class="sect4"><span class="enumeration_section">10.4.1.1</span> Using Namespaces with SQL/XML Publishing Functions</h4>
<div>
<p>If you have complex XML schemas involving namespaces, you must use the partially escaped mapping provided by the SQL/XML publishing functions and create elements with appropriate namespaces and prefixes.</p>
<div class="section">
<p>The query in <a href="xdb14vie.htm#GUID-5AA7CC36-1A4D-49D6-8071-5F2AB5CB27FE__CFHIIBIH">Example 10-5</a> creates XML instances that have the correct namespace, prefixes, and target schema location. It can be used as the query in the definition of view <code>emp_simple_xml</code>.</p>
<p>If the XML schema had no target namespace, then you could use attribute <code>xsi:noNamespaceSchemaLocation</code> to indicate that. <a href="xdb14vie.htm#GUID-5AA7CC36-1A4D-49D6-8071-5F2AB5CB27FE__CFHGDFAH">Example 10-6</a> shows such an XML schema.</p>
<p><a href="xdb14vie.htm#GUID-5AA7CC36-1A4D-49D6-8071-5F2AB5CB27FE__CFHEICEA">Example 10-7</a> creates a view that conforms to the XML schema in <a href="xdb14vie.htm#GUID-5AA7CC36-1A4D-49D6-8071-5F2AB5CB27FE__CFHGDFAH">Example 10-6</a>. The <code>XMLAttributes</code> clause creates an XML element that contains the <code>noNamespace</code> schema location attribute.</p>
<p><a href="xdb14vie.htm#GUID-5AA7CC36-1A4D-49D6-8071-5F2AB5CB27FE__CFHIBCBF">Example 10-8</a> creates view <code>dept_xml</code>, which conforms to XML schema <code>dept.xsd</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-5AA7CC36-1A4D-49D6-8071-5F2AB5CB27FE__CFHIIBIH">
<p class="titleinexample">Example 10-5 Using Namespace Prefixes with SQL/XML Publishing Functions</p>
<pre dir="ltr">SELECT XMLElement(&#34;ipo:Employee&#34;, 
          XMLAttributes(&#39;http://www.oracle.com/emp_simple.xsd&#39; AS &#34;xmlns:ipo&#34;, 
                        &#39;http://www.oracle.com/emp_simple.xsd 
                         http://www.oracle.com/emp_simple.xsd&#39; AS &#34;xmlns:xsi&#34;),
            XMLForest(e.employee_id                     AS &#34;ipo:EmployeeId&#34;, 
                      e.last_name                       AS &#34;ipo:Name&#34;,  
                      e.job_id                          AS &#34;ipo:Job&#34;,
                      e.manager_id                      AS &#34;ipo:Manager&#34;,
                      TO_CHAR(e.hire_date,&#39;YYYY-MM-DD&#39;) AS &#34;ipo:HireDate&#34;, 
                      e.salary                          AS &#34;ipo:Salary&#34;,
                      e.commission_pct                  AS &#34;ipo:Commission&#34;,
                 XMLForest(d.department_id   AS &#34;ipo:DeptNo&#34;,
                           d.department_name AS &#34;ipo:DeptName&#34;, d.location_id
       AS &#34;ipo:Location&#34;) AS &#34;ipo:Dept&#34;))
       FROM employees e, departments d 
       WHERE e.department_id = d.department_id AND d.department_id = 20;
BEGIN
  -- Delete schema if it already exists (else error)
  DBMS_XMLSCHEMA.deleteSchema(&#39;emp-noname.xsd&#39;, 4); 
END;
</pre>
<pre dir="ltr">XMLELEMENT(&#34;IPO:EMPLOYEE&#34;,XMLATTRIBUTES(&#39;HTTP://WWW.ORACLE.COM/EMP_SIMPLE.XSD&#39;AS
--------------------------------------------------------------------------------
&lt;ipo:Employee
xmlns:ipo=&#34;http://www.oracle.com/emp_simple.xsd&#34;
 xmlns:xsi=&#34;http://www.oracle.com/emp_simple.xsd
 http://www.oracle.com/emp_simple.xsd&#34;&gt;
&lt;ipo:EmployeeId&gt;201&lt;/ipo:EmployeeId&gt;&lt;ipo:Name&gt;Hartstein&lt;/ipo:Name&gt;
&lt;ipo:Job&gt;MK_MAN&lt;/ipo:Job&gt;&lt;ipo:Manager&gt;100&lt;/ipo:Manager&gt;
&lt;ipo:HireDate&gt;2004-02-17&lt;/ipo:HireDate&gt;&lt;ipo:Salary&gt;13000&lt;/ipo:Salary&gt;
&lt;ipo:Dept&gt;&lt;ipo:DeptNo&gt;20&lt;/ipo:DeptNo&gt;&lt;ipo:DeptName&gt;Marketing&lt;/ipo:DeptName&gt;
&lt;ipo:Location&gt;1800&lt;/ipo:Location&gt;&lt;/ipo:Dept&gt;&lt;/ipo:Employee&gt;
&lt;ipo:Employee xmlns:ipo=&#34;http://www.oracle.com/emp_simple.xsd&#34;
 xmlns:xsi=&#34;http://www.oracle.com/emp_simple.xsd 
 http://www.oracle.com/emp_simple.xsd&#34;&gt;&lt;ipo:EmployeeId&gt;202&lt;/ipo:EmployeeId&gt;
&lt;ipo:Name&gt;Fay&lt;/ipo:Name&gt;&lt;ipo:Job&gt;MK_REP&lt;/ipo:Job&gt;&lt;ipo:Manager&gt;201&lt;/ipo:Manager&gt;
&lt;ipo:HireDate&gt;2005-08-17&lt;/ipo:HireDate&gt;&lt;ipo:Salary&gt;6000&lt;/ipo:Salary&gt;
&lt;ipo:Dept&gt;&lt;ipo:DeptNo&gt;20&lt;/ipo:Dept
No&gt;&lt;ipo:DeptName&gt;Marketing&lt;/ipo:DeptName&gt;&lt;ipo:Location&gt;1800&lt;/ipo:Location&gt;
&lt;/ipo:Dept&gt;
&lt;/ipo:Employee&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-5AA7CC36-1A4D-49D6-8071-5F2AB5CB27FE__CFHGDFAH">
<p class="titleinexample">Example 10-6 XML Schema with No Target Namespace</p>
<pre dir="ltr">BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;<span class="bold">emp-noname.xsd</span>&#39;,
    SCHEMADOC =&gt; &#39;&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
                          xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt; 
                    &lt;element name = &#34;Employee&#34;&gt; 
                      &lt;complexType&gt; 
                        &lt;sequence&gt; 
                          &lt;element name = &#34;EmployeeId&#34; type = &#34;positiveInteger&#34;/&gt; 
                          &lt;element name = &#34;Name&#34; type = &#34;string&#34;/&gt; 
                          &lt;element name = &#34;Job&#34; type = &#34;string&#34;/&gt; 
                          &lt;element name = &#34;Manager&#34; type = &#34;positiveInteger&#34;/&gt; 
                          &lt;element name = &#34;HireDate&#34; type = &#34;date&#34;/&gt; 
                          &lt;element name = &#34;Salary&#34; type = &#34;positiveInteger&#34;/&gt; 
                          &lt;element name = &#34;Commission&#34; type = &#34;positiveInteger&#34;/&gt; 
                          &lt;element name = &#34;Dept&#34;&gt; 
                            &lt;complexType&gt; 
                              &lt;sequence&gt; 
                                &lt;element name = &#34;DeptNo&#34; type = &#34;positiveInteger&#34; /&gt; 
                                &lt;element name = &#34;DeptName&#34; type = &#34;string&#34;/&gt; 
                                &lt;element name = &#34;Location&#34; type = &#34;positiveInteger&#34;/&gt; 
                              &lt;/sequence&gt; 
                            &lt;/complexType&gt; 
                          &lt;/element&gt; 
                        &lt;/sequence&gt; 
                      &lt;/complexType&gt; 
                    &lt;/element&gt; 
                  &lt;/schema&gt;&#39;,
    LOCAL     =&gt; TRUE,
    GENTYPES  =&gt; TRUE);
END;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-5AA7CC36-1A4D-49D6-8071-5F2AB5CB27FE__CFHEICEA">
<p class="titleinexample">Example 10-7 Creating a View for an XML Schema with No Target Namespace</p>
<pre dir="ltr">CREATE OR REPLACE VIEW <span class="bold">emp_xml</span> OF XMLType
     XMLSCHEMA &#34;emp-noname.xsd&#34; ELEMENT &#34;Employee&#34;
     WITH OBJECT ID (XMLCast(XMLQuery(&#39;/Employee/EmployeeId/text()&#39;
                                      PASSING OBJECT_VALUE
                                      RETURNING CONTENT)
                             AS BINARY_DOUBLE)) AS
     SELECT XMLElement(
       &#34;Employee&#34;,
       XMLAttributes(&#39;http://www.w3.org/2001/XMLSchema-instance&#39; AS &#34;xmlns:xsi&#34;,
                     &#39;emp-noname.xsd&#39; AS &#34;<span class="bold">xsi:noNamespaceSchemaLocation</span>&#34;),
       XMLForest(e.employee_id    AS &#34;EmployeeId&#34;,
                 e.last_name      AS &#34;Name&#34;,
                 e.job_id         AS &#34;Job&#34;,
                 e.manager_id     AS &#34;Manager&#34;,
                 e.hire_date      AS &#34;HireDate&#34;,
                 e.salary         AS &#34;Salary&#34;,
                 e.commission_pct AS &#34;Commission&#34;,
                 XMLForest(d.department_id   AS &#34;DeptNo&#34;,
                           d.department_name AS &#34;DeptName&#34;,
                           d.location_id     AS &#34;Location&#34;) AS &#34;Dept&#34;))
       FROM employees e, departments d
       WHERE e.department_id = d.department_id;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-5AA7CC36-1A4D-49D6-8071-5F2AB5CB27FE__CFHIBCBF">
<p class="titleinexample">Example 10-8 Using SQL/XML Functions in XML Schema-Based XMLType Views</p>
<pre dir="ltr">BEGIN
  -- Delete schema if it already exists (else error)
  DBMS_XMLSCHEMA.deleteSchema(&#39;http://www.oracle.com/dept.xsd&#39;, 4);
END;
/

BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.oracle.com/<span class="/&#34;/&#34;bold&#34;&#34;">dept.xsd</span>&#39;,
    SCHEMADOC =&gt; &#39;&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
                          targetNamespace=&#34;http://www.oracle.com/dept.xsd&#34;
                          version=&#34;1.0&#34; 
                          xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;
                          elementFormDefault=&#34;qualified&#34;&gt; 
                    &lt;element name = &#34;Department&#34;&gt; 
                      &lt;complexType&gt; 
                        &lt;sequence&gt; 
                          &lt;element name = &#34;DeptNo&#34; type = &#34;positiveInteger&#34;/&gt; 
                          &lt;element name = &#34;DeptName&#34; type = &#34;string&#34;/&gt; 
                          &lt;element name = &#34;Location&#34; type = &#34;positiveInteger&#34;/&gt; 
                          &lt;element name = &#34;Employee&#34; maxOccurs = &#34;unbounded&#34;&gt; 
                            &lt;complexType&gt; 
                              &lt;sequence&gt; 
                                &lt;element name = &#34;EmployeeId&#34; type = &#34;positiveInteger&#34;/&gt; 
                                &lt;element name = &#34;Name&#34; type = &#34;string&#34;/&gt; 
                                &lt;element name = &#34;Job&#34; type = &#34;string&#34;/&gt; 
                                &lt;element name = &#34;Manager&#34; type = &#34;positiveInteger&#34;/&gt; 
                                &lt;element name = &#34;HireDate&#34; type = &#34;date&#34;/&gt; 
                                &lt;element name = &#34;Salary&#34; type = &#34;positiveInteger&#34;/&gt; 
                                &lt;element name = &#34;Commission&#34; type = &#34;positiveInteger&#34;/&gt; 
                             &lt;/sequence&gt; 
                            &lt;/complexType&gt; 
                          &lt;/element&gt; 
                        &lt;/sequence&gt; 
                      &lt;/complexType&gt; 
                    &lt;/element&gt; 
                  &lt;/schema&gt;&#39;,
    LOCAL     =&gt; TRUE,
    GENTYPES  =&gt; FALSE);
  END;
/

CREATE OR REPLACE VIEW <span class="bold">dept_xml</span> OF XMLType
  XMLSCHEMA &#34;http://www.oracle.com/dept.xsd&#34; ELEMENT &#34;Department&#34;
  WITH OBJECT ID (XMLCast(XMLQuery(&#39;/Department/DeptNo&#39;
                                   PASSING OBJECT_VALUE RETURNING CONTENT)
                          AS BINARY_DOUBLE)) AS
  SELECT XMLElement(
    &#34;Department&#34;,
    XMLAttributes(
      &#39;http://www.oracle.com/emp.xsd&#39; AS &#34;xmlns&#34; ,
      &#39;http://www.w3.org/2001/XMLSchema-instance&#39; AS &#34;xmlns:xsi&#34;,
      &#39;http://www.oracle.com/dept.xsd
       http://www.oracle.com/dept.xsd&#39; AS &#34;xsi:schemaLocation&#34;),
    XMLForest(d.department_id AS &#34;DeptNo&#34;,
              d.department_name AS &#34;DeptName&#34;,
              d.location_id AS &#34;Location&#34;),
    (SELECT XMLagg(
              XMLElement(&#34;Employee&#34;,
                         XMLForest(
                           e.employee_id AS &#34;EmployeeId&#34;,
                           e.last_name AS &#34;Name&#34;,
                           e.job_id AS &#34;Job&#34;,
                           e.manager_id AS &#34;Manager&#34;,
                           to_char(e.hire_date,&#39;YYYY-MM-DD&#39;) AS &#34;Hiredate&#34;,
                           e.salary AS &#34;Salary&#34;,
                           e.commission_pct AS &#34;Commission&#34;)))
       FROM employees e
       WHERE e.department_id = d.department_id))
     FROM departments d;
</pre>
<p>This is the <code>XMLType</code> instance that results:</p>
<pre dir="ltr">SELECT OBJECT_VALUE AS result FROM dept_xml WHERE ROWNUM &lt; 2;

RESULT
----------------------------------------------------------------
&lt;Department
    xmlns=&#34;http://www.oracle.com/emp.xsd&#34;
    xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
    xsi:schemaLocation=&#34;http://www.oracle.com/dept.xsd 
                        http://www.oracle.com/dept.xsd&#34;&gt;
  &lt;DeptNo&gt;10&lt;/DeptNo&gt;
  &lt;DeptName&gt;Administration&lt;/DeptName&gt;
  &lt;Location&gt;1700&lt;/Location&gt;
  &lt;Employee&gt;
    &lt;EmployeeId&gt;200&lt;/EmployeeId&gt;
    &lt;Name&gt;Whalen&lt;/Name&gt;
    &lt;Job&gt;AD_ASST&lt;/Job&gt;
    &lt;Manager&gt;101&lt;/Manager&gt;
    &lt;Hiredate&gt;2003-09-17&lt;/Hiredate&gt;
    &lt;Salary&gt;4400&lt;/Salary&gt;
  &lt;/Employee&gt;
&lt;/Department&gt; 
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB5182"></a>
<div class="props_rev_3"><a id="GUID-E50ECA03-3E64-4089-9770-62C98D23DD67"></a>
<h3 id="ADXDB-GUID-E50ECA03-3E64-4089-9770-62C98D23DD67" class="sect3"><span class="enumeration_section">10.4.2</span> Creating XML Schema-Based XMLType Views Using Object Types or Object Views</h3>
<div>
<p>You can create an XML Schema-based <code>XMLType</code> view from object types or views by annotating the XML schema to define a mapping between XML types and SQL object types and object attributes.</p>
<div class="section">
<p>To create an XML Schema-based <code>XMLType</code> view from object types or object views, do the following:</p>
<ol>
<li>
<p>Create the object types, if they do not yet exist.</p>
</li>
<li>
<p>Create and then register the XML schema, annotating it to define the mapping between XML types and SQL object types and attributes.</p>
<p>Annotate the XML schema <span class="italic">before</span> registering it. You typically do this when you wrap existing data to create an <code>XMLType</code> view.</p>
<p>When such an XML schema document is registered, the following validation can occur:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>SQLType</code> for attributes or elements based on <code>simpleType</code>. The SQL type must be compatible with the XML type of the corresponding <code>XMLType</code> data. For example, an XML <code>string</code> data type can be mapped only to a <code>VARCHAR2</code> or a Large Object (LOB) data type.</p>
</li>
<li>
<p><code>SQLType</code> specified for elements based on <code>complexType</code>. This is either a LOB or an object type whose structure must be compatible with the declaration of the <code>complexType</code>, that is, the object type must have the correct number of attributes with the correct data types.</p>
</li>
</ul>
<div class="infobox-note" id="GUID-E50ECA03-3E64-4089-9770-62C98D23DD67__GUID-18348BB7-E100-4DFA-AB28-270521732981">
<p class="notep1">See:</p>
<p><a href="xdb05sto.htm#GUID-C09824C1-6B02-4556-A265-B1749DEE8DE1" title="XML Schema is a standard for describing the content and structure of XML documents. You can register, update, and delete an XML schema used with Oracle XML&nbsp;DB. You can define storage structures to use for your XML schema-based data and map XML Schema data types to SQL data types.">XML Schema Storage and Query: Basic</a></p>
</div>
</li>
<li>
<p>Create the <code>XMLType</code> view, specifying the XML schema URL and the root element name. The query defining the view first constructs the object instances and then converts them to XML.</p>
<ol>
<li>
<p>Create an object view.</p>
</li>
<li>
<p>Create an <code>XMLType</code> view over the object view.</p>
</li>
</ol>
</li>
</ol>
</div>
<!-- class="section" -->
<div class="section">
<p>The following sections present examples of creating XML schema-based <code>XMLType</code> views using object types or object views. They are based on relational tables that contain employee and department data.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb14vie.htm#GUID-205D69F3-0966-4418-A241-A7BBB37C79A4" title="Examples here create XMLType view emp_xml based on object views.">Creating XMLType Employee View_ with Nested Department Information</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb14vie.htm#GUID-6FFDAA7E-8505-4055-A476-6EEEBCF6D79E" title="XMLType view dept_xml is created so that each department in the view contains nested employee information.">Creating XMLType Department View_ with Nested Employee Information</a>&#34;</span></p>
</li>
</ul>
<p>The same relational data is used to create each of two <code>XMLType</code> views. In the employee view, <code>emp_xml</code>, the XML document describes an employee, with the employee&#39;s department as nested information. In the department view, <code>dept_xml</code>, the XML data describes a department, with the department&#39;s employees as nested information.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDB5183"></a>
<div class="props_rev_3"><a id="GUID-205D69F3-0966-4418-A241-A7BBB37C79A4"></a>
<h4 id="ADXDB-GUID-205D69F3-0966-4418-A241-A7BBB37C79A4" class="sect4"><span class="enumeration_section">10.4.2.1</span> Creating XMLType Employee View, with Nested Department Information</h4>
<div>
<p>Examples here create <code>XMLType</code> view <code>emp_xml</code> based on object views.</p>
<div class="section">
<p>For the last step of the view creation, there are two <span class="italic">alternatives</span>:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb14vie.htm#GUID-197D406F-1384-4E86-B778-4F743E741433" title="Create an XMLType view using an object type.">Step 3a. Create XMLType View emp_xml Using Object Type emp_t</a>&#34;</span> &ndash; create <code>XMLType</code> view <code>emp_xml</code> using object type <code>emp_t</code></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb14vie.htm#GUID-EF8A2855-1364-4D6E-9023-7F6358F0A995" title="Create an XMLType view using an object view.">Step 3b. Create XMLType View emp_xml Using Object View emp_v</a>&#34;</span> &ndash; create <code>XMLType</code> view <code>emp_xml</code> using object view <code>emp_v</code></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDB5185"></a><a id="ADXDB5184"></a>
<div class="props_rev_3"><a id="GUID-8B26B5AC-0449-4708-8B61-3A1F003D9922"></a>
<h5 id="ADXDB-GUID-8B26B5AC-0449-4708-8B61-3A1F003D9922" class="sect5"><span class="enumeration_section">10.4.2.1.1</span> Step 1. Create Object Types for XMLType Employee View</h5>
<div>
<p>Create an object type for an XML Schema-based view.</p>
<div class="section">
<p><a href="xdb14vie.htm#GUID-8B26B5AC-0449-4708-8B61-3A1F003D9922__CHDEBBJC">Example 10-9</a> creates the object types used in the other steps.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-8B26B5AC-0449-4708-8B61-3A1F003D9922__CHDEBBJC">
<p class="titleinexample">Example 10-9 Creating Object Types for Schema-Based XMLType Views</p>
<pre dir="ltr">CREATE TYPE dept_t AS OBJECT 
      (deptno NUMBER(4), 
       dname  VARCHAR2(30), 
       loc    NUMBER(4)); 
/ 

CREATE TYPE emp_t AS OBJECT 
      (empno     NUMBER(6), 
       ename     VARCHAR2(25), 
       job       VARCHAR2(10), 
       mgr       NUMBER(6), 
       hiredate  DATE, 
       sal       NUMBER(8,2), 
       comm      NUMBER(2,2), 
       dept      dept_t); 
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5189"></a><a id="ADXDB5186"></a>
<div class="props_rev_3"><a id="GUID-288BB72F-FFD9-453B-BDCA-9A75AA555192"></a>
<h5 id="ADXDB-GUID-288BB72F-FFD9-453B-BDCA-9A75AA555192" class="sect5"><span class="enumeration_section">10.4.2.1.2</span> Step 2. Create and Register XML Schema emp_complex.xsd</h5>
<div>
<p>Create and register an XML schema, <code>emp_complex.xsd</code>. The schema maps XML elements and attributes to corresponding object-relational object attributes.</p>
<div class="section">
<p>Create XML schema <code>emp_complex.xsd</code>, which specifies how XML elements and attributes are mapped to corresponding object attributes in the object types (the <code>xdb:SQLType</code> annotations), then register it. <a href="xdb14vie.htm#GUID-288BB72F-FFD9-453B-BDCA-9A75AA555192__CHDFDHFI">Example 10-10</a> registers it.</p>
<p><a href="xdb14vie.htm#GUID-288BB72F-FFD9-453B-BDCA-9A75AA555192__CHDFDHFI">Example 10-10</a> creates and registers the XML schema using the target location <code>http://www.oracle.com/emp_complex.xsd</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-288BB72F-FFD9-453B-BDCA-9A75AA555192__CHDFDHFI">
<p class="titleinexample">Example 10-10 Creating and Registering XML Schema emp_complex.xsd</p>
<pre dir="ltr">BEGIN
  -- Delete schema if it already exists (else error)
  DBMS_XMLSCHEMA.deleteSchema(&#39;http://www.oracle.com/emp_complex.xsd&#39;, 4);
END;
/

COMMIT;
 
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.oracle.com/emp_complex.xsd&#39;, 
    SCHEMADOC =&gt; &#39;&lt;?xml version=&#34;1.0&#34;?&gt;
                  &lt;xsd:schema xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34; 
                              xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; 
                              xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34; 
                              xsi:schemaLocation=&#34;http://xmlns.oracle.com/xdb 
                                                  http://xmlns.oracle.com/xdb/XDBSchema.xsd&#34;&gt;
                    &lt;xsd:element name=&#34;<span class="bold">Employee</span>&#34; type=&#34;EMP_TType&#34; xdb:SQLType=&#34;EMP_T&#34;/&gt;
                    &lt;xsd:complexType name=&#34;EMP_TType&#34; xdb:SQLType=&#34;<span class="bold">EMP_T</span>&#34; xdb:maintainDOM=&#34;false&#34;&gt;
                      &lt;xsd:sequence&gt;
                        &lt;xsd:element name=&#34;EMPNO&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;EMPNO&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                        &lt;xsd:element name=&#34;ENAME&#34; xdb:SQLName=&#34;ENAME&#34; xdb:SQLType=&#34;VARCHAR2&#34;&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
                              &lt;xsd:maxLength value=&#34;25&#34;/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name=&#34;JOB&#34; xdb:SQLName=&#34;JOB&#34; xdb:SQLType=&#34;VARCHAR2&#34;&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
                              &lt;xsd:maxLength value=&#34;10&#34;/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name=&#34;MGR&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;MGR&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                        &lt;xsd:element name=&#34;HIREDATE&#34; type=&#34;xsd:date&#34; xdb:SQLName=&#34;HIREDATE&#34; 
                                     xdb:SQLType=&#34;DATE&#34;/&gt;
                        &lt;xsd:element name=&#34;SAL&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;SAL&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                        &lt;xsd:element name=&#34;COMM&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;COMM&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                        &lt;xsd:element name=&#34;<span class="bold">DEPT</span>&#34; type=&#34;DEPT_TType&#34; xdb:SQLName=&#34;DEPT&#34;
                                     xdb:SQLType=&#34;DEPT_T&#34;/&gt;
                      &lt;/xsd:sequence&gt;
                    &lt;/xsd:complexType&gt;
                    &lt;xsd:complexType name=&#34;DEPT_TType&#34; xdb:SQLType=&#34;<span class="bold">DEPT_T</span>&#34; 
                                     xdb:maintainDOM=&#34;false&#34;&gt;
                      &lt;xsd:sequence&gt;
                        &lt;xsd:element name=&#34;DEPTNO&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;DEPTNO&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                        &lt;xsd:element name=&#34;DNAME&#34; xdb:SQLName=&#34;DNAME&#34; xdb:SQLType=&#34;VARCHAR2&#34;&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
                              &lt;xsd:maxLength value=&#34;30&#34;/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                       &lt;xsd:element name=&#34;LOC&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;LOC&#34; 
                                    xdb:SQLType=&#34;NUMBER&#34;/&gt;
                      &lt;/xsd:sequence&gt;
                    &lt;/xsd:complexType&gt;
                  &lt;/xsd:schema&gt;&#39;, 
    LOCAL     =&gt; TRUE, 
    GENTYPES  =&gt; FALSE);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5191"></a><a id="ADXDB5190"></a>
<div class="props_rev_3"><a id="GUID-197D406F-1384-4E86-B778-4F743E741433"></a>
<h5 id="ADXDB-GUID-197D406F-1384-4E86-B778-4F743E741433" class="sect5"><span class="enumeration_section">10.4.2.1.3</span> Step 3a. Create XMLType View emp_xml Using Object Type emp_t</h5>
<div>
<p>Create an <code>XMLType</code> view using an object type.</p>
<div class="section">
<p><a href="xdb14vie.htm#GUID-197D406F-1384-4E86-B778-4F743E741433__CHDJAGIC">Example 10-11</a> creates an <code>XMLType</code> view using object type <code>emp_t</code>.</p>
<p><a href="xdb14vie.htm#GUID-197D406F-1384-4E86-B778-4F743E741433__CHDJAGIC">Example 10-11</a> uses SQL/XML function <code>XMLCast</code> in the <code>OBJECT ID</code> clause to convert the XML employee number to SQL data type <code>BINARY_DOUBLE</code>.</p>
<div class="infoboxnotealso" id="GUID-197D406F-1384-4E86-B778-4F743E741433__GUID-37726CAE-DA92-4A28-BA09-8DF6A2FC61BF">
<p class="notep1">See Also:</p>
<p><a href="xdb14vie.htm#GUID-EF8A2855-1364-4D6E-9023-7F6358F0A995" title="Create an XMLType view using an object view.">Step 3b. Create XMLType View emp_xml Using Object View emp_v</a> for an alternative way to create view <code>emp_xml</code>, which uses object view <code>emp_v</code></p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-197D406F-1384-4E86-B778-4F743E741433__CHDJAGIC">
<p class="titleinexample">Example 10-11 Creating XMLType View emp_xml Using Object Type emp_t</p>
<pre dir="ltr">CREATE OR REPLACE VIEW <span class="bold">emp_xml</span> OF XMLType 
  XMLSCHEMA &#34;http://www.oracle.com/emp_complex.xsd&#34;
  ELEMENT &#34;Employee&#34; 
    WITH OBJECT ID (XMLCast(XMLQuery(&#39;/Employee/EMPNO&#39;
                                     PASSING OBJECT_VALUE RETURNING CONTENT)
                            AS BINARY_DOUBLE)) AS 
  SELECT <span class="bold">emp_t</span>(e.employee_id, e.last_name, e.job_id, e.manager_id, e.hire_date, 
               e.salary, e.commission_pct,
               dept_t(d.department_id, d.department_name, d.location_id)) 
    FROM employees e, departments d 
    WHERE e.department_id = d.department_id;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5193"></a><a id="ADXDB5192"></a>
<div class="props_rev_3"><a id="GUID-EF8A2855-1364-4D6E-9023-7F6358F0A995"></a>
<h5 id="ADXDB-GUID-EF8A2855-1364-4D6E-9023-7F6358F0A995" class="sect5"><span class="enumeration_section">10.4.2.1.4</span> Step 3b. Create XMLType View emp_xml Using Object View emp_v</h5>
<div>
<p>Create an <code>XMLType</code> view using an object view.</p>
<div class="section">
<p><a href="xdb14vie.htm#GUID-EF8A2855-1364-4D6E-9023-7F6358F0A995__CHDEAFJH">Example 10-12</a> creates object view <code>emp_v</code> and then creates <code>XMLType</code> view <code>emp_xml</code> based on that object view.</p>
<div class="infoboxnotealso" id="GUID-EF8A2855-1364-4D6E-9023-7F6358F0A995__GUID-5C90308D-690D-4D23-BFF2-9D388BA4F0E2">
<p class="notep1">See Also:</p>
<p><a href="xdb14vie.htm#GUID-197D406F-1384-4E86-B778-4F743E741433" title="Create an XMLType view using an object type.">Step 3a. Create XMLType View emp_xml Using Object Type emp_t</a> for an alternative way to create view <code>emp_xml</code>, which uses object type <code>emp_t</code></p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-EF8A2855-1364-4D6E-9023-7F6358F0A995__CHDEAFJH">
<p class="titleinexample">Example 10-12 Creating an Object View and an XMLType View Based on the Object View</p>
<pre dir="ltr">CREATE OR REPLACE VIEW <span class="bold">emp_v</span> OF <span class="bold">emp_t</span> WITH OBJECT ID (empno) AS 
  SELECT <span class="bold">emp_t</span>(e.employee_id, e.last_name, e.job_id, e.manager_id, e.hire_date,
               e.salary, e.commission_pct,
               dept_t(d.department_id, d.department_name, d.location_id)) 
    FROM employees e, departments d 
    WHERE e.department_id = d.department_id;
 
CREATE OR REPLACE VIEW <span class="bold">emp_xml</span> OF XMLType 
  XMLSCHEMA &#34;http://www.oracle.com/emp_complex.xsd&#34; ELEMENT &#34;Employee&#34;
  WITH OBJECT ID DEFAULT AS
  SELECT VALUE(p) FROM <span class="bold">emp_v</span> p;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB5194"></a>
<div class="props_rev_3"><a id="GUID-6FFDAA7E-8505-4055-A476-6EEEBCF6D79E"></a>
<h4 id="ADXDB-GUID-6FFDAA7E-8505-4055-A476-6EEEBCF6D79E" class="sect4"><span class="enumeration_section">10.4.2.2</span> Creating XMLType Department View, with Nested Employee Information</h4>
<div>
<p><code>XMLType</code> view <code>dept_xml</code> is created so that each department in the view contains nested employee information.</p>
<div class="section">
<p>For the last step of the view creation, there are two <span class="italic">alternatives</span>:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb14vie.htm#GUID-B30BAAA4-A9B0-4C74-96C7-89FCD44F7AA0" title="Create XMLType view dept_xml using object type dept_t.">Step 3a. Create XMLType View dept_xml Using Object Type dept_t</a>&#34;</span> &ndash; create <code>XMLType</code> view <code>dept_xml</code> using the object type for a department, <code>dept_t</code></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb14vie.htm#GUID-50B49D70-F4A9-4C25-BABC-E0FBBB5F6FEF" title="You can use SQL/XML publishing functions to create XMLType view dept_xml from the relational tables without using object type dept_t.">Step 3b. Create XMLType View dept_xml Using Relational Data Directly</a>&#34;</span> &ndash; create <code>XMLType</code> view <code>dept_xml</code> using relational data directly</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDB5196"></a><a id="ADXDB5195"></a>
<div class="props_rev_3"><a id="GUID-055D62F0-797F-44DE-ADAE-AD3AEF5F4F6C"></a>
<h5 id="ADXDB-GUID-055D62F0-797F-44DE-ADAE-AD3AEF5F4F6C" class="sect5"><span class="enumeration_section">10.4.2.2.1</span> Step 1. Create Object Types for XMLType Department View</h5>
<div>
<p>Create an object type for an XML Schema-based view.</p>
<div class="section">
<p><a href="xdb14vie.htm#GUID-055D62F0-797F-44DE-ADAE-AD3AEF5F4F6C__CHDFHJCJ">Example 10-13</a> creates the object types used in the other steps.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-055D62F0-797F-44DE-ADAE-AD3AEF5F4F6C__CHDFHJCJ">
<p class="titleinexample">Example 10-13 Creating Object Types</p>
<pre dir="ltr">CREATE TYPE emp_t AS OBJECT (empno    NUMBER(6),
                             ename    VARCHAR2(25), 
                             job      VARCHAR2(10), 
                             mgr      NUMBER(6), 
                             hiredate DATE, 
                             sal      NUMBER(8,2), 
                             comm     NUMBER(2,2)); /

CREATE OR REPLACE TYPE emplist_t AS TABLE OF emp_t; 
/

CREATE TYPE dept_t AS OBJECT (deptno NUMBER(4),
                              dname  VARCHAR2(30), 
                              loc    NUMBER(4),
                              emps   emplist_t); 
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5198"></a><a id="ADXDB5197"></a>
<div class="props_rev_3"><a id="GUID-A55D6F10-D953-44C6-8D71-3EDF99CAD0D3"></a>
<h5 id="ADXDB-GUID-A55D6F10-D953-44C6-8D71-3EDF99CAD0D3" class="sect5"><span class="enumeration_section">10.4.2.2.2</span> Step 2. Register XML Schema dept_complex.xsd</h5>
<div>
<p>Register XML schema <code>dept_complex.xsd</code>.</p>
<div class="section">
<p><a href="xdb14vie.htm#GUID-A55D6F10-D953-44C6-8D71-3EDF99CAD0D3__CHDJDCGF">Example 10-14</a> illustrates this.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-A55D6F10-D953-44C6-8D71-3EDF99CAD0D3__CHDJDCGF">
<p class="titleinexample">Example 10-14 Registering XML Schema dept_complex.xsd</p>
<pre dir="ltr">BEGIN
  -- Delete schema if it already exists (else error)
  DBMS_XMLSCHEMA.deleteSchema(&#39;http://www.oracle.com/dept_complex.xsd&#39;, 4);
END;
/

BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.oracle.com/dept_complex.xsd&#39;,
    SCHEMADOC =&gt; &#39;&lt;?xml version=&#34;1.0&#34;?&gt;
                  &lt;xsd:schema xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34; 
                              xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; 
                              xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;            
                              xsi:schemaLocation=&#34;http://xmlns.oracle.com/xdb 
                                                  http://xmlns.oracle.com/xdb/XDBSchema.xsd&#34;&gt;
                    &lt;xsd:element name=&#34;<span class="bold">Department</span>&#34; type=&#34;DEPT_TType&#34; xdb:SQLType=&#34;<span class="bold">DEPT_T</span>&#34;/&gt;
                    &lt;xsd:complexType name=&#34;DEPT_TType&#34; xdb:SQLType=&#34;<span class="bold">DEPT_T</span>&#34; 
                                     xdb:maintainDOM=&#34;false&#34;&gt;
                      &lt;xsd:sequence&gt;
                        &lt;xsd:element name=&#34;DEPTNO&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;DEPTNO&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                        &lt;xsd:element name=&#34;DNAME&#34; xdb:SQLName=&#34;DNAME&#34; xdb:SQLType=&#34;VARCHAR2&#34;&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
                              &lt;xsd:maxLength value=&#34;30&#34;/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name=&#34;LOC&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;LOC&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                        &lt;xsd:element name=&#34;<span class="bold">EMPS</span>&#34; type=&#34;EMP_TType&#34; maxOccurs=&#34;unbounded&#34; 
                                     minOccurs=&#34;0&#34; xdb:SQLName=&#34;EMPS&#34; 
                                     xdb:SQLCollType=&#34;EMPLIST_T&#34; xdb:SQLType=&#34;<span class="bold">EMP_T</span>&#34;  
                                     xdb:SQLCollSchema=&#34;HR&#34;/&gt;
                      &lt;/xsd:sequence&gt;
                    &lt;/xsd:complexType&gt;
                    &lt;xsd:complexType name=&#34;EMP_TType&#34; xdb:SQLType=&#34;<span class="bold">EMP_T</span>&#34; xdb:maintainDOM=&#34;false&#34;&gt;
                      &lt;xsd:sequence&gt;
                        &lt;xsd:element name=&#34;EMPNO&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;EMPNO&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                        &lt;xsd:element name=&#34;ENAME&#34; xdb:SQLName=&#34;ENAME&#34; xdb:SQLType=&#34;VARCHAR2&#34;&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
                              &lt;xsd:maxLength value=&#34;25&#34;/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name=&#34;JOB&#34; xdb:SQLName=&#34;JOB&#34; xdb:SQLType=&#34;VARCHAR2&#34;&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
                              &lt;xsd:maxLength value=&#34;10&#34;/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name=&#34;MGR&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;MGR&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                        &lt;xsd:element name=&#34;HIREDATE&#34; type=&#34;xsd:date&#34; xdb:SQLName=&#34;HIREDATE&#34; 
                                     xdb:SQLType=&#34;DATE&#34;/&gt;
                        &lt;xsd:element name=&#34;SAL&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;SAL&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                        &lt;xsd:element name=&#34;COMM&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;COMM&#34;   
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                      &lt;/xsd:sequence&gt;
                    &lt;/xsd:complexType&gt;
                  &lt;/xsd:schema&gt;&#39;, 
    LOCAL     =&gt; TRUE, 
    GENTYPES  =&gt; FALSE);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5200"></a><a id="ADXDB5199"></a>
<div class="props_rev_3"><a id="GUID-B30BAAA4-A9B0-4C74-96C7-89FCD44F7AA0"></a>
<h5 id="ADXDB-GUID-B30BAAA4-A9B0-4C74-96C7-89FCD44F7AA0" class="sect5"><span class="enumeration_section">10.4.2.2.3</span> Step 3a. Create XMLType View dept_xml Using Object Type dept_t</h5>
<div>
<p>Create <code>XMLType</code> view <code>dept_xml</code> using object type <code>dept_t</code>.</p>
<div class="section">
<p><a href="xdb14vie.htm#GUID-B30BAAA4-A9B0-4C74-96C7-89FCD44F7AA0__CHDBHBCH">Example 10-15</a> illustrates this.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-B30BAAA4-A9B0-4C74-96C7-89FCD44F7AA0__CHDBHBCH">
<p class="titleinexample">Example 10-15 Creating XMLType View dept_xml Using Object Type dept_t</p>
<pre dir="ltr">CREATE OR REPLACE VIEW dept_xml OF XMLType
  XMLSCHEMA &#34;http://www.oracle.com/dept_complex.xsd&#34; ELEMENT &#34;Department&#34;
  WITH OBJECT ID (XMLCast(XMLQuery(&#39;/Department/DEPTNO&#39;
                                   PASSING OBJECT_VALUE RETURNING CONTENT)
                          AS BINARY_DOUBLE)) AS
  SELECT <span class="bold">dept_t</span>(d.department_id, d.department_name, d.location_id,
                cast(MULTISET
                     (SELECT emp_t(e.employee_id, e.last_name, e.job_id,
                                   e.manager_id, e.hire_date,
                                   e.salary, e.commission_pct) 
                        FROM employees e WHERE e.department_id = d.department_id) 
                     AS emplist_t))
    FROM departments d;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5202"></a><a id="ADXDB5201"></a>
<div class="props_rev_3"><a id="GUID-50B49D70-F4A9-4C25-BABC-E0FBBB5F6FEF"></a>
<h5 id="ADXDB-GUID-50B49D70-F4A9-4C25-BABC-E0FBBB5F6FEF" class="sect5"><span class="enumeration_section">10.4.2.2.4</span> Step 3b. Create XMLType View dept_xml Using Relational Data Directly</h5>
<div>
<p>You can use SQL/XML publishing functions to create <code>XMLType</code> view <code>dept_xml</code> from the relational tables without using object type <code>dept_t</code>.</p>
<div class="section">
<p><a href="xdb14vie.htm#GUID-50B49D70-F4A9-4C25-BABC-E0FBBB5F6FEF__CHDEHIFF">Example 10-16</a> illustrates this.</p>
<div class="infobox-note" id="GUID-50B49D70-F4A9-4C25-BABC-E0FBBB5F6FEF__GUID-2E06B65F-12C2-4D27-9A94-E43164A83C40">
<p class="notep1">Note:</p>
<p>XML schema and element information must be specified at the view level, because the <code>SELECT</code> list could arbitrarily construct XML of a different XML schema from the underlying table.</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-50B49D70-F4A9-4C25-BABC-E0FBBB5F6FEF__CHDEHIFF">
<p class="titleinexample">Example 10-16 Creating XMLType View dept_xml Using Relational Data Directly</p>
<pre dir="ltr">CREATE OR REPLACE VIEW dept_xml OF XMLType
  XMLSCHEMA &#34;http://www.oracle.com/dept_complex.xsd&#34; ELEMENT &#34;Department&#34;
  WITH OBJECT ID (XMLCast(XMLQuery(&#39;/Department/DEPTNO&#39;
                                   PASSING OBJECT_VALUE RETURNING CONTENT)
                          AS BINARY_DOUBLE)) AS
  SELECT  
    XMLElement(
      &#34;Department&#34;,
      XMLAttributes(&#39;http://www.oracle.com/dept_complex.xsd&#39; AS &#34;xmlns&#34;,        
                    &#39;http://www.w3.org/2001/XMLSchema-instance&#39; AS &#34;xmlns:xsi&#34;,
                    &#39;http://www.oracle.com/dept_complex.xsd 
                     http://www.oracle.com/dept_complex.xsd&#39; 
                      AS &#34;xsi:schemaLocation&#34;),
      XMLForest(d.department_id &#34;DeptNo&#34;, d.department_name &#34;DeptName&#34;,
                d.location_id &#34;Location&#34;),
      (SELECT XMLAgg(XMLElement(&#34;Employee&#34;,
                                XMLForest(e.employee_id &#34;EmployeeId&#34;, 
                                          e.last_name &#34;Name&#34;, 
                                          e.job_id &#34;Job&#34;, 
                                          e.manager_id &#34;Manager&#34;, 
                                          e.hire_date &#34;Hiredate&#34;,
                                          e.salary &#34;Salary&#34;,
                                          e.commission_pct &#34;Commission&#34;)))
                      FROM employees e WHERE e.department_id = d.department_id))
    FROM departments d;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
</div>
<a id="ADXDB5204"></a><a id="ADXDB5205"></a><a id="ADXDB5203"></a>
<div class="props_rev_3"><a id="GUID-5191DBB9-EEA9-402C-BAD2-28AB6894E63D"></a>
<h2 id="ADXDB-GUID-5191DBB9-EEA9-402C-BAD2-28AB6894E63D" class="sect2"><span class="enumeration_section">10.5</span> Creating XMLType Views from XMLType Tables</h2>
<div>
<p>An <code>XMLType</code> view can be created on an <code>XMLType</code> table, for example, to transform the XML data or to restrict the rows returned.</p>
<div class="section">
<p><a href="xdb14vie.htm#GUID-5191DBB9-EEA9-402C-BAD2-28AB6894E63D__CFHJBHJI">Example 10-17</a> creates an <code>XMLType</code> view by restricting the rows included from an underlying <code>XMLType</code> table. It uses XML schema <code>dept_complex.xsd</code> to create the underlying table&thinsp;&mdash;&thinsp;see <span class="q">&#34;<a href="xdb14vie.htm#GUID-6FFDAA7E-8505-4055-A476-6EEEBCF6D79E" title="XMLType view dept_xml is created so that each department in the view contains nested employee information.">Creating XMLType Department View_ with Nested Employee Information</a>&#34;</span>.</p>
<p><a href="xdb14vie.htm#GUID-5191DBB9-EEA9-402C-BAD2-28AB6894E63D__CHDIIIAG">Example 10-18</a> shows how you can create an <code>XMLType</code> view by transforming XML data using an XSL stylesheet.</p>
<div class="infoboxnotealso" id="GUID-5191DBB9-EEA9-402C-BAD2-28AB6894E63D__GUID-FFB1E516-3E76-437B-8A3E-D6BA96F242FF">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb08tra.htm#GUID-9E65513C-C113-4EA1-8511-462AC3EEE2D8" title="SQL function XMLtransform transforms an XML document by using an XSLT stylesheet. It returns the processed output as XML, HTML, and so on, as specified by the stylesheet.">SQL Function XMLTRANSFORM and XMLType Method TRANSFORM()</a>&#34;</span></p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-5191DBB9-EEA9-402C-BAD2-28AB6894E63D__CFHJBHJI">
<p class="titleinexample">Example 10-17 Creating an XMLType View by Restricting Rows from an XMLType Table</p>
<pre dir="ltr">CREATE TABLE dept_xml_tab OF XMLType 
    XMLSchema &#34;http://www.oracle.com/dept_complex.xsd&#34; ELEMENT &#34;Department&#34;
    NESTED TABLE XMLDATA.&#34;EMPS&#34; STORE AS dept_xml_tab_tab1;
 
CREATE OR REPLACE VIEW dallas_dept_view OF XMLType 
    XMLSchema &#34;http://www.oracle.com/dept.xsd&#34; ELEMENT &#34;Department&#34;
        AS SELECT OBJECT_VALUE FROM dept_xml_tab 
           WHERE XMLCast(XMLQuery(&#39;/Department/LOC&#39;
                                  PASSING OBJECT_VALUE RETURNING CONTENT)
                         AS VARCHAR2(20))
                 = &#39;DALLAS&#39;; 
</pre>
<p>Here, <code>dallas_dept_view</code> restricts the <code>XMLType</code> table rows to those departments whose location is Dallas.</p>
</div>
<!-- class="example" -->
<div class="example" id="GUID-5191DBB9-EEA9-402C-BAD2-28AB6894E63D__CHDIIIAG">
<p class="titleinexample">Example 10-18 Creating an XMLType View by Transforming an XMLType Table</p>
<pre dir="ltr">CREATE OR REPLACE VIEW hr_po_tab OF XMLType 
  ELEMENT &#34;PurchaseOrder&#34; WITH OBJECT ID DEFAULT AS
  SELECT XMLtransform(OBJECT_VALUE, x.col1)
    FROM purchaseorder p, xsl_tab x;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5206"></a>
<div class="props_rev_3"><a id="GUID-72A94695-5890-4BA1-8FD1-6D26E1C4349B"></a>
<h2 id="ADXDB-GUID-72A94695-5890-4BA1-8FD1-6D26E1C4349B" class="sect2"><span class="enumeration_section">10.6</span> Referencing XMLType View Objects Using SQL Function REF</h2>
<div>
<p>You can reference an <code>XMLType</code> view object using SQL function <code>ref</code>.</p>
<div class="section">
<pre dir="ltr">SELECT ref(d) FROM dept_xml_tab d;
</pre>
<p>An <code>XMLType</code> view reference is based on one of the following object IDs:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>System-generated OID &mdash; for views on <code>XMLType</code> tables or object views</p>
</li>
<li>
<p>Primary key based OID -- for views with <code>OBJECT ID</code> expressions</p>
</li>
</ul>
<p>These <code>REF</code>s can be used to fetch <code>OCIXMLType</code> instances in the OCI Object cache, or they can be used in SQL queries. These <code>REF</code>s act the same as <code>REF</code>s to object views.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDB5208"></a><a id="ADXDB5207"></a>
<div class="props_rev_3"><a id="GUID-FF5B6A10-191B-45E0-810F-A7F0CFF71711"></a>
<h2 id="ADXDB-GUID-FF5B6A10-191B-45E0-810F-A7F0CFF71711" class="sect2"><span class="enumeration_section">10.7</span> Using DML (Data Manipulation Language) on XMLType Views</h2>
<div>
<p>A given <code>XMLType</code> view might not be implicitly updatable. In that case, you must write instead-of triggers to handle all DML. To determine whether an <code>XMLType</code> view is implicitly updatable, query it to see whether it is based on an object view or constructor that is itself inherently updatable.</p>
<div class="section">
<p><a href="xdb14vie.htm#GUID-FF5B6A10-191B-45E0-810F-A7F0CFF71711__CFHBIHCF">Example 10-19</a> illustrates this.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-FF5B6A10-191B-45E0-810F-A7F0CFF71711__CFHBIHCF">
<p class="titleinexample">Example 10-19 Determining Whether an XMLType View Is Implicitly Updatable, and Updating It</p>
<pre dir="ltr">CREATE TYPE dept_t AS OBJECT 
      (deptno NUMBER(4), 
       dname  VARCHAR2(30), 
       loc    NUMBER(4)); 
/

BEGIN
  -- Delete schema if it already exists (else error)
  DBMS_XMLSCHEMA.deleteSchema(&#39;http://www.oracle.com/dept_t.xsd&#39;, 4);
END;
/
COMMIT;
 
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.oracle.com/dept_t.xsd&#39;,
    SCHEMADOC =&gt; &#39;&lt;?xml version=&#34;1.0&#34;?&gt;
                  &lt;xsd:schema xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34; 
                              xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; 
                              xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34; 
                              xsi:schemaLocation=&#34;http://xmlns.oracle.com/xdb 
                                                  http://xmlns.oracle.com/xdb/XDBSchema.xsd&#34;&gt;
                    &lt;xsd:element name=&#34;Department&#34; type=&#34;DEPT_TType&#34; xdb:SQLType=&#34;DEPT_T&#34;/&gt;
                    &lt;xsd:complexType name=&#34;DEPT_TType&#34; xdb:SQLType=&#34;DEPT_T&#34;
                                     xdb:maintainDOM=&#34;false&#34;&gt;
                      &lt;xsd:sequence&gt;
                        &lt;xsd:element name=&#34;DEPTNO&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;DEPTNO&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                        &lt;xsd:element name=&#34;DNAME&#34; xdb:SQLName=&#34;DNAME&#34; xdb:SQLType=&#34;VARCHAR2&#34;&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
                              &lt;xsd:maxLength value=&#34;30&#34;/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name=&#34;LOC&#34; type=&#34;xsd:double&#34; xdb:SQLName=&#34;LOC&#34; 
                                     xdb:SQLType=&#34;NUMBER&#34;/&gt;
                      &lt;/xsd:sequence&gt;
                    &lt;/xsd:complexType&gt;
                  &lt;/xsd:schema&gt;&#39;, 
    LOCAL     =&gt; TRUE, 
    GENTYPES  =&gt; FALSE);
END;
/

CREATE OR REPLACE VIEW dept_xml of XMLType
  XMLSchema &#34;http://www.oracle.com/dept_t.xsd&#34; element &#34;Department&#34;
  WITH OBJECT ID (XMLCast(XMLQuery(&#39;/Department/DEPTNO&#39;
                                   PASSING OBJECT_VALUE RETURNING CONTENT)
                          AS BINARY_DOUBLE)) AS
  SELECT dept_t(d.department_id, d.department_name, d.location_id) 
    FROM departments d;

INSERT INTO dept_xml 
  VALUES (
    XMLType.createXML(
      &#39;&lt;Department 
         xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; 
         xsi:noNamespaceSchemaLocation=&#34;http://www.oracle.com/dept_t.xsd&#34; &gt;
         &lt;DEPTNO&gt;300&lt;/DEPTNO&gt;
         &lt;DNAME&gt;Processing&lt;/DNAME&gt;
         &lt;LOC&gt;1700&lt;/LOC&gt;
       &lt;/Department&gt;&#39;));

UPDATE dept_xml d
  SET d.OBJECT_VALUE =
    XMLQuery(&#39;copy $i := $p1 modify
                (for $j in $i/Department/DNAME
                 return replace value of node $j with $p2)
              return $i&#39;
             PASSING d.OBJECT_VALUE AS &#34;p1&#34;, &#39;Shipping&#39; AS &#34;p2&#34; RETURNING CONTENT)
    WHERE XMLExists(&#39;/Department[DEPTNO=300]&#39; PASSING OBJECT_VALUE);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3410">
<tr>
<td class="cellalignment3417">
<table class="cellalignment3415">
<tr>
<td class="cellalignment3414"><a href="xdb_rel_views.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3414"><a href="partpg3.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3419">
<table class="cellalignment3413">
<tr>
<td class="cellalignment3414"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3414"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3414"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3414"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3414"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>