<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1471"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Full-Text%20Search%20over%20XML%20Data%20Without%20XQuery"></a><title>Full-Text Search over XML Data Without XQuery</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="Oracle-specific full-text search over XML data is described, including how to use Oracle SQL function contains and Oracle XPath function ora:contains."/>
<meta name="keywords" content="Oracle Text, index, indexing, Oracle Text, preference, Oracle Text indexing, definition, CTXCAT index, CTXCAT, ora:contains Oracle XPath function, XPath language, functions, ora:contains (Oracle), XQuery language, contains XPath function (Oracle), policy for ora:contains XPath function (Oracle), policy, ra:use_text_index Oracle XQuery pragma, XQuery, pragmas, Oracle, ora:use_text_index, purchase-order XML document, used in full-text examples"/>
<meta name="dcterms.created" content="2016-12-08T13:53:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E41152-15"/>
<meta name="dcterms.isVersionOf" content="ADXDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="app_depr_transl.htm" title="Previous" type="text/html"/>
<link rel="Next" href="index.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41152-15.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-1B838D2B-DD94-480A-8D3D-53E0204A2282"></a> <span id="PAGE" style="display:none;">60/61</span> <!-- End Header -->
<a id="ADXDB1000"></a>
<h1 id="ADXDB-GUID-1B838D2B-DD94-480A-8D3D-53E0204A2282" class="sect1"><span class="enumeration_chapter">E</span> Full-Text Search over XML Data Without XQuery</h1>
<div>
<p>Oracle-specific full-text search over XML data is described, including how to use Oracle SQL function <code>contains</code> and Oracle XPath function <code>ora:contains</code>.</p>
<p>You can use these Oracle-specific functions to perform full-text search over XML data, but if your <code>XMLType</code> data is stored as binary XML then Oracle recommends that you instead use the full-text capabilities of XQuery. The XQuery and XPath Full Text standard is supported by Oracle XML&nbsp;DB, starting with Oracle Database&nbsp;12c Release 1 (12.1.0.1).</p>
<div class="infoboxnotealso" id="GUID-1B838D2B-DD94-480A-8D3D-53E0204A2282__GUID-F9A99D33-728B-4A3D-A018-31983D8CE536">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb_xquery.htm#GUID-4F83A835-C94B-4D62-999B-111AB5E8A8F1" title="The XQuery language is one of the main ways that you interact with XML data in Oracle XML&nbsp;DB. Support for the language includes SQL*Plus commandXQUERY and SQL/XML functions XMLQuery, XMLTable, XMLExists, and XMLCast.">XQuery and Oracle XML&nbsp;DB</a></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb_indexing.htm#GUID-FAB7C619-902A-40CF-98B7-6D358E1AD49C" title="When you need full-text search over XML data, Oracle recommends that you store your XMLType data as binary XML and you use XQuery Full Text (XQFT). You use an XML search index for this. This is the topic of this section.">Indexing XML Data for Full-Text Queries</a>&#34;</span></p>
</li>
<li>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> and <a class="olink CCAPP" target="_blank" href="../CCAPP/toc.htm"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a> for more information about Oracle Text</p>
</li>
</ul>
</div>
<ul style="list-style-type: disc;">
<li>
<p><a href="app_depr_otext.htm#GUID-DDA1B84C-31CC-4040-AEDC-94CF7AE15C1A" title="You can use the structure of an XML document to restrict full-text search. For example, you can restrict a search by finding all XML purchase orders that contain the word &#34;electric&#34; in a comment, or by finding all that contain the word &#34;electric&#34; in a comment under a line item.">Overview of Oracle-Specific Full-Text Search over XML Data</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-05361518-C913-4A48-8F7D-7EAD9B9B1216" title="Details about the full-text search examples are described.">About the Full-Text Search Examples</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-214A95BF-1F00-40BF-A7B1-C8E517168250" title="SQL function CONTAINS and XPath function ora:contains can both be used for full-text searching.">Overview of SQL Function CONTAINS and XPath Function ora:contains</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-564306B8-416C-4C3B-90C6-2E2AB9304712" title="Full-text search using Oracle SQL function contains is described.">SQL Function CONTAINS</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-BD718D3E-920A-4C81-ADDF-C3C799A78DC5" title="Function ora:contains is an Oracle-defined XQuery (XPath) function for use in the XQuery expression argument to SQL/XML functions XMLQuery, XMLTable, and XMLExists. Function ora:contains always returns a number. It does not return a score. It returns a positive number if the text_query matches the input_text. Otherwise it returns zero.">ora:contains XQuery Function</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-D909ACF2-7941-4924-9126-DE6D7A3F8454" title="The complete BNF specification for Text Path is presented.">Text Path BNF Specification</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-533AF1E1-189D-4C60-BCE9-227AFE7D71AA" title="Code support is presented for the examples that illustrate full-text search over XML data without XQuery.">Support for Full-Text XML Examples</a></p>
</li>
</ul>
</div>
<a id="ADXDB4745"></a>
<div class="props_rev_3"><a id="GUID-DDA1B84C-31CC-4040-AEDC-94CF7AE15C1A"></a>
<h2 id="ADXDB-GUID-DDA1B84C-31CC-4040-AEDC-94CF7AE15C1A" class="sect2"><span class="enumeration_section">E.1</span> Overview of Oracle-Specific Full-Text Search over XML Data</h2>
<div>
<p>You can use the structure of an XML document to restrict full-text search. For example, you can restrict a search by finding all XML purchase orders that contain the word &#34;electric&#34; in a comment, or by finding all that contain the word &#34;electric&#34; in a comment under a line item.</p>
<p>If your XML documents are of type <code>XMLType</code>, then you can project the results of your query using the XML structure of the document. For example, after finding all purchase orders that contain the word &#34;electric&#34; in a comment, you might want to return only the comments, or just the comments that contain the word &#34;electric&#34;.</p>
</div>
<a id="ADXDB4746"></a>
<div class="props_rev_3"><a id="GUID-60DF55CE-7DE1-4CB9-9930-67F71D077205"></a>
<h3 id="ADXDB-GUID-60DF55CE-7DE1-4CB9-9930-67F71D077205" class="sect3"><span class="enumeration_section">E.1.1</span> Comparison of Full-Text Search and Other Search Types</h3>
<div>
<p>Full-text search differs from structured search or substring search in various ways.</p>
<ul style="list-style-type: disc;">
<li>
<p>A full-text search looks for whole <span class="italic">words</span> rather than substrings. A substring search for comments that contain the <span class="italic">string</span> &#34;law&#34; can return a comment that contains &#34;my <span class="italic">law</span>n is going wild&#34;. A full-text search for the <span class="italic">word</span> &#34;law&#34; cannot.</p>
</li>
<li>
<p>A full-text search supports some language-based and word-based searches that substring searches do not. You can use a language-based search, for example, to find all the comments that contain a word with the same linguistic stem as &#34;mouse&#34;, and Oracle Text finds &#34;mouse&#34; and &#34;mice&#34;. You can use a word-based search, for example, to find all the comments that contain the word &#34;lawn&#34; within 5 words of &#34;wild&#34;.</p>
</li>
<li>
<p>A full-text search generally involves some notion of relevance. When you do a full-text search for all the comments that contain the word &#34;lawn&#34;, for example, some results are more relevant than others. Relevance is often related to the number of times the search word (or similar words) occur in the document.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDB4747"></a>
<div class="props_rev_3"><a id="GUID-36F3E072-A8C5-48F5-AC26-544AC20FB20C"></a>
<h3 id="ADXDB-GUID-36F3E072-A8C5-48F5-AC26-544AC20FB20C" class="sect3"><span class="enumeration_section">E.1.2</span> Search of XML Data</h3>
<div>
<p>In unstructured document search, you generally search across a set of documents to return those that satisfy your text predicate. In XML search, you often want to use document structure to restrict the search. And you often want to return only the part of the document that satisfies the search.</p>
</div>
</div>
<a id="ADXDB4748"></a>
<div class="props_rev_3"><a id="GUID-791092F9-E58D-443E-B562-68005DC8CCBF"></a>
<h3 id="ADXDB-GUID-791092F9-E58D-443E-B562-68005DC8CCBF" class="sect3"><span class="enumeration_section">E.1.3</span> Searching Documents Using Full-Text Search and XML Structure</h3>
<div>
<p>There are two ways to do a search that includes full-text search and XML structure: include the structure inside the full-text predicate, or include the full-text predicate inside the structure.</p>
<ul style="list-style-type: disc;">
<li>
<p>Include the structure inside the full-text predicate, using Oracle SQL function <code>contains</code>:</p>
<pre dir="ltr">WHERE contains(doc, &#39;electric INPATH (/purchaseOrder/items/item/comment)&#39;) &gt; 0
</pre>
<p>Function <code>contains</code> is an extension to SQL, and can be used in any query. It requires a <code>CONTEXT</code> full-text index.</p>
</li>
<li>
<p>Include the full-text predicate inside the structure, using XPath function <code>ora:contains</code>:</p>
<pre dir="ltr">&#39;/purchaseOrder/items/item/comment[ora:contains(text(), &#34;electric&#34;)&gt;0]&#39;
</pre>
<p>XPath function <code>ora:contains</code> is an extension to XPath, and can be used in a call to SQL/XML function <code>XMLQuery</code>, <code>XMLTable</code>, or <code>XMLExists</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDB4749"></a>
<div class="props_rev_3"><a id="GUID-05361518-C913-4A48-8F7D-7EAD9B9B1216"></a>
<h2 id="ADXDB-GUID-05361518-C913-4A48-8F7D-7EAD9B9B1216" class="sect2"><span class="enumeration_section">E.2</span> About the Full-Text Search Examples</h2>
<div>
<p>Details about the full-text search examples are described.</p>
</div>
<a id="ADXDB4750"></a>
<div class="props_rev_3"><a id="GUID-DC129E95-C31F-4CCD-8754-85E65DF59E2D"></a>
<h3 id="ADXDB-GUID-DC129E95-C31F-4CCD-8754-85E65DF59E2D" class="sect3"><span class="enumeration_section">E.2.1</span> Roles and Privileges Needed for Full-Text Examples</h3>
<div>
<p>To run the full-text search examples, you need database roles <code>CTXAPP</code>, <code>CONNECT</code>, and <code>RESOURCE</code>. You must also have <code>EXECUTE</code> privilege on the <code>CTXSYS</code> package <code>CTX_DDL</code>.</p>
</div>
</div>
<a id="ADXDB4751"></a>
<div class="props_rev_3"><a id="GUID-D5BF6AF3-64EB-4FC0-8C6F-9B0A71FD04F7"></a>
<h3 id="ADXDB-GUID-D5BF6AF3-64EB-4FC0-8C6F-9B0A71FD04F7" class="sect3"><span class="enumeration_section">E.2.2</span> Schema and Data for Full-Text Search Examples</h3>
<div>
<p>The full-text search examples are based on &#34;The Purchase Order Schema&#34;, W3C XML Schema Part 0: Primer.</p>
<div class="infoboxnotealso" id="GUID-D5BF6AF3-64EB-4FC0-8C6F-9B0A71FD04F7__GUID-6E927636-0950-46CE-8B46-D0BC9973AA98">
<p class="notep1">See Also:</p>
<p><a href="http://www.w3.org/TR/xmlschema-0/#POSchema" target="_blank"><code>http://www.w3.org/TR/xmlschema-0/#POSchema</code></a></p>
</div>
<p>The data in the examples is from the document <span class="q">&#34;<a href="app_depr_otext.htm#GUID-E0A96A1F-5068-4DF0-9E2B-2DCB841C89E3" title="A purchase-order XML document is presented. It is used in examples of full-text search over XML without XQuery.">Purchase-Order XML Document_ po001.xml</a>&#34;</span>.</p>
<p>The tables used in the examples of this chapter are defined in section <span class="q">&#34;<a href="app_depr_otext.htm#GUID-12C61C7A-A8F9-428B-9999-C448DC0A594E" title="CREATE TABLE statements are presented that create purchase-order tables which are used in examples of full-text search without XQuery.">CREATE TABLE Statements</a>&#34;</span><span class="q">&#34;<a href="app_depr_otext.htm#GUID-12C61C7A-A8F9-428B-9999-C448DC0A594E" title="CREATE TABLE statements are presented that create purchase-order tables which are used in examples of full-text search without XQuery.">CREATE TABLE Statements</a>&#34;</span>. Some of the performance examples are, however, based on a larger table (<code>purchase_orders_xmltype_big</code>), which is included in the downloadable version only. See <a href="http://www.w3.org/TR/xmlschema-0/#po.xml" target="_blank"><code>http://www.w3.org/TR/xmlschema-0/#po.xml</code></a>.</p>
<p>Some of the examples here use data type <code>VARCHAR2</code>. Others use type <code>XMLType</code>. All examples that use <code>VARCHAR2</code> also work with <code>XMLType</code>.</p>
</div>
</div>
</div>
<a id="ADXDB4752"></a>
<div class="props_rev_3"><a id="GUID-214A95BF-1F00-40BF-A7B1-C8E517168250"></a>
<h2 id="ADXDB-GUID-214A95BF-1F00-40BF-A7B1-C8E517168250" class="sect2"><span class="enumeration_section">E.3</span> Overview of SQL Function CONTAINS and XPath Function ora:contains</h2>
<div>
<p>SQL function <code>CONTAINS</code> and XPath function <code>ora:contains</code> can both be used for full-text searching.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="app_depr_otext.htm#GUID-B6A6345F-71E0-4286-81F8-398E26EC03A7" title="Oracle SQL function contains returns a positive number for rows where [schema.]column matches text_query. Otherwise, it returns zero. It requires an index of type CONTEXT. If there is no CONTEXT index on the column being searched, then contains raises an error.">Overview of SQL Function CONTAINS</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-20ECBB32-B266-43C0-9DF4-5D065814878B" title="You can use XPath function ora:contains in an XPath expression inside an XQuery expression or in a call to SQL/XML function XMLQuery, XMLTable, or XMLExists. It restricts a structural search with a full-text predicate.">Overview of XPath Function ora:contains</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-B8457FC4-7AC4-4746-BC2B-1C30CBEC97AB" title="Both Oracle SQL function contains and Oracle XPath function ora:contains let you combine searching XML structure with full-text searching. The two approaches are compared.">Comparison of SQL Function CONTAINS and XPath Function ora:contains</a></p>
</li>
</ul>
</div>
<a id="ADXDB4754"></a><a id="ADXDB4756"></a><a id="ADXDB4757"></a><a id="ADXDB4758"></a><a id="ADXDB4753"></a>
<div class="props_rev_3"><a id="GUID-B6A6345F-71E0-4286-81F8-398E26EC03A7"></a>
<h3 id="ADXDB-GUID-B6A6345F-71E0-4286-81F8-398E26EC03A7" class="sect3"><span class="enumeration_section">E.3.1</span> Overview of SQL Function CONTAINS</h3>
<div>
<p>Oracle SQL function <code>contains</code> returns a positive number for rows where <code>[schema.]column</code> matches <code>text_query</code>. Otherwise, it returns zero. It requires an index of type <code>CONTEXT</code>. If there is no <code>CONTEXT</code> index on the column being searched, then <code>contains</code> raises an error.</p>
<div class="section">
<p class="subhead3">CONTAINS Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">contains([schema.]column, text_query VARCHAR2 [,label NUMBER])
RETURN NUMBER
</pre>
<p><a href="app_depr_otext.htm#GUID-B6A6345F-71E0-4286-81F8-398E26EC03A7__CBBCHDJH">Example E-1</a> shows a typical query that uses Oracle SQL function <code>contains</code>. It returns the <code>id</code> for each row in table <code>purchase_orders</code> where the <code>doc</code> column contains the word &#34;lawn&#34; and <code>id</code> is less than 25.</p>
<p>Suppose <code>doc</code> is a column that contains a set of XML documents. You can do full-text search over <code>doc</code>, using its XML structure to restrict the query. The query in <a href="app_depr_otext.htm#GUID-B6A6345F-71E0-4286-81F8-398E26EC03A7__CBBBEIGC">Example E-2</a> returns <code>id</code> values for table <code>purchaseorders</code> where column <code>doc</code> contains the word &#34;lawn&#34; in the text() node of XML element <code>comment</code>.</p>
<p>More complex XML structure restrictions can be applied using the <code>INPATH</code> operator and an XPath expression. The query in <a href="app_depr_otext.htm#GUID-B6A6345F-71E0-4286-81F8-398E26EC03A7__CBBJBBHD">Example E-3</a> finds purchase orders that contain the word &#34;electric&#34; in the text() node of a <code>comment</code> element that is targeted by XPath expression<code>/purchaseOrder/items/item/comment</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-B6A6345F-71E0-4286-81F8-398E26EC03A7__CBBCHDJH">
<p class="titleinexample">Example E-1 Simple Query Using Oracle SQL Function CONTAINS</p>
<pre dir="ltr">SELECT id FROM purchase_orders WHERE contains(doc, &#39;lawn&#39;) &gt; 0 AND id &lt; 25;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-B6A6345F-71E0-4286-81F8-398E26EC03A7__CBBBEIGC">
<p class="titleinexample">Example E-2 Restricting a Query Using CONTAINS and WITHIN</p>
<pre dir="ltr">SELECT id FROM purchase_orders WHERE contains(doc, &#39;lawn <span class="bold">WITHIN comment</span>&#39;) &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-B6A6345F-71E0-4286-81F8-398E26EC03A7__CBBJBBHD">
<p class="titleinexample">Example E-3 Restricting a Query Using CONTAINS and INPATH</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;electric <span class="bold">INPATH</span> (/purchaseOrder/items/item/comment)&#39;) &gt; 0;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4760"></a><a id="ADXDB4761"></a><a id="ADXDB4759"></a>
<div class="props_rev_3"><a id="GUID-20ECBB32-B266-43C0-9DF4-5D065814878B"></a>
<h3 id="ADXDB-GUID-20ECBB32-B266-43C0-9DF4-5D065814878B" class="sect3"><span class="enumeration_section">E.3.2</span> Overview of XPath Function ora:contains</h3>
<div>
<p>You can use XPath function <code>ora:contains</code> in an XPath expression inside an XQuery expression or in a call to SQL/XML function <code>XMLQuery</code>, <code>XMLTable</code>, or <code>XMLExists</code>. It restricts a structural search with a full-text predicate.</p>
<p>It extends XPath through a standard mechanism: it is a user-defined function in the Oracle XML&nbsp;DB namespace, <code>ora</code>. It requires no index, but you can use an index with it to improve performance.</p>
<div class="section">
<p class="subhead3">ora:contains Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">ora:contains(<span class="italic">input_text</span> NODE*, <span class="italic">text_query</span> STRING 
             [,<span class="italic">policy_name</span> STRING]
             [,<span class="italic">policy_owner</span> STRING])
</pre>
<p>Function <code>ora:contains</code> returns a positive integer when the <span class="italic"><code>input_text</code></span> matches <span class="italic"><code>text_query</code></span> (the higher the number, the more relevant the match), and zero otherwise. When used in an XQuery expression, the XQuery return type is <code>xs:integer()</code>. When used in an XPath expression outside of an XQuery expression, the XPath return type is <code>number</code>.</p>
<p>Argument <span class="italic"><code>input_text</code></span> must evaluate to a single text node or an attribute. The syntax and semantics of <span class="italic"><code>text_query</code></span> in <code>ora:contains</code> are the same as <span class="italic"><code>text_query</code></span> in <code>contains</code>, with the following restrictions:</p>
<ul style="list-style-type: disc;">
<li>
<p>Argument <span class="italic"><code>text_query</code></span> cannot include any structure operators (<code>WITHIN</code>, <code>INPATH</code>, or <code>HASPATH</code>).</p>
</li>
<li>
<p>If the <code>weight</code> score-weighting operator is used, the weights are <span class="italic">ignored</span>.</p>
</li>
</ul>
<p><a href="app_depr_otext.htm#GUID-20ECBB32-B266-43C0-9DF4-5D065814878B__CBBDJJAI">Example E-4</a> shows a call to <code>ora:contains</code> in the XPath parameter to <code>XMLExists</code>. Notice the namespace declaration that declares prefix <code>ora</code> as representing the Oracle XML&nbsp;DB namespace.</p>
<div class="infoboxnotealso" id="GUID-20ECBB32-B266-43C0-9DF4-5D065814878B__GUID-2B8DEF8F-6CFD-4BE0-AC6B-DEC97AAD104B">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="app_depr_otext.htm#GUID-BD718D3E-920A-4C81-ADDF-C3C799A78DC5" title="Function ora:contains is an Oracle-defined XQuery (XPath) function for use in the XQuery expression argument to SQL/XML functions XMLQuery, XMLTable, and XMLExists. Function ora:contains always returns a number. It does not return a score. It returns a positive number if the text_query matches the input_text. Otherwise it returns zero.">ora:contains XQuery Function</a>&#34;</span> for more on the <code>ora:contains</code> XPath function</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-20ECBB32-B266-43C0-9DF4-5D065814878B__CBBDJJAI">
<p class="titleinexample">Example E-4 ora:contains with an Arbitrarily Complex Text Query</p>
<pre dir="ltr">SELECT id
  FROM purchase_orders_xmltype
  WHERE
    XMLExists(
      &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
       $d/purchaseOrder/comment
         [ora:contains(text(), &#34;($lawns AND wild) OR flamingo&#34;) &gt; 0]&#39;
      PASSING doc AS &#34;d&#34;);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4762"></a>
<div class="props_rev_3"><a id="GUID-B8457FC4-7AC4-4746-BC2B-1C30CBEC97AB"></a>
<h3 id="ADXDB-GUID-B8457FC4-7AC4-4746-BC2B-1C30CBEC97AB" class="sect3"><span class="enumeration_section">E.3.3</span> Comparison of SQL Function CONTAINS and XPath Function ora:contains</h3>
<div>
<p>Both Oracle SQL function <code>contains</code> and Oracle XPath function <code>ora:contains</code> let you combine searching XML structure with full-text searching. The two approaches are compared.</p>
<p>Oracle SQL function <code>contains</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p>Needs a <code>CONTEXT</code> index to run. If there is no index, then an error is raised.</p>
</li>
<li>
<p>Does an indexed search and is generally very fast.</p>
</li>
<li>
<p>Returns a score (through Oracle SQL function <code>score</code>).</p>
</li>
<li>
<p>Restricts a search based on documents (rows in a table) rather than nodes.</p>
</li>
<li>
<p><span class="italic">Cannot</span> be used for XML structure-based projection (extracting parts of an XML document).</p>
</li>
</ul>
<p>Oracle XPath function <code>ora:contains</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p>Does not need an index to run, but you can use an index to improve performance.</p>
</li>
<li>
<p>Might do an unindexed search, so it might be resource-intensive.</p>
</li>
<li>
<p>Separates application logic from storing and indexing considerations.</p>
</li>
<li>
<p>Does <span class="italic">not</span> return a score.</p>
</li>
<li>
<p>Can be used for XML structure-based projection (extracting parts of an XML document).</p>
</li>
</ul>
<p>Use Oracle SQL function <code>contains</code> when you want a fast, index-based, full-text search over XML documents, possibly with simple XML structure constraints. Use Oracle XPath function <code>ora:contains</code> when you do not need a score and you need the flexibility of full-text search combined with XPath navigation (possibly without an index) or when you need to do projection.</p>
</div>
</div>
</div>
<a id="ADXDB4763"></a>
<div class="props_rev_3"><a id="GUID-564306B8-416C-4C3B-90C6-2E2AB9304712"></a>
<h2 id="ADXDB-GUID-564306B8-416C-4C3B-90C6-2E2AB9304712" class="sect2"><span class="enumeration_section">E.4</span> SQL Function CONTAINS</h2>
<div>
<p>Full-text search using Oracle SQL function <code>contains</code> is described.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="app_depr_otext.htm#GUID-80067EDC-AEA9-4793-B805-6FB60CA3A140" title="The second argument to Oracle SQL function contains, text_query, is a string that specifies the full-text search. text_query has its own language, based on the SQL/MM Full-Text standard.">Full-Text Search Using SQL Function CONTAINS</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-A6072363-870B-49A6-97C3-B1621E375012" title="Oracle SQL function score is related to Oracle SQL function contains. Function score can be used anywhere in a query. It is a measure of relevance, and it is especially useful when doing full-text searches across large document sets.">SQL Function SCORE</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-F404306E-7812-483F-99CA-70781FB8756C" title="By default, Oracle SQL function contains does a full-text search across an entire document. There are three operators you can use to restrict contains queries using XML structure: WITHIN, INPATH, and HASPATH.">Scope of a CONTAINS Search</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-C5DECFEE-2C50-455E-ABA1-D287687496AD" title="The result of a SQL query with contains in the WHERE clause is always a set of rows (and possibly score information) or a projection over the rows that match. To return only a part of each XML document that satisfies a contains expression, use SQL/XML function XMLQuery.">Projecting the CONTAINS Result</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-6A04C2F5-D136-4169-93EE-658DC1CFAFCE" title="You can use a CONTEXT index to enable full-text searching.">CONTEXT Index</a></p>
</li>
</ul>
</div>
<a id="ADXDB4764"></a>
<div class="props_rev_3"><a id="GUID-80067EDC-AEA9-4793-B805-6FB60CA3A140"></a>
<h3 id="ADXDB-GUID-80067EDC-AEA9-4793-B805-6FB60CA3A140" class="sect3"><span class="enumeration_section">E.4.1</span> Full-Text Search Using SQL Function CONTAINS</h3>
<div>
<p>The second argument to Oracle SQL function <code>contains</code>, <code>text_query</code>, is a string that specifies the full-text search. <code>text_query</code> has its own language, based on the SQL/MM Full-Text standard.</p>
<div class="infoboxnotealso" id="GUID-80067EDC-AEA9-4793-B805-6FB60CA3A140__GUID-18953102-5615-4216-8FBB-8C58FE18C372">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p>ISO/IEC 13249-2:2000, Information technology - Database languages - SQL Multimedia and Application Packages - Part 2: Full-Text, International Organization For Standardization, 2000</p>
</li>
<li>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for more information about the operators in the <code>text_query</code> language</p>
</li>
</ul>
</div>
<p>The examples in the rest of this section show some of the power of full-text search. They use only a few of the available operators. The example queries search over a <code>VARCHAR2</code> column (<code>PURCHASE_ORDERS.doc</code>) with a text index (index type <code>CTXSYS.CONTEXT</code>).</p>
</div>
<a id="ADXDB4766"></a><a id="ADXDB4767"></a><a id="ADXDB4765"></a>
<div class="props_rev_3"><a id="GUID-29E03589-D402-4BB7-9BC1-7BEB971A7D9D"></a>
<h4 id="ADXDB-GUID-29E03589-D402-4BB7-9BC1-7BEB971A7D9D" class="sect4"><span class="enumeration_section">E.4.1.1</span> Full-Text Boolean Operators AND, OR, and NOT</h4>
<div>
<p>The <code>text_query</code> language supports arbitrary combinations of <code>AND</code>, <code>OR</code>, and <code>NOT</code>. Precedence can be controlled using parentheses. The Boolean operators can be written in any of the various ways.</p>
<ul style="list-style-type: disc;">
<li>
<p><code>AND</code>, <code>OR</code>, <code>NOT</code></p>
</li>
<li>
<p><code>and</code>, <code>or</code>, <code>not</code></p>
</li>
<li>
<p><code>&amp;</code>, <code>|</code>, <code>~</code></p>
</li>
</ul>
<p>Note that <code>NOT</code> is a <span class="italic">binary</span>, not a unary operator here. The expression <code>alpha NOT(beta)</code> is equivalent to <code>alpha AND</code> <span class="italic">unary-not</span><code>(beta)</code>, where unary-not stands for unary negation.</p>
<div class="infoboxnotealso" id="GUID-29E03589-D402-4BB7-9BC1-7BEB971A7D9D__GUID-E5E54E13-E56F-4E2A-B4EB-4FED5C7486D5">
<p class="notep1">See Also:</p>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for complete information about the operators you can use in <code>contains</code> and <code>ora:contains</code></p>
</div>
<div class="example" id="GUID-29E03589-D402-4BB7-9BC1-7BEB971A7D9D__GUID-F2E90FB1-503E-44D0-AC14-12E17C4F7DE4">
<p class="titleinexample">Example E-5 CONTAINS Query with a Simple Boolean Operator</p>
<pre dir="ltr">SELECT id FROM purchase_orders WHERE contains(doc, &#39;lawn AND wild&#39;) &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-29E03589-D402-4BB7-9BC1-7BEB971A7D9D__GUID-BB0EB6DD-1A46-4BD4-8C64-04CFD1ABF63C">
<p class="titleinexample">Example E-6 CONTAINS Query with Complex Boolean</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;((lawn OR garden) AND (wild OR flooded)) NOT(flamingo)&#39;)
        &gt; 0;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4769"></a><a id="ADXDB4768"></a>
<div class="props_rev_3"><a id="GUID-B214F12D-C19E-44F1-9AE5-DA2E08135954"></a>
<h4 id="ADXDB-GUID-B214F12D-C19E-44F1-9AE5-DA2E08135954" class="sect4"><span class="enumeration_section">E.4.1.2</span> Full-Text Stemming with text_query: $</h4>
<div>
<p>You can use stemming with the <code>text_query</code> language.</p>
<div class="section">
<p><a href="app_depr_otext.htm#GUID-B214F12D-C19E-44F1-9AE5-DA2E08135954__CBBFHDFG">Example E-7</a> returns all documents that contain some word with the same linguistic stem as &#34;lawns&#34;, so it finds &#34;lawn&#34; or &#34;lawns&#34;. The stem operator is written as a dollar sign (<code>$</code>).</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-B214F12D-C19E-44F1-9AE5-DA2E08135954__CBBFHDFG">
<p class="titleinexample">Example E-7 CONTAINS Query with Stemming</p>
<pre dir="ltr">SELECT id FROM purchase_orders WHERE contains(doc, &#39;$(lawns)&#39;) &gt; 0;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4771"></a><a id="ADXDB4770"></a>
<div class="props_rev_3"><a id="GUID-1F2D4464-BCB4-4B27-9F76-091600CDCB09"></a>
<h4 id="ADXDB-GUID-1F2D4464-BCB4-4B27-9F76-091600CDCB09" class="sect4"><span class="enumeration_section">E.4.1.3</span> Combining Boolean and Stemming Operators</h4>
<div>
<p>You can combine operators in the <code>text_query</code> language.</p>
<div class="section">
<p><a href="app_depr_otext.htm#GUID-1F2D4464-BCB4-4B27-9F76-091600CDCB09__CBBHCJGA">Example E-8</a>illustrates this.</p>
<div class="infoboxnotealso" id="GUID-1F2D4464-BCB4-4B27-9F76-091600CDCB09__GUID-6AFA2A6B-4599-47F0-936F-33BAA30C9E77">
<p class="notep1">See Also:</p>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for a full list of <code>text_query</code> operators</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-1F2D4464-BCB4-4B27-9F76-091600CDCB09__CBBHCJGA">
<p class="titleinexample">Example E-8 CONTAINS Query with Complex Query Expression</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;($lawns AND wild) OR flamingo&#39;) &gt; 0;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB4773"></a><a id="ADXDB4774"></a><a id="ADXDB4772"></a>
<div class="props_rev_3"><a id="GUID-A6072363-870B-49A6-97C3-B1621E375012"></a>
<h3 id="ADXDB-GUID-A6072363-870B-49A6-97C3-B1621E375012" class="sect3"><span class="enumeration_section">E.4.2</span> SQL Function SCORE</h3>
<div>
<p>Oracle SQL function <code>score</code> is related to Oracle SQL function <code>contains</code>. Function <code>score</code> can be used anywhere in a query. It is a measure of relevance, and it is especially useful when doing full-text searches across large document sets.</p>
<p>Function <code>score</code> is typically returned as part of the query result, used in the <code>ORDER BY</code> clause, or both.</p>
<div class="section">
<p class="subhead3">SCORE Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">score(label NUMBER) RETURN NUMBER
</pre>
<p>In <a href="app_depr_otext.htm#GUID-A6072363-870B-49A6-97C3-B1621E375012__CBBFBIIC">Example E-9</a>, <code>score(10)</code> returns the score for each row in the result set. Oracle SQL function <code>score</code> returns the relevance of a row in the result set with respect to a particular call to function <code>contains</code>. A call to <code>score</code> is linked to a call to <code>contains</code> by a <code>LABEL</code> (in this case the number 10).</p>
<p>Function <code>score</code> always returns <code>0</code> if, for the corresponding <code>contains</code> expression, argument <code>text_query</code> does not match <code>input_text</code>, according to the matching rules dictated by the text index. If the <code>contains</code> <code>text_query</code> matches the <code>input_text</code>, then <code>score</code> returns a number greater than <code>0</code> and less than or equal to <code>100</code>. This number indicates the relevance of the <code>text_query</code> to the <code>input_text</code>. A higher number means a better match.</p>
<p>If the <code>contains</code> <code>text_query</code> consists of only the <code>HASPATH</code> operator and a Text Path, the score is either <code>0</code> or <code>100</code>, because <code>HASPATH</code> tests for an exact match.</p>
<div class="infoboxnotealso" id="GUID-A6072363-870B-49A6-97C3-B1621E375012__GUID-50D6BE04-6E97-409C-B348-C631A6BAB12F">
<p class="notep1">See Also:</p>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for details on how the score is calculated</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-A6072363-870B-49A6-97C3-B1621E375012__CBBFBIIC">
<p class="titleinexample">Example E-9 Simple CONTAINS Query with SCORE</p>
<pre dir="ltr">SELECT score(10), id FROM purchase_orders
  WHERE contains(doc, &#39;lawn&#39;, 10) &gt; 0 AND score(10) &gt; 2
  ORDER BY score(10) DESC;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4775"></a>
<div class="props_rev_3"><a id="GUID-F404306E-7812-483F-99CA-70781FB8756C"></a>
<h3 id="ADXDB-GUID-F404306E-7812-483F-99CA-70781FB8756C" class="sect3"><span class="enumeration_section">E.4.3</span> Scope of a CONTAINS Search</h3>
<div>
<p>By default, Oracle SQL function <code>contains</code> does a full-text search across an entire document. There are three operators you can use to restrict <code>contains</code> queries using XML structure: <code>WITHIN</code>, <code>INPATH</code>, and <code>HASPATH</code>.</p>
<p>In the examples here, a search for &#34;lawn&#34; with no structure restriction finds all purchase orders with the word &#34;lawn&#34; anywhere in them.</p>
<div class="infobox-note" id="GUID-F404306E-7812-483F-99CA-70781FB8756C__GUID-5473E6CE-DD1F-4B7C-9DE6-5838A0259CB8">
<p class="notep1">Note:</p>
<p>For the purposes of this discussion, consider <span class="italic">section</span> to be the same as an <span class="italic">XML node</span>.</p>
</div>
</div>
<a id="ADXDB4777"></a><a id="ADXDB4776"></a>
<div class="props_rev_3"><a id="GUID-8648C980-5900-4B9B-8CEB-693EA69690EE"></a>
<h4 id="ADXDB-GUID-8648C980-5900-4B9B-8CEB-693EA69690EE" class="sect4"><span class="enumeration_section">E.4.3.1</span> Using Structure Operator WITHIN</h4>
<div>
<p>Operator <code>WITHIN</code> restricts a query to some section within an XML document. A search for purchase orders that contain the word &#34;lawn&#34; somewhere inside a comment section might use <code>WITHIN</code>. Section names are case-sensitive.</p>
<div class="section"></div>
<!-- class="section" -->
<div class="example" id="GUID-8648C980-5900-4B9B-8CEB-693EA69690EE__GUID-5508B58B-F70E-4551-A1FE-3838E0EF403F">
<p class="titleinexample">Example E-10 WITHIN</p>
<pre dir="ltr">SELECT id FROM purchase_orders WHERE contains(DOC, &#39;lawn WITHIN comment&#39;) &gt; 0;
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB4779"></a><a id="ADXDB4778"></a>
<div class="props_rev_3"><a id="GUID-3DCD345D-0F1E-44A6-BAEA-555F1D945865"></a>
<h5 id="ADXDB-GUID-3DCD345D-0F1E-44A6-BAEA-555F1D945865" class="sect5"><span class="enumeration_section">E.4.3.1.1</span> Using Nested WITHIN</h5>
<div>
<p>You can restrict a query by nesting occurrences of operator <code>WITHIN</code>.</p>
<div class="section">
<p><a href="app_depr_otext.htm#GUID-3DCD345D-0F1E-44A6-BAEA-555F1D945865__CBBJEDFA">Example E-11</a> finds all documents that contain the word &#34;<code>lawn</code>&#34; within a section &#34;<code>comment</code>&#34;, where that occurrence of &#34;<code>lawn</code>&#34; is also within a section &#34;<code>item</code>&#34;.</p>
<p><a href="app_depr_otext.htm#GUID-3DCD345D-0F1E-44A6-BAEA-555F1D945865__CBBJEDFA">Example E-11</a> returns no rows. Our sample purchase order does contain the word &#34;<code>lawn</code>&#34; within a comment. But the only comment within an item is &#34;<code>Confirm this is electric</code>&#34;. So the nested <code>WITHIN</code> query returns no rows.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-3DCD345D-0F1E-44A6-BAEA-555F1D945865__CBBJEDFA">
<p class="titleinexample">Example E-11 Nested WITHIN</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;(lawn WITHIN comment) WITHIN item&#39;) &gt; 0;
  
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4781"></a><a id="ADXDB4780"></a>
<div class="props_rev_3"><a id="GUID-84C02876-27D4-45DD-82EA-884839365B9A"></a>
<h5 id="ADXDB-GUID-84C02876-27D4-45DD-82EA-884839365B9A" class="sect5"><span class="enumeration_section">E.4.3.1.2</span> Using WITHIN Attributes</h5>
<div>
<p>You can use operator <code>WITHIN</code> to search within an attribute. But you cannot search attributes in a nested <code>WITHIN</code></p>
<div class="section">
<p><a href="app_depr_otext.htm#GUID-84C02876-27D4-45DD-82EA-884839365B9A__CBBGICHI">Example E-12</a> finds all purchase orders that contain the word <code>10</code> in the <code>orderDate</code> attribute of a <code>purchaseOrder</code> element.</p>
<p>By default, the minus sign (&#34;<code>-</code>&#34;) is treated as a word separator: &#34;<code>1999-10-20</code>&#34; is treated as the three words &#34;<code>1999</code>&#34;, &#34;<code>10</code>&#34; and &#34;<code>20</code>&#34;. So this query returns one row.</p>
<p>Text in an attribute is not a part of the main searchable document. A search for <code>10</code> without qualifying the <code>text_query</code> with <code>WITHIN purchaseOrder@orderDate</code> returns no rows.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-84C02876-27D4-45DD-82EA-884839365B9A__CBBGICHI">
<p class="titleinexample">Example E-12 WITHIN an Attribute</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;10 WITHIN purchaseOrder@orderDate&#39;) &gt; 0;
  
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4783"></a><a id="ADXDB4784"></a><a id="ADXDB4785"></a><a id="ADXDB4786"></a><a id="ADXDB4782"></a>
<div class="props_rev_3"><a id="GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B"></a>
<h5 id="ADXDB-GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B" class="sect5"><span class="enumeration_section">E.4.3.1.3</span> Using WITHIN and AND</h5>
<div>
<p>You can use operators <code>WITHIN</code> and <code>AND</code> together, to search for a set of words that occur in the same section or for a set of words, each of which occurs in some section.</p>
<div class="section">
<p>Suppose you want to find purchase orders that contain two words within a comment section: &#34;lawn&#34; and &#34;electric&#34;. There can be more than one comment section in a <code>purchaseOrder</code>. So there are two ways to write this query, with two distinct results.</p>
<p>If you want to find purchase orders that contain both words, where each word occurs in <span class="italic">some comment section</span>, you would write a query like <a href="app_depr_otext.htm#GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B__CBBJCFBB">Example E-13</a>.</p>
<p>If you run this query against the <code>purchaseOrder</code> data, then it returns 1 row. Note that the parentheses are not needed in this example, but they make the query more readable.</p>
<p>If you want to find purchase orders that contain both words, where both words occur <span class="italic">in the same comment</span>, you would write a query like <a href="app_depr_otext.htm#GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B__CBBBGGGF">Example E-14</a>.</p>
<p>The query in <a href="app_depr_otext.htm#GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B__CBBBGGGF">Example E-14</a> returns no rows. The query in <a href="app_depr_otext.htm#GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B__CBBFIIBH">Example E-15</a>, which omits the parentheses around <code>lawn AND electric</code>, returns one row.</p>
<p>Operator <code>WITHIN</code> has a higher precedence than <code>AND</code>, so <a href="app_depr_otext.htm#GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B__CBBFIIBH">Example E-15</a> is parsed as <a href="app_depr_otext.htm#GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B__CBBICFBE">Example E-16</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B__CBBJCFBB">
<p class="titleinexample">Example E-13 WITHIN and AND: Two Words in Some Comment Section</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;(lawn WITHIN comment) AND (electric WITHIN comment)&#39;) &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B__CBBBGGGF">
<p class="titleinexample">Example E-14 WITHIN and AND: Two Words in the Same Comment</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;(lawn AND electric) WITHIN comment&#39;) &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B__CBBFIIBH">
<p class="titleinexample">Example E-15 WITHIN and AND: No Parentheses</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;lawn AND electric WITHIN comment&#39;) &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-CDAE8D39-DDCC-45B3-B1D9-149E38E5A10B__CBBICFBE">
<p class="titleinexample">Example E-16 WITHIN and AND: Parentheses Illustrating Operator Precedence</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;lawn AND (electric WITHIN comment)&#39;) &gt; 0;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4787"></a>
<div class="props_rev_3"><a id="GUID-E20F7A55-F68B-408A-A179-EB7C6D3508F2"></a>
<h5 id="ADXDB-GUID-E20F7A55-F68B-408A-A179-EB7C6D3508F2" class="sect5"><span class="enumeration_section">E.4.3.1.4</span> Definition of Section</h5>
<div>
<p>The various kinds of section are described.</p>
<p>A <strong class="term">section</strong> can be any of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p><strong class="term">path</strong> or <strong class="term">zone</strong> section</p>
<p>This is a concatenation, in document order, of all text nodes that are descendants of a node, with whitespace separating the text nodes. To convert from a node to a zone section, you must serialize the node and replace all tags with whitespace. path sections have the same scope and behavior as zone sections, except that path sections support queries with <code>INPATH</code> and <code>HASPATH</code> structure operators.</p>
</li>
<li>
<p><strong class="term">field</strong> section</p>
<p>This is the same as a zone section, except that repeating nodes in a document are concatenated into a single section, with whitespace as a separator.</p>
</li>
<li>
<p>attribute section</p>
</li>
<li>
<p>special section (sentence or paragraph)</p>
<div class="infoboxnotealso" id="GUID-E20F7A55-F68B-408A-A179-EB7C6D3508F2__GUID-805B9B2B-711F-4ABA-BAE0-A2E60756A00E">
<p class="notep1">See Also:</p>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for more information about special sections</p>
</div>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDB4789"></a><a id="ADXDB4790"></a><a id="ADXDB4788"></a>
<div class="props_rev_3"><a id="GUID-E359A767-0555-44B5-A99E-4AD37D3DB837"></a>
<h4 id="ADXDB-GUID-E359A767-0555-44B5-A99E-4AD37D3DB837" class="sect4"><span class="enumeration_section">E.4.3.2</span> Using Structure Operator INPATH</h4>
<div>
<p>Operator <code>WITHIN</code> lets you express simple structure restrictions for <code>text_query</code>. For queries that make considerable use of XML structure, you can use operator <code>INPATH</code> plus a text path instead of nested <code>WITHIN</code> operators.</p>
<div class="section">
<p>Operator <code>INPATH</code> takes a <code>text_query</code> on the left and a Text Path, enclosed in parentheses, on the right. <a href="app_depr_otext.htm#GUID-E359A767-0555-44B5-A99E-4AD37D3DB837__CBBFGJJB">Example E-17</a> finds <code>purchaseOrders</code> that contain the word &#34;<code>electric</code>&#34; in the path <code>/purchaseOrder/items/item/comment</code>.</p>
<p>The scope of the search in <a href="app_depr_otext.htm#GUID-E359A767-0555-44B5-A99E-4AD37D3DB837__CBBFGJJB">Example E-17</a> is the section indicated by the Text Path. The query in <a href="app_depr_otext.htm#GUID-E359A767-0555-44B5-A99E-4AD37D3DB837__CBBCIHJF">Example E-18</a> uses a broader path than the query in <a href="app_depr_otext.htm#GUID-E359A767-0555-44B5-A99E-4AD37D3DB837__CBBFGJJB">Example E-17</a>, but it too returns one row.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E359A767-0555-44B5-A99E-4AD37D3DB837__CBBFGJJB">
<p class="titleinexample">Example E-17 Structure Inside Full-Text Predicate: INPATH</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;electric INPATH (/purchaseOrder/items/item/comment)&#39;) &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E359A767-0555-44B5-A99E-4AD37D3DB837__CBBCIHJF">
<p class="titleinexample">Example E-18 Structure Inside Full-Text Predicate: INPATH</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;electric INPATH (/purchaseOrder/items)&#39;) &gt; 0;
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB4792"></a><a id="ADXDB4793"></a><a id="ADXDB4791"></a>
<div class="props_rev_3"><a id="GUID-57FA528E-F175-40CE-A298-C6F4897C50C9"></a>
<h5 id="ADXDB-GUID-57FA528E-F175-40CE-A298-C6F4897C50C9" class="sect5"><span class="enumeration_section">E.4.3.2.1</span> Using a Text Path</h5>
<div>
<p>The syntax and semantics of Text Path are based on the W3C XPath 1.0 recommendation. Simple path expressions are supported (abbreviated syntax only), but functions are not.</p>
<div class="section">
<div class="infoboxnotealso" id="GUID-57FA528E-F175-40CE-A298-C6F4897C50C9__GUID-64B4E386-1CC4-4A72-9458-838A915C07FA">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="http://www.w3.org/TR/xpath" target="_blank"><code>http://www.w3.org/TR/xpath</code></a> for information about the W3C XPath 1.0 recommendation</p>
</li>
<li>
<p><span class="q">&#34;<a href="app_depr_otext.htm#GUID-D909ACF2-7941-4924-9126-DE6D7A3F8454" title="The complete BNF specification for Text Path is presented.">Text Path BNF Specification</a>&#34;</span> for the Text Path grammar</p>
</li>
</ul>
</div>
<p><a href="app_depr_otext.htm#GUID-57FA528E-F175-40CE-A298-C6F4897C50C9__CBBJFGAB">Example E-19</a> finds all purchase orders that contain the word &#34;<code>electric</code>&#34; in a <code>comment</code> element that is the child of an <code>item</code> element with a <code>partNum</code> attribute whose value is &#34;<code>872-AA</code>&#34;, which in turn is the child of an <code>items</code> element that is any number of levels under the root node.</p>
<p><a href="app_depr_otext.htm#GUID-57FA528E-F175-40CE-A298-C6F4897C50C9__CBBFIEIF">Example E-20</a> finds all purchase orders that contain the word &#34;<code>lawnmower</code>&#34; in a third-level <code>item</code> element (or any of its descendants) that has a <code>comment</code> element descendant at any level. This query returns one row. The scope of the query is <span class="italic">not</span> a <code>comment</code> element, but the set of <code>items</code> elements that each have a <code>comment</code> element as a descendant.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-57FA528E-F175-40CE-A298-C6F4897C50C9__CBBJFGAB">
<p class="titleinexample">Example E-19 INPATH with Complex Path Expression (1)</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;electric INPATH (//items/item[@partNum=&#34;872-AA&#34;]/comment)&#39;)  
        &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-57FA528E-F175-40CE-A298-C6F4897C50C9__CBBFIEIF">
<p class="titleinexample">Example E-20 INPATH with Complex Path Expression (2)</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;lawnmower INPATH (/*/*/item[.//comment])&#39;) &gt; 0;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4794"></a>
<div class="props_rev_3"><a id="GUID-FCDEC9A2-5562-4613-B0A3-C75A166BEDAF"></a>
<h5 id="ADXDB-GUID-FCDEC9A2-5562-4613-B0A3-C75A166BEDAF" class="sect5"><span class="enumeration_section">E.4.3.2.2</span> Text Path Compared to XPath</h5>
<div>
<p>The Text Path language differs from the XPath language in several ways.</p>
<ul style="list-style-type: disc;">
<li>
<p>Not all XPath operators are included in the Text Path language.</p>
</li>
<li>
<p>XPath built-in functions are not included in the Text Path language.</p>
</li>
<li>
<p>Text Path language operators are case-insensitive.</p>
</li>
<li>
<p>If you use <code>=</code> inside a filter (brackets), then matching follows text-matching rules.</p>
<p>Rules for case-sensitivity, normalization, stopwords and whitespace depend on the text index definition. To emphasize this difference, this kind of equality is referred to here as text-equals.</p>
</li>
<li>
<p>Namespace support is not included in the Text Path language.</p>
<p>The name of an element, including a namespace prefix if it exists, is treated as a string. So two different namespace prefixes that map to the same namespace URI are not treated as equivalent in the Text Path language.</p>
</li>
<li>
<p>In a Text Path, the context is always the root node of the document.</p>
<p>So in the purchase-order data, <code>purchaseOrder/items/item</code>, <code>/purchaseOrder/items/item</code>, and <code>./purchaseOrder/items/item</code> are all equivalent.</p>
</li>
<li>
<p>If you want to search within an attribute value, then the direct parent of the attribute must be specified (wildcards cannot be used).</p>
</li>
<li>
<p>A Text Path may not end in a wildcard (<code>*</code>).</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-FCDEC9A2-5562-4613-B0A3-C75A166BEDAF__GUID-34D2091B-1E92-4766-A504-2E67FA71B9D4">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="app_depr_otext.htm#GUID-D909ACF2-7941-4924-9126-DE6D7A3F8454" title="The complete BNF specification for Text Path is presented.">Text Path BNF Specification</a>&#34;</span> for the Text Path grammar</p>
</div>
</div>
</div>
<a id="ADXDB4796"></a><a id="ADXDB4797"></a><a id="ADXDB4795"></a>
<div class="props_rev_3"><a id="GUID-FE2ABCCA-C7ED-4E86-83FC-FA021D58A570"></a>
<h5 id="ADXDB-GUID-FE2ABCCA-C7ED-4E86-83FC-FA021D58A570" class="sect5"><span class="enumeration_section">E.4.3.2.3</span> Using Nested INPATH</h5>
<div>
<p>You can nest <code>INPATH</code> expressions. The context for the Text Path is always the root node. It is not changed by a nested <code>INPATH</code>.</p>
<div class="section">
<p><a href="app_depr_otext.htm#GUID-FE2ABCCA-C7ED-4E86-83FC-FA021D58A570__CBBDHDEG">Example E-21</a> finds purchase orders that contain the word &#34;<code>electric</code>&#34; inside a <code>comment</code> element at any level, where the occurrence of that word is also in an <code>items</code> element that is a child of the top-level <code>purchaseOrder</code> element.</p>
<p>This nested <code>INPATH</code> query could be written more concisely as shown in <a href="app_depr_otext.htm#GUID-FE2ABCCA-C7ED-4E86-83FC-FA021D58A570__CBBBIIAI">Example E-22</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-FE2ABCCA-C7ED-4E86-83FC-FA021D58A570__CBBDHDEG">
<p class="titleinexample">Example E-21 Nested INPATH</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, 
                 &#39;(electric INPATH (//comment)) INPATH (/purchaseOrder/items)&#39;)
        &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-FE2ABCCA-C7ED-4E86-83FC-FA021D58A570__CBBBIIAI">
<p class="titleinexample">Example E-22 Nested INPATH Rewritten</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;electric INPATH (/purchaseOrder/items//comment)&#39;) &gt; 0;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB4799"></a><a id="ADXDB4800"></a><a id="ADXDB4801"></a><a id="ADXDB4798"></a>
<div class="props_rev_3"><a id="GUID-8068F63D-606C-4A2E-9B71-4CE562C2E1FC"></a>
<h4 id="ADXDB-GUID-8068F63D-606C-4A2E-9B71-4CE562C2E1FC" class="sect4"><span class="enumeration_section">E.4.3.3</span> Using Structure Operator HASPATH</h4>
<div>
<p>You can use operator <code>HASPATH</code> to find documents that contain a particular section in a particular path, possibly with predicate <code>=</code>. It performs a path search, not a full-text search. You can check for the existence of a section or match section contents, but you cannot perform a word search.</p>
<div class="section">
<p>If your data is of type <code>XMLType</code>, then consider using SQL/XML function <code>XMLExists</code> instead of structure operator <code>HASPATH</code>.</p>
<p>Operator <code>HASPATH</code> takes only one operand: a Text Path, enclosed in parentheses, on the right. Use <code>HASPATH</code> when you want to find documents that contain a particular section in a particular path, possibly with predicate <code>=</code>. This is a path search rather than a full-text search. You can check for the existence of a section, or you can match the contents of a section, but you cannot do word searches. If your data is of type <code>XMLType</code>, then consider using SQL/XML function <code>XMLExists</code> instead of structure operator <code>HASPATH</code>.</p>
<p><a href="app_depr_otext.htm#GUID-8068F63D-606C-4A2E-9B71-4CE562C2E1FC__CBBEGAEB">Example E-23</a> finds <code>purchaseOrders</code> that have some item that has a <code>USPrice</code>.</p>
<p><a href="app_depr_otext.htm#GUID-8068F63D-606C-4A2E-9B71-4CE562C2E1FC__CBBHFJIH">Example E-24</a> finds <code>purchaseOrders</code> that have some item that has a <code>USPrice</code> that text-equals &#34;<code>148.95</code>&#34;.</p>
<div class="infoboxnotealso" id="GUID-8068F63D-606C-4A2E-9B71-4CE562C2E1FC__GUID-1F7DC557-0B4C-4F87-94FD-03E2B743C9B7">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="app_depr_otext.htm#GUID-FCDEC9A2-5562-4613-B0A3-C75A166BEDAF" title="The Text Path language differs from the XPath language in several ways.">Text Path Compared to XPath</a>&#34;</span> for an explanation of text-equals</p>
</div>
<p><code>HASPATH</code> can be combined with other <code>contains</code> operators such as <code>INPATH</code>. <a href="app_depr_otext.htm#GUID-8068F63D-606C-4A2E-9B71-4CE562C2E1FC__CBBCCCCE">Example E-25</a> finds <code>purchaseOrders</code> that contain the word <code>electric</code> anywhere in the document <span class="italic">and</span> have some <code>item</code> that has a <code>USPrice</code> that text-equals <code>148.95</code> <span class="italic">and</span> contain <code>10</code> in the <code>purchaseOrder</code> attribute <code>orderDate</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-8068F63D-606C-4A2E-9B71-4CE562C2E1FC__CBBEGAEB">
<p class="titleinexample">Example E-23 Simple HASPATH</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(DOC, &#39;HASPATH (/purchaseOrder//item/USPrice)&#39;) &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-8068F63D-606C-4A2E-9B71-4CE562C2E1FC__CBBHFJIH">
<p class="titleinexample">Example E-24 HASPATH Equality</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;HASPATH (/purchaseOrder//item/USPrice=&#34;148.95&#34;)&#39;) &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-8068F63D-606C-4A2E-9B71-4CE562C2E1FC__CBBCCCCE">
<p class="titleinexample">Example E-25 HASPATH with Other Operators</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc,
                 &#39;electric
                  AND HASPATH (/purchaseOrder//item/USPrice=&#34;148.95&#34;)
                  AND 10 INPATH (/purchaseOrder/@orderDate)&#39;)
        &gt; 0;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB4803"></a><a id="ADXDB4804"></a><a id="ADXDB4802"></a>
<div class="props_rev_3"><a id="GUID-C5DECFEE-2C50-455E-ABA1-D287687496AD"></a>
<h3 id="ADXDB-GUID-C5DECFEE-2C50-455E-ABA1-D287687496AD" class="sect3"><span class="enumeration_section">E.4.4</span> Projecting the CONTAINS Result</h3>
<div>
<p>The result of a SQL query with <code>contains</code> in the <code>WHERE</code> clause is always a set of rows (and possibly <code>score</code> information) or a projection over the rows that match. To return only a part of each XML document that satisfies a <code>contains</code> expression, use SQL/XML function <code>XMLQuery</code>.</p>
<div class="section">
<p>The examples here use <code>XMLType</code> table <code>purchase_orders_xmltype</code>.</p>
<p><a href="app_depr_otext.htm#GUID-C5DECFEE-2C50-455E-ABA1-D287687496AD__CBBCGDJG">Example E-26</a> finds <code>purchaseOrder</code>s that contain the word &#34;<code>electric</code>&#34; inside a <code>comment</code> element that is a descendant of the top-level element <code>purchaseOrder</code>. Instead of returning the ID of the row for each result, <code>XMLQuery</code> is used to return only the <code>comment</code> element.</p>
<p>The result of <a href="app_depr_otext.htm#GUID-C5DECFEE-2C50-455E-ABA1-D287687496AD__CBBCGDJG">Example E-26</a> is <span class="italic">two</span> instances of element <code>comment</code>. Function <code>contains</code> indicates which rows contain the word &#34;<code>electric</code>&#34; inside a <code>comment</code> element (the row with <code>ID</code> = <code>1</code>), and function <code>XMLQuery</code> extracts all of the instances of element <code>comment</code> in the document at that row. There are two instances of element <code>comment</code> inside the <code>purchaseOrder</code> element, and the query returns both of them.</p>
<p>This might not be what you want. If you want the query to return only the instances of element <code>comment</code> that satisfy the <code>contains</code> expression, then you must repeat that predicate in the XQuery expression passed to <code>XMLQuery</code>. You do that using XPath function <code>ora:contains</code>. <a href="app_depr_otext.htm#GUID-C5DECFEE-2C50-455E-ABA1-D287687496AD__CBBEHFCC">Example E-27</a> illustrates this.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-C5DECFEE-2C50-455E-ABA1-D287687496AD__CBBCGDJG">
<p class="titleinexample">Example E-26 Scoping the Results of a CONTAINS Query</p>
<pre dir="ltr">SELECT XMLQuery(&#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
                 $d/purchaseOrder//comment&#39;
                PASSING doc AS &#34;d&#34; RETURNING CONTENT) &#34;Item Comment&#34;
  FROM purchase_orders_xmltype
  WHERE CONTAINS(doc, &#39;electric INPATH (/purchaseOrder//comment)&#39;) &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C5DECFEE-2C50-455E-ABA1-D287687496AD__CBBEHFCC">
<p class="titleinexample">Example E-27 Projecting the Result of a CONTAINS Query Using ora:contains</p>
<pre dir="ltr">SELECT XMLQuery(&#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
                 $d/purchaseOrder/items/item/comment
                   [ora:contains(text(), &#34;electric&#34;) &gt; 0]&#39;
                PASSING doc AS &#34;d&#34; RETURNING CONTENT) &#34;Item Comment&#34;
  FROM purchase_orders_xmltype
  WHERE CONTAINS(doc, &#39;electric INPATH (/purchaseOrder/items/item/comment)&#39;) &gt; 0;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4805"></a>
<div class="props_rev_3"><a id="GUID-6A04C2F5-D136-4169-93EE-658DC1CFAFCE"></a>
<h3 id="ADXDB-GUID-6A04C2F5-D136-4169-93EE-658DC1CFAFCE" class="sect3"><span class="enumeration_section">E.4.5</span> CONTEXT Index</h3>
<div>
<p>You can use a <code>CONTEXT</code> index to enable full-text searching.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="app_depr_otext.htm#GUID-860A2B9A-4A77-4800-8F81-2EBD055F7909" title="The general-purpose full-text index type is CONTEXT, which is owned by database user CTXSYS. To create a default full-text index, CREATE INDEXand add the clause INDEXTYPE IS CTXSYS.CONTEXT. You can choose an indexing preference using a PARAMETERS clause.">Using CONTEXT Indexes</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-815A018F-DBB2-4446-9367-E151691484F7" title="To use Oracle SQL function contains, you must create an index of type CONTEXT. If you call containsand the column given in the first argument does not have an index of type CONTEXT, then an error is raised.">Effect of a CONTEXT Index on CONTAINS</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-02456815-5462-4C4D-9DBD-4B31D572066A" title="A preference can be considered a collection of indexing choices. Preferences include section group, datastore, filter, wordlist, stoplist, and storage. You can set up a lexer preference to make searches case-sensitive.">CONTEXT Index Preferences</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-827AC6FB-C88B-4F3C-940B-B3748F0AD507" title="A section group instance is based on a section group type, which specifies the structure of your documents, and how to index (and therefore search) that structure. A section group instance can specify which elements are indexed. Most users use either the default section group or a predefined section group.">Introduction to Section Groups</a></p>
</li>
</ul>
</div>
<a id="ADXDB4807"></a><a id="ADXDB4808"></a><a id="ADXDB4806"></a>
<div class="props_rev_3"><a id="GUID-860A2B9A-4A77-4800-8F81-2EBD055F7909"></a>
<h4 id="ADXDB-GUID-860A2B9A-4A77-4800-8F81-2EBD055F7909" class="sect4"><span class="enumeration_section">E.4.5.1</span> Using CONTEXT Indexes</h4>
<div>
<p>The general-purpose full-text index type is <code>CONTEXT</code>, which is owned by database user <code>CTXSYS</code>. To create a default full-text index, <code>CREATE INDEX</code>and add the clause <code>INDEXTYPE IS CTXSYS.CONTEXT</code>. You can choose an indexing preference using a <code>PARAMETERS</code> clause.</p>
<div class="section">
<p><a href="app_depr_otext.htm#GUID-860A2B9A-4A77-4800-8F81-2EBD055F7909__CBBGBBGE">Example E-28</a> creates a <code>CONTEXT</code> index.</p>
<p>You have many choices available when building a full-text index. These choices are expressed as indexing <strong class="term">preferences</strong>. To use an indexing preference, add a <code>PARAMETERS</code> clause to <code>CREATE INDEX</code>, as shown in <a href="app_depr_otext.htm#GUID-860A2B9A-4A77-4800-8F81-2EBD055F7909__CBBEDEHE">Example E-29</a>.</p>
<div class="infoboxnotealso" id="GUID-860A2B9A-4A77-4800-8F81-2EBD055F7909__GUID-3E479D9A-54CE-4E31-B25A-9B6188354B13">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="app_depr_otext.htm#GUID-02456815-5462-4C4D-9DBD-4B31D572066A" title="A preference can be considered a collection of indexing choices. Preferences include section group, datastore, filter, wordlist, stoplist, and storage. You can set up a lexer preference to make searches case-sensitive.">CONTEXT Index Preferences</a>&#34;</span></p>
</div>
<p>Oracle Text provides other index types, such as <code>CTXCAT</code> and <code>CTXRULE</code>, which are outside the scope of this chapter.</p>
<div class="infoboxnotealso" id="GUID-860A2B9A-4A77-4800-8F81-2EBD055F7909__GUID-A3C29823-4AE9-46F4-8DA3-4E92173D7544">
<p class="notep1">See Also:</p>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for more information about <code>CONTEXT</code> indexes</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-860A2B9A-4A77-4800-8F81-2EBD055F7909__CBBGBBGE">
<p class="titleinexample">Example E-28 Simple CONTEXT Index on Table PURCHASE_ORDERS</p>
<pre dir="ltr">CREATE INDEX po_index ON purchase_orders(doc)
  INDEXTYPE IS CTXSYS.CONTEXT;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-860A2B9A-4A77-4800-8F81-2EBD055F7909__CBBEDEHE">
<p class="titleinexample">Example E-29 Simple CONTEXT Index on XMLType Table with Path Section Group</p>
<pre dir="ltr">CREATE INDEX po_index ON purchase_orders(doc)
  INDEXTYPE IS CTXSYS.CONTEXT 
  PARAMETERS (&#39;section group CTXSYS.PATH_SECTION_GROUP&#39;);
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB4810"></a><a id="ADXDB4811"></a><a id="ADXDB4812"></a><a id="ADXDB4809"></a>
<div class="props_rev_3"><a id="GUID-04024055-3409-4CCF-B529-ED697D8D8DA0"></a>
<h5 id="ADXDB-GUID-04024055-3409-4CCF-B529-ED697D8D8DA0" class="sect5"><span class="enumeration_section">E.4.5.1.1</span> Using a CONTEXT Index on an XMLType Table</h5>
<div>
<p>You can build a <code>CONTEXT</code> index on any data that contains text. The syntax to create a <code>CONTEXT</code> index on a column of type <code>CHAR</code>, <code>VARCHAR</code>, <code>VARCHAR2</code>, <code>BLOB</code>, <code>CLOB</code>, <code>BFILE</code>, <code>XMLType</code>, or <code>URIType</code> is the same.</p>
<div class="section">
<p><a href="app_depr_otext.htm#GUID-860A2B9A-4A77-4800-8F81-2EBD055F7909__CBBGBBGE">Example E-28</a> creates a <code>CONTEXT</code> index on a <code>VARCHAR2</code> column. <a href="app_depr_otext.htm#GUID-04024055-3409-4CCF-B529-ED697D8D8DA0__CBBIAGCE">Example E-30</a> creates a <code>CONTEXT</code> index on a column of type <code>XMLType</code>. The section group defaults to <code>PATH_SECTION_GROUP</code>.</p>
<p>If you have an <code>XMLType</code> table, then you must use object syntax to create the <code>CONTEXT</code> index, as shown in <a href="app_depr_otext.htm#GUID-04024055-3409-4CCF-B529-ED697D8D8DA0__CBBIHFAF">Example E-31</a>.</p>
<p>You can query the table, as shown in <a href="app_depr_otext.htm#GUID-04024055-3409-4CCF-B529-ED697D8D8DA0__CBBCHDCC">Example E-32</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-04024055-3409-4CCF-B529-ED697D8D8DA0__CBBIAGCE">
<p class="titleinexample">Example E-30 Simple CONTEXT Index on XMLType Column</p>
<pre dir="ltr">CREATE INDEX po_index_xmltype ON purchase_orders_xmltype(doc)
  INDEXTYPE IS CTXSYS.CONTEXT;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-04024055-3409-4CCF-B529-ED697D8D8DA0__CBBIHFAF">
<p class="titleinexample">Example E-31 Simple CONTEXT Index on XMLType Table</p>
<pre dir="ltr">CREATE INDEX po_index_xmltype_table 
  ON purchase_orders_xmltype_table (OBJECT_VALUE)
  INDEXTYPE IS CTXSYS.CONTEXT;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-04024055-3409-4CCF-B529-ED697D8D8DA0__CBBCHDCC">
<p class="titleinexample">Example E-32 CONTAINS Query on XMLType Table</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(
                 &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
                  $p/purchaseOrder/@orderDate&#39;
                 PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS DATE) &#34;Order Date&#34;
  FROM purchase_orders_xmltype_table po
  WHERE contains(po.OBJECT_VALUE, &#39;electric INPATH (/purchaseOrder//comment)&#39;)
        &gt; 0;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4813"></a>
<div class="props_rev_3"><a id="GUID-57B33D8A-D17C-45D9-B9F8-91B3D3765004"></a>
<h5 id="ADXDB-GUID-57B33D8A-D17C-45D9-B9F8-91B3D3765004" class="sect5"><span class="enumeration_section">E.4.5.1.2</span> Maintaining a CONTEXT Index</h5>
<div>
<p>A <code>CONTEXT</code> index is asynchronous. When indexed data changes, the index might not change until you synchronize it. A <code>CONTEXT</code> index can become fragmented over time. A fragmented index uses more space and leads to slower queries. There are a number of ways to optimize (defragment) the <code>CONTEXT</code> index.</p>
<div class="section">
<div class="infoboxnotealso" id="GUID-57B33D8A-D17C-45D9-B9F8-91B3D3765004__GUID-347CB5DD-9B29-4EC0-8F36-F92566304534">
<p class="notep1">See Also:</p>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for more information about <code>CONTEXT</code> index maintenance</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDB4814"></a>
<div class="props_rev_3"><a id="GUID-493B6045-6BA5-4281-92F4-083EAA83EE67"></a>
<h5 id="ADXDB-GUID-493B6045-6BA5-4281-92F4-083EAA83EE67" class="sect5"><span class="enumeration_section">E.4.5.1.3</span> Roles and Privileges for CONTEXT Indexing</h5>
<div>
<p>You do not need any special privileges to create a <code>CONTEXT</code> index. You need the <code>CTXAPP</code> role to create and delete preferences and to use the Oracle Text PL/SQL packages. You must also have <code>EXECUTE</code> privilege on the <code>CTXSYS</code> package <code>CTX_DDL</code>.</p>
</div>
</div>
</div>
<a id="ADXDB4815"></a>
<div class="props_rev_3"><a id="GUID-815A018F-DBB2-4446-9367-E151691484F7"></a>
<h4 id="ADXDB-GUID-815A018F-DBB2-4446-9367-E151691484F7" class="sect4"><span class="enumeration_section">E.4.5.2</span> Effect of a CONTEXT Index on CONTAINS</h4>
<div>
<p>To use Oracle SQL function <code>contains</code>, you must create an index of type <code>CONTEXT</code>. If you call <code>contains</code>and the column given in the first argument does not have an index of type <code>CONTEXT</code>, then an error is raised.</p>
<p>The syntax and semantics of <code>text_query</code> depend on the choices you make when you build the <code>CONTEXT</code> index. For example:</p>
<ul style="list-style-type: disc;">
<li>
<p>What counts as a word?</p>
</li>
<li>
<p>Are very common words processed?</p>
</li>
<li>
<p>What is a common word?</p>
</li>
<li>
<p>Is the text search case-sensitive?</p>
</li>
<li>
<p>Can the text search include themes (concepts) in addition to keywords?</p>
</li>
</ul>
</div>
</div>
<a id="ADXDB4816"></a>
<div class="props_rev_3"><a id="GUID-02456815-5462-4C4D-9DBD-4B31D572066A"></a>
<h4 id="ADXDB-GUID-02456815-5462-4C4D-9DBD-4B31D572066A" class="sect4"><span class="enumeration_section">E.4.5.3</span> CONTEXT Index Preferences</h4>
<div>
<p>A preference can be considered a collection of indexing choices. Preferences include section group, datastore, filter, wordlist, stoplist, and storage. You can set up a lexer preference to make searches case-sensitive.</p>
<p>You can use procedure <code>CTX_DDL.create_preference</code> (or <code>CTX_DDL.create_stoplist</code>) to create a preference. Override default choices in that preference group by setting attributes of the new preference, using procedure <code>CTX_DDL.set_attribute</code>. Then use the preference in a <code>CONTEXT</code> index by including <span class="italic"><code>preference type preference_name</code></span> in the <code>PARAMETERS</code> string of <code>CREATE INDEX</code>.</p>
<p>Once a preference has been created, you can use it to build any number of indexes.</p>
</div>
<a id="ADXDB4818"></a><a id="ADXDB4819"></a><a id="ADXDB4820"></a><a id="ADXDB4821"></a><a id="ADXDB4817"></a>
<div class="props_rev_3"><a id="GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B"></a>
<h5 id="ADXDB-GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B" class="sect5"><span class="enumeration_section">E.4.5.3.1</span> Making Search Case-Sensitive</h5>
<div>
<p>Full-text searches with <code>contains</code> are <span class="italic">case-insensitive</span>, by default. When matching words in <code>text_query</code> against words in the document, case is not considered. Section names and attribute names, however, are always <span class="italic">case-sensitive</span>. You can choose to make full-text searches case-sensitive when building the <code>CONTEXT</code> index.</p>
<div class="section">
<p><a href="app_depr_otext.htm#GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B__CBBDFAIE">Example E-33</a> returns 1 row, because &#34;<code>HURRY</code>&#34; in <code>text_query</code> matches &#34;<code>Hurry</code>&#34; in the <code>purchaseOrder</code> with the default case-insensitive index.</p>
<p><a href="app_depr_otext.htm#GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B__CBBICFIE">Example E-34</a> creates a new lexer preference <code>my_lexer</code>, with the attribute <code>mixed_case</code> set to <code>TRUE</code>. It also sets printjoin characters to &#34;<code>-</code>&#34; and &#34;<code>!</code>&#34; and &#34;<code>,</code>&#34;. You can use the same preferences for building <code>CONTEXT</code> indexes and for building policies.</p>
<div class="infoboxnotealso" id="GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B__GUID-253BA377-FB8C-4E56-B4C6-49E46AA71B67">
<p class="notep1">See Also:</p>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for a full list of lexer attributes</p>
</div>
<p><a href="app_depr_otext.htm#GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B__CBBDBGEB">Example E-35</a> builds a <code>CONTEXT</code> index using the new <code>my_lexer</code> lexer preference. It uses preference <code>preference-case-mixed</code>.</p>
<p><a href="app_depr_otext.htm#GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B__CBBDFAIE">Example E-33</a> returns no rows, because &#34;<code>HURRY</code>&#34; in <code>text_query</code> no longer matches &#34;<code>Hurry</code>&#34; in the <code>purchaseOrder</code>. <a href="app_depr_otext.htm#GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B__CBBCFAHI">Example E-36</a> returns one row, because the <code>text_query</code> term &#34;<code>Hurry</code>&#34; exactly matches the word &#34;<code>Hurry</code>&#34; in the <code>purchaseOrder</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B__CBBDFAIE">
<p class="titleinexample">Example E-33 CONTAINS: Default Case Matching</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;HURRY INPATH (/purchaseOrder/comment)&#39;) &gt; 0;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B__CBBICFIE">
<p class="titleinexample">Example E-34 Create a Preference for Mixed Case</p>
<pre dir="ltr">BEGIN
  CTX_DDL.create_preference(PREFERENCE_NAME  =&gt;  &#39;my_lexer&#39;,
                            OBJECT_NAME      =&gt;  &#39;BASIC_LEXER&#39;);
    
  CTX_DDL.set_attribute(PREFERENCE_NAME  =&gt;  &#39;my_lexer&#39;, 
                        ATTRIBUTE_NAME   =&gt;  &#39;mixed_case&#39;, 
                        ATTRIBUTE_VALUE  =&gt;  &#39;TRUE&#39;);
    
  CTX_DDL.set_attribute(PREFERENCE_NAME  =&gt;  &#39;my_lexer&#39;, 
                        ATTRIBUTE_NAME   =&gt;  &#39;printjoins&#39;, 
                        ATTRIBUTE_VALUE  =&gt;  &#39;-,!&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B__CBBDBGEB">
<p class="titleinexample">Example E-35 CONTEXT Index on PURCHASE_ORDERS Table, Mixed Case</p>
<pre dir="ltr">CREATE INDEX po_index ON purchase_orders(doc)
  INDEXTYPE IS CTXSYS.CONTEXT
  PARAMETERS(&#39;lexer my_lexer section group CTXSYS.PATH_SECTION_GROUP&#39;);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3605A88E-A173-4060-BE9A-A5FF8866D86B__CBBCFAHI">
<p class="titleinexample">Example E-36 CONTAINS: Mixed (Exact) Case Matching</p>
<pre dir="ltr">SELECT id FROM purchase_orders
  WHERE contains(doc, &#39;Hurry INPATH (/purchaseOrder/comment)&#39;) &gt; 0;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB4822"></a>
<div class="props_rev_3"><a id="GUID-827AC6FB-C88B-4F3C-940B-B3748F0AD507"></a>
<h4 id="ADXDB-GUID-827AC6FB-C88B-4F3C-940B-B3748F0AD507" class="sect4"><span class="enumeration_section">E.4.5.4</span> Introduction to Section Groups</h4>
<div>
<p>A section group instance is based on a section group type, which specifies the structure of your documents, and how to index (and therefore search) that structure. A section group instance can specify which elements are indexed. Most users use either the default section group or a predefined section group.</p>
<p>One of the choices you make when creating a <code>CONTEXT</code> index is section group. A section group instance is based on a section group type. The section group type specifies the kind of structure in your documents, and how to index (and therefore search) that structure. The section group instance may specify which structure elements are indexed. Most users either take the default section group or use a predefined section group.</p>
</div>
<a id="ADXDB4823"></a>
<div class="props_rev_3"><a id="GUID-0C18256B-28A5-46F8-9874-E5E967E8C140"></a>
<h5 id="ADXDB-GUID-0C18256B-28A5-46F8-9874-E5E967E8C140" class="sect5"><span class="enumeration_section">E.4.5.4.1</span> Choosing a Section Group Type</h5>
<div>
<p>The section group types useful in XML searching without XQuery Full Text are described.</p>
<div class="section">
<p>Oracle recommends that most users with XML full-text search requirements use <code>PATH_SECTION_GROUP</code>. Some users might prefer <code>XML_SECTION_GROUP</code> with <code>FIELD</code> sections. This choice generally gives better query performance and a smaller index, but it is limited to documents with fielded structure (searchable nodes are all leaf nodes that do not repeat).</p>
<p>The section group types useful for use with XML are the following:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>PATH_SECTION_GROUP</code></p>
<p>Choose this when you want to use <code>WITHIN</code>, <code>INPATH</code> and <code>HASPATH</code> in queries, and you want to be able to consider all sections to scope the query.</p>
</li>
<li>
<p><code>XML_SECTION_GROUP</code></p>
<p>Choose this when you want to use <code>WITHIN</code>, but not <code>INPATH</code> and <code>HASPATH</code>, in queries, and you want to be able to consider only explicitly-defined sections to scope the query. <code>XML_SECTION_GROUP</code> section group type supports <code>FIELD</code> sections in addition to <code>ZONE</code> sections. In some cases <code>FIELD</code> sections offer significantly better query performance.</p>
</li>
<li>
<p><code>AUTO_SECTION_GROUP</code></p>
<p>Choose this when you want to use <code>WITHIN</code>, but not <code>INPATH</code> and <code>HASPATH</code>, in queries, and you want to be able to consider most sections to scope the query. By default all sections are indexed (available for query restriction). You can specify that some sections are <span class="italic">not</span> indexed (by defining <code>STOP</code> sections).</p>
</li>
<li>
<p><code>NULL_SECTION_GROUP</code></p>
<p>Choose this when defining no XML sections.</p>
</li>
</ul>
<p>Other section group types include:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>BASIC_SECTION_GROUP</code></p>
</li>
<li>
<p><code>HTML_SECTION_GROUP</code></p>
</li>
<li>
<p><code>NEWS_SECTION_GROUP</code></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-0C18256B-28A5-46F8-9874-E5E967E8C140__GUID-48F36819-04E1-4EA3-A7E4-66AB8D51EE12">
<p class="notep1">See Also:</p>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for a detailed description of the <code>XML_SECTION_GROUP</code> section group type</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDB4825"></a><a id="ADXDB4824"></a>
<div class="props_rev_3"><a id="GUID-81FCC375-E7BA-4C50-BE2B-F6A5F02F8E09"></a>
<h5 id="ADXDB-GUID-81FCC375-E7BA-4C50-BE2B-F6A5F02F8E09" class="sect5"><span class="enumeration_section">E.4.5.4.2</span> Choosing a Section Group</h5>
<div>
<p>When choosing a section group to use with your index, you can choose a supplied section group or the default section group, or you can create a new section group based on an existing section group.</p>
<div class="section">
<p>There are supplied section groups for section group types <code>PATH_SECTION_GROUP</code>, <code>AUTO_SECTION_GROUP</code>, and <code>NULL_SECTION_GROUP</code>. The supplied section groups are owned by <code>CTXSYS</code> and have the same name as their section group types. For example, the supplied section group of section group type <code>PATH_SECTION_GROUP</code> is <code>CTXSYS.PATH_SECTION_GROUP</code>.</p>
<p>There is no supplied section group for section group type <code>XML_SECTION_GROUP</code>, because a default <code>XML_SECTION_GROUP</code> would be empty and therefore meaningless. If you want to use section group type <code>XML_SECTION_GROUP</code>, then you must create a new section group and specify each node that you want to include as a section.</p>
<p>When you create a <code>CONTEXT</code> index on data of type <code>XMLType</code>, the default section group is the supplied section group <code>CTXSYS.PATH_SECTION_GROUP</code>. If the data is <code>VARCHAR</code> or <code>CLOB</code>, then the default section group is <code>CTXSYS.NULL_SECTION_GROUP</code>.</p>
<div class="infoboxnotealso" id="GUID-81FCC375-E7BA-4C50-BE2B-F6A5F02F8E09__GUID-3F50EA5C-ED81-4179-86A9-E4E3789FDA91">
<p class="notep1">See Also:</p>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for instructions on creating your own section group</p>
</div>
<p>To associate a section group with an index, add <code>section group &lt;section group name&gt;</code> to the <code>PARAMETERS</code> string, as in <a href="app_depr_otext.htm#GUID-81FCC375-E7BA-4C50-BE2B-F6A5F02F8E09__CBBIHCJJ">Example E-37</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-81FCC375-E7BA-4C50-BE2B-F6A5F02F8E09__CBBIHCJJ">
<p class="titleinexample">Example E-37 Simple CONTEXT Index on purchase_orders Table with Path Section Group</p>
<pre dir="ltr">CREATE INDEX po_index ON purchase_orders(doc)
  INDEXTYPE IS CTXSYS.CONTEXT 
  PARAMETERS (&#39;section group CTXSYS.PATH_SECTION_GROUP&#39;);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
</div>
<a id="ADXDB4826"></a>
<div class="props_rev_3"><a id="GUID-BD718D3E-920A-4C81-ADDF-C3C799A78DC5"></a>
<h2 id="ADXDB-GUID-BD718D3E-920A-4C81-ADDF-C3C799A78DC5" class="sect2"><span class="enumeration_section">E.5</span> ora:contains XQuery Function</h2>
<div>
<p>Function <code>ora:contains</code> is an Oracle-defined XQuery (XPath) function for use in the XQuery expression argument to SQL/XML functions <code>XMLQuery</code>, <code>XMLTable</code>, and <code>XMLExists</code>. Function <code>ora:contains</code> always returns a number. It does <span class="italic">not</span> return a score. It returns a positive number if the <code>text_query</code> matches the <code>input_text</code>. Otherwise it returns zero.</p>
<p>When you use <code>ora:contains</code> you must also supply a namespace declaration that maps prefix <code>ora</code> to the Oracle XML&nbsp;DB namespace, <code>xmlns:ora=&#34;http://xmlns.oracle.com/xdb&#34;</code>.</p>
</div>
<a id="ADXDB4827"></a>
<div class="props_rev_3"><a id="GUID-C92043EA-1077-46F1-A85D-F852A567BBFF"></a>
<h3 id="ADXDB-GUID-C92043EA-1077-46F1-A85D-F852A567BBFF" class="sect3"><span class="enumeration_section">E.5.1</span> Full-Text Search Using XQuery Function ora:contains</h3>
<div>
<p><code>ora:contains</code> argument <span class="italic"><code>text_query</code></span> is a string that specifies the full-text search. It is the same as the <span class="italic"><code>text_query</code></span>argument for SQL function <code>contains</code> <span class="italic"><code>text_query</code></span>, but with a few restrictions.</p>
<ul style="list-style-type: disc;">
<li>
<p><code>ora:contains</code> <span class="italic"><code>text_query</code></span> must <span class="italic">not</span> include any of the structure operators <code>WITHIN</code>, <code>INPATH</code>, or <code>HASPATH</code></p>
</li>
<li>
<p><code>ora:contains</code> <span class="italic"><code>text_query</code></span> can include the score weighting operator <code>weight(*)</code>, but weights are <span class="italic">ignored</span></p>
</li>
</ul>
<p>If you include any of the following in the <code>ora:contains</code> <span class="italic"><code>text_query</code></span>, the query <span class="italic">cannot</span> use a <code>CONTEXT</code> index:</p>
<ul style="list-style-type: disc;">
<li>
<p>Score-based operator <code>MINUS</code> (<code>-</code>) or <code>threshold</code> (<code>&gt;</code>)</p>
</li>
<li>
<p>Selective, corpus-based expansion operator <code>FUZZY</code> (<code>?</code>) or <code>soundex</code> (<code>!</code>)</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-C92043EA-1077-46F1-A85D-F852A567BBFF__GUID-4517E0D6-B06E-490E-85E5-37F973C44707">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="app_depr_otext.htm#GUID-845429DB-A464-4649-9FE3-A87E1E30A356" title="Although Oracle XQuery function ora:contains does not rely on a supporting index, when XPath rewrite occurs ora:contains can often make use of an existing CONTEXT index for better performance.">XPath Rewrite and CONTEXT Indexes</a>&#34;</span></p>
</div>
<p><a href="app_depr_otext.htm#GUID-20ECBB32-B266-43C0-9DF4-5D065814878B__CBBDJJAI">Example E-4</a> shows a full-text search using an arbitrary combination of Boolean operators and <code>$</code> (stemming).</p>
<div class="infoboxnotealso" id="GUID-C92043EA-1077-46F1-A85D-F852A567BBFF__GUID-607F7539-493C-4BCA-8154-6218BF0CD362">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="app_depr_otext.htm#GUID-80067EDC-AEA9-4793-B805-6FB60CA3A140" title="The second argument to Oracle SQL function contains, text_query, is a string that specifies the full-text search. text_query has its own language, based on the SQL/MM Full-Text standard.">Full-Text Search Using SQL Function CONTAINS</a>&#34;</span> for a description of full-text operators</p>
</li>
<li>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for a full list of the operators you can use in <code>contains</code> and <code>ora:contains</code></p>
</li>
</ul>
</div>
<p>Matching rules are defined by the <span class="italic">policy</span>, <span class="italic"><code>policy_owner</code></span><code>.</code><span class="italic"><code>policy_name</code></span>. If <span class="italic"><code>policy_owner</code></span> is absent, then the policy owner defaults to the current user. If both <span class="italic"><code>policy_name</code></span> and <span class="italic"><code>policy_owner</code></span> are absent, then the policy defaults to <code>CTXSYS.DEFAULT_POLICY_ORACONTAINS</code>.</p>
</div>
</div>
<a id="ADXDB4829"></a>
<div class="props_rev_3"><a id="GUID-73B73D13-9CC3-4168-A67D-EFFCA6709CED"></a>
<h3 id="ADXDB-GUID-73B73D13-9CC3-4168-A67D-EFFCA6709CED" class="sect3"><span class="enumeration_section">E.5.2</span> Scope of an ora:contains Query</h3>
<div>
<p>The scope of <code>ora:contains</code> is defined by argument <span class="italic"><code>input_text</code></span>, which is evaluated in the current XPath context. If the result is a single text node or attribute then that is the search target. If <span class="italic"><code>input_text</code></span> does not evaluate to a single text node or attribute, an error is raised.</p>
<p>The policy determines the matching rules for <code>ora:contains</code>. The section group associated with the default policy for <code>ora:contains</code> is of type <code>NULL_SECTION_GROUP</code>.</p>
<p>You can use <code>ora:contains</code> anywhere in an XPath expression, and its <span class="italic"><code>input_text</code></span> argument can be any XPath expression that evaluates to a single text node or an attribute.</p>
</div>
</div>
<a id="ADXDB4831"></a><a id="ADXDB4830"></a>
<div class="props_rev_3"><a id="GUID-212CCF3B-C99D-4C62-89AA-E16E11B41D1A"></a>
<h3 id="ADXDB-GUID-212CCF3B-C99D-4C62-89AA-E16E11B41D1A" class="sect3"><span class="enumeration_section">E.5.3</span> Projecting the ora:contains Result</h3>
<div>
<p>If you want to return only a part of each XML document, then use function <code>XMLQuery</code> to project a node sequence, possibly applying <code>XMLCast</code> to the result to project the scalar value of a node.</p>
<div class="section">
<p><a href="app_depr_otext.htm#GUID-212CCF3B-C99D-4C62-89AA-E16E11B41D1A__CBBHCGCA">Example E-38</a> returns the <code>orderDate</code> for each purchase order that has a <code>comment</code> that contains the word &#34;<code>lawn</code>&#34;.</p>
<p>Function <code>XMLExists</code> restricts the result to rows (documents) where the <code>purchaseOrder</code> element includes some <code>comment</code> that contains the word &#34;<code>lawn</code>&#34;. Function <code>XMLQuery</code> then returns the value of attribute <code>orderDate</code> from those <code>purchaseOrder</code> elements. Function <code>XMLCast</code> casts this result as a SQL <code>DATE</code> value.</p>
<p>If <code>//comment</code> had been extracted, then both comments from the sample document would have been returned, not just the comment that matches the <code>WHERE</code> clause.</p>
<div class="infoboxnotealso" id="GUID-212CCF3B-C99D-4C62-89AA-E16E11B41D1A__GUID-F97C005E-96F8-4F50-A262-5212852C1E73">
<p class="notep1">See Also:</p>
<p><a href="app_depr_otext.htm#GUID-C5DECFEE-2C50-455E-ABA1-D287687496AD__CBBCGDJG">Example E-26</a></p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-212CCF3B-C99D-4C62-89AA-E16E11B41D1A__CBBHCGCA">
<p class="titleinexample">Example E-38 Using ora:contains with XMLQuery and XMLExists</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(
                 &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
                  $d/purchaseOrder/@orderDate&#39;
                 PASSING doc AS &#34;d&#34; RETURNING CONTENT)
               AS DATE) &#34;Order date&#34;
  FROM purchase_orders_xmltype
  WHERE XMLExists(
          &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
           $d/purchaseOrder/comment
             [ora:contains(text(), &#34;($lawns AND wild) OR flamingo&#34;) &gt; 0]&#39;
          PASSING doc AS &#34;d&#34;);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4832"></a>
<div class="props_rev_3"><a id="GUID-312D13E7-8A9C-4310-B993-4FC82271DB2A"></a>
<h3 id="ADXDB-GUID-312D13E7-8A9C-4310-B993-4FC82271DB2A" class="sect3"><span class="enumeration_section">E.5.4</span> Using Policies with ora:contains Queries</h3>
<div>
<p>A <strong class="term">policy</strong> is a collection of preferences that can be associated with an <code>ora:contains</code> query to provide the same sort of semantic control as the indexing choices for SQL <code>contains</code>.</p>
<div class="section">
<p>The <code>CONTEXT</code> index on a column determines the semantics of SQL <code>contains</code> queries on that column. Policies are provided for <code>ora:contains</code> because it does not rely on a supporting index.</p>
</div>
<!-- class="section" --></div>
<a id="ADXDB4835"></a><a id="ADXDB4836"></a><a id="ADXDB4837"></a><a id="ADXDB4834"></a>
<div class="props_rev_3"><a id="GUID-FC90C5E4-328A-408F-9500-B18267C872DC"></a>
<h4 id="ADXDB-GUID-FC90C5E4-328A-408F-9500-B18267C872DC" class="sect4"><span class="enumeration_section">E.5.4.1</span> Policy Example: Supplied Stoplist</h4>
<div>
<p>Examples are shown that create a policy with an empty stopwords list and then query using <code>ora:contains</code> with and without the policy, to show the difference.</p>
<p><a href="app_depr_otext.htm#GUID-FC90C5E4-328A-408F-9500-B18267C872DC__CBBIHDII">Example E-39</a> creates a policy with an empty stopwords list.</p>
<p>For simplicity, this policy consists of an empty stoplist, which is owned by user <code>CTXSYS</code>. You could create a new stoplist to include in this policy, or you could reuse a stoplist (or lexer) definition that you created for a <code>CONTEXT</code> index.</p>
<p>Refer to this policy in an <code>ora:contains</code> expression to search for all words, including the most common ones (stopwords). <a href="app_depr_otext.htm#GUID-FC90C5E4-328A-408F-9500-B18267C872DC__CBBBAJDA">Example E-40</a> returns zero comments, because &#34;<code>is</code>&#34; is a stopword by default and cannot be queried.</p>
<p><a href="app_depr_otext.htm#GUID-FC90C5E4-328A-408F-9500-B18267C872DC__CBBDECHB">Example E-41</a> uses the policy created in <a href="app_depr_otext.htm#GUID-FC90C5E4-328A-408F-9500-B18267C872DC__CBBIHDII">Example E-39</a> to specify an empty stopword list. This query finds &#34;<code>is</code>&#34; and returns 1 comment.</p>
<p><a href="app_depr_otext.htm#GUID-FC90C5E4-328A-408F-9500-B18267C872DC__CBBDECHB">Example E-41</a> uses policy <code>my_nostopwords_policy</code>. This policy was implicitly named as all uppercase, in <a href="app_depr_otext.htm#GUID-FC90C5E4-328A-408F-9500-B18267C872DC__CBBIHDII">Example E-39</a>. Because XPath is case-sensitive, it must be referred to in the XPath predicate using all uppercase: <code>MY_NOSTOPWORDS_POLICY</code>, not <code>my_nostopwords_policy</code>.</p>
<div class="infoboxnotealso" id="GUID-FC90C5E4-328A-408F-9500-B18267C872DC__GUID-1A7779DB-CF8E-41FF-815E-288A3084048B">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="app_depr_otext.htm#GUID-02456815-5462-4C4D-9DBD-4B31D572066A" title="A preference can be considered a collection of indexing choices. Preferences include section group, datastore, filter, wordlist, stoplist, and storage. You can set up a lexer preference to make searches case-sensitive.">CONTEXT Index Preferences</a>&#34;</span></p>
</div>
<div class="example" id="GUID-FC90C5E4-328A-408F-9500-B18267C872DC__CBBIHDII">
<p class="titleinexample">Example E-39 Create a Policy to Use with ora:contains</p>
<pre dir="ltr">BEGIN
  CTX_DDL.create_policy(POLICY_NAME  =&gt;  &#39;<span class="bold">my_nostopwords_policy</span>&#39;,
                        STOPLIST     =&gt;  &#39;CTXSYS.EMPTY_STOPLIST&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-FC90C5E4-328A-408F-9500-B18267C872DC__CBBBAJDA">
<p class="titleinexample">Example E-40 Finding a Stopword Using ora:contains</p>
<pre dir="ltr">SELECT id FROM purchase_orders_xmltype
  WHERE XMLExists(
          &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
           $d/purchaseOrder/comment[ora:contains(text(), &#34;<span class="bold">is</span>&#34;) &gt; 0]&#39;
          PASSING doc AS &#34;d&#34;);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-FC90C5E4-328A-408F-9500-B18267C872DC__CBBDECHB">
<p class="titleinexample">Example E-41 Finding a Stopword Using ora:contains and Policy my_nostopwords_policy</p>
<pre dir="ltr">SELECT id FROM purchase_orders_xmltype
  WHERE XMLExists(
          &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
           $d/purchaseOrder/comment
             [ora:contains(text(), &#34;is&#34;, &#34;<span class="bold">MY_NOSTOPWORDS_POLICY</span>&#34;) &gt; 0]&#39;
          PASSING doc AS &#34;d&#34;);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4838"></a>
<div class="props_rev_3"><a id="GUID-FE2B8721-5D9A-4131-AF52-AD91260D3E9D"></a>
<h4 id="ADXDB-GUID-FE2B8721-5D9A-4131-AF52-AD91260D3E9D" class="sect4"><span class="enumeration_section">E.5.4.2</span> Effect of Policies on ora:contains</h4>
<div>
<p>An <code>ora:contains</code> policy affects the matching semantics of <code>text_query</code>. The policy can include a lexer, stoplist, wordlist preference, or any combination of these. Other preferences that can be used to build a <code>CONTEXT</code> index are not applicable to <code>ora:contains</code>.</p>
<p>The effects of the preferences are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>The wordlist preference tweaks the semantics of the stem operator.</p>
</li>
<li>
<p>The stoplist preference defines which words are too common to be indexed (searchable).</p>
</li>
<li>
<p>The lexer preference defines how words are tokenized and matched. For example, it defines which characters count as part of a word and whether matching is case-sensitive.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-FE2B8721-5D9A-4131-AF52-AD91260D3E9D__GUID-F735413B-5DF1-4F4E-8757-35D167CF4594">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="app_depr_otext.htm#GUID-FC90C5E4-328A-408F-9500-B18267C872DC" title="Examples are shown that create a policy with an empty stopwords list and then query using ora:contains with and without the policy, to show the difference.">Policy Example: Supplied Stoplist</a>&#34;</span> for an example of building a policy with a predefined stoplist</p>
</li>
<li>
<p><span class="q">&#34;<a href="app_depr_otext.htm#GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24" title="Examples illustrate the definition and use of a lexer preference on ora:contains searches.">Policy Example: User-Defined Lexer</a>&#34;</span> for an example of a case-sensitive policy</p>
</li>
</ul>
</div>
</div>
<a id="ADXDB4840"></a><a id="ADXDB4841"></a><a id="ADXDB4842"></a><a id="ADXDB4843"></a><a id="ADXDB4844"></a><a id="ADXDB4839"></a>
<div class="props_rev_3"><a id="GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24"></a>
<h5 id="ADXDB-GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24" class="sect5"><span class="enumeration_section">E.5.4.2.1</span> Policy Example: User-Defined Lexer</h5>
<div>
<p>Examples illustrate the definition and use of a lexer preference on <code>ora:contains</code> searches.</p>
<div class="section">
<p>When you search for a document that contains a particular word, you usually want the search to be case-insensitive. A case-sensitive search often misses some expected results. For example, if you search for <code>purchaseOrders</code> that contain the phrase &#34;baby monitor&#34;, then you would not expect to miss our example document just because the phrase is written &#34;Baby Monitor&#34;.</p>
<p>Full-text searches with <code>ora:contains</code> are case-insensitive by default. Section names and attribute names, however, are always case-sensitive.</p>
<p>If you want full-text searches to be case-sensitive, then you need to make that choice when you create a policy. You can use this procedure:</p>
<ol>
<li>
<p>Create a preference using the procedure <code>CTX_DDL.create_preference</code> (or <code>CTX_DDL.create_stoplist</code>).</p>
</li>
<li>
<p>Override default choices in that preference object by setting attributes of the new preference, using procedure <code>CTX_DDL.set_attribute</code>.</p>
</li>
<li>
<p>Use the preference as a parameter to <code>CTX_DDL.create_policy</code>.</p>
</li>
<li>
<p>Use the policy name as the third argument to <code>ora:contains</code> in a query.</p>
</li>
</ol>
<p>Once you have created a preference, you can reuse it in other policies or in <code>CONTEXT</code> index definitions. You can use any policy with any <code>ora:contains</code> query.</p>
<p><a href="app_depr_otext.htm#GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBEEEJC">Example E-42</a> returns 1 row, because &#34;<code>HURRY</code>&#34; in <code>text_query</code> matches &#34;<code>Hurry</code>&#34; in the <code>purchaseOrder</code> with the default case-insensitive index.</p>
<p><a href="app_depr_otext.htm#GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBBCIEG">Example E-43</a> creates a new lexer preference <code>my_lexer</code>, with the attribute <code>mixed_case</code> set to <code>TRUE</code>. It also sets <code>printjoin</code> characters to &#34;<code>-</code>&#34;, &#34;<code>!</code>&#34; and &#34;<code>,</code>&#34;. You can use the same preferences for building <code>CONTEXT</code> indexes and for building policies.</p>
<div class="infoboxnotealso" id="GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__GUID-7123E153-C3A9-47FB-BBD8-DF80EBAC62AF">
<p class="notep1">See Also:</p>
<p><a class="olink CCREF" target="_blank" href="../CCREF/toc.htm"><span class="italic">Oracle Text Reference</span></a> for a full list of lexer attributes</p>
</div>
<p><a href="app_depr_otext.htm#GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBBAJJH">Example E-44</a> creates a new policy <code>my_policy</code> and specifies only the lexer. All other preferences are defaulted. <a href="app_depr_otext.htm#GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBBAJJH">Example E-44</a> uses <code>preference-case-mixed</code>.</p>
<p><a href="app_depr_otext.htm#GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBFABFI">Example E-45</a> uses the new policy in a query. It returns no rows, because &#34;<code>HURRY</code>&#34; in <code>text_query</code> no longer matches &#34;<code>Hurry</code>&#34; in the <code>purchaseOrder</code>.</p>
<p><a href="app_depr_otext.htm#GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBJDCJI">Example E-46</a> returns one row, because the <code>text_query</code> term &#34;<code>Hurry</code>&#34; exactly matches the text &#34;<code>Hurry</code>&#34; in the <code>comment</code> element.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBEEEJC">
<p class="titleinexample">Example E-42 ora:contains, Default Case-Sensitivity</p>
<pre dir="ltr">SELECT id FROM purchase_orders_xmltype
  WHERE XMLExists(
          &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
           $d/purchaseOrder/comment[ora:contains(text(), &#34;HURRY&#34;) &gt; 0]&#39;
          PASSING doc AS &#34;d&#34;);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBBCIEG">
<p class="titleinexample">Example E-43 Create a Preference for Mixed Case</p>
<pre dir="ltr">BEGIN
  CTX_DDL.create_preference(PREFERENCE_NAME  =&gt;  &#39;my_lexer&#39;,
                            OBJECT_NAME      =&gt;  &#39;BASIC_LEXER&#39;);
  CTX_DDL.set_attribute(PREFERENCE_NAME  =&gt;  &#39;MY_LEXER&#39;, 
                        ATTRIBUTE_NAME   =&gt;  &#39;MIXED_CASE&#39;, 
                        ATTRIBUTE_VALUE  =&gt;  &#39;TRUE&#39;);
  CTX_DDL.set_attribute(PREFERENCE_NAME  =&gt;  &#39;my_lexer&#39;, 
                        ATTRIBUTE_NAME   =&gt;  &#39;printjoins&#39;, 
                        ATTRIBUTE_VALUE  =&gt;  &#39;-,!&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBBAJJH">
<p class="titleinexample">Example E-44 Create a Policy with Mixed Case (Case-Insensitive)</p>
<pre dir="ltr">BEGIN
  CTX_DDL.create_policy(POLICY_NAME  =&gt; &#39;my_policy&#39;,
                        LEXER        =&gt; &#39;my_lexer&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBFABFI">
<p class="titleinexample">Example E-45 ora:contains, Case-Sensitive (1)</p>
<pre dir="ltr">SELECT id FROM purchase_orders_xmltype
  WHERE XMLExists(
          &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
           $d/purchaseOrder/comment
             [ora:contains(text(), &#34;HURRY&#34;, &#34;my_policy&#34;) &gt; 0]&#39;
          PASSING doc AS &#34;d&#34;);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBJDCJI">
<p class="titleinexample">Example E-46 ora:contains, Case-Sensitive (2)</p>
<pre dir="ltr">SELECT id FROM purchase_orders_xmltype
  WHERE XMLExists(
          &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
           $d/purchaseOrder/comment[ora:contains(text(), &#34;Hurry&#34;) &gt; 0]&#39;
          PASSING doc AS &#34;d&#34;);
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB4845"></a>
<div class="props_rev_3"><a id="GUID-201FAE15-CC92-4069-910E-138944298FCF"></a>
<h4 id="ADXDB-GUID-201FAE15-CC92-4069-910E-138944298FCF" class="sect4"><span class="enumeration_section">E.5.4.3</span> Policy Defaults</h4>
<div>
<p>The policy argument to <code>ora:contains</code> is optional. If it is omitted, then the query uses the default policy <code>CTXSYS.DEFAULT_POLICY_ORACONTAINS</code>.</p>
<p>When you create a policy for use with <code>ora:contains</code>, you do not need to specify every preference. In <a href="app_depr_otext.htm#GUID-6E1702D0-9190-4FE7-8B2A-0E3C95892A24__CBBBAJJH">Example E-44</a>, for example, only the lexer preference was specified. For the preferences that are not specified, <code>CREATE_POLICY</code> uses the default preferences:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>CTXSYS.DEFAULT_LEXER</code></p>
</li>
<li>
<p><code>CTXSYS.DEFAULT_STOPLIST</code></p>
</li>
<li>
<p><code>CTXSYS.DEFAULT_ WORDLIST</code></p>
</li>
</ul>
<p>Creating a policy follows copy semantics for preferences and their attributes, just as creating a <code>CONTEXT</code> index follows copy semantics for index metadata.</p>
</div>
</div>
</div>
<a id="ADXDB4846"></a>
<div class="props_rev_3"><a id="GUID-63E09BF3-2548-4476-BB4A-D3EC68A67DE8"></a>
<h3 id="ADXDB-GUID-63E09BF3-2548-4476-BB4A-D3EC68A67DE8" class="sect3"><span class="enumeration_section">E.5.5</span> Improving the Performance of ora:contains</h3>
<div>
<p>XPath function <code>ora:contains</code> does not depend on a supporting index. It is very flexible. But if you use it to search across large amounts of data without an index, then it can also be resource-intensive. Techniques are shown that can help you improve performance in such cases.</p>
<div class="section">
<p>This section shows how to get the best performance from queries that include XPath expressions with XPath function <code>ora:contains</code>.</p>
<div class="infobox-note" id="GUID-63E09BF3-2548-4476-BB4A-D3EC68A67DE8__GUID-6BF4DAB7-7BE1-40A9-8C9C-9958BB034258">
<p class="notep1">Note:</p>
<p>Function-based indexes can also be very effective in speeding up XML queries, but they are not generally applicable to Text queries.</p>
</div>
<p>The examples in this section use table <code>purchase_orders_xmltype_big</code>. This has the same table structure and XML schema as <code>purchase_orders_xmltype</code>, but it has around 1,000 rows. Each row has a unique ID (in column <code>id</code>), and some different text in <code>/purchaseOrder/items/item/comment</code>. Where an execution plan is shown, it was produced using the SQL*Plus command <code>AUTOTRACE</code>. Execution plans can also be produced using SQL commands <code>TRACE</code> and <code>TKPROF</code>. A description of commands <code>AUTOTRACE</code>, <code>trace</code> and <code>tkprof</code> is outside the scope of this chapter.</p>
<p>This section contains these topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="app_depr_otext.htm#GUID-CD25E331-AF82-4E3A-9332-CAF87F2B2E61" title="Because XPath function ora:contains is relatively costly to process, Oracle recommends that you write queries that include a primary filter wherever possible. This minimizes the number of rows processed by ora:contains.">Using a Primary Filter in the Query</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-845429DB-A464-4649-9FE3-A87E1E30A356" title="Although Oracle XQuery function ora:contains does not rely on a supporting index, when XPath rewrite occurs ora:contains can often make use of an existing CONTEXT index for better performance.">XPath Rewrite and CONTEXT Indexes</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="ADXDB4848"></a><a id="ADXDB4850"></a><a id="ADXDB4851"></a><a id="ADXDB4847"></a>
<div class="props_rev_3"><a id="GUID-CD25E331-AF82-4E3A-9332-CAF87F2B2E61"></a>
<h4 id="ADXDB-GUID-CD25E331-AF82-4E3A-9332-CAF87F2B2E61" class="sect4"><span class="enumeration_section">E.5.5.1</span> Using a Primary Filter in the Query</h4>
<div>
<p>Because XPath function <code>ora:contains</code> is relatively costly to process, Oracle recommends that you write queries that include a primary filter wherever possible. This minimizes the number of rows processed by <code>ora:contains</code>.</p>
<div class="section">
<p><a href="app_depr_otext.htm#GUID-CD25E331-AF82-4E3A-9332-CAF87F2B2E61__CBBJDJFG">Example E-47</a> examines each row in a table (a full table scan), as shown by the execution plan. In this example, <code>ora:contains</code> is evaluated for each row.</p>
<p>If you create an index on column <code>id</code>, as shown in <a href="app_depr_otext.htm#GUID-CD25E331-AF82-4E3A-9332-CAF87F2B2E61__CBBFCIGC">Example E-48</a>, and you add a selective predicate <code>id</code> to the query, as shown in <a href="app_depr_otext.htm#GUID-CD25E331-AF82-4E3A-9332-CAF87F2B2E61__CBBCGBHF">Example E-49</a>, then index <code>id</code> drives the execution, as shown in the execution plan. Function <code>ora:contains</code> is then executed only for the rows where <code>id</code> is less than 5.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-CD25E331-AF82-4E3A-9332-CAF87F2B2E61__CBBJDJFG">
<p class="titleinexample">Example E-47 ora:contains in Large Table</p>
<pre dir="ltr">SELECT id FROM purchase_orders_xmltype_big
  WHERE XMLExists(
          &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
           $d/purchaseOrder/comment[ora:contains(text(), &#34;constitution&#34;) &gt; 0]&#39;
          PASSING doc AS &#34;d&#34;);
</pre>
<pre dir="ltr">Execution Plan
------------------------------------------------------------------------------------------------
| Id | Operation                       | Name                      |Rows|Bytes|Cost(%CPU)| Time|
------------------------------------------------------------------------------------------------
|   0| SELECT STATEMENT                |                           |  32|64480|686(38)|00:00:09|
|*  1| FILTER                          |                           |    |     |       |        |
|   2|TABLE ACCESS FULL                |PURCHASE_ORDERS_XMLTYPE_BIG|1161|2284K| 140(3)|00:00:02| 
|*  3|COLLECTION ITERATOR PICKLER FETCH| XMLSEQUENCEFROMXMLTYPE    |    |     |       |        |
------------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
   1 - filter( EXISTS (SELECT 0 FROM TABLE() &#34;KOKBF$&#34; WHERE
              SYS_XMLCONTAINS(SYS_XQ_UPKXML2SQL(SYS_XQEXVAL(SYS_XQEXTRACT(SYS_XQCON2SEQ(VALUE(KOKBF$)),
              &#39;/comment/text()&#39;),1,50),50,1,0),&#39;constitution&#39;)&gt;0))
   3 - filter(SYS_XMLCONTAINS(SYS_XQ_UPKXML2SQL(SYS_XQEXVAL(SYS_XQEXTRACT(SYS_XQCON2SEQ(VALUE(KOKBF$)),
              &#39;/comment/text()&#39;),1,50),50,1,0),&#39;constitution&#39;)&gt;0)
 
Note
-----
   - dynamic sampling used for this statement
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-CD25E331-AF82-4E3A-9332-CAF87F2B2E61__CBBFCIGC">
<p class="titleinexample">Example E-48 B-tree Index on ID</p>
<pre dir="ltr">CREATE INDEX id_index ON purchase_orders_xmltype_big(id);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-CD25E331-AF82-4E3A-9332-CAF87F2B2E61__CBBCGBHF">
<p class="titleinexample">Example E-49 ora:contains in Large Table, with Additional Predicate</p>
<pre dir="ltr">SELECT id FROM purchase_orders_xmltype_big
  WHERE XMLExists(
          &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
           $d/purchaseOrder/comment[ora:contains(text(), &#34;constitution&#34;) &gt; 0]&#39;
          PASSING doc AS &#34;d&#34;)
    <span class="bold">AND id &gt; 5</span>;
</pre>
<pre dir="ltr">Execution Plan
-----------------------------------------------------------------------------------------------
| Id  | Operation                   | Name                      |Rows| Bytes |Cost(%CPU)| Time|
-----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |                           |  1 |  2015 |8  (13)|00:00:01|
|*  1 |  TABLE ACCESS BY INDEX ROWID|PURCHASE_ORDERS_XMLTYPE_BIG|  1 |  2015 |8  (13)|00:00:01|
|*  2 |   INDEX RANGE SCAN          |ID_INDEX                   | 10 |       |2   (0)|00:00:01|
-----------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter(EXISTSNODE(SYS_MAKEXML(&#34;PURCHASE_ORDERS_XMLTYPE_BIG&#34;.&#34;SYS_NC00003$
       &#34;),&#39;/purchaseOrder/items/item/comment[ora:contains(text(), &#34;constitution&#34;) &gt;
              0]&#39;,&#39;xmlns:ora=&#34;http://xmlns.oracle.com/xdb&#34;&#39;)=1)
   2 - access(&#34;ID&#34;&gt;5)
 
Note
-----
   - dynamic sampling used for this statement
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4856"></a><a id="ADXDB6239"></a><a id="ADXDB4853"></a>
<div class="props_rev_3"><a id="GUID-845429DB-A464-4649-9FE3-A87E1E30A356"></a>
<h4 id="ADXDB-GUID-845429DB-A464-4649-9FE3-A87E1E30A356" class="sect4"><span class="enumeration_section">E.5.5.2</span> XPath Rewrite and CONTEXT Indexes</h4>
<div>
<p>Although Oracle XQuery function <code>ora:contains</code> does not rely on a supporting index, when XPath rewrite occurs <code>ora:contains</code> can often make use of an existing <code>CONTEXT</code> index for better performance.</p>
<p>Oracle Database can sometimes optimize a query that makes use of an XPath expression. This XPath rewriting is done automatically as part of query optimization.</p>
<div class="infoboxnotealso" id="GUID-845429DB-A464-4649-9FE3-A87E1E30A356__GUID-AAF6A569-25A2-4A7B-94A2-143E54C2D92E">
<p class="notep1">See Also:</p>
<p><a href="xdb_rewrite.htm#GUID-35551023-CCAC-477B-8BBF-CD0E0B44C962" title="For XMLType data stored object-relationally, queries involving XPath expression arguments to various SQL functions can often be automatically rewritten to queries against the underlying SQL tables, which are highly optimized.">XPath Rewrite for Object-Relational Storage</a></p>
</div>
<p>A naive evaluation of the XPath expression in <a href="app_depr_otext.htm#GUID-845429DB-A464-4649-9FE3-A87E1E30A356__CBBEDDIF">Example E-50</a> would test each cell in column <code>doc</code> to see if it matches that expression.</p>
<p>But if <code>doc</code> is XML schema-based and the <code>purchaseOrder</code> documents are physically stored in object-relational <code>XMLType</code> tables, then it makes sense to go straight to column <code>comment</code> (if such a column exists) and test each cell there to see if it matches &#34;<code>electric</code>&#34;.</p>
<p>If the first argument to <code>ora:contains</code> maps to a single relational column, then <code>ora:contains</code> can be applied to that column, instead of applying the complete XPath expression to the entire XML document. Even if there are no indexes involved, this can significantly improve query performance.</p>
<p>If you are using <code>ora:contains</code> with a text node or an attribute that maps to a column that has a <code>CONTEXT</code> index then that index can sometimes be applied to the data in the underlying column. The following conditions must both be true, in order for a <code>CONTEXT</code> index to be used with object-relational <code>XMLType</code> data.</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code>ora:contains</code> target (<code>input_text</code>) must be either (a) a single text node whose parent node maps to a column or (b) an attribute that maps to a column. The column must be a single relational column (possibly in an ordered collection table).</p>
</li>
<li>
<p>As noted in <span class="q">&#34;<a href="app_depr_otext.htm#GUID-312D13E7-8A9C-4310-B993-4FC82271DB2A" title="A policy is a collection of preferences that can be associated with an ora:contains query to provide the same sort of semantic control as the indexing choices for SQL contains.">Using Policies with ora:contains Queries</a>&#34;</span>, the indexing choices (for <code>contains</code>) and the policy choices (for <code>ora:contains</code>) affect the semantics of queries. A simple mismatch might be that the index-based <code>contains</code> would do a <span class="italic">case-sensitive</span> search, while <code>ora:contains</code> specifies a <span class="italic">case-insensitive</span> search. To ensure that the <code>ora:contains</code> and the rewritten <code>contains</code> have the same semantics, the <code>ora:contains</code> policy must exactly match the index choices of the <code>CONTEXT</code> index.</p>
</li>
</ul>
<p>Both the <code>ora:contains</code> policy and the <code>CONTEXT</code> index must also use the <code>NULL_SECTION_GROUP</code> section group type. The default section group for an <code>ora:contains</code> policy is <code>ctxsys.NULL_SECTION_GROUP</code>.</p>
<p>Finally, a <code>CONTEXT</code> index is generally asynchronous. If you add a new document that contains the word &#34;<code>dog</code>&#34;, but you do not synchronize the <code>CONTEXT</code> index, then a <code>contains</code> query for &#34;<code>dog</code>&#34; does not return that document. But an <code>ora:contains</code> query against the same data does. To ensure that the <code>ora:contains</code> and the rewritten SQL <code>contains</code> always return the same results, build the <code>CONTEXT</code> index with the <code>TRANSACTIONAL</code> keyword in the <code>PARAMETERS</code> string.</p>
<div class="infoboxnotealso" id="GUID-845429DB-A464-4649-9FE3-A87E1E30A356__GUID-C5753DC9-E46D-4676-941F-791B447E0853">
<p class="notep1">See Also:</p>
<p><a class="olink CCREF0101" target="_blank" href="../CCREF/csql.htm#CCREF0101"><span class="italic">Oracle Text Reference</span></a> for information about creating a <code>CONTEXT</code> index that is transactional using <code>ALTER INDEX</code> with parameter <code>TRANSACTIONAL</code></p>
</div>
<p>A query with <code>XMLQuery</code>, <code>XMLTable</code> or <code>XMLExists</code>, where the XPath expression includes <code>ora:contains</code>, can be considered for XPath rewrite if the <code>ora:contains</code> policy exactly matches the index choices of the <code>CONTEXT</code> index and if either of these conditions is true:</p>
<ul style="list-style-type: disc;">
<li>
<p>The XML data is stored <span class="italic">object-relationally</span>; the first <code>ora:contains</code> argument (<code>input_text</code>) is either a single text node whose parent node maps to a single relational column or an attribute that maps to a single relational column; there is a transactional <code>CONTEXT</code> index on that column.</p>
</li>
<li>
<p>The XML data is <span class="italic">binary XML</span> that is indexed by an <code>XMLIndex</code> index, and there is a <code>CONTEXT</code> index on either the path-table <code>VALUE</code> column of an unstructured <code>XMLIndex</code> component or a scalar-value column of a structured <code>XMLIndex</code> component.</p>
<p>If the <code>CONTEXT</code> index is non-transactional then you must also use XQuery extension-expression pragma <code>ora:use_text_index</code>, to force the use of the <code>CONTEXT</code> index. <a href="app_depr_otext.htm#GUID-845429DB-A464-4649-9FE3-A87E1E30A356__BABFDBGI">Example E-51</a> illustrates this.</p>
</li>
</ul>
<p><a href="app_depr_otext.htm#GUID-845429DB-A464-4649-9FE3-A87E1E30A356__BABFDBGI">Example E-51</a> uses the <code>XMLIndex</code> index created in <a href="xdb_indexing.htm#GUID-07D1AAE8-0B4B-4DAC-806C-3DE4CA0A4246__CHDBIGIJ">Example 6-10</a>. It creates a <code>CONTEXT</code> index on the <code>VALUE</code> column of the unstructured <code>XMLIndex</code> component. The execution plan shows that both the <code>XMLIndex</code> index and the <code>CONTEXT</code> index are picked up. The former is indicated by the references to <code>my_path_table</code> and the pikey index, <code>SYS89559_PO_XMLINDE_PIKEY_IX</code>. The latter is indicated by the references to <code>po_otext_ix</code> and the predicate access mentioning <code>CONTAINS</code>.</p>
<div class="example" id="GUID-845429DB-A464-4649-9FE3-A87E1E30A356__CBBEDDIF">
<p class="titleinexample">Example E-50 ora:contains Search for &#34;electric&#34;</p>
<pre dir="ltr">SELECT id FROM purchase_orders_xmltype
  WHERE XMLExists(
          &#39;declare namespace ora = &#34;http://xmlns.oracle.com/xdb&#34;; (: :)
           $d/purchaseOrder/items/item/comment
             [ora:contains(text(), &#34;electric&#34;) &gt; 0]&#39;
          PASSING doc AS &#34;d&#34;);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-845429DB-A464-4649-9FE3-A87E1E30A356__BABFDBGI">
<p class="titleinexample">Example E-51 Using XQuery Pragma ora:use_text_index with ora:contains</p>
<pre dir="ltr">CREATE INDEX po_otext_ix ON <span class="bold">my_path_table</span> (<span class="bold">VALUE</span>) INDEXTYPE IS CTXSYS.CONTEXT;
 
EXPLAIN PLAN FOR
  SELECT DISTINCT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/ShippingInstructions/address&#39;
                                   PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
                          AS VARCHAR2(256)) &#34;Address&#34;
    FROM po_binxml po
    WHERE XMLExists(
            &#39;$p/PurchaseOrder/ShippingInstructions/address
               [<span class="bold">(# ora:use_text_index #)</span> {<span class="bold">ora:contains</span>(., &#34;$(Fortieth)&#34;)} &gt; 0]&#39;
            PASSING po.OBJECT_VALUE AS &#34;p&#34;);
</pre>
<pre dir="ltr">----------------------------------------------------------------------------------------------------------------
| Id  | Operation                            | Name                         | Rows | Bytes|Cost (%CPU)| Time   |
----------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                     |                              |    1 | 3046 |   12  (17)|00:00:01|
|   1 |  SORT GROUP BY                       |                              |    1 | 3524 |           |        |
|*  2 |   TABLE ACCESS BY INDEX ROWID BATCHED| <span class="bold">MY_PATH_TABLE</span>                |    2 | 7048 |    3   (0)|00:00:01|
|*  3 |    INDEX RANGE SCAN                  | <span class="bold">SYS89559_PO_XMLINDE_PIKEY_IX</span> |    1 |      |    2   (0)|00:00:01|
|   4 |  HASH UNIQUE                         |                              |    1 | 3046 |   12  (17)|00:00:01|
|   5 |   NESTED LOOPS                       |                              |    1 | 3046 |    8  (13)|00:00:01|
|   6 |    SORT UNIQUE                       |                              |    1 | 3034 |    6   (0)|00:00:01|
|*  7 |     TABLE ACCESS BY INDEX ROWID      | <span class="bold">MY_PATH_TABLE</span>                |    1 | 3034 |    6   (0)|00:00:01|
|*  8 |      DOMAIN INDEX                    | <span class="bold">PO_OTEXT_IX</span>                  |      |      |    4   (0)|00:00:01|
|   9 |    TABLE ACCESS BY USER ROWID        | PO_BINXML                    |    1 |   12 |    1   (0)|00:00:01|
----------------------------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   2 - filter(SYS_XMLI_LOC_ISNODE(&#34;SYS_P3&#34;.&#34;LOCATOR&#34;)=1)
   3 - access(&#34;SYS_P3&#34;.&#34;RID&#34;=:B1 AND &#34;SYS_P3&#34;.&#34;PATHID&#34;=HEXTORAW(&#39;6F7F&#39;))
   7 - filter(&#34;SYS_P1&#34;.&#34;PATHID&#34;=HEXTORAW(&#39;6F7F&#39;) AND SYS_XMLI_LOC_ISNODE(&#34;SYS_P1&#34;.&#34;LOCATOR&#34;)=1)
   8 - access(&#34;<span class="bold">CTXSYS</span>&#34;.&#34;<span class="bold">CONTAINS</span>&#34;(&#34;SYS_P1&#34;.&#34;VALUE&#34;,&#39;$(Fortieth)&#39;)&gt;0)
 
Note
-----
   - dynamic sampling used for this statement (level=2)
 
28 rows selected.
</pre>
<pre dir="ltr"></pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<a id="ADXDB4859"></a>
<div class="props_rev_3"><a id="GUID-D909ACF2-7941-4924-9126-DE6D7A3F8454"></a>
<h2 id="ADXDB-GUID-D909ACF2-7941-4924-9126-DE6D7A3F8454" class="sect2"><span class="enumeration_section">E.6</span> Text Path BNF Specification</h2>
<div>
<p>The complete BNF specification for Text Path is presented.</p>
<div class="section">
<pre dir="ltr">HasPathArg           ::=    LocationPath
                         |  EqualityExpr  
InPathArg            ::=    LocationPath 
LocationPath         ::=    RelativeLocationPath
                         |  AbsoluteLocationPath 
AbsoluteLocationPath ::=    (&#34;/&#34; RelativeLocationPath)
                         |  (&#34;//&#34; RelativeLocationPath) 
RelativeLocationPath ::=    Step
                         |  (RelativeLocationPath &#34;/&#34; Step)
                         |  (RelativeLocationPath &#34;//&#34; Step) 
Step                 ::=    (&#34;@&#34; NCName)
                         |  NCName
                         |  (NCName Predicate)
                         |  Dot
                         |  &#34;*&#34; 
Predicate            ::=    (&#34;[&#34; OrExp &#34;]&#34;)
                         |  (&#34;[&#34; Digit+ &#34;]&#34;) 
OrExpr               ::=    AndExpr
                         |  (OrExpr &#34;or&#34; AndExpr) 
AndExpr              ::=    BooleanExpr
                         |  (AndExpr &#34;and&#34; BooleanExpr) 
BooleanExpr          ::=    RelativeLocationPath
                         |  EqualityExpr
                         |  (&#34;(&#34; OrExpr &#34;)&#34;)
                         |  (&#34;not&#34; &#34;(&#34; OrExpr &#34;)&#34;) 
EqualityExpr         ::=    (RelativeLocationPath &#34;=&#34; Literal)
                         |  (Literal &#34;=&#34; RelativeLocationPath)
                         |  (RelativeLocationPath &#34;=&#34; Literal)
                         |  (Literal &#34;!=&#34; RelativeLocationPath)
                         |  (RelativeLocationPath &#34;=&#34; Literal)
                         |  (Literal &#34;!=&#34; RelativeLocationPath) 
Literal              ::=    (DoubleQuote [~&#34;]* DoubleQuote)
                         |  (SingleQuote [~&#39;]* SingleQuote) 
NCName               ::=    (Letter |  Underscore) NCNameChar* 
NCNameChar           ::=    Letter
                         |  Digit
                         |  Dot
                         |  Dash
                         |  Underscore 
Letter               ::=    ([a-z] | [A-Z]) 
Digit                ::=    [0-9] 
Dot                  ::=    &#34;.&#34; 
Dash                 ::=    &#34;-&#34; 
Underscore           ::=    &#34;_&#34; 
</pre></div>
<!-- class="section" --></div>
</div>
<a id="ADXDB4860"></a>
<div class="props_rev_3"><a id="GUID-533AF1E1-189D-4C60-BCE9-227AFE7D71AA"></a>
<h2 id="ADXDB-GUID-533AF1E1-189D-4C60-BCE9-227AFE7D71AA" class="sect2"><span class="enumeration_section">E.7</span> Support for Full-Text XML Examples</h2>
<div>
<p>Code support is presented for the examples that illustrate full-text search over XML data without XQuery.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="app_depr_otext.htm#GUID-E0A96A1F-5068-4DF0-9E2B-2DCB841C89E3" title="A purchase-order XML document is presented. It is used in examples of full-text search over XML without XQuery.">Purchase-Order XML Document_ po001.xml</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-12C61C7A-A8F9-428B-9999-C448DC0A594E" title="CREATE TABLE statements are presented that create purchase-order tables which are used in examples of full-text search without XQuery.">CREATE TABLE Statements</a></p>
</li>
<li>
<p><a href="app_depr_otext.htm#GUID-52EF361D-39E9-4321-BFDA-F5DAF0019427" title="A purchase-order XML Schema is presented. It is used for examples of full-text search over XML purchase-order documents.">Purchase-Order XML Schema for Full-Text Search Examples</a></p>
</li>
</ul>
</div>
<a id="ADXDB4862"></a><a id="ADXDB4861"></a>
<div class="props_rev_3"><a id="GUID-E0A96A1F-5068-4DF0-9E2B-2DCB841C89E3"></a>
<h3 id="ADXDB-GUID-E0A96A1F-5068-4DF0-9E2B-2DCB841C89E3" class="sect3"><span class="enumeration_section">E.7.1</span> Purchase-Order XML Document, po001.xml</h3>
<div>
<p>A purchase-order XML document is presented. It is used in examples of full-text search over XML without XQuery.</p>
<div class="section"></div>
<!-- class="section" -->
<div class="example" id="GUID-E0A96A1F-5068-4DF0-9E2B-2DCB841C89E3__GUID-440D5741-B2BB-41E3-8E33-C06454108333">
<p class="titleinexample">Example E-52 Purchase Order XML Document, po001.xml</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;purchaseOrder xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; 
               xsi:noNamespaceSchemaLocation=&#34;xmlschema/po.xsd&#34; 
               orderDate=&#34;1999-10-20&#34;&gt;
  &lt;shipTo country=&#34;US&#34;&gt;
    &lt;name&gt;Alice Smith&lt;/name&gt;
    &lt;street&gt;123 Maple Street&lt;/street&gt;
    &lt;city&gt;Mill Valley&lt;/city&gt;
    &lt;state&gt;CA&lt;/state&gt;
    &lt;zip&gt;90952&lt;/zip&gt;
  &lt;/shipTo&gt;
  &lt;billTo country=&#34;US&#34;&gt;
    &lt;name&gt;Robert Smith&lt;/name&gt;
    &lt;street&gt;8 Oak Avenue&lt;/street&gt;
    &lt;city&gt;Old Town&lt;/city&gt;
    &lt;state&gt;PA&lt;/state&gt;
    &lt;zip&gt;95819&lt;/zip&gt;
  &lt;/billTo&gt;
  &lt;comment&gt;Hurry, my lawn is going wild!&lt;/comment&gt;
  &lt;items&gt;
    &lt;item partNum=&#34;872-AA&#34;&gt;
      &lt;productName&gt;Lawnmower&lt;/productName&gt;
      &lt;quantity&gt;1&lt;/quantity&gt;
      &lt;USPrice&gt;148.95&lt;/USPrice&gt;
      &lt;comment&gt;Confirm this is electric&lt;/comment&gt;
    &lt;/item&gt;
    &lt;item partNum=&#34;926-AA&#34;&gt;
      &lt;productName&gt;Baby Monitor&lt;/productName&gt;
      &lt;quantity&gt;1&lt;/quantity&gt;
      &lt;USPrice&gt;39.98&lt;/USPrice&gt;
      &lt;shipDate&gt;1999-05-21&lt;/shipDate&gt;
    &lt;/item&gt;
  &lt;/items&gt;
&lt;/purchaseOrder&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4864"></a><a id="ADXDB4865"></a><a id="ADXDB4866"></a><a id="ADXDB4863"></a>
<div class="props_rev_3"><a id="GUID-12C61C7A-A8F9-428B-9999-C448DC0A594E"></a>
<h3 id="ADXDB-GUID-12C61C7A-A8F9-428B-9999-C448DC0A594E" class="sect3"><span class="enumeration_section">E.7.2</span> Tables for Full-Text Examples Without XQuery</h3>
<div>
<p><code>CREATE TABLE</code> statements are presented that create purchase-order tables which are used in examples of full-text search without XQuery.</p>
<div class="section"></div>
<!-- class="section" -->
<div class="example" id="GUID-12C61C7A-A8F9-428B-9999-C448DC0A594E__GUID-67D2AE9B-8762-4975-B52E-7E1AE0BA82F9">
<p class="titleinexample">Example E-53 Create Table PURCHASE_ORDERS</p>
<pre dir="ltr">CREATE TABLE purchase_orders (id NUMBER, doc VARCHAR2(4000));

INSERT INTO purchase_orders (id, doc)
  VALUES (1,
          &#39;&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
           &lt;purchaseOrder xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
                          xsi:noNamespaceSchemaLocation=&#34;xmlschema/po.xsd&#34;
                          orderDate=&#34;1999-10-20&#34;&gt;
             &lt;shipTo country=&#34;US&#34;&gt;
               &lt;name&gt;Alice Smith&lt;/name&gt;
               &lt;street&gt;123 Maple Street&lt;/street&gt;
               &lt;city&gt;Mill Valley&lt;/city&gt;
               &lt;state&gt;CA&lt;/state&gt;
               &lt;zip&gt;90952&lt;/zip&gt;
             &lt;/shipTo&gt;
             &lt;billTo country=&#34;US&#34;&gt;
               &lt;name&gt;Robert Smith&lt;/name&gt;
               &lt;street&gt;8 Oak Avenue&lt;/street&gt;
               &lt;city&gt;Old Town&lt;/city&gt;
               &lt;state&gt;PA&lt;/state&gt;
               &lt;zip&gt;95819&lt;/zip&gt;
             &lt;/billTo&gt;
             &lt;comment&gt;Hurry, my lawn is going wild!&lt;/comment&gt;
             &lt;items&gt;
               &lt;item partNum=&#34;872-AA&#34;&gt;
                 &lt;productName&gt;Lawnmower&lt;/productName&gt;
                 &lt;quantity&gt;1&lt;/quantity&gt;
                 &lt;USPrice&gt;148.95&lt;/USPrice&gt;
                 &lt;comment&gt;Confirm this is electric&lt;/comment&gt;
               &lt;/item&gt;
               &lt;item partNum=&#34;926-AA&#34;&gt;
                 &lt;productName&gt;Baby Monitor&lt;/productName&gt;
                 &lt;quantity&gt;1&lt;/quantity&gt;
                 &lt;USPrice&gt;39.98&lt;/USPrice&gt;
                 &lt;shipDate&gt;1999-05-21&lt;/shipDate&gt;
               &lt;/item&gt;
             &lt;/items&gt;
           &lt;/purchaseOrder&gt;&#39;);
COMMIT;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-12C61C7A-A8F9-428B-9999-C448DC0A594E__GUID-E6174CE4-540A-478A-86A9-8AD035BEBCFE">
<p class="titleinexample">Example E-54 Create Table PURCHASE_ORDERS_XMLTYPE</p>
<pre dir="ltr">CREATE TABLE purchase_orders_xmltype (id  NUMBER, doc XMLType);

INSERT INTO purchase_orders_xmltype (id, doc)
  VALUES (1,
          XMLTYPE (&#39;&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
                     &lt;purchaseOrder
                       xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
                       xsi:noNamespaceSchemaLocation=&#34;po.xsd&#34;
                       orderDate=&#34;1999-10-20&#34;&gt;
                       &lt;shipTo country=&#34;US&#34;&gt;
                         &lt;name&gt;Alice Smith&lt;/name&gt;
                         &lt;street&gt;123 Maple Street&lt;/street&gt;
                         &lt;city&gt;Mill Valley&lt;/city&gt;
                         &lt;state&gt;CA&lt;/state&gt;
                         &lt;zip&gt;90952&lt;/zip&gt;
                       &lt;/shipTo&gt;
                       &lt;billTo country=&#34;US&#34;&gt;
                         &lt;name&gt;Robert Smith&lt;/name&gt;
                         &lt;street&gt;8 Oak Avenue&lt;/street&gt;
                         &lt;city&gt;Old Town&lt;/city&gt;
                         &lt;state&gt;PA&lt;/state&gt;
                         &lt;zip&gt;95819&lt;/zip&gt;
                       &lt;/billTo&gt;
                       &lt;comment&gt;Hurry, my lawn is going wild!&lt;/comment&gt;
                       &lt;items&gt;
                         &lt;item partNum=&#34;872-AA&#34;&gt;
                           &lt;productName&gt;Lawnmower&lt;/productName&gt;
                           &lt;quantity&gt;1&lt;/quantity&gt;
                           &lt;USPrice&gt;148.95&lt;/USPrice&gt;
                           &lt;comment&gt;Confirm this is electric&lt;/comment&gt;
                         &lt;/item&gt;
                         &lt;item partNum=&#34;926-AA&#34;&gt;
                           &lt;productName&gt;Baby Monitor&lt;/productName&gt;
                           &lt;quantity&gt;1&lt;/quantity&gt;
                           &lt;USPrice&gt;39.98&lt;/USPrice&gt;
                           &lt;shipDate&gt;1999-05-21&lt;/shipDate&gt;
                         &lt;/item&gt;
                       &lt;/items&gt;
                   &lt;/purchaseOrder&gt;&#39;));
COMMIT;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-12C61C7A-A8F9-428B-9999-C448DC0A594E__GUID-6CCC1D04-64E8-47EE-83C5-77169DD01580">
<p class="titleinexample">Example E-55 Create Table PURCHASE_ORDERS_XMLTYPE_TABLE</p>
<pre dir="ltr">CREATE TABLE purchase_orders_xmltype_table OF XMLType;

INSERT INTO purchase_orders_xmltype_table
  VALUES (
    XMLType (&#39;&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;              &lt;purchaseOrder 
                xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
                xsi:noNamespaceSchemaLocation=&#34;xmlschema/po.xsd&#34;
                orderDate=&#34;1999-10-20&#34;&gt;
                &lt;shipTo country=&#34;US&#34;&gt;
                  &lt;name&gt;Alice Smith&lt;/name&gt;
                  &lt;street&gt;123 Maple Street&lt;/street&gt;
                  &lt;city&gt;Mill Valley&lt;/city&gt;
                  &lt;state&gt;CA&lt;/state&gt;
                  &lt;zip&gt;90952&lt;/zip&gt;
                &lt;/shipTo&gt;
                &lt;billTo country=&#34;US&#34;&gt;
                  &lt;name&gt;Robert Smith&lt;/name&gt;
                  &lt;street&gt;8 Oak Avenue&lt;/street&gt;
                  &lt;city&gt;Old Town&lt;/city&gt;
                  &lt;state&gt;PA&lt;/state&gt;
                  &lt;zip&gt;95819&lt;/zip&gt;
                &lt;/billTo&gt;
                &lt;comment&gt;Hurry, my lawn is going wild!&lt;/comment&gt;
                &lt;items&gt;
                  &lt;item partNum=&#34;872-AA&#34;&gt;
                    &lt;productName&gt;Lawnmower&lt;/productName&gt;
                    &lt;quantity&gt;1&lt;/quantity&gt;
                    &lt;USPrice&gt;148.95&lt;/USPrice&gt;
                    &lt;comment&gt;Confirm this is electric&lt;/comment&gt;
                  &lt;/item&gt;
                  &lt;item partNum=&#34;926-AA&#34;&gt;
                    &lt;productName&gt;Baby Monitor&lt;/productName&gt;
                    &lt;quantity&gt;1&lt;/quantity&gt;
                    &lt;USPrice&gt;39.98&lt;/USPrice&gt;
                    &lt;shipDate&gt;1999-05-21&lt;/shipDate&gt;
                  &lt;/item&gt;
                &lt;/items&gt;
              &lt;/purchaseOrder&gt;&#39;));
COMMIT;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4868"></a><a id="ADXDB4867"></a>
<div class="props_rev_3"><a id="GUID-52EF361D-39E9-4321-BFDA-F5DAF0019427"></a>
<h3 id="ADXDB-GUID-52EF361D-39E9-4321-BFDA-F5DAF0019427" class="sect3"><span class="enumeration_section">E.7.3</span> Purchase-Order XML Schema for Full-Text Search Examples</h3>
<div>
<p>A purchase-order XML Schema is presented. It is used for examples of full-text search over XML purchase-order documents.</p>
<div class="section"></div>
<!-- class="section" -->
<div class="example" id="GUID-52EF361D-39E9-4321-BFDA-F5DAF0019427__GUID-821EFFCF-5079-4DF1-9DCD-F23580053A83">
<p class="titleinexample">Example E-56 Purchase-Order XML Schema for Full-Text Search Examples</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;xsd:schema xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34;&gt;
  &lt;xsd:annotation&gt;
    &lt;xsd:documentation&gt;
      Purchase order schema for Example.com.
      Copyright 2000 Example.com. All rights reserved.
    &lt;/xsd:documentation&gt;
  &lt;/xsd:annotation&gt;
  &lt;xsd:element name=&#34;purchaseOrder&#34; type=&#34;PurchaseOrderType&#34;/&gt;
  &lt;xsd:element name=&#34;comment&#34; type=&#34;xsd:string&#34;/&gt;
  &lt;xsd:complexType name=&#34;PurchaseOrderType&#34;&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element name=&#34;shipTo&#34; type=&#34;USAddress&#34;/&gt;
      &lt;xsd:element name=&#34;billTo&#34; type=&#34;USAddress&#34;/&gt;
      &lt;xsd:element ref=&#34;comment&#34; minOccurs=&#34;0&#34;/&gt;
      &lt;xsd:element name=&#34;items&#34; type=&#34;Items&#34;/&gt;
    &lt;/xsd:sequence&gt;
    &lt;xsd:attribute name=&#34;orderDate&#34; type=&#34;xsd:date&#34;/&gt;
  &lt;/xsd:complexType&gt;
  &lt;xsd:complexType name=&#34;USAddress&#34;&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element name=&#34;name&#34; type=&#34;xsd:string&#34;/&gt;
      &lt;xsd:element name=&#34;street&#34; type=&#34;xsd:string&#34;/&gt;
      &lt;xsd:element name=&#34;city&#34; type=&#34;xsd:string&#34;/&gt;
      &lt;xsd:element name=&#34;state&#34; type=&#34;xsd:string&#34;/&gt;
      &lt;xsd:element name=&#34;zip&#34; type=&#34;xsd:decimal&#34;/&gt;
    &lt;/xsd:sequence&gt;
    &lt;xsd:attribute name=&#34;country&#34; type=&#34;xsd:NMTOKEN&#34; fixed=&#34;US&#34;/&gt;
  &lt;/xsd:complexType&gt;
  &lt;xsd:complexType name=&#34;Items&#34;&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element name=&#34;item&#34; minOccurs=&#34;0&#34; maxOccurs=&#34;unbounded&#34;&gt;
        &lt;xsd:complexType&gt;
          &lt;xsd:sequence&gt;
            &lt;xsd:element name=&#34;productName&#34; type=&#34;xsd:string&#34;/&gt;
            &lt;xsd:element name=&#34;quantity&#34;&gt;
              &lt;xsd:simpleType&gt;
                &lt;xsd:restriction base=&#34;xsd:positiveInteger&#34;&gt;
                  &lt;xsd:maxExclusive value=&#34;100&#34;/&gt;
                &lt;/xsd:restriction&gt;
              &lt;/xsd:simpleType&gt;
            &lt;/xsd:element&gt;
            &lt;xsd:element name=&#34;USPrice&#34; type=&#34;xsd:decimal&#34;/&gt;
            &lt;xsd:element ref=&#34;comment&#34; minOccurs=&#34;0&#34;/&gt;
            &lt;xsd:element name=&#34;shipDate&#34; type=&#34;xsd:date&#34; minOccurs=&#34;0&#34;/&gt;
          &lt;/xsd:sequence&gt;
          &lt;xsd:attribute name=&#34;partNum&#34; type=&#34;SKU&#34; use=&#34;required&#34;/&gt;
        &lt;/xsd:complexType&gt;
      &lt;/xsd:element&gt;
    &lt;/xsd:sequence&gt;
  &lt;/xsd:complexType&gt;
  &lt;!-- Stock Keeping Unit, a code for identifying products --&gt;
  &lt;xsd:simpleType name=&#34;SKU&#34;&gt;
    &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
      &lt;xsd:pattern value=&#34;\d{3}-[A-Z]{2}&#34;/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
&lt;/xsd:schema&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3410">
<tr>
<td class="cellalignment3417">
<table class="cellalignment3415">
<tr>
<td class="cellalignment3414"><a href="app_depr_transl.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3419">
<table class="cellalignment3413">
<tr>
<td class="cellalignment3414"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3414"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3414"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3414"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3414"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>