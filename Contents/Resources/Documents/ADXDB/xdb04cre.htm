<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1604"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Query%20and%20Update%20of%20XML%20Data"></a><title>Query and Update of XML Data</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="There are many ways for applications to query and update XML data that is in Oracle Database, both XML schema-based and non-schema-based."/>
<meta name="keywords" content="XQuery language, XMLQuery and XMLTable SQL functions, examples, use with Oracle XML DB Repository, repository, use with XQuery, use with XMLType relational data, PASSING clause of XMLTable, FROM list order, FROM list order, XMLTable PASSING clause, XMLTable SQL function, PASSING clause and FROM list order, RETURNING SEQUENCE BY REF clause of XMLTable, RETURNING SEQUENCE BY REF clause, reverse node references in COLUMNS clause, namespaces, namespace, XQuery, querying XMLType data, choices, XMLType, querying, querying XMLType columns, transient data, querying transient data, extracting data from XML, extracting data, SQL*Plus XQUERY command, XQUERY command, SQL*Plus, SQL*Plus, XQUERY command, XQuery API for Java (XQJ), XQJ, JSR-225, Java Specification Request, 225, updating XML data, using SQL functions, functions, SQL, updating XML data, performance, expressions, rewrite, rewrite, tuning, optimization, XPath rewrite, definition, XML query rewrite, cost-based XML query rewrite, cost-based, rule-based XML query rewrite, rule-based, COST_XML_QUERY_REWRITE optimizer hint, optimizer hints, COST_XML_QUERY_REWRITE, optimization over relational data, XML diagnosability mode, ora:defaultTable Oracle XQuery pragma, XQuery, pragmas, Oracle, ora:defaultTable"/>
<meta name="dcterms.created" content="2016-12-08T13:53:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E41152-15"/>
<meta name="dcterms.isVersionOf" content="ADXDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="xdb_xquery.htm" title="Previous" type="text/html"/>
<link rel="Next" href="xdb_indexing.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41152-15.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-01C75289-804F-4BAA-AE7C-DFA73198581E"></a> <span id="PAGE" style="display:none;">14/61</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='xdb04cre'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="ADXDB0400"></a>
<h1 id="ADXDB-GUID-01C75289-804F-4BAA-AE7C-DFA73198581E" class="sect1"><span class="enumeration_chapter">5</span> Query and Update of XML Data</h1>
<div>
<p>There are many ways for applications to query and update XML data that is in Oracle Database, both XML schema-based and non-schema-based.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb04cre.htm#GUID-4DF303DB-780C-4491-9252-234482A563A4" title="XQuery is a very general and expressive language, and SQL/XML functions XMLQuery, XMLTable, XMLExists, and XMLCast combine that power of expression and computation with the strengths of SQL.">Using XQuery with Oracle XML&nbsp;DB</a></p>
</li>
<li>
<p><a href="xdb04cre.htm#GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737" title="You can query XML data from XMLType columns and tables in various ways.">Querying XML Data Using SQL and PL/SQL</a></p>
</li>
<li>
<p><a href="xdb04cre.htm#GUID-4C3665D9-5502-4D05-A1AE-9E8B4D7E64C1" title="You can evaluate an XQuery expression using the SQL*Plus XQUERY command.">Using the SQL*Plus XQUERY Command</a></p>
</li>
<li>
<p><a href="xdb04cre.htm#GUID-8F3B9C09-6877-4E43-A6E7-873BF0E74DAB" title="XQuery API for Java (XQJ), also known as JSR-225, provides an industry-standard way for Java programs to access XML data using XQuery. It lets you evaluate XQuery expressions against XML data sources and process the results as XML data.">Using XQuery with XQJ to Access Database Data</a></p>
</li>
<li>
<p><a href="xdb04cre.htm#GUID-813C0A08-111D-4C4F-B76F-E0B41D6729F0" title="You can use XQuery with the Oracle APIs for PL/SQL, JDBC, and Oracle Data Provider for .NET (ODP.NET).">Using XQuery with PL/SQL_ JDBC_ and ODP.NET to Access Database Data</a></p>
</li>
<li>
<p><a href="xdb04cre.htm#GUID-6AE99020-C3C8-44EB-8E54-40188E1103F2" title="There are several ways you can use Oracle XML&nbsp;DB features to update XML data, whether it is transient or stored in database tables.">Updating XML Data</a></p>
</li>
<li>
<p><a href="xdb04cre.htm#GUID-F72DC7CD-40A9-4F07-9350-B80D2AD1F4D0" title="A SQL query that involves XQuery expressions can often be automatically rewritten (optimized) in one or more ways. This optimization is referred to as XML query rewrite or optimization. When this happens, the XQuery expression is, in effect, evaluated directly against the XML document without constructing a DOM in memory.">Performance Tuning for XQuery</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-01C75289-804F-4BAA-AE7C-DFA73198581E__GUID-F050775D-2720-43E1-933F-5FC53344E8C4">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb03usg.htm#GUID-757B4470-851B-47B7-AB78-81F47ECE5398" title="An overview of the various ways of using Oracle XML&nbsp;DB is presented.">Overview of How To Use Oracle XML&nbsp;DB</a> for <code>XMLType</code> storage recommendations</p>
</li>
<li>
<p><a href="xdb05sto.htm#GUID-C09824C1-6B02-4556-A265-B1749DEE8DE1" title="XML Schema is a standard for describing the content and structure of XML documents. You can register, update, and delete an XML schema used with Oracle XML&nbsp;DB. You can define storage structures to use for your XML schema-based data and map XML Schema data types to SQL data types.">XML Schema Storage and Query: Basic</a> for how to work with XML schema-based <code>XMLType</code> tables and columns</p>
</li>
<li>
<p><a href="xdb_xquery.htm#GUID-4F83A835-C94B-4D62-999B-111AB5E8A8F1" title="The XQuery language is one of the main ways that you interact with XML data in Oracle XML&nbsp;DB. Support for the language includes SQL*Plus commandXQUERY and SQL/XML functions XMLQuery, XMLTable, XMLExists, and XMLCast.">XQuery and Oracle XML&nbsp;DB</a> for information about updating XML data using XQuery Update</p>
</li>
</ul>
</div>
</div>
<a id="ADXDB5122"></a><a id="ADXDB5121"></a>
<div class="props_rev_3"><a id="GUID-4DF303DB-780C-4491-9252-234482A563A4"></a>
<h2 id="ADXDB-GUID-4DF303DB-780C-4491-9252-234482A563A4" class="sect2"><span class="enumeration_section">5.1</span> Using XQuery with Oracle XML&nbsp;DB</h2>
<div>
<p>XQuery is a very general and expressive language, and SQL/XML functions <code>XMLQuery</code>, <code>XMLTable</code>, <code>XMLExists</code>, and <code>XMLCast</code> combine that power of expression and computation with the strengths of SQL.</p>
<p>You typically use XQuery with Oracle XML&nbsp;DB in the following ways. The examples here are organized to reflect these different uses.</p>
<ul style="list-style-type: disc;">
<li>
<p>Query XML data in Oracle XML&nbsp;DB Repository.</p>
<p>See <span class="q">&#34;<a href="xdb04cre.htm#GUID-767E262F-559F-4EBE-84C1-65683879E1D5" title="Examples are presented that use XQuery with XML data in Oracle XML&nbsp;DB Repository. You use XQuery functions fn:doc and fn:collection to query file and folder resources in the repository, respectively.">Querying XML Data in Oracle XML&nbsp;DB Repository Using XQuery</a>&#34;</span>.</p>
</li>
<li>
<p>Query a relational table or view as if it were XML data. To do this, you use XQuery function <code>fn:collection</code>, passing as argument a URI that uses the URI-scheme name <code>oradb</code> together with the database location of the data.</p>
<p>See <span class="q">&#34;<a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0" title="Examples are presented that use XQuery to query relational table or view data as if it were XML data. The examples use XQuery function fn:collection, passing as argument a URI that uses the URI-scheme name oradb together with the database location of the data.">Querying Relational Data Using XQuery and URI Scheme oradb</a>&#34;</span>.</p>
</li>
<li>
<p>Query <code>XMLType</code> data, possibly decomposing the resulting XML into relational data using function <code>XMLTable</code>.</p>
<p>See <span class="q">&#34;<a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595" title="Examples are presented that use XQuery to query XMLType data.">Querying XMLType Data Using XQuery</a>&#34;</span>.</p>
</li>
</ul>
<p><a href="xdb04cre.htm#GUID-4DF303DB-780C-4491-9252-234482A563A4__CBAFDFCH">Example 5-1</a> creates Oracle XML&nbsp;DB Repository resources that are used in some of the other examples in this chapter.</p>
<div class="example" id="GUID-4DF303DB-780C-4491-9252-234482A563A4__CBAFDFCH">
<p class="titleinexample">Example 5-1 Creating Resources for Examples</p>
<pre>DECLARE
  res BOOLEAN;
  empsxmlstring VARCHAR2(300):= 
    &#39;&lt;?xml version=&#34;1.0&#34;?&gt;
     &lt;emps&gt;
       &lt;emp empno=&#34;1&#34; deptno=&#34;10&#34; ename=&#34;John&#34; salary=&#34;21000&#34;/&gt;
       &lt;emp empno=&#34;2&#34; deptno=&#34;10&#34; ename=&#34;Jack&#34; salary=&#34;310000&#34;/&gt;
       &lt;emp empno=&#34;3&#34; deptno=&#34;20&#34; ename=&#34;Jill&#34; salary=&#34;100001&#34;/&gt;
     &lt;/emps&gt;&#39;;
  empsxmlnsstring VARCHAR2(300):=
    &#39;&lt;?xml version=&#34;1.0&#34;?&gt;
     &lt;emps xmlns=&#34;http://example.com&#34;&gt;
       &lt;emp empno=&#34;1&#34; deptno=&#34;10&#34; ename=&#34;John&#34; salary=&#34;21000&#34;/&gt;
       &lt;emp empno=&#34;2&#34; deptno=&#34;10&#34; ename=&#34;Jack&#34; salary=&#34;310000&#34;/&gt;
       &lt;emp empno=&#34;3&#34; deptno=&#34;20&#34; ename=&#34;Jill&#34; salary=&#34;100001&#34;/&gt;
     &lt;/emps&gt;&#39;;
  deptsxmlstring VARCHAR2(300):=
    &#39;&lt;?xml version=&#34;1.0&#34;?&gt;
     &lt;depts&gt;
       &lt;dept deptno=&#34;10&#34; dname=&#34;Administration&#34;/&gt;
       &lt;dept deptno=&#34;20&#34; dname=&#34;Marketing&#34;/&gt;
       &lt;dept deptno=&#34;30&#34; dname=&#34;Purchasing&#34;/&gt;
     &lt;/depts&gt;&#39;;
BEGIN
  res := DBMS_XDB_REPOS.createResource(&#39;/public/emps.xml&#39;,   empsxmlstring);
  res := DBMS_XDB_REPOS.createResource(&#39;/public/empsns.xml&#39;, empsxmlnsstring);
  res := DBMS_XDB_REPOS.createResource(&#39;/public/depts.xml&#39;,  deptsxmlstring);
END;
/
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB5124"></a><a id="ADXDB5123"></a>
<div class="props_rev_3"><a id="GUID-675FAD6E-52CE-4685-B5CA-9B77ACC17422"></a>
<h3 id="ADXDB-GUID-675FAD6E-52CE-4685-B5CA-9B77ACC17422" class="sect3"><span class="enumeration_section">5.1.1</span> XQuery Sequences Can Contain Data of Any XQuery Type</h3>
<div>
<p>It is important to keep in mind that XQuery is a general <span class="italic">sequence</span>-manipulation language. Its expressions and their results are not necessarily XML data. An XQuery sequence can contain items of any XQuery type, which includes numbers, strings, Boolean values, dates, and various types of XML node (<code>document-node()</code>, <code>element()</code>, <code>attribute()</code>, <code>text()</code>, <code>namespace()</code>, and so on).</p>
<p><a href="xdb04cre.htm#GUID-675FAD6E-52CE-4685-B5CA-9B77ACC17422__CBAJAIAF">Example 5-2</a> provides a sampling. It applies SQL/XML function <code>XMLQuery</code> to an XQuery sequence that contains items of several different kinds:</p>
<ul style="list-style-type: disc;">
<li>
<p>an integer literal: <code>1</code></p>
</li>
<li>
<p>a arithmetic expression: <code>2 + 3</code></p>
</li>
<li>
<p>a string literal: <code>&#34;a&#34;</code></p>
</li>
<li>
<p>a sequence of integers: <code>100 to 102</code></p>
</li>
<li>
<p>a constructed XML element node: <code>&lt;A&gt;33&lt;/A&gt;</code></p>
</li>
</ul>
<p><a href="xdb04cre.htm#GUID-675FAD6E-52CE-4685-B5CA-9B77ACC17422__CBAJAIAF">Example 5-2</a> also shows construction of a sequence using the comma operator (<span class="bold"><code>,</code></span>) and parentheses (<span class="bold"><code>(</code></span>, <span class="bold"><code>)</code></span>) for grouping.</p>
<p>The sequence expression <code>100 to 102</code> evaluates to the sequence <code>(100, 101, 102)</code>, so the argument to <code>XMLQuery</code> here is a sequence that contains a nested sequence. The sequence argument is automatically flattened, as is always the case for XQuery sequences. The argument is, in effect, <code>(1, 5, &#34;a&#34;, 100, 101, 102, &lt;A&gt;33&lt;/A&gt;)</code>.</p>
<div class="example" id="GUID-675FAD6E-52CE-4685-B5CA-9B77ACC17422__CBAJAIAF">
<p class="titleinexample">Example 5-2 XMLQuery Applied to a Sequence of Items of Different Types</p>
<pre dir="ltr">SELECT XMLQuery(&#39;(1, 2 + 3, &#34;a&#34;, 100 to 102, &lt;A&gt;33&lt;/A&gt;)&#39;
                RETURNING CONTENT) AS output
  FROM DUAL;

OUTPUT
--------------------------
1 5 a 100 101 102&lt;A&gt;33&lt;/A&gt;
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5126"></a><a id="ADXDB5127"></a><a id="ADXDB5125"></a>
<div class="props_rev_3"><a id="GUID-767E262F-559F-4EBE-84C1-65683879E1D5"></a>
<h3 id="ADXDB-GUID-767E262F-559F-4EBE-84C1-65683879E1D5" class="sect3"><span class="enumeration_section">5.1.2</span> Querying XML Data in Oracle XML&nbsp;DB Repository Using XQuery</h3>
<div>
<p>Examples are presented that use XQuery with XML data in Oracle XML&nbsp;DB Repository. You use XQuery functions <code>fn:doc</code> and <code>fn:collection</code> to query file and folder resources in the repository, respectively.</p>
<div class="section">
<p>The examples here use XQuery function <code>fn:doc</code> to obtain a repository file that contains XML data, and then bind XQuery variables to parts of that data using <code>for</code> and <code>let</code> FLWOR-expression clauses.</p>
<div class="infoboxnotealso" id="GUID-767E262F-559F-4EBE-84C1-65683879E1D5__GUID-E2B19A4D-7430-4DCA-A4AD-2DBD71335368">
<p class="notep1">See Also:</p>
<p><a href="xdb_xquery.htm#GUID-0988D78A-DDB3-4DC2-9ED9-052B37952FE1" title="Oracle XML&nbsp;DB supports XQuery functions fn:doc, fn:collection, and fn:doc-available for all resources in Oracle XML&nbsp;DB Repository.">XQuery Functions fn:doc_ fn:collection_ and fn:doc-available</a></p>
</div>
<p><a href="xdb04cre.htm#GUID-767E262F-559F-4EBE-84C1-65683879E1D5__CBAGIABD">Example 5-3</a> queries two XML-document resources in Oracle XML&nbsp;DB Repository: <code>/public/emps.xml</code> and <code>/public/depts.xml</code>. It illustrates the use of <code>fn:doc</code> and each of the possible FLWOR-expression clauses.</p>
<p>In <a href="xdb04cre.htm#GUID-767E262F-559F-4EBE-84C1-65683879E1D5__CBAGIABD">Example 5-3</a>, the various FLWOR clauses perform these operations:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><code>for</code></span> iterates over the <code>emp</code> elements in <code>/public/emps.xml</code>, binding variable <code>$e</code> to the value of each such element, in turn. That is, it iterates over a general list of employees, binding <code>$e</code> to each employee.</p>
</li>
<li>
<p><span class="bold"><code>let</code></span> binds variable <code>$d</code> to a <span class="italic">sequence</span> consisting of all of the values of <code>dname</code> attributes of those <code>dept</code> elements in <code>/public/emps.xml</code> whose <code>deptno</code> attributes have the same value as the <code>deptno</code> attribute of element <code>$e</code> (this is a join operation). That is, it binds <code>$d</code> to the names of all of the departments that have the same department number as the department of employee <code>$e</code>. (It so happens that the <code>dname</code> value is unique for each <code>deptno</code> value in <code>depts.xml</code>.) Note that, unlike <code>for</code>, <code>let</code> never iterates over values; <code>$d</code> is bound only once in this example.</p>
</li>
<li>
<p>Together, <code>for</code> and <code>let</code> produce a stream of tuples (<code>$e</code>, <code>$d</code>), where <code>$e</code> represents an employee and <code>$d</code> represents the names of all of the departments to which that employee belongs&thinsp;&mdash;in this case, the unique name of the employee&#39;s unique department.</p>
</li>
<li>
<p><span class="bold"><code>where</code></span> filters this tuple stream, keeping only tuples with employees whose salary is greater than 100,000.</p>
</li>
<li>
<p><span class="bold"><code>order by</code></span> sorts the filtered tuple stream by employee number, <code>empno</code> (in ascending order, by default).</p>
</li>
<li>
<p><span class="bold"><code>return</code></span> constructs <code>emp</code> elements, one for each tuple. Attributes <code>ename</code> and <code>dept</code> of these elements are constructed using attribute <code>ename</code> from the input and <code>$d</code>, respectively. Note that the element and attribute names <code>emp</code> and <code>ename</code> in the output have no necessary connection with the same names in the input document <code>emps.xml</code>.</p>
</li>
</ul>
<p><a href="xdb04cre.htm#GUID-767E262F-559F-4EBE-84C1-65683879E1D5__CBAHEIJG">Example 5-4</a> also uses each of the FLWOR-expression clauses. It shows the use of XQuery functions <code>doc</code>, <code>count</code>, <code>avg</code>, and <code>integer</code>, which are in the namespace for built-in XQuery functions, <code>http://www.w3.org/2003/11/xpath-functions</code>. This namespace is bound to the prefix <code>fn</code>.</p>
<p>In <a href="xdb04cre.htm#GUID-767E262F-559F-4EBE-84C1-65683879E1D5__CBAHEIJG">Example 5-4</a>, the various FLWOR clauses perform these operations:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><code>for</code></span> iterates over <code>deptno</code> attributes in input document <code>/public/depts.xml</code>, binding variable <code>$d</code> to the value of each such attribute, in turn.</p>
</li>
<li>
<p><span class="bold"><code>let</code></span> binds variable <code>$e</code> to a sequence consisting of all of the <code>emp</code> elements in input document <code>/public/emps.xml</code> whose <code>deptno</code> attributes have value <code>$d</code> (this is a join operation).</p>
</li>
<li>
<p>Together, <code>for</code> and <code>let</code> produce a stream of tuples (<code>$d</code>, <code>$e</code>), where <code>$d</code> represents a department number and <code>$e</code> represents the set of employees in that department.</p>
</li>
<li>
<p><span class="bold"><code>where</code></span> filters this tuple stream, keeping only tuples with more than one employee.</p>
</li>
<li>
<p><span class="bold"><code>order by</code></span> sorts the filtered tuple stream by average salary in descending order. The average is computed by applying XQuery function <code>avg</code> (in namespace <code>fn</code>) to the values of attribute <code>salary</code>, which is attached to the <code>emp</code> elements of <code>$e</code>.</p>
</li>
<li>
<p><span class="bold"><code>return</code></span> constructs <code>big-dept</code> elements, one for each tuple produced by <code>order by</code>. The <code>text()</code> node of <code>big-dept</code> contains the department number, bound to <code>$d</code>. A <code>headcount</code> child element contains the number of employees, bound to <code>$e</code>, as determined by XQuery function <code>count</code>. An <code>avgsal</code> child element contains the computed average salary.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-767E262F-559F-4EBE-84C1-65683879E1D5__CBAGIABD">
<p class="titleinexample">Example 5-3 FLOWR Expression Using for, let, order by, where, and return</p>
<pre dir="ltr">SELECT XMLQuery(&#39;for $e in doc(&#34;/public/emps.xml&#34;)/emps/emp
                 let $d :=
                   doc(&#34;/public/depts.xml&#34;)//dept[@deptno = $e/@deptno]/@dname
                 where $e/@salary &gt; 100000
                 order by $e/@empno
                 return &lt;emp ename=&#34;{$e/@ename}&#34; dept=&#34;{$d}&#34;/&gt;&#39;
                RETURNING CONTENT) FROM DUAL;

XMLQUERY(&#39;FOR$EINDOC(&#34;/PUBLIC/EMPS.XML&#34;)/EMPS/EMPLET$D:=DOC(&#34;/PUBLIC/DEPTS.XML&#34;)
--------------------------------------------------------------------------------
&lt;emp ename=&#34;Jack&#34; dept=&#34;Administration&#34;&gt;&lt;/emp&gt;&lt;emp ename=&#34;Jill&#34; dept=&#34;Marketing&#34;
&gt;&lt;/emp&gt;
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-767E262F-559F-4EBE-84C1-65683879E1D5__CBAHEIJG">
<p class="titleinexample">Example 5-4 FLOWR Expression Using Built-In Functions</p>
<pre dir="ltr">SELECT XMLQuery(&#39;for $d in fn:doc(&#34;/public/depts.xml&#34;)/depts/dept/@deptno
                 let $e := fn:doc(&#34;/public/emps.xml&#34;)/emps/emp[@deptno = $d]
                 where fn:count($e) &gt; 1
                 order by fn:avg($e/@salary) descending
                 return
                   &lt;big-dept&gt;{$d,
                              &lt;headcount&gt;{fn:count($e)}&lt;/headcount&gt;,
                              &lt;avgsal&gt;{xs:integer(fn:avg($e/@salary))}&lt;/avgsal&gt;}
                   &lt;/big-dept&gt;&#39;
                RETURNING CONTENT) FROM DUAL;

XMLQUERY(&#39;FOR$DINFN:DOC(&#34;/PUBLIC/DEPTS.XML&#34;)/DEPTS/DEPT/@DEPTNOLET$E:=FN:DOC(&#34;/P
--------------------------------------------------------------------------------
&lt;big-dept deptno=&#34;10&#34;&gt;&lt;headcount&gt;2&lt;/headcount&gt;&lt;avgsal&gt;165500&lt;/avgsal&gt;&lt;/big-dept&gt;
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5130"></a><a id="ADXDB5131"></a><a id="ADXDB5132"></a><a id="ADXDB5129"></a>
<div class="props_rev_3"><a id="GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0"></a>
<h3 id="ADXDB-GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0" class="sect3"><span class="enumeration_section">5.1.3</span> Querying Relational Data Using XQuery and URI Scheme oradb</h3>
<div>
<p>Examples are presented that use XQuery to query relational table or view data as if it were XML data. The examples use XQuery function <code>fn:collection</code>, passing as argument a URI that uses the URI-scheme name <code>oradb</code> together with the database location of the data.</p>
<div class="section">
<p><a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAFCFCF">Example 5-5</a> uses Oracle XQuery function <code>fn:collection</code> in a FLWOR expression to query two relational tables, <code>regions</code> and <code>countries</code>. Both tables belong to sample database schema <code>HR</code>. The example also passes scalar SQL value <code>Asia</code> to XQuery variable <code>$regionname</code>. Any SQL expression can be evaluated to produce a value passed to XQuery using <code>PASSING</code>. In this case, the value comes from a SQL*Plus variable, <code>REGION</code>. You must cast the value to the scalar SQL data type expected, in this case, <code>VARCHAR2(40)</code>.</p>
<p>In <a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAFCFCF">Example 5-5</a>, the various FLWOR clauses perform these operations:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><code>for</code></span> iterates over sequences of XML elements returned by calls to <code>fn:collection</code>. In the first call, each element corresponds to a row of relational table <code>hr.regions</code> and is bound to variable <code>$i</code>. Similarly, in the second call to <code>fn:collection</code>, <code>$j</code> is bound to successive rows of table <code>hr.countries</code>. Since <code>regions</code> and <code>countries</code> are not <code>XMLType</code> tables, the top-level element corresponding to a row in each table is <code>ROW</code> (a wrapper element). Iteration over the row elements is unordered.</p>
</li>
<li>
<p><span class="bold"><code>where</code></span> filters the rows from both tables, keeping only those pairs of rows whose <code>region_id</code> is the same for each table (it performs a join on <code>region_id</code>) and whose <code>region_name</code> is <code>Asia</code>.</p>
</li>
<li>
<p><span class="bold"><code>return</code></span> returns the filtered rows from table <code>hr.countries</code> as an XML document containing XML fragments with <code>ROW</code> as their top-level element.</p>
</li>
</ul>
<p><a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAJHHJD">Example 5-6</a> uses <code>fn:collection</code> within nested FLWOR expressions to query relational data.</p>
<p>In <a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAJHHJD">Example 5-6</a>, the various FLWOR clauses perform these operations:</p>
<ul style="list-style-type: disc;">
<li>
<p>The outer <span class="bold"><code>for</code></span> iterates over the sequence of XML elements returned by <code>fn:collection</code>: each element corresponds to a row of relational table <code>oe.warehouses</code> and is bound to variable <code>$i</code>. Since <code>warehouses</code> is not an <code>XMLType</code> table, the top-level element corresponding to a row is <code>ROW</code>. The iteration over the row elements is unordered.</p>
</li>
<li>
<p>The inner <span class="bold"><code>for</code></span> iterates, similarly, over a sequence of XML elements returned by <code>fn:collection</code>: each element corresponds to a row of relational table <code>hr.locations</code> and is bound to variable <code>$j</code>.</p>
</li>
<li>
<p><span class="bold"><code>where</code></span> filters the tuples (<code>$i</code>, <code>$j</code>), keeping only those whose <code>location_id</code> child is the same for <code>$i</code> and <code>$j</code> (it performs a join on <code>location_id</code>).</p>
</li>
<li>
<p>The inner <span class="bold"><code>return</code></span> constructs an XQuery sequence of elements <code>STREET_ADDRESS</code>, <code>CITY</code>, and <code>STATE_PROVINCE</code>, all of which are children of locations-table <code>ROW</code> element <code>$j</code>; that is, they are the values of the locations-table columns of the same name.</p>
</li>
<li>
<p>The outer <span class="bold"><code>return</code></span> wraps the result of the inner <code>return</code> in a <code>Location</code> element, and wraps that in a <code>Warehouse</code> element. It provides the <code>Warehouse</code> element with an <code>id</code> attribute whose value comes from the <code>warehouse_id</code> column of table <code>warehouses</code>.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__GUID-DAAECF5E-2366-4075-A3A6-30F85CC1A141">
<p class="notep1">See Also:</p>
<p><a href="xdb04cre.htm#GUID-34E9F91A-1213-4142-B06F-91B11FD189B1__CBAIJAAD">Example 5-41</a> for the execution plan of <a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAJHHJD">Example 5-6</a></p>
</div>
<p><a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAJEGFH">Example 5-7</a> uses SQL/XML function <code>XMLTable</code> to decompose the result of an XQuery query to produce virtual relational data. The XQuery expression used in this example is identical to the one used in <a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAJHHJD">Example 5-6</a>; the result of evaluating the XQuery expression is a sequence of <code>Warehouse</code> elements. Function <code>XMLTable</code> produces a virtual relational table whose rows are those <code>Warehouse</code> elements. More precisely, in this example the value of pseudocolumn <code>COLUMN_VALUE</code> for each virtual-table row is an XML fragment (of type <code>XMLType</code>) with a single <code>Warehouse</code> element.</p>
<div class="infoboxnotealso" id="GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__GUID-46A16B74-8617-4C6F-AB45-0D5953FE1B18">
<p class="notep1">See Also:</p>
<p><a href="xdb04cre.htm#GUID-34E9F91A-1213-4142-B06F-91B11FD189B1__CBAJFIBF">Example 5-42</a> for the execution plan of <a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAJEGFH">Example 5-7</a></p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAFCFCF">
<p class="titleinexample">Example 5-5 Querying Relational Data as XML Using XMLQuery</p>
<pre dir="ltr">DEFINE REGION = &#39;Asia&#39;
SELECT XMLQuery(&#39;for $i in <span class="bold">fn:collection(&#34;oradb:/HR/REGIONS&#34;)</span>,
                     $j in <span class="bold">fn:collection(&#34;oradb:/HR/COUNTRIES&#34;)</span>
                   where $i/ROW/REGION_ID = $j/ROW/REGION_ID
                     and $i/ROW/REGION_NAME = $regionname
                   return $j&#39;
                PASSING CAST(&#39;&amp;REGION&#39; AS VARCHAR2(40)) AS &#34;regionname&#34;
                RETURNING CONTENT) AS asian_countries
  FROM DUAL;
</pre>
<p>This produces the following result. (The result is shown here pretty-printed, for clarity.)</p>
<pre dir="ltr">ASIAN_COUNTRIES
-----------------------------------------
&lt;ROW&gt;
  &lt;COUNTRY_ID&gt;AU&lt;/COUNTRY_ID&gt;
  &lt;COUNTRY_NAME&gt;Australia&lt;/COUNTRY_NAME&gt;
  &lt;REGION_ID&gt;3&lt;/REGION_ID&gt;
&lt;/ROW&gt;
&lt;ROW&gt;
  &lt;COUNTRY_ID&gt;CN&lt;/COUNTRY_ID&gt;
  &lt;COUNTRY_NAME&gt;China&lt;/COUNTRY_NAME&gt;
  &lt;REGION_ID&gt;3&lt;/REGION_ID&gt;
&lt;/ROW&gt;
&lt;ROW&gt;
  &lt;COUNTRY_ID&gt;HK&lt;/COUNTRY_ID&gt;
  &lt;COUNTRY_NAME&gt;HongKong&lt;/COUNTRY_NAME&gt;
  &lt;REGION_ID&gt;3&lt;/REGION_ID&gt;
&lt;/ROW&gt;
&lt;ROW&gt;
  &lt;COUNTRY_ID&gt;IN&lt;/COUNTRY_ID&gt;
  &lt;COUNTRY_NAME&gt;India&lt;/COUNTRY_NAME&gt;
  &lt;REGION_ID&gt;3&lt;/REGION_ID&gt;
&lt;/ROW&gt;
&lt;ROW&gt;
  &lt;COUNTRY_ID&gt;JP&lt;/COUNTRY_ID&gt;
  &lt;COUNTRY_NAME&gt;Japan&lt;/COUNTRY_NAME&gt;
  &lt;REGION_ID&gt;3&lt;/REGION_ID&gt;
&lt;/ROW&gt;
&lt;ROW&gt;
  &lt;COUNTRY_ID&gt;SG&lt;/COUNTRY_ID&gt;
  &lt;COUNTRY_NAME&gt;Singapore&lt;/COUNTRY_NAME&gt;
  &lt;REGION_ID&gt;3&lt;/REGION_ID&gt;
&lt;/ROW&gt;
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAJHHJD">
<p class="titleinexample">Example 5-6 Querying Relational Data as XML Using a Nested FLWOR Expression</p>
<pre dir="ltr">CONNECT hr
Enter password: <span class="italic">password</span>

Connected.

GRANT SELECT ON LOCATIONS TO OE
/
CONNECT oe
Enter password: <span class="italic">password</span>

Connected.

SELECT XMLQuery(
         &#39;for $i in <span class="bold">fn:collection(&#34;oradb:/OE/WAREHOUSES&#34;)/ROW</span>
          return &lt;Warehouse id=&#34;{$i/WAREHOUSE_ID}&#34;&gt;
                   &lt;Location&gt;
                     {for $j in <span class="bold">fn:collection(&#34;oradb:/HR/LOCATIONS&#34;)/ROW</span>
                      where $j/LOCATION_ID eq $i/LOCATION_ID 
                      return ($j/STREET_ADDRESS, $j/CITY, $j/STATE_PROVINCE)}
                   &lt;/Location&gt;    
                 &lt;/Warehouse&gt;&#39;
         RETURNING CONTENT) FROM DUAL;
</pre>
<p>This query is an example of using nested FLWOR expressions. It accesses relational table <code>warehouses</code>, which is in sample database schema <code>oe</code>, and relational table <code>locations</code>, which is in sample database schema <code>HR</code>. To run this example as user <code>oe</code>, you must first connect as user <code>hr</code> and grant permission to user <code>oe</code> to perform <code>SELECT</code> operations on table <code>locations</code>.</p>
<p>This produces the following result. (The result is shown here pretty-printed, for clarity.)</p>
<pre dir="ltr">XMLQUERY(&#39;FOR$IINFN:COLLECTION(&#34;ORADB:/OE/WAREHOUSES&#34;)/ROWRETURN&lt;WAREHOUSEID=&#34;{$
--------------------------------------------------------------------------------
&lt;Warehouse id=&#34;1&#34;&gt;
  &lt;Location&gt;
    &lt;STREET_ADDRESS&gt;2014 Jabberwocky Rd&lt;/STREET_ADDRESS&gt;
    &lt;CITY&gt;Southlake&lt;/CITY&gt;
    &lt;STATE_PROVINCE&gt;Texas&lt;/STATE_PROVINCE&gt;
  &lt;/Location&gt;
&lt;/Warehouse&gt;
&lt;Warehouse id=&#34;2&#34;&gt;
  &lt;Location&gt;
    &lt;STREET_ADDRESS&gt;2011 Interiors Blvd&lt;/STREET_ADDRESS&gt;
    &lt;CITY&gt;South San Francisco&lt;/CITY&gt;
    &lt;STATE_PROVINCE&gt;California&lt;/STATE_PROVINCE&gt;
  &lt;/Location&gt;
&lt;/Warehouse&gt;
&lt;Warehouse id=&#34;3&#34;&gt;
  &lt;Location&gt;
    &lt;STREET_ADDRESS&gt;2007 Zagora St&lt;/STREET_ADDRESS&gt;
    &lt;CITY&gt;South Brunswick&lt;/CITY&gt;
    &lt;STATE_PROVINCE&gt;New Jersey&lt;/STATE_PROVINCE&gt;
  &lt;/Location&gt;
&lt;/Warehouse&gt;
&lt;Warehouse id=&#34;4&#34;&gt;
  &lt;Location&gt;
    &lt;STREET_ADDRESS&gt;2004 Charade Rd&lt;/STREET_ADDRESS&gt;
    &lt;CITY&gt;Seattle&lt;/CITY&gt;
    &lt;STATE_PROVINCE&gt;Washington&lt;/STATE_PROVINCE&gt;
  &lt;/Location&gt;
&lt;/Warehouse&gt;
&lt;Warehouse id=&#34;5&#34;&gt;
  &lt;Location&gt;
    &lt;STREET_ADDRESS&gt;147 Spadina Ave&lt;/STREET_ADDRESS&gt;
    &lt;CITY&gt;Toronto&lt;/CITY&gt;
    &lt;STATE_PROVINCE&gt;Ontario&lt;/STATE_PROVINCE&gt;
  &lt;/Location&gt;
&lt;/Warehouse&gt;
&lt;Warehouse id=&#34;6&#34;&gt;
  &lt;Location&gt;
    &lt;STREET_ADDRESS&gt;12-98 Victoria Street&lt;/STREET_ADDRESS&gt;
    &lt;CITY&gt;Sydney&lt;/CITY&gt;
    &lt;STATE_PROVINCE&gt;New South Wales&lt;/STATE_PROVINCE&gt;
  &lt;/Location&gt;
&lt;/Warehouse&gt;
&lt;Warehouse id=&#34;7&#34;&gt;
  &lt;Location&gt;
    &lt;STREET_ADDRESS&gt;Mariano Escobedo 9991&lt;/STREET_ADDRESS&gt;
    &lt;CITY&gt;Mexico City&lt;/CITY&gt;
    &lt;STATE_PROVINCE&gt;Distrito Federal,&lt;/STATE_PROVINCE&gt;
  &lt;/Location&gt;
&lt;/Warehouse&gt;
&lt;Warehouse id=&#34;8&#34;&gt;
  &lt;Location&gt;
    &lt;STREET_ADDRESS&gt;40-5-12 Laogianggen&lt;/STREET_ADDRESS&gt;
    &lt;CITY&gt;Beijing&lt;/CITY&gt;
  &lt;/Location&gt;
&lt;/Warehouse&gt;
&lt;Warehouse id=&#34;9&#34;&gt;
  &lt;Location&gt;
    &lt;STREET_ADDRESS&gt;1298 Vileparle (E)&lt;/STREET_ADDRESS&gt;
    &lt;CITY&gt;Bombay&lt;/CITY&gt;
    &lt;STATE_PROVINCE&gt;Maharashtra&lt;/STATE_PROVINCE&gt;
  &lt;/Location&gt;
&lt;/Warehouse&gt;
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAJEGFH">
<p class="titleinexample">Example 5-7 Querying Relational Data as XML Using XMLTable</p>
<pre dir="ltr">SELECT * 
  FROM XMLTable(
         &#39;for $i in fn:collection(&#34;oradb:/OE/WAREHOUSES&#34;)/ROW
          return &lt;Warehouse id=&#34;{$i/WAREHOUSE_ID}&#34;&gt;
                   &lt;Location&gt;
                     {for $j in fn:collection(&#34;oradb:/HR/LOCATIONS&#34;)/ROW
                      where $j/LOCATION_ID eq $i/LOCATION_ID 
                      return ($j/STREET_ADDRESS, $j/CITY, $j/STATE_PROVINCE)}
                   &lt;/Location&gt;
                 &lt;/Warehouse&gt;&#39;);
</pre>
<p>This produces the same result as <a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAJHHJD">Example 5-6</a>, except that each <code>Warehouse</code> element is output as a separate row, instead of all <code>Warehouse</code> elements being output together in a single row.</p>
<pre dir="ltr">COLUMN_VALUE
--------------------------------------------------------
&lt;Warehouse id=&#34;1&#34;&gt;
  &lt;Location&gt;
    &lt;STREET_ADDRESS&gt;2014 Jabberwocky Rd&lt;/STREET_ADDRESS&gt;
    &lt;CITY&gt;Southlake&lt;/CITY&gt;
    &lt;STATE_PROVINCE&gt;Texas&lt;/STATE_PROVINCE&gt;
  &lt;/Location&gt;
&lt;/Warehouse&gt;
&lt;Warehouse id=&#34;2&#34;&gt;
  &lt;Location&gt;
    &lt;STREET_ADDRESS&gt;2011 Interiors Blvd&lt;/STREET_ADDRESS&gt;
    &lt;CITY&gt;South San Francisco&lt;/CITY&gt;
    &lt;STATE_PROVINCE&gt;California&lt;/STATE_PROVINCE&gt;
  &lt;/Location&gt;
&lt;/Warehouse&gt;
<span class="bold">. . .</span>
 
<span class="bold">9 rows selected.</span>
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5134"></a><a id="ADXDB5135"></a><a id="ADXDB5136"></a><a id="ADXDB5137"></a><a id="ADXDB6227"></a><a id="ADXDB6228"></a><a id="ADXDB5138"></a><a id="ADXDB5133"></a>
<div class="props_rev_3"><a id="GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595"></a>
<h3 id="ADXDB-GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595" class="sect3"><span class="enumeration_section">5.1.4</span> Querying XMLType Data Using XQuery</h3>
<div>
<p>Examples are presented that use XQuery to query <code>XMLType</code> data.</p>
<div class="section">
<p>The query in <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBADDAEJ">Example 5-8</a> passes an <code>XMLType</code> column, <code>warehouse_spec</code>, as <span class="italic">context</span> item to XQuery, using function <code>XMLQuery</code> with the <code>PASSING</code> clause. It constructs a <code>Details</code> element for each of the warehouses whose area is greater than 80,000: <code>/Warehouse/Area &gt; 80000</code>.</p>
<p>In <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBADDAEJ">Example 5-8</a>, function <code>XMLQuery</code> is applied to the <code>warehouse_spec</code> column in each row of table <code>warehouses</code>. The various FLWOR clauses perform these operations:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><code>for</code></span> iterates over the <code>Warehouse</code> elements in each row of column <code>warehouse_spec</code> (the passed context item): each such element is bound to variable <code>$i</code>, in turn. The iteration is unordered.</p>
</li>
<li>
<p><span class="bold"><code>where</code></span> filters the <code>Warehouse</code> elements, keeping only those whose <code>Area</code> child has a value greater than 80,000.</p>
</li>
<li>
<p><span class="bold"><code>return</code></span> constructs an XQuery sequence of <code>Details</code> elements, each of which contains a <code>Docks</code> and a <code>Rail</code> child elements. The <code>num</code> attribute of the constructed <code>Docks</code> element is set to the <code>text()</code> value of the <code>Docks</code> child of <code>Warehouse</code>. The <code>text()</code> content of <code>Rail</code> is set to <code>true</code> or <code>false</code>, depending on the value of the <code>RailAccess</code> attribute of element <code>Warehouse</code>.</p>
</li>
</ul>
<p>The <code>SELECT</code> statement in <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBADDAEJ">Example 5-8</a> applies to each row in table <code>warehouses</code>. The <code>XMLQuery</code> expression returns the <span class="italic">empty sequence</span> for those rows that do not match the XQuery expression. Only the warehouses in New Jersey and Seattle satisfy the XQuery query, so they are the only warehouses for which <code>&lt;Details&gt;...&lt;/Details&gt;</code> is returned.</p>
<p><a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAHBFGE">Example 5-9</a> uses SQL/XML function <code>XMLTable</code> to query an <code>XMLType</code> table, <code>oe.purchaseorder</code>, which contains XML Schema-based data. It uses the <code>PASSING</code> clause to provide the <code>purchaseorder</code> table as the context item for the XQuery-expression argument to <code>XMLTable</code>. Pseudocolumn <code>COLUMN_VALUE</code> of the resulting virtual table holds a constructed element, <code>A10po</code>, which contains the <code>Reference</code> information for those purchase orders whose <code>CostCenter</code> element has value <code>A10</code> and whose <code>User</code> element has value <code>SMCCAIN</code>. The query performs a join between the virtual table and database table <code>purchaseorder</code>.</p>
<p>The <code>PASSING</code> clause of function <code>XMLTable</code> passes the <code>OBJECT_VALUE</code> of <code>XMLType</code> table <code>purchaseorder</code>, to serve as the XPath context. The <code>XMLTable</code> expression thus <span class="italic">depends</span> on the <code>purchaseorder</code> table. Because of this, table <code>purchaseorder</code> must appear <span class="italic">before</span> the <code>XMLTable</code> expression in the <code>FROM</code> list. This is a general requirement in any situation involving data dependence.</p>
<div class="infobox-note" id="GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__GUID-67B1E71C-5740-4DFE-B645-C765A674E3BA">
<p class="notep1">Note:</p>
<p>Whenever a <code>PASSING</code> clause refers to a column of an <code>XMLType</code> table in a query, that table <span class="italic"><span class="bold">must appear before</span></span> the <code>XMLTable</code> expression in the query <code>FROM</code> list. This is because the <code>XMLTable</code> expression <span class="italic">depends</span> on the <code>XMLType</code> table&thinsp;&mdash;&thinsp;a <span class="italic">left lateral</span> (correlated) join is needed, to ensure a one-to-many (1:N) relationship between the <code>XMLType</code> table row accessed and the rows generated from it by <code>XMLTable</code>.</p>
</div>
<p><a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAJIBCD">Example 5-10</a> is similar to <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAHBFGE">Example 5-9</a> in its effect. It uses <code>XMLQuery</code>, instead of <code>XMLTable</code>, to query <code>oe.purchaseorder</code>. These two examples differ in their treatment of the empty sequences returned by the XQuery expression. In <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAHBFGE">Example 5-9</a>, these empty sequences are not joined with the <code>purchaseorder</code> table, so the overall SQL-query result set has only ten rows. In <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAJIBCD">Example 5-10</a>, these empty sequences are part of the overall result set of the SQL query, which contains 132 rows, one for each of the rows in table <code>purchaseorder</code>. All but ten of those rows are empty, and show up in the output as empty lines. To save space here, those empty lines have been removed.</p>
<div class="infoboxnotealso" id="GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__GUID-4BE2171D-BB96-4644-8766-32DD119281D8">
<p class="notep1">See Also:</p>
<p><a href="xdb04cre.htm#GUID-B34F476B-5961-4C4B-9076-454C79D7B583__CBAFEHBC">Example 5-43</a> for the execution plan of <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAJIBCD">Example 5-10</a></p>
</div>
<p><a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAJEEFD">Example 5-11</a> uses <code>XMLTable</code> clauses <code>PASSING</code> and <code>COLUMNS</code>. The XQuery expression iterates over top-level <code>PurchaseOrder</code> elements, constructing a <code>PO</code> element for each purchase order with cost center <code>A10</code>. The resulting <code>PO</code> elements are then passed to <code>XMLTable</code> for processing.</p>
<p>In <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAJEEFD">Example 5-11</a>, data from the children of <code>PurchaseOrder</code> is used to construct the children of <code>PO</code>, which are <code>Ref</code>, <code>Type</code>, and <code>Name</code>. The content of <code>Type</code> is taken from the content of <code>/PurchaseOrder/SpecialInstructions</code>, but the classes of <code>SpecialInstructions</code> are divided up differently for <code>Type</code>.</p>
<p>Function <code>XMLTable</code> breaks up the result of XQuery evaluation, returning it as three <code>VARCHAR2</code> columns of a virtual table: <code>poref</code>, <code>priority</code>, and <code>contact</code>. The <code>DEFAULT</code> clause is used to supply a default <code>priority</code> of <code>Regular</code>.</p>
<p><a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAJEEFD">Example 5-11</a> does not use the clause <code>RETURNING SEQUENCE BY REF</code>, which means that the XQuery sequence returned and then used by the <code>COLUMNS</code> clause is passed by <span class="italic">value</span>, not by reference. That is, a copy of the targeted nodes is returned, not a reference to the actual nodes.</p>
<p>When the returned sequence is passed by value, the columns specified in a <code>COLUMNS</code> clause cannot refer to any data that is not in that returned copy. In particular, they cannot refer to data that <span class="italic">precedes</span> the targeted nodes in the source data.</p>
<p>To be able to refer to an arbitrary part of the source data from column specifications in a <code>COLUMNS</code> clause, you need to use the clause <code>RETURNING SEQUENCE BY REF</code>, which causes the sequence resulting from the XQuery expression to be returned by <span class="italic">reference</span>.</p>
<p><a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__BABIHBJA">Example 5-12</a> shows the use of clause <code>RETURNING SEQUENCE BY REF</code>, which allows column <code>reference</code> to refer to a node that is outside the nodes targeted by the XQuery expression. Because the sequence of <code>LineItem</code> nodes is returned by reference, the code has access to the complete tree of nodes, so it can navigate upward and then back down to node <code>Reference</code>.</p>
<p>Clause <code>RETURNING SEQUENCE BY REF</code> lets you specify that the result of evaluating the top-level XQuery expression used to generate rows for <code>XMLTable</code> be returned by reference. The same kind of choice is available for the result of evaluating a <code>PATH</code> expression in a <code>COLUMNS</code> clause. To specify that such a result be returned by reference you use <code>XMLType (SEQUENCE) BY REF</code> as the column data type.</p>
<p><a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__BABIDCFE">Example 5-13</a> illustrates this. It chains together two <code>XMLTable</code> tables, <code>t1</code> and <code>t2</code>, returning XML data from the source document by reference:</p>
<ul style="list-style-type: disc;">
<li>
<p>For column <code>reference</code> of the top-level table, <code>t1</code>, because it corresponds to a node outside element <code>LineItem</code> (just as in <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__BABIHBJA">Example 5-12</a>)</p>
</li>
<li>
<p>For column <code>part</code> of table <code>t1</code>, because it is passed to table <code>t2</code>, whose column <code>item</code> targets data outside node <code>Part</code></p>
</li>
</ul>
<p>In table <code>t1</code>, the type used for column <code>part</code> is <code>XMLType (SEQUENCE) BY REF</code>, so that the <code>part</code> data is a reference to the source data targeted by its <code>PATH</code> expression, <code>LineItem/Part</code>. This is needed because the <code>PATH</code> expression for column <code>item</code> in table <code>t2</code> targets attribute <code>ItemNumber</code> of the parent of element <code>Part</code>, <code>LineItem</code>. Without specifying that <code>part</code> is a reference, it would be a copy of just the <code>Part</code> element, so that using <code>PATH</code> expression <code>../@ItemNumber</code> would raise an error.</p>
<p><a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBACIIDC">Example 5-14</a> uses SQL/XML function <code>XMLTable</code> to break up the XML data in an <code>XMLType</code> collection element, <code>LineItem</code>, into separate columns of a virtual table.</p>
<div class="infoboxnotealso" id="GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__GUID-B8F2C036-D950-40E0-AEAE-5813F0F7A079">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb04cre.htm#GUID-B34F476B-5961-4C4B-9076-454C79D7B583__CBABFDJG">Example 5-44</a> for the execution plan of <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBACIIDC">Example 5-14</a></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb_rel_views.htm#GUID-E550E7D4-0D19-47CA-B86F-76825EE54CE1" title="To expose data from multiple levels of an XMLType table as individual rows in a relational view, apply SQL/XML function XMLTable to each level. Use this technique whenever there is a one-to-many (1:N) relationship between documents in the XMLType table and rows in the view.">Creating a Relational View over XML: Mapping XML Nodes to Columns</a>&#34;</span>, for an example of applying <code>XMLTable</code> to multiple document levels (multilevel chaining)</p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBADDAEJ">
<p class="titleinexample">Example 5-8 Querying an XMLType Column Using XMLQuery PASSING Clause</p>
<pre dir="ltr">SELECT warehouse_name, 
       XMLQuery(
         &#39;for $i in /Warehouse 
          where  $i/Area &gt; 80000 
          return &lt;Details&gt;
                   &lt;Docks num=&#34;{$i/Docks}&#34;/&gt;
                   &lt;Rail&gt;{if ($i/RailAccess = &#34;Y&#34;) then &#34;true&#34; else &#34;false&#34;}
                   &lt;/Rail&gt;
                 &lt;/Details&gt;&#39;
         PASSING warehouse_spec RETURNING CONTENT) big_warehouses
  FROM oe.warehouses;
</pre>
<p>This produces the following output:</p>
<pre dir="ltr">WAREHOUSE_NAME
--------------
BIG_WAREHOUSES
--------------
Southlake, Texas
 
 
San Francisco
 
 
New Jersey
&lt;Details&gt;&lt;Docks num=&#34;&#34;&gt;&lt;/Docks&gt;&lt;Rail&gt;false&lt;/Rail&gt;&lt;/Details&gt;
 
Seattle, Washington
&lt;Details&gt;&lt;Docks num=&#34;3&#34;&gt;&lt;/Docks&gt;&lt;Rail&gt;true&lt;/Rail&gt;&lt;/Details&gt;
 
Toronto
 
 
Sydney
 
 
Mexico City
 
 
Beijing
 
 
Bombay
 
 
9 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAHBFGE">
<p class="titleinexample">Example 5-9 Using XMLTABLE with XML Schema-Based Data</p>
<pre dir="ltr">SELECT xtab.COLUMN_VALUE
  FROM purchaseorder, XMLTable(&#39;for $i in /PurchaseOrder
                                where $i/CostCenter eq &#34;A10&#34;
                                  and $i/User eq &#34;SMCCAIN&#34;
                                return &lt;A10po pono=&#34;{$i/Reference}&#34;/&gt;&#39;
                               PASSING OBJECT_VALUE) xtab;
 
COLUMN_VALUE
---------------------------------------------------
&lt;A10po pono=&#34;SMCCAIN-20021009123336151PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123336341PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123337173PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123335681PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123335470PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123336972PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123336842PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123336512PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-2002100912333894PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123337403PDT&#34;&gt;&lt;/A10po&gt;
 
10 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAJIBCD">
<p class="titleinexample">Example 5-10 Using XMLQUERY with XML Schema-Based Data</p>
<pre dir="ltr">SELECT XMLQuery(&#39;for $i in /PurchaseOrder
                 where $i/CostCenter eq &#34;A10&#34;
                   and $i/User eq &#34;SMCCAIN&#34;
                 return &lt;A10po pono=&#34;{$i/Reference}&#34;/&gt;&#39;
                PASSING OBJECT_VALUE
                RETURNING CONTENT)
  FROM purchaseorder;
 
XMLQUERY(&#39;FOR$IIN/PURCHASEORDERWHERE$I/COSTCENTEREQ&#34;A10&#34;AND$I/USEREQ&#34;SMCCAIN&#34;RET
--------------------------------------------------------------------------------
&lt;A10po pono=&#34;SMCCAIN-20021009123336151PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123336341PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123337173PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123335681PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123335470PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123336972PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123336842PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123336512PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-2002100912333894PDT&#34;&gt;&lt;/A10po&gt;
&lt;A10po pono=&#34;SMCCAIN-20021009123337403PDT&#34;&gt;&lt;/A10po&gt;
 
<span class="bold">132 rows selected.</span>
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAJEEFD">
<p class="titleinexample">Example 5-11 Using XMLTABLE with PASSING and COLUMNS Clauses</p>
<pre dir="ltr">SELECT xtab.poref, xtab.priority, xtab.contact
  FROM purchaseorder,
       XMLTable(&#39;for $i in /PurchaseOrder
                 let $spl := $i/SpecialInstructions
                 where $i/CostCenter eq &#34;A10&#34;
                 return &lt;PO&gt;
                          &lt;Ref&gt;{$i/Reference}&lt;/Ref&gt;
                          {if ($spl eq &#34;Next Day Air&#34; or $spl eq &#34;Expedite&#34;) then
                             &lt;Type&gt;Fastest&lt;/Type&gt;
                           else if ($spl eq &#34;Air Mail&#34;) then
                             &lt;Type&gt;Fast&lt;/Type&gt;
                           <span class="bold">else ()}</span>
                          &lt;Name&gt;{$i/Requestor}&lt;/Name&gt;
                        &lt;/PO&gt;&#39;
                <span class="bold">PASSING</span> OBJECT_VALUE
                <span class="bold">COLUMNS</span> poref    VARCHAR2(20) PATH &#39;Ref&#39;,
                        priority VARCHAR2(8)  PATH &#39;Type&#39; <span class="bold">DEFAULT</span> &#39;Regular&#39;,
                        contact  VARCHAR2(20) PATH &#39;Name&#39;) xtab;
 
POREF                PRIORITY CONTACT
-------------------- -------- --------------------
SKING-20021009123336 Fastest  Steven A. King
SMCCAIN-200210091233 Regular  Samuel B. McCain
SMCCAIN-200210091233 Fastest  Samuel B. McCain
JCHEN-20021009123337 Fastest  John Z. Chen
JCHEN-20021009123337 Regular  John Z. Chen
SKING-20021009123337 Regular  Steven A. King
SMCCAIN-200210091233 Regular  Samuel B. McCain
JCHEN-20021009123338 Regular  John Z. Chen
SMCCAIN-200210091233 Regular  Samuel B. McCain
SKING-20021009123335 Regular  Steven X. King
SMCCAIN-200210091233 Regular  Samuel B. McCain
SKING-20021009123336 Regular  Steven A. King
SMCCAIN-200210091233 Fast     Samuel B. McCain
SKING-20021009123336 Fastest  Steven A. King
SKING-20021009123336 Fastest  Steven A. King
SMCCAIN-200210091233 Regular  Samuel B. McCain
JCHEN-20021009123335 Regular  John Z. Chen
SKING-20021009123336 Regular  Steven A. King
JCHEN-20021009123336 Regular  John Z. Chen
SKING-20021009123336 Regular  Steven A. King
SMCCAIN-200210091233 Regular  Samuel B. McCain
SKING-20021009123337 Regular  Steven A. King
SKING-20021009123338 Fastest  Steven A. King
SMCCAIN-200210091233 Regular  Samuel B. McCain
JCHEN-20021009123337 Regular  John Z. Chen
JCHEN-20021009123337 Regular  John Z. Chen
JCHEN-20021009123337 Regular  John Z. Chen
SKING-20021009123337 Regular  Steven A. King
JCHEN-20021009123337 Regular  John Z. Chen
SKING-20021009123337 Regular  Steven A. King
SKING-20021009123337 Regular  Steven A. King
SMCCAIN-200210091233 Fast     Samuel B. McCain
 
32 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__BABIHBJA">
<p class="titleinexample">Example 5-12 Using XMLTABLE with RETURNING SEQUENCE BY REF</p>
<pre dir="ltr">SELECT t.*
  FROM purchaseorder,
       XMLTable(&#39;/PurchaseOrder/LineItems/LineItem&#39; PASSING OBJECT_VALUE
                <span class="bold">RETURNING SEQUENCE BY REF</span>
                COLUMNS reference   VARCHAR2(30) PATH &#39;<span class="bold">../../Reference</span>&#39;,
                        item        VARCHAR2(4)  PATH &#39;@ItemNumber&#39;,
                        description VARCHAR2(45) PATH &#39;Description&#39;) t
  WHERE item = 5;
 
REFERENCE                      ITEM DESCRIPTION
------------------------------ ---- ------------------------------------
AMCEWEN-20021009123336171PDT   5    Coup De Torchon (Clean Slate)
AMCEWEN-20021009123336271PDT   5    The Unbearable Lightness Of Being
PTUCKER-20021009123336191PDT   5    The Scarlet Empress
PTUCKER-20021009123336291PDT   5    The Unbearable Lightness Of Being
SBELL-20021009123336231PDT     5    Black Narcissus
SBELL-20021009123336331PDT     5    Fishing With John 1 -3
SKING-20021009123336321PDT     5    The Red Shoes
SMCCAIN-20021009123336151PDT   5    Wages of Fear
SMCCAIN-20021009123336341PDT   5    The Most Dangerous Game
VJONES-20021009123336301PDT    5    Le Trou
 
10 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__BABIDCFE">
<p class="titleinexample">Example 5-13 Using Chained XMLTABLE with Access by Reference</p>
<pre dir="ltr">SELECT t1.reference, t2.id, t2.item
  FROM purchaseorder,
       XMLTable(&#39;/PurchaseOrder/LineItems&#39; PASSING OBJECT_VALUE
                <span class="bold">RETURNING SEQUENCE BY REF</span>
                COLUMNS part <span class="bold">XMLType (SEQUENCE) BY REF</span> PATH &#39;LineItem/Part&#39;,
                        reference VARCHAR2(30)         PATH &#39;../Reference&#39;) t1,
       XMLTable(&#39;.&#39; PASSING t1.part
                <span class="bold">RETURNING SEQUENCE BY REF</span>
                COLUMNS id   VARCHAR2(12) PATH &#39;@Id&#39;,
                        item NUMBER       PATH &#39;../@ItemNumber&#39;) t2;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBACIIDC">
<p class="titleinexample">Example 5-14 Using XMLTABLE to Decompose XML Collection Elements into Relational Data</p>
<pre dir="ltr">SELECT lines.lineitem, lines.description, lines.partid,
       lines.unitprice, lines.quantity
  FROM purchaseorder,
       XMLTable(&#39;for $i in /PurchaseOrder/LineItems/LineItem
                 where $i/@ItemNumber &gt;= 8
                  and $i/Part/@UnitPrice &gt; 50
                  and $i/Part/@Quantity &gt; 2
                 return $i&#39;
                PASSING OBJECT_VALUE
                COLUMNS lineitem    NUMBER       PATH &#39;@ItemNumber&#39;,
                        description VARCHAR2(30) PATH &#39;Description&#39;,
                        partid      NUMBER       PATH &#39;Part/@Id&#39;,
                        unitprice   NUMBER       PATH &#39;Part/@UnitPrice&#39;,
                        quantity    NUMBER       PATH &#39;Part/@Quantity&#39;) lines; 

LINEITEM DESCRIPTION                           PARTID UNITPRICE QUANTITY
-------- ------------------------------ ------------- --------- --------
      11 Orphic Trilogy                   37429148327        80        3
      22 Dreyer Box Set                   37429158425        80        4
      11 Dreyer Box Set                   37429158425        80        3
      16 Dreyer Box Set                   37429158425        80        3
       8 Dreyer Box Set                   37429158425        80        3
      12 Brazil                           37429138526        60        3
      18 Eisenstein: The Sound Years      37429149126        80        4
      24 Dreyer Box Set                   37429158425        80        3
      14 Dreyer Box Set                   37429158425        80        4
      10 Brazil                           37429138526        60        3
      17 Eisenstein: The Sound Years      37429149126        80        3
      16 Orphic Trilogy                   37429148327        80        4
      13 Orphic Trilogy                   37429148327        80        4
      10 Brazil                           37429138526        60        4
      12 Eisenstein: The Sound Years      37429149126        80        3
      12 Dreyer Box Set                   37429158425        80        4
      13 Dreyer Box Set                   37429158425        80        4
 
17 rows selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5140"></a><a id="ADXDB5141"></a><a id="ADXDB5139"></a>
<div class="props_rev_3"><a id="GUID-1E1D2966-8995-4BBD-B039-2E6CEB7B275A"></a>
<h3 id="ADXDB-GUID-1E1D2966-8995-4BBD-B039-2E6CEB7B275A" class="sect3"><span class="enumeration_section">5.1.5</span> Using Namespaces with XQuery</h3>
<div>
<p>You can use the XQuery <code>declare namespace</code> declaration in the prolog of an XQuery expression to define a namespace prefix. You can use <code>declare</code> <span class="bold"><code>default</code></span> <code>namespace</code> to establish the namespace as the default namespace for the expression.</p>
<div class="section">
<p>Be aware of the following pitfall, if you use SQL*Plus: If the semicolon (<code>;</code>) at the end of a namespace declaration terminates a line, SQL*Plus interprets it as a SQL terminator. To avoid this, you can do one of the following:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Place the text that follows the semicolon on the same line.</p>
</li>
<li>
<p>Place a comment, such as <span class="bold"><code>(: :)</code></span>, after the semicolon, on the same line.</p>
</li>
<li>
<p>Turn off the recognition of the SQL terminator with SQL*Plus command <code>SET SQLTERMINATOR</code>.</p>
</li>
</ul>
<p><a href="xdb04cre.htm#GUID-1E1D2966-8995-4BBD-B039-2E6CEB7B275A__BABIDFEC">Example 5-15</a> illustrates use of a namespace declaration in an XQuery expression.</p>
<p>An XQuery namespace declaration has no effect outside of its XQuery expression. To declare a namespace prefix for use in an <code>XMLTable</code> expression outside of the XQuery expression, use the <code>XMLNAMESPACES</code> clause. This clause also covers the XQuery expression argument to <code>XMLTable</code>, eliminating the need for a separate declaration in the XQuery prolog.</p>
<p>In <a href="xdb04cre.htm#GUID-1E1D2966-8995-4BBD-B039-2E6CEB7B275A__CBABFGAJ">Example 5-16</a>, <code>XMLNAMESPACES</code> is used to define the prefix <code>e</code> for the namespace <code>http://example.com</code>. This namespace is used in the <code>COLUMNS</code> clause and the XQuery expression of the <code>XMLTable</code> expression.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-1E1D2966-8995-4BBD-B039-2E6CEB7B275A__BABIDFEC">
<p class="titleinexample">Example 5-15 Using XMLQUERY with a Namespace Declaration</p>
<pre dir="ltr">SELECT XMLQuery(&#39;declare namespace e = &#34;http://example.com&#34;<span class="bold">;</span>
ERROR:
ORA-01756: quoted string not properly terminated
 
                 for $i in doc(&#34;/public/empsns.xml&#34;)/e:emps/e:emp
SP2-0734: unknown command beginning &#34;for $i in ...&#34; - rest of line ignored.
...

<span class="bold">-- This works - do not end the line with &#34;;&#34;.</span>
SELECT XMLQuery(&#39;declare namespace e = &#34;http://example.com&#34;<span class="bold">; for</span>
                     $i in doc(&#34;/public/empsns.xml&#34;)/e:emps/e:emp
                 let $d := 
                   doc(&#34;/public/depts.xml&#34;)//dept[@deptno=$i/@deptno]/@dname
                 where $i/@salary &gt; 100000
                 order by $i/@empno
                 return &lt;emp ename=&#34;{$i/@ename}&#34; dept=&#34;{$d}&#34;/&gt;&#39;
                RETURNING CONTENT) FROM DUAL;
 
XMLQUERY(&#39;DECLARENAMESPACEE=&#34;HTTP://EXAMPLE.COM&#34;;FOR$IINDOC(&#34;/PUBLIC/EMPSNS.XML&#34;
--------------------------------------------------------------------------------
&lt;emp ename=&#34;Jack&#34; dept=&#34;&#34;&gt;&lt;/emp&gt;&lt;emp ename=&#34;Jill&#34; dept=&#34;&#34;&gt;&lt;/emp&gt;

<span class="bold">-- This works too - add a comment after the &#34;;&#34;.</span>
SELECT XMLQuery(&#39;declare namespace e = &#34;http://example.com&#34;;  <span class="bold">(: :)</span>
                 for $i in doc(&#34;/public/empsns.xml&#34;)/e:emps/e:emp
                 let $d := doc(&#34;/public/depts.xml&#34;)//dept[@deptno=$i/@deptno]/@dname
                 where $i/@salary &gt; 100000
                 order by $i/@empno
                 return &lt;emp ename=&#34;{$i/@ename}&#34; dept=&#34;{$d}&#34;/&gt;&#39;
                RETURNING CONTENT) FROM DUAL;
 
XMLQUERY(&#39;DECLARENAMESPACEE=&#34;HTTP://EXAMPLE.COM&#34;;(::)FOR$IINDOC(&#34;/PUBLIC/EMPSNS.
--------------------------------------------------------------------------------
&lt;emp ename=&#34;Jack&#34; dept=&#34;&#34;&gt;&lt;/emp&gt;&lt;emp ename=&#34;Jill&#34; dept=&#34;&#34;&gt;&lt;/emp&gt;
 
1 row selected.

<span class="bold">-- This works too - tell SQL*Plus to ignore the &#34;;&#34;.</span>

<span class="bold">SET SQLTERMINATOR OFF</span>
 
SELECT XMLQuery(&#39;declare namespace e = &#34;http://example.com&#34;<span class="bold">;</span>
                 for $i in doc(&#34;/public/empsns.xml&#34;)/e:emps/e:emp
                 let $d :=
                   doc(&#34;/public/depts.xml&#34;)//dept[@deptno=$i/@deptno]/@dname
                 where $i/@salary &gt; 100000
                 order by $i/@empno
                 return &lt;emp ename=&#34;{$i/@ename}&#34; dept=&#34;{$d}&#34;/&gt;&#39;
                RETURNING CONTENT) FROM DUAL
<span class="bold">/</span>
 
XMLQUERY(&#39;DECLARENAMESPACEE=&#34;HTTP://EXAMPLE.COM&#34;;FOR$IINDOC(&#34;/PUBLIC/EMPSNS.XML&#34;
--------------------------------------------------------------------------------
&lt;emp ename=&#34;Jack&#34; dept=&#34;&#34;&gt;&lt;/emp&gt;&lt;emp ename=&#34;Jill&#34; dept=&#34;&#34;&gt;&lt;/emp&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1E1D2966-8995-4BBD-B039-2E6CEB7B275A__CBABFGAJ">
<p class="titleinexample">Example 5-16 Using XMLTABLE with the XMLNAMESPACES Clause</p>
<pre dir="ltr">SELECT * FROM XMLTable(<span class="bold">XMLNAMESPACES (&#39;http://example.com&#39; AS &#34;e&#34;),</span>
                       &#39;for $i in doc(&#34;/public/empsns.xml&#34;)
                        return $i/<span class="bold">e:</span>emps/<span class="bold">e:</span>emp&#39;
                       COLUMNS name VARCHAR2(6) PATH &#39;@ename&#39;,
                               id   NUMBER      PATH &#39;@empno&#39;);
</pre>
<p>This produces the following result:</p>
<pre dir="ltr">NAME           ID
------ ----------
John            1
Jack            2
Jill            3
 
3 rows selected.
</pre>
<p>It is the presence of qualified names <code>e:ename</code> and <code>e:empno</code> in the <code>COLUMNS</code> clause that necessitates using the <code>XMLNAMESPACES</code> clause. Otherwise, a prolog namespace declaration (<code>declare namespace e = &#34;http://example.com&#34;</code>) would suffice for the XQuery expression itself.</p>
<p>Because the same namespace is used throughout the <code>XMLTable</code> expression, a default namespace could be used: <code>XMLNAMESPACES (DEFAULT &#39;http://example.com&#39;)</code>. The qualified name <code>$i/e:emps/e:emp</code> could then be written without an explicit prefix: <code>$i/emps/emp</code>.</p>
</div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB4260"></a><a id="ADXDB4261"></a><a id="ADXDB4262"></a><a id="ADXDB4263"></a><a id="ADXDB4265"></a><a id="ADXDB4266"></a><a id="ADXDB4230"></a>
<div class="props_rev_3"><a id="GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737"></a>
<h2 id="ADXDB-GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737" class="sect2"><span class="enumeration_section">5.2</span> Querying XML Data Using SQL and PL/SQL</h2>
<div>
<p>You can query XML data from <code>XMLType</code> columns and tables in various ways.</p>
<div class="section"></div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Select <code>XMLType</code> data using SQL, PL/SQL, or Java.</p>
</li>
<li>
<p>Query <code>XMLType</code> data using SQL/XML functions such as <code>XMLQuery</code>. See <span class="q">&#34;<a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595" title="Examples are presented that use XQuery to query XMLType data.">Querying XMLType Data Using XQuery</a>&#34;</span>.</p>
</li>
<li>
<p>Perform full-text search using XQuery Full Text or Oracle Text operators. See <span class="q">&#34;<a href="xdb_xquery.htm#GUID-B87B6721-11A8-4E6F-A693-97DC4AAE2048" title="Oracle XML&nbsp;DB supports XQuery Full Text for XMLType data that is stored as binary XML. Oracle Text technology provides the full-text indexing and search that is the basis of this support.">Support for XQuery Full Text</a>&#34;</span>, <a href="xdb_indexing.htm#GUID-FE16BE28-035C-49EE-9683-6ED37876C3FC" title="You can create indexes on your XML data, to focus on particular parts of it that you query often and thus improve performance. There are various ways that you can index XMLType data, whether it is XML schema-based or non-schema-based, and regardless of the XMLType storage model you use.">Indexes for XMLType Data</a> and <a href="app_depr_otext.htm#GUID-1B838D2B-DD94-480A-8D3D-53E0204A2282" title="Oracle-specific full-text search over XML data is described, including how to use Oracle SQL function contains and Oracle XPath function ora:contains.">Full-Text Search over XML Data Without XQuery</a>.</p>
</li>
</ul>
<p>The examples in this section illustrate different ways you can use SQL and PL/SQL to query XML data. <a href="xdb04cre.htm#GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__i1024901">Example 5-17</a> inserts two rows into table <code>purchaseorder</code>, then queries data in those rows using SQL/XML functions <code>XMLCast</code>, <code>XMLQuery</code>, and <code>XMLExists</code>.</p>
<p><a href="xdb04cre.htm#GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__CHDBHJFD">Example 5-18</a> uses a PL/SQL cursor to query XML data. It uses a local <code>XMLType</code> instance to store transient data.</p>
<p><a href="xdb04cre.htm#GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__CHDEDHCC">Example 5-19</a> and <a href="xdb04cre.htm#GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__CHDDJAAD">Example 5-20</a> both use SQL/XML function <code>XMLTable</code> to extract data from an XML purchase-order document. They then insert that data into a relational table. <a href="xdb04cre.htm#GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__CHDEDHCC">Example 5-19</a> uses SQL; <a href="xdb04cre.htm#GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__CHDDJAAD">Example 5-20</a> uses PL/SQL.</p>
<p><a href="xdb04cre.htm#GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__CHDDJAAD">Example 5-20</a> defines and uses a PL/SQL procedure to extract data from an XML purchase-order document and insert it into a relational table.</p>
<p><a href="xdb04cre.htm#GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__CHDEFAIG">Example 5-21</a> tabulates the purchase orders whose shipping address contains the string &#34;<code>Shores</code>&#34; and which were requested by customers whose names contain the string &#34;<code>ll</code>&#34; (double L). These purchase orders are grouped by customer and counted. The example uses XQuery Full Text to perform full-text search.</p>
<p><a href="xdb04cre.htm#GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__i1025061">Example 5-22</a> extracts the fragments of a document that are identified by an XPath expression. The <code>XMLType</code> instance returned by <code>XMLQuery</code> can be a set of nodes, a singleton node, or a text value. <a href="xdb04cre.htm#GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__i1025061">Example 5-22</a> uses <code>XMLType</code> method <code>isFragment()</code> to determine whether the result is a fragment.</p>
<div class="infobox-note" id="GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__GUID-F430338E-0753-41CD-8C45-42213EE7E814">
<p class="notep1">Note:</p>
<p>You cannot insert fragments into <code>XMLType</code> columns. You can use SQL/XML function <code>XMLQuery</code> to convert a fragment into a well-formed document.</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__i1024901">
<p class="titleinexample">Example 5-17 Querying XMLTYPE Data</p>
<pre dir="ltr">INSERT INTO purchaseorder 
  VALUES (XMLType(bfilename(&#39;XMLDIR&#39;, &#39;SMCCAIN-2002091213000000PDT.xml&#39;),
                  nls_charset_id(&#39;AL32UTF8&#39;)));
 
INSERT INTO purchaseorder
  VALUES (XMLType(bfilename(&#39;XMLDIR&#39;, &#39;VJONES-20020916140000000PDT.xml&#39;),
                  nls_charset_id(&#39;AL32UTF8&#39;)));
 
SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Reference&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) reference,
       XMLCast(XMLQuery(&#39;$p/PurchaseOrder/*//User&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) userid,
       CASE
         WHEN XMLExists(&#39;$p/PurchaseOrder/Reject/Date&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34;)
           THEN &#39;Rejected&#39;
           ELSE &#39;Accepted&#39;
       END &#34;STATUS&#34;,
       XMLCast(XMLQuery(&#39;$p//Date&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(12)) status_date
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p//Date&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34;)
  ORDER BY XMLCast(XMLQuery(&#39;$p//Date&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34;
                                       RETURNING CONTENT)
                   AS VARCHAR2(12));
 
</pre>
<pre dir="ltr">REFERENCE                        USERID   STATUS   STATUS_DATE
-------------------------------- -------- -------- ------------
VJONES-20020916140000000PDT      SVOLLMAN Accepted 2002-10-11
SMCCAIN-2002091213000000PDT      SKING    Rejected 2002-10-12
 
2 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__CHDBHJFD">
<p class="titleinexample">Example 5-18 Querying Transient XMLTYPE Data Using a PL/SQL Cursor</p>
<pre dir="ltr">DECLARE
  xNode      XMLType;
  vText      VARCHAR2(256);
  vReference VARCHAR2(32);
  CURSOR getPurchaseOrder(reference IN VARCHAR2) IS
           SELECT OBJECT_VALUE XML
             FROM purchaseorder
             WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=$r]&#39;
                             PASSING OBJECT_VALUE AS &#34;p&#34;,
                                     reference    AS &#34;r&#34;);
BEGIN
  vReference := &#39;EABEL-20021009123335791PDT&#39;;
  FOR c IN getPurchaseOrder(vReference) LOOP
    xNode := c.XML.extract(&#39;//Requestor&#39;);
    SELECT XMLSerialize(CONTENT
                        XMLQuery(&#39;//text()&#39; PASSING xNode RETURNING CONTENT))
           INTO vText FROM DUAL;
    DBMS_OUTPUT.put_line(&#39;The Requestor for Reference &#39;
                         || vReference || &#39; is &#39;|| vText);
  END LOOP;
  vReference := &#39;PTUCKER-20021009123335430PDT&#39;;
  FOR c IN getPurchaseOrder(vReference) LOOP
    xNode := c.XML.extract(&#39;//LineItem[@ItemNumber=&#34;1&#34;]/Description&#39;);
    SELECT XMLSerialize(CONTENT
                        XMLQuery(&#39;//text()&#39; PASSING xNode RETURNING CONTENT))
           INTO vText FROM DUAL;
    DBMS_OUTPUT.put_line(&#39;The Description of LineItem[1] for Reference &#39;
                         || vReference || &#39; is &#39;|| vText);
  END LOOP;
END;
/
The Requestor for Reference EABEL-20021009123335791PDT is Ellen S. Abel
The Description of LineItem[1] for Reference PTUCKER-20021009123335430PDT is
 Picnic at
Hanging Rock
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__CHDEDHCC">
<p class="titleinexample">Example 5-19 Extracting XML Data and Inserting It into a Relational Table Using SQL</p>
<pre dir="ltr">CREATE TABLE purchaseorder_table (reference           VARCHAR2(28) PRIMARY KEY,
                                  requestor           VARCHAR2(48),
                                  actions             XMLType,
                                  userid              VARCHAR2(32),
                                  costcenter          VARCHAR2(3),
                                  shiptoname          VARCHAR2(48),
                                  address             VARCHAR2(512),
                                  phone               VARCHAR2(32),
                                  rejectedby          VARCHAR2(32),
                                  daterejected        DATE,
                                  comments            VARCHAR2(2048),
                                  specialinstructions VARCHAR2(2048));
 
CREATE TABLE purchaseorder_lineitem (reference,
                                     FOREIGN KEY (&#34;REFERENCE&#34;)
                                       REFERENCES &#34;PURCHASEORDER_TABLE&#34; (&#34;REFERENCE&#34;) ON DELETE CASCADE,
                                     lineno      NUMBER(10), PRIMARY KEY (&#34;REFERENCE&#34;, &#34;LINENO&#34;),
                                     upc         VARCHAR2(14),
                                     description VARCHAR2(128),
                                     quantity    NUMBER(10),
                                     unitprice   NUMBER(12,2));
 
</pre>
<pre dir="ltr">INSERT INTO purchaseorder_table (reference, requestor, actions, userid, costcenter, shiptoname, address,
                                 phone, rejectedby, daterejected, comments, specialinstructions)
  SELECT t.reference, t.requestor, t.actions, t.userid, t.costcenter, t.shiptoname, t.address, 
          t.phone, t.rejectedby, t.daterejected, t.comments, t.specialinstructions
    FROM purchaseorder p,
         XMLTable(&#39;/PurchaseOrder&#39; PASSING p.OBJECT_VALUE
                  COLUMNS reference           VARCHAR2(28)   PATH &#39;Reference&#39;,
                          requestor           VARCHAR2(48)   PATH &#39;Requestor&#39;,
                          actions             XMLType        PATH &#39;Actions&#39;,
                          userid              VARCHAR2(32)   PATH &#39;User&#39;,
                          costcenter          VARCHAR2(3)    PATH &#39;CostCenter&#39;,
                          shiptoname          VARCHAR2(48)   PATH &#39;ShippingInstructions/name&#39;,
                          address             VARCHAR2(512)  PATH &#39;ShippingInstructions/address&#39;,
                          phone               VARCHAR2(32)   PATH &#39;ShippingInstructions/telephone&#39;,
                          rejectedby          VARCHAR2(32)   PATH &#39;Reject/User&#39;,
                          daterejected        DATE           PATH &#39;Reject/Date&#39;,
                          comments            VARCHAR2(2048) PATH &#39;Reject/Comments&#39;,
                          specialinstructions VARCHAR2(2048) PATH &#39;SpecialInstructions&#39;) t
    WHERE t.reference = &#39;EABEL-20021009123336251PDT&#39;;
 
INSERT INTO purchaseorder_lineitem (reference, lineno, upc, description, quantity, unitprice)
  SELECT t.reference, li.lineno, li.upc, li.description, li.quantity, li.unitprice
    FROM purchaseorder p,
         XMLTable(&#39;/PurchaseOrder&#39; PASSING p.OBJECT_VALUE
                  COLUMNS reference VARCHAR2(28) PATH &#39;Reference&#39;,
                          lineitem XMLType PATH &#39;LineItems/LineItem&#39;) t,
         XMLTable(&#39;LineItem&#39; PASSING t.lineitem
                  COLUMNS lineno      NUMBER(10)    PATH &#39;@ItemNumber&#39;,
                          upc         VARCHAR2(14)  PATH &#39;Part/@Id&#39;,
                          description VARCHAR2(128) PATH &#39;Description&#39;,
                          quantity    NUMBER(10)    PATH &#39;Part/@Quantity&#39;,
                          unitprice   NUMBER(12,2)  PATH &#39;Part/@UnitPrice&#39;) li
    WHERE t.reference = &#39;EABEL-20021009123336251PDT&#39;;
 
</pre>
<pre dir="ltr">SELECT reference, userid, shiptoname, specialinstructions FROM purchaseorder_table;
 
REFERENCE                        USERID   SHIPTONAME                                       SPECIALINSTRUCTIONS
-------------------------------- -------- ------------------------------------------------ -------------------
EABEL-20021009123336251PDT       EABEL    Ellen S. Abel                                    Counter to Counter
 
SELECT reference, lineno, upc, description, quantity FROM purchaseorder_lineitem;
 
REFERENCE                            LINENO UPC            DESCRIPTION                          QUANTITY
-------------------------------- ---------- -------------- ---------------------------------- ----------
EABEL-20021009123336251PDT                1 37429125526    Samurai 2: Duel at Ichijoji Temple          3
EABEL-20021009123336251PDT                2 37429128220    The Red Shoes                               4
EABEL-20021009123336251PDT                3 715515009058   A Night to Remember                         1
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__CHDDJAAD">
<p class="titleinexample">Example 5-20 Extracting XML Data and Inserting It into a Table Using PL/SQL</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE insertPurchaseOrder(purchaseorder XMLType) AS reference VARCHAR2(28);
BEGIN
  INSERT INTO purchaseorder_table (reference, requestor, actions, userid, costcenter, shiptoname, address,
                                   phone, rejectedby, daterejected, comments, specialinstructions)
    SELECT * FROM XMLTable(&#39;$p/PurchaseOrder&#39; PASSING purchaseorder AS &#34;p&#34;
                           COLUMNS reference           VARCHAR2(28)   PATH &#39;Reference&#39;,
                                   requestor           VARCHAR2(48)   PATH &#39;Requestor&#39;,
                                   actions             XMLType        PATH &#39;Actions&#39;,
                                   userid              VARCHAR2(32)   PATH &#39;User&#39;,
                                   costcenter          VARCHAR2(3)    PATH &#39;CostCenter&#39;,
                                   shiptoname          VARCHAR2(48)   PATH &#39;ShippingInstructions/name&#39;,
                                   address             VARCHAR2(512)  PATH &#39;ShippingInstructions/address&#39;,
                                   phone               VARCHAR2(32)   PATH &#39;ShippingInstructions/telephone&#39;,
                                   rejectedby          VARCHAR2(32)   PATH &#39;Reject/User&#39;,
                                   daterejected        DATE           PATH &#39;Reject/Date&#39;,
                                   comments            VARCHAR2(2048) PATH &#39;Reject/Comments&#39;,
                                   specialinstructions VARCHAR2(2048) PATH &#39;SpecialInstructions&#39;);
 
  INSERT INTO purchaseorder_lineitem (reference, lineno, upc, description, quantity, unitprice)
    SELECT t.reference, li.lineno, li.upc, li.description, li.quantity, li.unitprice
    FROM XMLTable(&#39;$p/PurchaseOrder&#39; PASSING purchaseorder AS &#34;p&#34;
                  COLUMNS reference VARCHAR2(28) PATH &#39;Reference&#39;,
                          lineitem XMLType PATH &#39;LineItems/LineItem&#39;) t,
         XMLTable(&#39;LineItem&#39; PASSING t.lineitem
                  COLUMNS lineno NUMBER(10)    PATH &#39;@ItemNumber&#39;,
                          upc VARCHAR2(14)  PATH &#39;Part/@Id&#39;,
                          description VARCHAR2(128) PATH &#39;Description&#39;,
                          quantity NUMBER(10)    PATH &#39;Part/@Quantity&#39;,
                          unitprice NUMBER(12,2)  PATH &#39;Part/@UnitPrice&#39;) li;
END;
</pre>
<pre dir="ltr">CALL insertPurchaseOrder(XMLType(bfilename(&#39;XMLDIR&#39;, &#39;purchaseOrder.xml&#39;), nls_charset_id(&#39;AL32UTF8&#39;)));
 
</pre>
<pre dir="ltr">SELECT reference, userid, shiptoname, specialinstructions FROM purchaseorder_table;
 
REFERENCE                        USERID   SHIPTONAME                                       SPECIALINSTRUCTIONS
-------------------------------- -------- ------------------------------------------------ -------------------
SBELL-2002100912333601PDT        SBELL    Sarah J. Bell                                    Air Mail

 
SELECT reference, lineno, upc, description, quantity FROM purchaseorder_lineitem;
 
REFERENCE                 LINENO UPC          DESCRIPTION                        QUANTITY
------------------------- ------ ------------ ---------------------------------- --------
SBELL-2002100912333601PDT      1 715515009058 A Night to Remember                       2
SBELL-2002100912333601PDT      2 37429140222  The Unbearable Lightness Of Being         2
SBELL-2002100912333601PDT      3 715515011020 Sisters                                   4
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__CHDEFAIG">
<p class="titleinexample">Example 5-21 Searching XML Data Using SQL/XML Functions</p>
<pre dir="ltr">SELECT <span class="bold">XMLCast</span>(<span class="bold">XMLQuery</span>(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(128)) name,
       count(*)
  FROM purchaseorder po
  WHERE
    <span class="bold">XMLExists</span>(
      &#39;declare namespace ora=&#34;http://xmlns.oracle.com/xdb&#34;; (: :)
       $p/PurchaseOrder/ShippingInstructions[address/text() contains text &#34;<span class="bold">Shores</span>&#34;]&#39;
      PASSING po.OBJECT_VALUE AS &#34;p&#34;)
    AND <span class="bold">XMLCast</span>(<span class="bold">XMLQuery</span>(&#39;$p/PurchaseOrder/Requestor/text()&#39;
                         PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
                AS VARCHAR2(128))
        <span class="bold">LIKE &#39;%ll%&#39;</span>
  GROUP BY <span class="bold">XMLCast</span>(<span class="bold">XMLQuery</span>(&#39;$p/PurchaseOrder/Requestor&#39;
                            PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
                   AS VARCHAR2(128));

NAME                   COUNT(*)
-------------------- ----------
Allan D. McEwen               9
Ellen S. Abel                 4
Sarah J. Bell                13
William M. Smith              7
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0FDD8ABE-F94B-42CB-B135-93BC67225737__i1025061">
<p class="titleinexample">Example 5-22 Extracting Fragments Using XMLQUERY</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Reference&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34;
                                                     RETURNING CONTENT)
               AS VARCHAR2(30)) reference,
       count(*)
  FROM purchaseorder po, XMLTable(&#39;$p//LineItem[Part/@Id=&#34;37429148327&#34;]&#39; PASSING OBJECT_VALUE AS &#34;p&#34;)
  WHERE <span class="bold">XMLQuery</span>(&#39;$p/PurchaseOrder/LineItems/LineItem[Part/@Id=&#34;37429148327&#34;]&#39;
                 PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT).<span class="bold">isFragment</span>() = 1
  GROUP BY XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Reference&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
                   AS VARCHAR2(30))
  ORDER BY XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Reference&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
                   AS VARCHAR2(30));
 
REFERENCE                          COUNT(*)
-------------------------------- ----------
TFOX-20021009123337784PDT                 3
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5154"></a><a id="ADXDB5153"></a>
<div class="props_rev_3"><a id="GUID-4C3665D9-5502-4D05-A1AE-9E8B4D7E64C1"></a>
<h2 id="ADXDB-GUID-4C3665D9-5502-4D05-A1AE-9E8B4D7E64C1" class="sect2"><span class="enumeration_section">5.3</span> Using the SQL*Plus XQUERY Command</h2>
<div>
<p>You can evaluate an XQuery expression using the SQL*Plus <code>XQUERY</code> command.</p>
<div class="section">
<p><a href="xdb04cre.htm#GUID-4C3665D9-5502-4D05-A1AE-9E8B4D7E64C1__CBACBEFC">Example 5-23</a> shows how you can enter an XQuery expression directly at the SQL*Plus command line, by preceding the expression with the SQL*Plus command <span class="bold"><code>XQUERY</code></span> and following it with a slash (<code>/</code>) on a line by itself. Oracle Database treats XQuery expressions submitted with this command the same way it treats XQuery expressions in SQL/XML functions <code>XMLQuery</code> and <code>XMLTable</code>. Execution is identical, with the same optimizations.</p>
<p>There are also a few SQL*Plus <code>SET</code> commands that you can use for settings that are specific to XQuery. Use <code>SHOW XQUERY</code> to see the current settings.</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><code>SET XQUERY BASEURI</code></span> &ndash; Set the base URI for <code>XQUERY</code>. URIs in XQuery expressions are relative to this URI.</p>
</li>
<li>
<p><span class="bold"><code>SET XQUERY CONTEXT</code></span> &ndash; Specify a context item for subsequent <code>XQUERY</code> evaluations.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-4C3665D9-5502-4D05-A1AE-9E8B4D7E64C1__GUID-886F1BBC-1BA1-490C-836B-581BC383A1A8">
<p class="notep1">See Also:</p>
<p><a class="olink SQPUG135" target="_blank" href="../SQPUG/ch_twelve052.htm#SQPUG135"><span class="italic">SQL*Plus User&#39;s Guide and Reference</span></a></p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-4C3665D9-5502-4D05-A1AE-9E8B4D7E64C1__CBACBEFC">
<p class="titleinexample">Example 5-23 Using the SQL*Plus XQUERY Command</p>
<pre dir="ltr">SQL&gt; XQUERY for $i in fn:collection(&#34;oradb:/HR/DEPARTMENTS&#34;)
  2  where $i/ROW/DEPARTMENT_ID &lt; 50
  3  return $i
  4  /
 
Result Sequence
--------------------------------------------------------------------------------
&lt;ROW&gt;&lt;DEPARTMENT_ID&gt;10&lt;/DEPARTMENT_ID&gt;&lt;DEPARTMENT_NAME&gt;Administration&lt;/DEPARTMEN
T_NAME&gt;&lt;MANAGER_ID&gt;200&lt;/MANAGER_ID&gt;&lt;LOCATION_ID&gt;1700&lt;/LOCATION_ID&gt;&lt;/ROW&gt;
 
&lt;ROW&gt;&lt;DEPARTMENT_ID&gt;20&lt;/DEPARTMENT_ID&gt;&lt;DEPARTMENT_NAME&gt;Marketing&lt;/DEPARTMENT_NAM
E&gt;&lt;MANAGER_ID&gt;201&lt;/MANAGER_ID&gt;&lt;LOCATION_ID&gt;1800&lt;/LOCATION_ID&gt;&lt;/ROW&gt;
 
&lt;ROW&gt;&lt;DEPARTMENT_ID&gt;30&lt;/DEPARTMENT_ID&gt;&lt;DEPARTMENT_NAME&gt;Purchasing&lt;/DEPARTMENT_NA
ME&gt;&lt;MANAGER_ID&gt;114&lt;/MANAGER_ID&gt;&lt;LOCATION_ID&gt;1700&lt;/LOCATION_ID&gt;&lt;/ROW&gt;
 
&lt;ROW&gt;&lt;DEPARTMENT_ID&gt;40&lt;/DEPARTMENT_ID&gt;&lt;DEPARTMENT_NAME&gt;Human Resources&lt;/DEPARTME
NT_NAME&gt;&lt;MANAGER_ID&gt;203&lt;/MANAGER_ID&gt;&lt;LOCATION_ID&gt;2400&lt;/LOCATION_ID&gt;&lt;/ROW&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6016"></a>
<div class="props_rev_3"><a id="GUID-8F3B9C09-6877-4E43-A6E7-873BF0E74DAB"></a>
<h2 id="ADXDB-GUID-8F3B9C09-6877-4E43-A6E7-873BF0E74DAB" class="sect2"><span class="enumeration_section">5.4</span> Using XQuery with XQJ to Access Database Data</h2>
<div>
<p>XQuery API for Java (XQJ), also known as JSR-225, provides an industry-standard way for Java programs to access XML data using XQuery. It lets you evaluate XQuery expressions against XML data sources and process the results as XML data.</p>
<div class="section">
<p>Oracle provides two XQuery engines for evaluating XQuery expressions: one in Oracle XML&nbsp;DB, for use with XML data in the database, and one in Oracle XML Developer&#39;s Kit, for use with XML data outside the database.</p>
<p>Similarly, Oracle provides two mid-tier XQJ implementations for accessing these two XQuery engines. Both implementations are part of Oracle XML Developer&#39;s Kit (XDK). You use XDK to access XML data with XQJ, regardless of whether that data resides in the database or elsewhere.</p>
<p>In particular, you can use XDK and XQJ to access XML data in Oracle XML&nbsp;DB. A typical use case for this feature is to access data stored in remote databases from a local Java program.</p>
<div class="infoboxnotealso" id="GUID-8F3B9C09-6877-4E43-A6E7-873BF0E74DAB__GUID-31B86D68-5B0B-4C83-91B1-D6F21E373783">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p>XQuery API for Java (XQJ) 1.0 Specification, March 2009, <a href="http://jcp.org/aboutJava/communityprocess/final/jsr225/" target="_blank"></a><a href="https://jcp.org/aboutJava/communityprocess/final/jsr225/index.html" target="_blank">https://jcp.org/aboutJava/communityprocess/final/jsr225/index.html</a></p>
<p>This specification is quite concrete and helpful, with understandable examples.</p>
</li>
<li>
<p><a class="olink ADXDK99930" target="_blank" href="../ADXDK/adx_j_xqj.htm#ADXDK99930"><span class="italic">Oracle XML Developer&#39;s Kit Programmer&#39;s Guide</span></a> for complete information about using XQJ with Oracle XML Developer&#39;s Kit</p>
</li>
<li>
<p><a class="olink ADXDK136" target="_blank" href="../ADXDK/adx_j_xqjxdb.htm#ADXDK136"><span class="italic">Oracle XML Developer&#39;s Kit Programmer&#39;s Guide</span></a> for information, including examples, about using XQJ with XDK to access XML data in the database</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDB5156"></a><a id="ADXDB5157"></a><a id="ADXDB5158"></a><a id="ADXDB5155"></a>
<div class="props_rev_3"><a id="GUID-813C0A08-111D-4C4F-B76F-E0B41D6729F0"></a>
<h2 id="ADXDB-GUID-813C0A08-111D-4C4F-B76F-E0B41D6729F0" class="sect2"><span class="enumeration_section">5.5</span> Using XQuery with PL/SQL, JDBC, and ODP.NET to Access Database Data</h2>
<div>
<p>You can use XQuery with the Oracle APIs for PL/SQL, JDBC, and Oracle Data Provider for .NET (ODP.NET).</p>
<div class="section">
<p><a href="xdb04cre.htm#GUID-813C0A08-111D-4C4F-B76F-E0B41D6729F0__BABJFFAC">Example 5-24</a> shows how to use XQuery with PL/SQL, in particular, how to bind <span class="italic">dynamic variables</span> to an XQuery expression using the <code>XMLQuery</code> <code>PASSING</code> clause. The bind variables <code>:1</code> and <code>:2</code> are bound to the PL/SQL bind arguments <code>nbitems</code> and <code>partid</code>, respectively. These are then passed to XQuery as XQuery variables <code>itemno</code> and <code>id</code>, respectively.</p>
<p><a href="xdb04cre.htm#GUID-813C0A08-111D-4C4F-B76F-E0B41D6729F0__BABEJFCH">Example 5-25</a> shows how to use XQuery with JDBC, binding variables by position with the <code>PASSING</code> clause of SQL/XML function <code>XMLTable</code>.</p>
<p><a href="xdb04cre.htm#GUID-813C0A08-111D-4C4F-B76F-E0B41D6729F0__BABBCACI">Example 5-26</a> shows how to use XQuery with ODP.NET and the C# language. The C# input parameters <code>:nbitems</code> and <code>:partid</code> are passed to XQuery as XQuery variables <code>itemno</code> and <code>id</code>, respectively.</p>
<div class="infoboxnotealso" id="GUID-813C0A08-111D-4C4F-B76F-E0B41D6729F0__GUID-3F6C5AE4-B5C4-4130-8284-9078C7B51A12">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb10pls.htm#GUID-2D5B2D47-9CFF-49D0-9BD8-114BBE48A289" title="There are several PL/SQL packages that provide APIs for XMLType.">PL/SQL APIs for XMLType</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-4C510052-8A31-4917-8567-0E2825927C54" title="The Java DOM API for XMLType lets you operate on XMLType instances using a DOM. You can use it to manipulate XML data in Java, including fetching it through Java Database Connectivity (JDBC).">Java DOM API for XMLType</a></p>
</li>
<li>
<p><a href="xdb_odpnet.htm#GUID-30B4F0FD-C2E3-4F9A-94C2-3C04CC697F2F" title="Oracle Data Provider for Microsoft .NET (ODP.NET) is an implementation of a data provider for Oracle Database. It uses Oracle native APIs to offer fast and reliable access to Oracle data and features from any .NET application.">Oracle XML&nbsp;DB and Oracle Data Provider for .NET</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-813C0A08-111D-4C4F-B76F-E0B41D6729F0__BABJFFAC">
<p class="titleinexample">Example 5-24 Using XQuery with PL/SQL</p>
<pre dir="ltr">DECLARE
  sql_stmt VARCHAR2(2000); -- Dynamic SQL statement to execute
  <span class="bold">nbitems</span>  NUMBER := 3; -- Number of items
  <span class="bold">partid</span>   VARCHAR2(20):= &#39;715515009058&#39;; -- Part ID
  result   XMLType;
  doc      DBMS_XMLDOM.DOMDocument;
  ndoc     DBMS_XMLDOM.DOMNode;
  buf      VARCHAR2(20000);
BEGIN
  sql_stmt :=
    &#39;SELECT XMLQuery(
              &#39;&#39;for $i in fn:collection(&#34;oradb:/OE/PURCHASEORDER&#34;) &#39; ||
               &#39;where count($i/PurchaseOrder/LineItems/LineItem) = <span class="bold">$itemno</span> &#39; ||
                 &#39;and $i/PurchaseOrder/LineItems/LineItem/Part/@Id = <span class="bold">$id</span> &#39; ||
               &#39;return $i/PurchaseOrder/LineItems&#39;&#39; &#39; ||
              &#39;PASSING <span class="bold">:1</span> AS &#34;<span class="bold">itemno</span>&#34;, <span class="bold">:2</span> AS &#34;<span class="bold">id</span>&#34; &#39; ||
              &#39;RETURNING CONTENT) FROM DUAL&#39;;
 
  EXECUTE IMMEDIATE sql_stmt INTO result USING <span class="bold">nbitems</span>, <span class="bold">partid</span>;
  doc  := DBMS_XMLDOM.newDOMDocument(result);
  ndoc := DBMS_XMLDOM.makeNode(doc);
  DBMS_XMLDOM.writeToBuffer(ndoc, buf);
  DBMS_OUTPUT.put_line(buf);
END;
/
</pre>
<p>This produces the following output:</p>
<pre dir="ltr">&lt;LineItems&gt;
  &lt;LineItem ItemNumber=&#34;1&#34;&gt;
    &lt;Description&gt;Samurai 2: Duel at Ichijoji Temple&lt;/Description&gt;
    &lt;Part Id=&#34;37429125526&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;3&#34;/&gt;
  &lt;/LineItem&gt;
  &lt;LineItem ItemNumber=&#34;2&#34;&gt;
    &lt;Description&gt;The Red Shoes&lt;/Description&gt;
    &lt;Part Id=&#34;37429128220&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;4&#34;/&gt;
  &lt;/LineItem&gt;
  &lt;LineItem ItemNumber=&#34;3&#34;&gt;
    &lt;Description&gt;A Night to Remember&lt;/Description&gt;
    &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;1&#34;/&gt;
  &lt;/LineItem&gt;
&lt;/LineItems&gt;
&lt;LineItems&gt;
  &lt;LineItem ItemNumber=&#34;1&#34;&gt;
    &lt;Description&gt;A Night to Remember&lt;/Description&gt;
    &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
  &lt;/LineItem&gt;
  &lt;LineItem ItemNumber=&#34;2&#34;&gt;
    &lt;Description&gt;The Unbearable Lightness Of Being&lt;/Description&gt;
    &lt;Part Id=&#34;37429140222&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;2&#34;/&gt;
  &lt;/LineItem&gt;
  &lt;LineItem ItemNumber=&#34;3&#34;&gt;
    &lt;Description&gt;Sisters&lt;/Description&gt;
    &lt;Part Id=&#34;715515011020&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;4&#34;/&gt;
  &lt;/LineItem&gt;
&lt;/LineItems&gt;

PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-813C0A08-111D-4C4F-B76F-E0B41D6729F0__BABEJFCH">
<p class="titleinexample">Example 5-25 Using XQuery with JDBC</p>
<pre dir="ltr">import java.sql.*;
import oracle.sql.*;
import oracle.jdbc.*;
import oracle.xdb.XMLType; 
import java.util.*;
 
public class QueryBindByPos
{
  public static void main(String[] args) throws Exception, SQLException
  {
    System.out.println(&#34;*** JDBC Access of XQuery using Bind Variables ***&#34;);
    DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
    OracleConnection conn
      = (OracleConnection)
        DriverManager.getConnection(&#34;jdbc:oracle:oci8:@localhost:1521:ora11gR1&#34;, &#34;oe&#34;, &#34;oe&#34;);
    String xqString
      = &#34;SELECT COLUMN_VALUE&#34; +
          &#34;FROM XMLTable(&#39;for $i in fn:collection(\&#34;oradb:/OE/PURCHASEORDER\&#34;) &#34; +
                         &#34;where $i/PurchaseOrder/Reference= <span class="bold">$ref</span> &#34; +
                         &#34;return $i/PurchaseOrder/LineItems&#39; &#34; +
                        &#34;PASSING <span class="bold">?</span> AS \&#34;<span class="bold">ref</span>\&#34;)&#34;;
    OraclePreparedStatement stmt = (OraclePreparedStatement)conn.prepareStatement(xqString);
    String refString = &#34;EABEL-20021009123336251PDT&#34;; // Set the filter value
    stmt.setString(1, refString); // Bind the string
    ResultSet rs = stmt.executeQuery();
    while (rs.next())
    {
       XMLType desc = (XMLType) rs.getObject(1);
       System.out.println(&#34;LineItem Description: &#34; + desc.getStringVal());
       desc.close();
    }
    rs.close();
    stmt.close();
  }
}
</pre>
<p>This produces the following output:</p>
<pre dir="ltr">*** JDBC Access of Database XQuery with Bind Variables ***
LineItem Description: Samurai 2: Duel at Ichijoji Temple
LineItem Description: The Red Shoes
LineItem Description: A Night to Remember
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-813C0A08-111D-4C4F-B76F-E0B41D6729F0__BABBCACI">
<p class="titleinexample">Example 5-26 Using XQuery with ODP.NET and C#</p>
<pre dir="ltr">using System;
using System.Data;
using System.Text;
using System.IO;
using System.Xml;
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
 
namespace XQuery
{
  /// &lt;summary&gt;
  /// Demonstrates how to bind variables for XQuery calls
  /// &lt;/summary&gt;
  class XQuery
  {
    /// &lt;summary&gt;
    /// The main entry point for the application.
    /// &lt;/summary&gt;
    static void Main(string[] args)
    {
      int rows = 0;
      StreamReader sr = null;
 
      // Create the connection.
      string constr = &#34;User Id=oe;Password=***********;Data Source=ora11gr2&#34;; // Replace with real password.
      OracleConnection con = new OracleConnection(constr);
      con.Open();
 
      // Create the command.
      OracleCommand cmd = new OracleCommand(&#34;&#34;, con);
 
      // Set the XML command type to query.
      cmd.CommandType   = CommandType.Text;
        
      // Create the SQL query with the XQuery expression.
      StringBuilder blr = new StringBuilder();
      blr.Append(&#34;SELECT COLUMN_VALUE FROM XMLTable&#34;);
      blr.Append(&#34;(\&#39;for $i in fn:collection(\&#34;oradb:/OE/PURCHASEORDER\&#34;) &#34;);
      blr.Append(&#34;   where count($i/PurchaseOrder/LineItems/LineItem) = <span class="bold">$itemno</span> &#34;);
      blr.Append(&#34;      and $i/PurchaseOrder/LineItems/LineItem/Part/@Id = <span class="bold">$id</span> &#34;);
      blr.Append(&#34;   return $i/PurchaseOrder/LineItems\&#39; &#34;);
      blr.Append(&#34;  PASSING <span class="bold">:nbitems</span> AS \&#34;<span class="bold">itemno</span>\&#34;, <span class="bold">:partid</span> AS \&#34;<span class="bold">id</span>\&#34;)&#34;);
 
      cmd.CommandText = blr.ToString();
      cmd.Parameters.Add(&#34;<span class="bold">:nbitems</span>&#34;, OracleDbType.Int16, 3, ParameterDirection.Input);
      cmd.Parameters.Add(&#34;<span class="bold">:partid</span>&#34;, OracleDbType.Varchar2, &#34;715515009058&#34;, ParameterDirection.Input);
 
      // Get the XML document as an XmlReader.
      OracleDataReader dr = cmd.ExecuteReader();
      dr.Read();
 
      // Get the XMLType column as an OracleXmlType
      OracleXmlType xml = dr.GetOracleXmlType(0);
 
      // Print the XML data in the OracleXmlType object
      Console.WriteLine(xml.Value);
      xml.Dispose();
 
      // Clean up.
      cmd.Dispose();
      con.Close();
      con.Dispose();
    }
  }
}
</pre>
<p>This produces the following output:</p>
<pre dir="ltr">&lt;LineItems&gt;
  &lt;LineItem ItemNumber=&#34;1&#34;&gt;
    &lt;Description&gt;Samurai 2: Duel at Ichijoji Temple&lt;/Description&gt;
    &lt;Part Id=&#34;37429125526&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;3&#34;/&gt;
  &lt;/LineItem&gt;
  &lt;LineItem ItemNumber=&#34;2&#34;&gt;
    &lt;Description&gt;The Red Shoes&lt;/Description&gt;
    &lt;Part Id=&#34;37429128220&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;4&#34;/&gt;
  &lt;/LineItem&gt;
  &lt;LineItem ItemNumber=&#34;3&#34;&gt;
    &lt;Description&gt;A Night to Remember&lt;/Description&gt;
    &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;1&#34;/&gt;
  &lt;/LineItem&gt;
&lt;/LineItems&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB0440"></a>
<div class="props_rev_3"><a id="GUID-6AE99020-C3C8-44EB-8E54-40188E1103F2"></a>
<h2 id="ADXDB-GUID-6AE99020-C3C8-44EB-8E54-40188E1103F2" class="sect2"><span class="enumeration_section">5.6</span> Updating XML Data</h2>
<div>
<p>There are several ways you can use Oracle XML&nbsp;DB features to update XML data, whether it is transient or stored in database tables.</p>
<div class="section"></div>
<!-- class="section" --></div>
<a id="ADXDB4268"></a><a id="ADXDB4267"></a>
<div class="props_rev_3"><a id="GUID-5874AE0D-FC05-4156-80CB-F4474AD74F18"></a>
<h3 id="ADXDB-GUID-5874AE0D-FC05-4156-80CB-F4474AD74F18" class="sect3"><span class="enumeration_section">5.6.1</span> Updating an Entire XML Document</h3>
<div>
<p>To update an entire XML document, use a SQL <code>UPDATE</code> statement.</p>
<div class="section">
<p>The right side of the <code>UPDATE</code> statement <code>SET</code> clause must be an <code>XMLType</code> instance. This can be created in any of the following ways:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Use SQL functions or XML constructors that return an XML instance.</p>
</li>
<li>
<p>Use the PL/SQL DOM APIs for <code>XMLType</code> that change and bind an existing XML instance.</p>
</li>
<li>
<p>Use the Java DOM API that changes and binds an existing XML instance.</p>
</li>
</ul>
<p>Updates for non-schema-based documents stored as binary XML can be made in a piecewise manner.</p>
<p><a href="xdb04cre.htm#GUID-5874AE0D-FC05-4156-80CB-F4474AD74F18__CHDCHHJB">Example 5-27</a> updates an <code>XMLType</code> instance using a SQL <code>UPDATE</code> statement.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-5874AE0D-FC05-4156-80CB-F4474AD74F18__CHDCHHJB">
<p class="titleinexample">Example 5-27 Updating XMLType Data Using SQL UPDATE</p>
<pre dir="ltr">SELECT t.reference, li.lineno, li.description
  FROM purchaseorder po,
       XMLTable(&#39;$p/PurchaseOrder&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34;
                COLUMNS reference VARCHAR2(28) PATH &#39;Reference&#39;,
                        lineitem  XMLType      PATH &#39;LineItems/LineItem&#39;) t,
       XMLTable(&#39;$l/LineItem&#39; PASSING t.lineitem AS &#34;l&#34;
                COLUMNS lineno      NUMBER(10)    PATH &#39;@ItemNumber&#39;,
                        description VARCHAR2(128) PATH &#39;Description&#39;) li
  WHERE t.reference = &#39;DAUSTIN-20021009123335811PDT&#39; AND ROWNUM &lt; 6;
 
REFERENCE                         LINENO DESCRIPTION
-------------------------------- ------- -----------------
DAUSTIN-20021009123335811PDT           1 Nights of Cabiria
DAUSTIN-20021009123335811PDT           2 For All Mankind
DAUSTIN-20021009123335811PDT           3 Dead Ringers
DAUSTIN-20021009123335811PDT           4 Hearts and Minds
DAUSTIN-20021009123335811PDT           5 Rushmore

UPDATE purchaseorder po
  SET po.OBJECT_VALUE = XMLType(bfilename(&#39;XMLDIR&#39;,&#39;NEW-DAUSTIN-20021009123335811PDT.xml&#39;),
                                nls_charset_id(&#39;AL32UTF8&#39;))
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;DAUSTIN-20021009123335811PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

SELECT t.reference, li.lineno, li.description
  FROM purchaseorder po,
       XMLTable(&#39;$p/PurchaseOrder&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34;
                COLUMNS reference VARCHAR2(28) PATH &#39;Reference&#39;,
                        lineitem  XMLType      PATH &#39;LineItems/LineItem&#39;) t,
       XMLTable(&#39;$l/LineItem&#39; PASSING t.lineitem AS &#34;l&#34;
                COLUMNS lineno      NUMBER(10)    PATH &#39;@ItemNumber&#39;,
                        description VARCHAR2(128) PATH &#39;Description&#39;) li
  WHERE t.reference = &#39;DAUSTIN-20021009123335811PDT&#39;;
 
REFERENCE                         LINENO DESCRIPTION
-------------------------------- ------- --------------------------------
DAUSTIN-20021009123335811PDT           1 Dead Ringers
DAUSTIN-20021009123335811PDT           2 Getrud
DAUSTIN-20021009123335811PDT           3 Branded to Kill
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4273"></a><a id="ADXDB4274"></a><a id="ADXDB4275"></a><a id="ADXDB4145"></a><a id="ADXDB4146"></a><a id="ADXDB6043"></a>
<div class="props_rev_3"><a id="GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998"></a>
<h3 id="ADXDB-GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998" class="sect3"><span class="enumeration_section">5.6.2</span> Replacing XML Nodes</h3>
<div>
<p>You can use XQuery Update with a SQL <code>UPDATE</code> statement to update an existing XML document instead of creating a new document. The entire document is updated, not just the part of it that is selected.</p>
<div class="section">
<p>In <a href="xdb04cre.htm#GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__CHDEBGDD">Example 5-28</a> we pass the SQL string literal <span class="bold"><code>&#39;SKING&#39;</code></span> to the XQuery expression as a variable (<code>$p2</code>). In this simple example, since the value is a string literal, we could have simply used <code>replace value of node $j with</code> <span class="bold"><code>&#34;SKING&#34;</code></span>. That is, you can just use a literal XQuery string here, instead of passing a literal string from SQL to XQuery. In real-world examples you will typically pass a value that is available only at runtime; <a href="xdb04cre.htm#GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__CHDEBGDD">Example 5-28</a> shows how to do that. This is also true of other examples.</p>
<p><a href="xdb04cre.htm#GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__CHDIIHCI">Example 5-29</a> updates multiple text nodes and attribute nodes.</p>
<p><a href="xdb04cre.htm#GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__CHDEJIJD">Example 5-30</a> updates selected nodes within a collection.</p>
<p><a href="xdb04cre.htm#GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__BJFCFABB">Example 5-31</a> illustrates the common mistake of using an XQuery Update replace-value operation to update a <span class="italic">node that occurs multiple times</span> in a collection. The <code>UPDATE</code> statement sets the value of the text node of a <code>Description</code> element to <code>The Wizard of Oz</code>, where the current value of the text node is <code>Sisters</code>. The statement includes an <code>XMLExists</code> expression in the <code>WHERE</code> clause that identifies the set of nodes to be updated.</p>
<p>Instead of updating only the intended node, <a href="xdb04cre.htm#GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__BJFCFABB">Example 5-31</a> updates the values of <span class="italic">all</span> text nodes that belong to the <code>Description</code> element. This is not what was intended.</p>
<p><span class="italic">A</span> <span class="italic"><code>WHERE</code></span> <span class="italic">clause can be used only to identify which</span> <span class="italic"><span class="bold">documents</span></span> <span class="italic">must be updated, not which</span> <span class="italic"><span class="bold">nodes</span></span> <span class="italic">within a document must be updated</span>.</p>
<p>After the document has been selected, the <span class="italic">XQuery expression</span> passed to XQuery Update determines which <span class="italic">nodes</span> within the document must be updated. In this case, the XQuery expression identifies all three <code>Description</code> nodes, so all three of the associated text nodes were updated.</p>
<p>To correctly update a node that occurs multiple times within a collection, use the XQuery expression passed XQuery Update to identify which nodes in the XML document to update. By introducing the appropriate predicate into the XQuery expression, you can limit which nodes in the document are updated. <a href="xdb04cre.htm#GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__BABEJGHA">Example 5-32</a> illustrates the correct way to update one node within a collection.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__CHDEBGDD">
<p class="titleinexample">Example 5-28 Updating XMLTYPE Data Using SQL UPDATE and XQuery Update</p>
<pre dir="ltr">SELECT XMLQuery(&#39;$p/PurchaseOrder/Actions/Action[1]&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34;
                                                     RETURNING CONTENT) action
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
ACTION
--------------------------------
&lt;Action&gt;
  &lt;User&gt;SVOLLMAN&lt;/User&gt;
&lt;/Action&gt;

UPDATE purchaseorder po
  SET po.OBJECT_VALUE =
    XMLQuery(&#39;copy $i := $p1 modify
              (for $j in $i/PurchaseOrder/Actions/Action[1]/<span class="bold">User</span>
               return <span class="bold">replace value of node</span> $j <span class="bold">with</span> $p2)
              return $i&#39; PASSING po.OBJECT_VALUE AS &#34;p1&#34;,
                                <span class="bold">&#39;SKING&#39;</span> AS &#34;p2&#34; RETURNING CONTENT)
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
SELECT XMLQuery(&#39;$p/PurchaseOrder/Actions/Action[1]&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34;
                                                     RETURNING CONTENT) action
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
ACTION
---------------------------------
&lt;Action&gt;
  &lt;User&gt;<span class="bold">SKING</span>&lt;/User&gt;
&lt;/Action&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__CHDIIHCI">
<p class="titleinexample">Example 5-29 Updating Multiple Text Nodes and Attribute Nodes</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- ------------------------------------------------------------------------
<span class="bold">Sarah J. Bell</span>    &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     &lt;Description&gt;<span class="bold">A Night to Remember</span>&lt;/Description&gt;
                     &lt;Part Id=&#34;<span class="bold">715515009058</span>&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;2&#34;&gt;
                     &lt;Description&gt;The Unbearable Lightness Of Being&lt;/Description&gt;
                     &lt;Part Id=&#34;37429140222&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   <span class="bold">&lt;LineItem ItemNumber=&#34;3&#34;&gt;</span>
                     <span class="bold">&lt;Description&gt;Sisters&lt;/Description&gt;</span>
                     <span class="bold">&lt;Part Id=&#34;715515011020&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;4&#34;/&gt;</span>
                   <span class="bold">&lt;/LineItem&gt;</span>
                 &lt;/LineItems&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE =
    XMLQuery(&#39;copy $i := $p1 modify
                ((for $j in $i/PurchaseOrder/<span class="bold">Requestor</span>
                  return replace value of node $j with $p2),
                 (for $j in $i/PurchaseOrder/LineItems/LineItem[1]/<span class="bold">Part/@Id</span>
                  return replace value of node $j with $p3),
                 (for $j in $i/PurchaseOrder/LineItems/LineItem[1]/<span class="bold">Description</span>
                  return replace value of node $j with $p4),
                 (for $j in $i/PurchaseOrder/LineItems/<span class="bold">LineItem[3]</span>
                  return replace node $j with $p5))
                return $i&#39;
             PASSING OBJECT_VALUE AS &#34;p1&#34;,
                     <span class="bold">&#39;Stephen G. King&#39;</span> AS &#34;p2&#34;,
                     <span class="bold">&#39;786936150421&#39;</span> AS &#34;p3&#34;,
                     <span class="bold">&#39;The Rock&#39;</span> AS &#34;p4&#34;,
                     XMLType(<span class="bold">&#39;&lt;LineItem ItemNumber=&#34;99&#34;&gt;</span>
                                <span class="bold">&lt;Description&gt;Dead Ringers&lt;/Description&gt;</span>
                                <span class="bold">&lt;Part Id=&#34;715515009249&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;</span>
                              <span class="bold">&lt;/LineItem&gt;&#39;</span>) AS &#34;p5&#34;
             RETURNING CONTENT)
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- ------------------------------------------------------------------
<span class="bold">Stephen G. King</span>  &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     &lt;Description&gt;<span class="bold">The Rock</span>&lt;/Description&gt;
                     &lt;Part Id=<span class="bold">&#34;786936150421&#34;</span> UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;2&#34;&gt;
                     &lt;Description&gt;The Unbearable Lightness Of Being&lt;/Description&gt;
                     &lt;Part Id=&#34;37429140222&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   <span class="bold">&lt;LineItem ItemNumber=&#34;99&#34;&gt;</span>
                     <span class="bold">&lt;Description&gt;Dead Ringers&lt;/Description&gt;</span>
                     <span class="bold">&lt;Part Id=&#34;715515009249&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;</span>
                   <span class="bold">&lt;/LineItem&gt;</span>
                 &lt;/LineItems&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__CHDEJIJD">
<p class="titleinexample">Example 5-30 Updating Selected Nodes within a Collection</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- ----------------------------------------------------------------
<span class="bold">Sarah J. Bell</span>    &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     &lt;Description&gt;A Night to Remember&lt;/Description&gt;
                     &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;<span class="bold">2</span>&#34;/&gt;
                   &lt;/LineItem&gt;
                   <span class="bold">&lt;LineItem ItemNumber=&#34;2&#34;&gt;</span>
                     <span class="bold">&lt;Description&gt;The Unbearable Lightness Of Being&lt;/Description&gt;</span>
                     <span class="bold">&lt;Part Id=&#34;37429140222&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;2&#34;/&gt;</span>
                   <span class="bold">&lt;/LineItem&gt;</span>
                   &lt;LineItem ItemNumber=&#34;3&#34;&gt;
                     &lt;Description&gt;Sisters&lt;/Description&gt;
                     &lt;Part Id=&#34;715515011020&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;4&#34;/&gt;
                   &lt;/LineItem&gt;
                 &lt;/LineItems&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE =
      XMLQuery(
        &#39;copy $i := $p1 modify
           ((for $j in $i/PurchaseOrder/<span class="bold">Requestor</span>
             return replace value of node $j with $p2),
            (for $j in $i/PurchaseOrder/LineItems/LineItem/<span class="bold">Part[@Id=&#34;715515009058&#34;]/@Quantit</span>y
             return replace value of node $j with $p3),
            (for $j in $i/PurchaseOrder/LineItems/LineItem
                         [Description/text()=&#34;<span class="bold">The Unbearable Lightness Of Being</span>&#34;]
             return replace node $j with $p4))
           return $i&#39;
        PASSING OBJECT_VALUE AS &#34;p1&#34;,
                <span class="bold">&#39;Stephen G. King&#39;</span> AS &#34;p2&#34;,
                <span class="bold">25</span> AS &#34;p3&#34;,
                XMLType(<span class="bold">&#39;&lt;LineItem ItemNumber=&#34;99&#34;&gt;</span>
                           <span class="bold">&lt;Part Id=&#34;786936150421&#34; Quantity=&#34;5&#34; UnitPrice=&#34;29.95&#34;/&gt;</span>
                           <span class="bold">&lt;Description&gt;The Rock&lt;/Description&gt;</span>
                         <span class="bold">&lt;/LineItem&gt;&#39;</span>) AS &#34;p4&#34;
        RETURNING CONTENT)
      WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                      PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- -------------------------------------------------------------
<span class="bold">Stephen G. King</span>  &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     &lt;Description&gt;A Night to Remember&lt;/Description&gt;
                     &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;<span class="bold">25</span>&#34;/&gt;
                   &lt;/LineItem&gt;
                   <span class="bold">&lt;LineItem ItemNumber=&#34;99&#34;&gt;</span>
                     <span class="bold">&lt;Part Id=&#34;786936150421&#34; Quantity=&#34;5&#34; UnitPrice=&#34;29.95&#34;/&gt;</span>
                     <span class="bold">&lt;Description&gt;The Rock&lt;/Description&gt;</span>
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;3&#34;&gt;
                     &lt;Description&gt;Sisters&lt;/Description&gt;
                     &lt;Part Id=&#34;715515011020&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;4&#34;/&gt;
                   &lt;/LineItem&gt;
                 &lt;/LineItems&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__BJFCFABB">
<p class="titleinexample">Example 5-31 Incorrectly Updating a Node That Occurs Multiple Times in a Collection</p>
<pre dir="ltr">SELECT XMLCast(des.COLUMN_VALUE AS VARCHAR2(256))
  FROM purchaseorder,
       XMLTable(&#39;$p/PurchaseOrder/LineItems/LineItem/Description&#39;
                PASSING OBJECT_VALUE AS &#34;p&#34;) des
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);
 
XMLCAST(DES.COLUMN_VALUEASVARCHAR2(256))
----------------------------------------
The Lady Vanishes
The Unbearable Lightness Of Being
Sisters
 
3 rows selected.

UPDATE purchaseorder
  SET OBJECT_VALUE =
        XMLQuery(&#39;copy $i := $p1 modify
                    (for $j in $i/PurchaseOrder/LineItems/LineItem/Description
                     return <span class="bold">replace value of node</span> $j <span class="bold">with</span> $p2)
                  return $i&#39;
                 PASSING OBJECT_VALUE AS &#34;p1&#34;, <span class="bold">&#39;The Wizard of Oz&#39;</span> AS &#34;p2&#34;
                 RETURNING CONTENT)
        WHERE XMLExists(&#39;$p/PurchaseOrder/LineItems/LineItem[Description=&#34;Sisters&#34;]&#39;
                        PASSING OBJECT_VALUE AS &#34;p&#34;)
          AND XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                        PASSING OBJECT_VALUE AS &#34;p&#34;);
 
1 row updated.

SELECT XMLCast(des.COLUMN_VALUE AS VARCHAR2(256))
  FROM purchaseorder,
       XMLTable(&#39;$p/PurchaseOrder/LineItems/LineItem/Description&#39;
                PASSING OBJECT_VALUE AS &#34;p&#34;) des
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);
 
XMLCAST(DES.COLUMN_VALUEASVARCHAR2(256))
----------------------------------------
<span class="bold">The Wizard of Oz</span>
<span class="bold">The Wizard of Oz</span>
<span class="bold">The Wizard of Oz</span>
 
3 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9DE1EAEA-60A6-47AF-B4CC-28AB2BC5C998__BABEJGHA">
<p class="titleinexample">Example 5-32 Correctly Updating a Node That Occurs Multiple Times in a Collection</p>
<pre dir="ltr">SELECT XMLCast(des.COLUMN_VALUE AS VARCHAR2(256))
  FROM purchaseorder,
       XMLTable(&#39;$p/PurchaseOrder/LineItems/LineItem/Description&#39;
                PASSING OBJECT_VALUE AS &#34;p&#34;) des
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);
 
XMLCAST(DES.COLUMN_VALUEASVARCHAR2(256))
----------------------------------------

A Night to Remember
The Unbearable Lightness Of Being
Sisters

3 rows selected.


UPDATE purchaseorder
 SET OBJECT_VALUE =
       XMLQuery(&#39;copy $i := $p1 modify
                   (for $j in $i/PurchaseOrder/LineItems/LineItem/Description
                                <span class="bold">[text()=&#34;Sisters&#34;]</span>
                    return <span class="bold">replace value of node</span> $j <span class="bold">with</span> $p2)
                 return $i&#39;
                PASSING OBJECT_VALUE       AS &#34;p1&#34;,
                        <span class="bold">&#39;The Wizard of Oz&#39;</span> AS &#34;p2&#34; RETURNING CONTENT)
       WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                       PASSING OBJECT_VALUE AS &#34;p&#34;);
 
1 row updated.

SELECT XMLCast(des.COLUMN_VALUE AS VARCHAR2(256))
  FROM purchaseorder,
       XMLTable(&#39;$p/PurchaseOrder/LineItems/LineItem/Description&#39;
                PASSING OBJECT_VALUE AS &#34;p&#34;) des
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);
 
XMLCAST(DES.COLUMN_VALUEASVARCHAR2(256))
----------------------------------------
A Night to Remember
The Unbearable Lightness Of Being
<span class="bold">The Wizard of Oz</span>

3 rows selected.
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB4277"></a><a id="ADXDB4278"></a><a id="ADXDB4276"></a>
<div class="props_rev_3"><a id="GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A"></a>
<h4 id="ADXDB-GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A" class="sect4"><span class="enumeration_section">5.6.2.1</span> Updating XML Data to NULL Values</h4>
<div>
<p>Certain considerations apply to updating XML data to <code>NULL</code> values.</p>
<div class="section"></div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>If you update an XML <span class="italic">element</span> to <code>NULL</code>, the attributes and children of the element are removed, and the element becomes empty. The type and namespace properties of the element are retained. See <a href="xdb04cre.htm#GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A__CHDBBEHI">Example 5-33</a>.</p>
</li>
<li>
<p>If you update an <span class="italic">attribute</span> value to <code>NULL</code>, the value appears as the empty string. See <a href="xdb04cre.htm#GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A__CHDBBEHI">Example 5-33</a>.</p>
</li>
<li>
<p>If you update the <span class="italic">text</span> node of an element to <code>NULL</code>, the content (text) of the element is removed. The element itself remains, but it is empty. See <a href="xdb04cre.htm#GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A__CHDDEBBJ">Example 5-34</a>.</p>
</li>
</ul>
<p><a href="xdb04cre.htm#GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A__CHDBBEHI">Example 5-33</a> updates all of the following to <code>NULL</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code>Description</code> element and the <code>Quantity</code> attribute of the <code>LineItem</code> element whose <code>Part</code> element has attribute <code>Id</code> value 715515009058.</p>
</li>
<li>
<p>The <code>LineItem</code> element whose <code>Description</code> element has the content (text) &#34;The Unbearable Lightness Of Being&#34;.</p>
</li>
</ul>
<p>Note that <a href="xdb04cre.htm#GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A__CHDBBEHI">Example 5-33</a> shows two different but equivalent ways to remove the value of a node. For element <code>Description</code> and attribute <code>Quantity</code>, a literal XQuery empty sequence, <span class="bold"><code>()</code></span>, replaces the existing value directly. For element <code>LineItem</code>, SQL <span class="bold"><code>NULL</code></span> is passed into the XQuery expression to provide the empty node value. Since the value used is literal, it is simpler not to pass it from SQL to XQuery. But in real-world examples you will often pass a value that is available only at runtime. <a href="xdb04cre.htm#GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A__CHDBBEHI">Example 5-33</a> shows how to do this for an empty XQuery sequence: pass a SQL <code>NULL</code> value.</p>
<p><a href="xdb04cre.htm#GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A__CHDDEBBJ">Example 5-34</a> updates the text node of a <code>Part</code> element whose <code>Description</code> attribute has value &#34;<code>A Night to Remember</code>&#34; to <code>NULL</code>. The XML data for this example corresponds to a different, revised purchase-order XML schema &ndash; see <span class="q">&#34;<a href="xdb07evo.htm#GUID-AD87A5C3-D0E8-4109-A6B2-F3F673D42FFD" title="An evolved version of a purchase-order XML schema is shown. It is used in examples that illustrate the use of copy-based XML schema evolution.">Scenario for Copy-Based Evolution</a>&#34;</span>. In that XML schema, <code>Description</code> is an attribute of the <code>Part</code> element, not a sibling element.</p>
<div class="infoboxnotealso" id="GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A__GUID-8E4A339C-64A2-497B-81AB-67E432BB6E91">
<p class="notep1">See Also:</p>
<p><a href="xdb03usg.htm#GUID-96D5EAC3-463F-48C0-BF3C-D051E0B174E8__CHDBGCBG">Example 3-26</a></p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A__CHDBBEHI">
<p class="titleinexample">Example 5-33 NULL Updates &ndash; Element and Attribute</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- -------------------------------------------------------------------
Sarah J. Bell    &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     &lt;Description&gt;<span class="bold">A Night to Remember</span>&lt;/Description&gt;
                     &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;<span class="bold">2</span>&#34;/&gt;
                   &lt;/LineItem&gt;
                   <span class="bold">&lt;LineItem ItemNumber=&#34;2&#34;&gt;</span>
                     <span class="bold">&lt;Description&gt;The Unbearable Lightness Of Being&lt;/Description&gt;</span>
                     <span class="bold">&lt;Part Id=&#34;37429140222&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;2&#34;/&gt;</span>
                   <span class="bold">&lt;/LineItem&gt;</span>
                   &lt;LineItem ItemNumber=&#34;3&#34;&gt;
                     &lt;Description&gt;Sisters&lt;/Description&gt;
                     &lt;Part Id=&#34;715515011020&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;4&#34;/&gt;
                   &lt;/LineItem&gt;
                 &lt;/LineItems&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE = 
      XMLQuery(
        &#39;copy $i := $p1 modify
           ((for $j in $i/PurchaseOrder/LineItems/LineItem[Part/@Id=&#34;715515009058&#34;]/<span class="bold">Description</span>
             return replace value of node $j with <span class="bold">()</span>) ,
            (for $j in $i/PurchaseOrder/LineItems/LineItem/Part[@Id=&#34;715515009058&#34;]/<span class="bold">@Quantity</span>
             return replace value of node $j with <span class="bold">()</span>) ,
            (for $j in $i/PurchaseOrder/LineItems/LineItem
                         [Description/text()= &#34;The Unbearable Lightness Of Being&#34;]
             return replace node $j with $p2)) 
         return $i&#39;
        PASSING OBJECT_VALUE AS &#34;p1&#34;, <span class="bold">NULL</span> AS &#34;p2&#34;
        RETURNING CONTENT)
      WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                      PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- ----------------------------------------------------------------
Sarah J. Bell    &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     <span class="bold">&lt;Description/&gt;</span>
                     &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; <span class="bold">Quantity=&#34;&#34;</span>/&gt;
                   &lt;/LineItem&gt;
                   <span class="bold">&lt;LineItem/&gt;</span>
                   &lt;LineItem ItemNumber=&#34;3&#34;&gt;
                     &lt;Description&gt;Sisters&lt;/Description&gt;
                     &lt;Part Id=&#34;715515011020&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;4&#34;/&gt;
                   &lt;/LineItem&gt;
                 &lt;/LineItems&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-A3B5055C-EDD6-42B6-BD90-C98E2F780B9A__CHDDEBBJ">
<p class="titleinexample">Example 5-34 NULL Updates &ndash; Text Node</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem/Part[@Description=&#34;A Night to Remember&#34;]&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(128)) part
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[@Reference=&#34;SBELL-2003030912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

PART
----
&lt;Part Description=&#34;A Night to Remember&#34; UnitCost=&#34;39.95&#34;&gt;<span class="bold">715515009058</span>&lt;/Part&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE =
      XMLQuery(
        &#39;copy $i := $p1 modify
           (for $j in $i/PurchaseOrder/LineItems/LineItem/Part[@Description=&#34;A Night to Remember&#34;]
            return replace value of node $j with $p2)
         return $i
        PASSING OBJECT_VALUE AS &#34;p1&#34;, <span class="bold">NULL</span> AS &#34;p2&#34; RETURNING CONTENT)
  WHERE XMLExists(&#39;$p/PurchaseOrder[@Reference=&#34;SBELL-2003030912333601PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem/Part[@Description=&#34;A Night to Remember&#34;]&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(128)) part
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[@Reference=&#34;SBELL-2003030912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

PART
----
&lt;Part Description=&#34;A Night to Remember&#34; UnitCost=&#34;39.95&#34;/&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB4291"></a><a id="ADXDB4292"></a><a id="ADXDB5807"></a><a id="ADXDB4304"></a><a id="ADXDB4289"></a>
<div class="props_rev_3"><a id="GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F"></a>
<h3 id="ADXDB-GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F" class="sect3"><span class="enumeration_section">5.6.3</span> Inserting Child XML Nodes</h3>
<div>
<p>You can use XQuery Update to insert new children (either a single attribute or one or more elements of the same type) under parent XML elements. The XML document that is the target of the insertion can be schema-based or non-schema-based.</p>
<div class="section">
<p><a href="xdb04cre.htm#GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F__CHDEDCBF">Example 5-35</a> inserts a new <code>LineItem</code> element as a child of element <code>LineItems</code>. Note that it uses the Oracle XQuery pragma <code>ora:child-element-name</code> to specify the name of the inserted child element as <code>LineItem</code>.</p>
<p>If the XML data to be updated is XML schema-based and it refers to a namespace, then the data to be inserted must also refer to the same namespace. Otherwise, an error is raised because the inserted data does not conform to the XML schema.</p>
<div class="infobox-note" id="GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F__GUID-E650BD6D-426F-456E-B830-7B9DBC0580A3">
<p class="notep1">Note:</p>
<p>Be aware that using XQuery Update to update XML schema-based data results in an error being raised if you try to store the updated data back into an XML schema-based column or table. To prevent this, use XQuery pragma <code>ora:transform_keep_schema</code>. See <span class="q">&#34;<a href="xdb_xquery.htm#GUID-09066C46-8272-461A-ADE7-2F1B0FCDA948" title="The W3C XQuery specification lets an implementation provide implementation-defined extension expressions. An XQuery extension expression is an XQuery expression that is enclosed in braces ({,&nbsp;}) and prefixed by an implementation-defined pragma. The Oracle implementation provides several such pragmas.">Oracle XQuery Extension-Expression Pragmas</a>&#34;</span>.</p>
</div>
<p><a href="xdb04cre.htm#GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F__CHDGAHJB">Example 5-36</a> is the same as <a href="xdb04cre.htm#GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F__CHDEDCBF">Example 5-35</a>, except that the <code>LineItem</code> element to be inserted refers to a namespace. This assumes that the relevant XML schema requires a namespace for this element.</p>
<p><a href="xdb04cre.htm#GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F__CACJGGJE">Example 5-37</a> inserts a <code>LineItem</code> element before the first <code>LineItem</code> element.</p>
<p><a href="xdb04cre.htm#GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F__CACDEIDH">Example 5-38</a> inserts a <code>Date</code> element as the last child of an <code>Action</code> element.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F__CHDEDCBF">
<p class="titleinexample">Example 5-35 Inserting an Element into a Collection</p>
<pre dir="ltr">SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[@ItemNumber=222]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[@ITEMNUMBER=222]&#39;
---------------------------------------------------------------

1 row selected.

UPDATE purchaseorder
  SET OBJECT_VALUE = 
      XMLQuery(&#39;copy $i := $p1 modify
                  (for $j in $i/PurchaseOrder/LineItems
                   return <span class="bold">(# ora:child-element-name LineItem #)</span>
                          {<span class="bold">insert node</span> $p2 <span class="bold">into</span> $j})
                return $i&#39;
               PASSING OBJECT_VALUE AS &#34;p1&#34;,
                       XMLType(<span class="bold">&#39;&lt;LineItem ItemNumber=&#34;222&#34;&gt;</span>
                                  <span class="bold">&lt;Description&gt;The Harder They Come&lt;/Description&gt;</span>
                                  <span class="bold">&lt;Part Id=&#34;953562951413&#34; UnitPrice=&#34;22.95&#34; Quantity=&#34;1&#34;/&gt;</span>
                                <span class="bold">&lt;/LineItem&gt;&#39;</span>) AS &#34;p2&#34;
               RETURNING CONTENT)
      WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                      PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[@ItemNumber=222]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[@ITEMNUMBER=222]&#39;
---------------------------------------------------------------
<span class="bold">&lt;LineItem ItemNumber=&#34;222&#34;&gt;</span>
  <span class="bold">&lt;Description&gt;The Harder They Come&lt;/Description&gt;</span>
  <span class="bold">&lt;Part Id=&#34;953562951413&#34; UnitPrice=&#34;22.95&#34; Quantity=&#34;1&#34;/&gt;</span>
<span class="bold">&lt;/LineItem&gt;</span>

1 row selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F__CHDGAHJB">
<p class="titleinexample">Example 5-36 Inserting an Element that Uses a Namespace</p>
<pre dir="ltr">UPDATE purchaseorder
  SET OBJECT_VALUE = 
      XMLQuery(&#39;<span class="bold">declare namespace e = &#34;films.xsd&#34;</span>; (: :)
                copy $i := $p1 modify
                  (for $j in $i/PurchaseOrder/LineItems
                   return (# ora:child-element-name <span class="bold">e:</span>LineItem #)
                          {insert node $p2 into $j})
                return $i&#39;
               PASSING OBJECT_VALUE AS &#34;p1&#34;,
                       XMLType(&#39;&lt;<span class="bold">e:</span>LineItem ItemNumber=&#34;222&#34;&gt;
                                  &lt;Description&gt;The Harder They Come&lt;/Description&gt;
                                  &lt;Part Id=&#34;953562951413&#34; UnitPrice=&#34;22.95&#34; Quantity=&#34;1&#34;/&gt;
                                &lt;/<span class="bold">e:</span>LineItem&gt;&#39;) AS &#34;p2&#34;
               RETURNING CONTENT)
      WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                      PASSING OBJECT_VALUE AS &#34;p&#34;);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F__CACJGGJE">
<p class="titleinexample">Example 5-37 Inserting an Element Before an Element</p>
<pre dir="ltr">SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[1]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                   PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[1]&#39;PASSINGPO.OBJECT_
------------------------------------------------------------------
&lt;LineItem ItemNumber=&#34;1&#34;&gt;
  &lt;Description&gt;Salesman&lt;/Description&gt;
  &lt;Part Id=&#34;37429158920&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
&lt;/LineItem&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE = 
      XMLQuery(&#39;copy $i := $p1 modify
                  (for $j in $i/PurchaseOrder/LineItems/LineItem[1]
                   return <span class="bold">insert node</span> $p2 <span class="bold">before</span> $j)
                return $i&#39;
               PASSING OBJECT_VALUE AS &#34;p1&#34;,
                       XMLType(<span class="bold">&#39;&lt;LineItem ItemNumber=&#34;314&#34;&gt;</span>
                                  <span class="bold">&lt;Description&gt;Brazil&lt;/Description&gt;</span>
                                  <span class="bold">&lt;Part Id=&#34;314159265359&#34; UnitPrice=&#34;69.95&#34;</span> 
                                        <span class="bold">Quantity=&#34;2&#34;/&gt;</span>
                                <span class="bold">&lt;/LineItem&gt;&#39;</span>) AS &#34;p2&#34;
               RETURNING CONTENT)
      WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                      PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[<span class="bold">position() &lt;= 2</span>]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                   PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[POSITION()&lt;=2]&#39;PASSINGPO.OBJECT_
------------------------------------------------------------------------------
<span class="bold">&lt;LineItem ItemNumber=&#34;314&#34;&gt;</span>
  <span class="bold">&lt;Description&gt;Brazil&lt;/Description&gt;</span>
  <span class="bold">&lt;Part Id=&#34;314159265359&#34; UnitPrice=&#34;69.95&#34; Quantity=&#34;2&#34;/&gt;</span>
<span class="bold">&lt;/LineItem&gt;</span>
&lt;LineItem ItemNumber=&#34;1&#34;&gt;
  &lt;Description&gt;Salesman&lt;/Description&gt;
  &lt;Part Id=&#34;37429158920&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
&lt;/LineItem&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3C9D2384-DBD4-45CE-AD76-630A14A0992F__CACDEIDH">
<p class="titleinexample">Example 5-38 Inserting an Element as the Last Child Element</p>
<pre dir="ltr">SELECT XMLQuery(&#39;$p/PurchaseOrder/Actions/Action[1]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/ACTIONS/ACTION[1]&#39;PASSINGPO.OBJECT_VALUE
-------------------------------------------------------------------
&lt;Action&gt;
  &lt;User&gt;KPARTNER&lt;/User&gt;
&lt;/Action&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE = 
      XMLQuery(&#39;copy $i := $p1 modify
                  (for $j in $i/PurchaseOrder/Actions/Action[1]
                   return <span class="bold">insert nodes</span> $p2 <span class="bold">as last into</span> $j)
                return $i&#39;
               PASSING OBJECT_VALUE AS &#34;p1&#34;,
                       XMLType(<span class="bold">&#39;&lt;Date&gt;2002-11-04&lt;/Date&gt;&#39;</span>) AS &#34;p2&#34;
               RETURNING CONTENT)
      WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                      PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLQuery(&#39;$p/PurchaseOrder/Actions/Action[1]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/ACTIONS/ACTION[1]&#39;PASSINGPO.OBJECT_VALUE
-------------------------------------------------------------------
&lt;Action&gt;
  &lt;User&gt;KPARTNER&lt;/User&gt;
  <span class="bold">&lt;Date&gt;2002-11-04&lt;/Date&gt;</span>
&lt;/Action&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4307"></a><a id="ADXDB6086"></a>
<div class="props_rev_3"><a id="GUID-63312C36-9A69-4ACD-BC9D-EC433A0C2D53"></a>
<h3 id="ADXDB-GUID-63312C36-9A69-4ACD-BC9D-EC433A0C2D53" class="sect3"><span class="enumeration_section">5.6.4</span> Deleting XML Nodes</h3>
<div>
<p>An example uses XQuery Update to delete XML nodes.</p>
<div class="section">
<p><a href="xdb04cre.htm#GUID-63312C36-9A69-4ACD-BC9D-EC433A0C2D53__CACHEAHD">Example 5-39</a> deletes the <code>LineItem</code> element whose <code>ItemNumber</code> attribute has value <code>222</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-63312C36-9A69-4ACD-BC9D-EC433A0C2D53__CACHEAHD">
<p class="titleinexample">Example 5-39 Deleting an Element</p>
<pre dir="ltr">SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[@ItemNumber=222]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[@ITEMNUMBER=222]&#39;PASSINGPO
------------------------------------------------------------------------
&lt;LineItem ItemNumber=&#34;222&#34;&gt;
  &lt;Description&gt;The Harder They Come&lt;/Description&gt;
  &lt;Part Id=&#34;953562951413&#34; UnitPrice=&#34;22.95&#34; Quantity=&#34;1&#34;/&gt;
&lt;/LineItem&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE = 
      XMLQuery(&#39;copy $i := $p modify
                  <span class="bold">delete nodes</span> $i/PurchaseOrder/LineItems/LineItem[@ItemNumber=&#34;222&#34;]
                return $i&#39;
               PASSING OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
      WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                      PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[@ItemNumber=222]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[@ITEMNUMBER=222]&#39;PASSINGPO
------------------------------------------------------------------------
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4288"></a><a id="ADXDB4287"></a>
<div class="props_rev_3"><a id="GUID-59A36DE7-3BB3-4F42-8441-0D0489097A92"></a>
<h3 id="ADXDB-GUID-59A36DE7-3BB3-4F42-8441-0D0489097A92" class="sect3"><span class="enumeration_section">5.6.5</span> Creating XML Views of Modified XML Data</h3>
<div>
<p>You can use XQuery Update to create new views of XML data.</p>
<div class="section">
<p><a href="xdb04cre.htm#GUID-59A36DE7-3BB3-4F42-8441-0D0489097A92__CHDFBHBF">Example 5-40</a> creates a view of table <code>purchaseorder</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-59A36DE7-3BB3-4F42-8441-0D0489097A92__CHDFBHBF">
<p class="titleinexample">Example 5-40 Creating a View Using Updated XML Data</p>
<pre dir="ltr">CREATE OR REPLACE VIEW purchaseorder_summary OF XMLType AS
  SELECT XMLQuery(&#39;copy $i := $p1 modify
                     ((for $j in $i/PurchaseOrder/Actions
                       return replace value of node $j with <span class="bold">()</span>),
                      (for $j in $i/PurchaseOrder/ShippingInstructions
                       return replace value of node $j with <span class="bold">()</span>),
                      (for $j in $i/PurchaseOrder/LineItems
                       return replace value of node $j with <span class="bold">()</span>))
                   return $i&#39;
                  PASSING OBJECT_VALUE AS &#34;p1&#34; RETURNING CONTENT)
    FROM purchaseorder p;

SELECT OBJECT_VALUE FROM purchaseorder_summary
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;DAUSTIN-20021009123335811PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);
 
OBJECT_VALUE
---------------------------------------------------------------------------
&lt;PurchaseOrder
    xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
    xsi:noNamespaceSchemaLocation=
      &#34;http://localhost:8080/source/schemas/poSource/xsd/purchaseOrder.xsd&#34;&gt;
  &lt;Reference&gt;DAUSTIN-20021009123335811PDT&lt;/Reference&gt;
  <span class="bold">&lt;Actions/&gt;</span>
  &lt;Reject/&gt;
  &lt;Requestor&gt;David L. Austin&lt;/Requestor&gt;
  &lt;User&gt;DAUSTIN&lt;/User&gt;
  &lt;CostCenter&gt;S30&lt;/CostCenter&gt;
  <span class="bold">&lt;ShippingInstructions/&gt;</span>
  &lt;SpecialInstructions&gt;Courier&lt;/SpecialInstructions&gt;
  <span class="bold">&lt;LineItems/&gt;</span>
&lt;/PurchaseOrder&gt;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB5142"></a>
<div class="props_rev_3"><a id="GUID-F72DC7CD-40A9-4F07-9350-B80D2AD1F4D0"></a>
<h2 id="ADXDB-GUID-F72DC7CD-40A9-4F07-9350-B80D2AD1F4D0" class="sect2"><span class="enumeration_section">5.7</span> Performance Tuning for XQuery</h2>
<div>
<p>A SQL query that involves XQuery expressions can often be automatically rewritten (optimized) in one or more ways. This optimization is referred to as <strong class="term">XML query rewrite</strong> or optimization. When this happens, the XQuery expression is, in effect, evaluated directly against the XML document without constructing a DOM in memory.</p>
<p>XPath expressions are a proper subset of XQuery expressions. <strong class="term">XPath rewrite</strong> is a subset of XML query rewrite that involves rewriting queries that involve XPath expressions.</p>
<p>XPath rewrite includes all of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Single-pass streaming of <code>XMLType</code> data stored as binary XML &ndash; A set of XPath expressions is evaluated in a single scan of the data.</p>
</li>
<li>
<p><code>XMLIndex</code> optimizations &ndash; A SQL statement that uses an XPath expression is rewritten to an equivalent SQL statement that does not use it but which instead references the relational <code>XMLIndex</code> tables. The rewritten SQL statement can also make use of any B-tree indexes on the underlying <code>XMLIndex</code> tables.</p>
</li>
<li>
<p>Optimizations for <code>XMLType</code> data stored object-relationally and for <code>XMLType</code> views &ndash; A SQL statement that uses an XPath expression is rewritten to an equivalent SQL statement that does not use it but which instead references the object-relational or relational data structures that underly the <code>XMLType</code> data. The rewritten SQL statement can also make use of any B-tree indexes on the underlying data structures. This can take place for both queries and update operations.</p>
</li>
</ul>
<p>Just as query tuning can improve SQL performance, so it can improve XQuery performance. You tune XQuery performance by choosing appropriate XML storage models and indexes.</p>
<p>As with database queries generally, you determine whether tuning is required by examining the execution plan for a query. If the plan is not optimal, then consult the following documentation for specific tuning information:</p>
<ul style="list-style-type: disc;">
<li>
<p>For object-relational storage: <a href="xdb_rewrite.htm#GUID-35551023-CCAC-477B-8BBF-CD0E0B44C962" title="For XMLType data stored object-relationally, queries involving XPath expression arguments to various SQL functions can often be automatically rewritten to queries against the underlying SQL tables, which are highly optimized.">XPath Rewrite for Object-Relational Storage</a></p>
</li>
<li>
<p>For binary XML storage: <a href="xdb_indexing.htm#GUID-FE16BE28-035C-49EE-9683-6ED37876C3FC" title="You can create indexes on your XML data, to focus on particular parts of it that you query often and thus improve performance. There are various ways that you can index XMLType data, whether it is XML schema-based or non-schema-based, and regardless of the XMLType storage model you use.">Indexes for XMLType Data</a></p>
</li>
</ul>
<p>In addition, be aware that the following expressions can be expensive to process, so they might add performance overhead when processing large volumes of data:</p>
<ul style="list-style-type: disc;">
<li>
<p>SQL expressions that use the following <span class="italic">deprecated</span> Oracle SQL functions, which accept XPath expression arguments:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>appendChildXML</code> (use <code>insertChildXMLafter</code> instead)</p>
</li>
<li>
<p><code>insertXMLafter</code> (use <code>insertChildXMLafter</code> instead)</p>
</li>
<li>
<p><code>insertXMLbefore</code> (use <code>insertChildXMLbefore</code> instead)</p>
</li>
</ul>
</li>
<li>
<p>XQuery expressions that use the following axes (use forward and descendent axes instead):</p>
<ul style="list-style-type: disc;">
<li>
<p><code>ancestor</code></p>
</li>
<li>
<p><code>ancestor-or-self</code></p>
</li>
<li>
<p><code>descendant-or-self</code></p>
</li>
<li>
<p><code>following</code></p>
</li>
<li>
<p><code>following-sibling</code></p>
</li>
<li>
<p><code>namespace</code></p>
</li>
<li>
<p><code>parent</code></p>
</li>
<li>
<p><code>preceding</code></p>
</li>
<li>
<p><code>preceding-sibling</code></p>
</li>
</ul>
</li>
<li>
<p>XQuery expressions that involve node identity (for example, using the order-comparison operators <code>&lt;&lt;</code> and <code>&gt;&gt;</code>)</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-F72DC7CD-40A9-4F07-9350-B80D2AD1F4D0__GUID-8C1C559A-51FA-4F80-AE3A-CAC97834640C">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb_xquery.htm#GUID-2D63B8EA-DC49-409F-B5DF-34A679AB2A99" title="Oracle XML&nbsp;DB support for the XQuery language includes SQL support and support for XQuery functions and operators.">Oracle XML&nbsp;DB Support for XQuery</a>&#34;</span></p>
</div>
<p>The following sections present the execution plans for some of the examples shown in <a href="xdb_xquery.htm#GUID-4F83A835-C94B-4D62-999B-111AB5E8A8F1" title="The XQuery language is one of the main ways that you interact with XML data in Oracle XML&nbsp;DB. Support for the language includes SQL*Plus commandXQUERY and SQL/XML functions XMLQuery, XMLTable, XMLExists, and XMLCast.">XQuery and Oracle XML&nbsp;DB</a>, to indicate how they are executed.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb04cre.htm#GUID-34E9F91A-1213-4142-B06F-91B11FD189B1" title="Use of SQL/XML functions XMLQuery and XMLTable over relational data can be optimized.">XQuery Optimization over Relational Data</a>&#34;</span>: examples with XQuery expressions that target XML data created on the fly using <code>fn:collection</code> together with URI scheme <code>oradb</code>.</p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb04cre.htm#GUID-B34F476B-5961-4C4B-9076-454C79D7B583" title="Use of SQL/XML functions XMLQuery and XMLTable XML Schema-based data can be optimized.">XQuery Optimization over XML Schema-Based XMLType Data</a>&#34;</span>: examples with XQuery expressions that target an XML schema-based <code>XMLType</code> table stored object-relationally</p>
</li>
</ul>
</div>
<a id="ADXDB5143"></a>
<div class="props_rev_3"><a id="GUID-A77387EF-BDEF-4013-9E24-BDEA2F9D08FE"></a>
<h3 id="ADXDB-GUID-A77387EF-BDEF-4013-9E24-BDEA2F9D08FE" class="sect3"><span class="enumeration_section">5.7.1</span> Rule-Based and Cost-Based XQuery Optimization</h3>
<div>
<p>Several competing optimization possibilities can exist for queries with XQuery expressions, depending on various factors such as the <code>XMLType</code> storage model and indexing that are used.</p>
<p>By default, Oracle XML&nbsp;DB follows a prioritized set of rules to determine which of the possible optimizations should be used for any given query and context. This behavior is referred to as <strong class="term">rule-based</strong> XML query rewrite.</p>
<p>Alternatively, Oracle XML&nbsp;DB can use <strong class="term">cost-based</strong> XML query rewrite. In this mode, Oracle XML&nbsp;DB estimates the performance of the various XML optimization possibilities for a given query and chooses the combination that is expected to be most performant.</p>
<p>You can impose cost-based optimization for a given SQL statement by using the optimizer hint <code>/*+ COST_XML_QUERY_REWRITE */</code>.</p>
</div>
</div>
<a id="ADXDB5145"></a><a id="ADXDB5146"></a><a id="ADXDB5144"></a>
<div class="props_rev_3"><a id="GUID-34E9F91A-1213-4142-B06F-91B11FD189B1"></a>
<h3 id="ADXDB-GUID-34E9F91A-1213-4142-B06F-91B11FD189B1" class="sect3"><span class="enumeration_section">5.7.2</span> XQuery Optimization over Relational Data</h3>
<div>
<p>Use of SQL/XML functions <code>XMLQuery</code> and <code>XMLTable</code> over relational data can be optimized.</p>
<p><a href="xdb04cre.htm#GUID-34E9F91A-1213-4142-B06F-91B11FD189B1__CBAIJAAD">Example 5-41</a> shows the optimization of <code>XMLQuery</code> over relational data accessed as XML. <a href="xdb04cre.htm#GUID-34E9F91A-1213-4142-B06F-91B11FD189B1__CBAJFIBF">Example 5-42</a> shows the optimization of <code>XMLTable</code> in the same context.</p>
<div class="example" id="GUID-34E9F91A-1213-4142-B06F-91B11FD189B1__CBAIJAAD">
<p class="titleinexample">Example 5-41 Optimization of XMLQuery over Relational Data</p>
<p>Here again is the query of <a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAJHHJD">Example 5-6</a>, together with its execution plan, which shows that the query has been optimized.</p>
<pre dir="ltr">SELECT XMLQuery(
         &#39;for $i in fn:collection(&#34;oradb:/OE/WAREHOUSES&#34;)/ROW
          return &lt;Warehouse id=&#34;{$i/WAREHOUSE_ID}&#34;&gt;
                   &lt;Location&gt;
                     {for $j in fn:collection(&#34;oradb:/HR/LOCATIONS&#34;)/ROW
                      where $j/LOCATION_ID eq $i/LOCATION_ID 
                      return ($j/STREET_ADDRESS, $j/CITY, $j/STATE_PROVINCE)}
                   &lt;/Location&gt;    
                 &lt;/Warehouse&gt;&#39;
         RETURNING CONTENT) FROM DUAL;
</pre>
<pre dir="ltr">PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------
Plan hash value: 3341889589

-------------------------------------------------------------------------------------------
| Id  | Operation                    | Name       | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |            |     1 |       |     2   (0)| 00:00:01 |
|   1 |  SORT AGGREGATE              |            |     1 |    41 |            |          |
|   2 |   <span class="bold">TABLE ACCESS BY INDEX ROWID</span>| <span class="bold">LOCATIONS</span>  |     1 |    41 |     1   (0)| 00:00:01 |
|*  3 |    <span class="bold">INDEX UNIQUE SCAN</span>         | <span class="bold">LOC_ID_PK</span>  |     1 |       |     0   (0)| 00:00:01 |
|   4 |  SORT AGGREGATE              |            |     1 |     6 |            |          |
|   5 |   TABLE ACCESS FULL          | WAREHOUSES |     9 |    54 |     2   (0)| 00:00:01 |
|   6 |  FAST DUAL                   |            |     1 |       |     2   (0)| 00:00:01 |
-------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   3 - access(&#34;LOCATION_ID&#34;=:B1)
 
18 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-34E9F91A-1213-4142-B06F-91B11FD189B1__CBAJFIBF">
<p class="titleinexample">Example 5-42 Optimization of XMLTable over Relational Data</p>
<p>Here again is the query of <a href="xdb04cre.htm#GUID-E62C830B-F3FB-4381-9F74-BF5F2C417CD0__CBAJEGFH">Example 5-7</a>, together with its execution plan, which shows that the query has been optimized.</p>
<pre dir="ltr">SELECT * 
  FROM XMLTable(
         &#39;for $i in fn:collection(&#34;oradb:/OE/WAREHOUSES&#34;)/ROW
          return &lt;Warehouse id=&#34;{$i/WAREHOUSE_ID}&#34;&gt;
                   &lt;Location&gt;
                     {for $j in fn:collection(&#34;oradb:/HR/LOCATIONS&#34;)/ROW
                      where $j/LOCATION_ID eq $i/LOCATION_ID 
                      return ($j/STREET_ADDRESS, $j/CITY, $j/STATE_PROVINCE)}
                   &lt;/Location&gt;
                 &lt;/Warehouse&gt;&#39;);
</pre>
<pre dir="ltr">PLAN_TABLE_OUTPUT
-------------------------------------------------------------------------------------------
Plan hash value: 1021775546
 
-------------------------------------------------------------------------------------------
| Id  | Operation                    | Name       | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |            |     9 |    54 |     2   (0)| 00:00:01 |
|   1 |  SORT AGGREGATE              |            |     1 |    41 |            |          |
|   2 |   <span class="bold">TABLE ACCESS BY INDEX ROWID</span>| <span class="bold">LOCATIONS</span>  |     1 |    41 |     1   (0)| 00:00:01 |
|*  3 |    <span class="bold">INDEX UNIQUE SCAN</span>         | <span class="bold">LOC_ID_PK</span>  |     1 |       |     0   (0)| 00:00:01 |
|   4 |  TABLE ACCESS FULL           | WAREHOUSES |     9 |    54 |     2   (0)| 00:00:01 |
-------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   3 - access(&#34;LOCATION_ID&#34;=:B1)
 
16 rows selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5148"></a><a id="ADXDB5149"></a><a id="ADXDB5147"></a>
<div class="props_rev_3"><a id="GUID-B34F476B-5961-4C4B-9076-454C79D7B583"></a>
<h3 id="ADXDB-GUID-B34F476B-5961-4C4B-9076-454C79D7B583" class="sect3"><span class="enumeration_section">5.7.3</span> XQuery Optimization over XML Schema-Based XMLType Data</h3>
<div>
<p>Use of SQL/XML functions <code>XMLQuery</code> and <code>XMLTable</code> XML Schema-based data can be optimized.</p>
<p><a href="xdb04cre.htm#GUID-B34F476B-5961-4C4B-9076-454C79D7B583__CBAFEHBC">Example 5-43</a> shows the optimization of <code>XMLQuery</code> over an XML schema-based <code>XMLType</code> table. <a href="xdb04cre.htm#GUID-B34F476B-5961-4C4B-9076-454C79D7B583__CBABFDJG">Example 5-44</a> shows the optimization of <code>XMLTable</code> in the same context.</p>
<div class="example" id="GUID-B34F476B-5961-4C4B-9076-454C79D7B583__CBAFEHBC">
<p class="titleinexample">Example 5-43 Optimization of XMLQuery with Schema-Based XMLType Data</p>
<p>Here again is the query of <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBAJIBCD">Example 5-10</a>, together with its execution plan, which shows that the query has been optimized.</p>
<pre dir="ltr">SELECT XMLQuery(&#39;for $i in /PurchaseOrder
                 where $i/CostCenter eq &#34;<span class="bold">A10</span>&#34;
                   and $i/User eq &#34;<span class="bold">SMCCAIN</span>&#34;
                 return &lt;A10po pono=&#34;{$i/Reference}&#34;/&gt;&#39;
                PASSING OBJECT_VALUE
                RETURNING CONTENT)
  FROM purchaseorder;
 
</pre>
<pre dir="ltr">PLAN_TABLE_OUTPUT
-------------------------------------------------------------------------------------
Plan hash value: 3611789148
 
-------------------------------------------------------------------------------------
| Id  | Operation           | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT    |               |     1 |   530 |     5   (0)| 00:00:01 |
|   1 |  SORT AGGREGATE     |               |     1 |       |            |          |
|*  2 |   FILTER            |               |       |       |            |          |
|   3 |    FAST DUAL        |               |     1 |       |     2   (0)| 00:00:01 |
|*  4 |    TABLE ACCESS FULL| PURCHASEORDER |     1 |   530 |     5   (0)| 00:00:01 |
-------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   2 - filter(:B1=&#39;<span class="bold">SMCCAIN</span>&#39; AND :B2=&#39;<span class="bold">A10</span>&#39;)
   4 - filter(SYS_CHECKACL(&#34;ACLOID&#34;,&#34;OWNERID&#34;,xmltype(&#39;&lt;privilege
              xmlns=&#34;http://xmlns.oracle.com/xdb/acl.xsd&#34;
              xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
              xsi:schemaLocation=&#34;http://xmlns.oracle.com/xdb/acl.xsd
              http://xmlns.oracle.com/xdb/acl.xsd DAV:http://xmlns.oracle.com/xdb/dav.xsd&#34;&gt;
              &lt;read-properties/&gt;&lt;read-contents/&gt;&lt;/privilege&gt;&#39;))=1)
 
22 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-B34F476B-5961-4C4B-9076-454C79D7B583__CBABFDJG">
<p class="titleinexample">Example 5-44 Optimization of XMLTable with Schema-Based XMLType Data</p>
<p>Here again is the query of <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBACIIDC">Example 5-14</a>, together with its execution plan, which shows that the query has been optimized. The XQuery result is never materialized. Instead, the underlying storage columns for the XML collection element <code>LineItem</code> are used to generate the overall result set.</p>
<pre dir="ltr">SELECT lines.lineitem, lines.description, lines.partid,
       lines.unitprice, lines.quantity
  FROM purchaseorder,
       XMLTable(&#39;for $i in /PurchaseOrder/LineItems/LineItem
                 where $i/@ItemNumber &gt;= 8
                   and $i/Part/@UnitPrice &gt; 50
                   and $i/Part/@Quantity &gt; 2
                 return $i&#39;
                PASSING OBJECT_VALUE
                COLUMNS lineitem    NUMBER       PATH &#39;@ItemNumber&#39;,
                        description VARCHAR2(30) PATH &#39;Description&#39;,
                        partid      NUMBER       PATH &#39;Part/@Id&#39;,
                        unitprice   NUMBER       PATH &#39;Part/@UnitPrice&#39;,
                        quantity    NUMBER       PATH &#39;Part/@Quantity&#39;) lines;
 
</pre>
<pre dir="ltr">-----------------------------------------------------------------------------------------------
| Id  | Operation                    | Name           | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |                |     4 |   384 |     7   (0)| 00:00:01 |
|   1 |  NESTED LOOPS                |                |       |       |            |          |
|   2 |   NESTED LOOPS               |                |     4 |   384 |     7   (0)| 00:00:01 |
|*  3 |    <span class="bold">TABLE ACCESS FULL</span>         | PURCHASEORDER  |     1 |    37 |     5   (0)| 00:00:01 |
|*  4 |    <span class="bold">INDEX RANGE SCAN</span>          | SYS_C005478    |    17 |       |     1   (0)| 00:00:01 |
|*  5 |   TABLE ACCESS BY INDEX ROWID| LINEITEM_TABLE |     3 |   177 |     2   (0)| 00:00:01 |
-----------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   3 - filter(SYS_CHECKACL(&#34;ACLOID&#34;,&#34;OWNERID&#34;,xmltype(&#39;&lt;privilege
              xmlns=&#34;http://xmlns.oracle.com/xdb/acl.xsd&#34;
              xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
              xsi:schemaLocation=&#34;http://xmlns.oracle.com/xdb/acl.xsd
              http://xmlns.oracle.com/xdb/acl.xsd
              DAV:http://xmlns.oracle.com/xdb/dav.xsd&#34;&gt;&lt;read-prop
              erties/&gt;&lt;read-contents/&gt;&lt;/privilege&gt;&#39;))=1)
   4 - access(&#34;NESTED_TABLE_ID&#34;=&#34;PURCHASEORDER&#34;.&#34;SYS_NC0003400035$&#34;)
   5 - filter(&#34;SYS_NC00013$&#34;&gt;50 AND &#34;SYS_NC00012$&#34;&gt;2 AND &#34;ITEMNUMBER&#34;&gt;=8 AND
              &#34;SYS_NC_TYPEID$&#34; IS NOT NULL)
 
25 rows selected.
</pre>
<p>This example traverses table <code>oe.purchaseorder</code> completely. The <code>XMLTable</code> expression is evaluated for each purchase-order document. It is more efficient to have the <code>XMLTable</code> expression, not the <code>purchaseorder</code> table, drive the SQL-query execution.</p>
<p>Although the XQuery expression has been rewritten to relational expressions, you can improve this optimization by creating an <span class="italic">index</span> on the underlying relational data&thinsp;&mdash;&thinsp;you can optimize this query in the same way that you would optimize a purely SQL query. That is always the case with XQuery in Oracle XML&nbsp;DB: the optimization techniques you use are the same as those you use in SQL.</p>
<p>The <code>UnitPrice</code> attribute of collection element <code>LineItem</code> is an appropriate index target. The governing XML schema specifies that an ordered collection table (OCT) is used to store the <code>LineItem</code> elements.</p>
<p>However, the name of this OCT was generated by Oracle XML&nbsp;DB when the XML purchase-order documents were decomposed as XML schema-based data. Instead of using table <code>purchaseorder</code> from sample database schema <code>HR</code>, you could manually create a new <code>purchaseorder</code> table (in a different database schema) with the same properties and same data, but having OCTs with user-friendly names.</p>
<p>Assuming that this has been done, the following statement creates the appropriate index:</p>
<pre dir="ltr">CREATE INDEX unitprice_index ON lineitem_table(&#34;PART&#34;.&#34;UNITPRICE&#34;);
</pre>
<p>With this index defined, the query of <a href="xdb04cre.htm#GUID-1165391D-BA6A-460F-BA44-66AA4A1F6595__CBACIIDC">Example 5-14</a> results in the following execution plan, which shows that the <code>XMLTable</code> expression has driven the overall evaluation.</p>
<pre dir="ltr">PLAN_TABLE_OUTPUT
----------------------------------------------------------------------------------------
Plan hash value: 1578014525
 
----------------------------------------------------------------------------------------
| Id  | Operation          | Name              | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |                   |     3 |   624 |     8   (0)| 00:00:01 |
|   1 |  NESTED LOOPS      |                   |     3 |   624 |     8   (0)| 00:00:01 |
|*  2 |   <span class="bold">INDEX UNIQUE SCAN</span>| SYS_IOT_TOP_49323 |     3 |   564 |     5   (0)| 00:00:01 |
|*  3 |    <span class="bold">INDEX RANGE SCAN</span>| <span class="bold">UNITPRICE_INDEX</span>   |    20 |       |     2   (0)| 00:00:01 |
|*  4 |   <span class="bold">INDEX UNIQUE SCAN</span>| SYS_C004411       |     1 |       |     0   (0)| 00:00:01 |
----------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   2 - access(&#34;SYS_NC00013$&#34;&gt;50)
       filter(&#34;ITEMNUMBER&#34;&gt;=8 AND &#34;SYS_NC00012$&#34;&gt;2)
   3 - access(&#34;SYS_NC00013$&#34;&gt;50)
   4 - access(&#34;NESTED_TABLE_ID&#34;=&#34;PURCHASEORDER&#34;.&#34;SYS_NC0003400035$&#34;)
 
Note
-----
   - dynamic sampling used for this statement
 
23 rows selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4583"></a>
<div class="props_rev_3"><a id="GUID-F6E94E06-C4A3-4956-868C-E33BD34D3116"></a>
<h3 id="ADXDB-GUID-F6E94E06-C4A3-4956-868C-E33BD34D3116" class="sect3"><span class="enumeration_section">5.7.4</span> Diagnosis of XQuery Optimization: XMLOptimizationCheck</h3>
<div>
<p>You can examine an execution plan for your SQL code to determine whether XQuery optimization occurs or the plan is instead suboptimal.</p>
<p>In the latter case, a note such as the following appears immediately after the plan:</p>
<pre dir="ltr">Unoptimized XML construct detected (enable XMLOptimizationCheck
for more information)
</pre>
<p>You can also compare the execution plan output with the plan output that you see after you use the optimizer hint <code>NO_XML_QUERY_REWRITE</code>, which turns off XQuery optimization.</p>
<p>In addition, you can use the SQL*Plus <code>SET</code> command with system variable <code>XMLOptimizationCheck</code> to turn on an <strong class="term">XML diagnosability mode</strong> for SQL:</p>
<pre dir="ltr">SET XMLOptimizationCheck ON
</pre>
<p>When this mode is on, the plan of execution is automatically checked for XQuery optimization, and if the plan is suboptimal then an error is raised and diagnostic information is written to the trace file indicating which operators are not rewritten.</p>
<p>The main advantage of <code>XMLOptimizationCheck</code> is that it brings a potential problem to your attention immediately. For this reason, you might find it preferable to leave it turned on at all times. Then, if an application change or a database change for some reason prevents a SQL operation from rewriting, execution is stopped instead of performance being negatively impacted without your being aware of the cause.</p>
<div class="infobox-note" id="GUID-F6E94E06-C4A3-4956-868C-E33BD34D3116__GUID-F2D48C04-512C-4372-91CB-7E860A4FF04B">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>XMLOptimizationCheck</code> was not available prior to Oracle Database&nbsp;11g Release 2 (11.2.0.2). Users of older releases directly manipulated event 19201 to obtain XQuery optimization information.</p>
</li>
<li>
<p>OCI users can use <code>OCIStmtExecute</code> or event 19201. Only the event is available to Java users.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-F6E94E06-C4A3-4956-868C-E33BD34D3116__GUID-FF1CE6A3-1D65-4A09-81DD-DF6C24754779">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb_indexing.htm#GUID-572DB598-0A31-4143-889B-98D883211FC6" title="You can turn off the use of XMLIndex by using optimizer hint: /*+ NO_XML_QUERY_REWRITE */ or optimizer hint /*+ NO_XMLINDEX_REWRITE */.">Turning Off Use of XMLIndex</a>&#34;</span> for information about optimizer hint <code>NO_XML_QUERY_REWRITE</code></p>
</div>
</div>
</div>
<a id="ADXDB5809"></a>
<div class="props_rev_3"><a id="GUID-FC694A3C-A80C-4D44-BA9B-6C0596991273"></a>
<h3 id="ADXDB-GUID-FC694A3C-A80C-4D44-BA9B-6C0596991273" class="sect3"><span class="enumeration_section">5.7.5</span> Performance Improvement for fn:doc and fn:collection on Repository Data</h3>
<div>
<p>You can improve the performance of <code>fn:doc</code> and <code>fn:collection</code> queries over the Oracle XML&nbsp;DB Repository, by linking them to the actual database tables that hold the repository data being queried.</p>
<p>In Oracle XML&nbsp;DB, you can use XQuery functions <code>fn:doc</code> and <code>fn:collection</code> to reference documents and collections in Oracle XML&nbsp;DB Repository.</p>
<p>When repository XML data is stored object-relationally or as binary XML, queries that use <code>fn:doc</code> and <code>fn:collection</code> are evaluated functionally; that is, they are not optimized to access the underlying storage tables directly. To improve the performance of such queries, you must link them to the actual database tables that hold the repository data being queried. You can do that in either of the following ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>Join view <code>RESOURCE_VIEW</code> with the <code>XMLType</code> table that holds the data, and then use the Oracle SQL functions <code>equals_path</code> and <code>under_path</code> instead of the XQuery functions <code>fn:doc</code> and <code>fn:collection</code>, respectively. These SQL functions reference repository resources in a performant way.</p>
</li>
<li>
<p>Use the Oracle XQuery extension-expression pragma <code>ora:defaultTable</code>.</p>
</li>
</ul>
<p>Both methods have the same effect. Oracle recommends that you use the <code>ora:defaultTable</code> pragma because it lets you continue to use the XQuery standard functions <code>fn:doc</code> and <code>fn:collection</code> and it simplifies your code.</p>
<p>These two methods are illustrated in the examples of this section.</p>
</div>
<a id="ADXDB5810"></a><a id="ADXDB5811"></a><a id="ADXDB5998"></a>
<div class="props_rev_3"><a id="GUID-FA9E3BBC-AEB2-4F11-A721-B8C304F78DC5"></a>
<h4 id="ADXDB-GUID-FA9E3BBC-AEB2-4F11-A721-B8C304F78DC5" class="sect4"><span class="enumeration_section">5.7.5.1</span> Use EQUALS_PATH and UNDER_PATH Instead of fn:doc and fn:collection</h4>
<div>
<p>Using Oracle SQL functions <code>equals_path</code> and <code>under_path</code> instead of XQuery functions <code>fn:doc</code> and <code>fn:collection</code> can improve performance.</p>
<p>SQL function <code>equals_path</code> references a resource located at a specified repository path, and SQL function <code>under_path</code> references a resource located under a specified repository path. <a href="xdb04cre.htm#GUID-FA9E3BBC-AEB2-4F11-A721-B8C304F78DC5__BABIDGGE">Example 5-45</a> and <a href="xdb04cre.htm#GUID-FA9E3BBC-AEB2-4F11-A721-B8C304F78DC5__BABBIGDC">Example 5-46</a> illustrate this for functions <code>fn:doc</code> and <code>equals_path</code>; functions <code>fn:collection</code> and <code>under_path</code> are treated similarly.</p>
<div class="example" id="GUID-FA9E3BBC-AEB2-4F11-A721-B8C304F78DC5__BABIDGGE">
<p class="titleinexample">Example 5-45 Unoptimized Repository Query Using fn:doc</p>
<pre dir="ltr">SELECT XMLQuery(&#39;let $val :=
                     fn:doc(&#34;/home/OE/PurchaseOrders/2002/Sep/VJONES-20021009123337583PDT.xml&#34;)
                     /PurchaseOrder/LineItems/LineItem[@ItemNumber =19]
                 return $val&#39; RETURNING CONTENT)
  FROM DUAL;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-FA9E3BBC-AEB2-4F11-A721-B8C304F78DC5__BABBIGDC">
<p class="titleinexample">Example 5-46 Optimized Repository Query Using EQUALS_PATH</p>
<pre dir="ltr">SELECT XMLQuery(&#39;let $val := $DOC/PurchaseOrder/LineItems/LineItem[@ItemNumber = 19]
                 return $val&#39; PASSING OBJECT_VALUE AS &#34;DOC&#34; RETURNING CONTENT)
  FROM RESOURCE_VIEW rv, purchaseorder p
  WHERE ref(p) = XMLCast(XMLQuery(&#39;declare default element namespace 
                                   &#34;http://xmlns.oracle.com/xdb/XDBResource.xsd&#34;; (: :)
                                   fn:data<a id="fn_1" href="#fn_1" onclick="footdisplay(1,"><sup>Foot 1</sup></a>(/Resource/XMLRef)&#39; PASSING rv.RES RETURNING CONTENT)
                         AS REF XMLType)
    AND equals_path(rv.RES, &#39;/home/OE/PurchaseOrders/2002/Sep/VJONES-20021009123337583PDT.xml&#39;)
        = 1;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6000"></a><a id="ADXDB5999"></a>
<div class="props_rev_3"><a id="GUID-749BD49D-46E2-4B15-8B9E-1097D6952047"></a>
<h4 id="ADXDB-GUID-749BD49D-46E2-4B15-8B9E-1097D6952047" class="sect4"><span class="enumeration_section">5.7.5.2</span> Using Oracle XQuery Pragma ora:defaultTable</h4>
<div>
<p>You can use Oracle XQuery extension-expression pragma <code>ora:defaultTable</code> to improve the performance of querying repository data.</p>
<div class="section">
<p>Oracle XQuery extension-expression pragma <code>ora:defaultTable</code> lets you specify the default table used to store repository data that you query. The query is rewritten to automatically join the default table to view <code>RESOURCE_VIEW</code> and use Oracle SQL functions <code>equals_path</code> and <code>under_path</code> instead of XQuery functions <code>fn:doc</code> and <code>fn:collection</code>, respectively. The effect is thus the same as coding the query manually to use an explicit join and <code>equals_path</code> or <code>under_path</code>. <a href="xdb04cre.htm#GUID-749BD49D-46E2-4B15-8B9E-1097D6952047__BABFGFEJ">Example 5-47</a> illustrates this; the query is rewritten automatically to what is shown in <a href="xdb04cre.htm#GUID-FA9E3BBC-AEB2-4F11-A721-B8C304F78DC5__BABBIGDC">Example 5-46</a>.</p>
<p>For clarity of scope Oracle recommends that you apply pragma <code>ora:defaultTable</code> directly to the relevant document or collection expression, <code>fn:doc</code> or <code>fn:collection</code>, rather than to a larger expression.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-749BD49D-46E2-4B15-8B9E-1097D6952047__BABFGFEJ">
<p class="titleinexample">Example 5-47 Repository Query Using Oracle XQuery Pragma ora:defaultTable</p>
<pre dir="ltr">SELECT XMLQuery(&#39;for $doc in <span class="bold">(#ora:defaultTable PURCHASEORDER #)</span>
                             {fn:doc(&#34;/home/OE/PurchaseOrders/2002/Sep/VJONES-20021009123337583PDT.xml&#34;)}
                   let $val := $doc/PurchaseOrder/LineItems/LineItem[@ItemNumber = 19]
                     return $val}&#39;
                RETURNING CONTENT)
  FROM DUAL;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<hr/>
<br/>
<p style="text-decoration:underline">Footnote Legend</p>
Footnote&nbsp;1:
<p>XQuery function <code>fn:data</code> is used here to atomize its argument, in this case returning the <code>XMLRef</code> node&#39;s typed atomic value.</p>
<br/></div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3410">
<tr>
<td class="cellalignment3417">
<table class="cellalignment3415">
<tr>
<td class="cellalignment3414"><a href="xdb_xquery.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3414"><a href="xdb_indexing.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3419">
<table class="cellalignment3413">
<tr>
<td class="cellalignment3414"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3414"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3414"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3414"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3414"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>