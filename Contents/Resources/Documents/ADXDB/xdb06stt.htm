<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1606"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/XML%20Schema%20Storage%20and%20Query%3A%20Object-Relational%20Storage"></a><title>XML Schema Storage and Query: Object-Relational Storage</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="Advanced techniques for XML Schema-based data include using object-relational storage; annotating XML schemas; mapping Schema data types to SQL; using complexType extensions and restrictions; creating, specifying relational constraints on, and partitioning XML Schema-based data, storing XMLType data out of line, working with complex or large schemas, and debugging schema registration."/>
<meta name="keywords" content="ordered collection, definition, varray in a table, varray in a LOB, ordered collection table (OCT), OCT, index-organized tables, tables, index-organized, SQL object types, creating during XML schema registration, registering an XML schema, SQL object types, creating, default tables, default tables, creating, FTP, creating default tables, HTTP, positional descriptor (PD), PD (positional descriptor), naming SQL objects, annotations, XML schema, XML schema, annotations, DBMS_XMLSCHEMA_ANNOTATE PL/SQL package, PL/SQL packages, DBMS_XMLSCHEMA_ANNOTATE, columnProps attribute, xdb:columnProps attribute, attributes, xdb:columnProps, defaultTable attribute, xdb:defaultTable attribute, xdb:defaultTable, defaultTableSchema attribute (deprecated), xdb:defaultTableSchema attribute (deprecated), xdb:defaultTableSchema (deprecated), xdb:maintainDOM attribute, maintainDOM attribute, xdb:maintainDOM, xdb:maintainOrder attribute (deprecated), maintainOrder attribute (deprecated), xdb:maintainOrder (deprecated), xdb:SQLCollSchema attribute (deprecated), SQLCollSchema attribute (deprecated), xdb:SQLCollSchema (deprecated), xdb:SQLCollType attribute, SQLCollType attribute, xdb:SQLCollType, xdb:SQLInline attribute, SQLInline attribute, xdb:SQLInline, xdb:SQLName attribute, SQLName attribute, xdb:SQLName, xdb:SQLSchema attribute (deprecated), SQLSchema attribute (deprecated), xdb:SQLSchema (deprecated), xdb:SQLType attribute, SQLType attribute, xdb:SQLType, tableProps attribute, xdb:tableProps attribute, xdb:tableProps, mapUnboundedStringToLob attribute (deprecated), xdb:mapUnboundedStringToLob (deprecated), xdb:mapUnboundedStringToLob attribute (deprecated), xdb:storeVarrayAsTable attribute (deprecated), storeVarrayAsTable attribute (deprecated), xdb:storeVarrayAsTable (deprecated), querying to obtain, XML Schema data types, mapping to SQL data types, mapping XML Schema data types to SQL data types, attribute XML Schema data types, mapping to SQL, element XML Schema data types, mapping, overriding using SQLType attribute, string XML Schema data types, numeric XML Schema data types, date and time XML Schema data types, primitive XML Schema data types, derived XML Schema data types, mapping to VARCHAR2 vs CLOB, complexType, mapping, XML Schema data types to SQL, mapping XML Schema complexType data types to SQL, collection attribute (SQL), object attributes, for collection (SQL), ordered collections in tables (OCTs), default storage of varray, Oracle XML DB restrictions and extensions, complexType declarations, handling inheritance, inheritance, XML schema, restrictions in complexTypes, inheritance in, complexType restrictions, simpleContent, mapping to object types, simpleContent to object types, creating an XMLType table, XML schema-based, for nested collections, NESTED_TABLE_ID pseudocolumn, SYS_NC_ARRAY_INDEX$ column, partitioning XMLType tables, equipartitioning of XMLType tables, constraints on XMLType data, unique constraint on parent element of an attribute, repetitive XML elements, complexType to SQL, out-of-line storage, out-of-line storage, storage, out of line, collections, collection, in out-of-line tables, cyclical dependencies, cyclical dependencies, XML schemas, circular dependencies, circular dependencies, handling cycles, recursive schema support, document-correlated recursive query, XML fragment, mapping to LOBs, LOBs, mapping XML fragments to, fragments, XML, fragments to LOBs, loading and retrieving large documents, loading, large documents with collections, retrieving large documents with collections, xdbcore-loadableunit-size configuration parameter, xdbcore-xobmem-bound configuration parameter, debugging, debugging, XML schema registration"/>
<meta name="dcterms.created" content="2016-12-08T13:53:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E41152-15"/>
<meta name="dcterms.isVersionOf" content="ADXDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="xdb05sto.htm" title="Previous" type="text/html"/>
<link rel="Next" href="xdb_rewrite.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41152-15.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-B0C1A0B0-2DD1-491A-8CE1-1F857FD267B7"></a> <span id="PAGE" style="display:none;">30/61</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='xdb06stt'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="ADXDB0700"></a>
<h1 id="ADXDB-GUID-B0C1A0B0-2DD1-491A-8CE1-1F857FD267B7" class="sect1"><span class="enumeration_chapter">18</span> XML Schema Storage and Query: Object-Relational Storage</h1>
<div>
<p>Advanced techniques for XML Schema-based data include using object-relational storage; annotating XML schemas; mapping Schema data types to SQL; using <code>complexType</code> extensions and restrictions; creating, specifying relational constraints on, and partitioning XML Schema-based data, storing <code>XMLType</code> data out of line, working with complex or large schemas, and debugging schema registration.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb06stt.htm#GUID-79213AD7-C940-400B-BC11-5E401A1520A6" title="Object-relational storage of XML documents is based on decomposing the document content into a set of SQL objects. These SQL objects are based on the SQL 1999 Type framework. When an XML schema is registered with Oracle XML&nbsp;DB, the required SQL type definitions are automatically generated from the schema.">Object-Relational Storage of XML Documents</a></p>
</li>
<li>
<p><a href="xdb06stt.htm#GUID-F7E43D3A-67D8-432E-833A-DE0EA4CFCE7A" title="You can annotate XML schemas to influence the objects and tables that are generated by the XML schema registration process. You do this by adding Oracle-specific attributes to complexType, element, and attribute definitions that are declared by the XML schema.">Oracle XML Schema Annotations</a></p>
</li>
<li>
<p><a href="xdb06stt.htm#GUID-844D686D-D95A-4C5B-8624-71BABDBF1EF5" title="You use PL/SQL package DBMS_XMLSCHEMA to map data types for XML Schema attributes and elements to SQL data types.">How to Map XML Schema Data Types to SQL Data Types</a></p>
</li>
<li>
<p><a href="xdb06stt.htm#GUID-9E0CF72F-9E08-4CB8-ABBC-66F8ECEF949B" title="In XML Schema, complexType values are declared based on complexContent and simpleContent. Oracle XML&nbsp;DB defines various extensions and restrictions to complexType.">complexType Extensions and Restrictions in Oracle XML&nbsp;DB</a></p>
</li>
<li>
<p><a href="xdb06stt.htm#GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71" title="After an XML schema has been registered with Oracle XML&nbsp;DB, you can reference it when you define XMLType tables or columns.">Creating XML Schema-Based XMLType Columns and Tables</a></p>
</li>
<li>
<p><a href="xdb06stt.htm#GUID-8713E2AD-0D5F-4076-A2DE-BB0ECEFBFEA8" title="When you partition an object-relational XMLType table or a table with an XMLType column that is stored object-relationally and you use list, range, or hash partitioning, any ordered collection tables (OCTs) or out-of-line tables within the data are automatically partitioned accordingly, by default.">Overview of Partitioning XMLType Tables and Columns Stored Object-Relationally</a></p>
</li>
<li>
<p><a href="xdb06stt.htm#GUID-EEF1789B-F8B0-4371-96FB-40D0547060BA" title="For XMLType data stored object-relationally, you can specify typical relational constraints for elements and attributes that occur only once in an XML document.">Specification of Relational Constraints on XMLType Tables and Columns</a></p>
</li>
<li>
<p><a href="xdb06stt.htm#GUID-0EF2C8B6-927A-4F50-8126-47CD566A6B92" title="By default, when XMLType data is stored object-relationally a child element is mapped to an embedded SQL object attribute. Sometimes better performance can be obtained by storing some XMLType data out of line. Use XML schema annotation xdb:SQLInline to do this.">Out-Of-Line Storage of XMLType Data</a></p>
</li>
<li>
<p><a href="xdb06stt.htm#GUID-A9BDECE7-16AF-4CA4-96D5-5B03FA3E94CE" title="XML schemas can be complex. Examples of complex schemas include those that are recursive and those that contain circular or cyclical references. Working with complex or large XML schemas can be challenging and requires taking certain considerations into account.">Considerations for Working with Complex or Large XML Schemas</a></p>
</li>
<li>
<p><a href="xdb06stt.htm#GUID-D17B71BD-2AC2-4EC6-ADE3-8FE626FEC156" title="For XML data stored object-relationally, you can monitor the object types and tables created during XML schema registration by setting the event 31098 before invoking PL/SQL procedure DBMS_XMLSCHEMA.registerSchema.">Debugging XML Schema Registration for XML Data Stored Object-Relationally</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-B0C1A0B0-2DD1-491A-8CE1-1F857FD267B7__GUID-E7F26298-25E2-4630-AABB-A34E1ED9E534">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb05sto.htm#GUID-C09824C1-6B02-4556-A265-B1749DEE8DE1" title="XML Schema is a standard for describing the content and structure of XML documents. You can register, update, and delete an XML schema used with Oracle XML&nbsp;DB. You can define storage structures to use for your XML schema-based data and map XML Schema data types to SQL data types.">XML Schema Storage and Query: Basic</a> for basic information about using XML Schema with Oracle XML&nbsp;DB</p>
</li>
<li>
<p><a href="xdb_rewrite.htm#GUID-35551023-CCAC-477B-8BBF-CD0E0B44C962" title="For XMLType data stored object-relationally, queries involving XPath expression arguments to various SQL functions can often be automatically rewritten to queries against the underlying SQL tables, which are highly optimized.">XPath Rewrite for Object-Relational Storage</a> for information about the optimization of XPath expressions in Oracle XML&nbsp;DB</p>
</li>
<li>
<p><a href="xdb07evo.htm#GUID-F2E920B3-C6D7-428B-9E75-5CE9C21F9B5F" title="You can use XML schema evolution to update your XML schema after you have registered it with Oracle XML&nbsp;DB.">XML Schema Evolution</a> for information about updating an XML schema after you have registered it with Oracle XML&nbsp;DB</p>
</li>
<li>
<p><a href="http://www.w3.org/TR/xmlschema-0/" target="_blank"><code>http://www.w3.org/TR/xmlschema-0/</code></a> for an introduction to XML Schema</p>
</li>
</ul>
</div>
</div>
<a id="ADXDB6305"></a>
<div class="props_rev_3"><a id="GUID-79213AD7-C940-400B-BC11-5E401A1520A6"></a>
<h2 id="ADXDB-GUID-79213AD7-C940-400B-BC11-5E401A1520A6" class="sect2"><span class="enumeration_section">18.1</span> Object-Relational Storage of XML Documents</h2>
<div>
<p>Object-relational storage of XML documents is based on decomposing the document content into a set of SQL objects. These SQL objects are based on the SQL 1999 Type framework. When an XML schema is registered with Oracle XML&nbsp;DB, the required SQL type definitions are automatically generated from the schema.</p>
<p>A SQL type definition is generated from each <code>complexType</code> defined by the XML schema. Each element or attribute defined by the <code>complexType</code> becomes a SQL attribute in the corresponding SQL type. Oracle XML&nbsp;DB automatically maps the 47 scalar data types defined by the XML Schema Recommendation to the 19 scalar data types supported by SQL. A varray type is generated for each element and this can occur multiple times.</p>
<p>The generated SQL types allow XML content that is compliant with the XML schema to be decomposed and stored in the database as a set of objects, without any loss of information. When an XML document is ingested, the constructs defined by the XML schema are mapped directly to the equivalent SQL types. This lets Oracle XML&nbsp;DB leverage the full power of Oracle Database when managing XML, and it can lead to significant reductions in the amount of space required to store the document. It can also reduce the amount of memory required to query and update XML content.</p>
</div>
<a id="ADXDB6306"></a>
<div class="props_rev_3"><a id="GUID-7118A992-449B-4306-8579-8EF1C5890995"></a>
<h3 id="ADXDB-GUID-7118A992-449B-4306-8579-8EF1C5890995" class="sect3"><span class="enumeration_section">18.1.1</span> How Collections Are Stored for Object-Relational XMLType Storage</h3>
<div>
<p>You can store an ordered collection as a varray in an ordered collection table (OCT), which can be either a heap-based table (recommended) or an index-organized table (IOT). You can store the actual data out of line by using varray entries that are <code>REF</code>s to the data.</p>
<p>When you register an XML schema for <code>XMLType</code> data that is stored object-relationally and you set registration parameter <code>GENTABLES</code> to <code>TRUE</code>, default tables are created automatically to store the associated XML instance documents.</p>
<p>Order is preserved among XML collection elements when they are stored. The result is an <strong class="term">ordered collection</strong>.<a id="fn_1" href="#fn_1" onclick="footdisplay(1,&#34;XML Schema annotation xdb:maintainOrder is deprecated, starting with Oracle Database 12c Release 1 (12.1.0.1). If you use xdb:maintainOrder = \&#34;false\&#34;, then an unordered collection is used instead of an ordered collection. Oracle recommends that you use ordered collections (xdb:maintainOrder = \&#34;true\&#34;) for XML data, to preserve document order. By default, attribute xdb:maintainOrder is true. &#34;)"><sup>Foot&nbsp;1</sup></a> You can store data in an ordered collection in these ways:</p>
<ul style="list-style-type: disc;">
<li>
<p><strong class="term">Varray in a table</strong>. Each element in the collection is mapped to a SQL object. The collection of SQL objects is stored as a set of rows in a table, called an <strong class="term">ordered collection table</strong> (<strong class="term">OCT</strong>). By default, all collections are stored in OCTs.</p>
<p>This default behavior corresponds to the XML schema annotation <code>xdb:storeVarrayAsTable = &#34;true&#34;</code> (default value).<a id="GUID-7118A992-449B-4306-8579-8EF1C5890995__CEGJIDEJ" href="#GUID-7118A992-449B-4306-8579-8EF1C5890995__CEGJIDEJ" onclick="footdisplay(2,&#34;XML Schema annotation xdb:storeVarrayAsTable is deprecated, starting with Oracle Database 12c Release 1 (12.1.0.1). &#34;)"><sup>Foot&nbsp;2</sup></a></p>
</li>
<li>
<p><strong class="term">Varray in a LOB (deprecated)</strong>. Each element in the collection is mapped to a SQL object. The entire collection of SQL objects is serialized as a varray and stored in a LOB column. To store a given collection as a varray in a LOB, use XML schema annotation <code>xdb:storeVarrayAsTable = &#34;false&#34;</code>.<a id="fnsrc_d87739e358" href="#fnsrc_d87739e358" onclick="footdisplay(2,&#34;XML Schema annotation xdb:storeVarrayAsTable is deprecated, starting with Oracle Database 12c Release 1 (12.1.0.1). &#34;)"><sup>Footref&nbsp;2</sup></a></p>
</li>
</ul>
<p>You can also use out-of-line storage for an ordered collection. This corresponds to XML schema annotation <code>SQLInline = &#34;false&#34;</code>, and it means that a varray of <code>REF</code>s in the collection table (or the LOB) tracks the collection content, which is stored out of line.</p>
<p>There is no requirement to annotate an XML schema before using it. Oracle XML&nbsp;DB uses a set of default assumptions when processing an XML schema that contains no annotations.</p>
<p>If you do not supply any of the annotations mentioned in this section, then Oracle XML&nbsp;DB stores a collection as a <span class="italic">heap-based</span> OCT. You can force OCTs to be stored as <strong class="term">index-organized tables</strong> (<strong class="term">IOTs</strong>) instead, by passing <span class="bold"><code>REGISTER_NT_AS_IOT</code></span> in the <code>OPTIONS</code> parameter of <code>DBMS_XMLSCHEMA.registerSchema</code>.</p>
<div class="infobox-note" id="GUID-7118A992-449B-4306-8579-8EF1C5890995__GUID-878A7467-2DAF-4FAD-9D46-D5F1B7D38DA0">
<p class="notep1">Note:</p>
<p>In releases prior to Oracle Database&nbsp;11g Release 1:</p>
<ul style="list-style-type: disc;">
<li>
<p>OCTs were stored as IOTs by default.</p>
</li>
<li>
<p>The default value for <code>xdb:storeVarrayAsTable</code> was <code>false</code>.</p>
</li>
</ul>
</div>
<div class="infobox-note" id="GUID-7118A992-449B-4306-8579-8EF1C5890995__GUID-D6CFE58B-C5E3-4665-BFB2-26FD7F1746E7">
<p class="notep1">Note:</p>
<p>Use heap-based OCTs, <span class="italic">not</span> IOTs, unless you are explicitly advised by Oracle to use IOTs. IOT storage has these significant limitations:</p>
<ul style="list-style-type: disc;">
<li>
<p>It disables partitioning of the collection tables (IOTs).</p>
</li>
<li>
<p>It supports only document-level Oracle Text indexes. It disables indexes that are element-specific or attribute-specific.</p>
</li>
</ul>
<p>See also: <a href="app_depr_otext.htm#GUID-1B838D2B-DD94-480A-8D3D-53E0204A2282" title="Oracle-specific full-text search over XML data is described, including how to use Oracle SQL function contains and Oracle XPath function ora:contains.">Full-Text Search over XML Data Without XQuery</a> for information about using Oracle Text with XML data.</p>
</div>
<div class="infoboxnotealso" id="GUID-7118A992-449B-4306-8579-8EF1C5890995__GUID-12B95B23-26D0-4A24-B9D5-F012B912F7E5">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb06stt.htm#GUID-79213AD7-C940-400B-BC11-5E401A1520A6" title="Object-relational storage of XML documents is based on decomposing the document content into a set of SQL objects. These SQL objects are based on the SQL 1999 Type framework. When an XML schema is registered with Oracle XML&nbsp;DB, the required SQL type definitions are automatically generated from the schema.">Object-Relational Storage of XML Documents</a>&#34;</span> for information about collection storage when you create <code>XMLType</code> tables and columns manually using object-relational storage</p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb06stt.htm#GUID-AC221997-9F02-423E-9F39-BA02046763B5" title="Set XML schema annotation xdb:SQLInline to false to store an XML fragment out of line. The element is mapped to a SQL object type with an embedded REF attribute, which points to another XMLType instance that is stored out of line and that corresponds to the XML fragment.">Setting Annotation Attribute xdb:SQLInline to false for Out-Of-Line Storage</a>&#34;</span></p>
</li>
<li>
<p><a href="xdb06stt.htm#GUID-8713E2AD-0D5F-4076-A2DE-BB0ECEFBFEA8" title="When you partition an object-relational XMLType table or a table with an XMLType column that is stored object-relationally and you use list, range, or hash partitioning, any ordered collection tables (OCTs) or out-of-line tables within the data are automatically partitioned accordingly, by default.">Overview of Partitioning XMLType Tables and Columns Stored Object-Relationally</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDB4465"></a><a id="ADXDB4464"></a>
<div class="props_rev_3"><a id="GUID-9F4054FB-2277-4945-8A7C-FC0649AB2790"></a>
<h3 id="ADXDB-GUID-9F4054FB-2277-4945-8A7C-FC0649AB2790" class="sect3"><span class="enumeration_section">18.1.2</span> SQL Types Created during XML Schema Registration for Object-Relational Storage</h3>
<div>
<p>Use <code>TRUE</code> as the value of parameter <code>GENTYPES</code> when you register an XML schema for use with XML data stored object-relationally (<code>TRUE</code> is the default value). Oracle XML&nbsp;DB then creates the appropriate SQL object types that enable object-relational storage of conforming XML documents.</p>
<p>By default, all SQL object types are created in the database schema of the user who registers the XML schema. If annotation <code>xdb:defaultSchema</code> is used, then Oracle XML&nbsp;DB attempts to create the object type using the specified database schema. The current user must have the necessary privileges to create these object types.</p>
<p><a href="xdb06stt.htm#GUID-9F4054FB-2277-4945-8A7C-FC0649AB2790__CHDFCAFB">Example 18-1</a> shows the SQL object types that are created automatically when XML schema <code>purchaseOrder.xsd</code> is registered with Oracle XML&nbsp;DB.</p>
<div class="infobox-note" id="GUID-9F4054FB-2277-4945-8A7C-FC0649AB2790__GUID-E6485FBE-49DB-44AA-A84A-7886DD1C03A2">
<p class="notep1">Note:</p>
<p>By default, the names of the SQL object types and attributes are system-generated. This is the case in <a href="xdb06stt.htm#GUID-9F4054FB-2277-4945-8A7C-FC0649AB2790__CHDFCAFB">Example 18-1</a>. If the XML schema does not contain attribute <code>SQLName</code>, then the SQL name is derived from the XML name. You can use XML schema annotations to provide user-defined names (see <span class="q">&#34;<a href="xdb06stt.htm#GUID-F7E43D3A-67D8-432E-833A-DE0EA4CFCE7A" title="You can annotate XML schemas to influence the objects and tables that are generated by the XML schema registration process. You do this by adding Oracle-specific attributes to complexType, element, and attribute definitions that are declared by the XML schema.">Oracle XML Schema Annotations</a>&#34;</span> for details).</p>
</div>
<div class="example" id="GUID-9F4054FB-2277-4945-8A7C-FC0649AB2790__CHDFCAFB">
<p class="titleinexample">Example 18-1 SQL Object Types for Storing XMLType Tables</p>
<pre>DESCRIBE &#34;PurchaseOrderType1668_T&#34;
  
&#34;PurchaseOrderType1668_T&#34; is NOT FINAL
Name                 Null?  Type
-------------------- ------ -------------------------------
SYS_XDBPD$                  XDB.XDB$RAW_LIST_T
Reference                   VARCHAR2(30 CHAR)
Actions                     ActionsType1661_T
Reject                      RejectionType1660_T
Requestor                   VARCHAR2(128 CHAR)
User                        VARCHAR2(10 CHAR)
CostCenter                  VARCHAR2(4 CHAR)
ShippingInstructions        ShippingInstructionsTyp1659_T
SpecialInstructions         VARCHAR2(2048 CHAR)
LineItems                   LineItemsType1666_T
Notes                       VARCHAR2(4000 CHAR)
 
DESCRIBE &#34;LineItemsType1666_T&#34;
 
&#34;LineItemsType1666_T&#34; is NOT FINAL
Name                 Null? Type
-------------------- ----- -------------------------------
SYS_XDBPD$                 XDB.XDB$RAW_LIST_T
LineItem                   LineItem1667_COLL
 
DESCRIBE &#34;LineItem1667_COLL&#34;

&#34;LineItem1667_COLL&#34; VARRAY(2147483647) OF LineItemType1665_T
&#34;LineItemType1665_T&#34; is NOT FINAL
Name                Null? Type
------------------- ----- --------------------------------
SYS_XDBPD$                XDB.XDB$RAW_LIST_T
ItemNumber                NUMBER(38)
Description               VARCHAR2(256 CHAR)
Part                      PartType1664_T
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4467"></a><a id="ADXDB4466"></a>
<div class="props_rev_3"><a id="GUID-54A3CBE8-19BE-43BB-8979-7769116B6F53"></a>
<h3 id="ADXDB-GUID-54A3CBE8-19BE-43BB-8979-7769116B6F53" class="sect3"><span class="enumeration_section">18.1.3</span> Default Tables Created during XML Schema Registration</h3>
<div>
<p>You can create default tables as part of XML schema registration. Default tables are most useful when documents are inserted using APIs and protocols such as FTP and HTTP(S), which do not provide any table specification.</p>
<p>In such cases, the XML instance is inserted into the default table.</p>
<p><a href="xdb06stt.htm#GUID-54A3CBE8-19BE-43BB-8979-7769116B6F53__CEGGHHGE">Example 18-2</a> describes the default purchase-order table.</p>
<p>If you provide a value for attribute <code>xdb:defaultTable</code>, then the <code>XMLType</code> table is created with that name. Otherwise it is created with an internally generated name.</p>
<p>Any text specified using attributes <code>xdb:tableProps</code> and <code>xdb:columnProps</code> is appended to the generated <code>CREATE TABLE</code> statement.</p>
<div class="example" id="GUID-54A3CBE8-19BE-43BB-8979-7769116B6F53__CEGGHHGE">
<p class="titleinexample">Example 18-2 Default Table for Global Element PurchaseOrder</p>
<pre dir="ltr">DESCRIBE &#34;PurchaseOrder1669_TAB&#34;

Name                        Null? Type
--------------------------- ----- -----------------------
TABLE of
  SYS.XMLTYPE(
    XMLSchema &#34;http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd&#34;
    Element &#34;PurchaseOrder&#34;)
  STORAGE OBJECT-RELATIONAL TYPE &#34;PurchaseOrderType1668_T&#34;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6229"></a>
<div class="props_rev_3"><a id="GUID-75FCD51E-73B6-4CA6-BE6F-94553B73E9E0"></a>
<h3 id="ADXDB-GUID-75FCD51E-73B6-4CA6-BE6F-94553B73E9E0" class="sect3"><span class="enumeration_section">18.1.4</span> Do Not Use Internal Constructs Generated during XML Schema Registration</h3>
<div>
<p>In general, the SQL constructs (data types, nested tables, and tables associated with out-of-line storage) that are automatically generated during XML schema registration are <span class="italic">internal</span> to Oracle XML&nbsp;DB. Oracle recommends that you do <span class="italic">not</span> use them in your code.</p>
<p>More precisely, generated SQL data types, nested tables, and tables associated with out-of-line storage are based on specific internal XML schema-to-object type mappings that are subject to change and redefinition by Oracle at any time. In general:</p>
<ul style="list-style-type: disc;">
<li>
<p>Do not use any generated SQL data types.</p>
</li>
<li>
<p>Do not access or modify any generated nested tables or out-of-line tables.</p>
</li>
</ul>
<p>You can, however, modify the storage options, such as partitioning, of generated tables, and you can create indexes and constraints on generated tables. You can also freely use any XML schema annotations provided by Oracle XML&nbsp;DB, including annotations that name generated constructs.</p>
</div>
</div>
<a id="ADXDB4468"></a>
<div class="props_rev_3"><a id="GUID-D3206DC0-7581-4AD3-8B46-9F38555D47CB"></a>
<h3 id="ADXDB-GUID-D3206DC0-7581-4AD3-8B46-9F38555D47CB" class="sect3"><span class="enumeration_section">18.1.5</span> Generated Names are Case Sensitive</h3>
<div>
<p>The names of any SQL tables, objects, and attributes generated by XML schema registration are <span class="italic">case sensitive</span>.</p>
<p>For instance, in <a href="xdb06stt.htm#GUID-54A3CBE8-19BE-43BB-8979-7769116B6F53__CEGGHHGE">Example 18-2</a>, the name of table <code>PurchaseOrder1669_TAB</code> is derived from the name of element <code>PurchaseOrder</code>, so it too is mixed case. You must therefore refer to this table using a quoted identifier: <span class="bold"><code>&#34;</code></span><code>PurchaseOrder1669_TAB</code><span class="bold"><code>&#34;</code></span>. Failure to do so results in an object-not-found error, such as <code>ORA-00942: table or view does not exist</code>.</p>
</div>
</div>
<a id="ADXDB4484"></a>
<div class="props_rev_3"><a id="GUID-AF8651CF-49C5-4B13-A198-0AE1F0770439"></a>
<h3 id="ADXDB-GUID-AF8651CF-49C5-4B13-A198-0AE1F0770439" class="sect3"><span class="enumeration_section">18.1.6</span> SYS_XDBPD$ and DOM Fidelity for Object-Relational Storage</h3>
<div>
<p>In order to provide DOM fidelity for XML data that is stored object-relationally, Oracle XML&nbsp;DB records all information that cannot be stored in any of the other object attributes as instance-level metadata using the system-defined binary object attribute <code>SYS_XDBPD$</code> (positional descriptor, or PD).</p>
<p>With object-relational storage of XML data, the elements and attributes declared in an XML schema are mapped to separate attributes of the corresponding SQL object types. However, the following information in XML instance documents is not stored in these object attributes:</p>
<ul style="list-style-type: disc;">
<li>
<p>Namespace declarations</p>
</li>
<li>
<p>Comments</p>
</li>
<li>
<p>Prefix information</p>
</li>
</ul>
<p>In order to provide DOM fidelity for XML data stored object-relationally, Oracle XML&nbsp;DB uses a separate mechanism to keep track of this information: it is recorded as instance-level metadata.</p>
<p>This metadata is tracked at the type level using the system-defined binary object attribute <code>SYS_XDBPD$</code>. This object attribute is referred to as the <strong class="term">positional descriptor</strong>, or <strong class="term">PD</strong> for short.</p>
<p>The PD is intended for Oracle XML&nbsp;DB <span class="italic">internal use only</span>. You should never directly access or manipulate column PD.</p>
<p>The positional descriptor stores all information that cannot be stored in any of the other object attributes. PD information is used to ensure the DOM fidelity of all XML documents stored in Oracle XML&nbsp;DB. Examples of PD information include: ordering information, comments, processing instructions, and namespace prefixes.</p>
<p>If DOM fidelity is not required, you can suppress the use of <code>SYS_XDBPD$</code> by setting attribute <code>xdb:maintainDOM</code> to <code>false</code> in the XML schema, at the type level.</p>
<div class="infobox-note" id="GUID-AF8651CF-49C5-4B13-A198-0AE1F0770439__GUID-5A6B079D-FEC1-4FD0-865D-37994A8E4F49">
<p class="notep1">Note:</p>
<p>For clarity, object attribute <code>SYS_XDBPD$</code> is omitted in many examples in this book. However, it is always present as a positional descriptor (PD) column in all SQL object types that are generated by the XML schema registration process.</p>
<p>In general, Oracle recommends that you do not suppress the PD attribute, because the extra information, such as comments and processing instructions, could be lost if there is no PD column.</p>
</div>
<div class="infoboxnotealso" id="GUID-AF8651CF-49C5-4B13-A198-0AE1F0770439__GUID-7B77A148-1DCB-4722-8C9F-057B004A5464">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb06stt.htm#GUID-9F096CEA-7101-4CB9-AC16-2BC0EC370674" title="You can explicitly specify a SQLType value in an XML schema, as an annotation. The SQL data type that you specify is used for XML schema validation, overriding the default SQL data types.">You Can Override the SQLType Value in an XML Schema When Declaring Attributes</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb06stt.htm#GUID-ED63CA4B-1200-4000-89A3-DA8B4E48E597" title="An element based on a complexType is, by default, mapped to a SQL object type that contains object attributes corresponding to each of its sub-elements and attributes. You can override this mapping by explicitly specifying a value for attribute SQLType in the input XML schema.">Override of the SQLType Value in an XML Schema When Declaring Elements</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb05sto.htm#GUID-F809A6FE-28CD-4776-AB11-0B34ECBD9FF6" title="DOM fidelity means that all information in an XML document is preserved except whitespace that is insignificant. You can use DOM fidelity to ensure the accuracy and integrity of XML documents stored in Oracle XML&nbsp;DB.">DOM Fidelity</a>&#34;</span> for information about DOM fidelity and binary XML storage of XML data</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="ADXDB4514"></a>
<div class="props_rev_3"><a id="GUID-F7E43D3A-67D8-432E-833A-DE0EA4CFCE7A"></a>
<h2 id="ADXDB-GUID-F7E43D3A-67D8-432E-833A-DE0EA4CFCE7A" class="sect2"><span class="enumeration_section">18.2</span> Oracle XML Schema Annotations</h2>
<div>
<p>You can annotate XML schemas to influence the objects and tables that are generated by the XML schema registration process. You do this by adding Oracle-specific attributes to <code>complexType</code>, <code>element</code>, and <code>attribute</code> definitions that are declared by the XML schema.</p>
<p>You can add such annotations manually by editing the XML schema document or, for the most common annotations, by invoking annotation-specific PL/SQL subprograms. See <a class="olink ARPLS73580" target="_blank" href="../ARPLS/d_xmlschema_annotate.htm#ARPLS73580"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>, chapter &#34;DBMS_XMLSCHEMA_ANNOTATE&#34;.</p>
<p>If you edit an XML schema manually using the Altova XMLSpy editor then you can take advantage of the <span class="italic">Oracle</span> tab in the editor for adding and editing Oracle-specific annotations. See <a href="xdb05sto.htm#GUID-0E11429E-1FF3-4C75-8B50-416A7F5C60C8__CEGIBHEB">Figure 17-2</a>.</p>
<p>Most XML attributes used by Oracle XML&nbsp;DB belong to the namespace <code>http://xmlns.oracle.com/xdb</code>. XML attributes used for encoding XML data as binary XML belong to the namespace <code>http://xmlns.oracle.com/2004/CSX</code>. To simplify the process of annotating an XML schema, Oracle recommends that you declare namespace prefixes in the root element of the XML schema.</p>
</div>
<a id="ADXDB4515"></a>
<div class="props_rev_3"><a id="GUID-087E2342-9239-4D23-BA4F-36C3F7BF49CF"></a>
<h3 id="ADXDB-GUID-087E2342-9239-4D23-BA4F-36C3F7BF49CF" class="sect3"><span class="enumeration_section">18.2.1</span> Common Uses of XML Schema Annotations</h3>
<div>
<p>You can annotate an XML schema to customize the names of object-relational tables, objects, and object attributes or to allow XPath rewrite when XQuery-expression arguments target recursive XML data.</p>
<p>Common reasons for wanting to annotate an XML schema include the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>To ensure that the names of the tables, objects, and object attributes created by PL/SQL procedure <code>DBMS_XMLSCHEMA.registerSchema</code> for object-relational storage of <code>XMLType</code> data are easy to recognize and compliant with any application-naming standards. Set parameter <code>GENTYPES</code> or <code>GENTABLES</code> to <code>TRUE</code> for this (<code>TRUE</code> is the default value for each of these parameters).</p>
</li>
<li>
<p>To prevent the generation of mixed-case names that require the use of quoted identifiers when working directly with SQL.</p>
</li>
<li>
<p>To allow XPath rewrite for object-relational storage in the case of document-correlated recursive XPath queries. This applies to certain applications of SQL/XML access and query functions whose XQuery-expression argument targets recursive XML data.</p>
</li>
</ul>
<p>The most commonly used XML schema annotations are the following:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>xdb:defaultTable</code> &ndash; Name of the default table generated for each global element when parameter <code>GENTABLES</code> is <code>TRUE</code>. Setting this to the empty string, <span class="bold"><code>&#34;&#34;</code></span>, prevents a default table from being generated for the element in question.</p>
</li>
<li>
<p><code>xdb:SQLName</code> &ndash; Name of the SQL object attribute that corresponds to each element or attribute defined in the XML schema.</p>
</li>
<li>
<p><code>xdb:SQLType</code> &ndash; For <code>complexType</code> definitions, the corresponding object type. For <code>simpleType</code> definitions, <code>SQLType</code> is used to override the default mapping between XML schema data types and SQL data types. A common use of <code>SQLType</code> is to define when unbounded strings should be stored as <code>CLOB</code> values, rather than as <code>VARCHAR(4000) CHAR</code> values (the default). Note: You cannot use data type <code>NCHAR</code>, <code>NVARCHAR2</code>, or <code>NCLOB</code> as the value of a <code>SQLType</code> annotation.</p>
</li>
<li>
<p><code>xdb:SQLCollType</code> &ndash; Used to specify the varray type that manages a collection of elements.</p>
</li>
<li>
<p><code>xdb:maintainDOM</code> &ndash; Used to determine whether or not DOM fidelity should be maintained for a given <code>complexType</code> definition</p>
</li>
</ul>
<p>You need not specify values for any of these attributes. Oracle XML&nbsp;DB provides appropriate values by default during the XML schema registration process. However, if you are using object-relational storage, then Oracle recommends that you specify the names of at least the top-level SQL types, so that you can reference them later.</p>
</div>
</div>
<a id="ADXDB4517"></a><a id="ADXDB4518"></a><a id="ADXDB4516"></a>
<div class="props_rev_3"><a id="GUID-0B63577E-7129-4F6B-8DE3-E6688F87AD4D"></a>
<h3 id="ADXDB-GUID-0B63577E-7129-4F6B-8DE3-E6688F87AD4D" class="sect3"><span class="enumeration_section">18.2.2</span> XML Schema Annotation Example</h3>
<div>
<p>A sample XML schema illustrates some of the most important Oracle XML&nbsp;DB annotations.</p>
<p>The XML schema in <a href="xdb06stt.htm#GUID-0B63577E-7129-4F6B-8DE3-E6688F87AD4D__BJFBCHGH">Example 18-3</a> is similar to the one in <a href="apphxdb.htm#GUID-1CB2213C-C6E8-4BC4-86A3-EFDE51AEBEFD__BABDAGBF">Example A-2</a>, but it also defines a <code>Notes</code> element and its type, <code>NotesType</code>.</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code>schema</code> element includes the declaration of the <code>xdb</code> namespace.</p>
</li>
<li>
<p>The definition of global element <code>PurchaseOrder</code> includes a <code>defaultTable</code> annotation that specifies that the name of the default table associated with this element is <code>purchaseorder</code>.</p>
</li>
<li>
<p>The definition of global complex type <code>PurchaseOrderType</code> includes a <code>SQLType</code> annotation that specifies that the generated SQL object type is named <code>purchaseorder_t</code>. Within the definition of this type, the following annotations are used:</p>
<ul style="list-style-type: disc;">
<li>
<p>The definition of element <code>Reference</code> includes a <code>SQLName</code> annotation that specifies that the SQL attribute corresponding to XML element <code>Reference</code> is named <code>reference</code>.</p>
</li>
<li>
<p>The definition of element <code>Actions</code> includes a <code>SQLName</code> annotation that specifies that the SQL attribute corresponding to XML element <code>Actions</code> is named <code>action_collection</code>.</p>
</li>
<li>
<p>The definition of element <code>USER</code> includes a <code>SQLName</code> annotation that specifies that the SQL attribute corresponding to XML element <code>User</code> is named <code>email</code>.</p>
</li>
<li>
<p>The definition of element <code>LineItems</code> includes a <code>SQLName</code> annotation that specifies that the SQL attribute corresponding to XML element <code>LineItems</code> is named <code>lineitem_collection</code>.</p>
</li>
<li>
<p>The definition of element <code>Notes</code> includes a <code>SQLType</code> annotation that specifies that the data type of the SQL attribute corresponding to XML element <code>Notes</code> is <code>CLOB</code>.</p>
</li>
</ul>
</li>
<li>
<p>The definition of global complex type <code>LineItemsType</code> includes a <code>SQLType</code> annotation that specifies that the generated SQL object type is named <code>lineitems_t</code>. Within the definition of this type, the following annotation is used:</p>
<ul style="list-style-type: disc;">
<li>
<p>The definition of element <code>LineItem</code> includes a <code>SQLName</code> annotation that specifies that the data type of the SQL attribute corresponding to XML element <code>LineItems</code> is named <code>lineitem_varray</code>, and a <code>SQLCollName</code> annotation that specifies that the SQL object type that manages the collection is named <code>lineitem_v</code>.</p>
</li>
</ul>
</li>
<li>
<p>The definition of global complex type <code>LineItemType</code> includes a <code>SQLType</code> annotation that specifies that generated SQL object type is named <code>lineitem_t</code>.</p>
</li>
<li>
<p>The definition of complex type <code>PartType</code> includes a <code>SQLType</code> annotation that specifies that the SQL object type is named <code>part_t</code>. It also includes the annotation <code>xdb:maintainDOM = &#34;false&#34;</code>, specifying that there is no need for Oracle XML&nbsp;DB to maintain DOM fidelity for elements based on this data type.</p>
</li>
</ul>
<p><a href="xdb06stt.htm#GUID-0B63577E-7129-4F6B-8DE3-E6688F87AD4D__BJFGEIHH">Example 18-4</a> shows some of the tables and objects that are created when the annotated XML schema of <a href="xdb06stt.htm#GUID-0B63577E-7129-4F6B-8DE3-E6688F87AD4D__BJFBCHGH">Example 18-3</a> is registered.</p>
<p>The following are results of this XML schema registration:</p>
<ul style="list-style-type: disc;">
<li>
<p>A table called <code>purchaseorder</code> was created.</p>
</li>
<li>
<p>Types called <code>purchaseorder_t</code>, <code>lineitems_t</code>, <code>lineitem_v</code>, <code>lineitem_t</code>, and <code>part_t</code> were created. The attributes defined by these types are named according to supplied the <code>SQLName</code> annotations.</p>
</li>
<li>
<p>The <code>Notes</code> attribute defined by <code>purchaseorder_t</code> is of data type <code>CLOB</code>.</p>
</li>
<li>
<p>Type <code>part_t</code> does not include a positional descriptor (PD) attribute.</p>
</li>
<li>
<p>Ordered collection tables (OCTs) were created to manage the collections of <code>LineItem</code> and <code>Action</code> elements.</p>
</li>
</ul>
<div class="example" id="GUID-0B63577E-7129-4F6B-8DE3-E6688F87AD4D__BJFBCHGH">
<p class="titleinexample">Example 18-3 Using Common Schema Annotations</p>
<pre dir="ltr">&lt;xs:schema
  targetNamespace=&#34;http://xmlns.oracle.com/xdb/documentation/purchaseOrder&#34;
  xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;
  xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;
  xmlns:po=&#34;http://xmlns.oracle.com/xdb/documentation/purchaseOrder&#34;
  version=&#34;1.0&#34;&gt;
  &lt;xs:element name=&#34;PurchaseOrder&#34; type=&#34;po:PurchaseOrderType&#34;
              <span class="bold">xdb:defaultTable</span>=&#34;PURCHASEORDER&#34;/&gt;
  &lt;xs:complexType name=&#34;PurchaseOrderType&#34; <span class="bold">xdb:SQLType</span>=&#34;PURCHASEORDER_T&#34;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&#34;Reference&#34; type=&#34;po:ReferenceType&#34; minOccurs=&#34;1&#34;
                  <span class="bold">xdb:SQLName</span>=&#34;REFERENCE&#34;/&gt;
      &lt;xs:element name=&#34;Actions&#34; type=&#34;po:ActionsType&#34;
                  <span class="bold">xdb:SQLName</span>=&#34;ACTION_COLLECTION&#34;/&gt;
      &lt;xs:element name=&#34;Reject&#34; type=&#34;po:RejectionType&#34; minOccurs=&#34;0&#34;/&gt;
      &lt;xs:element name=&#34;Requestor&#34; type=&#34;po:RequestorType&#34;/&gt;
      &lt;xs:element name=&#34;User&#34; type=&#34;po:UserType&#34; minOccurs=&#34;1&#34;
                  <span class="bold">xdb:SQLName</span>=&#34;EMAIL&#34;/&gt;
      &lt;xs:element name=&#34;CostCenter&#34; type=&#34;po:CostCenterType&#34;/&gt;
      &lt;xs:element name=&#34;ShippingInstructions&#34;
                  type=&#34;po:ShippingInstructionsType&#34;/&gt;
      &lt;xs:element name=&#34;SpecialInstructions&#34; type=&#34;po:SpecialInstructionsType&#34;/&gt;
      &lt;xs:element name=&#34;LineItems&#34; type=&#34;po:LineItemsType&#34;
                  <span class="bold">xdb:SQLName</span>=&#34;LINEITEM_COLLECTION&#34;/&gt;
      <span class="bold">&lt;xs:element name=&#34;Notes&#34; type=&#34;po:NotesType&#34; xdb:SQLType=&#34;CLOB&#34;/&gt;</span>
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name=&#34;LineItemsType&#34; <span class="bold">xdb:SQLType</span>=&#34;LINEITEMS_T&#34;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&#34;LineItem&#34; type=&#34;po:LineItemType&#34; maxOccurs=&#34;unbounded&#34;
                  <span class="bold">xdb:SQLCollType</span>=&#34;LINEITEM_V&#34; <span class="bold">xdb:SQLName</span>=&#34;LINEITEM_VARRAY&#34;/&gt;
   &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name=&#34;LineItemType&#34; <span class="bold">xdb:SQLType</span>=&#34;LINEITEM_T&#34;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&#34;Description&#34; type=&#34;po:DescriptionType&#34;/&gt;
      &lt;xs:element name=&#34;Part&#34; type=&#34;po:PartType&#34;/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name=&#34;ItemNumber&#34; type=&#34;xs:integer&#34;/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name=&#34;PartType&#34; <span class="bold">xdb:SQLType</span>=&#34;PART_T&#34; <span class="bold">xdb:maintainDOM</span>=&#34;false&#34;&gt;
    &lt;xs:attribute name=&#34;Id&#34;&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base=&#34;xs:string&#34;&gt;
          &lt;xs:minLength value=&#34;10&#34;/&gt;
          &lt;xs:maxLength value=&#34;14&#34;/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
    &lt;xs:attribute name=&#34;Quantity&#34; type=&#34;po:moneyType&#34;/&gt;
    &lt;xs:attribute name=&#34;UnitPrice&#34; type=&#34;po:quantityType&#34;/&gt;
  &lt;/xs:complexType&gt;
  <span class="bold">&lt;xs:simpleType name=&#34;NotesType&#34;&gt;</span>
    <span class="bold">&lt;xs:restriction base=&#34;xs:string&#34;&gt;</span>
      <span class="bold">&lt;xs:minLength value=&#34;1&#34;/&gt;</span>
      <span class="bold">&lt;xs:maxLength value=&#34;32767&#34;/&gt;</span>
    <span class="bold">&lt;/xs:restriction&gt;</span>
  <span class="bold">&lt;/xs:simpleType&gt;</span>
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0B63577E-7129-4F6B-8DE3-E6688F87AD4D__BJFGEIHH">
<p class="titleinexample">Example 18-4 Registering an Annotated XML Schema</p>
<pre dir="ltr">BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd&#39;,
    SCHEMADOC =&gt; bfilename(&#39;XMLDIR&#39;, &#39;purchaseOrder.Annotated.xsd&#39;),
    LOCAL     =&gt; TRUE,
    GENTYPES  =&gt; TRUE,
    GENTABLES =&gt; TRUE,
    CSID      =&gt; nls_charset_id(&#39;AL32UTF8&#39;));
END;
/
 
SELECT table_name, xmlschema, element_name FROM USER_XML_TABLES;
 
TABLE_NAME     XMLSCHEMA                             ELEMENT_NAME
-------------  -----------------------------------   -------------
PURCHASEORDER  http://xmlns.oracle.com/xdb/documen   PurchaseOrder
               tation/purchaseOrder.xsd              
 
1 row selected.
 
DESCRIBE <span class="bold">purchaseorder</span>

Name                            Null? Type
------------------------------  ----- -----------------
TABLE of SYS.XMLTYPE(XMLSchema
 &#34;http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd&#34;
 ELEMENT &#34;PurchaseOrder&#34;) STORAGE Object-relational TYPE &#34;PURCHASEORDER_T&#34;
 
DESCRIBE <span class="bold">purchaseorder_t</span>

PURCHASEORDER_T is NOT FINAL
Name                 Null? Type
-------------------- ----- --------------------------
SYS_XDBPD$                 XDB.XDB$RAW_LIST_T
REFERENCE                  VARCHAR2(30 CHAR)
ACTION_COLLECTION          ACTIONS_T
REJECT                     REJECTION_T
REQUESTOR                  VARCHAR2(128 CHAR)
EMAIL                      VARCHAR2(10 CHAR)
COSTCENTER                 VARCHAR2(4 CHAR)
SHIPPINGINSTRUCTIONS       SHIPPING_INSTRUCTIONS_T
SPECIALINSTRUCTIONS        VARCHAR2(2048 CHAR)
LINEITEM_COLLECTION        LINEITEMS_T
Notes                      CLOB

DESCRIBE <span class="bold">lineitems_t</span>
LINEITEMS_T is NOT FINAL
Name                 Null? Type
-------------------- ----- --------------------------
SYS_XDBPD$                 XDB.XDB$RAW_LIST_T
LINEITEM_VARRAY            LINEITEM_V

DESCRIBE <span class="bold">lineitem_v</span>

LINEITEM_V VARRAY(2147483647) OF LINEITEM_T
LINEITEM_T is NOT FINAL
Name                 Null? Type
-------------------- ----- --------------------------
SYS_XDBPD$                 XDB.XDB$RAW_LIST_T
ITEMNUMBER                 NUMBER(38)
DESCRIPTION                VARCHAR2(256 CHAR)
PART                       PART_T

DESCRIBE <span class="bold">part_t</span>
 
PART_T is NOT FINAL
Name                 Null? Type
-------------------- ----- --------------------------
ID                         VARCHAR2(14 CHAR)
QUANTITY                   NUMBER(12,2)
UNITPRICE                  NUMBER(8,4)

SELECT table_name, parent_table_column FROM USER_NESTED_TABLES
  WHERE parent_table_name = &#39;purchaseorder&#39;;

TABLE_NAME                       PARENT_TABLE_COLUMN
----------                       -----------------------   
SYS_NTNOHV+tfSTRaDTA9FETvBJw==   &#34;XMLDATA&#34;.&#34;LINEITEM_COLLECTION&#34;.&#34;LINEITEM_VARRAY&#34;
SYS_NTV4bNVqQ1S4WdCIvBK5qjZA==   &#34;XMLDATA&#34;.&#34;ACTION_COLLECTION&#34;.&#34;ACTION_VARRAY&#34;
 
2 rows selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6119"></a><a id="ADXDB6115"></a>
<div class="props_rev_3"><a id="GUID-A5E5BCE6-D72E-47C1-B637-6A0CAF9D6359"></a>
<h3 id="ADXDB-GUID-A5E5BCE6-D72E-47C1-B637-6A0CAF9D6359" class="sect3"><span class="enumeration_section">18.2.3</span> Annotating an XML Schema Using DBMS_XMLSCHEMA_ANNOTATE</h3>
<div>
<p>PL/SQL package <code>DBMS_XMLSCHEMA_ANNOTATE</code> provides subprograms to annotate an XML schema. Using these subprograms can often be more convenient and less error prone than manually editing the XML schema.</p>
<p>In particular, you can use the PL/SQL subprograms in a script, which you can run at any time or multiple times, as needed. This can be especially useful if you are using a large XML schema or a standard or other third-party XML schema that you do not want to modify manually.</p>
<p>There are specific PL/SQL subprograms for each Oracle annotation. For example, you use PL/SQL procedure <code>setDefaultTable</code> to add a <code>xdb:defaultTable</code> annotation, and <code>removeDefaultTable</code> to remove a <code>xdb:defaultTable</code> annotation.</p>
<p>Each annotation subprogram has the following as its parameters:</p>
<ul style="list-style-type: disc;">
<li>
<p>The XML schema to be annotated. This parameter is <code>IN OUT</code>.</p>
</li>
<li>
<p>The name of the global element where the annotation is to be added or removed.</p>
</li>
<li>
<p>The annotation (XML attribute) value.</p>
</li>
<li>
<p>A Boolean flag indicating whether any corresponding existing annotation is to be overwritten. By default, it is overwritten.</p>
</li>
</ul>
<p>If the element to be annotated is not a global element then you provide the local element name as an additional parameter. The global and local names together identify the target element. The element with the local name must be a descendent of the element with the global name.</p>
<p>If you use SQL*Plus, you can use PL/SQL procedure <code>DBMS_XMLSCHEMA_ANNOTATE.printWarnings</code> to enable and disable printing of SQL*Plus warnings during the use of other <code>DBMS_XMLSCHEMA_ANNOTATE</code> subprograms. By default, no warnings are printed. An example of a warning is an inability to annotate the XML schema because there is no element with the name you provided to the annotation subprogram.</p>
<p><a href="xdb06stt.htm#GUID-A5E5BCE6-D72E-47C1-B637-6A0CAF9D6359__CEGCJBBA">Example 18-5</a> uses subprograms in PL/SQL package <code>DBMS_XMLSCHEMA_ANNOTATE</code> to produce the annotated XML schema shown in <a href="xdb06stt.htm#GUID-0B63577E-7129-4F6B-8DE3-E6688F87AD4D__BJFBCHGH">Example 18-3</a>.</p>
<div class="infoboxnotealso" id="GUID-A5E5BCE6-D72E-47C1-B637-6A0CAF9D6359__GUID-6CE4644F-3B50-4A8C-9DB3-AF0FD3CC5897">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS73580" target="_blank" href="../ARPLS/d_xmlschema_annotate.htm#ARPLS73580"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>, chapter &#34;DBMS_XMLSCHEMA_ANNOTATE&#34;</p>
</div>
<div class="example" id="GUID-A5E5BCE6-D72E-47C1-B637-6A0CAF9D6359__CEGCJBBA">
<p class="titleinexample">Example 18-5 Using DBMS_XMLSCHEMA_ANNOTATE</p>
<pre dir="ltr">CREATE TABLE annotation_tab (id NUMBER, inp XMLType, out XMLType);
INSERT INTO annotation_tab VALUES (1, ... unannotated XML schema...);

DECLARE
  schema XMLType;
BEGIN
  SELECT t.inp INTO schema FROM annotation_tab t WHERE t.id = 1;

  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setDefaultTable</span>(schema, &#39;PurchaseOrder&#39;, &#39;<span class="bold">PURCHASEORDER</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setSQLType</span>(schema, &#39;PurchaseOrderType&#39;, &#39;<span class="bold">PURCHASEORDER_T</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setSQLName</span>(schema, &#39;complexType&#39;, &#39;PurchaseOrderType&#39;, &#39;element&#39;, &#39;<span class="bold">Reference</span>&#39;,
                                     &#39;<span class="bold">REFERENCE</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setSQLName</span>(schema, &#39;complexType&#39;, &#39;PurchaseOrderType&#39;, &#39;element&#39;, &#39;<span class="bold">Actions</span>&#39;,
                                     &#39;<span class="bold">ACTIONS_COLLECTION</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setSQLName</span>(schema, &#39;complexType&#39;, &#39;PurchaseOrderType&#39;, &#39;element&#39;, &#39;<span class="bold">User</span>&#39;, &#39;<span class="bold">EMAIL</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setSQLName</span>(schema, &#39;complexType&#39;, &#39;PurchaseOrderType&#39;, &#39;element&#39;, &#39;<span class="bold">LineItems</span>&#39;,
                                     &#39;<span class="bold">LINEITEM_COLLECTION</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setSQLType</span>(schema, &#39;complexType&#39;, &#39;PurchaseOrderType&#39;, &#39;element&#39;, &#39;Notes&#39;, &#39;<span class="bold">CLOB</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setSQLType</span>(schema, &#39;LineItemsType&#39;, &#39;<span class="bold">LINEITEMS_T</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setSQLCollType</span>(schema, &#39;complexType&#39;, &#39;LineItemsType&#39;, &#39;LineItem&#39;, &#39;<span class="bold">LINEITEM_V</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setSQLName</span>(schema, &#39;complexType&#39;, &#39;LineItemsType&#39;, &#39;element&#39;, &#39;<span class="bold">LineItem</span>&#39;,
                                     &#39;<span class="bold">LINEITEM_VARRAY</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setSQLType</span>(schema, &#39;LineItemType&#39;, &#39;<span class="bold">LINEITEM_T</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">setSQLType</span>(schema, &#39;PartType&#39;, &#39;<span class="bold">PART_T</span>&#39;);
  DBMS_XMLSCHEMA_ANNOTATE.<span class="bold">disableMaintainDom</span>(schema, &#39;<span class="bold">PartType</span>&#39;);

UPDATE annotation_tab t SET t.out = schema WHERE t.id = 1;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4520"></a><a id="ADXDB4521"></a><a id="ADXDB4522"></a><a id="ADXDB4519"></a>
<div class="props_rev_3"><a id="GUID-429A6872-5258-439F-B427-7AFFD054C00C"></a>
<h3 id="ADXDB-GUID-429A6872-5258-439F-B427-7AFFD054C00C" class="sect3"><span class="enumeration_section">18.2.4</span> Available Oracle XML&nbsp;DB XML Schema Annotations</h3>
<div>
<p>The Oracle XML&nbsp;DB annotations that you can specify in element and attribute declarations are described, along with the PL/SQL subprograms in package <code>DBMS_XMLSCHEMA_ANNOTATE</code> that you can use to manipulate them.</p>
<div class="section">
<p>All annotations except those that have the prefix <code>csx</code> are applicable to XML schemas registered for object-relational storage.</p>
<p>The following annotations apply to XML schemas that are registered for binary XML storage:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>xdb:defaultTable</code></p>
</li>
<li>
<p><code>xdb:defaultTableSchema</code> (deprecated)</p>
</li>
<li>
<p><code>xdb:tableProps</code></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-429A6872-5258-439F-B427-7AFFD054C00C__GUID-38C69C39-2E1E-484D-AB63-81A290B27362">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS73580" target="_blank" href="../ARPLS/d_xmlschema_annotate.htm#ARPLS73580"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>, chapter &#34;DBMS_XMLSCHEMA_ANNOTATE&#34;</p>
</div>
</div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-429A6872-5258-439F-B427-7AFFD054C00C__g1048403">
<p class="titleintable">Table 18-1 Annotations in Elements</p>
<table class="cellalignment3431" title="Annotations in Elements " summary="This table lists attributes you can specify in elements, with Oracle XML DB.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3452" id="d87739e1806">Attribute and PL/SQL</th>
<th class="cellalignment3453" id="d87739e1809">Values</th>
<th class="cellalignment3454" id="d87739e1812">Default</th>
<th class="cellalignment3455" id="d87739e1815">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e1820" headers="d87739e1806">
<pre dir="ltr">xdb:columnProps
</pre>
<p>No applicable PL/SQL.</p>
</td>
<td class="cellalignment3457" headers="d87739e1820 d87739e1809">
<p>Any column storage clause</p>
</td>
<td class="cellalignment3458" headers="d87739e1820 d87739e1812">
<p><code>NULL</code></p>
</td>
<td class="cellalignment3459" headers="d87739e1820 d87739e1815">
<p>Specifies the <code>COLUMN</code> storage clause that is inserted into the default <code>CREATE TABLE</code> statement. It is useful mainly for elements that get mapped to SQL tables, namely top-level element declarations and out-of-line element declarations.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e1842" headers="d87739e1806">
<pre dir="ltr">xdb:defaultTable
</pre>
<p>PL/SQL:</p>
<pre dir="ltr">setDefaultTable
removeDefaultTable
enableDefaultTableCreation
disableDefaultTableCreation
</pre></td>
<td class="cellalignment3457" headers="d87739e1842 d87739e1809">
<p>Any table name</p>
</td>
<td class="cellalignment3458" headers="d87739e1842 d87739e1812">
<p>Based on element name</p>
</td>
<td class="cellalignment3459" headers="d87739e1842 d87739e1815">
<p>Specifies the name of the SQL table into which XML instances of this XML schema are stored. This is most useful in cases where the XML data is inserted from APIs and protocols, such as FTP and HTTP(S), where the table name is not specified. Applicable to object-relational storage and binary XML storage.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e1859" headers="d87739e1806">
<pre dir="ltr">xdb:defaultTableSchema<a id="GUID-429A6872-5258-439F-B427-7AFFD054C00C__CEGFJDGJ" href="#GUID-429A6872-5258-439F-B427-7AFFD054C00C__CEGFJDGJ" onclick="footdisplay(3,&#34;XML Schema annotations xdb:defaultTableSchema, xdb:maintainOrder, xdb:SQLCollSchema, and xdb:SQLSchema are deprecated, starting with Oracle Database Release 12c (12.1.0.1). &#34;)"><sup>Foot 3</sup></a>
</pre>
<p><span class="italic">Deprecated</span>. No applicable PL/SQL.</p>
</td>
<td class="cellalignment3457" headers="d87739e1859 d87739e1809">
<p>Any SQL user name</p>
</td>
<td class="cellalignment3458" headers="d87739e1859 d87739e1812">
<p>User registering XML schema</p>
</td>
<td class="cellalignment3459" headers="d87739e1859 d87739e1815">
<p>Name of the database user (database schema) who owns the type specified by <code>xdb:defaultTable</code>. Applicable to object-relational storage and binary XML storage.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e1901" headers="d87739e1806">
<pre dir="ltr">xdb:maintainDOM
</pre>
<p>PL/SQL:</p>
<pre dir="ltr">enableMaintainDOM
disableMaintainDOM
</pre></td>
<td class="cellalignment3457" headers="d87739e1901 d87739e1809">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment3458" headers="d87739e1901 d87739e1812">
<p><code>true</code></p>
</td>
<td class="cellalignment3459" headers="d87739e1901 d87739e1815">
<p>If <code>true</code>, then instances of this element are stored so that they retain DOM fidelity on output. This implies that all comments, processing instructions, namespace declarations, and so on are retained, in addition to the ordering of elements.</p>
<p>If <code>false</code>, then the output is not guaranteed to have the same DOM action as the input.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e1931" headers="d87739e1806">
<pre dir="ltr">xdb:maintainOrder<a id="fnsrc_d87739e1934" href="#fnsrc_d87739e1934" onclick="footdisplay(3,&#34;XML Schema annotations xdb:defaultTableSchema, xdb:maintainOrder, xdb:SQLCollSchema, and xdb:SQLSchema are deprecated, starting with Oracle Database Release 12c (12.1.0.1). &#34;)"><sup>Footref 3</sup></a>
</pre>
<p><span class="italic">Deprecated</span>. No applicable PL/SQL.</p>
</td>
<td class="cellalignment3457" headers="d87739e1931 d87739e1809">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment3458" headers="d87739e1931 d87739e1812">
<p><code>true</code></p>
</td>
<td class="cellalignment3459" headers="d87739e1931 d87739e1815">
<p>If <code>true</code> (generally recommended, and the default value), then the collection is mapped to a varray (stored in a LOB or an ordered collection table).</p>
<p>If <code>false</code>, then the collection is mapped to an unordered table, and document order is <span class="italic">not</span> preserved.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e1966" headers="d87739e1806">
<pre dir="ltr">xdb:SQLCollSchema<a id="fnsrc_d87739e1969" href="#fnsrc_d87739e1969" onclick="footdisplay(3,&#34;XML Schema annotations xdb:defaultTableSchema, xdb:maintainOrder, xdb:SQLCollSchema, and xdb:SQLSchema are deprecated, starting with Oracle Database Release 12c (12.1.0.1). &#34;)"><sup>Footref 3</sup></a>
</pre>
<p><span class="italic">Deprecated</span>. No applicable PL/SQL.</p>
</td>
<td class="cellalignment3457" headers="d87739e1966 d87739e1809">
<p>Any SQL user name</p>
</td>
<td class="cellalignment3458" headers="d87739e1966 d87739e1812">
<p>User registering XML schema</p>
</td>
<td class="cellalignment3459" headers="d87739e1966 d87739e1815">
<p>Name of the database user (database schema) who owns the type specified by <code>xdb:SQLCollType</code>.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e1988" headers="d87739e1806">
<pre dir="ltr">xdb:SQLCollType
</pre>
<p>PL/SQL:</p>
<pre dir="ltr">setSQLCollType
removeSQLCollType
</pre></td>
<td class="cellalignment3457" headers="d87739e1988 d87739e1809">
<p>Any SQL collection type</p>
</td>
<td class="cellalignment3458" headers="d87739e1988 d87739e1812">
<p>Name generated from element name</p>
</td>
<td class="cellalignment3459" headers="d87739e1988 d87739e1815">
<p>Name of the SQL collection type that corresponds to this XML element. The XML element must be specified with <code>maxOccurs</code> &gt; 1.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e2008" headers="d87739e1806">
<pre dir="ltr">xdb:SQLInline
</pre>
<p>PL/SQL:</p>
<pre dir="ltr">setOutOfLine
removeOutOfLine
</pre></td>
<td class="cellalignment3457" headers="d87739e2008 d87739e1809">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment3458" headers="d87739e2008 d87739e1812">
<p><code>true</code></p>
</td>
<td class="cellalignment3459" headers="d87739e2008 d87739e1815">
<p>If <code>true</code>, then this element is stored inline as an embedded object attribute (or as a collection, if <code>maxOccurs</code> &gt; 1).</p>
<p>If <code>false</code>, then a <code>REF</code> value is stored (or a collection of <code>REF</code> values, if <code>maxOccurs</code> &gt; 1). This attribute is forced to <code>false</code> in certain situations, such as cyclic references, where SQL does not support inlining.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e2053" headers="d87739e1806">
<pre dir="ltr">xdb:SQLName
</pre>
<p>PL/SQL:</p>
<pre dir="ltr">setSQLName
removeSQLName
</pre></td>
<td class="cellalignment3457" headers="d87739e2053 d87739e1809">
<p>Any SQL identifier</p>
</td>
<td class="cellalignment3458" headers="d87739e2053 d87739e1812">
<p>Element name</p>
</td>
<td class="cellalignment3459" headers="d87739e2053 d87739e1815">
<p>Name of the attribute within the SQL object that maps to this XML element.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e2070" headers="d87739e1806">
<pre dir="ltr">xdb:SQLSchema<a id="fnsrc_d87739e2073" href="#fnsrc_d87739e2073" onclick="footdisplay(3,&#34;XML Schema annotations xdb:defaultTableSchema, xdb:maintainOrder, xdb:SQLCollSchema, and xdb:SQLSchema are deprecated, starting with Oracle Database Release 12c (12.1.0.1). &#34;)"><sup>Footref 3</sup></a>
</pre>
<p><span class="italic">Deprecated</span>. No applicable PL/SQL.</p>
</td>
<td class="cellalignment3457" headers="d87739e2070 d87739e1809">
<p>Any SQL user name</p>
</td>
<td class="cellalignment3458" headers="d87739e2070 d87739e1812">
<p>User registering XML schema</p>
</td>
<td class="cellalignment3459" headers="d87739e2070 d87739e1815">
<p>Name of the database user (database schema) who owns the type specified by <code>SQLType</code>.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e2092" headers="d87739e1806">
<pre dir="ltr">xdb:SQLType
</pre>
<p>PL/SQL:</p>
<pre dir="ltr">setSQLType
removeSQLType
</pre></td>
<td class="cellalignment3457" headers="d87739e2092 d87739e1809">
<p>Any SQL data type<a id="fn_4" href="#fn_4" onclick="footdisplay(4,&#34;See \&#34;How to Map XML Schema Data Types to SQL Data Types\&#34;. &#34;)"><sup>Foot&nbsp;4</sup></a>, <span class="italic">except</span> <code>NCHAR</code>, <code>NVARCHAR2</code>, and <code>NCLOB</code></p>
</td>
<td class="cellalignment3458" headers="d87739e2092 d87739e1812">
<p>Name generated from element name</p>
</td>
<td class="cellalignment3459" headers="d87739e2092 d87739e1815">
<p>Name of the SQL type corresponding to this XML element declaration.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3456" id="d87739e2136" headers="d87739e1806">
<pre dir="ltr">xdb:tableProps
</pre>
<p>PL/SQL:</p>
<pre dir="ltr">setTableProps
removeTableProps
</pre></td>
<td class="cellalignment3457" headers="d87739e2136 d87739e1809">
<p>Any table storage clause</p>
</td>
<td class="cellalignment3458" headers="d87739e2136 d87739e1812">
<p><code>NULL</code></p>
</td>
<td class="cellalignment3459" headers="d87739e2136 d87739e1815">
<p>Specifies the <code>TABLE</code> storage clause that is appended to the default <code>CREATE TABLE</code> statement. This is meaningful mainly for global and out-of-line elements. Applicable to object-relational storage and binary XML storage.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3</sup></p>
<p>XML Schema annotations <code>xdb:defaultTableSchema</code>, <code>xdb:maintainOrder</code>, <code>xdb:SQLCollSchema</code>, and <code>xdb:SQLSchema</code> are <span class="italic">deprecated</span>, starting with Oracle Database Release 12<span class="italic">c</span> (12.1.0.1).</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;4</sup></p>
<p>See <span class="q">&#34;<a href="xdb06stt.htm#GUID-844D686D-D95A-4C5B-8624-71BABDBF1EF5" title="You use PL/SQL package DBMS_XMLSCHEMA to map data types for XML Schema attributes and elements to SQL data types.">How to Map XML Schema Data Types to SQL Data Types</a>&#34;</span>.</p>
<div class="section">
<div class="infoboxnotealso" id="GUID-429A6872-5258-439F-B427-7AFFD054C00C__GUID-E3BEBCC7-972D-4501-B75A-308E5A9A39D8">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb05sto.htm#GUID-F8159034-643E-4B26-BA57-4D60AF6D65D3" title="After you register an XML schema you can create an object-relational XMLType table or column for documents that conform to that schema. You can optionally specify object-relational storage options for the table or column.">Object-Relational Storage of XML Schema-Based Data</a>&#34;</span> for information about specifying storage options when manually creating <code>XMLType</code> tables for object-relational storage</p>
</div>
</div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-429A6872-5258-439F-B427-7AFFD054C00C__CHDCHIHD">
<p class="titleintable">Table 18-2 Annotations in Elements Declaring Global complexType Elements</p>
<table class="cellalignment3431" title="Annotations in Elements Declaring Global complexType Elements" summary="This table lists attributes that you can specify in elements declaring global complextypes.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3460" id="d87739e2188">Attribute</th>
<th class="cellalignment3461" id="d87739e2191">Values</th>
<th class="cellalignment3427" id="d87739e2194">Default</th>
<th class="cellalignment3462" id="d87739e2197">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3463" id="d87739e2202" headers="d87739e2188">
<pre dir="ltr">xdb:maintainDOM
</pre>
<p>PL/SQL:</p>
<pre dir="ltr">enableMaintainDom
disableMaintainDom
</pre></td>
<td class="cellalignment3464" headers="d87739e2202 d87739e2191">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment3429" headers="d87739e2202 d87739e2194">
<p><code>true</code></p>
</td>
<td class="cellalignment3465" headers="d87739e2202 d87739e2197">
<p>If <code>true</code>, then instances of this element are stored so that they retain DOM fidelity on output. This implies that all comments, processing instructions, namespace declarations, and so on are retained, in addition to the ordering of elements.</p>
<p>If <code>false</code>, then the output is not guaranteed to have the same DOM action as the input.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3463" id="d87739e2232" headers="d87739e2188">
<pre dir="ltr">xdb:SQLSchema<a id="fn_5" href="#fn_5" onclick="footdisplay(5,&#34;XML Schema annotation xdb:SQLSchema is deprecated, starting with Oracle Database Release 12c (12.1.0.1). &#34;)"><sup>Foot 5</sup></a>
</pre>
<p><span class="italic">Deprecated</span>. No applicable PL/SQL.</p>
</td>
<td class="cellalignment3464" headers="d87739e2232 d87739e2191">
<p>Any SQL user name</p>
</td>
<td class="cellalignment3429" headers="d87739e2232 d87739e2194">
<p>User registering XML schema</p>
</td>
<td class="cellalignment3465" headers="d87739e2232 d87739e2197">
<p>Name of the database user (database schema) who owns the type specified by <code>SQLType</code>.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3463" id="d87739e2264" headers="d87739e2188">
<pre dir="ltr">xdb:SQLType
</pre>
<p>PL/SQL:</p>
<pre dir="ltr">setSQLType
removeSQLType
</pre></td>
<td class="cellalignment3464" headers="d87739e2264 d87739e2191">
<p>Any SQL data type<a id="fn_6" href="#fn_6" onclick="footdisplay(6,&#34;See \&#34;How to Map XML Schema Data Types to SQL Data Types\&#34;. &#34;)"><sup>Foot&nbsp;6</sup></a> <span class="italic">except</span> <code>NCHAR</code>, <code>NVARCHAR2</code>, and <code>NCLOB</code></p>
</td>
<td class="cellalignment3429" headers="d87739e2264 d87739e2194">
<p>Name generated from element name</p>
</td>
<td class="cellalignment3465" headers="d87739e2264 d87739e2197">
<p>Name of the SQL type that corresponds to this XML element declaration.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;5</sup></p>
<p>XML Schema annotation <code>xdb:SQLSchema</code> is <span class="italic">deprecated</span>, starting with Oracle Database Release 12<span class="italic">c</span> (12.1.0.1).</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;6</sup></p>
<p>See <span class="q">&#34;<a href="xdb06stt.htm#GUID-844D686D-D95A-4C5B-8624-71BABDBF1EF5" title="You use PL/SQL package DBMS_XMLSCHEMA to map data types for XML Schema attributes and elements to SQL data types.">How to Map XML Schema Data Types to SQL Data Types</a>&#34;</span>.</p>
<div class="section"></div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-429A6872-5258-439F-B427-7AFFD054C00C__CHDBFCID">
<p class="titleintable">Table 18-3 Annotations in XML Schema Declarations</p>
<table class="cellalignment3431" title="Annotations in XML Schema Declarations" summary="This table lists attributes you can specify in XML schema declarations. It includes the default values.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3466" id="d87739e2319">Attribute</th>
<th class="cellalignment3467" id="d87739e2322">Values</th>
<th class="cellalignment3468" id="d87739e2325">Default</th>
<th class="cellalignment3441" id="d87739e2328">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3469" id="d87739e2333" headers="d87739e2319">
<pre dir="ltr">xdb:mapUnboundedStringToLob<a id="GUID-429A6872-5258-439F-B427-7AFFD054C00C__CEGDIFDD" href="#GUID-429A6872-5258-439F-B427-7AFFD054C00C__CEGDIFDD" onclick="footdisplay(7,&#34;XML Schema annotations xdb:mapUnboundedStringToLob and xdb:storeVarrayAsTable are deprecated, starting with Oracle Database 12c Release 1 (12.1.0.1). &#34;)"><sup>Foot 7</sup></a>
</pre>
<p>No applicable PL/SQL.</p>
</td>
<td class="cellalignment3470" headers="d87739e2333 d87739e2322">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment3471" headers="d87739e2333 d87739e2325">
<p><code>false</code></p>
</td>
<td class="cellalignment3443" headers="d87739e2333 d87739e2328">
<p>If <code>true</code>, then unbounded strings are mapped to <code>CLOB</code> instances by default. Similarly, unbounded binary data gets mapped to a <code>BLOB</code> value, by default.</p>
<p>If <code>false</code>, then unbounded strings are mapped to <code>VARCHAR2(4000)</code> values, and unbounded binary components are mapped to <code>RAW(2000)</code> values.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3469" id="d87739e2388" headers="d87739e2319">
<pre dir="ltr">xdb:storeVarrayAsTable<a id="fnsrc_d87739e2391" href="#fnsrc_d87739e2391" onclick="footdisplay(7,&#34;XML Schema annotations xdb:mapUnboundedStringToLob and xdb:storeVarrayAsTable are deprecated, starting with Oracle Database 12c Release 1 (12.1.0.1). &#34;)"><sup>Footref 7</sup></a>
</pre>
<p><span class="italic">Deprecated</span>. No applicable PL/SQL.</p>
</td>
<td class="cellalignment3470" headers="d87739e2388 d87739e2322">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment3471" headers="d87739e2388 d87739e2325">
<p><code>true</code></p>
</td>
<td class="cellalignment3443" headers="d87739e2388 d87739e2328">
<p>If <code>true</code>, then the varray is stored as a table (OCT). The default value is <code>true</code>.</p>
<p>If <code>false</code>, then the varray is stored in a LOB.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;7</sup></p>
<p>XML Schema annotations <code>xdb:mapUnboundedStringToLob</code> and <code>xdb:storeVarrayAsTable</code> are <span class="italic">deprecated</span>, starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.1).</p>
</div>
</div>
<a id="ADXDB5837"></a>
<div class="props_rev_3"><a id="GUID-B1B67DF3-8E3A-4383-B67F-D14EF98BFBE9"></a>
<h3 id="ADXDB-GUID-B1B67DF3-8E3A-4383-B67F-D14EF98BFBE9" class="sect3"><span class="enumeration_section">18.2.5</span> XML Schema Annotation Guidelines for Object-Relational Storage</h3>
<div>
<p>For <code>XMLType</code> data stored object-relationally, careful planning is called for, to optimize performance. Similar considerations are in order as for relational data: entity-relationship models, indexing, data types, table partitions, and so on. To enable XPath rewrite and achieve optimal performance, you implement many such design choices using XML schema annotations.</p>
<div class="infoboxnotealso" id="GUID-B1B67DF3-8E3A-4383-B67F-D14EF98BFBE9__GUID-502B5EAE-1707-4AB7-9832-23CB6820D16C">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb06stt.htm#GUID-429A6872-5258-439F-B427-7AFFD054C00C__g1048403" title="This table lists attributes you can specify in elements, with Oracle XML DB.">Table 18-1</a></p>
</li>
<li>
<p><a href="xdb_rewrite.htm#GUID-35551023-CCAC-477B-8BBF-CD0E0B44C962" title="For XMLType data stored object-relationally, queries involving XPath expression arguments to various SQL functions can often be automatically rewritten to queries against the underlying SQL tables, which are highly optimized.">XPath Rewrite for Object-Relational Storage</a></p>
</li>
</ul>
</div>
</div>
<a id="ADXDB5838"></a>
<div class="props_rev_3"><a id="GUID-72B2EF6A-A8A4-44E4-89BD-1AE5A0FACDE2"></a>
<h4 id="ADXDB-GUID-72B2EF6A-A8A4-44E4-89BD-1AE5A0FACDE2" class="sect4"><span class="enumeration_section">18.2.5.1</span> Avoid Creation of Unnecessary Tables for Unused Top-Level Elements</h4>
<div>
<p>Whenever a top-level element in an XML schema is <span class="italic">never</span> used at the top level in any corresponding XML instance, you can avoid the creation of associated tables by adding annotation <code>xdb:defaultTable =</code> <span class="bold"><code>&#34;&#34;</code></span> to the element in the XML schema. An empty value for this attribute prevents default-table creation.</p>
<p>By default, XML schema registration creates a top-level table for each top-level element defined in the schema. Some such elements might be used at top level in XML instances that conform to the schema. For example, elements in an XML schema might be top-level in order to be used as a <code>REF</code> target.</p>
<p>You can use PL/SQL procedure <code>DBMS_XMLSCHEMA_ANNOTATE.disableDefaultTableCreation</code> to add an empty <code>xdb:defaultTable</code> attribute to each top-level element that has no <code>xdb:defaultTable</code> attribute.</p>
<div class="infobox-note" id="GUID-72B2EF6A-A8A4-44E4-89BD-1AE5A0FACDE2__GUID-57EDED1B-9EA6-4010-9FF3-068006A0DD82">
<p class="notep1">Note:</p>
<p>Any top-level XML schema element that is used as the root element of any instance documents must have a non-empty <code>xdb:defaultTable</code> attribute.</p>
</div>
<div class="infoboxnotealso" id="GUID-72B2EF6A-A8A4-44E4-89BD-1AE5A0FACDE2__GUID-F43B14BD-0FA8-4CBA-9522-77041C3ACCCC">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS73580" target="_blank" href="../ARPLS/d_xmlschema_annotate.htm#ARPLS73580"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>, chapter &#34;DBMS_XMLSCHEMA_ANNOTATE&#34; for information about PL/SQL procedure <code>disableDefaultTableCreation</code>.</p>
</div>
</div>
</div>
<a id="ADXDB5839"></a>
<div class="props_rev_3"><a id="GUID-AA67137B-0987-44FC-8AAB-FA0C0DD36302"></a>
<h4 id="ADXDB-GUID-AA67137B-0987-44FC-8AAB-FA0C0DD36302" class="sect4"><span class="enumeration_section">18.2.5.2</span> Provide Your Own Names for Default Tables</h4>
<div>
<p>For tuning purposes, you examine execution plan output for your queries. This refers to the tables that underlie <code>XMLType</code> data stored object-relationally. By default, these tables have system-generated names. Oracle recommends that you provide your own table names instead, especially for tables that you are sure to be interested in.</p>
<p>You do that using annotation <code>xdb:defaultTable</code>.</p>
<div class="infoboxnotealso" id="GUID-AA67137B-0987-44FC-8AAB-FA0C0DD36302__GUID-01867F69-E36E-4633-AFFF-06309BC301C2">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb06stt.htm#GUID-54A3CBE8-19BE-43BB-8979-7769116B6F53" title="You can create default tables as part of XML schema registration. Default tables are most useful when documents are inserted using APIs and protocols such as FTP and HTTP(S), which do not provide any table specification.">Default Tables Created during XML Schema Registration</a> &#34;</span></p>
</div>
</div>
</div>
<a id="ADXDB5840"></a>
<div class="props_rev_3"><a id="GUID-9895677F-D247-4BCF-965F-51BEBFECE916"></a>
<h4 id="ADXDB-GUID-9895677F-D247-4BCF-965F-51BEBFECE916" class="sect4"><span class="enumeration_section">18.2.5.3</span> Turn Off DOM Fidelity If Not Needed</h4>
<div>
<p>By default, XML schema registration generates tables that maintain DOM fidelity. It is often the case that for data-centric XML data DOM fidelity is not needed. You can improve the performance of storage, queries, and data modification by instead using object-relational tables that do not maintain DOM fidelity.</p>
<p>You use the annotation <code>xdb:maintainDOM = &#34;</code><span class="bold"><code>false</code></span><code>&#34;</code> to do that.</p>
<div class="infoboxnotealso" id="GUID-9895677F-D247-4BCF-965F-51BEBFECE916__GUID-E68D38C3-6ECC-4E02-BFDF-850326401A9D">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb05sto.htm#GUID-F809A6FE-28CD-4776-AB11-0B34ECBD9FF6" title="DOM fidelity means that all information in an XML document is preserved except whitespace that is insignificant. You can use DOM fidelity to ensure the accuracy and integrity of XML documents stored in Oracle XML&nbsp;DB.">DOM Fidelity</a>&#34;</span></p>
</div>
</div>
</div>
<a id="ADXDB5842"></a>
<div class="props_rev_3"><a id="GUID-A6368882-0B0F-4913-91A7-358FA3E27794"></a>
<h4 id="ADXDB-GUID-A6368882-0B0F-4913-91A7-358FA3E27794" class="sect4"><span class="enumeration_section">18.2.5.4</span> Annotate Time-Related Elements with a Timestamp Data Type</h4>
<div>
<p>If your application needs to work with time-zone indicators, then annotate any XML schema elements of type <code>xs:time</code> and <code>xs:dateTime</code> with <code>xdb:SQLType = &#34;</code><span class="bold"><code>TIMESTAMP WITH TIME ZONE</code></span><code>&#34;</code>. This ensures that values containing time-zone indicators can be stored, retrieved, and compared.</p>
</div>
</div>
<a id="ADXDB5843"></a>
<div class="props_rev_3"><a id="GUID-3CC2FD41-D68C-443F-93F6-C8DFB5752D9C"></a>
<h4 id="ADXDB-GUID-3CC2FD41-D68C-443F-93F6-C8DFB5752D9C" class="sect4"><span class="enumeration_section">18.2.5.5</span> Add Table and Column Properties</h4>
<div>
<p>If a table or column underlying object-relational <code>XMLType</code> data needs additional properties specified, such as partition, tablespace, or compression, use annotation <code>xdb:tableProps</code> or <code>xdb:columnProps</code>. You can do this to add primary keys or constraints, for example.</p>
<p>For example, to achieve table compression for online transaction processing (OLTP), you would add <code>COMPRESS FOR OLTP</code> using a <code>tableProps</code> attribute.</p>
<div class="infoboxnotealso" id="GUID-3CC2FD41-D68C-443F-93F6-C8DFB5752D9C__GUID-4418A4E2-B58E-4621-A58B-F0EA5EE2CF30">
<p class="notep1">See Also:</p>
<p><a href="xdb05sto.htm#GUID-F8159034-643E-4B26-BA57-4D60AF6D65D3__BJFGGABH">Example 17-9</a> for an example of specifying OLTP compression when creating <code>XMLType</code> tables and columns manually</p>
</div>
</div>
</div>
<a id="ADXDB5844"></a>
<div class="props_rev_3"><a id="GUID-2BEC7690-3EB6-4995-9D47-19C061C4277E"></a>
<h4 id="ADXDB-GUID-2BEC7690-3EB6-4995-9D47-19C061C4277E" class="sect4"><span class="enumeration_section">18.2.5.6</span> Store Large Collections Out of Line</h4>
<div>
<p>If you have large collections then you might need to use annotations <code>xdb:defaultTable</code> and <code>xdb:SQLInline</code> to specify that collection elements be stored out of line.</p>
<p>The maximum number of elements and attributes defined by a <code>complexType</code> is 1000. It is not possible to create a single table that can manage the SQL objects that are generated when an instance of that type is stored. If you have large collections, then you might run up against this limit of 1000 columns for a table.</p>
<p>You can use annotations <code>xdb:defaultTable</code> and <code>xdb:SQLInline</code> to specify that such collection elements be stored out of line. That means that their data is stored in a separate table&thinsp;&mdash;&thinsp;only a reference to a row in that table is stored in the main collection table. Use <code>xdb:defaultTable</code> to name the out-of -line table. Annotate each element of a potentially large collection with <code>xdb:SQLInline = &#34;</code><span class="bold"><code>false</code></span><code>&#34;,</code> to store it out of line.</p>
<div class="infobox-note" id="GUID-2BEC7690-3EB6-4995-9D47-19C061C4277E__GUID-960CF353-2CA1-4F32-8BC3-E5B793B0F3C7">
<p class="notep1">Note:</p>
<p>For each inheritance hierarchy or substitution group in an XML schema, a table is created whose columns cover the content models of that hierarchy or substitution group. This too can cause the 1000-column limit to be reached.</p>
</div>
<div class="infoboxnotealso" id="GUID-2BEC7690-3EB6-4995-9D47-19C061C4277E__GUID-FB72D2A1-1AA2-4CAF-84B1-C124016137CE">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb06stt.htm#GUID-5F470098-54C0-4FC6-8E7B-732487497F90" title="Errors ORA-01792 and ORA-04031 can be raised when you work with large or complex XML schemas. You can encounter them when you register an XML schema or you create a table that is based on a global element defined by an XML schema.">ORA-01792 and ORA-04031: Issues with Large XML Schemas</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb06stt.htm#GUID-AC221997-9F02-423E-9F39-BA02046763B5" title="Set XML schema annotation xdb:SQLInline to false to store an XML fragment out of line. The element is mapped to a SQL object type with an embedded REF attribute, which points to another XMLType instance that is stored out of line and that corresponds to the XML fragment.">Setting Annotation Attribute xdb:SQLInline to false for Out-Of-Line Storage</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="ADXDB6116"></a><a id="ADXDB4524"></a><a id="ADXDB4523"></a>
<div class="props_rev_3"><a id="GUID-0A560425-E6F2-4AA2-9818-B80EFE2D0AD3"></a>
<h3 id="ADXDB-GUID-0A560425-E6F2-4AA2-9818-B80EFE2D0AD3" class="sect3"><span class="enumeration_section">18.2.6</span> Querying a Registered XML Schema to Obtain Annotations</h3>
<div>
<p>You can query database views <code>USER_XML_SCHEMAS</code> and <code>ALL_XML_SCHEMAS</code> to obtain a registered XML schema with all of its annotations. The registered version of an XML schema contains a full set of Oracle XML&nbsp;DB annotations. These annotations were supplied by a user or set by default during XML schema registration.</p>
<div class="section">
<p><a href="xdb06stt.htm#GUID-0A560425-E6F2-4AA2-9818-B80EFE2D0AD3__CEGEGFAG">Example 18-6</a> illustrates this. It returns the XML schema as an <code>XMLType</code> instance.</p>
<p>As shown in <a href="xdb05sto.htm#GUID-26C1BFCD-5CC5-4608-A93E-24E5529B1077__BJFIJHJA">Example 17-3</a> and <a href="xdb05sto.htm#GUID-CA2A548B-11B3-4D83-9A21-53EC8CE6DDC9__BJFBGBEJ">Example 17-4</a>, the location of the registered XML schema depends on whether it is local or global. If you want to project specific annotation information to relational columns, you can query <code>RESOURCE_VIEW</code>. <a href="xdb06stt.htm#GUID-0A560425-E6F2-4AA2-9818-B80EFE2D0AD3__CHDCDCCD">Example 18-7</a> illustrates this. It obtains the set of global <code>complexType</code> definitions declared by an XML schema for object-relational storage of <code>XMLType</code> data, and the corresponding SQL object types and DOM fidelity values.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-0A560425-E6F2-4AA2-9818-B80EFE2D0AD3__CEGEGFAG">
<p class="titleinexample">Example 18-6 Querying View USER_XML_SCHEMAS for a Registered XML Schema</p>
<pre dir="ltr">SELECT SCHEMA FROM USER_XML_SCHEMAS
  WHERE SCHEMA_URL = &#39;http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd&#39;;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0A560425-E6F2-4AA2-9818-B80EFE2D0AD3__CHDCDCCD">
<p class="titleinexample">Example 18-7 Querying Metadata from a Registered XML Schema</p>
<pre dir="ltr">SELECT ct.xmlschema_type_name, ct.sql_type_name, ct.dom_fidelity
  FROM RESOURCE_VIEW,
       XMLTable(
         XMLNAMESPACES (
           &#39;http://xmlns.oracle.com/xdb/XDBResource.xsd&#39; AS &#34;r&#34;,
           &#39;http://xmlns.oracle.com/xdb/documentation/purchaseOrder&#39; AS &#34;po&#34;,
           &#39;http://www.w3.org/2001/XMLSchema&#39; AS &#34;xs&#34;,
           &#39;http://xmlns.oracle.com/xdb&#39; AS &#34;xdb&#34;),
         &#39;<span class="bold">/r:Resource/r:Contents/xs:schema/xs:complexType</span>&#39; PASSING RES
         COLUMNS
           xmlschema_type_name VARCHAR2(30) PATH &#39;<span class="bold">@name</span>&#39;,
           sql_type_name       VARCHAR2(30) PATH &#39;<span class="bold">@xdb:SQLType</span>&#39;,
           dom_fidelity        VARCHAR2(6)  PATH &#39;<span class="bold">@xdb:maintainDOM</span>&#39;) ct
  WHERE
    equals_path(
      RES,
      &#39;/sys/schemas/SCOTT/xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd&#39;)
    =1;

XMLSCHEMA_TYPE_NAME        SQL_TYPE_NAME            DOM_FIDELITY
-------------------------  -----------------------  ------------
PurchaseOrderType          PURCHASEORDER_T          true
LineItemsType              LINEITEMS_T              true
LineItemType               LINEITEM_T               true
PartType                   PART_T                   true
ActionsType                ACTIONS_T                true
RejectionType              REJECTION_T              true
ShippingInstructionsType   SHIPPING_INSTRUCTIONS_T  true

7 rows selected.
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB6117"></a>
<div class="props_rev_3"><a id="GUID-AAA8C662-CEBE-4F38-8C41-AE25CF502790"></a>
<h4 id="ADXDB-GUID-AAA8C662-CEBE-4F38-8C41-AE25CF502790" class="sect4"><span class="enumeration_section">18.2.6.1</span> You Can Apply Annotations from One XML Schema to Another</h4>
<div>
<p>Sometimes you need to apply the annotations from one XML schema to another XML schema. A typical use case is applying the annotations from an older version of a schema to a new version. You can get and set annotations using PL/SQL subprograms <code>getSchemaAnnotations</code> and <code>setSchemaAnnotations</code>, respectively.</p>
<p>PL/SQL function <code>getSchemaAnnotations</code> returns all of the annotations from an XML schema. PL/SQL procedure <code>setSchemaAnnotations</code> sets annotations. These subprograms are in PL/SQL package <code>DBMS_XMLSCHEMA_ANNOTATE</code>.</p>
<div class="infoboxnotealso" id="GUID-AAA8C662-CEBE-4F38-8C41-AE25CF502790__GUID-6D263E04-2EBD-4E55-B6EC-5270D4E76D4C">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS73580" target="_blank" href="../ARPLS/d_xmlschema_annotate.htm#ARPLS73580"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>, chapter &#34;DBMS_XMLSCHEMA_ANNOTATE&#34; for information about PL/SQL subprograms <code>getSchemaAnnotations</code> and <code>setSchemaAnnotations</code>.</p>
</div>
</div>
</div>
</div>
</div>
<a id="ADXDB4527"></a>
<div class="props_rev_3"><a id="GUID-844D686D-D95A-4C5B-8624-71BABDBF1EF5"></a>
<h2 id="ADXDB-GUID-844D686D-D95A-4C5B-8624-71BABDBF1EF5" class="sect2"><span class="enumeration_section">18.3</span> Use DBMS_XMLSCHEMA to Map XML Schema Data Types to SQL Data Types</h2>
<div>
<p>You use PL/SQL package <code>DBMS_XMLSCHEMA</code> to map data types for XML Schema attributes and elements to SQL data types.</p>
<div class="infobox-note" id="GUID-844D686D-D95A-4C5B-8624-71BABDBF1EF5__GUID-BF435932-5BE3-41C9-BA20-916CBDA6E4C8">
<p class="notep1">Note:</p>
<p>Do <span class="italic">not</span> directly access the SQL data types that are mapped from XML Schema data types during XML schema registration. These SQL types are part of the implementation of Oracle XML&nbsp;DB. They are not exposed for your use. Oracle reserves the right to change the implementation at any time, including in a product patch. Such a change by Oracle will have no effect on applications that abide by the XML abstraction, but it might impact applications that directly access these data types.</p>
</div>
</div>
<a id="ADXDB4529"></a><a id="ADXDB4528"></a>
<div class="props_rev_3"><a id="GUID-21E2C662-DB44-4DE3-8AA7-05D87465801A"></a>
<h3 id="ADXDB-GUID-21E2C662-DB44-4DE3-8AA7-05D87465801A" class="sect3"><span class="enumeration_section">18.3.1</span> Example of Mapping XML Schema Data Types to SQL</h3>
<div>
<p>An example illustrates mapping XML Schema data types to SQL data types.</p>
<div class="section">
<p><a href="xdb06stt.htm#GUID-21E2C662-DB44-4DE3-8AA7-05D87465801A__CIHIDFEB">Example 18-8</a> uses attribute <code>SQLType</code> to specify the data-type mapping. It also uses attribute <code>SQLName</code> to specify the object attributes to use for various XML elements and attributes.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-21E2C662-DB44-4DE3-8AA7-05D87465801A__CIHIDFEB">
<p class="titleinexample">Example 18-8 Mapping XML Schema Data Types to SQL Data Types Using Attribute SQLType</p>
<pre dir="ltr">&lt;xs:schema xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;
           xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;
           version=&#34;1.0&#34;&gt;
  &lt;xs:element name=&#34;PurchaseOrder&#34; type=&#34;PurchaseOrderType&#34; xdb:defaultTable=&#34;PURCHASEORDER&#34;/&gt;
  &lt;xs:complexType name=&#34;PurchaseOrderType&#34; xdb:SQLType=&#34;PURCHASEORDER_T&#34;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&#34;Reference&#34; type=&#34;ReferenceType&#34; minOccurs=&#34;1&#34; xdb:SQLName=&#34;REFERENCE&#34;/&gt;
      &lt;xs:element name=&#34;Actions&#34; type=&#34;ActionsType&#34; xdb:SQLName=&#34;ACTIONS&#34;/&gt;
      &lt;xs:element name=&#34;Reject&#34; type=&#34;RejectionType&#34; minOccurs=&#34;0&#34; xdb:SQLName=&#34;REJECTION&#34;/&gt;
      &lt;xs:element name=&#34;Requestor&#34; type=&#34;RequestorType&#34; xdb:SQLName=&#34;REQUESTOR&#34;/&gt;
      &lt;xs:element name=&#34;User&#34; type=&#34;UserType&#34; minOccurs=&#34;1&#34; xdb:SQLName=&#34;USERID&#34;/&gt;
      &lt;xs:element name=&#34;CostCenter&#34; type=&#34;CostCenterType&#34; xdb:SQLName=&#34;COST_CENTER&#34;/&gt;
      &lt;xs:element name=&#34;ShippingInstructions&#34; type=&#34;ShippingInstructionsType&#34; 
                  xdb:SQLName=&#34;SHIPPING_INSTRUCTIONS&#34;/&gt;
      &lt;xs:element name=&#34;SpecialInstructions&#34; type=&#34;SpecialInstructionsType&#34; 
                  xdb:SQLName=&#34;SPECIAL_INSTRUCTIONS&#34;/&gt;
      &lt;xs:element name=&#34;LineItems&#34; type=&#34;LineItemsType&#34; xdb:SQLName=&#34;LINEITEMS&#34;/&gt;
      &lt;xs:element name=&#34;Notes&#34; type=&#34;po:NotesType&#34; xdb:SQLType=&#34;CLOB&#34;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name=&#34;LineItemsType&#34; xdb:SQLType=&#34;LINEITEMS_T&#34;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&#34;LineItem&#34; type=&#34;LineItemType&#34; maxOccurs=&#34;unbounded&#34; 
                  xdb:SQLName=&#34;LINEITEM&#34; xdb:SQLCollType=&#34;LINEITEM_V&#34;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name=&#34;LineItemType&#34; xdb:SQLType=&#34;LINEITEM_T&#34;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&#34;Description&#34; type=&#34;DescriptionType&#34; 
                  xdb:SQLName=&#34;DESCRIPTION&#34;/&gt;
      &lt;xs:element name=&#34;Part&#34; type=&#34;PartType&#34; xdb:SQLName=&#34;PART&#34;/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name=&#34;ItemNumber&#34; type=&#34;xs:integer&#34; xdb:SQLName=&#34;ITEMNUMBER&#34; 
                  xdb:SQLType=&#34;NUMBER&#34;/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name=&#34;PartType&#34; xdb:SQLType=&#34;PART_T&#34;&gt;
    &lt;xs:attribute name=&#34;Id&#34; xdb:SQLName=&#34;PART_NUMBER&#34; xdb:SQLType=&#34;VARCHAR2&#34;&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base=&#34;xs:string&#34;&gt;
          &lt;xs:minLength value=&#34;10&#34;/&gt;
          &lt;xs:maxLength value=&#34;14&#34;/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
    &lt;xs:attribute name=&#34;Quantity&#34; type=&#34;moneyType&#34; xdb:SQLName=&#34;QUANTITY&#34;/&gt;
    &lt;xs:attribute name=&#34;UnitPrice&#34; type=&#34;quantityType&#34; xdb:SQLName=&#34;UNITPRICE&#34;/&gt;
  &lt;/xs:complexType&gt;

  <span class="bold">...</span>

  &lt;xs:complexType name=&#34;ActionsType&#34; xdb:SQLType=&#34;ACTIONS_T&#34;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&#34;Action&#34; maxOccurs=&#34;4&#34; xdb:SQLName=&#34;ACTION&#34; xdb:SQLCollType=&#34;ACTION_V&#34;&gt;
        &lt;xs:complexType xdb:SQLType=&#34;ACTION_T&#34;&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name=&#34;User&#34; type=&#34;UserType&#34; xdb:SQLName=&#34;ACTIONED_BY&#34;/&gt;
            &lt;xs:element name=&#34;Date&#34; type=&#34;DateType&#34; minOccurs=&#34;0&#34; xdb:SQLName=&#34;DATE_ACTIONED&#34;/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name=&#34;RejectionType&#34; xdb:SQLType=&#34;REJECTION_T&#34;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&#34;User&#34; type=&#34;UserType&#34; minOccurs=&#34;0&#34; xdb:SQLName=&#34;REJECTED_BY&#34;/&gt;
      &lt;xs:element name=&#34;Date&#34; type=&#34;DateType&#34; minOccurs=&#34;0&#34; xdb:SQLName=&#34;DATE_REJECTED&#34;/&gt;
      &lt;xs:element name=&#34;Comments&#34; type=&#34;CommentsType&#34; minOccurs=&#34;0&#34; xdb:SQLName=&#34;REASON_REJECTED&#34;/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name=&#34;ShippingInstructionsType&#34; xdb:SQLType=&#34;SHIPPING_INSTRUCTIONS_T&#34;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&#34;name&#34; type=&#34;NameType&#34; minOccurs=&#34;0&#34; xdb:SQLName=&#34;SHIP_TO_NAME&#34;/&gt;
      &lt;xs:element name=&#34;address&#34; type=&#34;AddressType&#34; minOccurs=&#34;0&#34; xdb:SQLName=&#34;SHIP_TO_ADDRESS&#34;/&gt;
      &lt;xs:element name=&#34;telephone&#34; type=&#34;TelephoneType&#34; minOccurs=&#34;0&#34; xdb:SQLName=&#34;SHIP_TO_PHONE&#34;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  <span class="bold">...</span>
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4530"></a>
<div class="props_rev_3"><a id="GUID-73BF2445-E3AE-44AD-9DCE-669EFDD8299C"></a>
<h3 id="ADXDB-GUID-73BF2445-E3AE-44AD-9DCE-669EFDD8299C" class="sect3"><span class="enumeration_section">18.3.2</span> XML Schema Attribute Data Types Mapped to SQL</h3>
<div>
<p>An XML attribute declaration can specify its XML Schema data type in terms of a primitive type, a local <code>simpleType</code>, a global <code>simpleType</code>, or a reference to a global attribute (<code>ref=&#34;..&#34;</code>). The SQL data type and its associated information are derived from the base XML Schema type.</p>
<p>An attribute declaration can specify its XML Schema data type in terms of any of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Primitive type</p>
</li>
<li>
<p>Global <code>simpleType</code>, declared within this XML schema or in an external XML schema</p>
</li>
<li>
<p>Reference to global attribute (<code>ref=&#34;..&#34;</code>), declared within this XML schema or in an external XML schema</p>
</li>
<li>
<p>Local <code>simpleType</code></p>
</li>
</ul>
<p>In all cases, the SQL data type, any associated information (length, precision), and the memory mapping information are derived from the <code>simpleType</code> on which the attribute is based.</p>
</div>
<a id="ADXDB4531"></a>
<div class="props_rev_3"><a id="GUID-9F096CEA-7101-4CB9-AC16-2BC0EC370674"></a>
<h4 id="ADXDB-GUID-9F096CEA-7101-4CB9-AC16-2BC0EC370674" class="sect4"><span class="enumeration_section">18.3.2.1</span> You Can Override the SQLType Value in an XML Schema When Declaring Attributes</h4>
<div>
<p>You can explicitly specify a <code>SQLType</code> value in an XML schema, as an annotation. The SQL data type that you specify is used for XML schema validation, overriding the default SQL data types.</p>
<p>Only the following specific forms of such SQL data-type overrides are allowed:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the default SQL data type is <code>STRING</code> then you can override it with <code>CHAR</code>, <code>VARCHAR</code>, or <code>CLOB</code>.</p>
</li>
<li>
<p>If the default SQL data type is <code>RAW</code> then you can override it with <code>RAW</code> or <code>BLOB</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDB4532"></a>
<div class="props_rev_3"><a id="GUID-F800FE48-194A-4A60-B2D3-8382A3775D2C"></a>
<h3 id="ADXDB-GUID-F800FE48-194A-4A60-B2D3-8382A3775D2C" class="sect3"><span class="enumeration_section">18.3.3</span> XML Schema Element Data Types Mapped to SQL</h3>
<div>
<p>An XML element declaration can specify its XML Schema data type using a primitive type, a local or global <code>simpleType</code>, a local or global <code>complexType</code>, or a reference to a global element (<code>ref=&#34;..&#34;</code>). The SQL data type and its associated information are derived from the base XML Schema type.</p>
<p>An element declaration can specify its XML Schema data type in terms of any of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Any of the ways for specifying type for an attribute declaration. See <span class="q">&#34;<a href="xdb06stt.htm#GUID-73BF2445-E3AE-44AD-9DCE-669EFDD8299C" title="An XML attribute declaration can specify its XML Schema data type in terms of a primitive type, a local simpleType, a global simpleType, or a reference to a global attribute (ref=&#34;..&#34;). The SQL data type and its associated information are derived from the base XML Schema type.">XML Schema Attribute Data Types Mapped to SQL</a>&#34;</span>.</p>
</li>
<li>
<p>Global <code>complexType</code>, specified within this XML schema document or in an external XML schema.</p>
</li>
<li>
<p>Reference to a global element (<code>ref=&#34;...&#34;</code>), which could itself be within this XML schema document or in an external XML schema.</p>
</li>
<li>
<p>Local <code>complexType</code>.</p>
</li>
</ul>
</div>
<a id="ADXDB4533"></a>
<div class="props_rev_3"><a id="GUID-ED63CA4B-1200-4000-89A3-DA8B4E48E597"></a>
<h4 id="ADXDB-GUID-ED63CA4B-1200-4000-89A3-DA8B4E48E597" class="sect4"><span class="enumeration_section">18.3.3.1</span> Override of the SQLType Value in an XML Schema When Declaring Elements</h4>
<div>
<p>An element based on a <code>complexType</code> is, by default, mapped to a SQL object type that contains object attributes corresponding to each of its sub-elements and attributes. You can override this mapping by explicitly specifying a value for attribute <code>SQLType</code> in the input XML schema.</p>
<p>The following values for <code>SQLType</code> are permitted here:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>VARCHAR2</code></p>
</li>
<li>
<p><code>RAW</code></p>
</li>
<li>
<p><code>CLOB</code></p>
</li>
<li>
<p><code>BLOB</code></p>
</li>
</ul>
<p>These represent storage of the XML data in a text form in the database.</p>
<p>For example, to override the <code>SQLType</code> from <code>VARCHAR2</code> to <code>CLOB</code>, declare the <code>xdb</code> namespace using <code>xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;</code>, and then use <code>xdb:SQLType = &#34;CLOB&#34;</code>.</p>
<p>The following special cases are handled:</p>
<ul style="list-style-type: disc;">
<li>
<p>If a cycle is detected when processing the <code>complexType</code> values that are used to declare elements and the elements declared within the c<code>omplexType</code>, the <code>SQLInline</code> attribute is forced to be <code>false</code>, and the correct SQL mapping is set to <code>REF</code> <code>XMLType</code>.</p>
</li>
<li>
<p>If <code>maxOccurs &gt; 1</code>, a varray type might be created.</p>
<ul style="list-style-type: disc;">
<li>
<p>If <code>SQLInline</code> <code>= &#34;true&#34;</code>, then a varray type is created whose element type is the SQL data type previously determined. Cardinality of the varray is based on the value of attribute <code>maxOccurs</code>. Either you specify the name of the varray type using attribute <code>SQLCollType</code>, or it is derived from the element name.</p>
</li>
<li>
<p>If <code>SQLInline = &#34;false&#34;</code>, then the SQL data type is set to <code>XDB.XDB$XMLTYPE_REF_LIST_T</code>. This is a predefined data type that represents an array of <code>REF</code> values pointing to <code>XMLType</code> instances.</p>
</li>
</ul>
</li>
<li>
<p>If the element is a global element, or if <code>SQLInline = &#34;false&#34;</code>, then the system creates a default table. Either you specify the name of the default table, or it is derived from the element name.</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDB4535"></a><a id="ADXDB4536"></a><a id="ADXDB4537"></a><a id="ADXDB4538"></a><a id="ADXDB4539"></a><a id="ADXDB4540"></a><a id="ADXDB4534"></a>
<div class="props_rev_3"><a id="GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C"></a>
<h3 id="ADXDB-GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C" class="sect3"><span class="enumeration_section">18.3.4</span> How XML Schema simpleType Is Mapped to SQL</h3>
<div>
<p>XML <code>simpleType</code> is mapped to SQL object types in various ways, depending on how the <code>simpleType</code> is defined.</p>
<p><a href="xdb06stt.htm#GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C__CIHHFDHA">Figure 18-1</a> illustrates one such mapping, XML string type to SQL <code>VARCHAR2</code> or <code>CLOB</code>.</p>
<div class="figure" id="GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C__CIHHFDHA">
<p class="titleinfigure">Figure 18-1 simpleType Mapping: XML Strings to SQL VARCHAR2 or CLOB</p>
<img width="254" height="244" src="img/GUID-A7D574E6-4B84-4367-9DD9-C3B21D25043C-default.gif" alt="Description of Figure 18-1 follows" title="Description of Figure 18-1 follows"/><br/>
<a href="img_text/GUID-A7D574E6-4B84-4367-9DD9-C3B21D25043C-print.htm">Description of &#34;Figure 18-1 simpleType Mapping: XML Strings to SQL VARCHAR2 or CLOB&#34;</a></div>
<!-- class="figure" -->
<p><a href="xdb06stt.htm#GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C__CIHJFDGH" title="This table describes the mapping of XML string datatypes to SQL. It includes the default mapping.">Table 18-4</a> through <a href="xdb06stt.htm#GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C__CIHGIDDJ" title="This table describes the mapping of XML DATE datatype to SQL.">Table 18-7</a> present the default mapping of XML Schema <code>simpleType</code> to SQL, as specified in the XML Schema definition.</p>
<p>For example:</p>
<ul style="list-style-type: disc;">
<li>
<p>An XML Schema <span class="italic">primitive</span> type is mapped to the closest SQL data type. For example, <code>DECIMAL</code>, <code>POSITIVEINTEGER</code>, and <code>FLOAT</code> are all mapped to SQL <code>NUMBER</code>.</p>
</li>
<li>
<p>An XML Schema <span class="italic">enumeration</span> type is mapped to a SQL object type with a single <code>RAW(</code><span class="italic"><code>n</code></span><code>)</code> object attribute. The value of <span class="italic"><code>n</code></span> is determined by the number of possible values in the enumeration declaration.</p>
</li>
<li>
<p>An XML Schema <span class="italic">list</span> or a <span class="italic">union</span> type is mapped to a SQL string (<code>VARCHAR2</code> or <code>CLOB</code>) data type.</p>
</li>
</ul>
<div class="tblformalwide" id="GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C__CIHJFDGH">
<p class="titleintable">Table 18-4 XML Schema String Data Types Mapped to SQL</p>
<table class="cellalignment3431" title="XML Schema String Data Types Mapped to SQL " summary="This table describes the mapping of XML string datatypes to SQL. It includes the default mapping.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3467" id="d87739e3509">XML Schema String Type</th>
<th class="cellalignment3472" id="d87739e3512">Length or MaxLength Facet</th>
<th class="cellalignment3449" id="d87739e3515">Default SQL Data Type</th>
<th class="cellalignment3460" id="d87739e3518">Compatible SQL Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3470" id="d87739e3523" headers="d87739e3509">
<p><code>string</code></p>
</td>
<td class="cellalignment3473" headers="d87739e3523 d87739e3512">
<p>n</p>
</td>
<td class="cellalignment3451" headers="d87739e3523 d87739e3515">
<p><code>VARCHAR2(n)</code> if <code>n</code> &lt; 4000, else <code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3463" headers="d87739e3523 d87739e3518">
<p><code>CHAR</code>, <code>CLOB</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3470" id="d87739e3548" headers="d87739e3509">
<p><code>string</code></p>
</td>
<td class="cellalignment3473" headers="d87739e3548 d87739e3512">
<p>-</p>
</td>
<td class="cellalignment3451" headers="d87739e3548 d87739e3515">
<p><code>VARCHAR2(4000)</code> if <code>mapUnboundedStringToLob = &#34;false&#34;</code>, <code>CLOB</code></p>
</td>
<td class="cellalignment3463" headers="d87739e3548 d87739e3518">
<p><code>CHAR</code>, <code>CLOB</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="tblformalwide" id="GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C__GUID-1F77BC9E-C5F8-4877-9F9D-A6FDBDB6BADB">
<p class="titleintable">Table 18-5 XML Schema Binary Data Types (hexBinary/base64Binary) Mapped to SQL</p>
<table class="cellalignment3431" title="XML Schema Binary Data Types (hexBinary/base64Binary) Mapped to SQL " summary="This table describes the mapping of binary datatypes to SQL. It includes the default mapping.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3432" id="d87739e3584">XML Schema Binary Type</th>
<th class="cellalignment3472" id="d87739e3587">Length or MaxLength Facet</th>
<th class="cellalignment3425" id="d87739e3590">Default SQL Data Type</th>
<th class="cellalignment3472" id="d87739e3593">Compatible SQL Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3434" id="d87739e3598" headers="d87739e3584">
<p><code>hexBinary</code>, <code>base64Binary</code></p>
</td>
<td class="cellalignment3473" headers="d87739e3598 d87739e3587">
<p>n</p>
</td>
<td class="cellalignment3426" headers="d87739e3598 d87739e3590">
<p><code>RAW(n)</code> if <code>n</code> &lt; 2000, else <code>RAW(2000)</code></p>
</td>
<td class="cellalignment3473" headers="d87739e3598 d87739e3593">
<p><code>RAW</code>, <code>BLOB</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3434" id="d87739e3626" headers="d87739e3584">
<p><code>hexBinary</code>, <code>base64Binary</code></p>
</td>
<td class="cellalignment3473" headers="d87739e3626 d87739e3587">
<p>-</p>
</td>
<td class="cellalignment3426" headers="d87739e3626 d87739e3590">
<p><code>RAW(2000)</code> if <code>mapUnboundedStringToLob = &#34;false&#34;</code>, <code>BLOB</code></p>
</td>
<td class="cellalignment3473" headers="d87739e3626 d87739e3593">
<p><code>RAW</code>, <code>BLOB</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="tblformalwide" id="GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C__GUID-FEC3D7EF-86BE-4E99-BC3D-76307B2341B2">
<p class="titleintable">Table 18-6 Default Mapping of Numeric XML Schema Primitive Types to SQL</p>
<table class="cellalignment3431" title="Default Mapping of Numeric XML Schema Primitive Types to SQL" summary="This table describes the default mapping of numeric XML primitive types to SQL. It includes the default data type.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3474" id="d87739e3665">XML Schema Simple Type</th>
<th class="cellalignment3475" id="d87739e3668">Default SQL Data Type</th>
<th class="cellalignment3432" id="d87739e3671">totalDigits (m), fractionDigits(n) Specified</th>
<th class="cellalignment3476" id="d87739e3674">Compatible SQL Data Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3679" headers="d87739e3665">
<p><code>float</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3679 d87739e3668">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3679 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3679 d87739e3674">
<p><code>FLOAT</code>, <code>DOUBLE</code>, <code>BINARY_FLOAT</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3702" headers="d87739e3665">
<p><code>double</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3702 d87739e3668">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3702 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3702 d87739e3674">
<p><code>FLOAT</code>, <code>DOUBLE</code>, <code>BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3725" headers="d87739e3665">
<p><code>decimal</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3725 d87739e3668">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3725 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3725 d87739e3674">
<p><code>FLOAT</code>, <code>DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3745" headers="d87739e3665">
<p><code>integer</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3745 d87739e3668">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3745 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3745 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3762" headers="d87739e3665">
<p><code>nonNegativeInteger</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3762 d87739e3668">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3762 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3762 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3779" headers="d87739e3665">
<p><code>positiveInteger</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3779 d87739e3668">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3779 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3779 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3796" headers="d87739e3665">
<p><code>nonPositiveInteger</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3796 d87739e3668">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3796 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3796 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3813" headers="d87739e3665">
<p><code>negativeInteger</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3813 d87739e3668">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3813 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3813 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3830" headers="d87739e3665">
<p><code>long</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3830 d87739e3668">
<p><code>NUMBER(20)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3830 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3830 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3847" headers="d87739e3665">
<p><code>unsignedLong</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3847 d87739e3668">
<p><code>NUMBER(20)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3847 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3847 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3864" headers="d87739e3665">
<p><code>int</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3864 d87739e3668">
<p><code>NUMBER(10)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3864 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3864 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3882" headers="d87739e3665">
<p><code>unsignedInt</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3882 d87739e3668">
<p><code>NUMBER(10)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3882 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3882 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3899" headers="d87739e3665">
<p><code>short</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3899 d87739e3668">
<p><code>NUMBER(5)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3899 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3899 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3916" headers="d87739e3665">
<p><code>unsignedShort</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3916 d87739e3668">
<p><code>NUMBER(5)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3916 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3916 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3933" headers="d87739e3665">
<p><code>byte</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3933 d87739e3668">
<p><code>NUMBER(3)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3933 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3933 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3477" id="d87739e3950" headers="d87739e3665">
<p><code>unsignedByte</code></p>
</td>
<td class="cellalignment3478" headers="d87739e3950 d87739e3668">
<p><code>NUMBER(3)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e3950 d87739e3671">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment3479" headers="d87739e3950 d87739e3674">
<p><code>NUMBER</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="tblformalwide" id="GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C__CIHGIDDJ">
<p class="titleintable">Table 18-7 XML Schema Date and Time Data Types Mapped to SQL</p>
<table class="cellalignment3431" title="XML Schema Date and Time Data Types Mapped to SQL " summary="This table describes the mapping of XML DATE datatype to SQL.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3480" id="d87739e3977">XML Schema Date or Time Type</th>
<th class="cellalignment3481" id="d87739e3980">Default SQL Data Type</th>
<th class="cellalignment3482" id="d87739e3983">Compatible SQL Data Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3483" id="d87739e3988" headers="d87739e3977">
<p><code>dateTime</code></p>
</td>
<td class="cellalignment3484" headers="d87739e3988 d87739e3980">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment3485" headers="d87739e3988 d87739e3983">
<p><code>TIMESTAMP WITH TIME ZONE</code>, <code>DATE</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3483" id="d87739e4004" headers="d87739e3977">
<p><code>time</code></p>
</td>
<td class="cellalignment3484" headers="d87739e4004 d87739e3980">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment3485" headers="d87739e4004 d87739e3983">
<p><code>TIMESTAMP WITH TIME ZONE</code>, <code>DATE</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3483" id="d87739e4020" headers="d87739e3977">
<p><code>date</code></p>
</td>
<td class="cellalignment3484" headers="d87739e4020 d87739e3980">
<p><code>DATE</code></p>
</td>
<td class="cellalignment3485" headers="d87739e4020 d87739e3983">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3483" id="d87739e4033" headers="d87739e3977">
<p><code>gDay</code></p>
</td>
<td class="cellalignment3484" headers="d87739e4033 d87739e3980">
<p><code>DATE</code></p>
</td>
<td class="cellalignment3485" headers="d87739e4033 d87739e3983">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3483" id="d87739e4046" headers="d87739e3977">
<p><code>gMonth</code></p>
</td>
<td class="cellalignment3484" headers="d87739e4046 d87739e3980">
<p><code>DATE</code></p>
</td>
<td class="cellalignment3485" headers="d87739e4046 d87739e3983">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3483" id="d87739e4059" headers="d87739e3977">
<p><code>gYear</code></p>
</td>
<td class="cellalignment3484" headers="d87739e4059 d87739e3980">
<p><code>DATE</code></p>
</td>
<td class="cellalignment3485" headers="d87739e4059 d87739e3983">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3483" id="d87739e4072" headers="d87739e3977">
<p><code>gYearMonth</code></p>
</td>
<td class="cellalignment3484" headers="d87739e4072 d87739e3980">
<p><code>DATE</code></p>
</td>
<td class="cellalignment3485" headers="d87739e4072 d87739e3983">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3483" id="d87739e4085" headers="d87739e3977">
<p><code>gMonthDay</code></p>
</td>
<td class="cellalignment3484" headers="d87739e4085 d87739e3980">
<p><code>DATE</code></p>
</td>
<td class="cellalignment3485" headers="d87739e4085 d87739e3983">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3483" id="d87739e4098" headers="d87739e3977">
<p><code>duration</code></p>
</td>
<td class="cellalignment3484" headers="d87739e4098 d87739e3980">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3485" headers="d87739e4098 d87739e3983">
<p>none</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="tblformalwide" id="GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C__GUID-B26BBA39-EB38-4C85-9E77-AAB58E3BB21F">
<p class="titleintable">Table 18-8 Default Mapping of Other XML Schema Primitive and Derived Data Types to SQL</p>
<table class="cellalignment3431" title="Default Mapping of Other XML Schema Primitive and Derived Data Types to SQL" summary="This table describes the default mapping of other XML primitive datatypes to SQL.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3486" id="d87739e4120">XML Schema Primitive or Derived Type</th>
<th class="cellalignment3487" id="d87739e4123">Default SQL Data Type</th>
<th class="cellalignment3432" id="d87739e4126">Compatible SQL Data Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4131" headers="d87739e4120">
<p><code>boolean</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4131 d87739e4123">
<p><code>RAW(1)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4131 d87739e4126">
<p><code>VARCHAR2</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4144" headers="d87739e4120">
<p><code>language(string)</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4144 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4144 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4160" headers="d87739e4120">
<p><code>NMTOKEN(string)</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4160 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4160 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4176" headers="d87739e4120">
<p><code>NMTOKENS(string)</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4176 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4176 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4192" headers="d87739e4120">
<p><code>Name(string)</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4192 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4192 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4208" headers="d87739e4120">
<p><code>NCName(string)</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4208 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4208 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4224" headers="d87739e4120">
<p><code>ID</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4224 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4224 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4240" headers="d87739e4120">
<p><code>IDREF</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4240 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4240 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4256" headers="d87739e4120">
<p><code>IDREFS</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4256 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4256 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4272" headers="d87739e4120">
<p><code>ENTITY</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4272 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4272 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4289" headers="d87739e4120">
<p><code>ENTITIES</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4289 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4289 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4306" headers="d87739e4120">
<p><code>NOTATION</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4306 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4306 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4322" headers="d87739e4120">
<p><code>anyURI</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4322 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4322 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4338" headers="d87739e4120">
<p><code>anyType</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4338 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4338 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4354" headers="d87739e4120">
<p><code>anySimpleType</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4354 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4354 d87739e4126">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4370" headers="d87739e4120">
<p><code>QName</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4370 d87739e4123">
<p><code>XDB.XDB$QNAME</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4370 d87739e4126">
<p>none</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4382" headers="d87739e4120">
<p><code>normalizedString</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4382 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4382 d87739e4126">
<p>none</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3488" id="d87739e4394" headers="d87739e4120">
<p><code>token</code></p>
</td>
<td class="cellalignment3489" headers="d87739e4394 d87739e4123">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3434" headers="d87739e4394 d87739e4126">
<p>none</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<a id="ADXDB4541"></a>
<div class="props_rev_3"><a id="GUID-07098CDC-609B-4A81-A112-0B54A27A103A"></a>
<h4 id="ADXDB-GUID-07098CDC-609B-4A81-A112-0B54A27A103A" class="sect4"><span class="enumeration_section">18.3.4.1</span> NCHAR, NVARCHAR2, and NCLOB SQLType Values Are Not Supported for SQLType</h4>
<div>
<p>Oracle XML&nbsp;DB does <span class="italic">not</span> support <code>NCHAR</code>, <code>NVARCHAR2</code>, and <code>NCLOB</code> as values for attribute <code>SQLType</code>: You cannot specify that an XML element or attribute is to be of type <code>NCHAR</code>, <code>NVARCHAR2</code>, or <code>NCLOB</code>. Also, if you provide your own data type, do not use any of these data types.</p>
<div class="infoboxnotealso" id="GUID-07098CDC-609B-4A81-A112-0B54A27A103A__GUID-0DCA1AFD-2867-4A90-9146-E21CDF9B8805">
<p class="notep1">See Also:</p>
<p><a href="appjspec.htm#GUID-149CBDAE-C2DA-4D44-A1E4-30F31CD1E4C3" title="The restrictions associated with Oracle XML&nbsp;DB are listed here.">Oracle XML&nbsp;DB Restrictions</a></p>
</div>
</div>
</div>
<a id="ADXDB4542"></a>
<div class="props_rev_3"><a id="GUID-0F8F7480-56F4-4910-9FD6-8566A1F70BC6"></a>
<h4 id="ADXDB-GUID-0F8F7480-56F4-4910-9FD6-8566A1F70BC6" class="sect4"><span class="enumeration_section">18.3.4.2</span> simpleType: How XML Strings Are Mapped to SQL VARCHAR2 Versus CLOB</h4>
<div>
<p>If an XML schema specifies a data type as a string with <code>maxLength</code> less than 4000, it is mapped to a <code>VARCHAR2</code> object attribute of the specified length. If <code>maxLength</code> is not specified in the schema then the XML Schema data type can only be mapped to a LOB.</p>
<p>This is sub-optimal when most of the string values are small and only a small fraction of them are large enough to need a LOB.</p>
<div class="infoboxnotealso" id="GUID-0F8F7480-56F4-4910-9FD6-8566A1F70BC6__GUID-0524D69D-BEFA-4092-8E7E-81DF86762A79">
<p class="notep1">See Also:</p>
<p><a href="xdb06stt.htm#GUID-4920BA1A-5769-49C6-870E-E3CA30F0016C__CIHJFDGH" title="This table describes the mapping of XML string datatypes to SQL. It includes the default mapping.">Table 18-4</a></p>
</div>
</div>
</div>
<a id="ADXDB4543"></a>
<div class="props_rev_3"><a id="GUID-F6855A35-3E83-4837-ABE9-320498CCC45B"></a>
<h4 id="ADXDB-GUID-F6855A35-3E83-4837-ABE9-320498CCC45B" class="sect4"><span class="enumeration_section">18.3.4.3</span> How XML Schema Time Zones Are Mapped to SQL</h4>
<div>
<p>If your application needs to work with time-zone indicators, then use attribute <code>SQLType</code> to specify the SQL data type as <code>TIMESTAMP WITH TIME ZONE</code>. This ensures that values containing time-zone indicators can be stored and retrieved correctly.</p>
<p>The following XML Schema data types allow for an optional time-zone indicator as part of their literal values:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>xsd:dateTime</code></p>
</li>
<li>
<p><code>xsd:time</code></p>
</li>
<li>
<p><code>xsd:date</code></p>
</li>
<li>
<p><code>xsd:gYear</code></p>
</li>
<li>
<p><code>xsd:gMonth</code></p>
</li>
<li>
<p><code>xsd:gDay</code></p>
</li>
<li>
<p><code>xsd:gYearMonth</code></p>
</li>
<li>
<p><code>xsd:gMonthDay</code></p>
</li>
</ul>
<p>By default, XML schema registration maps <code>xsd:dateTime</code> and <code>xsd:time</code> to SQL data type <code>TIMESTAMP</code>, and it maps all other date types to SQL data type <code>DATE</code>.</p>
<p>SQL data types <code>TIMESTAMP</code> and <code>DATE</code> do not permit a time-zone indicator. For this reason, if your application needs time-zone information then you must use attribute <code>SQLType</code> to specify SQL data type <code>TIMESTAMP WITH TIME ZONE</code>. For example:</p>
<pre dir="ltr">&lt;element name=&#34;dob&#34; type=&#34;xsd:dateTime&#34;
          xdb:SQLType=&#34;<span class="bold">TIMESTAMP WITH TIME ZONE</span>&#34;/&gt;
&lt;attribute name=&#34;endofquarter&#34; type=&#34;xsd:gMonthDay&#34;
           xdb:SQLType=&#34;<span class="bold">TIMESTAMP WITH TIME ZONE</span>&#34;/&gt;
</pre></div>
<a id="ADXDB4544"></a>
<div class="props_rev_3"><a id="GUID-E2EA0A87-F6F2-4512-9129-54DB1B714304"></a>
<h5 id="ADXDB-GUID-E2EA0A87-F6F2-4512-9129-54DB1B714304" class="sect5"><span class="enumeration_section">18.3.4.3.1</span> Use Trailing Z to Indicate UTC Time Zone</h5>
<div>
<p>You can specify an XML Schema time-zone component as <code>Z</code>, to indicate UTC time zone. When a value with a trailing <code>Z</code> is stored as SQL <code>TIMESTAMP WITH TIME ZONE</code>, the time zone is actually stored as <code>+00:00</code>. The retrieved value contains the trailing <code>+00:00</code> and not the original <code>Z</code>.</p>
<p>For example, if the value in an input XML document is <code>1973-02-12T13:44:32</code><span class="bold"><code>Z</code></span> then the output is <code>1973-02-12T13:44:32</code><span class="bold"><code>.000000+00:00</code></span>.</p>
</div>
</div>
</div>
</div>
<a id="ADXDB4545"></a>
<div class="props_rev_3"><a id="GUID-EEE8E9EE-0397-4EE9-8496-DB20B1A82CC1"></a>
<h3 id="ADXDB-GUID-EEE8E9EE-0397-4EE9-8496-DB20B1A82CC1" class="sect3"><span class="enumeration_section">18.3.5</span> How XML Schema complexType Is Mapped to SQL</h3>
<div>
<p>XML <code>complexType</code> is mapped to SQL object types in various ways, depending on how the <code>complexType</code> is defined.</p>
<p>Using XML Schema, a <code>complexType</code> is mapped to a SQL object type as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>XML attributes declared within the <code>complexType</code> are mapped to SQL object attributes. The <code>simpleType</code> defining an XML attribute determines the SQL data type of the corresponding object attribute.</p>
</li>
<li>
<p>XML elements declared within the <code>complexType</code> are also mapped to SQL object attributes. The <code>simpleType</code> or <code>complexType</code> defining an XML element determines the SQL data type of the corresponding object attribute.</p>
</li>
</ul>
<p>If the XML element is declared with attribute <code>maxOccurs</code> &gt; 1 then it is mapped to a SQL collection (object) attribute. The collection could be a varray value (the default, recommended) or an unordered table (if you set deprecated attribute <code>xdb:maintainOrder</code><a id="GUID-EEE8E9EE-0397-4EE9-8496-DB20B1A82CC1__CIHEAHFI" href="#GUID-EEE8E9EE-0397-4EE9-8496-DB20B1A82CC1__CIHEAHFI" onclick="footdisplay(8,&#34;XML Schema annotations xdb:maintainOrder and xdb:storeVarrayAsTable are deprecated, starting with Oracle Database 12c Release 1 (12.1.0.1). &#34;)"><sup>Foot&nbsp;8</sup></a> to <code>false</code>). The default storage of a varray value is an ordered collections table (OCT). You can choose LOB storage instead, by setting deprecated attribute <code>xdb:storeVarrayAsTable</code><a id="fnsrc_d87739e4764" href="#fnsrc_d87739e4764" onclick="footdisplay(8,&#34;XML Schema annotations xdb:maintainOrder and xdb:storeVarrayAsTable are deprecated, starting with Oracle Database 12c Release 1 (12.1.0.1). &#34;)"><sup>Footref&nbsp;8</sup></a> to <code>false</code>.</p>
</div>
<a id="ADXDB4546"></a>
<div class="props_rev_3"><a id="GUID-34E0393B-7055-4410-AA12-EC9B859211A0"></a>
<h4 id="ADXDB-GUID-34E0393B-7055-4410-AA12-EC9B859211A0" class="sect4"><span class="enumeration_section">18.3.5.1</span> Attribute Specification in a complexType XML Schema Declaration</h4>
<div>
<p>When an element is based on a global <code>complexType</code>, attribute <code>SQLType</code> must be specified for the <code>complexType</code> declaration. You can optionally include the same <code>SQLType</code> attribute within the element declaration.</p>
<p>If you do not specify attribute <code>SQLType</code> for the global <code>complexType</code>, Oracle XML&nbsp;DB creates a <code>SQLType</code> attribute with an internally generated name. The elements that reference this global type <span class="italic">cannot</span> then have a different value for <code>SQLType</code>. The following code is acceptable:</p>
<pre dir="ltr">  &lt;xs:complexType name=&#34;LineItemsType&#34; xdb:SQLType=&#34;LINEITEMS_T&#34;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&#34;LineItem&#34; type=&#34;LineItemType&#34; maxOccurs=&#34;unbounded&#34; 
                  xdb:SQLName=&#34;LINEITEM&#34; xdb:SQLCollType=&#34;LINEITEM_V&#34;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name=&#34;LineItemType&#34; xdb:SQLType=&#34;LINEITEM_T&#34;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&#34;Description&#34; type=&#34;DescriptionType&#34; 
                  xdb:SQLName=&#34;DESCRIPTION&#34;/&gt;
      &lt;xs:element name=&#34;Part&#34; type=&#34;PartType&#34; xdb:SQLName=&#34;PART&#34;/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name=&#34;ItemNumber&#34; type=&#34;xs:integer&#34; xdb:SQLName=&#34;ITEMNUMBER&#34; 
                  xdb:SQLType=&#34;NUMBER&#34;/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name=&#34;PartType&#34; xdb:SQLType=&#34;PART_T&#34;&gt;
    &lt;xs:attribute name=&#34;Id&#34; xdb:SQLName=&#34;PART_NUMBER&#34; xdb:SQLType=&#34;VARCHAR2&#34;&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base=&#34;xs:string&#34;&gt;
          &lt;xs:minLength value=&#34;10&#34;/&gt;
          &lt;xs:maxLength value=&#34;14&#34;/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
    &lt;xs:attribute name=&#34;Quantity&#34; type=&#34;moneyType&#34; xdb:SQLName=&#34;QUANTITY&#34;/&gt;
    &lt;xs:attribute name=&#34;UnitPrice&#34; type=&#34;quantityType&#34; xdb:SQLName=&#34;UNITPRICE&#34;/&gt;
  &lt;/xs:complexType&gt;
</pre></div>
</div>
</div>
</div>
<a id="ADXDB4639"></a>
<div class="props_rev_3"><a id="GUID-9E0CF72F-9E08-4CB8-ABBC-66F8ECEF949B"></a>
<h2 id="ADXDB-GUID-9E0CF72F-9E08-4CB8-ABBC-66F8ECEF949B" class="sect2"><span class="enumeration_section">18.4</span> complexType Extensions and Restrictions in Oracle XML&nbsp;DB</h2>
<div>
<p>In XML Schema, <code>complexType</code> values are declared based on <code>complexContent</code> and <code>simpleContent</code>. Oracle XML&nbsp;DB defines various extensions and restrictions to <code>complexType</code>.</p>
<ul style="list-style-type: disc;">
<li>
<p><code>simpleContent</code> is declared as an extension of <code>simpleType</code>.</p>
</li>
<li>
<p><code>complexContent</code> is declared as one of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Base type</p>
</li>
<li>
<p><code>complexType</code> extension</p>
</li>
<li>
<p><code>complexType</code> restriction</p>
</li>
</ul>
</li>
</ul>
</div>
<a id="ADXDB4641"></a><a id="ADXDB4642"></a><a id="ADXDB4640"></a>
<div class="props_rev_3"><a id="GUID-F1674D49-86AF-4B3E-9331-10C285DF1502"></a>
<h3 id="ADXDB-GUID-F1674D49-86AF-4B3E-9331-10C285DF1502" class="sect3"><span class="enumeration_section">18.4.1</span> complexType Declarations in XML Schema: Handling Inheritance</h3>
<div>
<p>For <code>complexType</code>, Oracle XML&nbsp;DB handles inheritance in an XML schema differently for types that extend and types that restrict other complex types</p>
<ul style="list-style-type: disc;">
<li>
<p>For complex types declared to <span class="italic">extend</span> other complex types, the SQL type corresponding to the base type is specified as the supertype for the current SQL type. Only the additional attributes and elements declared in the sub-complextype are added as attributes to the sub-object-type.</p>
</li>
<li>
<p>For complex types declared to <span class="italic">restrict</span> other complex types, the SQL type for the sub-complex type is set to be the same as the SQL type for its base type. This is because SQL does not support restriction of object types through the inheritance mechanism. Any constraints are imposed by the restriction in XML schema.</p>
</li>
</ul>
<p><a href="xdb06stt.htm#GUID-F1674D49-86AF-4B3E-9331-10C285DF1502__BHABGCDF">Example 18-9</a> shows the registration of an XML schema that defines a base <code>complexType</code> <code>Address</code> and two extensions <code>USAddress</code> and <code>IntlAddress</code>.</p>
<div class="infobox-note" id="GUID-F1674D49-86AF-4B3E-9331-10C285DF1502__GUID-0FF85054-0239-466C-AC59-5C44F50A5510">
<p class="notep1">Note:</p>
<p>Type <code>intladdr_t</code> is created as a <span class="italic">final</span> type because the corresponding <code>complexType</code> specifies the &#34;<code>final</code>&#34; attribute. By default, all <code>complexTypes</code> can be extended and restricted by other types, so all SQL object types are created as types that are <span class="italic">not</span> final.</p>
</div>
<pre dir="ltr">CREATE TYPE addr_t AS OBJECT(SYS_XDBPD$ XDB.XDB$RAW_LIST_T,
                             &#34;street&#34; VARCHAR2(4000),
                             &#34;city&#34; VARCHAR2(4000)) NOT FINAL;
CREATE TYPE usaddr_t UNDER addr_t (&#34;zip&#34; VARCHAR2(4000)) NOT FINAL;
CREATE TYPE intladdr_t UNDER addr_t (&#34;country&#34; VARCHAR2(4000)) FINAL;
</pre>
<p><a href="xdb06stt.htm#GUID-F1674D49-86AF-4B3E-9331-10C285DF1502__BHAHEIHC">Example 18-10</a> shows the registration of an XML schema that defines a base <code>complexType</code> <code>Address</code> and a restricted type <code>LocalAddress</code> that prohibits the specification of <code>country</code> attribute.</p>
<p>Because SQL inheritance does not support a notion of restriction, the SQL data type corresponding to a restricted <code>complexType</code> is a empty subtype of the parent object type. For the XML schema of <a href="xdb06stt.htm#GUID-F1674D49-86AF-4B3E-9331-10C285DF1502__BHAHEIHC">Example 18-10</a>, Oracle XML&nbsp;DB generates the following SQL types:</p>
<pre dir="ltr">CREATE TYPE addr_t AS OBJECT (SYS_XDBPD$ XDB.XDB$RAW_LIST_T,
                              &#34;street&#34;   VARCHAR2(4000),
                              &#34;city&#34;     VARCHAR2(4000),
                              &#34;zip&#34;      VARCHAR2(4000),
                              &#34;country&#34;  VARCHAR2(4000)) NOT FINAL;
CREATE TYPE usaddr_t UNDER addr_t;
</pre>
<div class="example" id="GUID-F1674D49-86AF-4B3E-9331-10C285DF1502__BHABGCDF">
<p class="titleinexample">Example 18-9 XML Schema Inheritance: complexContent as an Extension of complexTypes</p>
<pre dir="ltr">DECLARE
  doc VARCHAR2(3000) :=
    &#39;&lt;xs:schema xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34; 
                xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt;
       &lt;xs:complexType name=&#34;Address&#34; xdb:SQLType=&#34;ADDR_T&#34;&gt;
         &lt;xs:sequence&gt;
           &lt;xs:element name=&#34;street&#34; type=&#34;xs:string&#34;/&gt;
           &lt;xs:element name=&#34;city&#34; type=&#34;xs:string&#34;/&gt;
         &lt;/xs:sequence&gt;
       &lt;/xs:complexType&gt;
       &lt;xs:complexType name=&#34;USAddress&#34; xdb:SQLType=&#34;USADDR_T&#34;&gt;
         &lt;xs:complexContent&gt;
           &lt;xs:extension base=&#34;Address&#34;&gt;
             &lt;xs:sequence&gt;
               &lt;xs:element name=&#34;zip&#34; type=&#34;xs:string&#34;/&gt;
             &lt;/xs:sequence&gt;
           &lt;/xs:extension&gt;
         &lt;/xs:complexContent&gt;
       &lt;/xs:complexType&gt;
       &lt;xs:complexType name=&#34;IntlAddress&#34; final=&#34;#all&#34; xdb:SQLType=&#34;INTLADDR_T&#34;&gt;
         &lt;xs:complexContent&gt;
           &lt;xs:extension base=&#34;Address&#34;&gt;
             &lt;xs:sequence&gt;
               &lt;xs:element name=&#34;country&#34; type=&#34;xs:string&#34;/&gt;
             &lt;/xs:sequence&gt;
           &lt;/xs:extension&gt;
         &lt;/xs:complexContent&gt;
       &lt;/xs:complexType&gt;
     &lt;/xs:schema&gt;&#39;;
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.oracle.com/PO.xsd&#39;,
    SCHAMEDOC =&gt; doc);
END;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-F1674D49-86AF-4B3E-9331-10C285DF1502__BHAHEIHC">
<p class="titleinexample">Example 18-10 Inheritance in XML Schema: Restrictions in complexTypes</p>
<pre dir="ltr">DECLARE
  doc varchar2(3000) :=
    &#39;&lt;xs:schema xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34; 
                xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt;
       &lt;xs:complexType name=&#34;Address&#34; xdb:SQLType=&#34;ADDR_T&#34;&gt;
         &lt;xs:sequence&gt;
           &lt;xs:element name=&#34;street&#34; type=&#34;xs:string&#34;/&gt;
           &lt;xs:element name=&#34;city&#34; type=&#34;xs:string&#34;/&gt;
           &lt;xs:element name=&#34;zip&#34; type=&#34;xs:string&#34;/&gt;
           &lt;xs:element name=&#34;country&#34; type=&#34;xs:string&#34; minOccurs=&#34;0&#34;
                       maxOccurs=&#34;1&#34;/&gt;
         &lt;/xs:sequence&gt;
       &lt;/xs:complexType&gt;
       &lt;xs:complexType name=&#34;LocalAddress&#34; xdb:SQLType=&#34;USADDR_T&#34;&gt;
         &lt;xs:complexContent&gt;
           &lt;xs:restriction base=&#34;Address&#34;&gt;
             &lt;xs:sequence&gt;
               &lt;xs:element name=&#34;street&#34; type=&#34;xs:string&#34;/&gt;
               &lt;xs:element name=&#34;city&#34; type=&#34;xs:string&#34;/&gt;
               &lt;xs:element name=&#34;zip&#34; type=&#34;xs:string&#34;/&gt;
               &lt;xs:element name=&#34;country&#34; type=&#34;xs:string&#34; 
                           minOccurs=&#34;0&#34; maxOccurs=&#34;0&#34;/&gt;
             &lt;/xs:sequence&gt;
           &lt;/xs:restriction&gt;
         &lt;/xs:complexContent&gt;
       &lt;/xs:complexType&gt;
     &lt;/xs:schema&gt;&#39;;
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.oracle.com/PO.xsd&#39;,
    SCHEMADOC =&gt; doc);
END;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4644"></a><a id="ADXDB4643"></a>
<div class="props_rev_3"><a id="GUID-D7A801E3-9051-4203-9BD1-F2385E20609C"></a>
<h3 id="ADXDB-GUID-D7A801E3-9051-4203-9BD1-F2385E20609C" class="sect3"><span class="enumeration_section">18.4.2</span> How a complexType Based on simpleContent Is Mapped to an Object Type</h3>
<div>
<p>A complex type based on a <code>simpleContent</code> declaration is mapped to an object type with attributes corresponding to the XML attributes and an extra <code>SYS_XDBBODY$</code> attribute, which corresponds to the body value. The data type of the body attribute is based on a <code>simpleType</code> that defines the body type.</p>
<p>For the XML schema of <a href="xdb06stt.htm#GUID-D7A801E3-9051-4203-9BD1-F2385E20609C__BHAFGHGJ">Example 18-11</a>, Oracle XML&nbsp;DB generates the following type:</p>
<pre dir="ltr">CREATE TYPE obj_t AS OBJECT(SYS_XDBPD$ XDB.XDB$RAW_LIST_T, 
                            SYS_XDBBODY$ VARCHAR2(4000));
</pre>
<div class="example" id="GUID-D7A801E3-9051-4203-9BD1-F2385E20609C__BHAFGHGJ">
<p class="titleinexample">Example 18-11 XML Schema complexType: Mapping complexType to simpleContent</p>
<pre dir="ltr">DECLARE
  doc VARCHAR2(3000) :=
    &#39;&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;               
             targetNamespace=&#34;http://www.oracle.com/emp.xsd&#34;      
             xmlns:emp=&#34;http://www.oracle.com/emp.xsd&#34; 
             xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt; 
       &lt;complexType name=&#34;name&#34; xdb:SQLType=&#34;OBJ_T&#34;&gt; 
         &lt;simpleContent&gt; 
           &lt;restriction base=&#34;string&#34;&gt; 
           &lt;/restriction&gt; 
         &lt;/simpleContent&gt; 
       &lt;/complexType&gt;
     &lt;/schema&gt;&#39;;
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.oracle.com/emp.xsd&#39;,
    SCHEMADOC =&gt; doc);
END;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4646"></a><a id="ADXDB4645"></a>
<div class="props_rev_3"><a id="GUID-9A48AE16-7F55-4376-8DE1-CEF04BC2000E"></a>
<h3 id="ADXDB-GUID-9A48AE16-7F55-4376-8DE1-CEF04BC2000E" class="sect3"><span class="enumeration_section">18.4.3</span> How any and anyAttribute Declarations Are Mapped to Object Type Attributes</h3>
<div>
<p>Oracle XML&nbsp;DB maps the element declaration <code>any</code>and the attribute declaration <code>anyAttribute</code>to <code>VARCHAR2</code> attributes, or optionally to Large Objects (LOBs), in the created object type. The object attribute stores the text of the XML fragment that matches the <code>any</code> declaration.</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code>namespace</code> attribute can be used to restrict the contents so that they belong to a specified namespace.</p>
</li>
<li>
<p>The <code>processContents</code> attribute within the <code>any</code> element declaration, indicates the level of validation required for the contents matching the <code>any</code> declaration.</p>
</li>
</ul>
<p>The code in <a href="xdb06stt.htm#GUID-9A48AE16-7F55-4376-8DE1-CEF04BC2000E__BHACFACC">Example 18-12</a> declares an <code>any</code> element and maps it to the column <code>SYS_XDBANY$</code>, in object type <code>obj_t</code>. It also declares that attribute <code>processContents</code> does not validate contents that match the <code>any</code> declaration.</p>
<p>For the XML schema of <a href="xdb06stt.htm#GUID-9A48AE16-7F55-4376-8DE1-CEF04BC2000E__BHACFACC">Example 18-12</a>, Oracle XML&nbsp;DB generates the following type:</p>
<pre dir="ltr">CREATE TYPE obj_t AS OBJECT(SYS_XDBPD$ XDB.XDB$RAW_LIST_T,
                            Name VARCHAR2(4000), 
                            Age NUMBER, 
                            SYS_XDBANY$ VARCHAR2(4000));
</pre>
<div class="example" id="GUID-9A48AE16-7F55-4376-8DE1-CEF04BC2000E__BHACFACC">
<p class="titleinexample">Example 18-12 XML Schema: Mapping complexType to any/anyAttribute</p>
<pre dir="ltr">DECLARE
  doc VARCHAR2(3000) :=
    &#39;&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;  
             targetNamespace=&#34;http://www.oracle.com/any.xsd&#34; 
             xmlns:emp=&#34;http://www.oracle.com/any.xsd&#34; 
             xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt;
       &lt;complexType name=&#34;Employee&#34; xdb:SQLType=&#34;OBJ_T&#34;&gt;
         &lt;sequence&gt;
           &lt;element name=&#34;Name&#34; type=&#34;string&#34;/&gt;
           &lt;element name=&#34;Age&#34; type=&#34;decimal&#34;/&gt;
           &lt;<span class="bold">any</span> namespace=&#34;http://www/w3.org/2001/xhtml&#34;
                <span class="bold">processContents=&#34;skip&#34;</span>/&gt;
         &lt;/sequence&gt;
       &lt;/complexType&gt;
     &lt;/schema&gt;&#39;;
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.oracle.com/emp.xsd&#39;,
    SCHEMADOC =&gt; doc);
END;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB6318"></a><a id="ADXDB6319"></a><a id="ADXDB6320"></a><a id="ADXDB6317"></a>
<div class="props_rev_3"><a id="GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71"></a>
<h2 id="ADXDB-GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71" class="sect2"><span class="enumeration_section">18.5</span> Creating XML Schema-Based XMLType Columns and Tables</h2>
<div>
<p>After an XML schema has been registered with Oracle XML&nbsp;DB, you can reference it when you define <code>XMLType</code> tables or columns.</p>
<div class="section">
<p>If you specify no storage model when creating an <code>XMLType</code> table or column for XML Schema-based data then the storage model used is that specified during registration of the referenced XML schema. If no storage model was specified for the XML schema registration, then <span class="italic">object-relational</span> storage is used.</p>
<p><a href="xdb06stt.htm#GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71__CEGIEAHJ">Example 18-13</a> shows how to manually create table <code>purchaseorder</code>, the default table for <code>PurchaseOrder</code> elements.</p>
<p>The <code>CREATE TABLE</code> statement of <a href="xdb06stt.htm#GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71__CEGIEAHJ">Example 18-13</a> is equivalent to the <code>CREATE TABLE</code> statement that is generated automatically by Oracle XML&nbsp;DB when you set parameter <code>GENTABLES</code> to <code>TRUE</code> during XML schema registration.</p>
<p>The XML schema referenced <a href="xdb06stt.htm#GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71__CEGIEAHJ">Example 18-13</a> specifies that table <code>purchaseorder</code> is the default table for <code>PurchaseOrder</code> elements. When an XML document compliant with the XML schema is inserted into Oracle XML&nbsp;DB Repository using protocols or PL/SQL, the content of the document is stored as a row in table <code>purchaseorder</code>.</p>
<p>When an XML schema is registered as a <span class="italic">global</span> schema, you must grant the appropriate access rights on the default table to all other users of the database, before they can work with instance documents that conform to the globally registered XML schema.</p>
<div class="infoboxnotealso" id="GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71__GUID-C03C9EE6-2E00-4E47-A330-8CCC3270A8E9">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb05sto.htm#GUID-5663C810-F20E-4CFE-99D5-96AC7D4081F4" title="An XML schema can be registered as local (visible only to its owner, by default) or global (visible to all database users, by default).">Local and Global XML Schemas</a>&#34;</span></p>
</div>
<p>Each member of the varray that manages the collection of <code>Action</code> elements is stored in the ordered collection table <code>action_table</code>. Each member of the varray that manages the collection of <code>LineItem</code> elements is stored as a row in ordered collection table <code>lineitem_table</code>. The ordered collection tables are heap-based. Because of the <code>PRIMARY KEY</code> specification, they automatically contain pseudocolumn <code>NESTED_TABLE_ID</code> and column <code>SYS_NC_ARRAY_INDEX$</code>, which are required to link them back to the parent column.</p>
<p>By default, the value of (deprecated) XML schema annotation <code>xdb:storeVarrayAsTable</code><a id="fn_9" href="#fn_9" onclick="footdisplay(9,&#34;XML Schema annotation xdb:storeVarrayAsTable is deprecated, starting with Oracle Database 12c Release 1 (12.1.0.1). &#34;)"><sup>Foot&nbsp;9</sup></a> is <code>true</code>, which automatically generates ordered collection tables (OCTs) for collections during XML schema registration. These OCTs are given system-generated names, which can be difficult to work with. You can give them more meaningful names using the SQL statement <code>RENAME TABLE</code>.</p>
<p>The <code>CREATE TABLE</code> statement in <a href="xdb06stt.htm#GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71__CEGIEAHJ">Example 18-13</a> corresponds to a purchase-order document with a single level of nesting: The varray that manages the collection of <code>LineItem</code> elements is ordered collection table <code>lineitem_table</code>.</p>
<p>What if you had a different XML schema that had, say, a collection of <code>Shipment</code> elements inside a <code>Shipments</code> element that was, in turn, inside a <code>LineItem</code> element? In that case, you could create the table manually as shown in <a href="xdb06stt.htm#GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71__CEGEFCIG">Example 18-14</a>.</p>
<p>A SQL*Plus <code>DESCRIBE</code> statement can be used to view information about an <code>XMLType</code> table, as shown in <a href="xdb06stt.htm#GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71__CEGCEAAF">Example 18-15</a>.</p>
<p>The output of the <code>DESCRIBE</code> statement of <a href="xdb06stt.htm#GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71__CEGCEAAF">Example 18-15</a> shows the following information about table <code>purchaseorder</code>:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>The table is an <code>XMLType</code> table</p>
</li>
<li>
<p>The table is constrained to storing <code>PurchaseOrder</code> documents as defined by the <code>PurchaseOrder</code> XML schema</p>
</li>
<li>
<p>Rows in this table are stored as a set of objects in the database</p>
</li>
<li>
<p>SQL type <code>purchaseorder_t</code> is the base object for this table</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71__CEGIEAHJ">
<p class="titleinexample">Example 18-13 Creating an XMLType Table that Conforms to an XML Schema</p>
<pre dir="ltr">CREATE TABLE <span class="bold">purchaseorder</span> OF XMLType
  XMLSCHEMA &#34;http://localhost:8080/source/schemas/poSource/xsd/<span class="bold">purchaseOrder.xsd</span>&#34;
  ELEMENT &#34;<span class="bold">PurchaseOrder</span>&#34;
  VARRAY &#34;XMLDATA&#34;.&#34;ACTIONS&#34;.&#34;ACTION&#34;
    STORE AS TABLE <span class="bold">action_table</span> 
                   ((PRIMARY KEY (<span class="bold">NESTED_TABLE_ID</span>, <span class="bold">SYS_NC_ARRAY_INDEX$</span>)))
  VARRAY &#34;XMLDATA&#34;.&#34;LINEITEMS&#34;.&#34;LINEITEM&#34;
    STORE AS TABLE <span class="bold">lineitem_table</span> 
                   ((PRIMARY KEY (<span class="bold">NESTED_TABLE_ID</span>, <span class="bold">SYS_NC_ARRAY_INDEX$</span>)));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71__CEGEFCIG">
<p class="titleinexample">Example 18-14 Creating an XMLType Table for Nested Collections</p>
<pre dir="ltr">CREATE TABLE purchaseorder OF XMLType
  XMLSCHEMA &#34;http://localhost:8080/source/schemas/poSource/xsd/purchaseOrder.xsd&#34;
  ELEMENT &#34;PurchaseOrder&#34;
  VARRAY &#34;XMLDATA&#34;.&#34;ACTIONS&#34;.&#34;ACTION&#34;
    STORE AS TABLE action_table 
                   ((PRIMARY KEY (NESTED_TABLE_ID, SYS_NC_ARRAY_INDEX$)))
                   <span class="bold">VARRAY &#34;XMLDATA&#34;.&#34;LINEITEMS&#34;.&#34;LINEITEM&#34;</span>
    STORE AS TABLE <span class="bold">lineitem_table</span> 
                   ((PRIMARY KEY (NESTED_TABLE_ID, SYS_NC_ARRAY_INDEX$))
                    <span class="bold">VARRAY &#34;SHIPMENTS&#34;.&#34;SHIPMENT&#34;</span>
                      STORE AS TABLE <span class="bold">shipments_table</span>
                                     ((PRIMARY KEY (NESTED_TABLE_ID,
                                                    SYS_NC_ARRAY_INDEX$))));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-7A85260C-44C1-4DEF-A000-6A66B24F1B71__CEGCEAAF">
<p class="titleinexample">Example 18-15 Using DESCRIBE with an XML Schema-Based XMLType Table</p>
<pre dir="ltr">DESCRIBE purchaseorder
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
TABLE of SYS.XMLTYPE(XMLSchema
&#34;http://localhost:8080/source/schemas/poSource/xsd/purchaseOrder.xsd&#34;
Element &#34;PurchaseOrder&#34;) STORAGE Object-relational TYPE &#34;PURCHASEORDER_T&#34;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB0730"></a>
<div class="props_rev_3"><a id="GUID-8713E2AD-0D5F-4076-A2DE-BB0ECEFBFEA8"></a>
<h2 id="ADXDB-GUID-8713E2AD-0D5F-4076-A2DE-BB0ECEFBFEA8" class="sect2"><span class="enumeration_section">18.6</span> Overview of Partitioning XMLType Tables and Columns Stored Object-Relationally</h2>
<div>
<p>When you partition an object-relational <code>XMLType</code> table or a table with an <code>XMLType</code> column that is stored object-relationally and you use list, range, or hash partitioning, any ordered collection tables (OCTs) or out-of-line tables within the data are automatically partitioned accordingly, by default.</p>
<p>This <strong class="term">equipartitioning</strong> means that the partitioning of an OCT or an out-of-line table follows the partitioning scheme of its parent (base) table. There is a corresponding child-table partition for each partition of the base table. A child element is stored in the child-table partition that corresponds to the base-table partition of its parent element.</p>
<p>Storage attributes for a base table partition are, by default, also used for the corresponding child-table partitions. You can override these storage attributes for a given child-table partition.</p>
<p>Similarly, by default, the name of an OCT partition is the same as its base (parent) table, but you can override this behavior by specifying the name to use. The name of an out-of-line table partition is always the same as the partition of its parent-table (which could be a base table or an OCT).</p>
<div class="infobox-note" id="GUID-8713E2AD-0D5F-4076-A2DE-BB0ECEFBFEA8__GUID-930891E9-0479-40B1-9781-490BED9F80D8">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>Equipartitioning of <code>XMLType</code> data stored object-relationally is not available in releases prior to Oracle Database 11<span class="italic">g</span> Release 1 (11.1).</p>
</li>
<li>
<p>Equipartitioning of <code>XMLType</code> data that is stored out of line is not available in releases prior to Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2). Starting with that release, out-of-line tables are not shared: You cannot create two top-level tables that are based on the same XML schema, if that schema specifies an out-of-line table.</p>
</li>
</ul>
<p>You can prevent partitioning of OCTs by specifying the keyword <code>GLOBAL</code> in a <code>CREATE TABLE</code> statement. (Starting with Oracle Database 11g Release 1 (11.1), the default behavior uses keyword <code>LOCAL</code>). For information about converting a non-partitioned collection table to a partitioned collection table, see <a class="olink VLDBG00302" target="_blank" href="../VLDBG/GUID-6054142E-207A-4DF0-A62A-4C1A94DD36C4.htm#VLDBG00302"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a>.</p>
<p>You can prevent partitioning of out-of-line tables, and thus allow out-of-line sharing, by turning on event 31178 with level 0x200:</p>
<pre dir="ltr">ALTER SESSION SET EVENTS &#39;31178 TRACE NAME CONTEXT FOREVER, LEVEL 0x200&#39;
</pre></div>
<div class="infoboxnotealso" id="GUID-8713E2AD-0D5F-4076-A2DE-BB0ECEFBFEA8__GUID-A36EF1E8-B614-48E8-B450-BA2652E97C8A">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF01402" target="_blank" href="../SQLRF/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about creating tables with partitions using keywords <code>GLOBAL</code> and <code>LOCAL</code></p>
</div>
</div>
<a id="ADXDB4631"></a><a id="ADXDB4632"></a><a id="ADXDB4630"></a>
<div class="props_rev_3"><a id="GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64"></a>
<h3 id="ADXDB-GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64" class="sect3"><span class="enumeration_section">18.6.1</span> Examples of Partitioning XMLType Data</h3>
<div>
<p>You can specify partitioning information for an object-relational <code>XMLType</code> base table during either the XML schema registration or the table creation. Examples here illustrate this.</p>
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>During XML schema registration, using XML Schema annotation <code>xdb:tableProps</code></p>
</li>
<li>
<p>During table creation using <code>CREATE TABLE</code></p>
</li>
</ul>
<p><a href="xdb06stt.htm#GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64__BHADGCEG">Example 18-16</a> and <a href="xdb06stt.htm#GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64__BHABFFHC">Example 18-17</a> illustrate this. These two examples have exactly the same effect. They partition the base <code>purchaseorder</code> table using the <code>Reference</code> element to specify ranges. They equipartition the child table of line items with respect to the base table.</p>
<p><a href="xdb06stt.htm#GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64__BHADGCEG">Example 18-16</a> shows element <code>PurchaseOrder</code> from the purchase-order XML schema, annotated to partition the base table and its child table of line items.</p>
<p><a href="xdb06stt.htm#GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64__BHABFFHC">Example 18-17</a> specifies the same partitioning as in <a href="xdb06stt.htm#GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64__BHADGCEG">Example 18-16</a>, but it does so during the creation of the base table <code>purchaseorder</code>.</p>
<p><a href="xdb06stt.htm#GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64__BHADGCEG">Example 18-16</a> and <a href="xdb06stt.htm#GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64__BHABFFHC">Example 18-17</a> also show how you can specify object storage options for the individual child-table partitions. In this case, the <code>STORAGE</code> clauses specify that extents of size 14M are to be allocated initially for each of the child-table partitions.</p>
<div class="infoboxnotealso" id="GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64__GUID-F053E303-0072-4F6F-A353-8A183A4D5AE8">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="apphxdb.htm#GUID-1CB2213C-C6E8-4BC4-86A3-EFDE51AEBEFD__BABDAGBF">Example A-2</a>&#34;</span></p>
</li>
<li>
<p><a class="olink ADOBJ00608" target="_blank" href="../ADOBJ/adobjcol.htm#ADOBJ00608"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for more information about partitioning object-relational data</p>
</li>
<li>
<p><a class="olink VLDBG1116" target="_blank" href="../VLDBG/GUID-7F8EBE79-9FF2-4B2D-9764-C11263FA550F.htm#VLDBG1116"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for more information about partitioning</p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64__BHADGCEG">
<p class="titleinexample">Example 18-16 Specifying Partitioning Information During XML Schema Registration</p>
<pre dir="ltr">&lt;xs:element name=&#34;PurchaseOrder&#34; type=&#34;PurchaseOrderType&#34;
            xdb:defaultTable=&#34;PURCHASEORDER&#34;
            <span class="bold">xdb:tableProps</span> =
              &#34;VARRAY XMLDATA.LINEITEMS.LINEITEM
                 STORE AS TABLE <span class="bold">lineitem_table</span>
                   ((PRIMARY KEY (NESTED_TABLE_ID, SYS_NC_ARRAY_INDEX$)))
                   <span class="bold">PARTITION</span> BY RANGE (XMLDATA.Reference)
                     (<span class="bold">PARTITION p1</span> VALUES LESS THAN (1000)
                        VARRAY XMLDATA.LINEITEMS.LINEITEM
                          <span class="bold">STORE AS TABLE lineitem_p1</span> (<span class="bold">STORAGE (MINEXTENTS 13)</span>),
                      <span class="bold">PARTITION p2</span> VALUES LESS THAN (2000)
                        VARRAY XMLDATA.LINEITEMS.LINEITEM
                          <span class="bold">STORE AS TABLE lineitem_p2</span> (<span class="bold">STORAGE (MINEXTENTS 13)</span>))&#34;/&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-99B0AD73-F9C4-490B-BDDD-E52492E2CD64__BHABFFHC">
<p class="titleinexample">Example 18-17 Specifying Partitioning Information During Table Creation</p>
<pre dir="ltr">CREATE TABLE purchaseorder OF XMLType
  XMLSCHEMA &#34;http://localhost:8080/source/schemas/poSource/xsd/purchaseOrder.xsd&#34;
  ELEMENT &#34;PurchaseOrder&#34;
  VARRAY &#34;XMLDATA&#34;.&#34;LINEITEMS&#34;.&#34;LINEITEM&#34; STORE AS TABLE <span class="bold">lineitem_table</span>
    ((PRIMARY KEY (NESTED_TABLE_ID, SYS_NC_ARRAY_INDEX$)))
    <span class="bold">PARTITION</span> BY RANGE (XMLDATA.Reference)
      (<span class="bold">PARTITION p1</span> VALUES LESS THAN (1000)
         VARRAY &#34;XMLDATA&#34;.&#34;LINEITEMS&#34;.&#34;LINEITEM&#34; <span class="bold">STORE AS TABLE lineitem_p1</span>
           (<span class="bold">STORAGE (MINEXTENTS 13)</span>),
       <span class="bold">PARTITION p2</span> VALUES LESS THAN (2000)
         VARRAY  &#34;XMLDATA&#34;.&#34;LINEITEMS&#34;.&#34;LINEITEM&#34; <span class="bold">STORE AS TABLE lineitem_p2</span>
           (<span class="bold">STORAGE (MINEXTENTS 13)</span>));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4633"></a>
<div class="props_rev_3"><a id="GUID-969A9AAC-8531-48FC-8EB3-67E31EC5ED35"></a>
<h3 id="ADXDB-GUID-969A9AAC-8531-48FC-8EB3-67E31EC5ED35" class="sect3"><span class="enumeration_section">18.6.2</span> Partition Maintenance</h3>
<div>
<p>You need not define or maintain child-table partitions manually. When you perform partition maintenance on the base (parent) table, corresponding maintenance is automatically performed on the child tables as well.</p>
<p>There are a few exceptions to the general rule that you perform partition maintenance only on the base table. In the following cases you perform maintenance on a child table:</p>
<ul style="list-style-type: disc;">
<li>
<p>Modify the <span class="italic">default</span> physical storage attributes of a collection partition</p>
</li>
<li>
<p>Modify the physical storage attributes of a collection partition</p>
</li>
<li>
<p>Move a collection partition to a different segment, possibly in a different tablespace</p>
</li>
<li>
<p>Rename a collection partition</p>
</li>
</ul>
<p>For example, if you change the tablespace of a base table, that change is not cascaded to its child-table partitions. You must manually use <code>ALTER TABLE MOVE PARTITION</code> on the child-table partitions to change their tablespace.</p>
<p>Other than those exceptional operations, you perform all partition maintenance on the base table only. This includes operations such as adding, dropping, and splitting a partition.</p>
<p>Online partition redefinition is also supported for child tables. You can copy unpartitioned child tables to partitioned child tables during online redefinition of a base table. You typically specify parameter values <code>copy_indexes =&gt; 0</code> and <code>copy_constraints =&gt; false</code> for PL/SQL procedure <code>DBMS_REDEFINITION.copy_table_dependents</code>, to protect the indexes and constraints of the newly defined child tables.</p>
<div class="infoboxnotealso" id="GUID-969A9AAC-8531-48FC-8EB3-67E31EC5ED35__GUID-95B8F30D-DBA3-4957-9D05-15A000C4815E">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink SQLRF01001" target="_blank" href="../SQLRF/statements_3001.htm#SQLRF01001"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about SQL statement <code>ALTER TABLE</code></p>
</li>
<li>
<p><a class="olink ARPLS042" target="_blank" href="../ARPLS/d_redefi.htm#ARPLS042"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about online partition redefinition using PL/SQL package <code>DBMS_REDEFINITION</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="ADXDB4111"></a><a id="ADXDB4513"></a>
<div class="props_rev_3"><a id="GUID-EEF1789B-F8B0-4371-96FB-40D0547060BA"></a>
<h2 id="ADXDB-GUID-EEF1789B-F8B0-4371-96FB-40D0547060BA" class="sect2"><span class="enumeration_section">18.7</span> Specification of Relational Constraints on XMLType Tables and Columns</h2>
<div>
<p>For <code>XMLType</code> data stored object-relationally, you can specify typical relational constraints for elements and attributes that occur only once in an XML document.</p>
<p><a href="xdb06stt.htm#GUID-EEF1789B-F8B0-4371-96FB-40D0547060BA__BABGHJIA">Example 18-18</a> defines uniqueness and foreign-key constraints on <code>XMLType</code> table <code>purchaseorder</code> in standard database schema <code>OE</code>.</p>
<p>For <code>XMLType</code> data that is stored object-relationally, such as that in table <code>OE.purchaseorder</code>, constraints must be specified in terms of object attributes of the SQL data types that are used to manage the XML content.</p>
<p><a href="xdb06stt.htm#GUID-EEF1789B-F8B0-4371-96FB-40D0547060BA__BABGHJIA">Example 18-18</a> is similar to <a href="xdb03usg.htm#GUID-B08A78A0-351B-431E-8F81-E02FFF0357D1__CHDGIABF">Example 3-8</a>, which defines a uniqueness constraint on a binary XML table. But in addition, <a href="xdb06stt.htm#GUID-EEF1789B-F8B0-4371-96FB-40D0547060BA__BABGHJIA">Example 18-18</a> defines a foreign-key constraint that requires element <code>User</code> of each <code>OE.purchaseorder</code> document to be the e-mail address of an employee that is in table <code>employees</code> of standard database schema <code>HR</code>.</p>
<p>Just as for <a href="xdb03usg.htm#GUID-B08A78A0-351B-431E-8F81-E02FFF0357D1__CHDGIABF">Example 3-8</a>, the uniqueness constraint <code>reference_is_unique</code> of <a href="xdb06stt.htm#GUID-EEF1789B-F8B0-4371-96FB-40D0547060BA__BABGHJIA">Example 18-18</a> ensures the uniqueness of element <code>Reference</code> across all documents stored in the table. The foreign key constraint <code>user_is_valid</code> ensures that the value of element <code>User</code> corresponds to a value in column <code>email</code> of table <code>HR.employees</code>.</p>
<p>The text node associated with element <code>Reference</code> in the XML document <code>DuplicateReference.xml</code> contains the same value as the corresponding node in XML document <code>PurchaseOrder.xml</code>. Attempting to store both documents in Oracle XML&nbsp;DB thus violates the constraint <code>reference_is_unique</code>.</p>
<p>The text node associated with element <code>User</code> in XML document <code>InvalidUser.xml</code> contains the value <code>HACKER</code>. There is no entry in table <code>HR.employees</code> where the value of column <code>email</code> is <code>HACKER</code>. Attempting to store this document in Oracle XML&nbsp;DB violates the foreign-key constraint <code>user_is_valid</code>.</p>
<div class="infoboxnotealso" id="GUID-EEF1789B-F8B0-4371-96FB-40D0547060BA__GUID-EC2F231E-5291-43A3-8C54-CC4C36F6B14E">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb03usg.htm#GUID-B08A78A0-351B-431E-8F81-E02FFF0357D1" title="You can use SQL constraints and database triggers to ensure data-integrity properties such as uniqueness and foreign-key relations.">Enforcing Referential Integrity Using SQL Constraints</a>,&#34;</span> and <a href="xdb03usg.htm#GUID-B08A78A0-351B-431E-8F81-E02FFF0357D1__CHDGIABF">Example 3-8</a> in particular</p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb03usg.htm#GUID-8320CE79-5536-4252-BAF4-746692EBA596" title="You can combine the power of SQL and XML with the ability of the database to enforce rules.">Enforcing XML Data Integrity Using the Database</a>&#34;</span> for information about defining contraints for <code>XMLType</code> data stored as binary XML</p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb06stt.htm#GUID-D8FB50DB-D87D-4F1F-99E1-D6D66EAC8541" title="To create constraints on elements that can occur more than once, store the varray as an ordered collection table (OCT). You can then create constraints on the OCT. You might, for example, want to create a unique key based on an attribute of an element that repeats itself (a collection).">Adding Unique Constraints to the Parent Element of an Attribute</a>&#34;</span></p>
</li>
</ul>
</div>
<div class="example" id="GUID-EEF1789B-F8B0-4371-96FB-40D0547060BA__BABGHJIA">
<p class="titleinexample">Example 18-18 Integrity Constraints and Triggers for an XMLType Table Stored Object-Relationally</p>
<pre dir="ltr">ALTER TABLE purchaseorder
  ADD CONSTRAINT reference_is_unique
  UNIQUE (<span class="bold">XMLDATA.&#34;REFERENCE&#34;</span>);
 
ALTER TABLE purchaseorder
  ADD CONSTRAINT user_is_valid
  FOREIGN KEY (<span class="bold">XMLDATA.&#34;USERID&#34;</span>) REFERENCES hr.employees(email);
 
INSERT INTO purchaseorder
  VALUES (XMLType(bfilename(&#39;XMLDIR&#39;, &#39;purchaseOrder.xml&#39;),
                  nls_charset_id(&#39;AL32UTF8&#39;)));
 
INSERT INTO purchaseorder
  VALUES (XMLType(bfilename(&#39;XMLDIR&#39;, &#39;DuplicateReference.xml&#39;),
                  nls_charset_id(&#39;AL32UTF8&#39;)));

INSERT INTO purchaseorder
*
ERROR at line 1:
<span class="bold">ORA-00001: unique constraint (QUINE.REFERENCE_IS_UNIQUE) violated</span>
 
INSERT INTO purchaseorder
  VALUES (XMLType(bfilename(&#39;XMLDIR&#39;, &#39;InvalidUser.xml&#39;),
                  nls_charset_id(&#39;AL32UTF8&#39;)));

INSERT INTO purchaseorder
*
ERROR at line 1:
<span class="bold">ORA-02291: integrity constraint (QUINE.USER_IS_VALID) violated - parent key not</span>
 <span class="bold">found</span>
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB4617"></a><a id="ADXDB4616"></a>
<div class="props_rev_3"><a id="GUID-D8FB50DB-D87D-4F1F-99E1-D6D66EAC8541"></a>
<h3 id="ADXDB-GUID-D8FB50DB-D87D-4F1F-99E1-D6D66EAC8541" class="sect3"><span class="enumeration_section">18.7.1</span> Adding Unique Constraints to the Parent Element of an Attribute</h3>
<div>
<p>To create constraints on elements that can occur more than once, store the varray as an ordered collection table (OCT). You can then create constraints on the OCT. You might, for example, want to create a unique key based on an attribute of an element that repeats itself (a collection).</p>
<div class="section">
<p><a href="xdb06stt.htm#GUID-D8FB50DB-D87D-4F1F-99E1-D6D66EAC8541__BABIGCIH">Example 18-19</a> shows an XML schema that lets attribute <code>No</code> of element <code>&lt;PhoneNumber&gt;</code> appear more than once. The example shows how you can add a unique constraint to ensure that the same phone number cannot be repeated within a given instance document.</p>
<p>The constraint in this example applies to each collection, and not across all instances. This is achieved by creating a concatenated index with the collection id column. To apply the constraint across all collections of all instance documents, omit the collection id column.</p>
<div class="infobox-note" id="GUID-D8FB50DB-D87D-4F1F-99E1-D6D66EAC8541__GUID-9970F054-26BA-4C81-88F2-5F13C39B9DFA">
<p class="notep1">Note:</p>
<p>You can create only a <span class="italic">functional</span> constraint as a unique or foreign key constraint on <code>XMLType</code> data stored as binary XML.</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-D8FB50DB-D87D-4F1F-99E1-D6D66EAC8541__BABIGCIH">
<p class="titleinexample">Example 18-19 Adding a Unique Constraint to the Parent Element of an Attribute</p>
<pre dir="ltr">BEGIN DBMS_XMLSCHEMA.registerSchema(
  SCHEMAURL =&gt; &#39;emp.xsd&#39;,
  SCHEMADOC =&gt; &#39;&lt;xs:schema xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;
                           xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt;
                  &lt;xs:element name=&#34;Employee&#34; xdb:SQLType=&#34;EMP_TYPE&#34;&gt;
                    &lt;xs:complexType&gt;
                      &lt;xs:sequence&gt;
                        &lt;xs:element name=&#34;EmployeeId&#34; type=&#34;xs:positiveInteger&#34;/&gt;
                        &lt;xs:element name=&#34;<span class="bold">PhoneNumber</span>&#34; maxOccurs=&#34;10&#34;/&gt;
                          &lt;xs:complexType&gt;
                            &lt;xs:attribute name=&#34;<span class="bold">No</span>&#34; type=&#34;xs:integer&#34;/&gt;
                          &lt;/xs:complexType&gt;
                        &lt;/xs:element&gt;
                      &lt;/xs:sequence&gt;
                    &lt;/xs:complexType&gt;
                  &lt;/xs:element&gt;
                &lt;/xs:schema&gt;&#39;,
   LOCAL     =&gt; FALSE, 
   GENTYPES  =&gt; FALSE); 
END;/

PL/SQL procedure successfully completed.

CREATE TABLE emp_tab OF XMLType
  XMLSCHEMA &#34;emp.xsd&#34; ELEMENT &#34;Employee&#34;
  VARRAY XMLDATA.&#34;<span class="bold">PhoneNumber</span>&#34; STORE AS TABLE phone_tab;

Table created.
</pre>
<pre dir="ltr">ALTER TABLE phone_tab ADD <span class="bold">UNIQUE</span> (NESTED_TABLE_ID, &#34;<span class="bold">No</span>&#34;);

Table altered.
</pre>
<pre dir="ltr">INSERT INTO emp_tab 
  VALUES(XMLType(&#39;&lt;Employee&gt;
                    &lt;EmployeeId&gt;1234&lt;/EmployeeId&gt;
                    &lt;PhoneNumber <span class="bold">No=&#34;1234&#34;</span>/&gt;
                    &lt;PhoneNumber <span class="bold">No=&#34;2345&#34;</span>/&gt;
                  &lt;/Employee&gt;&#39;).createSchemaBasedXML(&#39;emp.xsd&#39;));

1 row created.
</pre>
<pre dir="ltr">INSERT INTO emp_tab 
  VALUES(XMLType(&#39;&lt;Employee&gt;
                    &lt;EmployeeId&gt;3456&lt;/EmployeeId&gt;
                    &lt;PhoneNumber <span class="bold">No=&#34;4444&#34;</span>/&gt;
                    &lt;PhoneNumber <span class="bold">No=&#34;4444&#34;</span>/&gt;
                  &lt;/Employee&gt;&#39;).createSchemaBasedXML(&#39;emp.xsd&#39;));
</pre>
<p>This returns the expected result:</p>
<pre dir="ltr">*
ERROR at line 1:
ORA-00001: <span class="bold">unique constraint</span> (SCOTT.SYS_C002136) <span class="bold">violated</span>
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB6367"></a>
<div class="props_rev_3"><a id="GUID-0EF2C8B6-927A-4F50-8126-47CD566A6B92"></a>
<h2 id="ADXDB-GUID-0EF2C8B6-927A-4F50-8126-47CD566A6B92" class="sect2"><span class="enumeration_section">18.8</span> Out-Of-Line Storage of XMLType Data</h2>
<div>
<p>By default, when <code>XMLType</code> data is stored object-relationally a child element is mapped to an embedded SQL object attribute. Sometimes better performance can be obtained by storing some <code>XMLType</code> data out of line. Use XML schema annotation <code>xdb:SQLInline</code> to do this.</p>
</div>
<a id="ADXDB4619"></a><a id="ADXDB4620"></a><a id="ADXDB5882"></a><a id="ADXDB4621"></a><a id="ADXDB4618"></a>
<div class="props_rev_3"><a id="GUID-AC221997-9F02-423E-9F39-BA02046763B5"></a>
<h3 id="ADXDB-GUID-AC221997-9F02-423E-9F39-BA02046763B5" class="sect3"><span class="enumeration_section">18.8.1</span> Setting Annotation Attribute xdb:SQLInline to false for Out-Of-Line Storage</h3>
<div>
<p>Set XML schema annotation <code>xdb:SQLInline</code> to <code>false</code> to store an XML fragment out of line. The element is mapped to a SQL object type with an embedded <code>REF</code> attribute, which points to another <code>XMLType</code> instance that is stored out of line and that corresponds to the XML fragment.</p>
<div class="section">
<p>By default, a child XML element is mapped to an embedded SQL object attribute when <code>XMLType</code> data is stored object-relationally. However, there are scenarios where out-of-line storage offers better performance. In such cases, set XML schema annotation (attribute) <code>xdb:SQLInline</code> to <code>false</code>, so Oracle XML&nbsp;DB generates a SQL object type with an embedded <code>REF</code> attribute. The <code>REF</code> points to another <code>XMLType</code> instance that is stored out of line and that corresponds to the XML fragment. Default <code>XMLType</code> tables are also created, to store the out-of-line fragments.</p>
<p><a href="xdb06stt.htm#GUID-AC221997-9F02-423E-9F39-BA02046763B5__i1030591">Figure 18-2</a> illustrates the mapping of <code>complexType</code> to SQL for out-of-line storage.</p>
<div class="figure" id="GUID-AC221997-9F02-423E-9F39-BA02046763B5__i1030591">
<p class="titleinfigure">Figure 18-2 Mapping complexType to SQL for Out-Of-Line Storage</p>
<img width="416" height="272" src="img/GUID-84A9B4F5-1F12-45BE-81F8-3A5ACF38516A-default.gif" alt="Description of Figure 18-2 follows" title="Description of Figure 18-2 follows"/><br/>
<a href="img_text/GUID-84A9B4F5-1F12-45BE-81F8-3A5ACF38516A-print.htm">Description of &#34;Figure 18-2 Mapping complexType to SQL for Out-Of-Line Storage&#34;</a></div>
<!-- class="figure" -->
<div class="infobox-note" id="GUID-AC221997-9F02-423E-9F39-BA02046763B5__GUID-4D82F318-C491-4EF5-9099-BB6E1FDE7798">
<p class="notep1">Note:</p>
<p>Starting with Oracle Database&nbsp;11g Release 2 (11.2.0.2), you can create only <span class="italic">one</span> <code>XMLType</code> table that uses an XML schema that results in <code>an out-of-line table</code>. An error is raised if you try to create a second table that uses the same XML schema.</p>
</div>
<p>In <a href="xdb06stt.htm#GUID-AC221997-9F02-423E-9F39-BA02046763B5__CHDCEIGC">Example 18-20</a>, attribute <code>xdb:SQLInline</code> of element <code>Addr</code> has value <code>false</code>. The resulting SQL object type, <code>obj_t2</code>, has an <code>XMLType</code> column with an embedded <code>REF</code> object attribute. The <code>REF</code> attribute points to an <code>XMLType</code> instance of SQL object type <code>obj_t1</code> in table <code>addr_tab</code>. Table <code>addr_tab</code> is stored out of line. It has columns <code>street</code> and <code>city</code>.</p>
<p>When registering this XML schema, Oracle XML&nbsp;DB generates the <code>XMLType</code> tables and types shown in <a href="xdb06stt.htm#GUID-AC221997-9F02-423E-9F39-BA02046763B5__BHAHAIEC">Example 18-21</a>.</p>
<p>Table <code>emp_tab</code> holds all of the employee information, and it contains an object reference that points to the address information that is stored out of line, in table <code>addr_tab</code>.</p>
<p>An advantage of this model is that it lets you query the out-of-line table (<code>addr_tab</code>) directly, to look up address information. <a href="xdb06stt.htm#GUID-AC221997-9F02-423E-9F39-BA02046763B5__CHDDDBCI">Example 18-22</a> illustrates querying table <code>addr_tab</code> directly to obtain the distinct city information for all employees.</p>
<p>The disadvantage of this storage model is that, in order to obtain the entire <code>Employee</code> element, you must access an additional table for the address.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-AC221997-9F02-423E-9F39-BA02046763B5__CHDCEIGC">
<p class="titleinexample">Example 18-20 Setting SQLInline to False for Out-Of-Line Storage</p>
<pre dir="ltr">DECLARE
  doc VARCHAR2(3000) :=
    &#39;&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;                     
             targetNamespace=&#34;http://www.oracle.com/emp.xsd&#34;       
             xmlns:emp=&#34;http://www.oracle.com/emp.xsd&#34;       
             xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt;
       &lt;complexType name=&#34;EmpType&#34; xdb:SQLType=&#34;EMP_T&#34;&gt;
         &lt;sequence&gt;
           &lt;element name=&#34;Name&#34; type=&#34;string&#34;/&gt;
           &lt;element name=&#34;Age&#34; type=&#34;decimal&#34;/&gt;
           &lt;element name=&#34;Addr&#34; 
                    <span class="bold">xdb:SQLInline=&#34;false&#34;</span>
                    xdb:defaultTable=&#34;ADDR_TAB&#34;&gt;
             &lt;complexType xdb:SQLType=&#34;ADDR_T&#34;&gt;
               &lt;sequence&gt;
                 &lt;element name=&#34;Street&#34; type=&#34;string&#34;/&gt;
                 &lt;element name=&#34;City&#34; type=&#34;string&#34;/&gt;
               &lt;/sequence&gt;
             &lt;/complexType&gt;
           &lt;/element&gt;
         &lt;/sequence&gt;
       &lt;/complexType&gt;
       &lt;element name=&#34;Employee&#34; type=&#34;emp:EmpType&#34;
                xdb:defaultTable=&#34;EMP_TAB&#34;/&gt;
     &lt;/schema&gt;&#39;;
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL        =&gt; &#39;emp.xsd&#39;,
    SCHEMADOC        =&gt; doc,
    ENABLE_HIERARCHY =&gt; DBMS_XMLSCHEMA.ENABLE_HIERARCHY_NONE);
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-AC221997-9F02-423E-9F39-BA02046763B5__BHAHAIEC">
<p class="titleinexample">Example 18-21 Generated XMLType Tables and Types</p>
<pre dir="ltr">DESCRIBE emp_tab
 Name                          Null?    Type
 ----------------------------- -------- ----------------------------------------------------------
TABLE of SYS.XMLTYPE(XMLSchema &#34;emp.xsd&#34; Element &#34;Employee&#34;) STORAGE Object-relational TYPE &#34;EMP_T&#34;
 
DESCRIBE addr_tab
 Name                          Null?    Type
 ----------------------------- -------- --------------------------------------------------------
TABLE of SYS.XMLTYPE(XMLSchema &#34;emp.xsd&#34; Element &#34;Addr&#34;) STORAGE Object-relational TYPE &#34;ADDR_T&#34;

DESCRIBE emp_t
 emp_t is NOT FINAL
 Name                          Null?    Type
 ----------------------------- -------- --------------------
 SYS_XDBPD$                             XDB.XDB$RAW_LIST_T
 Name                                   VARCHAR2(4000 CHAR)
 Age                                    NUMBER
 Addr                                   <span class="bold">REF OF XMLTYPE</span>

DESCRIBE addr_t
 Name                          Null?    Type
 ----------------------------- -------- --------------------
 SYS_XDBPD$                             XDB.XDB$RAW_LIST_T
 Street                                 VARCHAR2(4000 CHAR)
 City                                   VARCHAR2(4000 CHAR)
 
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-AC221997-9F02-423E-9F39-BA02046763B5__CHDDDBCI">
<p class="titleinexample">Example 18-22 Querying an Out-Of-Line Table</p>
<pre dir="ltr">INSERT INTO emp_tab
  VALUES
    (XMLType(&#39;&lt;x:Employee
                 xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
                 xmlns:x=&#34;http://www.oracle.com/emp.xsd&#34;
                 xsi:schemaLocation=&#34;http://www.oracle.com/emp.xsd emp.xsd&#34;&gt;
                &lt;Name&gt;Abe Bee&lt;/Name&gt;
                &lt;Age&gt;22&lt;/Age&gt;
                &lt;Addr&gt;
                  &lt;Street&gt;A Street&lt;/Street&gt;
                  &lt;City&gt;San Francisco&lt;/City&gt;
                &lt;/Addr&gt;
              &lt;/x:Employee&gt;&#39;));
 
INSERT INTO emp_tab
  VALUES
    (XMLType(&#39;&lt;x:Employee
                 xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
                 xmlns:x=&#34;http://www.oracle.com/emp.xsd&#34;
                 xsi:schemaLocation=&#34;http://www.oracle.com/emp.xsd emp.xsd&#34;&gt;
                &lt;Name&gt;Cecilia Dee&lt;/Name&gt;
                &lt;Age&gt;23&lt;/Age&gt;
                &lt;Addr&gt;
                  &lt;Street&gt;C Street&lt;/Street&gt;
                  &lt;City&gt;Redwood City&lt;/City&gt;
                &lt;/Addr&gt;
              &lt;/x:Employee&gt;&#39;));
<span class="bold">. . .</span>
</pre>
<pre dir="ltr">SELECT DISTINCT XMLCast(XMLQuery(&#39;/Addr/City&#39; PASSING OBJECT_VALUE AS &#34;.&#34; 
                                              RETURNING CONTENT)
                       AS VARCHAR2(20))
  FROM addr_tab;

CITY
-------------
Redwood City
San Francisco
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4626"></a><a id="ADXDB5883"></a><a id="ADXDB4627"></a><a id="ADXDB4628"></a><a id="ADXDB4629"></a><a id="ADXDB4625"></a>
<div class="props_rev_3"><a id="GUID-37820174-3776-4B5D-B96E-CA2515E7016C"></a>
<h3 id="ADXDB-GUID-37820174-3776-4B5D-B96E-CA2515E7016C" class="sect3"><span class="enumeration_section">18.8.2</span> Storing Collections in Out-Of-Line Tables</h3>
<div>
<p>You can store collection items out of line. Instead of a single <code>REF</code> column, the parent element contains a varray of <code>REF</code> values that point to the collection members.</p>
<div class="section">
<p>For example, suppose that there is a list of addresses for each employee and that list is mapped to out-of-line storage, as shown in <a href="xdb06stt.htm#GUID-37820174-3776-4B5D-B96E-CA2515E7016C__CHDJHBIE">Example 18-23</a>.</p>
<p>During registration of this XML schema, Oracle XML&nbsp;DB generates tables <code>emp_tab</code> and <code>addr_tab</code> and types <code>emp_t</code> and <code>addr_t</code>, just as in <a href="xdb06stt.htm#GUID-AC221997-9F02-423E-9F39-BA02046763B5__CHDCEIGC">Example 18-20</a>. However, this time, type <code>emp_t</code> contains a varray of <code>REF</code> values that point to addresses, instead of a single <code>REF</code> attribute, as shown in <a href="xdb06stt.htm#GUID-37820174-3776-4B5D-B96E-CA2515E7016C__BHAJFCCG">Example 18-24</a>.</p>
<p>By default, (deprecated) XML schema attribute <code>xdb:storeVarrayAsTable</code><a id="fn_10" href="#fn_10" onclick="footdisplay(10,&#34;XML Schema annotation xdb:storeVarrayAsTable is deprecated, starting with Oracle Database 12c Release 1 (12.1.0.1). &#34;)"><sup>Foot&nbsp;10</sup></a> has value <code>true</code>, which means that the varray of <code>REF</code> values is stored out of line, in an intermediate table. That is, in addition to creating the tables and types just mentioned, XML schema registration also creates the intermediate table that stores the list of <code>REF</code> values. This table has a system-generated name, but you can rename it. That can be useful, for example, in order to create an index on it.</p>
<p><a href="xdb06stt.htm#GUID-37820174-3776-4B5D-B96E-CA2515E7016C__CHDDAJBJ">Example 18-26</a> shows a query that selects the names of all San Francisco-based employees and the streets in which they live. The example queries the address table on element <code>City</code>, and joins back with the employee table. The explain-plan fragment shown indicates a join between tables <code>emp_tab_reflist</code> and <code>emp_tab</code>.</p>
<p>To improve performance you can create an index on the <code>REF</code> values in the intermediate table, <code>emp_tab_reflist</code>. This lets Oracle XML&nbsp;DB query the address table, obtain an object reference (<code>REF</code>) to the relevant row, join it with the intermediate table storing the list of <code>REF</code> values, and join that table back with the employee table.</p>
<p>You can create an index on <code>REF</code> values only if the <code>REF</code> is <span class="italic">scoped</span> or has a referential constraint. A scoped <code>REF</code> column stores pointers only to objects in a particular table. The <code>REF</code> values in table <code>emp_tab_reflist</code> point only to objects in table <code>addr_tab</code>, so you can create a scope constraint and an index on the <code>REF</code> column, as shown in <a href="xdb06stt.htm#GUID-37820174-3776-4B5D-B96E-CA2515E7016C__CHDIAFAE">Example 18-27</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-37820174-3776-4B5D-B96E-CA2515E7016C__CHDJHBIE">
<p class="titleinexample">Example 18-23 Storing a Collection Out of Line</p>
<pre dir="ltr">DECLARE
  doc VARCHAR2(3000) :=
    &#39;&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
             targetNamespace=&#34;http://www.oracle.com/emp.xsd&#34;
             xmlns:emp=&#34;http://www.oracle.com/emp.xsd&#34;
             xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt;
       &lt;complexType name=&#34;EmpType&#34; xdb:SQLType=&#34;EMP_T&#34;&gt;
         &lt;sequence&gt;
           &lt;element name=&#34;Name&#34; type=&#34;string&#34;/&gt;
           &lt;element name=&#34;Age&#34; type=&#34;decimal&#34;/&gt;
           &lt;element name=&#34;Addr&#34; <span class="bold">xdb:SQLInline=&#34;false&#34;</span>
                    <span class="bold">maxOccurs=&#34;unbounded&#34;</span> xdb:defaultTable=&#34;ADDR_TAB&#34;&gt;
             &lt;complexType xdb:SQLType=&#34;ADDR_T&#34;&gt;
               &lt;sequence&gt;
                 &lt;element name=&#34;Street&#34; type=&#34;string&#34;/&gt;
                 &lt;element name=&#34;City&#34; type=&#34;string&#34;/&gt;
               &lt;/sequence&gt;
             &lt;/complexType&gt;
           &lt;/element&gt;
         &lt;/sequence&gt;
       &lt;/complexType&gt;
       &lt;element name=&#34;Employee&#34; type=&#34;emp:EmpType&#34;
                xdb:defaultTable=&#34;EMP_TAB&#34;/&gt;
     &lt;/schema&gt;&#39;;
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL        =&gt; &#39;emp.xsd&#39;,
    SCHEMADOC        =&gt; doc,
    ENABLE_HIERARCHY =&gt; DBMS_XMLSCHEMA.ENABLE_HIERARCHY_NONE);
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-37820174-3776-4B5D-B96E-CA2515E7016C__BHAJFCCG">
<p class="titleinexample">Example 18-24 Generated Out-Of-Line Collection Type</p>
<pre dir="ltr">DESCRIBE emp_t
 emp_t is NOT FINAL
 Name                                   Null?    Type
 -------------------------------------- -------- --------------------------
 SYS_XDBPD$                                      XDB.XDB$RAW_LIST_T
 Name                                            VARCHAR2(4000 CHAR)
 Age                                             NUMBER
 Addr                                            <span class="bold">XDB.XDB$XMLTYPE_REF_LIST_T</span>
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-37820174-3776-4B5D-B96E-CA2515E7016C__GUID-F7F6B2D2-A3B0-4392-8A56-421BA1A88013">
<p class="titleinexample">Example 18-25 Renaming an Intermediate Table of REF Values</p>
<pre dir="ltr">DECLARE
  gen_name VARCHAR2 (4000);
BEGIN
  SELECT TABLE_NAME INTO gen_name FROM USER_NESTED_TABLES
    WHERE PARENT_TABLE_NAME = &#39;EMP_TAB&#39;;
  EXECUTE IMMEDIATE &#39;RENAME &#34;&#39; || gen_name || &#39;&#34;TO <span class="bold">emp_tab_reflist</span>&#39;;
END;
/
 
DESCRIBE <span class="bold">emp_tab_reflist</span>
 Name                    Null?    Type
 ----------------------- -------- ----------------
 COLUMN_VALUE                     <span class="bold">REF OF XMLTYPE</span>
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-37820174-3776-4B5D-B96E-CA2515E7016C__CHDDAJBJ">
<p class="titleinexample">Example 18-26 XPath Rewrite for an Out-Of-Line Collection</p>
<pre dir="ltr">SELECT em.name, ad.street
  FROM emp_tab,
       XMLTable(XMLNAMESPACES (&#39;http://www.oracle.com/emp.xsd&#39; AS &#34;x&#34;),
                &#39;/x:Employee&#39; PASSING OBJECT_VALUE
                COLUMNS name   VARCHAR2(20) PATH &#39;Name&#39;) em,
       XMLTable(XMLNAMESPACES (&#39;http://www.oracle.com/emp.xsd&#39; AS &#34;x&#34;),
                &#39;/x:Employee/Addr&#39; PASSING OBJECT_VALUE
                COLUMNS street VARCHAR2(20) PATH &#39;Street&#39;,
                        city   VARCHAR2(20) PATH &#39;City&#39;) ad
  WHERE ad.city = &#39;San Francisco&#39;;
 
NAME                 STREET
-------------------- --------------------
Abe Bee              A Street
Eve Fong             E Street
George Hu            G Street
Iris Jones           I Street
Karl Luomo           K Street
Marina Namur         M Street
Omar Pinano          O Street
Quincy Roberts       Q Street
 
8 rows selected.
</pre>
<pre dir="ltr">|   4 |    TABLE ACCESS FULL         | EMP_TAB_REFLIST |    32 |   640 |     2   (0)| 00:00:01 |
|   5 |   TABLE ACCESS BY INDEX ROWID| EMP_TAB         |     1 |    29 |     1   (0)| 00:00:01 |
|*  6 |    INDEX UNIQUE SCAN         | SYS_C005567     |     1 |       |     0   (0)| 00:00:01 |
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-37820174-3776-4B5D-B96E-CA2515E7016C__CHDIAFAE">
<p class="titleinexample">Example 18-27 XPath Rewrite for an Out-Of-Line Collection, with Index on REFs</p>
<pre dir="ltr">ALTER TABLE emp_tab_reflist <span class="bold">ADD SCOPE FOR</span> (COLUMN_VALUE) IS addr_tab;
CREATE INDEX reflist_idx ON emp_tab_reflist (COLUMN_VALUE);
</pre>
<p>The explain-plan fragment for the same query as in <a href="xdb06stt.htm#GUID-37820174-3776-4B5D-B96E-CA2515E7016C__CHDDAJBJ">Example 18-26</a> shows that index <code>reflist_idx</code> is picked up.</p>
<pre dir="ltr">|   4 |    TABLE ACCESS BY INDEX ROWID| EMP_TAB_REFLIST |     1 |    20 |     1   (0)| 00:00:01 |
|*  5 |     INDEX RANGE SCAN          | <span class="bold">REFLIST_IDX</span>     |     1 |       |     0   (0)| 00:00:01 |
|   6 |   TABLE ACCESS BY INDEX ROWID | EMP_TAB         |       |       |            |          |
|*  7 |    INDEX UNIQUE SCAN          | SYS_C005567     |     1 |       |     0   (0)| 00:00:01 |
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB6368"></a>
<div class="props_rev_3"><a id="GUID-A9BDECE7-16AF-4CA4-96D5-5B03FA3E94CE"></a>
<h2 id="ADXDB-GUID-A9BDECE7-16AF-4CA4-96D5-5B03FA3E94CE" class="sect2"><span class="enumeration_section">18.9</span> Considerations for Working with Complex or Large XML Schemas</h2>
<div>
<p>XML schemas can be complex. Examples of complex schemas include those that are recursive and those that contain circular or cyclical references. Working with complex or large XML schemas can be challenging and requires taking certain considerations into account.</p>
</div>
<a id="ADXDB4656"></a><a id="ADXDB4655"></a>
<div class="props_rev_3"><a id="GUID-CDED9D6F-A153-4A83-BBC3-C2ECC428196D"></a>
<h3 id="ADXDB-GUID-CDED9D6F-A153-4A83-BBC3-C2ECC428196D" class="sect3"><span class="enumeration_section">18.9.1</span> Circular and Cyclical Dependencies Among XML Schemas</h3>
<div>
<p>The W3C XML Schema Recommendation lets <code>complexTypes</code> and global elements contain recursive references. This kind of structure allows for instance documents where the element in question can appear an infinite number of times in a recursive hierarchy.</p>
<p>For example, a <code>complexType</code> definition can <span class="italic">contain</span> an element based on that same <code>complexType</code>, or a global element can contain a reference to itself. In both cases the reference can be direct or indirect.</p>
<div class="example" id="GUID-CDED9D6F-A153-4A83-BBC3-C2ECC428196D__BABBFFDC">
<p class="titleinexample">Example 18-28 An XML Schema with Circular Dependency</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;xs:schema xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;
           xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34; 
           elementFormDefault=&#34;qualified&#34; attributeFormDefault=&#34;unqualified&#34;&gt;
  &lt;xs:element name=&#34;person&#34; type=&#34;personType&#34; xdb:defaultTable=&#34;PERSON_TABLE&#34;/&gt;
  &lt;xs:complexType name=&#34;<span class="bold">personType</span>&#34; xdb:SQLType=&#34;PERSON_T&#34;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&#34;descendant&#34; type=&#34;<span class="bold">personType</span>&#34; minOccurs=&#34;0&#34;  
                  maxOccurs=&#34;unbounded&#34; xdb:SQLName=&#34;DESCENDANT&#34;
                  xdb:defaultTable=&#34;DESCENDANT_TABLE&#34;/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name=&#34;personName&#34; use=&#34;required&#34; xdb:SQLName=&#34;PERSON_NAME&#34;&gt; 
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base=&#34;xs:string&#34;&gt;
          &lt;xs:maxLength value=&#34;20&#34;/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</pre>
<p>The XML schema in <a href="xdb06stt.htm#GUID-CDED9D6F-A153-4A83-BBC3-C2ECC428196D__BABBFFDC">Example 18-28</a> includes a circular dependency. The <code>complexType</code> <code>personType</code> consists of a <code>personName</code> attribute and a collection of <code>descendant</code> elements. The <code>descendant</code> element is defined as being of type <code>personType</code>.</p>
</div>
<!-- class="example" --></div>
<a id="ADXDB4657"></a>
<div class="props_rev_3"><a id="GUID-E95371E5-432C-43E2-8ABE-606982BE93AB"></a>
<h4 id="ADXDB-GUID-E95371E5-432C-43E2-8ABE-606982BE93AB" class="sect4"><span class="enumeration_section">18.9.1.1</span> For Circular XML Schema Dependencies Set Parameter GENTABLES to TRUE</h4>
<div>
<p>Oracle XML&nbsp;DB supports XML schemas that involve circular schema dependencies. It does this by detecting the cycles, breaking them, and storing the recursive elements as rows in a separate <code>XMLType</code> table that is created during XML schema registration.</p>
<p>Consequently, it is important to ensure that parameter <code>GENTABLES</code> is set to <code>TRUE</code> when registering an XML schema that defines this kind of structure. The name of the table used to store the recursive elements can be specified by adding an <code>xdb:defaultTable</code> annotation to the XML schema.</p>
</div>
</div>
<a id="ADXDB4660"></a><a id="ADXDB4663"></a><a id="ADXDB4659"></a><a id="ADXDB4661"></a><a id="ADXDB4658"></a>
<div class="props_rev_3"><a id="GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9"></a>
<h4 id="ADXDB-GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9" class="sect4"><span class="enumeration_section">18.9.1.2</span> complexType Declarations in XML Schema: Handling Cycles</h4>
<div>
<p>SQL object types do not allow cycles. Cycles in an XML schema are broken while generating the object types, by introducing a <code>REF</code> attribute where the cycle would be completed. Part of the data is stored out of line, but it is retrieved as part of the parent XML document.</p>
<div class="infobox-note" id="GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__GUID-51F33F51-9DB3-4558-B69B-C7ED2D4A4B38">
<p class="notep1">Note:</p>
<p>Starting with Oracle Database&nbsp;11g Release 2 (11.2.0.2), you can create only <span class="italic">one</span> <code>XMLType</code> table that uses an XML schema that results in <code>an out-of-line table</code>. An error is raised if you try to create a second table that uses the same XML schema.</p>
</div>
<p>XML schemas permit cycling between definitions of complex types. <a href="xdb06stt.htm#GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__i1044847">Figure 18-3</a> shows this, where the definition of complex type <code>CT1</code> can reference another complex type <code>CT2</code>, whereas the definition of <code>CT2</code> references the first type <code>CT1</code>.</p>
<p>XML schemas permit cycles among definitions of complex types. <a href="xdb06stt.htm#GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__BHAGBAFH">Example 18-29</a> creates a cycle of length two:</p>
<p>SQL types do not allow cycles in type definitions. However, they do support <strong class="term">weak cycles</strong>, that is, cycles involving <code>REF</code> (reference) object attributes. Cyclic XML schema definitions are mapped to SQL object types in such a way that cycles are avoided by forcing <code>SQLInline = &#34;false&#34;</code> at the appropriate points. This creates a weak SQL cycle.</p>
<p>For the XML schema of <a href="xdb06stt.htm#GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__BHAGBAFH">Example 18-29</a>, Oracle XML&nbsp;DB generates the following types:</p>
<pre dir="ltr">CREATE TYPE ct1 AS OBJECT (SYS_XDBPD$  XDB.XDB$RAW_LIST_T,
                           &#34;e1&#34;        VARCHAR2(4000),
                           &#34;e2&#34;        <span class="bold">REF</span> XMLType) NOT FINAL;
CREATE TYPE ct2 AS OBJECT (SYS_XDBPD$  XDB.XDB$RAW_LIST_T,
                           &#34;e1&#34;        VARCHAR2(4000),
                           &#34;e2&#34;        CT1) NOT FINAL;
</pre>
<div class="figure" id="GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__i1044847">
<p class="titleinfigure">Figure 18-3 Cross Referencing Between Different complexTypes in the Same XML Schema</p>
<img width="311" height="164" src="img/GUID-766075F8-A119-4C0B-993F-411B05F38BB2-default.gif" alt="Description of Figure 18-3 follows" title="Description of Figure 18-3 follows"/><br/>
<a href="img_text/GUID-766075F8-A119-4C0B-993F-411B05F38BB2-print.htm">Description of &#34;Figure 18-3 Cross Referencing Between Different complexTypes in the Same XML Schema&#34;</a></div>
<!-- class="figure" -->
<p>Another example of a cyclic complex type involves the declaration of the complex type that refers to itself. In <a href="xdb06stt.htm#GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__BHADFCCI">Example 18-30</a>, type <code>SectionT</code> does this.</p>
<p>For the XML schema of <a href="xdb06stt.htm#GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__BHADFCCI">Example 18-30</a>, Oracle XML&nbsp;DB generates the following types:</p>
<pre dir="ltr">CREATE TYPE body_coll AS VARRAY(32767<a id="GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__CIHGAFIH" href="#GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__CIHGAFIH" onclick="footdisplay(11,&#34;This value of 32767 assumes that the value of initialization parameter MAX_STRING_SIZE is EXTENDED. See Oracle Database SQL Language Reference. &#34;)"><sup>Foot 11</sup></a>) OF VARCHAR2(32767<a id="fnsrc_d87739e6797" href="#fnsrc_d87739e6797" onclick="footdisplay(11,&#34;This value of 32767 assumes that the value of initialization parameter MAX_STRING_SIZE is EXTENDED. See Oracle Database SQL Language Reference. &#34;)"><sup>Footref 11</sup></a>);
CREATE TYPE section_t AS OBJECT (SYS_XDBPD$  XDB.XDB$RAW_LIST_T, 
                                 &#34;title&#34;     VARCHAR2(32767<a id="fnsrc_d87739e6800" href="#fnsrc_d87739e6800" onclick="footdisplay(11,&#34;This value of 32767 assumes that the value of initialization parameter MAX_STRING_SIZE is EXTENDED. See Oracle Database SQL Language Reference. &#34;)"><sup>Footref 11</sup></a>),
                                 &#34;body&#34;      BODY_COLL,
                                 &#34;section&#34;   XDB.XDB$REF_LIST_T) NOT FINAL;
</pre>
<div class="infobox-note" id="GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__GUID-A577CD97-AA9D-4EEF-A88C-5C6A7A018BC2">
<p class="notep1">Note:</p>
<p>In <a href="xdb06stt.htm#GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__BHADFCCI">Example 18-30</a>, object attribute <code>section</code> is declared as a varray of <code>REF</code> references to <code>XMLType</code> instances. Because there can be more than one occurrence of embedded sections, the attribute is a varray. It is a varray of <code>REF</code> references to <code>XMLType</code> instances, to avoid forming a cycle of SQL objects.</p>
</div>
<p><a href="xdb06stt.htm#GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__i1044836">Figure 18-4</a> illustrates schematically how a <code>complexType</code> can reference itself.</p>
<div class="figure" id="GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__i1044836">
<p class="titleinfigure">Figure 18-4 Self-Referencing Complex Type within an XML Schema</p>
<img width="239" height="164" src="img/GUID-25587457-F0F1-40A5-AF23-6896A7521977-default.gif" alt="Description of Figure 18-4 follows" title="Description of Figure 18-4 follows"/><br/>
<a href="img_text/GUID-25587457-F0F1-40A5-AF23-6896A7521977-print.htm">Description of &#34;Figure 18-4 Self-Referencing Complex Type within an XML Schema&#34;</a></div>
<!-- class="figure" -->
<div class="infoboxnotealso" id="GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__GUID-DAF7D8C8-A0BD-4952-B111-D0C62F76D3DF">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb06stt.htm#GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D" title="XML schemas can depend on each other in such a way that they cannot be registered one after the other in the usual manner.">Cyclical References Among XML Schemas</a>&#34;</span></p>
</div>
<div class="example" id="GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__BHAGBAFH">
<p class="titleinexample">Example 18-29 XML Schema: Cycling Between complexTypes</p>
<pre dir="ltr">DECLARE 
  doc VARCHAR2(3000) :=
    &#39;&lt;xs:schema xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34; 
                xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt;
       &lt;xs:complexType name=&#34;<span class="bold">CT1</span>&#34; xdb:SQLType=&#34;CT1&#34;&gt;
         &lt;xs:sequence&gt;
           &lt;xs:element name=&#34;e1&#34; type=&#34;xs:string&#34;/&gt;
           &lt;xs:element name=&#34;e2&#34; type=&#34;<span class="bold">CT2</span>&#34;/&gt;
         &lt;/xs:sequence&gt;
       &lt;/xs:complexType&gt;
       &lt;xs:complexType name=&#34;<span class="bold">CT2</span>&#34; xdb:SQLType=&#34;CT2&#34;&gt;
         &lt;xs:sequence&gt;
           &lt;xs:element name=&#34;e1&#34; type=&#34;xs:string&#34;/&gt;
           &lt;xs:element name=&#34;e2&#34; type=&#34;<span class="bold">CT1</span>&#34;/&gt;
         &lt;/xs:sequence&gt;
       &lt;/xs:complexType&gt;
     &lt;/xs:schema&gt;&#39;;
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.oracle.com/emp.xsd&#39;,
    SCHEMADOC =&gt; doc);
END;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-71DC594A-3BAA-4EBF-9B0C-0E1BAC5A0CC9__BHADFCCI">
<p class="titleinexample">Example 18-30 XML Schema: Cycling Between complexTypes, Self-Reference</p>
<pre dir="ltr">DECLARE 
  doc VARCHAR2(3000) :=
    &#39;&lt;xs:schema xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;        
                xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt;
       &lt;xs:complexType name=&#34;<span class="bold">SectionT</span>&#34; xdb:SQLType=&#34;SECTION_T&#34;&gt;
         &lt;xs:sequence&gt;
           &lt;xs:element name=&#34;title&#34; type=&#34;xs:string&#34;/&gt;
           &lt;xs:choice maxOccurs=&#34;unbounded&#34;&gt;
             &lt;xs:element name=&#34;body&#34; type=&#34;xs:string&#34; 
                         xdb:SQLCollType=&#34;BODY_COLL&#34;/&gt;
             &lt;xs:element name=&#34;section&#34; type=&#34;<span class="bold">SectionT</span>&#34;/&gt;
           &lt;/xs:choice&gt;
         &lt;/xs:sequence&gt;
       &lt;/xs:complexType&gt;
     &lt;/xs:schema&gt;&#39;;
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.oracle.com/section.xsd&#39;,
    SCHEMADOC =&gt; doc);
END;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4665"></a><a id="ADXDB4666"></a><a id="ADXDB5884"></a><a id="ADXDB5885"></a><a id="ADXDB5886"></a><a id="ADXDB4664"></a>
<div class="props_rev_3"><a id="GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D"></a>
<h4 id="ADXDB-GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D" class="sect4"><span class="enumeration_section">18.9.1.3</span> Cyclical References Among XML Schemas</h4>
<div>
<p>XML schemas can depend on each other in such a way that they cannot be registered one after the other in the usual manner.</p>
<p>This is illustrated in <a href="xdb06stt.htm#GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D__i1044849">Figure 18-5</a>.</p>
<p>In the top half of the illustration, an example of indirect cyclical references between three XML schemas is shown.</p>
<p>In the bottom half of the illustration, an example of cyclical dependencies between two XML schemas is shown. The details of this simpler example are presented first.</p>
<div class="figure" id="GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D__i1044849">
<p class="titleinfigure">Figure 18-5 Cyclical References Between XML Schemas</p>
<img width="423" height="369" src="img/GUID-2C45D754-BBBD-4FD0-97FE-9AE55F4F8917-default.gif" alt="Description of Figure 18-5 follows" title="Description of Figure 18-5 follows"/><br/>
<a href="img_text/GUID-2C45D754-BBBD-4FD0-97FE-9AE55F4F8917-print.htm">Description of &#34;Figure 18-5 Cyclical References Between XML Schemas&#34;</a></div>
<!-- class="figure" -->
<p>An XML schema that includes another XML schema cannot be created if the included XML schema does not exist. The registration of XML schema <code>xm40.xsd</code> in <a href="xdb06stt.htm#GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D__BHAHABJJ">Example 18-31</a> fails, if <code>xm40a.xsd</code> does not exist.</p>
<p>XML schema <code>xm40.xsd</code> can, however, be created if you specify option <code>FORCE =&gt; TRUE</code>, as in <a href="xdb06stt.htm#GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D__BHAHFACD">Example 18-32</a>:</p>
<p>However, an attempt to use XML schema <code>xm40.xsd</code>, as in <a href="xdb06stt.htm#GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D__BHAHFAFF">Example 18-33</a>, fails.</p>
<p>If you register <code>xm40a.xsd</code> using the <code>FORCE</code> option, as in <a href="xdb06stt.htm#GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D__BHAHIGDH">Example 18-34</a>, then both XML schemas can be used, as shown by the <code>CREATE TABLE</code> statements.</p>
<p>Thus, to register these XML schemas, which depend on each other, you must use the <code>FORCE</code> parameter in <code>DBMS_XMLSCHEMA.registerSchema</code> for each schema, as follows:</p>
<ol>
<li>
<p>Register <code>xm40.xsd</code> with <code>FORCE</code> mode set to <code>TRUE</code>:</p>
<pre dir="ltr">DBMS_XMLSCHEMA.registerSchema(&#34;xm40.xsd&#34;, &#34;&lt;schema ...&#34;, ..., <span class="bold">FORCE =&gt; TRUE</span>)
</pre>
<p>At this point, <code>xm40.xsd</code> <span class="italic">cannot</span> be used.</p>
</li>
<li>
<p>Register <code>xm40a.xsd</code> in <code>FORCE</code> mode set to <code>TRUE</code>:</p>
<pre dir="ltr">DBMS_XMLSCHEMA.registerSchema(&#34;xm40a.xsd&#34;, &#34;&lt;schema ...&#34;, ..., <span class="bold">FORCE =&gt; TRUE</span>)
</pre>
<p>The second operation automatically compiles <code>xm40.xsd</code> and makes both XML schemas usable.</p>
</li>
</ol>
<div class="example" id="GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D__BHAHABJJ">
<p class="titleinexample">Example 18-31 An XML Schema that Includes a Non-Existent XML Schema</p>
<pre dir="ltr">BEGIN DBMS_XMLSCHEMA.registerSchema(
  SCHEMAURL =&gt; &#39;<span class="bold">xm40.xsd</span>&#39;,
  SCHEMADOC =&gt; &#39;&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
                        xmlns:my=&#34;xm40&#34;  
                        targetNamespace=&#34;xm40&#34;&gt;
     <span class="bold">             &lt;include schemaLocation=&#34;xm40a.xsd&#34;/&gt;</span>
                  &lt;!-- Define a global complextype here --&gt;
                  &lt;complexType name=&#34;Company&#34;&gt;
                    &lt;sequence&gt;
                      &lt;element name=&#34;Name&#34; type=&#34;string&#34;/&gt;
                      &lt;element name=&#34;Address&#34; type=&#34;string&#34;/&gt;
                    &lt;/sequence&gt;
                  &lt;/complexType&gt;
                  &lt;!-- Define a global element depending on included schema --&gt;
                  &lt;element name=&#34;Emp&#34; type=&#34;my:Employee&#34;/&gt;
                &lt;/schema&gt;&#39;,
  LOCAL     =&gt; TRUE, 
  GENTYPES  =&gt; TRUE, 
  GENTABLES =&gt; TRUE); 
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D__BHAHFACD">
<p class="titleinexample">Example 18-32 Using the FORCE Option to Register XML Schema xm40.xsd</p>
<pre dir="ltr">BEGIN DBMS_XMLSCHEMA.registerSchema(
  SCHEMAURL =&gt; &#39;xm40.xsd&#39;,
  SCHEMADOC =&gt; &#39;&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
                        xmlns:my=&#34;xm40&#34;  
                        targetNamespace=&#34;xm40&#34;&gt;
                  &lt;include schemaLocation=&#34;xm40a.xsd&#34;/&gt;
                  &lt;!-- Define a global complextype here --&gt;
                  &lt;complexType name=&#34;Company&#34;&gt;
                    &lt;sequence&gt;
                      &lt;element name=&#34;Name&#34; type=&#34;string&#34;/&gt;
                      &lt;element name=&#34;Address&#34; type=&#34;string&#34;/&gt;
                    &lt;/sequence&gt;
                  &lt;/complexType&gt;
                  &lt;!-- Define a global element depending on included schema --&gt;
                  &lt;element name=&#34;Emp&#34; type=&#34;my:Employee&#34;/&gt;
                &lt;/schema&gt;&#39;,
  LOCAL     =&gt; TRUE, 
  GENTYPES  =&gt; TRUE, 
  GENTABLES =&gt; TRUE, 
  FORCE     =&gt; <span class="bold">TRUE</span>); 
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D__BHAHFAFF">
<p class="titleinexample">Example 18-33 Trying to Create a Table Using a Cyclic XML Schema</p>
<pre dir="ltr">CREATE TABLE foo OF XMLType XMLSCHEMA &#34;xm40.xsd&#34; ELEMENT &#34;Emp&#34;;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-CD3986D6-D50C-4E84-9690-30DE8577C12D__BHAHIGDH">
<p class="titleinexample">Example 18-34 Using the FORCE Option to Register XML Schema xm40a.xsd</p>
<pre dir="ltr">BEGIN DBMS_XMLSCHEMA.registerSchema(
  SCHEMAURL =&gt; &#39;<span class="bold">xm40a.xsd</span>&#39;,
  SCHEMADOC =&gt; &#39;&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
                        xmlns:my=&#34;xm40&#34; 
                        targetNamespace=&#34;xm40&#34;&gt;
                  <span class="bold">&lt;include schemaLocation=&#34;xm40.xsd&#34;/&gt;</span>
                  &lt;!-- Define a global complextype here --&gt;
                  &lt;complexType name=&#34;Employee&#34;&gt;
                    &lt;sequence&gt;
                      &lt;element name=&#34;Name&#34; type=&#34;string&#34;/&gt;
                      &lt;element name=&#34;Age&#34; type=&#34;positiveInteger&#34;/&gt;
                      &lt;element name=&#34;Phone&#34; type=&#34;string&#34;/&gt;
                    &lt;/sequence&gt;
                  &lt;/complexType&gt;
                  &lt;!-- Define a global element depending on included schema --&gt;
                  &lt;element name=&#34;Comp&#34; type=&#34;my:Company&#34;/&gt;
                &lt;/schema&gt;&#39;,
  LOCAL     =&gt; TRUE, 
  GENTYPES  =&gt; TRUE, 
  GENTABLES =&gt; TRUE, 
  FORCE     =&gt; <span class="bold">TRUE</span>); 
END;
/
</pre>
<pre dir="ltr">CREATE TABLE foo  OF XMLType XMLSCHEMA &#34;xm40.xsd&#34;  ELEMENT &#34;Emp&#34;;
CREATE TABLE foo2 OF XMLType XMLSCHEMA &#34;xm40a.xsd&#34; ELEMENT &#34;Comp&#34;;
 
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB4667"></a><a id="ADXDB0710"></a>
<div class="props_rev_3"><a id="GUID-B43E7FEE-51C2-413F-A7FB-B023374CB26C"></a>
<h3 id="ADXDB-GUID-B43E7FEE-51C2-413F-A7FB-B023374CB26C" class="sect3"><span class="enumeration_section">18.9.2</span> Support for Recursive Schemas</h3>
<div>
<p>A <code>REF</code> to a recursive structure in an out-of-line table can make it difficult to rewrite XPath queries, because it is not known at compile time how deep the structure is. To enable XPath rewrite, a <code>DOCID</code> column points back to the root document in any recursive structure.</p>
<p>This enables some XPath queries to use the out-of-line tables directly and join back using this column.</p>
<p>A <strong class="term">document-correlated recursive query</strong> is a query using a SQL function that accepts an XPath or XQuery expression and an <code>XMLType</code> instance, where that XPath or XQuery expression contains &#39;<code>//</code>&#39;. A document-correlated recursive query can be <span class="italic">rewritten</span> if it can be determined at query compilation time that both of the following conditions are met:</p>
<ul style="list-style-type: disc;">
<li>
<p>All fragments of the <code>XMLType</code> instance that are targeted by the XPath or XQuery expression reside in a single out-of-line table.</p>
</li>
<li>
<p>No other fragments of the <code>XMLType</code> instance reside in the same out-of-line table.</p>
</li>
</ul>
<p>The rewritten query is a join with the out-of-line table, based on the <code>DOCID</code> column.</p>
<p>Other queries with &#39;<code>//</code>&#39; can also be rewritten. For example, if there are several <code>address</code> elements, all of the same type, in different sections of a schema, and you often query all <code>address</code> elements with &#39;<code>//</code>&#39;, not caring about their specific location in the document, rewrite can occur.</p>
<p>During schema registration, an additional <code>DOCID</code> column is generated for out-of-line <code>XMLType</code> tables This column stores the <code>OID</code> (Object Identifier Values) of the document, that is, the root element. This column is automatically populated when data is inserted in the tables. You can export tables containing <code>DOCID</code> columns and import them later.</p>
<div class="example" id="GUID-B43E7FEE-51C2-413F-A7FB-B023374CB26C__BHAEBJCA">
<p class="titleinexample">Example 18-35 Recursive XML Schema</p>
<pre dir="ltr">&lt;schema targetNamespace=&#34;AbcNS&#34; xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
          xmlns:abc=&#34;AbcNS&#34; xmlnm:xdb=&#34;http://xmlns.oracle.com.xdb&#34;&gt;
  &lt;element name=&#34;AbcCode&#34; xdb:defaultTable=&#34;ABCCODETAB&#34;&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element ref=&#34;abc:AbcSection&#34;/&gt;
      &lt;/sequence&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
 
  &lt;element name=&#34;AbcSection&#34;&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element name=&#34;ID&#34; type=&#34;integer&#34;/&gt;
        &lt;element name=&#34;Contents&#34; type=&#34;string&#34;/&gt;
        &lt;element ref=&#34;abc:AbcSection&#34;/&gt;
      &lt;/sequence&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
&lt;/schema&gt;
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB4669"></a><a id="ADXDB4670"></a><a id="ADXDB4668"></a>
<div class="props_rev_3"><a id="GUID-25C3FAE7-5B36-4EFC-8747-5729321E22DB"></a>
<h4 id="ADXDB-GUID-25C3FAE7-5B36-4EFC-8747-5729321E22DB" class="sect4"><span class="enumeration_section">18.9.2.1</span> defaultTable Shared Among Common Out-Of-Line Elements</h4>
<div>
<p>Out-of-line elements of the same qualified name (namespace and local name) and same type are stored in the same default table. As a special case, you can store the root element of a cyclic element structure out of line in the same table as the sub-elements.</p>
<p>Both of the elements sharing the default table must be out-of-line elements, that is, the default table for an out-of-line element cannot be the same as the table for a top-level element. To do this, specify <code>xdb:SQLInline = &#34;false&#34;</code> for both elements and specify an explicit <code>xdb:defaultTable</code> attribute having the same value in both elements.</p>
<p><a href="xdb06stt.htm#GUID-25C3FAE7-5B36-4EFC-8747-5729321E22DB__CHDHDJBC">Example 18-36</a> shows an XML schema with an out-of-line table that is stored in <code>ABCSECTIONTAB</code>.</p>
<p>Both of the out-of-line <code>AbcSection</code> elements in <a href="xdb06stt.htm#GUID-25C3FAE7-5B36-4EFC-8747-5729321E22DB__CHDHDJBC">Example 18-36</a> share the same default table, <code>ABCSECTIONTAB</code>.</p>
<p>However, <a href="xdb06stt.htm#GUID-25C3FAE7-5B36-4EFC-8747-5729321E22DB__BHAFGIHA">Example 18-37</a> illustrates <span class="italic">invalid</span> default table sharing: recursive elements (<code>XyZSection</code>) do not share the same out-of-line table.</p>
<p>The following query cannot be rewritten.</p>
<pre dir="ltr">SELECT XMLQuery(&#39;//XyzSection&#39; PASSING OBJECT_VALUE RETURNING CONTENT)
  FROM xyzcode;
</pre>
<div class="example" id="GUID-25C3FAE7-5B36-4EFC-8747-5729321E22DB__CHDHDJBC">
<p class="titleinexample">Example 18-36 Out-of-line Table</p>
<pre dir="ltr">&lt;schema targetNamespace=&#34;AbcNS&#34; xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
           xmlns:abc=&#34;AbcNS&#34; xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt;
  &lt;element name=&#34;AbcCode&#34; xdb:defaultTable=&#34;ABCCODETAB&#34;&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element ref=&#34;abc:AbcSection&#34; xdb:SQLInline=&#34;false&#34;/&gt;
      &lt;/sequence&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
 
  &lt;element name=&#34;AbcSection&#34; xdb:defaultTable=&#34;&#34;&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element name=&#34;ID&#34; type=&#34;integer&#34;/&gt;
        &lt;element name=&#34;Contents&#34; type=&#34;string&#34;/&gt;
        &lt;element ref=&#34;abc:AbcSection&#34; <span class="bold">xdb:SQLInline=&#34;false&#34;</span>
                 xdb:defaultTable=&#34;<span class="bold">ABCSECTIONTAB</span>&#34;/&gt;
      &lt;/sequence&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
&lt;/schema&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-25C3FAE7-5B36-4EFC-8747-5729321E22DB__BHAFGIHA">
<p class="titleinexample">Example 18-37 Invalid Default Table Sharing</p>
<pre dir="ltr"> &lt;schema targetNamespace=&#34;XyzNS&#34; xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
         xmlns:xyz=&#34;XyzNS&#34; xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt;
   &lt;element name=&#34;XyzCode&#34; xdb:defaultTable=&#34;XYZCODETAB&#34;&gt;
   &lt;complexType&gt;
   &lt;sequence&gt;
      &lt;element name=&#34;CodeNumber&#34; type=&#34;integer&#34; minOccurs=&#34;0&#34;/&gt;
      &lt;element ref=&#34;xyz:XyzChapter&#34; xdb:SQLInline=&#34;false&#34;/&gt;
      &lt;element ref=&#34;xyz:XyzPara&#34; xdb:SQLInline=&#34;false&#34; /&gt;
   &lt;/sequence&gt;
   &lt;/complexType&gt;
   &lt;/element&gt;
 
    &lt;element name=&#34;XyzChapter&#34; xdb:defaultTable=&#34;XYZCHAPTAB&#34;&gt;
     &lt;complexType&gt;
     &lt;sequence&gt;
         &lt;element name=&#34;Title&#34; type=&#34;string&#34;/&gt;
         &lt;element ref=&#34;xyz:XyzSection&#34; xdb:SQLInline=&#34;false&#34; 
                  <span class="bold">xdb:defaultTable=&#34;XYZSECTIONTAB&#34;</span>/&gt;
      &lt;/sequence&gt;
      &lt;/complexType&gt;
    &lt;/element&gt;
 
    &lt;element name=&#34;XyzPara&#34; xdb:defaultTable=&#34;XYZPARATAB&#34;&gt;
     &lt;complexType&gt;
     &lt;sequence&gt;
         &lt;element name=&#34;Title&#34; type=&#34;string&#34;/&gt;
         &lt;element ref=&#34;xyz:XyzSection&#34; xdb:SQLInline=&#34;false&#34; 
                  <span class="bold">xdb:defaultTable=&#34;Other_XYZSECTIONTAB</span>&#34;/&gt;
      &lt;/sequence&gt;
      &lt;/complexType&gt;
    &lt;/element&gt;
   
    &lt;element name=&#34;XyzSection&#34;&gt;
    &lt;complexType&gt;
    &lt;sequence&gt;
        &lt;element name=&#34;ID&#34; type=&#34;integer&#34;/&gt;
        &lt;element name=&#34;Contents&#34; type=&#34;string&#34;/&gt;
        &lt;element ref=&#34;xyz:XyzSection&#34; xdb:defaultTable=&#34;XYZSECTIONTAB&#34;/&gt;
     &lt;/sequence&gt;
     &lt;/complexType&gt;
    &lt;/element&gt;
 &lt;/schema&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4671"></a>
<div class="props_rev_3"><a id="GUID-6A4D3B64-7438-494E-9698-298716FC8C13"></a>
<h4 id="ADXDB-GUID-6A4D3B64-7438-494E-9698-298716FC8C13" class="sect4"><span class="enumeration_section">18.9.2.2</span> Query Rewrite when DOCID is Present</h4>
<div>
<p>Before processing <code>//</code> XPath expressions, check to find multiple occurrences of the same element. If all occurrences under the <code>//</code> share the same <code>defaultTable</code> then the query can be rewritten against that table, using the <code>DOCID</code>.</p>
<p>If there are other occurrences of the same element under the root sharing that table, but not under <code>//</code>, then the query cannot be rewritten.</p>
<p>For example, consider this element structure:</p>
<p><code>&lt;Book&gt;</code> contains a <code>&lt;Chapter&gt;</code> and a <code>&lt;Part&gt;</code>. <code>&lt;Part&gt;</code> contains a <code>&lt;Chapter&gt;</code>.</p>
<p>Assume that both of the <code>&lt;Chapter&gt;</code> elements are stored out of line and they share the same default table. The query <code>/Book//Chapter</code> can be rewritten to go against the default table for the <code>&lt;Chapter&gt;</code> elements because all of the <code>&lt;Chapter&gt;</code> elements under <code>&lt;Book&gt;</code> share the same default table. Thus, this XPath query is a document-correlated recursive XPath query.</p>
<p>However, a query such as <code>/Book/Part//Chapter</code> cannot be rewritten, even though all the <code>&lt;Chapter&gt;</code> elements under <code>&lt;Part&gt;</code> share the same table, because there is another <code>&lt;Chapter&gt;</code> element under <code>&lt;Book&gt;</code>, which is the document root that also shares that table.</p>
<p>Consider the case where you are extracting <code>//AbcSection</code> with <code>DOCID</code> present, as in the XML schema described in <a href="xdb06stt.htm#GUID-25C3FAE7-5B36-4EFC-8747-5729321E22DB__CHDHDJBC">Example 18-36</a>:</p>
<pre dir="ltr">SELECT XMLQuery(&#39;//AbcSection&#39; PASSING OBJECT_VALUE RETURNING CONTENT)
  FROM abccodetab;
</pre>
<p>Both of the <code>AbcSection</code> elements are stored in the same table, <code>abcsectiontab</code>. The extraction applies to the underlying table, <code>abcsectiontab</code>.</p>
<p>Consider this query when <code>DOCID</code> is present:</p>
<pre dir="ltr">SELECT XMLQuery(&#39;/AbcCode/AbcSection//AbcSection&#39;
                PASSING OBJECT_VALUE RETURNING CONTENT)
  FROM abccodetab;
</pre>
<p>In both this case and the previous case, all reachable <code>AbcSection</code> elements are stored in the same out-of-line table. However, the first <code>AbcSection</code> element at <code>/AbcCode/AbcSection</code> cannot be retrieved by this query. Since the join condition is a <code>DOCID</code>, which cannot distinguish between different positions in the parent document, the correct result cannot be achieved by a direct query on table <code>abcsectiontab</code>. In this case, query rewrite does not occur since it is not a document-correlated recursive XPath. If this top-level <code>AbcSection</code> were not stored out of line with the rest, then the query could be rewritten.</p>
</div>
</div>
<a id="ADXDB4672"></a>
<div class="props_rev_3"><a id="GUID-E4CCB4F6-6FE4-41F3-8B83-76393E0A1261"></a>
<h4 id="ADXDB-GUID-E4CCB4F6-6FE4-41F3-8B83-76393E0A1261" class="sect4"><span class="enumeration_section">18.9.2.3</span> DOCID Column Creation Disabling</h4>
<div>
<p>You can disable the creation of column <code>DOCID</code> by specifying an <code>OPTIONS</code> parameter when calling <code>DBMS_XMLSCHEMA.registerSchema</code>. This disables <code>DOCID</code> creation in all <code>XMLType</code> tables generated during schema registration.</p>
<p><code>OPTIONS</code> is an input parameter of data type <code>PLS_INTEGER</code>. Its default value is <code>0</code>, meaning that no options are used. To inhibit the generation of column <code>DOCID</code>, set parameter <code>OPTIONS</code> to <code>DBMS_XMLSCHEMA.REGISTER_NODOCID</code> (which is <code>1</code>).</p>
<div class="infoboxnotealso" id="GUID-E4CCB4F6-6FE4-41F3-8B83-76393E0A1261__GUID-BEB9DBA0-52ED-4E58-9B41-9FA5A3801D3D">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS377" target="_blank" href="../ARPLS/d_xmlsch.htm#ARPLS377"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</div>
</div>
</div>
</div>
<a id="ADXDB4638"></a><a id="ADXDB4637"></a><a id="ADXDB4636"></a>
<div class="props_rev_3"><a id="GUID-80571C92-AB92-40F6-B067-01E228534C9D"></a>
<h3 id="ADXDB-GUID-80571C92-AB92-40F6-B067-01E228534C9D" class="sect3"><span class="enumeration_section">18.9.3</span> XML Fragments Can Be Mapped to Large Objects (LOBs)</h3>
<div>
<p>You can specify the&nbsp;SQL data type to use for a complex element as being&nbsp;<code>CLOB</code>&nbsp;or&nbsp;<code>BLOB</code>.</p>
<p>In <a href="xdb06stt.htm#GUID-80571C92-AB92-40F6-B067-01E228534C9D__i1044845">Figure 18-6</a>, for example, an entire XML fragment is stored in a LOB attribute.</p>
<p>In <a href="xdb06stt.htm#GUID-80571C92-AB92-40F6-B067-01E228534C9D__BHAFGFDA">Example 18-38</a>, the XML schema defines element <code>Addr</code> using the annotation <code>SQLType = &#34;CLOB&#34;</code>:</p>
<div class="figure" id="GUID-80571C92-AB92-40F6-B067-01E228534C9D__i1044845">
<p class="titleinfigure">Figure 18-6 Mapping complexType XML Fragments to CLOB Instances</p>
<img width="278" height="244" src="img/GUID-D7EA0A4C-A898-4D4E-BC57-D32251AEA11A-default.gif" alt="Description of Figure 18-6 follows" title="Description of Figure 18-6 follows"/><br/>
<a href="img_text/GUID-D7EA0A4C-A898-4D4E-BC57-D32251AEA11A-print.htm">Description of &#34;Figure 18-6 Mapping complexType XML Fragments to CLOB Instances&#34;</a></div>
<!-- class="figure" -->
<div class="example" id="GUID-80571C92-AB92-40F6-B067-01E228534C9D__BHAFGFDA">
<p class="titleinexample">Example 18-38 Oracle XML&nbsp;DB XML Schema: Mapping complexType XML Fragments to LOBs</p>
<pre dir="ltr">DECLARE
  doc VARCHAR2(3000) :=
    &#39;&lt;schema xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;       
             targetNamespace=&#34;http://www.oracle.com/emp.xsd&#34;       
             xmlns:emp=&#34;http://www.oracle.com/emp.xsd&#34;       
             xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;&gt;
       &lt;complexType name=&#34;Employee&#34; xdb:SQLType=&#34;OBJ_T&#34;&gt;
         &lt;sequence&gt;
           &lt;element name=&#34;Name&#34; type=&#34;string&#34;/&gt;
           &lt;element name=&#34;Age&#34; type=&#34;decimal&#34;/&gt;
           <span class="bold">&lt;element name=&#34;Addr&#34; xdb:SQLType=&#34;CLOB&#34;&gt;</span>
             &lt;complexType &gt;
               &lt;sequence&gt;
                 &lt;element name=&#34;Street&#34; type=&#34;string&#34;/&gt;
                 &lt;element name=&#34;City&#34; type=&#34;string&#34;/&gt;
               &lt;/sequence&gt;
             &lt;/complexType&gt;
           &lt;/element&gt;
         &lt;/sequence&gt;
       &lt;/complexType&gt;
     &lt;/schema&gt;&#39;;
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.oracle.com/PO.xsd&#39;,
    SCHEMADOC =&gt; doc);
END;
</pre>
<p>When registering this XML schema, Oracle XML&nbsp;DB generates the following types and <code>XMLType</code> tables:</p>
<pre dir="ltr">CREATE TYPE obj_t AS OBJECT(SYS_XDBPD$ XDB.XDB$RAW_LIST_T, 
                            Name VARCHAR2(4000), 
                            Age NUMBER, 
                            Addr CLOB);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6315"></a>
<div class="props_rev_3"><a id="GUID-5F470098-54C0-4FC6-8E7B-732487497F90"></a>
<h3 id="ADXDB-GUID-5F470098-54C0-4FC6-8E7B-732487497F90" class="sect3"><span class="enumeration_section">18.9.4</span> ORA-01792 and ORA-04031: Issues with Large XML Schemas</h3>
<div>
<p>Errors <code>ORA-01792</code> and <code>ORA-04031</code> can be raised when you work with large or complex XML schemas. You can encounter them when you register an XML schema or you create a table that is based on a global element defined by an XML schema.</p>
<ul style="list-style-type: disc;">
<li>
<p><code>ORA-01792: maximum number of columns in a table or view is 1000</code></p>
</li>
<li>
<p><code>ORA-04031: unable to allocate</code> <span class="italic"><code>string</code></span> <code>bytes of shared memory (&#34;</code><span class="italic"><code>string</code></span><code>&#34;,&#34;</code><span class="italic"><code>string</code></span><code>&#34;,&#34;</code><span class="italic"><code>string</code></span><code>&#34;,&#34;</code><span class="italic"><code>string</code></span>&#34;<code>)</code></p>
</li>
</ul>
<p>These errors are raised when you try to create an <code>XMLType</code> table or column based on a global element and the global element is defined as a <code>complexType</code> that contains a very large number of element and attribute definitions.</p>
<p>They are raised only when creating an <code>XMLType</code> table or column that uses object-relational storage. The table or column is persisted using a SQL type, and each object attribute defined by the SQL type counts as one column in the underlying table. If the SQL type contains object attributes that are based on other SQL types, then the attributes defined by those types also count as columns in the underlying table.</p>
<p>If the total number of object attributes in all of the SQL types exceeds the Oracle Database limit of 1000 columns in a table, then the storage table cannot be created. When the total number of elements and attributes defined by a <code>complexType</code> reaches 1000, it is not possible to create a single table that can manage the SQL objects that are generated when an instance of that type is stored in the database.</p>
<div class="infoboxnotealso" id="GUID-5F470098-54C0-4FC6-8E7B-732487497F90__GUID-C550F651-743C-4A2E-8924-2378911A8A3A">
<p class="notep1">Tip:</p>
<p>You can use the following query to determine the number of columns for a given <code>XMLType</code> table stored object-relationally:</p>
<pre dir="ltr">SELECT count(*) FROM USER_TAB_COLS WHERE TABLE_NAME = &#39;<span class="italic">&lt;the table&gt;</span>&#39;
</pre>
<p>where <span class="italic"><code>&lt;the table&gt;</code></span> is the table you want to check.</p>
</div>
<p>Error <code>ORA-01792</code> reports that the 1000-column limit has been exceeded. Error <code>ORA-04031</code> reports that memory is insufficient during the processing of a large number of element and attribute definitions. To resolve this problem of having too many element and attribute definitions, you must reduce the total number of object attributes in the SQL types that are used to create the storage tables.</p>
<p>There are two ways to achieve this reduction:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use a top-down technique, with <span class="italic">multiple</span> <code>XMLType</code> <span class="italic">tables</span> that manage the XML documents. This reduces the number of SQL attributes in the SQL type hierarchy for a given storage table. As long as none of the tables need to manage more than 1000 object attributes, the problem is resolved.</p>
</li>
<li>
<p>Use a bottom-up technique, which reduces the number of SQL attributes in the SQL type hierarchy, <span class="italic">collapsing some elements and attributes</span> defined by the XML schema so that they are stored as a single <code>CLOB</code> value.</p>
</li>
</ul>
<p>Both techniques rely on annotating the XML schema to define how a particular <code>complexType</code> is stored in the database.</p>
<p>For the top-down technique, annotations <code>SQLInline = &#34;false&#34;</code> and <code>defaultTable</code> force some subelements in the XML document to be stored as rows in a separate <code>XMLType</code> table. Oracle XML&nbsp;DB maintains the relationship between the two tables using a <code>REF</code> of <code>XMLType</code>. Good candidates for this approach are XML schemas that do either of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Define a <span class="italic">choice</span>, where each element within the choice is defined as a <code>complexType</code></p>
</li>
<li>
<p>Define an element based on a <code>complexType</code> that contains a <span class="italic">large number of element and attribute definitions</span></p>
</li>
</ul>
<p>The bottom-up technique involves reducing the total number of attributes in the SQL object types by choosing to store some of the lower-level <code>complexType</code> elements as <code>CLOB</code> values, rather than as objects. This is achieved by annotating the <code>complexType</code> or the usage of the <code>complexType</code> with <code>SQLType = &#34;CLOB&#34;</code>.</p>
<p>Which technique you use depends on the application and the type of queries and updates to be performed against the data.</p>
</div>
</div>
<a id="ADXDB4678"></a>
<div class="props_rev_3"><a id="GUID-32930A3C-AFD4-4950-94B6-B26ACAFBC70D"></a>
<h3 id="ADXDB-GUID-32930A3C-AFD4-4950-94B6-B26ACAFBC70D" class="sect3"><span class="enumeration_section">18.9.5</span> Considerations for Loading and Retrieving Large Documents with Collections</h3>
<div>
<p>Oracle XML&nbsp;DB configuration file <code>xdbconfig.xml</code> has parameters that control the amount of memory used by the loading operation: <code>xdbcore-loadableunit-size</code> and <code>xdbcore-xobmem-bound</code>.</p>
<p>These let you optimize the loading process, provided the following conditions are met:</p>
<ul style="list-style-type: disc;">
<li>
<p>The document is loaded using one of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Protocols (FTP, HTTP(S), or DAV)</p>
</li>
<li>
<p>PL/SQL function <code>DBMS_XDB_REPOS.createResource</code></p>
</li>
<li>
<p>A SQL <code>INSERT</code> statement into an <code>XMLType</code> table (but not an <code>XMLType</code> column)</p>
</li>
</ul>
</li>
<li>
<p>The document is XML schema-based and contains large collections (elements with <code>maxOccurs</code> set to a large number).</p>
</li>
<li>
<p>Collections in the document are stored as OCTs. This is the default behavior.</p>
</li>
</ul>
<p>In the following situations, the optimizations are sometimes suboptimal:</p>
<ul style="list-style-type: disc;">
<li>
<p>When there are triggers on the base table.</p>
</li>
<li>
<p>When the base table is partitioned.</p>
</li>
<li>
<p>When collections are stored out of line (applies only to SQL <code>INSERT</code>).</p>
</li>
</ul>
<p>The basic idea behind this optimization is that it lets the collections be swapped into or out of the memory in bounded sizes. As an illustration of this idea consider the following example conforming to a purchase-order XML schema:</p>
<pre dir="ltr">&lt;PurchaseOrder&gt;
  &lt;LineItem itemID=&#34;1&#34;&gt;
    ...
  &lt;/LineItem&gt;
    .
    .
  &lt;LineItem itemID=&#34;10240&#34;&gt;
    ...
  &lt;/LineItem&gt;
&lt;/PurchaseOrder&gt;
</pre>
<p>The purchase-order document here contains a collection of 10240 <code>LineItem</code> elements. Creating the entire document in memory and then pushing it out to disk can lead to excessive memory usage and in some instances a load failure due to inadequate system memory.</p>
<p>To avoid that, you can create the documents in finite chunks of memory called <strong class="term">loadable units</strong>.</p>
<p>In the example case, assume that each line item needs 1 KB of memory and that you want to use loadable units of 512 KB each. Each loadable unit then contains 512 line items, and there are approximately 20 such units. If you want the entire memory representation of the document to never exceed 2 MB, then you must ensure that at any time no more than 4 loadable units are maintained in the memory. You can use an LRU mechanism to swap out the loadable units.</p>
<p>By controlling the size of the loadable unit and the bound on the size of the document you can tune the memory usage and performance of the load or retrieval. Typically a larger loadable unit size translates into a smaller number of disk accesses, but it requires more memory. This is controlled by configuration parameter <code>xdbcore-loadableunit-size</code>, whose default value is 16 KB. You can indicate the amount of memory to be given to a document by setting parameter <code>xdbcore-xobmem-bound</code>, which defaults to 1 MB. The values of these parameters are specified in kilobytes. So, the default value of <code>xdbcore-xobmem-bound</code> is 1024 and that of <code>xdbcore-loadableunit-size</code> is 16. These are soft limits that provide some guidance to the system as to how to use the memory optimally.</p>
<p>When a document is loaded using FTP, the pattern in which the loadable units (LU) are created and flushed to the disk is as follows:</p>
<pre dir="ltr">No LUs
Create LU1[LineItems(LI):1-512]
LU1[LI:1-512], Create LU2[LI:513-1024]
.
.
LU1[LI:1-512],...,Create LU4[LI:1517:2028]    &lt;-   Total memory size = 2M
Swap Out LU1[LI:1-512], LU2[LI:513-1024],...,LU4[LI:1517-2028], Create LU5[LI:2029-2540]
Swap Out LU2[LI:513-1024], LU3, LU4, LU5, Create LU6[LI:2541-2052]
.
.
.
Swap Out LU16, LU17, LU18, LU10, Create LU20[LI:9729-10240]
Flush LU17,LU18,LU19,LU20
</pre></div>
<a id="ADXDB4679"></a>
<div class="props_rev_3"><a id="GUID-1B84F42B-18DC-4BA5-A1C6-651101408B11"></a>
<h4 id="ADXDB-GUID-1B84F42B-18DC-4BA5-A1C6-651101408B11" class="sect4"><span class="enumeration_section">18.9.5.1</span> Guidelines for Configuration Parameters xdbcore-loadableunit-size and xdbcore-xobmem-bound</h4>
<div>
<p>Use PGA size and trial and error to determine the best values for configuration parameters <code>xdbcore-loadableunit-size</code> and <code>xdbcore-xobmem-bound</code>.</p>
<p>Typically, if you have 1 GB of addressable PG then give about 1/10th of PGA to the document. Set <code>xobcore-xobmem-bound</code> to 1/10 of addressable PGA, which is 100M. During full document retrievals and loads, the value of <code>xdbcore-loadableunit-size</code> should be as close as possible to the value of <code>xobcore-xobmem-bound</code>.</p>
<p>Start by setting <code>xdbcore-loadableunit-size</code> to half the value of <code>xdbcore-xobmem-bound</code> (50 MB). Then try to load the document.</p>
<p>If you run out of memory then reduce the value of <code>xdbcore-xobmem-bound</code> and set <code>xdbcore-loadableunot-size</code> to half of that value. Continue this way until the documents load successfully.</p>
<p>If the load operation succeeds then try to increase <code>xdbcore-loadableunit-size</code>, to obtain better performance. If <code>xdbcore-loadableunit-size</code> equals <code>xdbcore-xobmem-bound</code>, then try to increase both parameter values for further performance improvements.</p>
</div>
</div>
</div>
</div>
<a id="ADXDB4463"></a>
<div class="props_rev_3"><a id="GUID-D17B71BD-2AC2-4EC6-ADE3-8FE626FEC156"></a>
<h2 id="ADXDB-GUID-D17B71BD-2AC2-4EC6-ADE3-8FE626FEC156" class="sect2"><span class="enumeration_section">18.10</span> Debugging XML Schema Registration for XML Data Stored Object-Relationally</h2>
<div>
<p>For XML data stored object-relationally, you can monitor the object types and tables created during XML schema registration by setting the event 31098 before invoking PL/SQL procedure <code>DBMS_XMLSCHEMA.registerSchema</code>.</p>
<div class="section">
<pre dir="ltr">ALTER SESSION SET EVENTS = &#39;31098 TRACE NAME CONTEXT FOREVER&#39;
</pre>
<p>Setting this event causes the generation of a log of all of the <code>CREATE TYPE</code> and <code>CREATE TABLE</code> statements. The log is written to the user session trace file, typically found in <code>ORACLE_BASE/diag/rdbms/ORACLE_SID/ORACLE_SID/udump</code>. This trace output can be a useful aid in diagnosing problems during XML schema registration.</p>
</div>
<!-- class="section" --></div>
</div>
<hr/>
<br/>
<p style="text-decoration:underline">Footnote Legend</p>
Footnote&nbsp;1:
<p>XML Schema annotation <code>xdb:maintainOrder</code> is <span class="italic">deprecated</span>, starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.1). If you use <code>xdb:maintainOrder = &#34;false&#34;</code>, then an unordered collection is used instead of an ordered collection. Oracle recommends that you use ordered collections (<code>xdb:maintainOrder = &#34;true&#34;</code>) for XML data, to preserve document order. By default, attribute <code>xdb:maintainOrder</code> is <code>true</code>.</p>
<br/>
Footnote&nbsp;2:
<p>XML Schema annotation <code>xdb:storeVarrayAsTable</code> is <span class="italic">deprecated</span>, starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.1).</p>
<br/>
Footnote&nbsp;8:
<p>XML Schema annotations <code>xdb:maintainOrder</code> and <code>xdb:storeVarrayAsTable</code> are <span class="italic">deprecated</span>, starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.1).</p>
<br/>
Footnote&nbsp;9:
<p>XML Schema annotation <code>xdb:storeVarrayAsTable</code> is <span class="italic">deprecated</span>, starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.1).</p>
<br/>
Footnote&nbsp;10:
<p>XML Schema annotation <code>xdb:storeVarrayAsTable</code> is <span class="italic">deprecated</span>, starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.1).</p>
<br/>
Footnote&nbsp;11:
<p>This value of 32767 assumes that the value of initialization parameter <code>MAX_STRING_SIZE</code> is <code>EXTENDED</code>. See <a class="olink SQLRF55623" target="_blank" href="../SQLRF/sql_elements001.htm#SQLRF55623"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<br/></div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3410">
<tr>
<td class="cellalignment3417">
<table class="cellalignment3415">
<tr>
<td class="cellalignment3414"><a href="xdb05sto.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3414"><a href="xdb_rewrite.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3419">
<table class="cellalignment3413">
<tr>
<td class="cellalignment3414"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3414"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3414"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3414"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3414"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>