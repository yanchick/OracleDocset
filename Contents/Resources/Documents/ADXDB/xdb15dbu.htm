<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1614"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Data%20Access%20Using%20URIs"></a><title>Data Access Using URIs</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="You can generate and store URIs in the database and use them to retrieve the database data they target. There are three kinds of URIs you can use this way: DBUris, XDBUris, and HTTPUris."/>
<meta name="keywords" content="HTTPUri, definition, DBUri, XDBUri, HTTP, using UriRefs to store pointers, URIType, examples, Uri-reference, URIType examples, DBUri-refs, DBUri-ref, database and session, retrieving the whole table, identifying a row, identifying a target column, retrieving column text value, URIFACTORY PL/SQL package, creating subtypes of URIType, URIFACTORY PL/SQL package, functions, SQL, sys_DburiGen, sys_DburiGen SQL function, generating using sys_DburiGen SQL function, object attributes, sys_DburiGen SQL function, passing to, inserting database references, access for DBUri-refs, HTTP access, HTTP access for DBUri-ref, DBUriServlet, MIME, overriding with DBUri servlet, servlet, installation, security, configuring to handle DBURI-ref, URIFACTORY"/>
<meta name="dcterms.created" content="2016-12-08T13:53:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E41152-15"/>
<meta name="dcterms.isVersionOf" content="ADXDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="xdb23jv1.htm" title="Previous" type="text/html"/>
<link rel="Next" href="xdb_web_services.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41152-15.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-0F5F6D4C-0C27-4EC0-926C-CDCC0C1F9798"></a> <span id="PAGE" style="display:none;">46/61</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='xdb15dbu'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="ADXDB1900"></a>
<h1 id="ADXDB-GUID-0F5F6D4C-0C27-4EC0-926C-CDCC0C1F9798" class="sect1"><span class="enumeration_chapter">33</span> Data Access Using URIs</h1>
<div>
<p>You can generate and store URIs in the database and use them to retrieve the database data they target. There are three kinds of URIs you can use this way: DBUris, XDBUris, and HTTPUris.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb15dbu.htm#GUID-B691F5CF-4AB9-48D1-AEB4-5B962A8413E2" title="You can use a URI as an indirection mechanism to access database data, and you can use a URI that targets database data to produce XML documents.">Overview of Oracle XML&nbsp;DB URL Features</a></p>
</li>
<li>
<p><a href="xdb15dbu.htm#GUID-DC41C382-C911-42C1-8430-0612B4633504" title="In developing Web-based XML applications, you often refer to data located on a network using Uniform Resource Identifiers, or URIs. A URL, or Uniform Resource Locator, is a URI that accesses an object using an Internet protocol.">URIs and URLs</a></p>
</li>
<li>
<p><a href="xdb15dbu.htm#GUID-F1EC54E6-614C-45EC-B5FA-973E127B8B02" title="You can represent paths of various kinds as database objects. These provide unified access to data stored inside and outside the server, and they can be used to map URIs in XML documents to database columns, letting documents reference data stored in relational columns and expose it externally.">URIType and its Subtypes</a></p>
</li>
<li>
<p><a href="xdb15dbu.htm#GUID-888C6A6E-9642-4213-88D4-BBEED24458A4" title="To use instances of URIType subtypes for indirection, you store such instances in the database and then query to retrieve the targeted data with a PL/SQL method such as getCLOB().">Accessing Data Using URIType Instances</a></p>
</li>
<li>
<p><a href="xdb15dbu.htm#GUID-62CFB196-932C-4193-B4FA-D9762778DEA0" title="XDBURIType is a subtype of URIType that exposes resources in Oracle XML&nbsp;DB Repository using URIs. Instances of object type XDBURIType are called XDBUris.">XDBUris: Pointers to Repository Resources</a></p>
</li>
<li>
<p><a href="xdb15dbu.htm#GUID-8945A71D-EB81-4165-88DC-F84C9C466E6B" title="A DBUri is a URI that targets database data. As for all instances of URIType subtypes, a DBUri provides indirect access to data. DBURIType also lets you address database data using XPath and construct XML documents containing database data that is targeted by a DBUri that reflects the database structure.">DBUris: Pointers to Database Data</a></p>
</li>
<li>
<p><a href="xdb15dbu.htm#GUID-590A6F12-9D64-4C6B-BD4C-0A7F6FA2B4F6" title="You can define your own subtypes of URIType that correspond to particular protocols. You can use PL/SQL package URIFACTORY to obtain the URI of a URIType instance, escape characters in a URI string or remove such escaping, and register or unregister a type name for handling a given URL.">Create New Subtypes of URIType Using Package URIFACTORY</a></p>
</li>
<li>
<p><a href="xdb15dbu.htm#GUID-787BEE6B-0F47-4CB9-B83F-41979732BF82" title="You can create a DBUri by providing an XPath expression to constructor DBURIType or to appropriate URIFACTORY PL/SQL methods. With Oracle SQL function sys_DburiGen, you can alternatively create a DBUri using an XPath that is composed from database columns and their values.">SYS_DBURIGEN SQL Function</a></p>
</li>
<li>
<p><a href="xdb15dbu.htm#GUID-F9F4D101-D592-4A5C-80E7-02B3DFD3A3B3" title="You can retrieve repository resources using the Oracle XML&nbsp;DB HTTP server. Oracle Database also includes a servlet, DBUriServlet, that makes any kind of database data available through HTTP(S) URLs. The data can be returned as plain text, HTML, or XML.">DBUriServlet</a></p>
</li>
</ul>
</div>
<a id="ADXDB5224"></a>
<div class="props_rev_3"><a id="GUID-B691F5CF-4AB9-48D1-AEB4-5B962A8413E2"></a>
<h2 id="ADXDB-GUID-B691F5CF-4AB9-48D1-AEB4-5B962A8413E2" class="sect2"><span class="enumeration_section">33.1</span> Overview of Oracle XML&nbsp;DB URI Features</h2>
<div>
<p>You can use a URI as an indirection mechanism to access database data, and you can use a URI that targets database data to produce XML documents.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic">Using paths as an indirection mechanism &ndash;</span> You can store a path in the database and then access its target <span class="italic">indirectly</span> by referring to the path. The paths in question are various kinds of Uniform Resource Identifier (URI).</p>
</li>
<li>
<p><span class="italic">Using paths that target database data to produce XML documents &ndash;</span> One kind of URI that you can use for indirection in particular, a <span class="italic">DBUri</span>, provides a convenient XPath notation for addressing <span class="italic">database data</span>. You can use a DBUri to construct an <span class="italic">XML document</span> that contains database data and whose structure reflects the database structure.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDB5225"></a>
<div class="props_rev_3"><a id="GUID-DC41C382-C911-42C1-8430-0612B4633504"></a>
<h2 id="ADXDB-GUID-DC41C382-C911-42C1-8430-0612B4633504" class="sect2"><span class="enumeration_section">33.2</span> URIs and URLs</h2>
<div>
<p>In developing Web-based XML applications, you often refer to data located on a network using <strong class="term">Uniform Resource Identifiers</strong>, or <strong class="term">URI</strong>s. A <strong class="term">URL</strong>, or <strong class="term">Uniform Resource Locator</strong>, is a URI that accesses an object using an Internet protocol.</p>
<p>A URI has two parts, separated by a number sign (<span class="bold"><code>#</code></span>):</p>
<ul style="list-style-type: disc;">
<li>
<p>A URL part, that identifies a document.</p>
</li>
<li>
<p>A fragment part, that identifies a fragment within the document. The notation for the fragment depends on the document type. For HTML documents, it is an anchor name. For XML documents, it is an XPath expression.</p>
</li>
</ul>
<p>These are typical URIs:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic">For HTML &ndash;</span> <code>http://www.example.com/document1#some_anchor</code>, where <code>some_anchor</code> is a named anchor in the HTML document.</p>
</li>
<li>
<p><span class="italic">For XML &ndash;</span> <code>http://www.example.com/xml_doc#/po/cust/custname</code>, where:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>http://www.example.com/xml_doc</code> identifies the location of the XML document.</p>
</li>
<li>
<p><code>/po/cust/custname</code> identifies a fragment within the document. This portion is defined by the W3C XPointer recommendation.</p>
</li>
</ul>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-DC41C382-C911-42C1-8430-0612B4633504__GUID-DE9C5981-3847-4D80-9000-33D64672C43D">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="http://www.w3.org/2002/ws/Activity.html" target="_blank"><code>http://www.w3.org/2002/ws/Activity.html</code></a> an explanation of HTTP(S) URL notation</p>
</li>
<li>
<p><a href="http://www.w3.org/TR/xpath" target="_blank"><code>http://www.w3.org/TR/xpath</code></a> for an explanation of the XML XPath notation</p>
</li>
<li>
<p><a href="http://www.w3.org/TR/xptr/" target="_blank"><code>http://www.w3.org/TR/xptr/</code></a> for an explanation of the XML XPointer notation</p>
</li>
<li>
<p><a href="http://xml.coverpages.org/xmlMediaMIME.html" target="_blank"><code>http://xml.coverpages.org/xmlMediaMIME.html</code></a> for a discussion of MIME types</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDB5226"></a>
<div class="props_rev_3"><a id="GUID-F1EC54E6-614C-45EC-B5FA-973E127B8B02"></a>
<h2 id="ADXDB-GUID-F1EC54E6-614C-45EC-B5FA-973E127B8B02" class="sect2"><span class="enumeration_section">33.3</span> URIType and its Subtypes</h2>
<div>
<p>You can represent paths of various kinds as database objects. These provide unified access to data stored inside and outside the server, and they can be used to map URIs in XML documents to database columns, letting documents reference data stored in relational columns and expose it externally.</p>
<p>The available path object types are <code>HTTPURIType</code>, <code>DBURIType</code>, and <code>XDBURIType</code>, all of which are derived from abstract object type <code>URIType</code>.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><code>HTTPURIType</code></span> &ndash; An object of this type is called an <strong class="term">HTTPUri</strong> and represents a URL that begins with <span class="bold"><code>http://</code></span>. With <code>HTTPURIType</code>, you can create objects that represent links to remote <span class="italic">Web pages</span> (or files) and retrieve those Web pages by calling object methods. Applications using <code>HTTPUriType</code> must have the proper access privileges. <code>HTTPUriType</code> implements the Hyper Text Transfer Protocol (HTTP(S)) for accessing remote Web pages. <code>HTTPURIType</code> uses package <code>UTL_HTTP</code> to fetch data, so session settings and access control for this package can also be used to influence HTTP fetches.</p>
<div class="infoboxnotealso" id="GUID-F1EC54E6-614C-45EC-B5FA-973E127B8B02__GUID-3B06F18D-8BC2-456F-8EA8-55F812E3D786">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb15dbu.htm#GUID-184D639E-8F1A-455D-8709-84123F42C10E" title="HTTPURIType PL/SQL method getContentType() returns the MIME information for its targeted document. You can use this information to decide whether to retrieve the document as a BLOB instance or a CLOB instance.">HTTPURIType PL/SQL Method GETCONTENTTYPE()</a>&#34;</span></p>
</li>
<li>
<p><a class="olink DBSEG40012" target="_blank" href="../DBSEG/fine_grained_access.htm#DBSEG40012"><span class="italic">Oracle Database Security Guide</span></a> for information about managing fine-grained access to external network services</p>
</li>
</ul>
</div>
</li>
<li>
<p><span class="bold"><code>DBURIType</code></span> &ndash; An object of this type is called a <strong class="term">DBUri</strong> and represents a URI that targets database data &ndash; a table, one or more rows, or a single column. With <code>DBURIType</code>, you can create objects that represent links to <span class="italic">database data</span>, and retrieve such data <span class="italic">as XML</span> by calling object methods. A DBUri uses a simple form of XPath expression as its URI syntax &ndash; for example, the following XPath expression is a DBUri reference to the row of table <code>HR.employees</code> where column <code>first_name</code> has value <code>Jack</code>:</p>
<pre>/HR/EMPLOYEES/ROW[FIRST_NAME=&#34;Jack&#34;] 
</pre>
<div class="infobox-note" id="GUID-F1EC54E6-614C-45EC-B5FA-973E127B8B02__GUID-20770546-734A-471D-B6B8-8B1ECBF04685">
<p class="notep1">See Also :</p>
<p><a href="xdb15dbu.htm#GUID-8945A71D-EB81-4165-88DC-F84C9C466E6B" title="A DBUri is a URI that targets database data. As for all instances of URIType subtypes, a DBUri provides indirect access to data. DBURIType also lets you address database data using XPath and construct XML documents containing database data that is targeted by a DBUri that reflects the database structure.">DBUris: Pointers to Database Data</a></p>
</div>
</li>
<li>
<p><span class="bold"><code>XDBURIType</code></span> &ndash; An object of this type is called an <strong class="term">XDBUri</strong>, and represents a URI that targets a resource in Oracle XML&nbsp;DB Repository. With PL/SQL constructor <code>XDBURIType</code> you can create objects that represent links to <span class="italic">repository resources</span>. You can then retrieve all or part of any resource by calling methods on those objects. The URI syntax for an XDBUri is a repository resource address, optionally followed by an XPath expression. For example, <code>/public/hr/doc1.xml#/purchaseOrder/lineItem</code> is an XDBUri reference to the <code>lineItem</code> child element of the root element <code>purchaseOrder</code> in repository file <code>doc1.xml</code> in folder <code>/public/hr</code>.</p>
<div class="infobox-note" id="GUID-F1EC54E6-614C-45EC-B5FA-973E127B8B02__GUID-2E88C31A-E2C8-4D72-A0B2-1736ACE815CB">
<p class="notep1">See Also :</p>
<p><a href="xdb15dbu.htm#GUID-62CFB196-932C-4193-B4FA-D9762778DEA0" title="XDBURIType is a subtype of URIType that exposes resources in Oracle XML&nbsp;DB Repository using URIs. Instances of object type XDBURIType are called XDBUris.">XDBUris: Pointers to Repository Resources</a></p>
</div>
</li>
</ul>
<p>Each of these object types is derived from an <span class="italic">abstract</span> object type, <span class="bold"><code>URIType</code></span>. As an abstract type, it has <span class="italic">no</span> instances (objects). Only its subtypes have instances.</p>
<p>Type <code>URIType</code> provides the following features:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic">Unified access to data stored inside and outside the server.</span> Because you can use <code>URIType</code> values to store pointers to HTTP(S) and DBUris, you can create queries and indexes without worrying about where the data resides.</p>
</li>
<li>
<p><span class="italic">Mapping of URIs in XML Documents to Database Columns.</span> When an XML document is broken up and stored in object-relational tables and columns, any URIs contained in the document are mapped to database columns of the appropriate <code>URIType</code> subtype.</p>
</li>
</ul>
<p>You can reference data stored in relational columns and expose it to the external world using URIs. Oracle Database provides a standard servlet, DBUriServlet, that interprets DBUris. It also provides PL/SQL package <code>UTL_HTTP</code> and Java class <code>java.net.URL</code>, which you can use to fetch URL references.</p>
<p><code>URIType</code> columns can be indexed natively in Oracle Database using Oracle Text &ndash; no special data store is needed.</p>
<div class="infoboxnotealso" id="GUID-F1EC54E6-614C-45EC-B5FA-973E127B8B02__GUID-14FFF376-5B1E-471B-B6F9-FF26D43662EC">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb15dbu.htm#GUID-590A6F12-9D64-4C6B-BD4C-0A7F6FA2B4F6" title="You can define your own subtypes of URIType that correspond to particular protocols. You can use PL/SQL package URIFACTORY to obtain the URI of a URIType instance, escape characters in a URI string or remove such escaping, and register or unregister a type name for handling a given URL.">Create New Subtypes of URIType Using Package URIFACTORY</a> &#34;</span> for information about defining new <code>URIType</code> subtypes</p>
</li>
<li>
<p><a href="xdb_indexing.htm#GUID-FE16BE28-035C-49EE-9683-6ED37876C3FC" title="You can create indexes on your XML data, to focus on particular parts of it that you query often and thus improve performance. There are various ways that you can index XMLType data, whether it is XML schema-based or non-schema-based, and regardless of the XMLType storage model you use.">Indexes for XMLType Data</a></p>
</li>
</ul>
</div>
</div>
<a id="ADXDB5227"></a>
<div class="props_rev_3"><a id="GUID-E2C058E7-921B-4BC0-9032-8308AC33528D"></a>
<h3 id="ADXDB-GUID-E2C058E7-921B-4BC0-9032-8308AC33528D" class="sect3"><span class="enumeration_section">33.3.1</span> Overview of DBUris and XDBUris</h3>
<div>
<p>Important uses of DBUris and XDBUris include referencing XSLT stylesheets from Web pages, referencing data in database tables or in repository folders without using SQL, and improving performance by bypassing the Web server.</p>
<ul style="list-style-type: disc;">
<li>
<p>You can reference XSLT stylesheets from within database-generated Web pages. PL/SQL package <code>DBMS_METADATA</code> uses DBUris to reference XSLT stylesheets. An XDBUri can be used to reference XSLT stylesheets stored in Oracle XML&nbsp;DB Repository.</p>
</li>
<li>
<p>You can reference HTML text, images and other data stored in the database. URLs can be used to point to data stored in database tables or in repository folders.</p>
</li>
<li>
<p>You can improve performance by bypassing the Web server. Replace a global URL in your XML document with a reference to the database, and use a servlet, a DBUri, or an XDBUri to retrieve the targeted content. Using a DBUri or an XDBUri generally provides better performance than using a servlet, because you interact directly with the database rather than through a Web server.</p>
</li>
<li>
<p>With a DBUri, you can access an XML document in the database without using SQL.</p>
</li>
<li>
<p>Whenever a repository resource is stored in a database table to which you have access, you can use either an XDBUri or a DBUri to access its content.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-E2C058E7-921B-4BC0-9032-8308AC33528D__GUID-739AFF4D-1C94-4424-86EF-0B904761290A">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS026" target="_blank" href="../ARPLS/d_metada.htm#ARPLS026"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>, &#34;DBMS_METADATA package&#34;</p>
</div>
</div>
</div>
<a id="ADXDB5229"></a><a id="ADXDB5228"></a>
<div class="props_rev_3"><a id="GUID-D141D949-19B4-4759-9187-5A0D010A0CA1"></a>
<h3 id="ADXDB-GUID-D141D949-19B4-4759-9187-5A0D010A0CA1" class="sect3"><span class="enumeration_section">33.3.2</span> URIType PL/SQL Methods</h3>
<div>
<p>Abstract object type <code>URIType</code> includes PL/SQL methods that can be used with each of its subtypes. Each of these methods can be overridden by any of the subtypes.</p>
<p><a href="xdb15dbu.htm#GUID-D141D949-19B4-4759-9187-5A0D010A0CA1__g1032380" title="This table describes the URIType member functions.">Table 33-1</a> lists the <code>URIType</code> PL/SQL methods. In addition, each of the subtypes has a constructor with the same name as the subtype.</p>
<div class="tblformal" id="GUID-D141D949-19B4-4759-9187-5A0D010A0CA1__g1032380">
<p class="titleintable">Table 33-1 URIType PL/SQL Methods</p>
<table class="cellalignment3420" title="URIType PL/SQL Methods " summary="This table describes the URIType member functions.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3427" id="d160453e706">URIType Method</th>
<th class="cellalignment3428" id="d160453e709">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3429" id="d160453e714" headers="d160453e706">
<pre dir="ltr">getURL()
</pre></td>
<td class="cellalignment3430" headers="d160453e714 d160453e709">
<p>Returns the URL of the <code>URIType</code> instance.</p>
<p>Use this method instead of referencing a URL directly. <code>URIType</code> subtypes override this method to provide the correct URL. For example, <code>HTTPURIType</code> stores a URL without prefix <code>http://</code>. Method <code>getURL()</code> then prepends the prefix and returns the entire URL.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3429" id="d160453e738" headers="d160453e706">
<pre dir="ltr">getExternalURL()
</pre></td>
<td class="cellalignment3430" headers="d160453e738 d160453e709">
<p>Similar to <code>getURL()</code>, but <code>getExternalURL()</code> escapes characters in the URL, to conform with the URL specification. For example, spaces are converted to the escaped value <code>%20</code>.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3429" id="d160453e754" headers="d160453e706">
<pre dir="ltr">getContentType()
</pre></td>
<td class="cellalignment3430" headers="d160453e754 d160453e709">
<p>Returns the MIME content type for the URI.</p>
<p><span class="italic">HTTPUri:</span> To return the content type, the URL is followed and the MIME header examined.</p>
<p><span class="italic">DBUri:</span> The returned content type is either <code>text/plain</code> (for a scalar value) or <code>text/xml</code> (otherwise).</p>
<p><span class="italic">XDBUri:</span> The value of the <code>ContentType</code> metadata property of the repository resource is returned.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3429" id="d160453e782" headers="d160453e706">
<pre dir="ltr">getCLOB()
</pre></td>
<td class="cellalignment3430" headers="d160453e782 d160453e709">
<p>Returns the target of the URI as a <code>CLOB</code> instance. The database character set is used for encoding the data.</p>
<p><span class="italic">DBUri:</span> <span class="italic">XML</span> data is returned (unless node-test <code>text()</code> is used, in which case the targeted data is returned as is). When a <code>BLOB</code> column is targeted, the binary data in the column is <span class="italic">translated as hexadecimal character data</span>.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3429" id="d160453e808" headers="d160453e706">
<pre dir="ltr">getBLOB()
</pre></td>
<td class="cellalignment3430" headers="d160453e808 d160453e709">
<p>Returns the target of the URI as a <code>BLOB</code> value. No character conversion is performed, and the character encoding is that of the URI target. This method can also be used to fetch binary data.</p>
<p><span class="italic">DBUri:</span> When applied to a DBUri that targets a <code>BLOB</code> column, <code>getBLOB()</code> returns the binary data <span class="italic">translated as hexadecimal character data</span>. When applied to a DBUri that targets <span class="italic">non</span>-binary data, the data is returned in the database character set.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3429" id="d160453e834" headers="d160453e706">
<pre dir="ltr">getXML()
</pre></td>
<td class="cellalignment3430" headers="d160453e834 d160453e709">
<p>Returns the target of the URI as an <code>XMLType</code> instance. Using this, an application that performs operations other than <code>getCLOB()</code> and <code>getBLOB()</code> can use <code>XMLType</code> methods to do those operations. This throws an exception if the URI does not target a well-formed XML document.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3429" id="d160453e853" headers="d160453e706">
<pre dir="ltr">createURI()
</pre></td>
<td class="cellalignment3430" headers="d160453e853 d160453e709">
<p>Constructs an instance of one of the <code>URIType</code> subtypes.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso" id="GUID-D141D949-19B4-4759-9187-5A0D010A0CA1__GUID-62F5582C-9626-46F3-977F-E00869844A20">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS800" target="_blank" href="../ARPLS/t_dburi.htm#ARPLS800"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</div>
</div>
<a id="ADXDB5231"></a><a id="ADXDB5230"></a>
<div class="props_rev_3"><a id="GUID-184D639E-8F1A-455D-8709-84123F42C10E"></a>
<h4 id="ADXDB-GUID-184D639E-8F1A-455D-8709-84123F42C10E" class="sect4"><span class="enumeration_section">33.3.2.1</span> HTTPURIType PL/SQL Method GETCONTENTTYPE()</h4>
<div>
<p><code>HTTPURIType</code> PL/SQL method <code>getContentType()</code> returns the MIME information for its targeted document. You can use this information to decide whether to retrieve the document as a <code>BLOB</code> instance or a <code>CLOB</code> instance.</p>
<p>For example, you might treat a Web page with a MIME type of <code>x/jpeg</code> as a <code>BLOB</code> instance, and one with a MIME type of <code>text/plain</code> or <code>text/html</code> as a <code>CLOB</code> instance.</p>
<p><a href="xdb15dbu.htm#GUID-184D639E-8F1A-455D-8709-84123F42C10E__CBAFDAFH">Example 33-1</a> tests the HTTP content type to determine whether to retrieve data as a <code>CLOB</code> or <code>BLOB</code> instance. The content-type data is the HTTP header, for <code>HTTPURIType</code>, or the metadata of the database column, for <code>DBURIType</code>.</p>
<div class="example" id="GUID-184D639E-8F1A-455D-8709-84123F42C10E__CBAFDAFH">
<p class="titleinexample">Example 33-1 Using HTTPURIType PL/SQL Method GETCONTENTTYPE()</p>
<pre dir="ltr">DECLARE
  httpuri HTTPURIType;
  y CLOB;
  x BLOB;
BEGIN
  httpuri := HTTPURIType(&#39;http://www.oracle.com/index.html&#39;);
  DBMS_OUTPUT.put_line(httpuri.<span class="bold">getContentType</span>());
  IF httpuri.getContentType() = &#39;text/html&#39;
  THEN
     y := httpuri.getCLOB();
  END IF;
  IF httpuri.getContentType() = &#39;application-x/bin&#39;
  THEN
     x := httpuri.getBLOB();
  END IF;
END;
/
<span class="bold">text/html</span>
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5232"></a>
<div class="props_rev_3"><a id="GUID-4BC0E2A9-C10B-4FE1-9E36-53C6DB3B79E4"></a>
<h4 id="ADXDB-GUID-4BC0E2A9-C10B-4FE1-9E36-53C6DB3B79E4" class="sect4"><span class="enumeration_section">33.3.2.2</span> DBURIType PL/SQL Method GETCONTENTTYPE()</h4>
<div>
<p>PL/SQL method <code>getContentType()</code> returns the MIME information for a URL. If a DBUri targets a scalar value, then the MIME content type returned is <code>text/plain</code>. Otherwise, the type returned is <code>text/xml</code>.</p>
<pre dir="ltr">CREATE TABLE dbtab (a VARCHAR2(20), b BLOB);
</pre>
<p>DBUris corresponding to the following XPath expressions have content type <code>text/xml</code>, because each targets a complete column of XML data.</p>
<ul style="list-style-type: disc;">
<li>
<p><code>/HR/DBTAB/ROW/A</code></p>
</li>
<li>
<p><code>/HR/DBTAB/ROW/B</code></p>
</li>
</ul>
<p>DBUris corresponding to the following XPath expressions have content type <code>text/plain</code>, because each targets a scalar value.</p>
<ul style="list-style-type: disc;">
<li>
<p><code>/HR/DBTAB/ROW/A/text()</code></p>
</li>
<li>
<p><code>/HR/DBTAB/ROW/B/text()</code></p>
</li>
</ul>
</div>
</div>
<a id="ADXDB5233"></a>
<div class="props_rev_3"><a id="GUID-3CDCAFBB-BEB2-4684-BB2A-8058CB72FECE"></a>
<h4 id="ADXDB-GUID-3CDCAFBB-BEB2-4684-BB2A-8058CB72FECE" class="sect4"><span class="enumeration_section">33.3.2.3</span> DBURIType PL/SQL Method GETCLOB()</h4>
<div>
<p>When PL/SQL method <code>getCLOB()</code> is applied to a DBUri, the targeted data is returned as <span class="italic">XML</span> data, using the targeted column or table name as an XML element name. If the target XPath uses node-test <code>text()</code> then the data is returned as text without an enclosing XML tag.</p>
<p>In both cases, the returned data is in the database character set.</p>
<p>For example: If applied to a DBUri with XPath <code>/HR/DBTAB/ROW/A/text(),</code> where <code>A</code> is a non-binary column, the data in column <code>A</code> is returned as is. Without XPath node-test <code>text()</code>, the result is the data wrapped in XML:</p>
<pre dir="ltr">&lt;HR&gt;&lt;DBTAB&gt;&lt;ROW&gt;&lt;A&gt;<span class="italic">...data_in_column_A...</span>&lt;/A&gt;&lt;/ROW&gt;&lt;/DBTAB&gt;&lt;/HR&gt;
</pre>
<p>When applied to a DBUri that targets a <span class="italic">binary</span> (<code>BLOB</code>) column, the binary data in the column is <span class="italic">translated as hexadecimal character data</span>.</p>
<p>For example: If applied to a DBUri with XPath <code>/HR/DBTAB/ROW/B/text(),</code> where <code>B</code> is a <code>BLOB</code> column, the targeted binary data is translated to hexadecimal character data and returned. Without XPath node-test <code>text()</code>, the result is the translated data wrapped in XML:</p>
<pre dir="ltr">&lt;HR&gt;&lt;DBTAB&gt;&lt;ROW&gt;&lt;B&gt;<span class="italic">...data_translated_to_hex...</span>&lt;/B&gt;&lt;/ROW&gt;&lt;/DBTAB&gt;&lt;/HR&gt;
</pre></div>
</div>
<a id="ADXDB5234"></a>
<div class="props_rev_3"><a id="GUID-E33B9174-B16A-4D09-A8F9-DD595467E7EF"></a>
<h4 id="ADXDB-GUID-E33B9174-B16A-4D09-A8F9-DD595467E7EF" class="sect4"><span class="enumeration_section">33.3.2.4</span> DBURIType PL/SQL Method GETBLOB()</h4>
<div>
<p>When applied to a DBUri that targets a <code>BLOB</code> column, PL/SQL method <code>getBLOB()</code> returns the binary data <span class="italic">translated as hexadecimal character data</span>. When applied to a DBUri that targets <span class="italic">non</span>-binary data, method <code>getBLOB()</code> returns the data (as a <code>BLOB</code> value) in the database character set.</p>
<p>For example, consider table <code>dbtab</code>:</p>
<pre dir="ltr">CREATE TABLE dbtab (a VARCHAR2(20), b BLOB);
</pre>
<p>When <code>getBLOB()</code> is applied to a DBUri corresponding to XPath expression <code>/HR/DBTAB/ROW/B</code>, it returns a <code>BLOB</code> value containing an XML document with root element <code>B</code> whose content is the hexadecimal-character translation of the binary data of column <code>B</code>.</p>
<p>When <code>getBLOB()</code> is applied to a DBUri corresponding to XPath expression <code>/HR/DBTAB/ROW/B/text()</code>, it returns a <code>BLOB</code> value containing only the hexadecimal-character translation of the binary data of column <code>B</code>.</p>
<p>When <code>getBLOB()</code> is applied to a DBUri corresponding to XPath expression <code>/HR/DBTAB/ROW/</code><span class="bold"><code>A</code></span><code>/text()</code>, which targets <span class="italic">non</span>-binary data, it returns a <code>BLOB</code> value containing the data of column <code>A</code>, in the database character set.</p>
</div>
</div>
</div>
</div>
<a id="ADXDB5236"></a><a id="ADXDB5237"></a><a id="ADXDB5235"></a>
<div class="props_rev_3"><a id="GUID-888C6A6E-9642-4213-88D4-BBEED24458A4"></a>
<h2 id="ADXDB-GUID-888C6A6E-9642-4213-88D4-BBEED24458A4" class="sect2"><span class="enumeration_section">33.4</span> Accessing Data Using URIType Instances</h2>
<div>
<p>To use instances of <code>URIType</code> subtypes for indirection, you store such instances in the database and then query to retrieve the targeted data with a PL/SQL method such as <code>getCLOB()</code>.</p>
<div class="section">
<p>You can create database columns using <code>URIType</code> or any of its subtypes, or you can store just the text of each URI as a string and then create the needed <code>URIType</code> instances on demand, when the URIs are accessed. You can store objects of different <code>URIType</code> subtypes in the same <code>URIType</code> database column.</p>
<p>You can also define your own object types that inherit from the <code>URIType</code> subtypes. Deriving new types lets you use custom techniques to retrieve, transform, or filter data.</p>
<div class="infoboxnotealso" id="GUID-888C6A6E-9642-4213-88D4-BBEED24458A4__GUID-3CD05415-E9B8-4B61-943C-FCD35AEADC5E">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb15dbu.htm#GUID-590A6F12-9D64-4C6B-BD4C-0A7F6FA2B4F6" title="You can define your own subtypes of URIType that correspond to particular protocols. You can use PL/SQL package URIFACTORY to obtain the URI of a URIType instance, escape characters in a URI string or remove such escaping, and register or unregister a type name for handling a given URL.">Create New Subtypes of URIType Using Package URIFACTORY</a> &#34;</span> for information about defining new <code>URIType</code> subtypes</p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb08tra.htm#GUID-DBEB8B7E-B335-4D07-8A5D-42083A83155D" title="You can apply XSL transformations to XML Schema-based documents using the built-in Oracle XML&nbsp;DB XSLT processor. In-database XML-specific optimizations can significantly reduce the memory required, eliminate the overhead associated with parsing, and reduce network traffic.">XSL Transformation and Oracle XML&nbsp;DB</a>&#34;</span> for information about transforming XML data</p>
</li>
</ul>
</div>
<p><a href="xdb15dbu.htm#GUID-888C6A6E-9642-4213-88D4-BBEED24458A4__BABBACBF">Example 33-2</a> stores an HTTPUri and a DBUri (instances of <code>URIType</code> subtypes <code>HTTPURIType</code> and <code>DBURIType</code>) in the same database column of type <code>URIType</code>. A query retrieves the data addressed by each of the URIs. The first URI is a Web-page URL. The second URI references data in table <code>employees</code> of standard database schema <code>HR</code>. (For brevity, only the beginning of the Web page is shown.)</p>
<p>To use <code>URIType</code> PL/SQL method <code>createURI()</code>, you must know the particular <code>URIType</code> subtype to use. PL/SQL method <code>getURI()</code> of package <code>URIFACTORY</code> lets you instead use the flexibility of late binding, determining the particular type information at run time.</p>
<p>PL/SQL factory method <code>URIFACTORY.getURI()</code> takes as argument a URI string. It returns a <code>URIType</code> instance of the appropriate subtype (<code>HTTPURIType, DBURIType,</code> or <code>XDBURIType</code>), based on the form of the URI string:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>If the URI starts with <code>http://</code>, then <code>getURI()</code> creates and returns an HTTPUri.</p>
</li>
<li>
<p>If the URI starts with either <code>/oradb/</code> or <code>/dburi/</code>, then <code>getURI()</code> creates and returns a DBUri.</p>
</li>
<li>
<p>Otherwise, <code>getURI()</code> creates and returns an XDBUri.</p>
</li>
</ul>
<p><a href="xdb15dbu.htm#GUID-888C6A6E-9642-4213-88D4-BBEED24458A4__CBABEBGC">Example 33-3</a> is similar to <a href="xdb15dbu.htm#GUID-888C6A6E-9642-4213-88D4-BBEED24458A4__BABBACBF">Example 33-2</a>, but it uses two different ways to obtain documents targeted by URIs:</p>
<ul style="list-style-type: disc;">
<li>
<p>PL/SQL method <code>SYS.URIFACTORY.getURI()</code> with <span class="italic">absolute</span> URIs:</p>
<ul style="list-style-type: disc;">
<li>
<p>an HTTPUri that targets HTTP address <code>http://www.oracle.com</code></p>
</li>
<li>
<p>a DBUri that targets database address <code>/oradb/HR/EMPLOYEES/ROW[EMPLOYEE_ID=200]</code></p>
</li>
</ul>
</li>
<li>
<p>Constructor <code>SYS.HTTPURIType()</code> with a <span class="italic">relative</span> URL (no <code>http://</code>). The same HTTPUri is used as for the absolute URI: the Oracle home page.</p>
</li>
</ul>
<p>In <a href="xdb15dbu.htm#GUID-888C6A6E-9642-4213-88D4-BBEED24458A4__CBABEBGC">Example 33-3</a>, the URI strings passed to <code>getURI()</code> are hard-coded, but they could just as easily be string values that are obtained by an application at run time.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-888C6A6E-9642-4213-88D4-BBEED24458A4__BABBACBF">
<p class="titleinexample">Example 33-2 Creating and Querying a URI Column</p>
<pre dir="ltr">CREATE TABLE uri_tab (url URIType);
Table created.
 
INSERT INTO uri_tab VALUES (<span class="bold">HTTPURIType.createURI</span>(&#39;http://www.oracle.com&#39;));
1 row created.
 
INSERT INTO uri_tab VALUES (<span class="bold">DBURIType.createURI</span>(
                              &#39;/HR/EMPLOYEES/ROW[FIRST_NAME=&#34;Jack&#34;]&#39;));
1 row created.
 
SELECT e.url.getCLOB() FROM uri_tab e;
 
E.URL.GETCLOB()
-------------------------------------------------------------------
&lt;!DOCTYPE HTML PUBLIC &#34;-//W3C//DTD HTML 4.0 Transitional//EN&#34;&gt;
&lt;html&gt;
&lt;head&gt;
<span class="bold">. . .</span>
 
&lt;?xml version=&#34;1.0&#34;?&gt;
 &lt;ROW&gt;
  &lt;EMPLOYEE_ID&gt;177&lt;/EMPLOYEE_ID&gt;
  &lt;FIRST_NAME&gt;Jack&lt;/FIRST_NAME&gt;
  &lt;LAST_NAME&gt;Livingston&lt;/LAST_NAME&gt;
  &lt;EMAIL&gt;JLIVINGS&lt;/EMAIL&gt;
  &lt;PHONE_NUMBER&gt;011.44.1644.429264&lt;/PHONE_NUMBER&gt;
  &lt;HIRE_DATE&gt;23-APR-06&lt;/HIRE_DATE&gt;
  &lt;JOB_ID&gt;SA_REP&lt;/JOB_ID&gt;
  &lt;SALARY&gt;8400&lt;/SALARY&gt;
  &lt;COMMISSION_PCT&gt;.2&lt;/COMMISSION_PCT&gt;
  &lt;MANAGER_ID&gt;149&lt;/MANAGER_ID&gt;
  &lt;DEPARTMENT_ID&gt;80&lt;/DEPARTMENT_ID&gt;
 &lt;/ROW&gt;
 
2 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-888C6A6E-9642-4213-88D4-BBEED24458A4__CBABEBGC">
<p class="titleinexample">Example 33-3 Using Different Kinds of URI, Created in Different Ways</p>
<pre dir="ltr">CREATE TABLE uri_tab (docUrl SYS.URIType, docName VARCHAR2(200));
Table created.
 
-- Insert an HTTPUri with absolute URL into SYS.URIType using URIFACTORY.
-- The target is Oracle home page.
INSERT INTO uri_tab VALUES
  (SYS.URIFACTORY.<span class="bold">getURI</span>(&#39;http://www.oracle.com&#39;), &#39;<span class="bold">AbsURL</span>&#39;);
1 row created.
 
-- Insert an HTTPUri with relative URL using constructor SYS.HTTPURIType.
-- Note the absence of prefix http://. The target is the same.
INSERT INTO uri_tab VALUES (SYS.<span class="bold">HTTPURIType</span>(&#39;www.oracle.com&#39;), &#39;<span class="bold">RelURL</span>&#39;);
1 row created.

-- Insert a DBUri that targets employee data from table HR.employees.
INSERT INTO uri_tab VALUES
  (SYS.URIFACTORY.<span class="bold">getURI</span>(&#39;/oradb/HR/EMPLOYEES/ROW[EMPLOYEE_ID=200]&#39;), &#39;<span class="bold">Emp200</span>&#39;);
1 row created.

-- Extract all of the documents.
SELECT e.docUrl.getCLOB(), docName FROM uri_tab e;
 
E.DOCURL.GETCLOB()
-----------------
DOCNAME
------------------------------------
&lt;!DOCTYPE HTML PUBLIC &#34;-//W3C//DTD HTML 4.0 Transitional//EN&#34;&gt;
&lt;html&gt;
&lt;head&gt;
<span class="bold">. . .</span>
<span class="bold">AbsURL</span>
 
&lt;!DOCTYPE HTML PUBLIC &#34;-//W3C//DTD HTML 4.01 Transitional//EN&#34;&gt;
&lt;html&gt;
&lt;head&gt;
<span class="bold">. . .</span>
<span class="bold">RelURL</span>

&lt;?xml version=&#34;1.0&#34;?&gt;
 &lt;ROW&gt;
  &lt;EMPLOYEE_ID&gt;200&lt;/EMPLOYEE_ID&gt;
  &lt;FIRST_NAME&gt;Jennifer&lt;/FIRST_NAME&gt;
  &lt;LAST_NAME&gt;Whalen&lt;/LAST_NAME&gt;
  &lt;EMAIL&gt;JWHALEN&lt;/EMAIL&gt;
  &lt;PHONE_NUMBER&gt;515.123.4444&lt;/PHONE_NUMBER&gt;
  &lt;HIRE_DATE&gt;17-SEP-03&lt;/HIRE_DATE&gt;
  &lt;JOB_ID&gt;AD_ASST&lt;/JOB_ID&gt;
  &lt;SALARY&gt;4400&lt;/SALARY&gt;
  &lt;MANAGER_ID&gt;101&lt;/MANAGER_ID&gt;
  &lt;DEPARTMENT_ID&gt;10&lt;/DEPARTMENT_ID&gt;
 &lt;/ROW&gt;
<span class="bold">Emp200</span>

3 rows selected.
 
-- In PL/SQL
CREATE OR REPLACE FUNCTION returnclob
  RETURN CLOB
  IS a SYS.URIType;
BEGIN
  SELECT docUrl INTO a FROM uri_Tab WHERE docName LIKE &#39;<span class="bold">Emp200</span>%&#39;;
  RETURN a.getCLOB;
END;
/
Function created.
 
SELECT returnclob() FROM DUAL;
 
RETURNCLOB()
---------------------------------------------------------------
&lt;?xml version=&#34;1.0&#34;?&gt;
 &lt;ROW&gt;
  &lt;EMPLOYEE_ID&gt;200&lt;/EMPLOYEE_ID&gt;
  &lt;FIRST_NAME&gt;Jennifer&lt;/FIRST_NAME&gt;
  &lt;LAST_NAME&gt;Whalen&lt;/LAST_NAME&gt;
  &lt;EMAIL&gt;JWHALEN&lt;/EMAIL&gt;
  &lt;PHONE_NUMBER&gt;515.123.4444&lt;/PHONE_NUMBER&gt;
  &lt;HIRE_DATE&gt;17-SEP-03&lt;/HIRE_DATE&gt;
  &lt;JOB_ID&gt;AD_ASST&lt;/JOB_ID&gt;
  &lt;SALARY&gt;4400&lt;/SALARY&gt;
  &lt;MANAGER_ID&gt;101&lt;/MANAGER_ID&gt;
  &lt;DEPARTMENT_ID&gt;10&lt;/DEPARTMENT_ID&gt;
 &lt;/ROW&gt;
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5238"></a>
<div class="props_rev_3"><a id="GUID-62CFB196-932C-4193-B4FA-D9762778DEA0"></a>
<h2 id="ADXDB-GUID-62CFB196-932C-4193-B4FA-D9762778DEA0" class="sect2"><span class="enumeration_section">33.5</span> XDBUris: Pointers to Repository Resources</h2>
<div>
<p><code>XDBURIType</code> is a subtype of <code>URIType</code> that exposes resources in Oracle XML&nbsp;DB Repository using URIs. Instances of object type <code>XDBURIType</code> are called <strong class="term">XDBUris</strong>.</p>
</div>
<a id="ADXDB5239"></a>
<div class="props_rev_3"><a id="GUID-37839CCF-A6FA-46C9-B7CD-6C2DDE27269E"></a>
<h3 id="ADXDB-GUID-37839CCF-A6FA-46C9-B7CD-6C2DDE27269E" class="sect3"><span class="enumeration_section">33.5.1</span> XDBUri URI Syntax</h3>
<div>
<p>The URL portion of an XDBUri URI is the hierarchical address of the targeted repository resource &ndash; it is a <span class="italic">repository</span> path (<span class="italic">not</span> an XPath expression). An optional fragment portion of the URI, after the number-sign (<code>#</code>), uses XPath syntax to target parts of an XML document.</p>
<div class="section">
<p>The optional fragment portion of the URI is appropriate only if the targeted resource is an <span class="italic">XML</span> document, in which case the fragment portion targets one or more its parts. If the targeted resource is not an XML document, then omit the fragment and number-sign.</p>
<p>The following are examples of XDBUri URIs:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>/public/hr/image27.jpg</code></p>
</li>
<li>
<p><code>/public/hr/doc1.xml#/PurchaseOrder/LineItem</code></p>
</li>
</ul>
<p>Based on the form of these URIs:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>/public/hr</code> is a folder resource in Oracle XML&nbsp;DB Repository.</p>
</li>
<li>
<p><code>image27.jpg</code> and <code>doc1.xml</code> are resources in folder <code>/public/hr</code>.</p>
</li>
<li>
<p>Resource <code>doc1.xml</code> is a file resource, and it contains an XML document.</p>
</li>
<li>
<p>The XPath expression /<code>PurchaseOrder/LineItem</code> refers to the <code>LineItem</code> child element in element <code>PurchaseOrder</code> of XML document <code>doc1.xml</code>.</p>
</li>
</ul>
<p>You can create an XDBUri using PL/SQL method <code>getURI()</code> of package <code>URIFACTORY</code>.</p>
<p><code>XDBURIType</code> is the <span class="italic">default</span> <code>URIType</code> used when generating instances using <code>URIFACTORY</code> PL/SQL method <code>getURI()</code>, unless the URI has one of the recognized prefixes <code>http://</code>, <code>/dburi</code>, or <code>/oradb</code>.</p>
<p>For example, if resource <code>doc1.xml</code> is present in repository folder <code>/public/hr</code>, then the following query returns an XDBUri that targets that resource.</p>
<pre dir="ltr">SELECT SYS.URIFACTORY.getURI(&#39;/public/hr/doc1.xml&#39;) FROM DUAL;
</pre>
<p>It is the lack of a special prefix that determines that the object type is <code>XDBURIType</code>, not any particular resource file extension or the presence of <code>#</code> followed by an XPath expression. Even if the resource were named <code>foo.bar</code> instead of <code>doc1.xml</code>, the returned <code>URIType</code> instance would still be an XDBUri.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDB5241"></a><a id="ADXDB5242"></a><a id="ADXDB5240"></a>
<div class="props_rev_3"><a id="GUID-855A4F8C-95B9-49BC-89DA-7130E07E7E9B"></a>
<h3 id="ADXDB-GUID-855A4F8C-95B9-49BC-89DA-7130E07E7E9B" class="sect3"><span class="enumeration_section">33.5.2</span> Using XDBUri: Examples</h3>
<div>
<p>XDBUri examples here use URIs in a table to access a repository resource and, together with PL/SQL method <code>getXML</code>, to query and retrieve XML documents.</p>
<div class="section">
<p><a href="xdb15dbu.htm#GUID-855A4F8C-95B9-49BC-89DA-7130E07E7E9B__CBAHDCAA">Example 33-4</a> creates an XDBUri, inserts values into a purchase-order table, and then selects all of the purchase orders. Because there is no special prefix used in the URI passed to <code>URIFACTORY.getURI()</code>, the created <code>URIType</code> instance is an XDBUri.</p>
<p>Because PL/SQL method <code>getXML()</code> returns an <code>XMLType</code> instance, you can use it with SQL/XML functions such as <code>XMLQuery</code>. The query in <a href="xdb15dbu.htm#GUID-855A4F8C-95B9-49BC-89DA-7130E07E7E9B__CBAEABDF">Example 33-5</a> illustrates this. The query retrieves all purchase orders numbered 999.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-855A4F8C-95B9-49BC-89DA-7130E07E7E9B__CBAHDCAA">
<p class="titleinexample">Example 33-4 Access a Repository Resource by URI Using an XDBUri</p>
<pre dir="ltr">DECLARE
res BOOLEAN;
postring VARCHAR2(100):= &#39;&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;ROW&gt;
&lt;PO&gt;999&lt;/PO&gt;
&lt;/ROW&gt;&#39;;
BEGIN
res:=DBMS_XDB_REPOS.createFolder(&#39;/public/orders/&#39;);
res:=DBMS_XDB_REPOS.createResource(&#39;/public/orders/po1.xml&#39;, postring);
END;
/
PL/SQL procedure successfully completed.
 
CREATE TABLE uri_tab (poUrl SYS.URIType, poName VARCHAR2(1000));
Table created.
 
-- Create an abstract type column so any type of URI can be used
-- Insert an absolute URL into poUrl.
-- The factory will create an XDBURIType because there is no prefix.
-- Here, po1.xml is an XML file that is stored in /public/orders/
-- of the XML repository.
INSERT INTO uri_tab VALUES
  (URIFACTORY.getURI(&#39;/public/orders/po1.xml&#39;), &#39;SomePurchaseOrder&#39;);
1 row created.
 
-- Get all the purchase orders
SELECT e.poUrl.getCLOB(), poName FROM uri_tab e;
 
E.POURL.GETCLOB()
-----------------
PONAME
------
&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;ROW&gt;
&lt;PO&gt;999&lt;/PO&gt;
&lt;/ROW&gt;
SomePurchaseOrder
 
1 row selected.
 
-- Using PL/SQL, you can access table uri_tab as follows:
CREATE OR REPLACE FUNCTION returnclob
  RETURN CLOB
  IS a URIType;
BEGIN
  -- Get absolute URL for purchase order named like &#39;Some%&#39;
   SELECT poUrl INTO a FROM uri_tab WHERE poName LIKE &#39;Some%&#39;;
   RETURN a.getCLOB();
END;
/ 
Function created.
 
SELECT returnclob() FROM DUAL;
 
RETURNCLOB()
---------------------
&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;ROW&gt;
&lt;PO&gt;999&lt;/PO&gt;
&lt;/ROW&gt;
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-855A4F8C-95B9-49BC-89DA-7130E07E7E9B__CBAEABDF">
<p class="titleinexample">Example 33-5 Using PL/SQL Method GETXML with XMLCAST and XMLQUERY</p>
<pre dir="ltr">SELECT e.poUrl.getCLOB() FROM uri_tab e
  WHERE XMLCast(XMLQuery(&#39;$po/ROW/PO&#39;
                         PASSING e.poUrl.getXML() AS &#34;po&#34;
                         RETURNING CONTENT)
                AS VARCHAR2(24))
        = &#39;999&#39;;

E.POURL.GETCLOB()
---------------------
&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;ROW&gt;
&lt;PO&gt;999&lt;/PO&gt;
&lt;/ROW&gt;
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB5243"></a>
<div class="props_rev_3"><a id="GUID-8945A71D-EB81-4165-88DC-F84C9C466E6B"></a>
<h2 id="ADXDB-GUID-8945A71D-EB81-4165-88DC-F84C9C466E6B" class="sect2"><span class="enumeration_section">33.6</span> DBUris: Pointers to Database Data</h2>
<div>
<p>A DBUri is a URI that targets <span class="italic">database data</span>. As for all instances of <code>URIType</code> subtypes, a DBUri provides indirect access to data. <code>DBURIType</code> also lets you address database data using XPath and construct XML documents containing database data that is targeted by a DBUri that reflects the database structure.</p>
<ul style="list-style-type: disc;">
<li>
<p>Address database data using XPath notation. This, in effect, lets you visualize and access the database as if it were XML data.</p>
<p>For example, a DBUri can use an expression such as <code>/HR/EMPLOYEES/ROW[FIRST_NAME=&#34;Jack&#34;]</code> to target the row of table <code>HR.employees</code> where column <code>first_name</code> has value <code>Jack</code>.</p>
</li>
<li>
<p><span class="italic">Construct an XML document</span> that contains database data targeted by a DBUri and whose structure reflects the database structure.</p>
<p>For example: A DBUri with XPath <code>/HR/DBTAB/ROW/A</code> can be used to construct an XML document that wraps the data of column <code>A</code> in XML elements that reflect the database structure and are named accordingly:</p>
<pre dir="ltr">&lt;HR&gt;&lt;DBTAB&gt;&lt;ROW&gt;&lt;A&gt;<span class="italic">...data_in_column_A...</span>&lt;/A&gt;&lt;/ROW&gt;&lt;/DBTAB&gt;&lt;/HR&gt;
</pre></li>
</ul>
<p>A DBUri does not reference a global location as does an HTTPUri. You can, however, also access objects addressed by a DBUri in a global manner, by appending the DBUri to an HTTPUri that identifies a servlet that handles DBUris &ndash; see <span class="q">&#34;<a href="xdb15dbu.htm#GUID-F9F4D101-D592-4A5C-80E7-02B3DFD3A3B3" title="You can retrieve repository resources using the Oracle XML&nbsp;DB HTTP server. Oracle Database also includes a servlet, DBUriServlet, that makes any kind of database data available through HTTP(S) URLs. The data can be returned as plain text, HTML, or XML.">DBUriServlet</a>&#34;</span> .</p>
</div>
<a id="ADXDB5245"></a><a id="ADXDB5244"></a>
<div class="props_rev_3"><a id="GUID-B091D77A-9774-4BD4-9D83-274377D35B4A"></a>
<h3 id="ADXDB-GUID-B091D77A-9774-4BD4-9D83-274377D35B4A" class="sect3"><span class="enumeration_section">33.6.1</span> View the Database as XML Data</h3>
<div>
<p>Using <code>DBURIType</code>, you can have what amounts to <span class="italic">XML</span> views of the portions of the database to which you have access, presented <span class="italic">in the form of XML data</span>. When visualized this way, the database data is effectively wrapped in XML elements, resulting in one or more XML documents.</p>
<p>You can access only those database schemas to which you have been granted access privileges. This portion of the database is, in effect, your own view of the database. This applies to all kinds database data, not just data that is stored as XML.</p>
<p>Such &#34;XML views&#34; are not database views, in the technical sense of the term. &#34;View&#34; here means only an abstract perspective that can be useful for understanding <code>DBURIType</code>. You can think of <code>DBURIType</code> as providing a way to visualize and access the database <span class="italic">as if it were</span> XML data.</p>
<p>However, <code>DBURIType</code> does not just provide an exercise in visualization and an additional means to access database data. Each &#34;XML view&#34; can be realized as an XML document &ndash; that is, you can use <code>DBURIType</code> to generate XML documents using database data.</p>
<p>All of this is another way of saying that <code>DBURIType</code> lets you use XPath notation to 1) address and access any database data to which you have access and 2) construct XML representations of that data.</p>
<p><a href="xdb15dbu.htm#GUID-B091D77A-9774-4BD4-9D83-274377D35B4A__i1030162">Figure 33-1</a> illustrates the relation between a relational table, <code>HR.employees</code>, a corresponding XML view of a portion of that table, and the corresponding DBUri URI (a simple XPath expression). In this case, the portion of the data exposed as XML is the row where <code>employee_id</code> is <code>200</code>. The URI can be used to access the data and construct an XML document that reflects the &#34;XML view&#34;.</p>
<div class="figure" id="GUID-B091D77A-9774-4BD4-9D83-274377D35B4A__i1030162">
<p class="titleinfigure">Figure 33-1 A DBUri Corresponds to an XML Visualization of Relational Data</p>
<img width="633" height="284" src="img/GUID-FD0F047D-0CD0-495E-A4DF-5415CD0B7DFF-default.gif" alt="Description of Figure 33-1 follows" title="Description of Figure 33-1 follows"/><br/>
<a href="img_text/GUID-FD0F047D-0CD0-495E-A4DF-5415CD0B7DFF-print.htm">Description of &#34;Figure 33-1 A DBUri Corresponds to an XML Visualization of Relational Data&#34;</a></div>
<!-- class="figure" -->
<p>The XML elements in the &#34;XML view&#34; and the steps in the URI XPath expression both reflect the database table and column names. Note the use of <span class="bold"><code>ROW</code></span> to indicate a row in the database table &ndash; both in the &#34;XML view&#34; and in the URI XPath expression.</p>
<p>Note also that the XPath expression contains a root-element step, <span class="bold"><code>oradb</code></span>. This is used to indicate that the URI corresponds to a DBUri, not an HTTPUri or an XDBUri. Whenever this correspondence is understood from context, this XPath step can be skipped. For example, if it is known that the path in question is a path to database data, the following URIs are equivalent:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold"><code>/oradb</code></span><code>/HR/EMPLOYEES/ROW[EMPLOYEE_ID=200]/LAST_NAME</code></p>
</li>
<li>
<p><code>/HR/EMPLOYEES/ROW[EMPLOYEE_ID=200]/LAST_NAME</code></p>
</li>
</ul>
<p>Whenever the URI context is not clear, however, you must use the prefix <code>/oradb</code> to distinguish a URI as corresponding to a DBUri. In particular, you must supply the prefix to <code>URIFACTORY</code> PL/SQL methods and to DBUriServlet.</p>
<div class="infoboxnotealso" id="GUID-B091D77A-9774-4BD4-9D83-274377D35B4A__GUID-D55C9620-5591-452B-81F0-6EFAD123DE40">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb15dbu.htm#GUID-590A6F12-9D64-4C6B-BD4C-0A7F6FA2B4F6" title="You can define your own subtypes of URIType that correspond to particular protocols. You can use PL/SQL package URIFACTORY to obtain the URI of a URIType instance, escape characters in a URI string or remove such escaping, and register or unregister a type name for handling a given URL.">Create New Subtypes of URIType Using Package URIFACTORY</a> &#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb15dbu.htm#GUID-F9F4D101-D592-4A5C-80E7-02B3DFD3A3B3" title="You can retrieve repository resources using the Oracle XML&nbsp;DB HTTP server. Oracle Database also includes a servlet, DBUriServlet, that makes any kind of database data available through HTTP(S) URLs. The data can be returned as plain text, HTML, or XML.">DBUriServlet</a>&#34;</span></p>
</li>
<li>
<p><a href="xdb13gen.htm#GUID-3BEB9A88-8B44-4AA3-89F4-8CBF6F8FA686" title="Oracle XML&nbsp;DB provides features for generating (constructing) XML data from relational data in the database. There are both SQL/XML standard functions and Oracle-specific functions and packages for generating XML data from relational content.">Generation of XML Data from Relational Data</a> for other ways to generate XML from database data</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDB5246"></a>
<div class="props_rev_3"><a id="GUID-5243076D-6390-4DCE-83D1-852E3E98109E"></a>
<h3 id="ADXDB-GUID-5243076D-6390-4DCE-83D1-852E3E98109E" class="sect3"><span class="enumeration_section">33.6.2</span> DBUri URI Syntax</h3>
<div>
<p>An XPath expression is a path into XML data that addresses one or more nodes. A DBUri exploits virtual XML visualization of the database to use a <span class="italic">simple form</span> of XPath expression as a URI to address database data. This is so, whether or not the data is XML.</p>
<div class="section">
<p>Thus, for <code>DBURIType</code>, Oracle Database supports only a subset of the full XPath or XPointer syntax. There are no syntax restrictions for <span class="italic"><span class="bold">X</span></span>DBUri XPath expressions. There is also an exception in the DBUri case: data in <code>XMLType</code> tables. For an <code>XMLType</code> table, the simple XPath form is used to address the table itself within the database. Then, to address particular XML data in the table, the remainder of the XPath expression can use the full XPath syntax. This exception applies only to <code>XMLType</code> <span class="italic">tables</span>, not to <code>XMLType</code> columns.</p>
<p>In any case, unlike an XDBUri, a DBUri URI does not use a number-sign (<code>#</code>) to separate the URL portion of a URI from a fragment (XPath) portion. <code>DBURIType</code> does not use URI fragments. Instead, the entire URI is treated as a (simple) XPath expression.</p>
<p>You can create DBUris to any database data to which you have access. XPath expressions such as the following are allowed:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>/</code><span class="italic"><code>database_schema</code></span><code>/</code><span class="italic"><code>table</code></span></p>
</li>
<li>
<p><code>/</code><span class="italic"><code>database_schema</code></span><code>/</code><span class="italic"><code>table</code></span><code>/ROW[</code><span class="italic"><code>predicate_expression</code></span><code>]/</code><span class="italic"><code>column</code></span></p>
</li>
<li>
<p><code>/</code><span class="italic"><code>database_schema</code></span><code>/</code><span class="italic"><code>table</code></span><code>/ROW[</code><span class="italic"><code>predicate_expression</code></span><code>]/</code><span class="italic"><code>object_column</code></span><code>/</code><span class="italic"><code>attribute</code></span></p>
</li>
<li>
<p><code>/</code><span class="italic"><code>database_schema</code></span><code>/</code><span class="italic"><span class="bold"><code>XMLType_table</code></span></span><code>/ROW/</code><span class="italic"><code>XPath_expression</code></span></p>
</li>
</ul>
<p>In the last case, <span class="italic"><code>XMLType_table</code></span> is an <code>XMLType</code> table, and <span class="italic"><code>XPath_expression</code></span> is <span class="italic">any</span> XPath expression. For tables that are <span class="italic">not</span> <code>XMLType</code>, a DBUri XPath expression must end at a column (it cannot address specific data inside a column). This restriction includes <code>XMLType</code> columns, LOB columns, and <code>VARCHAR2</code> columns that contain XML data.</p>
<p>A DBUri XPath expression can do any of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Target an entire table.</p>
<p>For example, <code>/HR/EMPLOYEES</code> targets table <code>employees</code> of database schema <code>HR</code>.</p>
</li>
<li>
<p>Include XPath predicates at any step in the path, except the database schema and table steps.</p>
<p>For example, <code>/HR/EMPLOYEES/ROW[EMPLOYEE_ID=200]/EMAIL</code> targets column <code>email</code> of table <code>HR.employees</code>, where <code>employee_id</code> is <code>200</code>.</p>
</li>
<li>
<p>Use the <code>text()</code> XPath node test on data with scalar content. This is the <span class="italic">only</span> node test that can be used, and it cannot be used with the table or row step.</p>
</li>
</ul>
<p>The following can be used in DBUri (XPath) <span class="italic">predicate</span> expressions:</p>
<ul style="list-style-type: disc;">
<li>
<p>Boolean operators <code>and</code>, <code>or</code>, and <code>not</code></p>
</li>
<li>
<p>Relational operators <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>!=</code>, <code>&gt;=</code>, <code>=</code>, <code>mod</code>, <code>div</code>, <code>*</code> (multiply)</p>
</li>
</ul>
<p>A DBUri XPath expression <span class="italic">must</span> do all of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use only the <span class="italic">child</span> XPath axis &ndash; other axes, such as parent, are not allowed.</p>
</li>
<li>
<p>Either specify a database schema or specify <code>PUBLIC</code> to resolve the table name without a specific schema.</p>
</li>
<li>
<p>Specify a database view or table name.</p>
</li>
<li>
<p>Include a <code>ROW</code> step, if a database column is targeted.</p>
</li>
<li>
<p>Identify a <span class="italic">single</span> data value, which can be an object-type instance or a collection.</p>
</li>
<li>
<p>Result in well-formed XML when it is used to generate XML data using database data.</p>
<p>An example of a DBUri that does <span class="italic">not</span> result in well-formed XML is <code>/HR/EMPLOYEES/ROW/LAST_NAME</code>. It returns more than one <code>&lt;LAST_NAME&gt;</code> element fragment, with no single root element.</p>
</li>
<li>
<p>Use <span class="italic">none</span> of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>*</code> (wildcard)</p>
</li>
<li>
<p><code>.</code> (self)</p>
</li>
<li>
<p><code>..</code> (parent)</p>
</li>
<li>
<p><code>//</code> (descendant or self)</p>
</li>
<li>
<p>XPath functions, such as <code>count</code></p>
</li>
</ul>
</li>
</ul>
<p>A DBUri XPath expression can optionally be prefixed by <span class="bold"><code>/oradb</code></span> or <span class="bold"><code>/dburi</code></span> (the two are equivalent) to distinguish it. This prefix is case-insensitive. However, the rest of the DBUri XPath expression is <span class="italic">case-sensitive</span>, as are XPath expressions generally. Thus, for example, to specify table <code>HR.employees</code> as a DBUri XPath expression, you must use <code>HR/EMPLOYEES</code>, not <code>hr/employees</code> (or a mixed-case combination), because table and column names are uppercase, by default.</p>
<div class="infoboxnotealso" id="GUID-5243076D-6390-4DCE-83D1-852E3E98109E__GUID-AD68A903-D3B6-47AA-804F-959FC254D98B">
<p class="notep1">See Also:</p>
<p><a href="http://www.w3.org/TR/xpath" target="_blank"><code>http://www.w3.org/TR/xpath</code></a> on XPath notation</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDB5247"></a>
<div class="props_rev_3"><a id="GUID-44FF7A63-1218-4E15-B35F-FBE85B776B22"></a>
<h3 id="ADXDB-GUID-44FF7A63-1218-4E15-B35F-FBE85B776B22" class="sect3"><span class="enumeration_section">33.6.3</span> DBUris are Scoped to a Database and Session</h3>
<div>
<p>A DBUri is scoped to a given database session, so the same DBUri can give different results in the same query, depending on the session context (which user is connected and what privileges the user has).</p>
<p>The content of the XML &ldquo;views&rdquo; you have of the database, and hence of the XML documents that you can construct, reflects the permissions you have for accessing particular database data at a given time.</p>
<p>To complicate things a bit, there is also an XML element <code>PUBLIC</code>, under which database data is accessible without any database-schema qualification. This is a convenience feature, but it can also lead to some confusion if you forget that the XML views of the database for a given user depend on the specific access the user has to the database at a given time.</p>
<p>XML element <code>PUBLIC</code> corresponds to the use of a <span class="italic">public synonym</span>. For example, when queried by user <code>quine</code>, the following query tries to match table <code>foo</code> under database schema <code>quine</code>, but if no such table exists, it tries to match a public synonym named <code>foo</code>.</p>
<pre dir="ltr">SELECT * FROM foo;
</pre>
<p>In the same way, XML element <code>PUBLIC</code> contains all of the database data visible to a given user and all of the data visible to that user through public synonyms. So, the same DBUri URI <code>/PUBLIC/FOO</code> can resolve to <code>quine.foo</code> when user <code>quine</code> is connected, and resolve to <code>curry.foo</code> when user <code>curry</code> is connected.</p>
</div>
</div>
<a id="ADXDB5248"></a>
<div class="props_rev_3"><a id="GUID-B3BCD96D-8BDC-4DD7-969A-38135F46C2B0"></a>
<h3 id="ADXDB-GUID-B3BCD96D-8BDC-4DD7-969A-38135F46C2B0" class="sect3"><span class="enumeration_section">33.6.4</span> Using DBUris &mdash;Examples</h3>
<div>
<p>A DBUri can identify a table, a row, a column in a row, or an attribute of an object column. Examples here show how to target different object types.</p>
<div class="section"></div>
<!-- class="section" --></div>
<a id="ADXDB5250"></a><a id="ADXDB5249"></a>
<div class="props_rev_3"><a id="GUID-AD513CF0-BB11-4850-89DF-4B6088803FC1"></a>
<h4 id="ADXDB-GUID-AD513CF0-BB11-4850-89DF-4B6088803FC1" class="sect4"><span class="enumeration_section">33.6.4.1</span> Targeting a Table Using a DBUri</h4>
<div>
<p>An example uses a DBUri that targets a complete table. An XML document is returned that corresponds to the table contents. The top-level XML element is named for the table. The values of each row are enclosed in a <code>ROW</code> element.</p>
<div class="section">
<p>This is shown in <a href="xdb15dbu.htm#GUID-AD513CF0-BB11-4850-89DF-4B6088803FC1__BABHFEIC">Example 33-6</a>. You target a complete database table using this syntax:</p>
<pre dir="ltr">/<span class="italic">database_schema</span>/<span class="italic">table</span>
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-AD513CF0-BB11-4850-89DF-4B6088803FC1__BABHFEIC">
<p class="titleinexample">Example 33-6 Targeting a Complete Table Using a DBUri</p>
<pre dir="ltr">CREATE TABLE uri_tab (url URIType);
Table created.
 
INSERT INTO uri_tab VALUES
       (DBURIType.createURI(&#39;/HR/EMPLOYEES&#39;));
1 row created.
 
SELECT e.url.getCLOB() FROM uri_tab e;

E.URL.GETCLOB()
---------------
&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;<span class="bold">EMPLOYEES</span>&gt;
 &lt;<span class="bold">ROW</span>&gt;
  &lt;EMPLOYEE_ID&gt;100&lt;/EMPLOYEE_ID&gt;
  &lt;FIRST_NAME&gt;Steven&lt;/FIRST_NAME&gt;
  &lt;LAST_NAME&gt;King&lt;/LAST_NAME&gt;
  &lt;EMAIL&gt;SKING&lt;/EMAIL&gt;
  &lt;PHONE_NUMBER&gt;515.123.4567&lt;/PHONE_NUMBER&gt;
  &lt;HIRE_DATE&gt;17-JUN-03&lt;/HIRE_DATE&gt;
  &lt;JOB_ID&gt;AD_PRES&lt;/JOB_ID&gt;
  &lt;SALARY&gt;24000&lt;/SALARY&gt;
  &lt;DEPARTMENT_ID&gt;90&lt;/DEPARTMENT_ID&gt;
 &lt;/ROW&gt;
 &lt;ROW&gt;
  &lt;EMPLOYEE_ID&gt;101&lt;/EMPLOYEE_ID&gt;
  &lt;FIRST_NAME&gt;Neena&lt;/FIRST_NAME&gt;
  &lt;LAST_NAME&gt;Kochhar&lt;/LAST_NAME&gt;
  &lt;EMAIL&gt;NKOCHHAR&lt;/EMAIL&gt;
  &lt;PHONE_NUMBER&gt;515.123.4568&lt;/PHONE_NUMBER&gt;
  &lt;HIRE_DATE&gt;21-SEP-05&lt;/HIRE_DATE&gt;
  &lt;JOB_ID&gt;AD_VP&lt;/JOB_ID&gt;
  &lt;SALARY&gt;17000&lt;/SALARY&gt;
  &lt;MANAGER_ID&gt;100&lt;/MANAGER_ID&gt;
  &lt;DEPARTMENT_ID&gt;90&lt;/DEPARTMENT_ID&gt;
 &lt;/ROW&gt;
 <span class="bold">. . .</span>
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5252"></a><a id="ADXDB5251"></a>
<div class="props_rev_3"><a id="GUID-7A8F1C4E-2ACE-40D0-89A7-2A0F0A7B9EE3"></a>
<h4 id="ADXDB-GUID-7A8F1C4E-2ACE-40D0-89A7-2A0F0A7B9EE3" class="sect4"><span class="enumeration_section">33.6.4.2</span> Targeting a Row in a Table Using a DBUri</h4>
<div>
<p>An example uses a DBUri that targets a single table row. The XPath predicate expression identifies the single table row that corresponds to employee number 200. The result is an XML document with <code>ROW</code> as the top-level element.</p>
<div class="section">
<p>This is shown in <a href="xdb15dbu.htm#GUID-7A8F1C4E-2ACE-40D0-89A7-2A0F0A7B9EE3__BABIIEEF">Example 33-7</a>. You target one or more specific rows of a table using this syntax:</p>
<pre dir="ltr">/<span class="italic">database_schema</span>/<span class="italic">table</span>/ROW[<span class="italic">predicate_expression</span>]
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-7A8F1C4E-2ACE-40D0-89A7-2A0F0A7B9EE3__BABIIEEF">
<p class="titleinexample">Example 33-7 Targeting a Particular Row in a Table Using a DBUri</p>
<pre dir="ltr">CREATE TABLE uri_tab (url URIType);
Table created.
 
INSERT INTO uri_tab VALUES
       (DBURIType.createURI(&#39;/HR/EMPLOYEES/<span class="bold">ROW[EMPLOYEE_ID=200]</span>&#39;));
1 row created.
 
SELECT e.url.getCLOB() FROM uri_tab e;
 
E.URL.GETCLOB()
-------------------------------------------------------
&lt;?xml version=&#34;1.0&#34;?&gt;
 &lt;ROW&gt;
  &lt;EMPLOYEE_ID&gt;<span class="bold">200</span>&lt;/EMPLOYEE_ID&gt;
  &lt;FIRST_NAME&gt;Jennifer&lt;/FIRST_NAME&gt;
  &lt;LAST_NAME&gt;Whalen&lt;/LAST_NAME&gt;
  &lt;EMAIL&gt;JWHALEN&lt;/EMAIL&gt;
  &lt;PHONE_NUMBER&gt;515.123.4444&lt;/PHONE_NUMBER&gt;
  &lt;HIRE_DATE&gt;17-SEP-03&lt;/HIRE_DATE&gt;
  &lt;JOB_ID&gt;AD_ASST&lt;/JOB_ID&gt;
  &lt;SALARY&gt;4400&lt;/SALARY&gt;
  &lt;MANAGER_ID&gt;101&lt;/MANAGER_ID&gt;
  &lt;DEPARTMENT_ID&gt;10&lt;/DEPARTMENT_ID&gt;
 &lt;/ROW&gt;
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5254"></a><a id="ADXDB5255"></a><a id="ADXDB5253"></a>
<div class="props_rev_3"><a id="GUID-AF7766D5-8C9C-4DB3-BE5F-344DEFCF9012"></a>
<h4 id="ADXDB-GUID-AF7766D5-8C9C-4DB3-BE5F-344DEFCF9012" class="sect4"><span class="enumeration_section">33.6.4.3</span> Targeting a Column Using a DBUri</h4>
<div>
<p>You can target a given column, a given attribute of an object column, or an object column whose attributes have given values. Examples illustrate these possibilities.</p>
<div class="section">
<p>You can target a specific column, using this syntax:</p>
<pre dir="ltr">/<span class="italic">database_schema</span>/<span class="italic">table</span>/ROW[<span class="italic">predicate_expression</span>]/<span class="italic">column</span>
</pre>
<p>You can target a specific attribute of an object column, using this syntax:</p>
<pre dir="ltr">/<span class="italic">database_schema</span>/<span class="italic">table</span>/ROW[<span class="italic">predicate_expression</span>]/<span class="italic">object_column</span>/<span class="italic">attribute</span>
</pre>
<p>You can target a specific object column whose attributes have specific values, using this syntax:</p>
<pre dir="ltr">/<span class="italic">database_schema</span>/<span class="italic">table</span>/ROW[<span class="italic">predicate_expression_with_attributes</span>]/<span class="italic">object_column</span>
</pre>
<p><a href="xdb15dbu.htm#GUID-AF7766D5-8C9C-4DB3-BE5F-344DEFCF9012__BABGJBEB">Example 33-8</a> uses a DBUri that targets column <code>last_name</code> for the same employee as in <a href="xdb15dbu.htm#GUID-7A8F1C4E-2ACE-40D0-89A7-2A0F0A7B9EE3__BABIIEEF">Example 33-7</a>. The top-level XML element is named for the targeted column.</p>
<p><a href="xdb15dbu.htm#GUID-AF7766D5-8C9C-4DB3-BE5F-344DEFCF9012__CBAEGIHJ">Example 33-9</a> uses a DBUri that targets a <code>CUST_ADDRESS</code> object column containing city and postal code attributes with certain values. The top-level XML element is named for the column, and it contains child elements for each of the object attributes.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-AF7766D5-8C9C-4DB3-BE5F-344DEFCF9012__BABGJBEB">
<p class="titleinexample">Example 33-8 Targeting a Specific Column Using a DBUri</p>
<pre dir="ltr">CREATE TABLE uri_tab (url URIType);
Table created.
 
INSERT INTO uri_tab VALUES
       (DBURIType.createURI(&#39;/HR/EMPLOYEES/ROW[EMPLOYEE_ID=200]/LAST_NAME&#39;));
1 row created.
 
SELECT e.url.getCLOB() FROM uri_tab e;
 
E.URL.GETCLOB()
------------------------------
&lt;?xml version=&#34;1.0&#34;?&gt;
 &lt;LAST_NAME&gt;Whalen&lt;/LAST_NAME&gt;
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-AF7766D5-8C9C-4DB3-BE5F-344DEFCF9012__CBAEGIHJ">
<p class="titleinexample">Example 33-9 Targeting an Object Column with Specific Attribute Values Using a DBUri</p>
<pre dir="ltr">CREATE TABLE uri_tab (url URIType);
Table created.
 
INSERT INTO uri_tab VALUES
  (DBURIType.createURI(
     &#39;/OE/CUSTOMERS/ROW[CUST_ADDRESS/CITY=&#34;Poughkeepsie&#34; and
                        CUST_ADDRESS/POSTAL_CODE=12601]/CUST_ADDRESS&#39;));
1 row created.
 
SELECT e.url.getCLOB() FROM uri_tab e;
 
E.URL.GETCLOB()
---------------
&lt;?xml version=&#34;1.0&#34;?&gt;
 &lt;CUST_ADDRESS&gt;
  &lt;STREET_ADDRESS&gt;33 Fulton St&lt;/STREET_ADDRESS&gt;
  &lt;POSTAL_CODE&gt;12601&lt;/POSTAL_CODE&gt;
  &lt;CITY&gt;Poughkeepsie&lt;/CITY&gt;
  &lt;STATE_PROVINCE&gt;NY&lt;/STATE_PROVINCE&gt;
  &lt;COUNTRY_ID&gt;US&lt;/COUNTRY_ID&gt;
 &lt;/CUST_ADDRESS&gt;
 
1 row selected.
</pre>
<p>The DBUri here identifies the object that has a <code>CITY</code> attribute with <code>Poughkeepsie</code> as value and a <code>POSTAL_CODE</code> attribute with <code>12601</code> as value.</p>
</div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5257"></a><a id="ADXDB5256"></a>
<div class="props_rev_3"><a id="GUID-4A1589B4-ACC6-4719-A9D5-48FBFB2E6D45"></a>
<h4 id="ADXDB-GUID-4A1589B4-ACC6-4719-A9D5-48FBFB2E6D45" class="sect4"><span class="enumeration_section">33.6.4.4</span> Retrieving the Text Value of a Column Using a DBUri</h4>
<div>
<p>In many cases, it can be useful to retrieve only the text values of a column and not the enclosing tags. For example, if XSLT stylesheets are stored in a <code>CLOB</code> column, you can retrieve the document text without having any enclosing column-name tags. An example illustrates this.</p>
<div class="section">
<p>You can use the <code>text()</code> XPath node test for this. It specifies that you want only the text value of the node. Use the following syntax:</p>
<pre dir="ltr">/oradb/<span class="italic">database_schema</span>/<span class="italic">table</span>/ROW[<span class="italic">predicate_expression</span>]/<span class="italic">column</span>/<span class="bold">text()</span>
</pre>
<p><a href="xdb15dbu.htm#GUID-4A1589B4-ACC6-4719-A9D5-48FBFB2E6D45__CBAGJCHE">Example 33-10</a> retrieves the text value of the employee <code>last_name</code> column for employee number 200, without the XML tags.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-4A1589B4-ACC6-4719-A9D5-48FBFB2E6D45__CBAGJCHE">
<p class="titleinexample">Example 33-10 Retrieve Only the Text Value of a Node Using a DBUri</p>
<pre dir="ltr">CREATE TABLE uri_tab (url URIType);
Table created.

INSERT INTO uri_tab VALUES
       (DBURIType.createURI(
          &#39;/HR/EMPLOYEES/ROW[EMPLOYEE_ID=200]/LAST_NAME/text()&#39;));

1 row created.

SELECT e.url.getCLOB() FROM uri_tab e;

E.URL.GETCLOB()
---------------
Whalen
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5259"></a><a id="ADXDB5258"></a>
<div class="props_rev_3"><a id="GUID-E1CBFB79-5B87-4EAD-A176-5001C2251A90"></a>
<h4 id="ADXDB-GUID-E1CBFB79-5B87-4EAD-A176-5001C2251A90" class="sect4"><span class="enumeration_section">33.6.4.5</span> Targeting a Collection Using a DBUri</h4>
<div>
<p>You can target a database collection, such as an ordered collection table (OCT). You must, however, target the entire collection &ndash; you cannot target individual members.</p>
<div class="section">
<p>When a collection is targeted, the XML document produced by the DBUri contains each collection member as an XML element, with all such elements enclosed in a element named for the <span class="italic">type</span> of the collection.</p>
<p><a href="xdb15dbu.htm#GUID-E1CBFB79-5B87-4EAD-A176-5001C2251A90__CBABCBGH">Example 33-11</a> uses a DBUri that targets a collection of numbers. The top-level XML element is named for the collection, and its children are named for the collection <span class="italic">type</span> (<code>NUMBER</code>).</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E1CBFB79-5B87-4EAD-A176-5001C2251A90__CBABCBGH">
<p class="titleinexample">Example 33-11 Targeting a Collection Using a DBUri</p>
<pre dir="ltr">CREATE TYPE num_collection AS VARRAY(10) OF NUMBER;
/
Type created.
 
CREATE TABLE orders (item VARCHAR2(10), quantities num_collection);
Table created.
 
INSERT INTO orders VALUES (&#39;boxes&#39;, num_collection(3, 7, 4, 9));
1 row created.
 
SELECT * FROM orders;
 
ITEM
----
QUANTITIES
----------
boxes
NUM_COLLECTION(3, 7, 4, 9)
 
1 row selected.
 
SELECT DBURIType(&#39;/HR/ORDERS/ROW[ITEM=&#34;boxes&#34;]/QUANTITIES&#39;).getCLOB() FROM DUAL;
 
DBURITYPE(&#39;/HR/ORDERS/ROW[ITEM=&#34;BOXES&#34;]/QUANTITIES&#39;).GETCLOB()
--------------------------------------------------------------
&lt;?xml version=&#34;1.0&#34;?&gt;
 &lt;QUANTITIES&gt;
  &lt;NUMBER&gt;3&lt;/NUMBER&gt;
  &lt;NUMBER&gt;7&lt;/NUMBER&gt;
  &lt;NUMBER&gt;4&lt;/NUMBER&gt;
  &lt;NUMBER&gt;9&lt;/NUMBER&gt;
 &lt;/QUANTITIES&gt;
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<a id="ADXDB5261"></a><a id="ADXDB5260"></a>
<div class="props_rev_3"><a id="GUID-590A6F12-9D64-4C6B-BD4C-0A7F6FA2B4F6"></a>
<h2 id="ADXDB-GUID-590A6F12-9D64-4C6B-BD4C-0A7F6FA2B4F6" class="sect2"><span class="enumeration_section">33.7</span> Create New Subtypes of URIType Using Package URIFACTORY</h2>
<div>
<p>You can define your own subtypes of <code>URIType</code> that correspond to particular protocols. You can use PL/SQL package <code>URIFACTORY</code> to obtain the URI of a <code>URIType</code> instance, escape characters in a URI string or remove such escaping, and register or unregister a type name for handling a given URL.</p>
<p>Additional PL/SQL methods are listed in <a href="xdb15dbu.htm#GUID-590A6F12-9D64-4C6B-BD4C-0A7F6FA2B4F6__g1047970" title="This table describes UriFactory functions and procedures.">Table 33-2</a>.</p>
<div class="tblformalwide" id="GUID-590A6F12-9D64-4C6B-BD4C-0A7F6FA2B4F6__g1047970">
<p class="titleintable">Table 33-2 URIFACTORY PL/SQL Methods</p>
<table class="cellalignment3431" title="URIFACTORY PL/SQL Methods" summary="This table describes UriFactory functions and procedures.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3432" id="d160453e2849">PL/SQL Method</th>
<th class="cellalignment3433" id="d160453e2852">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3434" id="d160453e2857" headers="d160453e2849">
<p><code>getURI()</code></p>
</td>
<td class="cellalignment3435" headers="d160453e2857 d160453e2852">
<p>Returns the URI of the <code>URIType</code> instance.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3434" id="d160453e2868" headers="d160453e2849">
<p><code>escapeURI()</code></p>
</td>
<td class="cellalignment3435" headers="d160453e2868 d160453e2852">
<p>Escapes the URI string by replacing characters that are not permitted in URIs by their equivalent escape sequence.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3434" id="d160453e2876" headers="d160453e2849">
<p><code>unescapeURI()</code></p>
</td>
<td class="cellalignment3435" headers="d160453e2876 d160453e2852">
<p>Removes escaping from a given URI.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3434" id="d160453e2884" headers="d160453e2849">
<p><code>registerURLHandler()</code></p>
</td>
<td class="cellalignment3435" headers="d160453e2884 d160453e2852">
<p>Registers a particular type name for handling a particular URL. This is called by <code>getURI()</code> to generate an instance of the type.</p>
<p>A Boolean argument can be used to indicate that the prefix must be stripped off before calling the appropriate type constructor.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3434" id="d160453e2897" headers="d160453e2849">
<p><code>unregisterURLHandler()</code></p>
</td>
<td class="cellalignment3435" headers="d160453e2897 d160453e2852">
<p>Unregisters a URL handler.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Of particular note is that you can use package <code>URIFACTORY</code> to define new subtypes of type <code>URIType</code>. You can then use those subtypes to provide specialized processing of URIs. In particular, you can define <code>URIType</code> subtypes that correspond to particular protocols &ndash; <code>URIFACTORY</code> then recognizes and processes instances of those subtypes accordingly.</p>
<p>Defining new types and creating database columns specific to the new types has these advantages:</p>
<ul style="list-style-type: disc;">
<li>
<p>It provides an implicit <span class="italic">constraint</span> on the columns to contain only instances of those types. This can be useful for implementing specialized indexes on a column for specific protocols. For a DBUri, for instance, you can implement specialized indexes that fetch data directly from disk blocks, rather than executing SQL queries.</p>
</li>
<li>
<p>You can have different constraints on different columns, based on the type. For a HTTPUri, for instance, you can define proxy and firewall constraints on a column, so that any access through the HTTP uses the proxy server.</p>
</li>
</ul>
</div>
<a id="ADXDB5263"></a><a id="ADXDB5262"></a>
<div class="props_rev_3"><a id="GUID-6CF03290-E943-4BD5-BA0C-BB9A6634FF4A"></a>
<h3 id="ADXDB-GUID-6CF03290-E943-4BD5-BA0C-BB9A6634FF4A" class="sect3"><span class="enumeration_section">33.7.1</span> Registering New URIType Subtypes with Package URIFACTORY</h3>
<div>
<p>To provide specialized processing of URIs, you define and register a new URIType subtype.</p>
<div class="section">
<ol>
<li>
<p>Create the new type using SQL statement <code>CREATE TYPE</code>. The type must implement PL/SQL method <code>createURI()</code>.</p>
</li>
<li>
<p>Optionally override the default methods, to perform specialized processing when retrieving data or to transform the XML data before displaying it.</p>
</li>
<li>
<p>Choose a new URI prefix, to identify URIs that use this specialized processing.</p>
</li>
<li>
<p>Register the new prefix using PL/SQL method <code>registerURLHandler()</code>, so that package <code>URIFACTORY</code> can create an instance of your new subtype when it receives a URI starting with the new prefix you defined.</p>
</li>
</ol>
<p>After the new subtype is defined, a URI with the new prefix is recognized by <code>URIFACTORY</code> methods, and you can create and use instances of the new type.</p>
<p>For example, suppose that you define a new protocol prefix, <code>ecom://</code>, and define a subtype of <code>URIType</code> to handle it. Perhaps the new subtype implements some special logic for PL/SQL method <code>getCLOB()</code>, or perhaps it makes some changes to XML tags or data in method <code>getXML()</code>. After you register prefix <code>ecom://</code> with <code>URIFACTORY</code>, a call to <code>getURI()</code> generates an instance of the new <code>URIType</code> subtype for a URI with that prefix.</p>
<p><a href="xdb15dbu.htm#GUID-6CF03290-E943-4BD5-BA0C-BB9A6634FF4A__CBAHBBAG">Example 33-12</a> creates a new type, <code>ECOMURIType</code>, to handle a new protocol, <code>ecom://</code>. The example stores three different kinds of URIs in a single table: an HTTPUri, a DBUri, and an instance of the new type, <code>ECOMURIType</code>. To run this example, you would need to define each of the <code>ECOMURIType</code> member functions.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-6CF03290-E943-4BD5-BA0C-BB9A6634FF4A__CBAHBBAG">
<p class="titleinexample">Example 33-12 URIFACTORY: Registering the ECOM Protocol</p>
<pre dir="ltr">CREATE TABLE url_tab (urlcol varchar2(80));
Table created.
 
-- Insert an HTTP URL reference
INSERT INTO url_tab VALUES (&#39;http://www.oracle.com/&#39;);
1 row created.
 
-- Insert a DBUri
INSERT INTO url_tab VALUES (&#39;/oradb/HR/EMPLOYEES/ROW[FIRST_NAME=&#34;Jack&#34;]&#39;);
1 row created.
 
-- Create a new type to handle a new protocol called ecom://
-- This is just an example template. For this to run, the implementations
-- of these functions must be specified.
CREATE OR REPLACE TYPE ECOMURIType UNDER SYS.URIType (
  OVERRIDING MEMBER FUNCTION getCLOB RETURN CLOB,
  OVERRIDING MEMBER FUNCTION getBLOB RETURN BLOB,
  OVERRIDING MEMBER FUNCTION getExternalURL RETURN VARCHAR2,
  OVERRIDING MEMBER FUNCTION getURI RETURN VARCHAR2,
  -- Must have this for registering with the URL handler
  STATIC FUNCTION createURI(url IN VARCHAR2) RETURN ECOMURIType);
/
-- Register a new handler for the ecom:// prefixes
BEGIN
  -- The handler type name is ECOMURIType; schema is HR
  -- Ignore the prefix case, so that URIFACTORY creates the same subtype
  -- for URIs beginning with ECOM://, ecom://, eCom://, and so on.
  -- Strip the prefix before calling PL/SQL method createURI(),
  -- so that the string &#39;ecom://&#39; is not stored inside the
  -- ECOMURIType object. It is added back automatically when
  -- you call ECOMURIType.getURI().
  URIFACTORY.registerURLHandler (prefix =&gt; &#39;ecom://&#39;,
                                 schemaname =&gt; &#39;HR&#39;,
                                 typename =&gt; &#39;ECOMURITYPE&#39;,
                                 ignoreprefixcase =&gt; TRUE,
                                 stripprefix =&gt; TRUE);
END;
/
PL/SQL procedure successfully completed.
 
-- Insert this new type of URI into the table
INSERT INTO url_tab VALUES (&#39;ECOM://company1/company2=22/comp&#39;);
1 row created.
 
-- Use the factory to generate an instance of the appropriate
-- subtype for each URI in the table.

-- You would need to define the member functions for this to work:
SELECT urifactory.getURI(urlcol) FROM url_tab;

-- This would generate:
HTTPURIType(&#39;www.oracle.com&#39;); -- an HTTPUri
DBURIType(&#39;/oradb/HR/EMPLOYEES/ROW[FIRST_NAME=&#34;Jack&#34;]&#39;, null); -- a DBUri
ECOMURIType(&#39;company1/company2=22/comp&#39;); -- an ECOMURIType instance
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB5265"></a><a id="ADXDB5266"></a><a id="ADXDB5264"></a>
<div class="props_rev_3"><a id="GUID-787BEE6B-0F47-4CB9-B83F-41979732BF82"></a>
<h2 id="ADXDB-GUID-787BEE6B-0F47-4CB9-B83F-41979732BF82" class="sect2"><span class="enumeration_section">33.8</span> SYS_DBURIGEN SQL Function</h2>
<div>
<p>You can create a DBUri by providing an XPath expression to constructor <code>DBURIType</code> or to appropriate <code>URIFACTORY</code> PL/SQL methods. With Oracle SQL function <code>sys_DburiGen</code>, you can alternatively create a DBUri using an <span class="italic">XPath that is composed</span> from database columns and their values.</p>
<p>Oracle SQL function <code>sys_DburiGen</code> takes as its argument one or more database columns or attributes, and optionally a rowid, and generates a DBUri that targets a particular column or row object. Function <code>sys_DburiGen</code> takes an additional parameter that indicates whether the text value of the node is needed. See <a href="xdb15dbu.htm#GUID-787BEE6B-0F47-4CB9-B83F-41979732BF82__i1030921">Figure 33-2</a>.</p>
<div class="figure" id="GUID-787BEE6B-0F47-4CB9-B83F-41979732BF82__i1030921">
<p class="titleinfigure">Figure 33-2 SYS_DBURIGEN Syntax</p>
<img width="661" height="95" src="img/GUID-93354860-3347-4A47-BAC7-D0183536B8CE-default.gif" alt="Description of Figure 33-2 follows" title="Description of Figure 33-2 follows"/><br/>
<a href="img_text/GUID-93354860-3347-4A47-BAC7-D0183536B8CE-print.htm">Description of &#34;Figure 33-2 SYS_DBURIGEN Syntax&#34;</a></div>
<!-- class="figure" -->
<p>All columns or attributes referenced must reside in the same table. They must each reference a unique value. If you specify multiple columns, then the initial columns identify the row, and the last column identifies the column within that row. If you do not specify a database schema, then the table name is interpreted as a public synonym.</p>
<div class="infoboxnotealso" id="GUID-787BEE6B-0F47-4CB9-B83F-41979732BF82__GUID-8C68C7EC-9122-41D6-AF87-D409F74CC015">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF06118" target="_blank" href="../SQLRF/functions200.htm#SQLRF06118"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</div>
<p><a href="xdb15dbu.htm#GUID-787BEE6B-0F47-4CB9-B83F-41979732BF82__CBAHAHIB">Example 33-13</a> uses Oracle SQL function <code>sys_DburiGen</code> to generate a DBUri that targets column <code>email</code> of table <code>HR.employees</code> where <code>employee_id</code> is <code>206</code>:</p>
<div class="example" id="GUID-787BEE6B-0F47-4CB9-B83F-41979732BF82__CBAHAHIB">
<p class="titleinexample">Example 33-13 SYS_DBURIGEN: Generating a DBUri that Targets a Column</p>
<pre dir="ltr">SELECT sys_DburiGen(employee_id, email)
  FROM employees
  WHERE employee_id = 206;

SYS_DBURIGEN(EMPLOYEE_ID,EMAIL)(URL, SPARE)
-------------------------------------------------------------------
DBURITYPE(&#39;/PUBLIC/EMPLOYEES/ROW[EMPLOYEE_ID = &#34;206&#34;]/EMAIL&#39;, NULL)

1 row selected.
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB5268"></a><a id="ADXDB5267"></a>
<div class="props_rev_3"><a id="GUID-13C7A746-93C5-47A6-8E7B-43A019E45E37"></a>
<h3 id="ADXDB-GUID-13C7A746-93C5-47A6-8E7B-43A019E45E37" class="sect3"><span class="enumeration_section">33.8.1</span> Rules for Passing Columns or Object Attributes to SYS_DBURIGEN</h3>
<div>
<p>A column or attribute passed to Oracle SQL function <code>sys_DburiGen</code> must obey certain rules.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic">Same table:</span> All columns referenced in function <code>sys_DburiGen</code> must come from the same table or view.</p>
</li>
<li>
<p><span class="italic">Unique mapping:</span> The column or object attribute must be uniquely mappable back to the table or view from which it came. The only virtual columns allowed are those produced with <code>value</code> or <code>ref</code>. The column can come from a subquery with a SQL <code>TABLE</code> collection expression, that is, <code>TABLE(...)</code>, or from an inline view (as long as the inline view does not rename the columns).</p>
<p>See <a class="olink SQLRF30047" target="_blank" href="../SQLRF/statements_10002.htm#SQLRF30047"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the SQL <code>TABLE</code> collection expression.</p>
</li>
<li>
<p><span class="italic">Key columns:</span> Either the rowid or a set of key columns must be specified. The list of key columns is not required to be declared as a unique or primary key, as long as the columns uniquely identify a particular row in the result.</p>
</li>
<li>
<p><span class="bold"><code>PUBLIC</code></span> <span class="italic">element:</span> If the table or view targeted by the rowid or key columns does not specify a database schema, then the <code>PUBLIC</code> keyword is used. When a DBUri is accessed, the table name resolves to the same table, synonym, or database view that was visible by that name when the DBUri was created.</p>
</li>
<li>
<p><span class="italic">Optional</span> <span class="bold"><code>text()</code></span> <span class="italic">argument:</span> By default, <code>DBURIType</code> constructs an XML document. Use <code>text()</code> as the third argument to <code>sys_DburiGen</code> to create a DBUri that targets a text node (no XML elements). For example:</p>
<pre dir="ltr">SELECT sys_DburiGen(employee_id, last_name, &#39;text()&#39;) FROM hr.employees,
  WHERE employee_id=200;
</pre>
<p>This constructs a DBUri with the following URI:</p>
<pre dir="ltr">/HR/EMPLOYEES/ROW[EMPLOYEE_ID=200]/LAST_NAME/text()
</pre></li>
<li>
<p><span class="italic">Single-column argument:</span> If there is a single-column argument, then the column is used as both the key column to identify the row and the referenced column.</p>
</li>
</ul>
<p>The query in <a href="xdb15dbu.htm#GUID-13C7A746-93C5-47A6-8E7B-43A019E45E37__CBAHEEEI">Example 33-14</a> uses <code>employee_id</code> as both the key column and the referenced column. It generates a DBUri that targets the row with <code>employee_id</code> 200.</p>
<div class="example" id="GUID-13C7A746-93C5-47A6-8E7B-43A019E45E37__CBAHEEEI">
<p class="titleinexample">Example 33-14 Passing Columns with Single Arguments to SYS_DBURIGEN</p>
<pre dir="ltr">SELECT sys_DburiGen(employee_id) FROM employees
  WHERE employee_id=200;
 
SYS_DBURIGEN(EMPLOYEE_ID)(URL, SPARE)
-------------------------------------
DBURITYPE(&#39;/PUBLIC/EMPLOYEES/ROW[EMPLOYEE_ID=&#39;&#39;200&#39;&#39;]/EMPLOYEE_ID&#39;, NULL)
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5269"></a>
<div class="props_rev_3"><a id="GUID-D55D9C0A-64F2-4D42-9D9D-F43C78726BCB"></a>
<h3 id="ADXDB-GUID-D55D9C0A-64F2-4D42-9D9D-F43C78726BCB" class="sect3"><span class="enumeration_section">33.8.2</span> Using SQL Function SYS_DBURIGEN: Examples</h3>
<div>
<p>Examples are presented that use SQL function <code>sys_DburiGen</code> to insert database references, return partial results from a large column, and return URLs to inserted objects.</p>
<div class="section"></div>
<!-- class="section" --></div>
<a id="ADXDB5270"></a>
<div class="sect4"><a id="GUID-4F147081-D1CB-4BBA-843B-7A14931BD907"></a>
<h4 id="ADXDB-GUID-4F147081-D1CB-4BBA-843B-7A14931BD907" class="sect4"><span class="enumeration_section">33.8.2.1</span> Inserting Database References Using SYS__DBURIGEN</h4>
<div>
<p>You can use SQL function <code>sys_DburiGen</code> to insert DBUris that reference specific database data. An example illustrates this.</p>
<div class="section"></div>
<!-- class="section" -->
<div class="example" id="GUID-4F147081-D1CB-4BBA-843B-7A14931BD907__GUID-85D75149-429A-4470-8142-708E15E2AB0A">
<p class="titleinexample">Example 33-15 Inserting Database References Using SYS_DBURIGEN</p>
<pre dir="ltr">CREATE TABLE doc_list_tab (docno NUMBER PRIMARY KEY, doc_ref SYS.DBURIType);
Table created.

-- Insert a DBUri that targets the row with employee_id=177
INSERT INTO doc_list_tab VALUES(1001, (SELECT sys_DburiGen(rowid, employee_id)
                                         FROM employees WHERE employee_id=177));
1 row created.
 
-- Insert a DBUri that targets the last_name column of table employees
INSERT INTO doc_list_tab VALUES(1002,
                                (SELECT sys_DburiGen(employee_id, last_name)
                                   FROM employees WHERE employee_id=177));
1 row created.
 
SELECT * FROM doc_list_tab;
 
     DOCNO
----------
DOC_REF(URL, SPARE)
-----------------------------------------------------
      1001
DBURITYPE(&#39;/PUBLIC/EMPLOYEES/ROW[ROWID=&#39;&#39;AAAQCcAAFAAAABSABN&#39;&#39;]/EMPLOYEE_ID&#39;, NULL)
 
      1002
DBURITYPE(&#39;/PUBLIC/EMPLOYEES/ROW[EMPLOYEE_ID=&#39;&#39;177&#39;&#39;]/LAST_NAME&#39;, NULL)
 
2 rows selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5272"></a><a id="ADXDB5912"></a><a id="ADXDB5913"></a><a id="ADXDB5911"></a>
<div class="props_rev_3"><a id="GUID-121FFB7F-A140-4AB0-B0A4-663C41EF0730"></a>
<h4 id="ADXDB-GUID-121FFB7F-A140-4AB0-B0A4-663C41EF0730" class="sect4"><span class="enumeration_section">33.8.2.2</span> Returning Partial Results Using SYS__DBURIGEN</h4>
<div>
<p>When selecting data from a large column, you might sometimes want to retrieve only a portion of the result, and create a URL that provides access to the full column.</p>
<div class="section">
<p>For example, consider the case of a travel story Web site. If travel stories are stored in a table and users search for a set of relevant stories, you do not want to list each entire story in the search-result page. Instead, you might show just the first 20 characters of each story, to represent the gist, and then return a URL to the full story. This can be done as follows:</p>
<p><a href="xdb15dbu.htm#GUID-121FFB7F-A140-4AB0-B0A4-663C41EF0730__CBAFABCA">Example 33-16</a> creates the travel story table.</p>
<p><a href="xdb15dbu.htm#GUID-121FFB7F-A140-4AB0-B0A4-663C41EF0730__CBAGCAJC">Example 33-17</a> creates a function that returns only the first 20 characters from the story.</p>
<p><a href="xdb15dbu.htm#GUID-121FFB7F-A140-4AB0-B0A4-663C41EF0730__CBAGFCHF">Example 33-18</a> creates a view that selects only the first twenty characters from the travel story, and returns a DBUri to the story column.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-121FFB7F-A140-4AB0-B0A4-663C41EF0730__CBAFABCA">
<p class="titleinexample">Example 33-16 Creating the Travel Story Table</p>
<pre dir="ltr">CREATE TABLE travel_story (story_name VARCHAR2(100), story CLOB);
Table created.

INSERT INTO travel_story
  VALUES (&#39;Egypt&#39;, &#39;This is the story of my time in Egypt....&#39;);
1 row created.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-121FFB7F-A140-4AB0-B0A4-663C41EF0730__CBAGCAJC">
<p class="titleinexample">Example 33-17 A Function that Returns the First 20 Characters</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION charfunc(clobval IN CLOB) RETURN VARCHAR2 IS
  res VARCHAR2(20);
  amount NUMBER := 20;
BEGIN
  DBMS_LOB.read(clobval, amount, 1, res);
  RETURN res;
END;
/
Function created.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-121FFB7F-A140-4AB0-B0A4-663C41EF0730__CBAGFCHF">
<p class="titleinexample">Example 33-18 Creating a Travel View for Use with SYS_DBURIGEN</p>
<pre dir="ltr">CREATE OR REPLACE VIEW travel_view AS
  SELECT story_name, charfunc(story) short_story,
         sys_DburiGen(story_name, story, &#39;text()&#39;) story_link
  FROM travel_story;
View created.
 
SELECT * FROM travel_view;
 
STORY_NAME
----------
SHORT_STORY
-----------
STORY_LINK(URL, SPARE)
----------------------
Egypt
This is the story of
DBURITYPE(&#39;/PUBLIC/TRAVEL_STORY/ROW[STORY_NAME=&#39;&#39;Egypt&#39;&#39;]/STORY/text()&#39;, NULL)
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5274"></a><a id="ADXDB5914"></a>
<div class="props_rev_3"><a id="GUID-37E24B75-9E1A-425F-B98A-451A7C713F9B"></a>
<h4 id="ADXDB-GUID-37E24B75-9E1A-425F-B98A-451A7C713F9B" class="sect4"><span class="enumeration_section">33.8.2.3</span> Returning URLs to Inserted Objects Using SYS_DBURIGEN</h4>
<div>
<p>You can use Oracle SQL function <code>sys_DburiGen</code> in the <code>RETURNING</code> clause of DML statements to retrieve the URL of an object as it is inserted.</p>
<div class="section">
<p>In <a href="xdb15dbu.htm#GUID-37E24B75-9E1A-425F-B98A-451A7C713F9B__CBAFEDEH">Example 33-19</a>, whenever a document is inserted into table <code>clob_tab</code>, its URL is inserted into table <code>uri_tab</code>. This is done using Oracle SQL function <code>sys_DburiGen</code> in the <code>RETURNING</code> clause of the <code>INSERT</code> statement.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-37E24B75-9E1A-425F-B98A-451A7C713F9B__CBAFEDEH">
<p class="titleinexample">Example 33-19 Retrieving a URL Using SYS_DBURIGEN in RETURNING Clause</p>
<pre dir="ltr">CREATE TABLE clob_tab (docid NUMBER, doc CLOB);
Table created.

CREATE TABLE uri_tab (docs SYS.DBURIType);
Table created.
</pre>
<p>In PL/SQL, specify the storage of the URL of the inserted document as part of the insertion operation, using the <code>RETURNING</code> clause and <code>EXECUTE IMMEDIATE</code>:</p>
<pre dir="ltr">DECLARE
  ret SYS.DBURIType;
BEGIN
  -- execute the insert operation and get the URL
  EXECUTE IMMEDIATE 
    &#39;INSERT INTO clob_tab VALUES (1, &#39;&#39;TEMP CLOB TEST&#39;&#39;) 
       RETURNING sys_DburiGen(docid, doc, &#39;&#39;text()&#39;&#39;) INTO :1&#39;
    RETURNING INTO ret;
  -- Insert the URL into uri_tab
  INSERT INTO uri_tab VALUES (ret);
END;
/

SELECT e.docs.getURL() FROM hr.uri_tab e;
E.DOCS.GETURL()
------------------------------------------------
/ORADB/PUBLIC/CLOB_TAB/ROW[DOCID=&#39;1&#39;]/DOC/text()
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<a id="ADXDB5277"></a><a id="ADXDB5275"></a>
<div class="props_rev_3"><a id="GUID-F9F4D101-D592-4A5C-80E7-02B3DFD3A3B3"></a>
<h2 id="ADXDB-GUID-F9F4D101-D592-4A5C-80E7-02B3DFD3A3B3" class="sect2"><span class="enumeration_section">33.9</span> DBUriServlet</h2>
<div>
<p>You can retrieve repository resources using the Oracle XML&nbsp;DB HTTP server. Oracle Database also includes a servlet, <strong class="term">DBUriServlet</strong>, that makes any kind of database data available through HTTP(S) URLs. The data can be returned as plain text, HTML, or XML.</p>
<p>A Web client or application can access such data without using SQL or a specialized database API. You can retrieve the data by linking to it on a Web page or by requesting it through HTTP-aware APIs of Java, PL/SQL, and Perl. You can display or process the data using an application such as a Web browser or an XML-aware spreadsheet. DBUriServlet can generate content that is XML data or not, and it can transform the result using XSLT stylesheets.</p>
<p>You make database data Web-accessible by using a URI that is composed of a servlet address (URL) plus a DBUri URI that specifies which database data to retrieve. This is the syntax, where <code>http://</code><span class="italic"><code>server:port</code></span> is the URL of the servlet (server and port), and <code>/oradb/</code><span class="italic"><code>database_schema</code></span><code>/</code><span class="italic"><code>table</code></span> is the DBUri URI (any DBUri URI can be used):</p>
<pre dir="ltr">http://<span class="italic">server</span>:<span class="italic">port</span>/<span class="bold">oradb</span>/<span class="italic">database_schema</span><span class="italic">/</span><span class="italic">table</span>
</pre>
<p>When using XPath notation in a URL for the servlet, you might need to escape certain characters. You can use <code>URIType</code> PL/SQL method <code>getExternalURL()</code> to do this.</p>
<p>You can either use <code>DBUriServlet</code>, which is pre-installed as part of Oracle XML&nbsp;DB, or write your own servlet that runs on a servlet engine. The servlet reads the URI portion of the invoking URL, creates a DBUri using that URI, calls <code>URIType</code> PL/SQL methods to retrieve the data, and returns the values in a form such as a Web page, an XML document, or a plain-text document.</p>
<p>The MIME type to use is specified to the servlet through the URI:</p>
<ul style="list-style-type: disc;">
<li>
<p>By default, the servlet produces MIME types <code>text/xml</code> and <code>text/plain</code>. If the DBUri path ends in <code>text()</code>, then <code>text/plain</code> is used. Otherwise, an XML document is generated with MIME type <code>text/xml</code>.</p>
</li>
<li>
<p>You can override the default MIME type, setting it to <code>binary/x-jpeg</code> or some other value, by using the <code>contenttype</code> argument to the servlet.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-F9F4D101-D592-4A5C-80E7-02B3DFD3A3B3__GUID-68CB0AAD-629F-471F-91B1-36C3DE92A4BC">
<p class="notep1">See Also:</p>
<p><a href="xdb23jv1.htm#GUID-C6EABC36-3FA8-4A82-B940-C20A01D8F586" title="Design guidelines are presented for writing Oracle XML&nbsp;DB applications in Java. This includes guidelines for writing and configuring Java servlets for Oracle XML&nbsp;DB.">How to Write Oracle XML&nbsp;DB Applications in Java</a>, for information about Oracle XML&nbsp;DB servlets</p>
</div>
<p><a href="xdb15dbu.htm#GUID-F9F4D101-D592-4A5C-80E7-02B3DFD3A3B3__g1049621" title="This table describes the DBUri Servlet optional arguments.">Table 33-3</a> describes each of the optional URL parameters you can pass to DBUriServlet to customize its output.</p>
<div class="tblformal" id="GUID-F9F4D101-D592-4A5C-80E7-02B3DFD3A3B3__g1049621">
<p class="titleintable">Table 33-3 DBUriServlet: Optional Arguments</p>
<table class="cellalignment3420" title="DBUriServlet: Optional Arguments " summary="This table describes the DBUri Servlet optional arguments.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3436" id="d160453e3598">Argument</th>
<th class="cellalignment3437" id="d160453e3601">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3438" id="d160453e3606" headers="d160453e3598">
<pre dir="ltr">rowsettag
</pre></td>
<td class="cellalignment3439" headers="d160453e3606 d160453e3601">
<p>Changes the default root tag name for the XML document. For example:</p>
<pre dir="ltr">http://<span class="italic">server</span>:8080/oradb/HR/EMPLOYEES<span class="bold">?rowsettag=OracleEmployees</span>
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3438" id="d160453e3620" headers="d160453e3598">
<pre dir="ltr">contenttype
</pre></td>
<td class="cellalignment3439" headers="d160453e3620 d160453e3601">
<p>Specifies the MIME type of the generated document. For example:</p>
<pre dir="ltr">http://<span class="italic">server</span>:8080/oradb/HR/EMPLOYEES<span class="bold">?contenttype=text/plain</span>
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3438" id="d160453e3634" headers="d160453e3598">
<pre dir="ltr">transform
</pre></td>
<td class="cellalignment3439" headers="d160453e3634 d160453e3601">
<p>Passes a URL to <code>URIFACTORY</code>, which retrieves the XSLT stylesheet at that location. This stylesheet is then applied to the XML document being returned by the servlet. For example:</p>
<pre dir="ltr">http://<span class="italic">server</span>:8080/oradb/HR/EMPLOYEES<span class="bold">?transform=</span>
<span class="bold">/oradb/QUINE/XSLS/DOC/text()</span>&amp;contenttype=text/html<a id="fn_1" href="#fn_1" onclick="footdisplay(1,&#34;This URL is split across two lines for the purpose of documentation. &#34;)"><sup>Foot 1</sup></a>
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1</sup></p>
<p>This URL is split across two lines for the purpose of documentation.</p>
</div>
<a id="ADXDB5915"></a>
<div class="props_rev_3"><a id="GUID-E0DD3BB9-4CD5-4037-AD0D-90BCF3325076"></a>
<h3 id="ADXDB-GUID-E0DD3BB9-4CD5-4037-AD0D-90BCF3325076" class="sect3"><span class="enumeration_section">33.9.1</span> Overriding the MIME Type Using a URL</h3>
<div>
<p>You can override MIME content type by using a URL that passes a different MIME type to the servlet as the <code>contenttype</code> parameter.</p>
<div class="section">
<p>To retrieve column <code>employee_id</code> of table <code>employee</code>, you can use a URL such as one of the following, where computer <span class="italic"><code>server.oracle.com</code></span> is running Oracle Database with a Web service listening to requests on port 8080. Step <code>oradb</code> is the virtual path that maps to the servlet.</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">http://<span class="italic">server.oracle.com</span>:8080/oradb/QUINE/A/ROW[B=200]/C/text()
</pre>
<p>Produces a content type of text/plain</p>
</li>
<li>
<pre dir="ltr">http://<span class="italic">server.oracle.com</span>:8080/oradb/QUINE/A/ROW[B=200]/C
</pre>
<p>Produces a content type of text/xml</p>
</li>
</ul>
<p>To override the content type, you can use a URL that passes <code>text/html</code> to the servlet as the <code>contenttype</code> parameter:</p>
<ul style="list-style-type: disc;">
<li>
<pre dir="ltr">http://<span class="italic">server.oracle.com</span>:8080/oradb/QUINE/A/ROW[B=200]/C<span class="bold">?contenttype=text/html</span>
</pre>
<p>Produces a content type of text/html</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDB5279"></a><a id="ADXDB5278"></a>
<div class="props_rev_3"><a id="GUID-419A9542-C2D5-41BA-AF66-AD898FF38BC8"></a>
<h3 id="ADXDB-GUID-419A9542-C2D5-41BA-AF66-AD898FF38BC8" class="sect3"><span class="enumeration_section">33.9.2</span> Customizing DBUriServlet</h3>
<div>
<p>To customize DBUriServlet you modify the Oracle XML&nbsp;DB configuration file, <code>xdbconfig.xml</code>.</p>
<div class="section">
<div class="infoboxnotealso" id="GUID-419A9542-C2D5-41BA-AF66-AD898FF38BC8__GUID-BFD55169-7D75-4BC9-A37F-616D9BE0877F">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb23jv1.htm#GUID-C6EABC36-3FA8-4A82-B940-C20A01D8F586" title="Design guidelines are presented for writing Oracle XML&nbsp;DB applications in Java. This includes guidelines for writing and configuring Java servlets for Oracle XML&nbsp;DB.">How to Write Oracle XML&nbsp;DB Applications in Java</a></p>
</li>
<li>
<p><a href="appaman.htm#GUID-FD0BCF20-2345-4D78-B96F-C52A4361291D" title="Administration of Oracle XML&nbsp;DB includes installing, upgrading, and configuring it.">Administration of Oracle XML&nbsp;DB</a></p>
</li>
<li>
<p><a href="appaman.htm#GUID-BCDB503F-14D1-4538-92B8-BF478B8C872C" title="You can access the Oracle XML&nbsp;DB configuration file, xdbconfig.xml, the same way you access any other XML schema-based resource. You can use FTP, HTTP(S), WebDAV, Oracle Enterprise Manager, or any of the resource and Document Object Model (DOM) APIs for Java, PL/SQL, or C (OCI).">Oracle XML&nbsp;DB Configuration API</a></p>
</li>
<li>
<p><a class="olink TDPSG20030" target="_blank" href="../TDPSG/GUID-3EC7A894-D620-4497-AFB1-64EB8C33D854.htm#TDPSG20030"><span class="italic">Oracle Database 2 Day + Security Guide</span></a> for information about database schema <code>XDB</code></p>
</li>
</ul>
</div>
<p>You can edit the Oracle XML&nbsp;DB configuration file, <code>xdbconfig.xml</code>, using database schema (user account) <code>XDB</code> with WebDAV, FTP, Oracle Enterprise Manager, or PL/SQL. To update the file using FTP or WebDAV, download the document, edit it, and save it back into the database. PL/SQL package&nbsp;<code>DBMS_XDB_CONFIG</code> provides a particularly convenient way to access the file, and it provides subprograms that perform specific configuration modifications. For example, you can use <code>DBMS_XDB_CONFIG.deleteservletmapping</code> to remove a servlet mapping.</p>
<p>DBUriServlet is installed at <code>/oradb/*</code>, which is the address specified in the <code>servlet-pattern</code> tag of <code>xdbconfig.xml</code>. The asterisk (<code>*</code>) is necessary to indicate that any path following <code>oradb</code> is to be mapped to the same servlet. <code>oradb</code> is published as the virtual path. You can change the path that is used to access the servlet.</p>
<p>In <a href="xdb15dbu.htm#GUID-419A9542-C2D5-41BA-AF66-AD898FF38BC8__CBABGAJC">Example 33-20</a>, the configuration file is modified to install DBUriServlet under <code>/dburi/*</code>. (The long XPath expression has been split here for documentation purposes. It actually needs to be on a single line.)</p>
<p>Security parameters, the servlet display-name, and the description can also be customized in configuration file <code>xdbconfig.xml</code>. The servlet can be removed by deleting its servlet-pattern. This can also be done using XQuery Update to update the servlet-mapping element to <code>NULL</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-419A9542-C2D5-41BA-AF66-AD898FF38BC8__CBABGAJC">
<p class="titleinexample">Example 33-20 Changing the Installation Location of DBUriServlet</p>
<pre dir="ltr">DECLARE
  doc XMLType;
  doc2 XMLType;
BEGIN
  doc := DBMS_XDB_CONFIG.cfg_get();
  SELECT XMLQuery(&#39;declare default element namespace 
                   &#34;http://xmlns.oracle.com/xdb/xdbconfig.xsd&#34;;
                   copy $i := $doc modify
                   for $j in
$i/xdbconfig/sysconfig/protocolconfig/httpconfig/webappconfig/servletconfig/servlet-mappings<a id="fn_2" href="#fn_2" onclick="footdisplay(2,&#34;This XQuery expression is split across two lines only for the purpose of documentation. &#34;)"><sup>Foot 2</sup></a>
/servlet-mapping[servlet-name=&#34;DBUriServlet&#34;]/<span class="bold">servlet-pattern</span>
                   return replace value of node $j with $i<span class="bold">/dburi/*</span>
                   return $i&#39;
                  PASSING DBMS_XDB_CONFIG.cfg_get() AS &#34;doc&#34;
                  RETURNING CONTENT) INTO doc2 FROM DUAL;
  DBMS_XDB_CONFIG.cfg_update(doc2);
  COMMIT;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5281"></a><a id="ADXDB5280"></a>
<div class="props_rev_3"><a id="GUID-A439EB9D-7733-4B73-B323-7D33753755A2"></a>
<h3 id="ADXDB-GUID-A439EB9D-7733-4B73-B323-7D33753755A2" class="sect3"><span class="enumeration_section">33.9.3</span> Using Roles for DBUriServlet Security</h3>
<div>
<p>Servlet security is handled by Oracle Database using roles. When users log in to the servlet, they use their database user name and password. The servlet checks to ensure that the user logging has one of the roles specified in the configuration file using parameter <code>security-role-ref</code>).</p>
<div class="section">
<p>By default, the servlet is available to role <code>authenticatedUser</code>, and any user who logs into the servlet with a valid database password has this role.</p>
<p>The role parameter can be changed to restrict access to any specific database roles. To change from the default <code>authenticatedUser</code> role to a role that you have created, you modify the Oracle XML&nbsp;DB configuration file.</p>
<p><a href="xdb15dbu.htm#GUID-A439EB9D-7733-4B73-B323-7D33753755A2__CBABCHAE">Example 33-21</a> changes the default role <code>authenticatedUser</code> to role <code>servlet-users</code> (which you must have created).</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-A439EB9D-7733-4B73-B323-7D33753755A2__CBABCHAE">
<p class="titleinexample">Example 33-21 Restricting Servlet Access to a Database Role</p>
<pre dir="ltr">DECLARE
  doc  XMLType;
  doc2 XMLType;
  doc3 XMLType;
BEGIN
  doc := DBMS_XDB_CONFIG.cfg_get();
  SELECT XMLQuery(&#39;copy $i := $p1 modify
                     (for $j in $i/xdbconfig/sysconfig/protocolconfig/httpconfig/webappconfig/servletconfig/<a id="fn_3" href="#fn_3" onclick="footdisplay(3,&#34;This XQuery expression is split across two lines only for the purpose of documentation. &#34;)"><sup>Foot 3</sup></a>
servlet-list/servlet[servlet-name=&#34;DBUriServlet&#34;]/security-role-ref/<span class="bold">role-name</span>
                      return replace value of node $j with $p2)
                  return $i&#39;
                 PASSING DOC AS &#34;p1&#34;, &#39;<span class="bold">servlet-users</span>&#39; AS &#34;p2&#34; RETURNING CONTENT)
    INTO doc2 FROM DUAL;
  SELECT XMLQuery(&#39;copy $i := $p1 modify
                      (for $j in $i/xdbconfig/sysconfig/protocolconfig/httpconfig/webappconfig/servletconfig/
servlet-list/servlet[servlet-name=&#34;DBUriServlet&#34;]/security-role-ref/<span class="bold">role-link</span>
                    return replace value of node $j with $p2)
                   return $i&#39;
                  PASSING DOC2 AS &#34;p1&#34;, &#39;<span class="bold">servlet-users</span>&#39; AS &#34;p2&#34; RETURNING CONTENT)
    INTO doc3 FROM DUAL;
  DBMS_XDB_CONFIG.cfg_update(doc3);
  COMMIT;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5283"></a><a id="ADXDB5282"></a>
<div class="props_rev_3"><a id="GUID-EDB23A06-6FD5-466F-9B37-74A96EACBC15"></a>
<h3 id="ADXDB-GUID-EDB23A06-6FD5-466F-9B37-74A96EACBC15" class="sect3"><span class="enumeration_section">33.9.4</span> Configuring Package URIFACTORY to Handle DBUris</h3>
<div>
<p>To improve efficiency, you can teach <code>URIFACTORY</code> that a URI of a given form represents database access and so should be realized as a DBUri, not an HTTPUri. You do this by registering a handler for the URI as a prefix, specifying <code>DBURIType</code> as the type of instance to generate.</p>
<div class="section">
<p>A URL such as <code>http://</code><span class="italic"><code>server</code></span><code>/</code><span class="italic"><code>servlets</code></span><code>/</code><span class="bold"><code>oradb</code></span> is handled by DBUriServlet (or by a custom servlet). When a URL such as this is stored as a <code>URIType</code> instance, it is generally desirable to use subtype <code>DBURIType</code>, since this URI targets database data.</p>
<p>However, if a <code>URIType</code> instance is created using the methods of PL/SQL package <code>URIFACTORY</code> then, by default, the subtype used is <code>HTTPURIType</code>, not <code>DBURIType</code>. This is because <code>URIFACTORY</code> looks only at the URI prefix, sees <code>http://</code>, and assumes that the URI targets a Web page. This results in unnecessary layers of communication and perhaps extra character conversions.</p>
<p>To teach <code>URIFACTORY</code> that URIs of the given form represent database accesses and so should be realized as DBUris, not HTTPUris, you register a handler for the URIs as a prefix, specifying <code>DBURIType</code> as the type of instance to generate.</p>
<p><a href="xdb15dbu.htm#GUID-EDB23A06-6FD5-466F-9B37-74A96EACBC15__CBAHACBC">Example 33-22</a> effectively tells <code>URIFACTORY</code> that any URI string starting with <code>http://</code><span class="italic"><code>server</code></span><code>/</code><span class="italic"><code>servlets</code></span><code>/oradb</code> corresponds to a database access.</p>
<p>After you execute this code, all <code>getURI()</code> calls in the same session automatically create DBUris for any URI strings with prefix <code>http://</code><span class="italic"><code>server</code></span><code>/</code><span class="italic"><code>servlets</code></span><code>/oradb</code>.</p>
<div class="infoboxnotealso" id="GUID-EDB23A06-6FD5-466F-9B37-74A96EACBC15__GUID-00ECE9CF-8A1C-43A4-82FF-660F45EDE2D4">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS800" target="_blank" href="../ARPLS/t_dburi.htm#ARPLS800"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about <code>URIFACTORY</code> functions</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-EDB23A06-6FD5-466F-9B37-74A96EACBC15__CBAHACBC">
<p class="titleinexample">Example 33-22 Registering a Handler for a DBUri Prefix</p>
<pre dir="ltr">BEGIN
  URIFACTORY.registerURLHandler(&#39;http://<span class="italic">server</span>/<span class="italic">servlets</span>/oradb&#39;,
                             &#39;SYS&#39;, &#39;DBURIType&#39;, true, true);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4225"></a>
<div class="props_rev_3"><a id="GUID-D5E47EC0-CD19-4485-85A0-3C850FB02F87"></a>
<h3 id="ADXDB-GUID-D5E47EC0-CD19-4485-85A0-3C850FB02F87" class="sect3"><span class="enumeration_section">33.9.5</span> Table or View Access from a Web Browser Using DBUri Servlet</h3>
<div>
<p>Oracle XML&nbsp;DB includes the DBUri servlet, which lets you access the content of any table or view directly from a web browser. It uses <code>DBURIType</code> to generate a simple XML document from the table contents. The servlet is C language-based and installed in the Oracle XML&nbsp;DB HTTP server.</p>
<p>By default, the servlet is installed under the virtual directory <code>/oradb</code>.</p>
<p>The URL passed to the <code>DBUri</code> Servlet is an extension of the URL passed to the <code>DBURIType</code>. The URL is extended with the address and port number of the Oracle XML&nbsp;DB HTTP server and the virtual root that directs HTTP(S) requests to the <code>DBUri</code> servlet. The default configuration for this is <code>/oradb</code>.</p>
<p>The URL <code>http://localhost:8080/oradb/HR/DEPARTMENTS</code> would thus return an XML document containing the contents of the <code>DEPARTMENTS</code> table in the <code>HR</code> database schema. This assumes that the Oracle XML&nbsp;DB HTTP server is running on port 8080, the virtual root for the DBUri servlet is <code>/oradb</code>, and that the user making the request has access to the <code>HR</code> database schema.</p>
<p><code>DBUri</code> servlet accepts parameters that allow you to specify the name of the <code>ROW</code> tag and MIME-type of the document that is returned to the client.</p>
<p>Content in <code>XMLType</code> table or view can also be accessed through the DBUri servlet. When the URL passed to the DBUri servlet references an <code>XMLType</code> table or <code>XMLType</code> view the URL can be extended with an XPath expression that can determine which documents in the table or row are returned. The XPath expression appended to the URL can reference any node in the document.</p>
<p>XML generated by DBUri servlet can be transformed using the XSLT processor built into Oracle XML&nbsp;DB. This lets XML that is generated by DBUri servlet be presented in a more legible format such as HTML.</p>
<div class="infoboxnotealso" id="GUID-D5E47EC0-CD19-4485-85A0-3C850FB02F87__GUID-1B297661-994D-41F6-B9C5-5B16707DB9AE">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb15dbu.htm#GUID-F9F4D101-D592-4A5C-80E7-02B3DFD3A3B3" title="You can retrieve repository resources using the Oracle XML&nbsp;DB HTTP server. Oracle Database also includes a servlet, DBUriServlet, that makes any kind of database data available through HTTP(S) URLs. The data can be returned as plain text, HTML, or XML.">DBUriServlet</a>&#34;</span></p>
</div>
<p><a id="d160453e4201" class="indexterm-anchor"></a>XSLT stylesheet processing is initiated by specifying a transform parameter as part of the URL passed to DBUri servlet. The stylesheet is specified using a URI that references the location of the stylesheet within database. The URI can either be a <code>DBURIType</code> value that identifies a <code>XMLType</code> column in a table or view, or a path to a document stored in Oracle XML&nbsp;DB Repository. The stylesheet is applied directly to the generated XML before it is returned to the client. When using DBUri servlet for XSLT processing, it is good practice to use the <code>contenttype</code> parameter to explicitly specify the MIME type of the generated output.</p>
<p>If the XML document being transformed is stored as an XML schema-based <code>XMLType</code> instance, then Oracle XML&nbsp;DB can reduce the overhead associated with XSL transformation by leveraging the capabilities of the lazily loaded virtual DOM.</p>
<p>The root of the URL is <code>/oradb</code>, so the URL is passed to the DBUri servlet that accesses the <code>purchaseorder</code> table in the <code>SCOTT</code> database schema, rather than as a resource in Oracle XML&nbsp;DB Repository. The URL includes an XPath expression that restricts the result set to those documents where node <code>/PurchaseOrder/Reference/text()</code> contains the value specified in the predicate. The <code>contenttype</code> parameter sets the MIME type of the generated document to <code>text/xml</code>.</p>
</div>
</div>
</div>
<hr/>
<br/>
<p style="text-decoration:underline">Footnote Legend</p>
Footnote&nbsp;2:
<p>This XQuery expression is split across two lines only for the purpose of documentation.</p>
<br/>
Footnote&nbsp;3:
<p>This XQuery expression is split across two lines only for the purpose of documentation.</p>
<br/></div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3410">
<tr>
<td class="cellalignment3417">
<table class="cellalignment3415">
<tr>
<td class="cellalignment3414"><a href="xdb23jv1.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3414"><a href="xdb_web_services.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3419">
<table class="cellalignment3413">
<tr>
<td class="cellalignment3414"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3414"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3414"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3414"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3414"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>