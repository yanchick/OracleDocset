<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1633"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/XPath%20Rewrite%20for%20Object-Relational%20Storage"></a><title>XPath Rewrite for Object-Relational Storage</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="For XMLType data stored object-relationally, queries involving XPath expression arguments to various SQL functions can often be automatically rewritten to queries against the underlying SQL tables, which are highly optimized."/>
<meta name="keywords" content="XPath rewrite, rewrite, XPath (XPath), XPath language, XQuery language, out-of-line storage, out-of-line storage, XPath rewrite, mapping, complexType to SQL, storage, out of line, procedures, PL/SQL, XPath2TabColMapping, DBMS_XMLSTORAGE_MANAGE PL/SQL package, XPath2TabColMapping procedure, functional evaluation, definition, renameCollectionTable procedure, renameCollectionTable"/>
<meta name="dcterms.created" content="2016-12-08T13:53:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E41152-15"/>
<meta name="dcterms.isVersionOf" content="ADXDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="xdb06stt.htm" title="Previous" type="text/html"/>
<link rel="Next" href="xdb07evo.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41152-15.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-35551023-CCAC-477B-8BBF-CD0E0B44C962"></a> <span id="PAGE" style="display:none;">31/61</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='xdb_rewrite'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="ADXDB0670"></a>
<h1 id="ADXDB-GUID-35551023-CCAC-477B-8BBF-CD0E0B44C962" class="sect1"><span class="enumeration_chapter">19</span> XPath Rewrite for Object-Relational Storage</h1>
<div>
<p>For <code>XMLType</code> data stored object-relationally, queries involving XPath expression arguments to various SQL functions can often be automatically rewritten to queries against the underlying SQL tables, which are highly optimized.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb_rewrite.htm#GUID-A2539B25-DD36-4F4C-8726-0B5FBD7A767B" title="Oracle XML&nbsp;DB can often optimize queries that use XPath expressions&thinsp;&mdash;&thinsp;for example, queries involving SQL functions such as XMLQuery, XMLTable, and XMLExists, which take XPath (XQuery) expressions as arguments. The XPath expression is, in effect, evaluated against the XML document without ever constructing the XML document in memory.">Overview of XPath Rewrite for Object-Relational Storage</a></p>
</li>
<li>
<p><a href="xdb_rewrite.htm#GUID-1C2FC3C9-7926-4635-85A4-6AC28D503CDA" title="The most common XPath expressions that are rewritten during XPath rewrite are described.">Examples of XPath Expressions that Are Rewritten</a></p>
</li>
<li>
<p><a href="xdb_rewrite.htm#GUID-3B3A1D6C-38AF-4381-9F47-5E26AE84F157" title="Guidelines are presented for using execution plans to analyze query execution in order to (a) determine whether XPath rewrite occurs and (b) optimize query execution by using secondary indexes. These guidelines apply only to XMLType data that is stored object-relationally.">Guidelines for Using Execution Plans to Analyze and Optimize XPath Queries</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-35551023-CCAC-477B-8BBF-CD0E0B44C962__GUID-6454F02C-0B4A-4593-952A-44D1589520A5">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb04cre.htm#GUID-F72DC7CD-40A9-4F07-9350-B80D2AD1F4D0" title="A SQL query that involves XQuery expressions can often be automatically rewritten (optimized) in one or more ways. This optimization is referred to as XML query rewrite or optimization. When this happens, the XQuery expression is, in effect, evaluated directly against the XML document without constructing a DOM in memory.">Performance Tuning for XQuery</a>&#34;</span></p>
</div>
</div>
<a id="ADXDB5845"></a><a id="ADXDB4549"></a>
<div class="props_rev_3"><a id="GUID-A2539B25-DD36-4F4C-8726-0B5FBD7A767B"></a>
<h2 id="ADXDB-GUID-A2539B25-DD36-4F4C-8726-0B5FBD7A767B" class="sect2"><span class="enumeration_section">19.1</span> Overview of XPath Rewrite for Object-Relational Storage</h2>
<div>
<p>Oracle XML&nbsp;DB can often optimize queries that use XPath expressions&thinsp;&mdash;&thinsp;for example, queries involving SQL functions such as <code>XMLQuery</code>, <code>XMLTable</code>, and <code>XMLExists</code>, which take XPath (XQuery) expressions as arguments. The XPath expression is, in effect, evaluated against the XML document without ever constructing the XML document in memory.</p>
<p>This optimization is called <strong class="term">XPath rewrite</strong>. It is a proper subset of XML query optimization, which also involves optimization of XQuery expressions, such as FLWOR expressions, that are not XPath expressions. XPath rewrite also enables indexes, if present on the column, to be used in query evaluation by the Optimizer.</p>
<p>The XPath expressions that can be rewritten by Oracle XML&nbsp;DB are a proper subset of those that are supported by Oracle XML&nbsp;DB. Whenever you can do so without losing functionality, use XPath expressions that can be rewritten.</p>
<p>XPath rewrite can occur in these contexts (or combinations thereof):</p>
<ul style="list-style-type: disc;">
<li>
<p>When <code>XMLType</code> data is stored in an object-relational column or table or when an <code>XMLType</code> view is built on relational data.</p>
<div class="infoboxnotealso" id="GUID-A2539B25-DD36-4F4C-8726-0B5FBD7A767B__GUID-3B6264E9-F4E1-4872-9088-292D4C130DC0">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb_rel_views.htm#GUID-420496CE-D62F-4EBE-A76E-861B932AE1E6" title="Relational database views over XML data provide conventional, relational access to XML content.">Relational Views over XML Data</a></p>
</li>
<li>
<p><a href="xdb14vie.htm#GUID-9F0A7B1F-269B-411F-AD8B-8F1CB2E2A671" title="You can create XMLType views over relational and object-relational data.">XMLType Views</a></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb_indexing.htm#GUID-BF638421-9D6E-4D72-8371-79D084A04BCA" title="You can effectively index XMLType data that is stored object-relationally by creating B-tree indexes on the underlying database columns that correspond to XML nodes.">Indexing XMLType Data Stored Object-Relationally</a>&#34;</span></p>
</li>
</ul>
</div>
</li>
<li>
<p>When you use an <code>XMLIndex</code> index.</p>
<div class="infoboxnotealso" id="GUID-A2539B25-DD36-4F4C-8726-0B5FBD7A767B__GUID-286505F6-C318-4AC4-A61A-2431309F79DB">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb_indexing.htm#GUID-6E6A5BA7-9B84-4E3D-B556-B3B286D26B46" title="B-tree indexes can be used advantageously with object-relational XMLType storage&thinsp;&mdash;&thinsp;they provide sharp focus by targeting the underlying objects directly. They are generally ineffective, however, in addressing the detailed structure (elements and attributes) of an XML document stored using binary XML. That is the special domain of XMLIndex.XMLIndex is used to index XML data that is unstructured or semi-structured, that is, data that generally has little or no fixed structure. It applies to XMLType data that is stored as binary XML.You create and use the structured component of an XMLIndex index for queries that project fixed, structured islands of XML content, even if the surrounding data is relatively unstructured.Although the index content tables of an XMLIndex structured component are normal relational tables, they are also read-only: you cannot add or drop their columns or modify (insert, update, or delete) their rows. The relational tables that are used for an XMLIndex structured component use SQL data types. XQuery expressions that are used in queries use XML data types (XML Schema data types and XQuery data types).In exchange partitioning, you exchange a table with a partition of another table. The first table (call it exchange_table) must have the same structure as the partition (call it partition) of the second table (call it table) with which it will be exchanged.Unlike a B-tree index, which you define for a specific database column that represents an individual XML element or attribute, or the XMLIndex structured component, which applies to specific, structured document parts, the unstructured component of an XMLIndex index is, by default, very general. Though you can create secondary indexes on path-table columns, you can generally ignore the path table itself. A secondary index on column VALUE is used with XPath expressions in a WHERE clause that have predicates involving string matches. For example:Even if you do not specify a secondary index for column VALUE when you create an XMLIndex index, a default secondary index is created on column VALUE. This default index has the default properties&thinsp;&mdash;&thinsp;in particular, it is an index for text (string-valued) data only.A few types of XPath expressions are not indexed by XMLIndex.Basic operations on an XMLIndex index include creating it, dropping it, altering it, and examining it. Examples are presented.You can perform various operations on an XMLIndex index that has an unstructured component, including manipulating the path table and the secondary indexes of that component.You can add extra secondary indexes to an XMLIndex unstructured component.An XMLIndex structured component indexes specific islands of structure in your XML data.When you create an XMLIndex index that has a structured component you can specify XML namespaces and storage options to use.You can use ALTER INDEX to add a structured component to an existing XMLIndex index.You can prevent ALTER INDEX from blocking when you add a group or column for the structured component of an XMLIndex index, so that queries that use the index do not need to wait.If an error is raised because some of your data does not match the data type used for the corresponding column of the structured XMLIndex component, you can in some cases simply modify the index by passing keyword MODIFY_COLUMN_TYPE to ALTER INDEX. If an XMLIndex index has both an unstructured and a structured component, then you can use ALTER INDEX to drop the structured component. You do this by dropping all of the structure groups that compose the structured component. Because the tables used for the structured component of an XMLIndex index are normal relational tables, you can index them using any standard relational indexes. To know whether a particular XMLIndex index has been used in resolving a query, you can examine an execution plan for the query. You can turn off the use of XMLIndex by using optimizer hint: /*+ NO_XML_QUERY_REWRITE */ or optimizer hint /*+ NO_XMLINDEX_REWRITE */. If you know which XPath expressions you are most likely to query then you can narrow the focus of XMLIndex indexing and thus improve performance.Some examples are presented of defining XMLIndex indexes on subsets of XPath expressions.Rules that apply to XMLIndex path subsetting are described.There are several guidelines that can help you use XMLIndex with an unstructured component.There are several guidelines that can help you use XMLIndex with a structured component.If you partition an XMLType table, or a table with an XMLType column, using range, list, or hash partitioning, you can also create an XMLIndex index on the table. You can optionally ensure that index creation and maintenance are carried out in parallel.You can defer the cost of maintaining an XMLIndex index that has only an unstructured component, performing maintenance only at commit time or when database load is reduced. This can improve DML performance, and it can enable bulk loading of unsynchronized index rows when an index is synchronized.If a query raises error ORA-08181, check whether the base XMLType table of the query has an XMLIndex index with an unstructured component. If so, then manually synchronize the XMLIndex index using DBMS_XMLINDEX.syncIndex.The Oracle Database cost-based optimizer determines how to most cost-effectively evaluate a given query, including which indexes, if any, to use. For it to be able to do this accurately, you must collect statistics on various database objects. Information about the standard database indexes is available in static public views USER_INDEXES, ALL_INDEXES, and DBA_INDEXES. Similar information about XMLIndex indexes is available in static public views USER_XML_INDEXES, ALL_XML_INDEXES, and DBA_XML_INDEXES.Creation or modification of an XMLIndex index often involves the use of a PARAMETERS clause with SQL statement CREATE INDEX or ALTER INDEX. You can use it to specify index characteristics in detail.The string value used for the PARAMETERS clause of a CREATE INDEX or ALTER INDEX statement has a 1000-character limit. To get around this limitation, you can use PL/SQL procedures registerParameter and modifyParameter in package DBMS_XMLINDEX.The syntax for the PARAMETERS clause for CREATE INDEX and ALTER INDEX is defined.When you create an XMLIndex index, if there is no XMLIndex_parameters_clause, then the new index has only an unstructured component. If there is an XMLIndex_parameters_clause, but the PARAMETERS argument is empty (&#39;&#39;), then the result is the same: an index with only an unstructured component.Certain considerations apply to using XMLIndex_parameters.Certain considerations apply to using the PATHS clause.Certain considerations apply to using create_index_paths_clause and alter_index_paths_clause.Syntactically, each of the clauses pikey_clause, path_id_clause, and order_key_clause is optional. A pikey index is created even if you do not specify a pikey_clause. To create a path id index or an order-key index, you must specify a path_id_clause or an order_key_clause, respectively.Certain considerations apply to using value_clause.Certain considerations apply to using the ASYNC clause.Clause groups_clause is used only with CREATE INDEX (or following ADD GROUP in clause alter_index_group_clause). Clause alter_index_group_clause is used only with ALTER INDEX. Certain considerations apply to using XMLIndex_xmltable_clause.Certain considerations apply to using column_clause.">XMLIndex</a>&#34;</span></p>
</div>
</li>
</ul>
<p>The first case, rewriting queries that use object-relational XML data or <code>XMLType</code> views, is covered here. The <code>XMLType</code> views can be XML schema-based or not. Object-relational storage of <code>XMLType</code> data is always XML schema-based. Examples in this chapter are related to XML schema-based tables.</p>
<p>When XPath rewrite is possible for object-relational XML data, the database optimizer can derive an execution plan based on conventional relational algebra. This in turn means that Oracle XML&nbsp;DB can leverage all of the features of the database and ensure that SQL statements containing XQuery and XPath expressions are executed in a highly performant and efficient manner. There is little overhead with this rewriting, so Oracle XML&nbsp;DB executes XQuery-based and XPath-based queries at near-relational speed.</p>
<p>In certain cases, XPath rewrite is not possible. This typically occurs when there is no SQL equivalent of the XPath expression. In this situation, Oracle XML&nbsp;DB performs a functional evaluation of the XPath expressions, which is generally more costly, especially if the number of documents to be processed is large.</p>
<p><a href="xdb_rewrite.htm#GUID-A2539B25-DD36-4F4C-8726-0B5FBD7A767B__CACIBIIG">Example 19-1</a> illustrates XPath rewrite for a simple query that uses an XPath expression.</p>
<div class="infoboxnotealso" id="GUID-A2539B25-DD36-4F4C-8726-0B5FBD7A767B__GUID-89E8E3E3-E3F5-4BD1-8F1E-A22FFCF6D037">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb06stt.htm#GUID-B1B67DF3-8E3A-4383-B67F-D14EF98BFBE9" title="For XMLType data stored object-relationally, careful planning is called for, to optimize performance. Similar considerations are in order as for relational data: entity-relationship models, indexing, data types, table partitions, and so on. To enable XPath rewrite and achieve optimal performance, you implement many such design choices using XML schema annotations.">XML Schema Annotation Guidelines for Object-Relational Storage</a>&#34;</span></p>
</div>
<div class="example" id="GUID-A2539B25-DD36-4F4C-8726-0B5FBD7A767B__CACIBIIG">
<p class="titleinexample">Example 19-1 XPath Rewrite</p>
<pre>SELECT po.OBJECT_VALUE FROM purchaseorder po
  WHERE XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                         PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
                AS VARCHAR2(128))
        = &#39;Sarah J. Bell&#39;;
</pre>
<p>The <code>XMLCast(XMLQuery...))</code> expression here is rewritten to the underlying relational column that stores the requestor information for the purchase order. The query is rewritten to something like the following:<a id="fn_1" href="#fn_1" onclick="footdisplay(1,&#34;This example uses sample database schema OE and its table purchaseorder. The XML schema for this table is annotated with attribute SQLName to specify SQL object attribute names such as REQUESTOR&thinsp;&mdash;&thinsp;see Example A-2. Without such annotations, this example would use p.\&#34;XMLDATA\&#34;.\&#34;Requestor\&#34;, not p.\&#34;XMLDATA\&#34;.\&#34;.REQUESTOR\&#34;. &#34;)"><sup>Foot&nbsp;1</sup></a></p>
<pre dir="ltr">SELECT OBJECT_VALUE FROM purchaseorder p
 WHERE CAST (p.&#34;XMLDATA&#34;.&#34;REQUESTOR&#34; AS VARCHAR2(128)) = &#39;Sarah J. Bell&#39;;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4558"></a><a id="ADXDB5847"></a>
<div class="props_rev_3"><a id="GUID-1C2FC3C9-7926-4635-85A4-6AC28D503CDA"></a>
<h2 id="ADXDB-GUID-1C2FC3C9-7926-4635-85A4-6AC28D503CDA" class="sect2"><span class="enumeration_section">19.2</span> Common XPath Expressions that Are Rewritten</h2>
<div>
<p>The most common XPath expressions that are rewritten during XPath rewrite are described.</p>
<p><a href="xdb_rewrite.htm#GUID-1C2FC3C9-7926-4635-85A4-6AC28D503CDA__g1048508" title="This table describes supported XPath expressions for translation to underlying SQL queries. It has two columns.">Table 19-1</a> presents the descriptions</p>
<div class="tblformalwide" id="GUID-1C2FC3C9-7926-4635-85A4-6AC28D503CDA__g1048508">
<p class="titleintable">Table 19-1 Sample of XPath Expressions that Are Rewritten to Underlying SQL Constructs</p>
<table class="cellalignment3431" title="Sample of XPath Expressions that Are Rewritten to Underlying SQL Constructs" summary="This table describes supported XPath expressions for translation to underlying SQL queries. It has two columns.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3502" id="d102352e636">XPath Expression for Translation</th>
<th class="cellalignment3503" id="d102352e639">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3504" id="d102352e644" headers="d102352e636">
<p>Simple XPath expressions (expressions with <code>child</code> and <code>attribute</code> axes only):</p>
<p><code>/PurchaseOrder/@Reference</code></p>
<p><code>/PurchaseOrder/Requestor</code></p>
</td>
<td class="cellalignment3505" headers="d102352e644 d102352e639">
<p>Involves traversals over object type attributes only, where the attributes are simple scalar or object types themselves.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3504" id="d102352e663" headers="d102352e636">
<p>Collection traversal expressions:</p>
<p><code>/PurchaseOrder/LineItems/LineItem/Part/@Id</code></p>
</td>
<td class="cellalignment3505" headers="d102352e663 d102352e639">
<p>Involves traversal of collection expressions. The only axes supported are child and attribute axes. Collection traversal is not supported if the SQL function is used during a <code>CREATE INDEX</code> operation.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3504" id="d102352e676" headers="d102352e636">
<p>Predicates:</p>
<p><code>[Requestor = &#34;Sarah J. Bell&#34;]</code></p>
</td>
<td class="cellalignment3505" headers="d102352e676 d102352e639">
<p>Predicates in the XPath are rewritten into SQL predicates.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3504" id="d102352e686" headers="d102352e636">
<p>List index (positional predicate):</p>
<p><code>LineItem[1]</code></p>
</td>
<td class="cellalignment3505" headers="d102352e686 d102352e639">
<p>Indexes are rewritten to access the nth item in a collection.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3504" id="d102352e696" headers="d102352e636">
<p>Wildcard traversals:</p>
<p><code>/PurchaseOrder/*/Part/@Id</code></p>
</td>
<td class="cellalignment3505" headers="d102352e696 d102352e639">
<p>If the wildcard can be translated to one or more simple XPath expressions, then it is rewritten.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3504" id="d102352e706" headers="d102352e636">
<p>Descendant axis (XML schema-based data only), without recursion:</p>
<p><code>/PurchaseOrder//Part/@Id</code></p>
</td>
<td class="cellalignment3505" headers="d102352e706 d102352e639">
<p>Similar to a wildcard expression. The <code>descendant</code> axis is rewritten if it can be mapped to one or more simple XPath expressions.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3504" id="d102352e719" headers="d102352e636">
<p>Descendant axis (XML schema-based data only), with <span class="italic">recursion</span>:</p>
<p><code>/PurchaseOrder//Part/@Id</code></p>
</td>
<td class="cellalignment3505" headers="d102352e719 d102352e639">
<p>The <code>descendant</code> axis is rewritten if both of these conditions holds:</p>
<ul style="list-style-type: disc;">
<li>
<p>All simple XPath expressions to which this XPath expression expands map to the same out-of-line table.</p>
</li>
<li>
<p>Any simple XPath expression to which this XPath expression does not expand does not map to that out-of-line table.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3504" id="d102352e742" headers="d102352e636">
<p>XPath functions</p>
</td>
<td class="cellalignment3505" headers="d102352e742 d102352e639">
<p>Some XPath functions are rewritten. These functions include <code>not</code>, <code>floor</code>, <code>ceiling</code>, <code>substring</code>, and <code>string-length</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso" id="GUID-1C2FC3C9-7926-4635-85A4-6AC28D503CDA__GUID-E01FC34D-DFBF-4402-989E-D955E5779BDC">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb04cre.htm#GUID-F72DC7CD-40A9-4F07-9350-B80D2AD1F4D0" title="A SQL query that involves XQuery expressions can often be automatically rewritten (optimized) in one or more ways. This optimization is referred to as XML query rewrite or optimization. When this happens, the XQuery expression is, in effect, evaluated directly against the XML document without constructing a DOM in memory.">Performance Tuning for XQuery</a>&#34;</span> for information about rewrite of XQuery expressions</p>
</div>
</div>
</div>
<a id="ADXDB4623"></a><a id="ADXDB4624"></a><a id="ADXDB4622"></a>
<div class="props_rev_3"><a id="GUID-C9B5CA3D-32EC-4617-B654-21307B11CC39"></a>
<h2 id="ADXDB-GUID-C9B5CA3D-32EC-4617-B654-21307B11CC39" class="sect2"><span class="enumeration_section">19.3</span> XPath Rewrite for Out-Of-Line Tables</h2>
<div>
<p>XPath expressions that involve elements stored out of line can be automatically rewritten. The rewritten query involves a join with the out-of-line table.</p>
<p><a href="xdb_rewrite.htm#GUID-C9B5CA3D-32EC-4617-B654-21307B11CC39__CHDCJJHJ">Example 19-2</a> shows such a query. The XQuery expression is rewritten to a SQL <code>EXISTS</code> subquery that queries table <code>addr_tab</code>, joining it with table <code>emp_tab</code> using the object identifier column in <code>addr_tab</code>. The optimizer uses full table scans of tables <code>emp_tab</code> and <code>addr_tab</code>. If there are many entries in the <code>addr_tab</code>, then you can try to make this query more efficient by creating an index on the city, as shown in <a href="xdb_rewrite.htm#GUID-C9B5CA3D-32EC-4617-B654-21307B11CC39__CHDEICJC">Example 19-3</a>. An explain-plan fragment for the same query as in <a href="xdb_rewrite.htm#GUID-C9B5CA3D-32EC-4617-B654-21307B11CC39__CHDCJJHJ">Example 19-2</a> shows that the city index is picked up.</p>
<div class="infobox-note" id="GUID-C9B5CA3D-32EC-4617-B654-21307B11CC39__GUID-444E1A87-2020-492C-8FA1-BEC20B312818">
<p class="notep1">Note:</p>
<p>When gathering statistics for the optimizer on an <code>XMLType</code> table that is stored object-relationally, Oracle recommends that you gather statistics on <span class="italic">all</span> of the tables defined by the XML schema, that is, all of the tables in <code>USER_XML_TABLES</code>. You can use procedure <code>DBMS_STATS.gather_schema_stats</code> to do this, or use <code>DBMS_STATS.gather_table_stats</code> on each such table. This informs the optimizer about all of the dependent tables that are used to store the <code>XMLType</code> data.</p>
</div>
<div class="example" id="GUID-C9B5CA3D-32EC-4617-B654-21307B11CC39__CHDCJJHJ">
<p class="titleinexample">Example 19-2 XPath Rewrite for an Out-Of-Line Table</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;declare namespace x = &#34;http://www.oracle.com/emp.xsd&#34;; (: :)
                         /x:Employee/Name&#39; PASSING OBJECT_VALUE RETURNING CONTENT)
               AS VARCHAR2(20))
  FROM emp_tab
  WHERE XMLExists(&#39;declare namespace x = &#34;http://www.oracle.com/emp.xsd&#34;; (: :)
                   /x:Employee/Addr[City=&#34;San Francisco&#34;]&#39; PASSING OBJECT_VALUE);

XMLCAST(XMLQUERY(...
--------------------
Abe Bee
Eve Fong
George Hu
Iris Jones
Karl Luomo
Marina Namur
Omar Pinano
Quincy Roberts
 
8 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C9B5CA3D-32EC-4617-B654-21307B11CC39__CHDEICJC">
<p class="titleinexample">Example 19-3 Using an Index with an Out-Of-Line Table</p>
<pre dir="ltr">CREATE INDEX addr_city_idx
  ON addr_tab (extractValue(OBJECT_VALUE, &#39;/Addr/City&#39;));
</pre>
<pre dir="ltr">|   2 |   TABLE ACCESS BY INDEX ROWID| ADDR_TAB      |     1 |  2012 |     1   (0)| 00:00:01 |
|*  3 |    INDEX RANGE SCAN          | <span class="bold">ADDR_CITY_IDX</span> |     1 |       |     1   (0)| 00:00:01 |
|   4 |   TABLE ACCESS FULL          | EMP_TAB       |    16 | 32464 |     2   (0)| 00:00:01 |
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4566"></a>
<div class="props_rev_3"><a id="GUID-3B3A1D6C-38AF-4381-9F47-5E26AE84F157"></a>
<h2 id="ADXDB-GUID-3B3A1D6C-38AF-4381-9F47-5E26AE84F157" class="sect2"><span class="enumeration_section">19.4</span> Guidelines for Using Execution Plans to Analyze and Optimize XPath Queries</h2>
<div>
<p>Guidelines are presented for using execution plans to analyze query execution in order to (a) determine whether XPath rewrite occurs and (b) optimize query execution by using secondary indexes. These guidelines apply only to <code>XMLType</code> data that is stored object-relationally.</p>
<p>Use these guidelines together, taking all that apply into consideration.</p>
<p>XPath rewrite for object-relational storage means that a query that selects XML fragments defined by an XPath expression is rewritten to a SQL <code>SELECT</code> statement on the underlying object-relational tables and columns. These underlying tables can include out-of-line tables.</p>
<p>You can use PL/SQL procedure <code>DBMS_XMLSTORAGE_MANAGE.XPath2TabColMapping</code> to find the names of the underlying tables and columns that correspond to a given XPath expression.</p>
<div class="infoboxnotealso" id="GUID-3B3A1D6C-38AF-4381-9F47-5E26AE84F157__GUID-BC313CFB-D881-41CF-8B2E-E21C34E6FC24">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb_rewrite.htm#GUID-C9B5CA3D-32EC-4617-B654-21307B11CC39" title="XPath expressions that involve elements stored out of line can be automatically rewritten. The rewritten query involves a join with the out-of-line table.">XPath Rewrite for Out-Of-Line Tables</a>&#34;</span></p>
</li>
<li>
<p><a class="olink ARPLS74503" target="_blank" href="../ARPLS/d_xmlstorage_man.htm#ARPLS74503"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about procedure <a id="d102352e956" class="indexterm-anchor"></a><a id="d102352e962" class="indexterm-anchor"></a><code>XPath2TabColMapping</code></p>
</li>
</ul>
</div>
</div>
<a id="ADXDB5849"></a><a id="ADXDB5848"></a>
<div class="props_rev_3"><a id="GUID-B1658194-2F19-47C0-B82D-10761D68E299"></a>
<h3 id="ADXDB-GUID-B1658194-2F19-47C0-B82D-10761D68E299" class="sect3"><span class="enumeration_section">19.4.1</span> Guideline: Look for underlying tables versus XML functions in execution plans</h3>
<div>
<p>The execution plan of a query that is rewritten refers to the names of the object-relational tables and columns that underlie the queried <code>XMLType</code> data. These names can be meaningful to you if they are derived from XML element or attribute names or if XML Schema annotation <code>xdb:defaultTable</code> was used.</p>
<p>Otherwise, these names are system-generated and have no obvious meaning. In particular, they do not reflect the corresponding XML element or attribute names.</p>
<p>Also, some system-generated columns are generally hidden. You do not see them if you use the SQL <code>describe</code> command. They nevertheless show up in execution plans.</p>
<p>The plan of a query that has not been rewritten shows only the base table names, and it typically refers to user-level XML functions, such as <code>XMLExists</code>. Look for this difference to determine whether a query has been optimized. The XML function name shown in an execution plan is actually the internal name (for example, <code>XMLEXISTS2</code>), which is sometimes slightly different from the user-level name.</p>
<p><a href="xdb_rewrite.htm#GUID-B1658194-2F19-47C0-B82D-10761D68E299__CACDIECD">Example 19-4</a> shows the kind of execution plan output that is generated when Oracle XML&nbsp;DB cannot perform XPath rewrite. The plan here is for a query that uses SQL/XML function <code>XMLExists</code>. The corresponding internal function <code>XMLExists2</code> appears in the plan output, indicating that the query is not rewritten.</p>
<p>In this situation, Oracle XML&nbsp;DB constructs a pre-filtered result set based on any other conditions specified in the query <code>WHERE</code> clause. It then filters the rows in this potential result set to determine which rows belong in the result set. The filtering is performed by <span class="italic">constructing a DOM on each document</span> and performing a <strong class="term">functional evaluation</strong> using the methods defined by the DOM API to determine whether or not each document is a member of the result set.</p>
<div class="example" id="GUID-B1658194-2F19-47C0-B82D-10761D68E299__CACDIECD">
<p class="titleinexample">Example 19-4 Execution Plan Generated When XPath Rewrite Does Not Occur</p>
<pre dir="ltr">Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter(<span class="bold">XMLEXISTS2</span>(&#39;$p/PurchaseOrder[User=&#34;SBELL&#34;]&#39; PASSING BY VALUE
              SYS_MAKEXML(&#39;61687B202644E297E040578C8A175C1D&#39;,4215,&#34;PO&#34;.&#34;XMLEXTRA&#34;,&#34;PO&#34;.&#34;X
              MLDATA&#34;) AS &#34;p&#34;)=1)
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5850"></a>
<div class="props_rev_3"><a id="GUID-4B3F942D-A767-4870-BB69-18EC4E815A10"></a>
<h3 id="ADXDB-GUID-4B3F942D-A767-4870-BB69-18EC4E815A10" class="sect3"><span class="enumeration_section">19.4.2</span> Guideline: Name the object-relational tables, so you recognize them in execution plans</h3>
<div>
<p>When designing an XML schema, use annotation <code>xdb:defaultTable</code> to name the underlying tables that correspond to elements that you select in queries where performance is important. This lets you easily recognize them in an execution plan, indicating by their presence or absence whether the query has been rewritten.</p>
<p>For collection tables, there is no corresponding XML schema annotation. To give user-friendly names to your collection tables you must first register the XML schema. Then you can use PL/SQL procedure <code>DBMS_XMLSTORAGE_MANAGE.renameCollectionTable</code> to rename the tables that were created during registration, which have system-generated names.</p>
<div class="infoboxnotealso" id="GUID-4B3F942D-A767-4870-BB69-18EC4E815A10__GUID-66967FDC-3985-42C6-A815-AF34F1030F49">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS74498" target="_blank" href="../ARPLS/d_xmlstorage_man.htm#ARPLS74498"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about procedure <code>renameCollectionTable</code></p>
</div>
</div>
</div>
<a id="ADXDB5852"></a><a id="ADXDB6120"></a><a id="ADXDB5854"></a><a id="ADXDB5855"></a><a id="ADXDB5856"></a><a id="ADXDB5857"></a><a id="ADXDB5851"></a>
<div class="props_rev_3"><a id="GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F"></a>
<h3 id="ADXDB-GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F" class="sect3"><span class="enumeration_section">19.4.3</span> Guideline: Create an index on a column targeted by a predicate</h3>
<div>
<p>You can sometimes improve the performance of a query that is rewritten to include a SQL predicate, by creating an index that applies to the column targeted by the predicate.</p>
<p>A query resulting from XPath rewrite sometimes includes a SQL predicate (<code>WHERE</code> clause). This can happen even if the original query does not use an XPath predicate, and it can happen even if the original query does not have a SQL <code>WHERE</code> clause.</p>
<p>When this happens, you can sometimes improve performance by creating an index on the column that is targeted by the SQL predicate, or by creating an index on a function application to that column.</p>
<p><a href="xdb_rewrite.htm#GUID-A2539B25-DD36-4F4C-8726-0B5FBD7A767B__CACIBIIG">Example 19-1</a> illustrates XPath rewrite for a query that includes a <code>WHERE</code> clause. <a href="xdb_rewrite.htm#GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CACIIDHJ">Example 19-5</a> shows the predicate information from an execution plan for this query.</p>
<p>The predicate information indicates that the expression <code>XMLCast(XMLQuery...))</code> is rewritten to an application of SQL function <code>cast</code> to the underlying relational column that stores the requestor information for the purchase order, <code>SYS_NC0021$</code>. This column name is system-generated. The execution plan refers to this system-generated name, in spite of the fact that the governing XML schema uses annotation <code>SQLName</code> to name this column <code>REQUESTOR</code>.</p>
<p>Because these two names (user-defined and system-generated) refer to the same column, you can create a B-tree index on this column using either name. Alternatively, you can use the <code>extractValue</code> shortcut to create the index, by specifying an XPath expression that targets the purchase-order requestor data.</p>
<p>You can obtain the names of the underlying table and columns that correspond to a given XPath expression using procedure <code>DBMS_XMLSTORAGE_MANAGE.XPath2TabColMapping</code>. <a href="xdb_rewrite.htm#GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CHDCHCCB">Example 19-6</a> illustrates this for the XPath expression <code>/PurchaseOrder/Requestor</code> used in the <code>WHERE</code> clause of <a href="xdb_rewrite.htm#GUID-A2539B25-DD36-4F4C-8726-0B5FBD7A767B__CACIBIIG">Example 19-1</a>.</p>
<p>If you provide an XPath expression that contains a wildcard or a descendent axis then multiple tables and columns might be selected. In that case procedure <code>XPath2TabColMapping</code> returns multiple <code>&lt;Mapping&gt;</code> elements, one for each table-column pair.</p>
<p>You can then use the table and column names retrieved this way in a <code>CREATE INDEX</code> statement to create an index that corresponds to the XPath expression. <a href="xdb_rewrite.htm#GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CACDBHCJ">Example 19-7</a> shows three equivalent ways to create a B-tree index on the predicate-targeted column.</p>
<p>However, for this particular query it makes sense to create a function-based index, using a functional expression that matches the one in the rewritten query. <a href="xdb_rewrite.htm#GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CACCAJDI">Example 19-8</a> illustrates this.</p>
<p><a href="xdb_rewrite.htm#GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CACJEJBH">Example 19-9</a> shows an execution plan that indicates that the index is picked up.</p>
<p>In the particular case of this query, the original functional expression applies <code>XMLCast</code> to <code>XMLQuery</code> to target a singleton element, <code>Requestor</code>. This is a special case, where you can as a shortcut use such a functional expression directly in the <code>CREATE INDEX</code> statement. That statement is rewritten to create an index on the underlying scalar data. <a href="xdb_rewrite.htm#GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CACCGFBB">Example 19-10</a>, which targets an XPath expression, thus has the same effect as <a href="xdb_rewrite.htm#GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CACCAJDI">Example 19-8</a>, which targets the corresponding object-relational column.</p>
<div class="infoboxnotealso" id="GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__GUID-A276AAA7-4C93-432E-BE1F-C0B7478210D8">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb_indexing.htm#GUID-A01AC88E-C63B-40FC-9E6E-8BB1E65A459E" title="Table purchaseorder in sample database schema OE is stored object-relationally. Each purchase-order document has a single Reference element; this element is a singleton. You can thus use a shortcut to create an index on the underlying object-relational data.">Indexing Non-Repeating Text Nodes or Attribute Values</a>&#34;</span> for information about using the shortcut of <code>XMLCast</code> applied to <code>XMLQuery</code> and the <code>extractValue</code> shortcut to index singleton data</p>
</li>
<li>
<p><a class="olink ARPLS74503" target="_blank" href="../ARPLS/d_xmlstorage_man.htm#ARPLS74503"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about procedure <code>XPath2TabColMapping</code></p>
</li>
</ul>
</div>
<div class="example" id="GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CACIIDHJ">
<p class="titleinexample">Example 19-5 Analyzing an Execution Plan to Determine a Column to Index</p>
<pre dir="ltr">Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter(<span class="bold">CAST</span>(&#34;PURCHASEORDER&#34;.&#34;<span class="bold">SYS_NC00021$</span>&#34; AS VARCHAR2(128))=&#39;Sarah
              J. Bell&#39; AND SYS_CHECKACL(&#34;ACLOID&#34;,&#34;OWNERID&#34;,xmltype(&#39;&lt;privilege
              xmlns=&#34;http://xmlns.oracle.com/xdb/acl.xsd&#34;
              xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
              xsi:schemaLocation=&#34;http://xmlns.oracle.com/xdb/acl.xsd
              http://xmlns.oracle.com/xdb/acl.xsd DAV:http://xmlns.oracle.com/xdb/dav.xsd
              &#34;&gt;&lt;read-properties/&gt;&lt;read-contents/&gt;&lt;/privilege&gt;&#39;))=1)
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CHDCHCCB">
<p class="titleinexample">Example 19-6 Using DBMS_XMLSTORAGE_MANAGE.XPATH2TABCOLMAPPING</p>
<pre dir="ltr">SELECT DBMS_XMLSTORAGE_MANAGE.XPath2TabColMapping(USER,
                                                  &#39;PURCHASEORDER&#39;,
                                                  &#39;&#39;,
                                                  &#39;/PurchaseOrder/Requestor&#39;,
                                                  &#39;&#39;)
  FROM  DUAL;

DBMS_XMLSTORAGE_MANAGE.XPath2TabColMapping(US
---------------------------------------------
&lt;Result&gt;
  &lt;Mapping TableName=&#34;PURCHASEORDER&#34; ColumnName=&#34;SYS_NC00021$&#34;/&gt;
&lt;/Result&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CACDBHCJ">
<p class="titleinexample">Example 19-7 Creating an Index on a Column Targeted by a Predicate</p>
<pre dir="ltr">CREATE INDEX requestor_index ON purchaseorder (&#34;SYS_NC00021$&#34;);

CREATE INDEX requestor_index ON purchaseorder (&#34;XMLDATA&#34;.&#34;REQUESTOR&#34;);

CREATE INDEX requestor_index ON purchaseorder
  (extractvalue(OBJECT_VALUE, &#39;/PurchaseOrder/Requestor&#39;));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CACCAJDI">
<p class="titleinexample">Example 19-8 Creating a Function-Based Index for a Column Targeted by a Predicate</p>
<pre dir="ltr">CREATE INDEX requestor_index ON purchaseorder
  (<span class="bold">cast</span>(&#34;XMLDATA&#34;.&#34;<span class="bold">REQUESTOR</span>&#34; AS VARCHAR2(128)));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CACJEJBH">
<p class="titleinexample">Example 19-9 Execution Plan Showing that Index Is Picked Up</p>
<pre dir="ltr">-----------------------------------------------------------------------------------------------
| Id  | Operation                   | Name            | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |                 |     1 |   524 |     2   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS BY INDEX ROWID| PURCHASEORDER   |     1 |   524 |     2   (0)| 00:00:01 |
|*  2 |   INDEX RANGE SCAN          | <span class="bold">REQUESTOR_INDEX</span> |     1 |       |     1   (0)| 00:00:01 |
-----------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter(SYS_CHECKACL(&#34;ACLOID&#34;,&#34;OWNERID&#34;,xmltype(&#39;&lt;privilege
              xmlns=&#34;http://xmlns.oracle.com/xdb/acl.xsd&#34;
              xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
              xsi:schemaLocation=&#34;http://xmlns.oracle.com/xdb/acl.xsd
                                  http://xmlns.oracle.com/xdb/acl.xsd
              DAV:http://xmlns.oracle.com/xdb/dav.xsd&#34;&gt;
              &lt;read-properties/&gt;&lt;read-contents/&gt;&lt;/privilege&gt;&#39;))=1)
   2 - access(CAST(&#34;SYS_NC00021$&#34; AS VARCHAR2(128))=&#39;Sarah J. Bell&#39;)
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2A9AEEC5-6CD1-4A17-A3A7-08E86E547C2F__CACCGFBB">
<p class="titleinexample">Example 19-10 Creating a Function-Based Index for a Column Targeted by a Predicate</p>
<pre dir="ltr">CREATE INDEX requestor_index 
  ON purchaseorder po
     (XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34;
                                                    RETURNING CONTENT)
              AS VARCHAR2(128)));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5859"></a><a id="ADXDB5860"></a><a id="ADXDB5858"></a>
<div class="props_rev_3"><a id="GUID-B10DA5D9-25C5-4F0B-AD4D-2CB93D5114D4"></a>
<h3 id="ADXDB-GUID-B10DA5D9-25C5-4F0B-AD4D-2CB93D5114D4" class="sect3"><span class="enumeration_section">19.4.4</span> Guideline: Create indexes on ordered collection tables</h3>
<div>
<p>If a collection is stored as an ordered collection table (OCT) or as an <code>XMLType</code> instance, then you can directly access members of the collection. Each member becomes a table row, so you can access it directly with SQL. You can often improve performance by indexing such collection members.</p>
<p>You do this by creating a <span class="italic">composite</span> index on (a) the object attribute that corresponds to the collection XML element or its attribute and (b) pseudocolumn <code>NESTED_TABLE_ID</code>.</p>
<p><a href="xdb_rewrite.htm#GUID-B10DA5D9-25C5-4F0B-AD4D-2CB93D5114D4__CACHICDI">Example 19-11</a> shows the execution plan for a query to find the <code>Reference</code> elements in documents that contain an order for part number 717951002372 (<code>Part</code> element with an <code>Id</code> attribute of value <code>717951002372</code>). The collection of <code>LineItem</code> elements is stored as rows in the ordered collection table <code>lineitem_table</code>.</p>
<div class="infobox-note" id="GUID-B10DA5D9-25C5-4F0B-AD4D-2CB93D5114D4__GUID-44E812FA-5D62-41BD-B1F9-19C6CFBBB8E2">
<p class="notep1">Note:</p>
<p><a href="xdb_rewrite.htm#GUID-B10DA5D9-25C5-4F0B-AD4D-2CB93D5114D4__CACHICDI">Example 19-11</a> does not use the <code>purchaseorder</code> table from sample database schema <code>OE</code>. It uses a <code>purchaseorder</code> table that uses an ordered collection table (OCT) named <code>lineitem_table</code> for the collection element <code>LineItem</code>.</p>
</div>
<p>The execution plan shows a full scan of ordered collection table <code>lineitem_table</code>. This could be acceptable if there were only a few hundred documents in the <code>purchaseorder</code> table, but it would be unacceptable if there were thousands or millions of documents in the table.</p>
<p>To improve the performance of such a query, you can create an index that provides direct access to pseudocolumn <code>NESTED_TABLE_ID</code>, given the value of attribute <code>Id</code>. Unfortunately, Oracle XML&nbsp;DB does not allow indexes on collections to be created using XPath expressions directly. To create the index, you must understand the structure of the SQL object that is used to manage the <code>LineItem</code> elements. Given this information, you can create the required index using conventional object-relational SQL.</p>
<p>In this case, element <code>LineItem</code> is stored as an instance of object type <code>lineitem_t</code>. Element <code>Part</code> is stored as an instance of SQL data type <code>part_t</code>. XML attribute <code>Id</code> is mapped to object attribute <code>part_number</code>. Given this information, you can create a <span class="italic">composite index</span> on attribute <code>part_number</code> and pseudocolumn <code>NESTED_TABLE_ID</code>, as shown in <a href="xdb_rewrite.htm#GUID-B10DA5D9-25C5-4F0B-AD4D-2CB93D5114D4__CACDIGJF">Example 19-12</a>. This index provides direct access to those purchase-order documents that have <code>LineItem</code> elements that reference the required part.</p>
<div class="example" id="GUID-B10DA5D9-25C5-4F0B-AD4D-2CB93D5114D4__CACHICDI">
<p class="titleinexample">Example 19-11 Execution Plan for a Selection of Collection Elements</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Reference&#39;
                        PASSING OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(4000)) &#34;Reference&#34;
  FROM purchaseorder
  WHERE XMLExists(&#39;$p/PurchaseOrder/LineItems/LineItem/Part[@Id=&#34;717951002372&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);
</pre>
<pre dir="ltr">-------------------------------------------------------------------------------------------------------
| Id  | Operation                    | Name                   | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |                        |    21 |  2352 |    20  (10)| 00:00:01 |
|*  1 |  HASH JOIN RIGHT SEMI        |                        |    21 |  2352 |    20  (10)| 00:00:01 |
|   2 |   JOIN FILTER CREATE         | :BF0000                |    22 |   880 |    14   (8)| 00:00:01 |
|*  3 |    <span class="bold">TABLE ACCESS FULL</span>         | <span class="bold">LINEITEM_TABLE</span>         |    22 |   880 |    14   (8)| 00:00:01 |
|   4 |   JOIN FILTER USE            | :BF0000                |   132 |  9504 |     5   (0)| 00:00:01 |
|*  5 |    TABLE ACCESS FULL         | PURCHASEORDER          |   132 |  9504 |     5   (0)| 00:00:01 |
-------------------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
   1 - access(&#34;NESTED_TABLE_ID&#34;=&#34;PURCHASEORDER&#34;.&#34;SYS_NC0003400035$&#34;)
   3 - filter(&#34;SYS_NC00011$&#34;=&#39;717951002372&#39;)
   5 - filter(SYS_OP_BLOOM_FILTER(:BF0000,&#34;PURCHASEORDER&#34;,&#34;SYS_NC0003400035$&#34;))
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-B10DA5D9-25C5-4F0B-AD4D-2CB93D5114D4__CACDIGJF">
<p class="titleinexample">Example 19-12 Creating an Index for Direct Access to an Ordered Collection Table</p>
<pre dir="ltr">CREATE INDEX lineitem_part_index ON lineitem_table l (l.part.part_number, l.<span class="bold">NESTED_TABLE_ID</span>);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5861"></a>
<div class="props_rev_3"><a id="GUID-7F6CF536-9DDC-42C8-AB0D-115A5300C616"></a>
<h3 id="ADXDB-GUID-7F6CF536-9DDC-42C8-AB0D-115A5300C616" class="sect3"><span class="enumeration_section">19.4.5</span> Guideline: Use XMLOptimizationCheck to determine why a query is not rewritten</h3>
<div>
<p>If a query has not been optimized, you can use system variable <code>XMLOptimizationCheck</code> to try to determine why.</p>
<div class="infoboxnotealso" id="GUID-7F6CF536-9DDC-42C8-AB0D-115A5300C616__GUID-9312D4F6-36B8-4D85-8721-24C4489279BB">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb04cre.htm#GUID-F6E94E06-C4A3-4956-868C-E33BD34D3116" title="You can examine an execution plan for your SQL code to determine whether XQuery optimization occurs or the plan is instead suboptimal.">Diagnosis of XQuery Optimization: XMLOptimizationCheck</a>&#34;</span></p>
</div>
</div>
</div>
</div>
<hr/>
<br/>
<p style="text-decoration:underline">Footnote Legend</p>
Footnote&nbsp;1:
<p>This example uses sample database schema <code>OE</code> and its table <code>purchaseorder</code>. The XML schema for this table is annotated with attribute <code>SQLName</code> to specify SQL object attribute names such as <code>REQUESTOR</code>&thinsp;&mdash;&thinsp;see <a href="apphxdb.htm#GUID-1CB2213C-C6E8-4BC4-86A3-EFDE51AEBEFD__BABDAGBF">Example A-2</a>. Without such annotations, this example would use <code>p.&#34;XMLDATA&#34;.&#34;</code><span class="bold"><code>Requestor</code></span><code>&#34;</code>, not <code>p.&#34;XMLDATA&#34;.&#34;</code>.<span class="bold"><code>REQUESTOR</code></span><code>&#34;</code>.</p>
<br/></div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3410">
<tr>
<td class="cellalignment3417">
<table class="cellalignment3415">
<tr>
<td class="cellalignment3414"><a href="xdb06stt.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3414"><a href="xdb07evo.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3419">
<table class="cellalignment3413">
<tr>
<td class="cellalignment3414"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3414"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3414"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3414"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3414"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>