<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1631"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20XML%C2%A0DB%20Repository%20Events"></a><title>Oracle XML&nbsp;DB Repository Events</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="You can use Oracle XML&nbsp;DB Repository to store and access data of any kind, in the form of repository resources. You can access repository data from any application. Sometimes your application needs to perform certain actions whenever a particular repository operation occurs. You can do this using repository events."/>
<meta name="keywords" content="event, repository, repository, event, event listener, repository, definition, event listener, event handler, repository, event handler, predefined, configuring"/>
<meta name="dcterms.created" content="2016-12-08T13:53:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E41152-15"/>
<meta name="dcterms.isVersionOf" content="ADXDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="xdb_repos_meta.htm" title="Previous" type="text/html"/>
<link rel="Next" href="xdb_jcr.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41152-15.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-1A25D4D1-2353-41FC-9D86-9C35F9F95532"></a> <span id="PAGE" style="display:none;">43/61</span> <!-- End Header -->
<a id="ADXDB2580"></a>
<h1 id="ADXDB-GUID-1A25D4D1-2353-41FC-9D86-9C35F9F95532" class="sect1"><span class="enumeration_chapter">30</span> Oracle XML&nbsp;DB Repository Events</h1>
<div>
<p>You can use Oracle XML&nbsp;DB Repository to store and access data of any kind, in the form of repository resources. You can access repository data from any application. Sometimes your application needs to perform certain actions whenever a particular repository operation occurs. You can do this using repository events.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb_repos_events.htm#GUID-33531811-B433-4257-A176-88D7AAAD48EC" title="Your application can perform specific actions when events associated with repository operations occur. For example, you might want to perform a move-to-wastebasket or another backup action whenever a resource is deleted.">Overview of Repository Events</a></p>
</li>
<li>
<p><a href="xdb_repos_events.htm#GUID-5F7D0772-848D-49EA-832B-AB1117B9E3F1" title="Repository operations are associated with predefined events. Except for a rendering operation, events come in pre and post pairs.">Possible Repository Events</a></p>
</li>
<li>
<p><a href="xdb_repos_events.htm#GUID-5821696E-5128-4221-9E9F-D36E2ACE5834" title="The same repository event can occur with different Oracle XML&nbsp;DB Repository operations, and a given repository operation can produce more than one repository event.">Repository Operations and Events</a></p>
</li>
<li>
<p><a href="xdb_repos_events.htm#GUID-C4139224-FF34-4B6D-9B68-481FA41E634C" title="Some considerations are listed for defining handlers for Oracle XML&nbsp;DB Repository events.">Repository Event Handler Considerations</a></p>
</li>
<li>
<p><a href="xdb_repos_events.htm#GUID-C7D110F1-CB15-475B-83E6-7C186DF0E119" title="In a resource configuration file, you use element event-listeners, child of element ResConfig, to configure Oracle XML&nbsp;DB Repository event handling.">Configuration of Repository Events</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-1A25D4D1-2353-41FC-9D86-9C35F9F95532__GUID-1958F19A-788C-415F-9B04-4E8408FCDBF2">
<p class="notep1">See Also:</p>
<p><a href="xdb_repos_config.htm#GUID-E44B59D4-7A7E-4303-ACE3-B801797B06AF" title="Overall configuration of Oracle XML&nbsp;DB Repository applies to all repository resources. It does not include configuring parameters for handling events or managing XLink and XInclude processing. You use resource configuration files to configure resources.">Configuration of Oracle XML&nbsp;DB Repository</a> for general information about configuring repository resources</p>
</div>
</div>
<a id="ADXDB5591"></a>
<div class="props_rev_3"><a id="GUID-33531811-B433-4257-A176-88D7AAAD48EC"></a>
<h2 id="ADXDB-GUID-33531811-B433-4257-A176-88D7AAAD48EC" class="sect2"><span class="enumeration_section">30.1</span> Overview of Repository Events</h2>
<div>
<p>Your application can perform specific actions when events associated with repository operations occur. For example, you might want to perform a move-to-wastebasket or another backup action whenever a resource is deleted.</p>
<p>Repository resource operations include creating, deleting, locking, unlocking, rendering, linking, unlinking, placing under version control, checking in, checking out, unchecking out (reverting a checked out version), opening, and updating.</p>
</div>
<a id="ADXDB5592"></a>
<div class="props_rev_3"><a id="GUID-8D76D959-A3B7-4401-9024-ADB29A703B36"></a>
<h3 id="ADXDB-GUID-8D76D959-A3B7-4401-9024-ADB29A703B36" class="sect3"><span class="enumeration_section">30.1.1</span> Repository Events: Use Cases</h3>
<div>
<p>Examples of cases where you can use repository events include moving a resource to a wastebasket and categorizing a resource based on its MIME type.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic">Wastebasket &ndash;</span> You can use an <code>UnLink</code> pre-event handler to effectively move a resource to a wastebasket instead of deleting it. Create a link in a wastebasket folder before removing the original link. The link in the wastebasket ensures that the resource is not removed. When you subsequently undelete a resource from the waste basket, the original link can be created again and the wastebasket link removed. The wastebasket link name can be different from the name of the link being removed because a resource at a certain path could be unlinked more than once from that path. The wastebasket would then have multiple links corresponding to that path, with different link properties and possibly pointing to different resources.</p>
</li>
<li>
<p><span class="italic">Categorization &ndash;</span> An application might categorize the resources it manages based on MIME type or other properties. It might keep track of GIF, text, and XML files by maintaining links to them from repository folders <code>/my-app/gif</code>, <code>/my-app/txt</code>, and <code>/my-app/xml</code>. Three post-event handlers could be used here: <code>LinkIn</code>, <code>UnlinkIn</code>, and <code>Update</code>. The <code>LinkIn</code> post-event handler would examine the resource and create a link in the appropriate category folder, if not already present. The <code>UnlinkIn</code> post-event handler would remove the link from the category folder. The <code>Update</code> post-event handler would effectively move the resource from one category folder to another if its category changes.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDB5593"></a>
<div class="props_rev_3"><a id="GUID-9CC45EFA-9CBF-415D-A150-911F0A64A087"></a>
<h3 id="ADXDB-GUID-9CC45EFA-9CBF-415D-A150-911F0A64A087" class="sect3"><span class="enumeration_section">30.1.2</span> Repository Events and Database Triggers</h3>
<div>
<p>You cannot use a database trigger to let your application react to repository operations. A given repository operation can consist of multiple database operations on multiple underlying, internal tables. Because these underlying tables are internal to Oracle XML&nbsp;DB, you cannot easily map them to specific repository operations.</p>
<p>For example, internal table <code>XDB$H_INDEX</code> might be updated by either a database update operation, if an ACL is changed, or a link operation. Even in cases where you might be able to accomplish the same thing using database triggers, you would not want to do that: A repository event is a higher-level abstraction than would be a set of database triggers on the underlying tables.</p>
<p>When a repository event occurs, information associated with the operation, such as the resource path used, can be passed to the corresponding event handler. Such information is not readily available using database triggers.</p>
<p>Repository events and database triggers can both be applied to XML data. You can use triggers on <code>XMLType</code> tables, for instance. However, if an <code>XMLType</code> table is also a repository table (hierarchy-enabled), then do not duplicate in an event handler any trigger code that applies to the table. Otherwise, that code is executed twice.</p>
</div>
</div>
<a id="ADXDB5594"></a>
<div class="props_rev_3"><a id="GUID-65551F91-CDC8-4053-A2F6-E949027BD604"></a>
<h3 id="ADXDB-GUID-65551F91-CDC8-4053-A2F6-E949027BD604" class="sect3"><span class="enumeration_section">30.1.3</span> Repository Event Listeners and Event Handlers</h3>
<div>
<p>Each repository operation is associated with events. Your application can configure event listeners for particular resources or the entire repository. A listener can be restricted by a node-existence precondition. A listener is a set of PL/SQL or Java handlers, each of which processes a single event.</p>
<p>A repository <strong class="term">event listener</strong> is a Java class or a PL/SQL package or object type. It comprises a set of PL/SQL procedures or Java methods, each of which is called an <strong class="term">event handler</strong>.</p>
<p>You associate a repository event listener with a resource by mapping a <strong class="term">resource configuration file</strong> to the resource. You use PL/SQL package <code>DBMS_RESCONFIG</code> to manipulate resource configuration files, including associating them with the resources they configure. In particular, PL/SQL function <code>DBMS_RESCONFIG.getListeners</code> lists all event listeners for a given resource.</p>
</div>
</div>
<a id="ADXDB5595"></a>
<div class="props_rev_3"><a id="GUID-AC610F25-FF1F-418E-8F92-515C219E9523"></a>
<h3 id="ADXDB-GUID-AC610F25-FF1F-418E-8F92-515C219E9523" class="sect3"><span class="enumeration_section">30.1.4</span> Repository Event Configuration</h3>
<div>
<p>Repository event configuration involves defining resource configuration files and defining the order in which they are processed. The files define event listeners. Such configuration applies to events on individual resources and events for the repository as a whole.</p>
<p>A given resource can be configured by multiple resource configuration files. These are stored in a <strong class="term">resource configuration list</strong>, and they are processed in list order. Events for the repository as a whole can also be configured by multiple resource configuration files. Similarly, the repository also has a resource configuration list. Event handling that is configured for the repository as a whole takes effect before any resource-specific event handling. All applicable repository-wide events are processed before any resource-specific events.</p>
<p>A given resource configuration file can define multiple event listeners for the resources it configures, and each event listener can define multiple event handlers.</p>
<div class="infoboxnotealso" id="GUID-AC610F25-FF1F-418E-8F92-515C219E9523__GUID-E13A1B35-9ADA-455A-9100-98BAF411026F">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb_repos_events.htm#GUID-C7D110F1-CB15-475B-83E6-7C186DF0E119" title="In a resource configuration file, you use element event-listeners, child of element ResConfig, to configure Oracle XML&nbsp;DB Repository event handling.">Configuration of Repository Events</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb_repos_config.htm#GUID-5ADEA709-733D-4E05-933A-AB1E7262D8AA" title="You configure a Oracle XML&nbsp;DB Repository resource for any purpose by associating it with a resource configuration file, which defines configurable parameters for the resource. A resource configuration file is itself a resource in Oracle XML&nbsp;DB Repository.">Resource Configuration Files Configure a Resource</a> &#34;</span> for general information about resource configuration and resource configuration lists</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="ADXDB5597"></a><a id="ADXDB5596"></a>
<div class="props_rev_3"><a id="GUID-5F7D0772-848D-49EA-832B-AB1117B9E3F1"></a>
<h2 id="ADXDB-GUID-5F7D0772-848D-49EA-832B-AB1117B9E3F1" class="sect2"><span class="enumeration_section">30.2</span> Possible Repository Events</h2>
<div>
<p>Repository operations are associated with predefined events. Except for a rendering operation, events come in pre and post pairs.</p>
<p>A rendering operation is associated with a single repository event. Except for rendering, all repository operations are associated with one or more <span class="italic">pairs</span> of events.</p>
<p>For example, a resource creation is associated with three pairs of events, with the events occurring in this order:</p>
<ol>
<li>
<p>Pre-creation event</p>
</li>
<li>
<p>Post-creation event</p>
</li>
<li>
<p>Pre-link-in event</p>
</li>
<li>
<p>Pre-link-to event</p>
</li>
<li>
<p>Post-link-to event</p>
</li>
<li>
<p>Post-link-in event</p>
</li>
</ol>
<p><a href="xdb_repos_events.htm#GUID-5F7D0772-848D-49EA-832B-AB1117B9E3F1__BABHJGBH" title="Predefined Repository Events">Table 30-1</a> lists the events associated with each repository operation. Their order is indicated in the handler columns.</p>
<div class="tblformalwide" id="GUID-5F7D0772-848D-49EA-832B-AB1117B9E3F1__BABHJGBH">
<p class="titleintable">Table 30-1 Predefined Repository Events</p>
<table class="cellalignment3431" title="Predefined Repository Events" summary="Predefined Repository Events">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3461" id="d143945e414">Repository Event Type</th>
<th class="cellalignment3466" id="d143945e417">Description</th>
<th class="cellalignment3474" id="d143945e420">Pre Handler Execution</th>
<th class="cellalignment3427" id="d143945e423">Post Handler Execution</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e428" headers="d143945e414">
<p><code>Render</code></p>
</td>
<td class="cellalignment3469" headers="d143945e428 d143945e417">
<p>A <code>Render</code> event occurs only for <span class="italic">file</span> resources, never for folder resources.</p>
<p>Occurs when resource contents are accessed using any of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Protocols</p>
</li>
<li>
<p><code>XDBURIType</code> methods <code>getCLOB()</code>, <code>getBLOB()</code>, and <code>getXML()</code></p>
</li>
</ul>
<p>Does <span class="italic">not</span> occur when resource contents are accessed using any of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>SELECT ... FROM RESOURCE_VIEW</code></p>
</li>
<li>
<p><code>XDBURIType</code> method <code>getResource()</code></p>
</li>
</ul>
<p>Only one handler for a <code>Render</code> event can set the rendered output. The first handler to call <code>setRenderStream</code> or <code>setRenderPath</code> controls the rendering.</p>
</td>
<td class="cellalignment3477" headers="d143945e428 d143945e420">
<p>N/A</p>
</td>
<td class="cellalignment3429" headers="d143945e428 d143945e423">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e495" headers="d143945e414">
<p><code>Create</code></p>
</td>
<td class="cellalignment3469" headers="d143945e495 d143945e417">
<p>Occurs when a resource is created. The pre and post handlers executed are those defined on the folder of the new resource.</p>
</td>
<td class="cellalignment3477" headers="d143945e495 d143945e420">
<p>After pre-parsing, after validating the parent resource ACL and locks, and before assigning default values to undefined properties.</p>
</td>
<td class="cellalignment3429" headers="d143945e495 d143945e423">
<p>After inserting the resource into the system resource table.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e509" headers="d143945e414">
<p><code>Delete</code></p>
</td>
<td class="cellalignment3469" headers="d143945e509 d143945e417">
<p>Occurs when the resource and its contents are removed from disk, that is, when the resource <code>REF</code> count is zero (0).</p>
</td>
<td class="cellalignment3477" headers="d143945e509 d143945e420">
<p>After validating the resource ACL and locks and before removing the resource from disk.</p>
</td>
<td class="cellalignment3429" headers="d143945e509 d143945e423">
<p>After removing the resource and its contents from disk and after touching the parent folder to update its last modifier and modification time.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e526" headers="d143945e414">
<p><code>Update</code></p>
</td>
<td class="cellalignment3469" headers="d143945e526 d143945e417">
<p>Occurs when a resource is updated on disk.</p>
</td>
<td class="cellalignment3477" headers="d143945e526 d143945e420">
<p>After validating the resource ACL and locks and before updating the last modifier and modification time.</p>
</td>
<td class="cellalignment3429" headers="d143945e526 d143945e423">
<p>After writing the resource to disk.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e540" headers="d143945e414">
<p><code>Lock</code></p>
</td>
<td class="cellalignment3469" headers="d143945e540 d143945e417">
<p>Occurs during a lock-resource operation.</p>
</td>
<td class="cellalignment3477" headers="d143945e540 d143945e420">
<p>After validating the resource ACL and locks and before creating the new lock on the resource.</p>
</td>
<td class="cellalignment3429" headers="d143945e540 d143945e423">
<p>After creating the new lock.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e554" headers="d143945e414">
<p><code>Unlock</code></p>
</td>
<td class="cellalignment3469" headers="d143945e554 d143945e417">
<p>Occurs during an unlock-resource operation.</p>
</td>
<td class="cellalignment3477" headers="d143945e554 d143945e420">
<p>After validating the resource ACL and delete token.</p>
</td>
<td class="cellalignment3429" headers="d143945e554 d143945e423">
<p>After removing the lock.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e568" headers="d143945e414">
<p><code>LinkIn</code></p>
</td>
<td class="cellalignment3469" headers="d143945e568 d143945e417">
<p>Occurs before a <code>LinkTo</code> event during a link operation. The event target is the folder in which the link is created. Always accompanied by a <code>LinkTo</code> event.</p>
</td>
<td class="cellalignment3477" headers="d143945e568 d143945e420">
<p>After validating the resource ACL and locks and before creating the link.</p>
</td>
<td class="cellalignment3429" headers="d143945e568 d143945e423">
<p>After executing <code>LinkTo</code> post handler.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e591" headers="d143945e414">
<p><code>LinkTo</code></p>
</td>
<td class="cellalignment3469" headers="d143945e591 d143945e417">
<p>Occurs after a <code>LinkIn</code> event during a link operation. The event target is the resource that is the link destination.</p>
</td>
<td class="cellalignment3477" headers="d143945e591 d143945e420">
<p>After executing <code>LinkIn</code> pre handler and before creating the link.</p>
</td>
<td class="cellalignment3429" headers="d143945e591 d143945e423">
<p>After creating the link and after updating the last modifier and modification time of the parent folder.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e611" headers="d143945e414">
<p><code>UnLinkIn</code></p>
</td>
<td class="cellalignment3469" headers="d143945e611 d143945e417">
<p>Occurs before an <code>UnlinkFrom</code> event during an unlink operation. Always accompanied by an <code>UnlinkFrom</code> event.</p>
</td>
<td class="cellalignment3477" headers="d143945e611 d143945e420">
<p>After validating the resource ACL and locks and before removing the link.</p>
</td>
<td class="cellalignment3429" headers="d143945e611 d143945e423">
<p>After executing the <code>UnlinkFrom</code> post handler.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e634" headers="d143945e414">
<p><code>UnlinkFrom</code></p>
</td>
<td class="cellalignment3469" headers="d143945e634 d143945e417">
<p>Occurs after an <code>UnlinkIn</code> event during an unlink operation.</p>
</td>
<td class="cellalignment3477" headers="d143945e634 d143945e420">
<p>After executing the <code>UnlinkIn</code> pre handler.</p>
</td>
<td class="cellalignment3429" headers="d143945e634 d143945e423">
<p>After removing the link.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e654" headers="d143945e414">
<p><code>CheckIn</code></p>
</td>
<td class="cellalignment3469" headers="d143945e654 d143945e417">
<p>Occurs during check-in of a resource.</p>
</td>
<td class="cellalignment3477" headers="d143945e654 d143945e420">
<p>After validating the resource ACL and locks and after verifying that the resource is version-controlled and has been checked out.</p>
</td>
<td class="cellalignment3429" headers="d143945e654 d143945e423">
<p>After checking in the resource.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e669" headers="d143945e414">
<p><code>CheckOut</code></p>
</td>
<td class="cellalignment3469" headers="d143945e669 d143945e417">
<p>Occurs during check-out of a resource.</p>
</td>
<td class="cellalignment3477" headers="d143945e669 d143945e420">
<p>After validating the resource ACL and locks and after verifying that the resource is version-controlled and is not already checked out.</p>
</td>
<td class="cellalignment3429" headers="d143945e669 d143945e423">
<p>After checking out the resource.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e683" headers="d143945e414">
<p><code>UncheckOut</code></p>
</td>
<td class="cellalignment3469" headers="d143945e683 d143945e417">
<p>Occurs during uncheck-out of a resource.</p>
</td>
<td class="cellalignment3477" headers="d143945e683 d143945e420">
<p>Before removing the record that the resource is checked out.</p>
</td>
<td class="cellalignment3429" headers="d143945e683 d143945e423">
<p>After unchecking out the resource.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3464" id="d143945e697" headers="d143945e414">
<p><code>VersionControl</code></p>
</td>
<td class="cellalignment3469" headers="d143945e697 d143945e417">
<p>Occurs when a version history is created for a resource.</p>
<p>Note: You can call <code>DBMS_XDB_VERSION.MakeVersioned()</code> multiple times, but the version history is created only at the first call. Subsequent calls have no effect, so no <code>VersionControl</code> event occurs.</p>
</td>
<td class="cellalignment3477" headers="d143945e697 d143945e420">
<p>Before creating the version history for the resource.</p>
</td>
<td class="cellalignment3429" headers="d143945e697 d143945e423">
<p>After creating the first version of the resource.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>For simplicity, the documentation generally treats both members of a repository event pair together, referring, for example, to the <code>LinkIn</code> event type as shorthand for the pre-link-in and post-link-in event types. For the same reason, the event-type names used here are derived from the Java interface <code>XDBRepositoryEventListener</code> by dropping the prefixes <code>handlePre</code> and <code>handlePost</code>.</p>
<div class="infoboxnotealso" id="GUID-5F7D0772-848D-49EA-832B-AB1117B9E3F1__GUID-B09E0E1F-45BC-4E97-841C-A913C5C661FB">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS210" target="_blank" href="../ARPLS/d_xevent.htm#ARPLS210"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for the PL/SQL repository event types</p>
</div>
</div>
</div>
<a id="ADXDB5599"></a><a id="ADXDB5598"></a>
<div class="props_rev_3"><a id="GUID-5821696E-5128-4221-9E9F-D36E2ACE5834"></a>
<h2 id="ADXDB-GUID-5821696E-5128-4221-9E9F-D36E2ACE5834" class="sect2"><span class="enumeration_section">30.3</span> Repository Operations and Events</h2>
<div>
<p>The same repository event can occur with different Oracle XML&nbsp;DB Repository operations, and a given repository operation can produce more than one repository event.</p>
<p><a href="xdb_repos_events.htm#GUID-5821696E-5128-4221-9E9F-D36E2ACE5834__BABCCJGG" title="Repository operations and events">Table 30-2</a> lists the events that are associated with each repository operation. See <a href="xdb_repos_events.htm#GUID-5F7D0772-848D-49EA-832B-AB1117B9E3F1__BABHJGBH" title="Predefined Repository Events">Table 30-1</a> for the event order when multiple repository events occur for the same operations.</p>
<div class="tblformalwide" id="GUID-5821696E-5128-4221-9E9F-D36E2ACE5834__BABCCJGG">
<p class="titleintable">Table 30-2 Oracle XML&nbsp;DB Repository Operations and Events</p>
<table class="cellalignment3431" title="Oracle XML&nbsp;DB Repository Operations and Events" summary="Repository operations and events">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3506" id="d143945e784">Operation</th>
<th class="cellalignment3507" id="d143945e787">Repository Events Occurring</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e792" headers="d143945e784">
<p>Get binary representation of resource contents by path name</p>
</td>
<td class="cellalignment3509" headers="d143945e792 d143945e787">
<p><code>Render</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e800" headers="d143945e784">
<p>Get XML representation of resource contents by path name</p>
</td>
<td class="cellalignment3509" headers="d143945e800 d143945e787">
<p><code>Render</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e808" headers="d143945e784">
<p>Create or update a resource</p>
</td>
<td class="cellalignment3509" headers="d143945e808 d143945e787">
<p>If the resource already exists: <code>Create</code>, <code>LinkIn</code>, <code>LinkTo</code></p>
<p>If resource doe not yet exist (HTTP and FTP only): <code>Update</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e827" headers="d143945e784">
<p>Create a folder</p>
</td>
<td class="cellalignment3509" headers="d143945e827 d143945e787">
<p><code>Create</code>, <code>LinkIn</code>, <code>LinkTo</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e841" headers="d143945e784">
<p>Create a link to an existing resource</p>
</td>
<td class="cellalignment3509" headers="d143945e841 d143945e787">
<p><code>LinkIn</code> on the folder containing the link target, <code>LinkTo</code> on the target resource to be linked</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e853" headers="d143945e784">
<p>Unlink a file resource or an empty folder resource. (Decrement <code>RefCount</code>, and if it becomes zero then delete the resource from disk.)</p>
</td>
<td class="cellalignment3509" headers="d143945e853 d143945e787">
<p><code>UnlinkIn</code>, <code>UnlinkFrom</code>, and, if <code>RefCount</code> is zero, <code>Delete</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e873" headers="d143945e784">
<p>Forcibly delete a folder and its contents</p>
</td>
<td class="cellalignment3509" headers="d143945e873 d143945e787">
<p>Recursively produce events for unlinking a resource. Folder child resources are deleted recursively, then the folder is deleted.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e880" headers="d143945e784">
<p>Forcibly remove all links to a resource</p>
</td>
<td class="cellalignment3509" headers="d143945e880 d143945e787">
<p>Produce unlinking events for each link removed.</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e887" headers="d143945e784">
<p>Update the contents, properties, or ACL of a resource by path name</p>
</td>
<td class="cellalignment3509" headers="d143945e887 d143945e787">
<p><code>Update</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e895" headers="d143945e784">
<p>Put a depth-zero WebDAV lock on a resource</p>
</td>
<td class="cellalignment3509" headers="d143945e895 d143945e787">
<p><code>Lock</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e903" headers="d143945e784">
<p>Remove a depth-zero WebDAV lock from a resource</p>
</td>
<td class="cellalignment3509" headers="d143945e903 d143945e787">
<p><code>Lock</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e912" headers="d143945e784">
<p>Rename (move) a resource</p>
</td>
<td class="cellalignment3509" headers="d143945e912 d143945e787">
<p><code>LinkIn</code> and <code>LinkTo</code> on the new location, <code>UnlinkIn</code> and <code>UnlinkFrom</code> on the old location</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e930" headers="d143945e784">
<p>Copy a resource</p>
</td>
<td class="cellalignment3509" headers="d143945e930 d143945e787">
<p><code>Create</code>, <code>LinkIn</code>, and <code>LinkTo</code> on the new location</p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e945" headers="d143945e784">
<p>Check out a resource</p>
</td>
<td class="cellalignment3509" headers="d143945e945 d143945e787">
<p><code>CheckOut</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e953" headers="d143945e784">
<p>Check in a resource</p>
</td>
<td class="cellalignment3509" headers="d143945e953 d143945e787">
<p><code>CheckIn</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e961" headers="d143945e784">
<p>Place a resource under version control</p>
</td>
<td class="cellalignment3509" headers="d143945e961 d143945e787">
<p><code>VersionControl</code></p>
</td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3508" id="d143945e969" headers="d143945e784">
<p>Uncheck out a resource</p>
</td>
<td class="cellalignment3509" headers="d143945e969 d143945e787">
<p><code>UncheckOut</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>All operations listed in <a href="xdb_repos_events.htm#GUID-5821696E-5128-4221-9E9F-D36E2ACE5834__BABCCJGG" title="Repository operations and events">Table 30-2</a> are atomic, except for these:</p>
<ul style="list-style-type: disc;">
<li>
<p>Forced deletion of a folder and its contents</p>
</li>
<li>
<p>Update of resource properties by path name using HTTP (only)</p>
</li>
<li>
<p>Copy of a folder using HTTP (only)</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-5821696E-5128-4221-9E9F-D36E2ACE5834__GUID-7FF30433-3489-441D-8DA6-439037134710">
<p class="notep1">See Also:</p>
<p><a href="xdb16fol.htm#GUID-B162A199-F7F8-4E81-B2FD-919B90F7FE83__BABBJJDI" title="This table describes the API options for accessing Oracle XML DB Repository.">Table 21-3</a> for information on accessing resources using APIs and protocols</p>
</div>
</div>
</div>
<a id="ADXDB5600"></a>
<div class="props_rev_3"><a id="GUID-C4139224-FF34-4B6D-9B68-481FA41E634C"></a>
<h2 id="ADXDB-GUID-C4139224-FF34-4B6D-9B68-481FA41E634C" class="sect2"><span class="enumeration_section">30.4</span> Repository Event Handler Considerations</h2>
<div>
<p>Some considerations are listed for defining handlers for Oracle XML&nbsp;DB Repository events.</p>
<ul style="list-style-type: disc;">
<li>
<p>In any handler: Do not use <code>COMMIT</code>, <code>ROLLBACK</code>, or data definition language (DDL) statements in a handler. Do not call PL/SQL functions or procedures, such as <code>DBMS_XMLSCHEMA.registerSchema</code>, that behave similarly to DDL statements. In a <code>Render</code> handler: Do not use data manipulation language (DML) statements.</p>
<p>To work around these restrictions, a handler can use such statements inside an autonomous transaction, but it must ensure that lock conflicts cannot arise.</p>
</li>
<li>
<p>In a <code>Render</code> handler, do not close an output stream. (You can append to a stream.)</p>
</li>
<li>
<p>Do <span class="italic">not</span> use modifier methods from class <code>XDBResource</code> in a handler, unless it is a <code>Pre-Create</code> or <code>Pre-Update</code> handler. Do <span class="italic">not</span> use method <code>XDBResource.save()</code> in any handler.</p>
</li>
<li>
<p>Oracle recommends that you develop only safe repository event handlers. In particular:</p>
<ul style="list-style-type: disc;">
<li>
<p>Write only resource properties that are in namespaces owned by your application, never in the <code>xdb</code> namespace.</p>
</li>
<li>
<p>Do not delete a resource while it is being created.</p>
</li>
</ul>
</li>
<li>
<p>A repository event handler is passed an <code>XDBRepositoryEvent</code> object, which exists only during the current SQL statement or protocol operation. You can use PL/SQL procedures and Java methods on this object to obtain information about the resource, the event, and the associated event handlers.</p>
</li>
<li>
<p>When an event handler performs operations that cause other repository events to occur, those cascading events occur immediately. They are not queued to occur after the handlers for the current event are finished. Each event thus occurs in the context of its corresponding operation.</p>
</li>
<li>
<p>Repository event handlers are called synchronously. They are executed in the process, session, and transaction context of the corresponding operation. However, handlers can use Oracle Streams Advanced Queuing (AQ) to queue repository events that are then handled asynchronously by some other process.</p>
</li>
<li>
<p>Because a repository event handler is executed in the transaction context of its corresponding operation, any locks acquired by that operation, or by other operations run previously in the transaction, are still active. An event handler must not start a separate session or transaction that tries to acquire such a lock. Otherwise, the handler hangs.</p>
</li>
<li>
<p>Repository event handlers are called in the order that they appear in a resource configuration file. If preconditions are defined for a resource configuration, then only those handlers are called for which the precondition is satisfied.</p>
</li>
<li>
<p>Although handlers are called in the order they are defined in a configuration file, avoid letting your code depend upon this. If the user who is current when a handler is invoked has privilege <code>write-config</code>, then the handler invocation order could be changed inside an executing handler.</p>
</li>
<li>
<p>The entire list of handlers applicable to a given repository event occurrence is determined before any of the handlers is invoked. This means, in particular, that the precondition for each handler is evaluated before any handlers are invoked.</p>
</li>
<li>
<p>The following considerations apply to <span class="italic">error handling</span> for repository events:</p>
<ul style="list-style-type: disc;">
<li>
<p>A pre-operation event handler is never invoked if access checks for the operation fail.</p>
</li>
<li>
<p>All handlers for a given event are checked before any of them are called. If any of them is not usable (for example, no longer exists), then <span class="italic">none</span> of them are called.</p>
</li>
<li>
<p>If an error is raised during event handling, then other, subsequent event handlers are not invoked for the same SQL statement or protocol operation. The current statement or operation is canceled and all of its changes are rolled back.</p>
</li>
</ul>
</li>
<li>
<p>The following considerations apply to <span class="italic">resource security</span> for repository events:</p>
<ul style="list-style-type: disc;">
<li>
<p>An event handler can have invoker&#39;s rights or definer rights. You specify the execution rights of a PL/SQL package when you create the package. You specify the execution rights of Java classes when you load them into the database using the <code>loadjava</code> utility. If you specify invoker&#39;s rights, but a given handler is not configured for invoker&#39;s rights, then an insufficient-privilege error is raised.</p>
</li>
<li>
<p>Within an event handler, the current user privileges, whether obtained by invoker or definer rights, are determined in detail for a given resource by its ACL. These privileges determine what the handler can do with the resource. For example, if the current user has privileges <code>read-properties</code> and <code>read-contents</code> for a particular resource, then an event handler can read that resource.</p>
</li>
</ul>
</li>
<li>
<p>The following considerations apply to repository events for <span class="italic">linking</span> and <span class="italic">unlinking</span>:</p>
<ul style="list-style-type: disc;">
<li>
<p>After creating a link to a resource, if you want any resource configuration files of the parent folder to also apply to the linked resource, then use procedure <code>DBMS_RESCONFIG.appendResConfig</code> to add the configuration files to the linked resource. You can invoke this procedure from a <code>Post-LinkTo</code> event handler for the linked resource.</p>
</li>
<li>
<p>After unlinking a resource, if you want to remove any such resource configuration files added when linking, then use procedure <code>DBMS_RESCONFIG.deleteResConfig</code> to remove them from the unlinked resource. You can invoke this procedure from a <code>Post-UnlinkFrom</code> event handler for the unlinked resource.</p>
</li>
</ul>
</li>
<li>
<p>Do not define handlers for events on folder <code>/sys/schemas</code> or on resources under this folder. Events do not occur for any such resources, so such event handlers are ignored. This implies that XML schema operations that affect the repository (registration, deletion, and so on) do not produce events.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-C4139224-FF34-4B6D-9B68-481FA41E634C__GUID-9974B3C1-2ED9-4C48-8823-85F0F8415501">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink ARPLS210" target="_blank" href="../ARPLS/d_xevent.htm#ARPLS210"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about PL/SQL functions and procedures for manipulating repository events</p>
</li>
<li>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a>, classes <code>XDBRepositoryEvent</code> and <code>XDBEvent</code> for information about Java methods for manipulating repository events</p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb_repos_events.htm#GUID-C7D110F1-CB15-475B-83E6-7C186DF0E119" title="In a resource configuration file, you use element event-listeners, child of element ResConfig, to configure Oracle XML&nbsp;DB Repository event handling.">Configuration of Repository Events</a>&#34;</span> for information about defining repository event handlers with invoker&#39;s rights</p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDB5601"></a>
<div class="props_rev_3"><a id="GUID-C7D110F1-CB15-475B-83E6-7C186DF0E119"></a>
<h2 id="ADXDB-GUID-C7D110F1-CB15-475B-83E6-7C186DF0E119" class="sect2"><span class="enumeration_section">30.5</span> Configuration of Repository Events</h2>
<div>
<p>In a resource configuration file, you use element <code>event-listeners</code>, child of element <code>ResConfig</code>, to configure Oracle XML&nbsp;DB Repository event handling.</p>
<p>You configure event treatment for Oracle XML&nbsp;DB Repository resources as you would configure any other treatment of repository resources&thinsp;&mdash;&thinsp;see <span class="q">&#34;<a href="xdb_repos_config.htm#GUID-AB3B6205-AE7B-4A12-A6B9-C3CC0C1108D3" title="Configuring an Oracle XML&nbsp;DB Repository resource involves creating a configuration file, adding that file to the repository as a configuration resource, and mapping the configuration resource to the resources it configures or to the entire repository.">Configuring a Resource</a>&#34;</span>.</p>
<p>By default, repository events are enabled, but you can disable them by setting parameter <code>XML_DB_EVENTS</code> to <code>DISABLE</code>. To disable repository events at the session level, use the following SQL*Plus command. You must have role <code>XDBADMIN</code> to do this.</p>
<pre dir="ltr">ALTER SESSION SET XML_DB_EVENTS = DISABLE;
</pre>
<p>To disable repository events at the system level, use the following SQL*Plus command, and then restart your database. Repository events are disabled for subsequent sessions. You must have privilege <code>ALTER SYSTEM</code> to do this.</p>
<pre dir="ltr">ALTER SYSTEM SET XML_DB_EVENTS = DISABLE;
</pre>
<p>To enable repository events again, set the value of <code>XML_DB_EVENTS</code> to <code>ENABLE</code>.</p>
<p>A resource configuration file is an XML file that conforms to the XML schema <code>XDBResConfig.xsd</code>, which is accessible in Oracle XML&nbsp;DB Repository at path <code>/sys/schemas/PUBLIC/xmlns.oracle.com/xdb/XDBResConfig.xsd</code>. You use element <code>event-listeners</code>, child of element <code>ResConfig</code>, to configure repository event handling.</p>
<div class="infoboxnotealso" id="GUID-C7D110F1-CB15-475B-83E6-7C186DF0E119__GUID-1867B84E-ADA5-490B-98EE-4F8E680F4E6E">
<p class="notep1">See Also:</p>
<p><a href="xdb_repos_config.htm#GUID-E44B59D4-7A7E-4303-ACE3-B801797B06AF" title="Overall configuration of Oracle XML&nbsp;DB Repository applies to all repository resources. It does not include configuring parameters for handling events or managing XLink and XInclude processing. You use resource configuration files to configure resources.">Configuration of Oracle XML&nbsp;DB Repository</a> for general information about configuring repository resources</p>
</div>
</div>
<a id="ADXDB5602"></a>
<div class="props_rev_3"><a id="GUID-FC91D1C8-A5BF-4FEB-B6C9-6953FA9F6279"></a>
<h3 id="ADXDB-GUID-FC91D1C8-A5BF-4FEB-B6C9-6953FA9F6279" class="sect3"><span class="enumeration_section">30.5.1</span> Configuration Element event-listeners</h3>
<div>
<p>Each resource configuration file can have one <code>event-listeners</code> element, as a child of element <code>ResConfig</code>. This configures all event handling for the target resource. If the resource configuration file applies to the entire repository, not to a particular resource, then it defines event handling for all resources in the repository.</p>
<p>Element <code>event-listeners</code> has the following optional attributes:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>set-invoker</code> &ndash; Set this to <code>true</code> to if the resource configuration defines one or more repository event handlers to have invoker&#39;s rights. The default value is <code>false</code>, meaning that definer rights are used.</p>
<p>To define an invoker-rights repository event handler, you must have database role <code>XDB_SET_INVOKER</code>. This role is granted to <code>DBA</code>, but not to <code>XDBADMIN</code>. Role <code>XDB_SET_INVOKER</code> is checked only when a resource configuration file is created or updated. Only attribute <code>set-invoker</code>, not role <code>XDB_SET_INVOKER</code>, is checked at run time to ensure sufficient privilege.</p>
<div class="infoboxnotealso" id="GUID-FC91D1C8-A5BF-4FEB-B6C9-6953FA9F6279__GUID-72EEDD2E-3937-4C70-8C6D-8D0C78091409">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb_repos_events.htm#GUID-C4139224-FF34-4B6D-9B68-481FA41E634C" title="Some considerations are listed for defining handlers for Oracle XML&nbsp;DB Repository events.">Repository Event Handler Considerations</a>&#34;</span> for information about insufficient-privilege errors</p>
</div>
</li>
<li>
<p><code>default-schema</code> &ndash; The default schema value, used for listeners for which no <code>schema</code> element is defined.</p>
</li>
<li>
<p><code>default-language</code> &ndash;The default language value, used for listeners for which no <code>language</code> element is defined.</p>
</li>
</ul>
<p>Element <code>event-listeners</code> has a sequence of <code>listener</code> elements as children. These configure individual repository event listeners. The listeners are processed at run time in the order of the <code>listener</code> elements.</p>
</div>
</div>
<a id="ADXDB5603"></a>
<div class="props_rev_3"><a id="GUID-BA0619E8-B9F4-4824-BD6A-0C65A3C040C8"></a>
<h3 id="ADXDB-GUID-BA0619E8-B9F4-4824-BD6A-0C65A3C040C8" class="sect3"><span class="enumeration_section">30.5.2</span> Configuration Element listener</h3>
<div>
<p>Element <code>listener</code> is a child of element <code>event-listeners</code>, and it configures an individual repository event listener.</p>
<div class="section">
<p>Each <code>listener</code> element has the following child elements. All of these are optional except <code>source</code>, and they can appear in any order (their order is irrelevant).</p>
<ul style="list-style-type: disc;">
<li>
<p><code>description</code> &ndash; Description of the listener.</p>
</li>
<li>
<p><code>schema</code> &ndash; Database schema for the Java or PL/SQL implementation of the repository event handlers. If neither this nor <code>default-schema</code> is defined, then an error is raised.</p>
</li>
<li>
<p><code>source</code> (required) &ndash; Name of the Java class, PL/SQL package, or object type that provides the handler methods. Java class names must be qualified with a package name. Use an empty <code>source</code> element to indicate that the repository event handlers are standalone PL/SQL stored procedures.</p>
</li>
<li>
<p><code>language</code> &ndash; Implementation language of the listener class (Java) or package (PL/SQL). If neither this nor <code>default-language</code> is defined, then an error is raised.</p>
</li>
<li>
<p><code>pre-condition</code> &ndash; Precondition to be met for any repository event handlers in this listener to be executed. This is identical to the <code>pre-condition</code> child of general resource configuration element <code>configuration</code> &ndash; see <span class="q">&#34;<a href="xdb_repos_config.htm#GUID-5010D4C5-38CA-4ABE-A559-C1D1001359D3" title="Configuration element defaultChildConfig applies to only folders. It holds configuration information to be applied to all child resources in the folder. Element defaultChildConfig has one or more configuration child elements, each of which defines a possible configuration for resources in the folder.">Configuration Elements defaultChildConfig and configuration</a>&#34;</span>.</p>
</li>
<li>
<p><code>events</code> &ndash; Sequence of unique repository event type names: <code>Render</code>, <code>Pre-Create</code>, and so on. Only handlers for repository events of these types are enabled for the listener. See <span class="q">&#34;<a href="xdb_repos_events.htm#GUID-5F7D0772-848D-49EA-832B-AB1117B9E3F1" title="Repository operations are associated with predefined events. Except for a rendering operation, events come in pre and post pairs.">Possible Repository Events</a>&#34;</span> for the list of possible repository event types. If element <code>events</code> is not present, then handlers of repository events of all types are enabled for the listener, which can be wasteful. Provide element <code>events</code> to eliminate handler invocations for insignificant repository events.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDB5605"></a><a id="ADXDB5606"></a><a id="ADXDB5607"></a><a id="ADXDB5608"></a><a id="ADXDB5609"></a><a id="ADXDB5604"></a>
<div class="props_rev_3"><a id="GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976"></a>
<h3 id="ADXDB-GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976" class="sect3"><span class="enumeration_section">30.5.3</span> Repository Events Configuration Examples</h3>
<div>
<p>Examples of configuring repository events are presented. Resource configuration files define Java and PL/SQL event listeners, with and without preconditions, respectively. An example categorizes resources according to MIME type. It includes PL/SQL code to create the resource configuration file. Examples implement listeners in Java and PL/SQL.</p>
<div class="section">
<p><a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABDEGAA">Example 30-1</a> shows the content of a resource configuration file that defines two event listeners. Each listener defines handlers for repository events of types <code>Post-LinkIn</code>, <code>Post-UnlinkIn</code>, and <code>Post-Update</code>. It defines preconditions, the default language (Java), and the default database schema.</p>
<p>The implementation of the handlers of the first listener is in Java class <code>oracle.cm.quota</code> defined in database schema <code>CM</code>. These handlers are invoked only for events on resources of <code>ContentType</code> <code>image/gif</code>.</p>
<p>The implementation of the handlers of the second listener is in Java class <code>oracle.ifs.quota</code> defined in database schema <code>IFS</code> (the default schema for this resource configuration file). These handlers are invoked only for events on resources of type <code>ifs-file</code> in namespace <code>http://foo.xsd</code>.</p>
<div class="infoboxnotealso" id="GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__GUID-81D0675B-D3D5-4DD8-8ABE-0FC83C72E847">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb_repos_config.htm#GUID-5010D4C5-38CA-4ABE-A559-C1D1001359D3" title="Configuration element defaultChildConfig applies to only folders. It holds configuration information to be applied to all child resources in the folder. Element defaultChildConfig has one or more configuration child elements, each of which defines a possible configuration for resources in the folder.">Configuration Elements defaultChildConfig and configuration</a>&#34;</span> for a description of elements <code>defaultChildConfig</code> and <code>applicationData</code></p>
</div>
<p>As a simple end-to-end illustration, suppose that an application needs to categorize the resources in folder <code>/public/res-app</code> according to their MIME types. It creates links to resources in folders <code>/public/app/XML-TXT</code>, <code>/public/app/IMG</code>, and <code>/public/app/FOLDER</code>, depending on whether the resource MIME type is <code>text/xml</code>, <code>image/gif</code>, or <code>application/octet-stream</code>, respectively. This is illustrated in <a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABBJGAC">Example 30-2</a>, <a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABCDJEH">Example 30-3</a>, and <a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABIHGGH">Example 30-5</a>.</p>
<p><a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABBJGAC">Example 30-2</a> shows the PL/SQL code to create the configuration file for this categorization illustration. It defines a single listener that handles events of types <code>Pre-UnlinkIn</code> and <code>Post-LinkIn</code>. It explicitly defines the language (PL/SQL) and database schema. No preconditions are defined.</p>
<p><a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABCDJEH">Example 30-3</a> shows the PL/SQL code that implements the event handlers that are configured in <a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABBJGAC">Example 30-2</a>. The <code>Post-LinkIn</code> event handler creates a link to the <code>eventObject</code> resource in one of the folders <code>/public/app/XML-TXT</code>, <code>/public/app/IMG</code>, and <code>/public/app/FOLDER</code>, depending on the resource MIME type. The <code>Pre-UnlinkIn</code> event handler deletes the links that are created by the <code>Post-LinkIn</code> event handler.</p>
<div class="infoboxnotealso" id="GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__GUID-34892E6E-8B01-423B-A170-E0504253AF45">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink ARPLS230" target="_blank" href="../ARPLS/d_xdbresource.htm#ARPLS230"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about PL/SQL package <code>DBMS_XDBRESOURCE</code></p>
</li>
<li>
<p><a class="olink ARPLS210" target="_blank" href="../ARPLS/d_xevent.htm#ARPLS210"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about PL/SQL package <code>DBMS_XEVENT</code></p>
</li>
<li>
<p><a class="olink ARPLS74188" target="_blank" href="../ARPLS/d_xdb_repos.htm#ARPLS74188"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about PL/SQL package <code>DBMS_XDB_REPOS</code></p>
</li>
</ul>
</div>
<p>A Java example would be configured the same as in <a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABBJGAC">Example 30-2</a>, with the exception of these two lines, which would replace the elements with the same names in <a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABBJGAC">Example 30-2</a>:</p>
<pre dir="ltr">                &lt;source&gt;<span class="bold">category</span>&lt;/source&gt;
                &lt;language&gt;<span class="bold">Java</span>&lt;/language&gt;
</pre>
<p><a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABCFCIH">Example 30-4</a> shows the Java code that implements the event handlers. The logic is identical to that in <a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABCDJEH">Example 30-3</a>.</p>
<p><a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABIHGGH">Example 30-5</a> demonstrates the invocation of the event handlers that are implemented in <a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABCDJEH">Example 30-3</a> or <a href="xdb_repos_events.htm#GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABCFCIH">Example 30-4</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABDEGAA">
<p class="titleinexample">Example 30-1 Resource Configuration File for Java Event Listeners with Preconditions</p>
<pre dir="ltr">&lt;ResConfig xmlns=&#34;http://xmlns.oracle.com/xdb/XDBResConfig.xsd&#34;
           xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
           xsi:schemaLocation=&#34;http://xmlns.oracle.com/xdb/XDBResConfig.xsd
                               http://xmlns.oracle.com/xdb/XDBResConfig.xsd&#34;&gt;
  &lt;event-listeners <span class="bold">default-language=&#34;Java&#34; default-schema=&#34;IFS&#34;</span>&gt;
    &lt;listener&gt;
      &lt;description&gt;Category application&lt;/description&gt;
      &lt;schema&gt;CM&lt;/schema&gt;
      &lt;source&gt;<span class="bold">oracle.cm.category</span>&lt;/source&gt;
      &lt;events&gt;
        <span class="bold">&lt;Post-LinkIn/&gt;</span>
        <span class="bold">&lt;Post-UnlinkIn/&gt;</span>
        <span class="bold">&lt;Post-Update/&gt;</span>
      &lt;/events&gt;
      &lt;pre-condition&gt;
        &lt;existsNode&gt;
          &lt;XPath&gt;/Resource<span class="bold">[ContentType=&#34;image/gif&#34;]</span>&lt;/XPath&gt;
        &lt;/existsNode&gt;
      &lt;/pre-condition&gt;
    &lt;/listener&gt;
    &lt;listener&gt;
      &lt;description&gt;Check quota&lt;/description&gt;
      &lt;source&gt;<span class="bold">oracle.ifs.quota</span>&lt;/source&gt;
      &lt;events&gt;
        <span class="bold">&lt;Post-LinkIn/&gt;</span>
        <span class="bold">&lt;Post-UnlinkIn/&gt;</span>
        <span class="bold">&lt;Post-Update/&gt;</span>
      &lt;/events&gt;
      &lt;pre-condition&gt;
        &lt;existsNode&gt;
          &lt;XPath&gt;r:/Resource/<span class="bold">[ns:type=&#34;ifs-file&#34;]</span>&lt;/XPath&gt;
          &lt;namespace&gt;xmlns:r=&#34;http://xmlns.oracle.com/xdb/XDBResource.xsd&#34;
                     xmlns:<span class="bold">ns=&#34;http://foo.xsd</span>&#34;
          &lt;/namespace&gt;
        &lt;/existsNode&gt;
      &lt;/pre-condition&gt;
    &lt;/listener&gt;
  &lt;/event-listeners&gt;
  &lt;defaultChildConfig&gt;
    &lt;configuration&gt;
      &lt;path&gt;/sys/xdb/resconfig/user_rc.xml&lt;/path&gt;
    &lt;/configuration&gt;
  &lt;/defaultChildConfig&gt;
  &lt;applicationData&gt;
    &lt;foo:data xmlns:foo=&#34;http://foo.xsd&#34;&gt;
      &lt;foo:item1&gt;1234&lt;/foo:item1&gt;
    &lt;/foo:data&gt;
  &lt;/applicationData&gt;
&lt;/ResConfig&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABBJGAC">
<p class="titleinexample">Example 30-2 Resource Configuration File for PL/SQL Event Listeners with No Preconditions</p>
<pre dir="ltr">DECLARE
  b BOOLEAN := FALSE;
BEGIN
  b := DBMS_XDB_REPOS.createFolder(&#39;/public/resconfig&#39;);
  b := DBMS_XDB_REPOS.createResource(
         &#39;/public/resconfig/appcatg-rc1.xml&#39;,
         &#39;&lt;ResConfig xmlns=&#34;http://xmlns.oracle.com/xdb/XDBResConfig.xsd&#34;
                     xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
                     xsi:schemaLocation=&#34;http://xmlns.oracle.com/xdb/XDBResConfig.xsd
                                         http://xmlns.oracle.com/xdb/XDBResConfig.xsd&#34;&gt;
            &lt;event-listeners&gt;
              &lt;listener&gt;
                &lt;description&gt;Category application&lt;/description&gt;
           <span class="bold">     &lt;schema&gt;APPCATGUSER1&lt;/schema&gt;</span>
                <span class="bold">&lt;source&gt;APPCATG_EVT_PKG1&lt;/source&gt;</span>
           <span class="bold">     &lt;language&gt;PL/SQL&lt;/language&gt;</span>
                &lt;events&gt;
             <span class="bold">     &lt;Pre-UnlinkIn/&gt;</span>
                  <span class="bold">&lt;Post-LinkIn/&gt;</span>
                &lt;/events&gt;
              &lt;/listener&gt;
            &lt;/event-listeners&gt;
            &lt;defaultChildConfig&gt;
              &lt;configuration&gt;
                &lt;path&gt;/public/resconfig/appcatg-rc1.xml&lt;/path&gt;
              &lt;/configuration&gt;
            &lt;/defaultChildConfig&gt;
          &lt;/ResConfig&gt;&#39;,
         &#39;http://xmlns.oracle.com/xdb/XDBResConfig.xsd&#39;,
         &#39;ResConfig&#39;);
END;
/
BEGIN
  DBMS_RESCONFIG.appendResConfig(&#39;/public/res-app&#39;, 
                                 &#39;/public/resconfig/appcatg-rc1.xml&#39;,
                                 DBMS_RESCONFIG.APPEND_RECURSIVE);
END;
/
 
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABCDJEH">
<p class="titleinexample">Example 30-3 PL/SQL Code Implementing Event Listeners</p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE appcatg_evt_pkg1 AS
 
  PROCEDURE handlePreUnlinkIn (eventObject DBMS_XEVENT.XDBRepositoryEvent);
  PROCEDURE handlePostLinkIn (eventObject DBMS_XEVENT.XDBRepositoryEvent);
 
END;
/
CREATE OR REPLACE PACKAGE BODY appcatg_evt_pkg1 AS
 
  PROCEDURE <span class="bold">handlePreUnlinkIn</span> (eventObject DBMS_XEVENT.XDBRepositoryEvent) AS
      XDBResourceObj DBMS_XDBRESOURCE.XDBResource;
      ResDisplayName VARCHAR2(100);
      ResPath        VARCHAR2(1000);
      ResOwner       VARCHAR2(1000);
      ResDeletedBy   VARCHAR2(1000);
      XDBPathobj     DBMS_XEVENT.XDBPath;
      XDBEventobj    DBMS_XEVENT.XDBEvent;
      SeqChar        VARCHAR2(1000);
      LinkName       VARCHAR2(10000);
      ResType        VARCHAR2(100);
      LinkFolder     VARCHAR2(100);
    BEGIN
      XDBResourceObj := DBMS_XEVENT.getResource(eventObject);
      ResDisplayName := DBMS_XDBRESOURCE.getDisplayName(XDBResourceObj);
      ResOwner       := DBMS_XDBRESOURCE.getOwner(XDBResourceObj);
      XDBPathobj     := DBMS_XEVENT.getPath(eventObject);
      ResPath        := DBMS_XEVENT.getName(XDBPathObj);
      XDBEventobj    := DBMS_XEVENT.getXDBEvent(eventObject);
      ResDeletedBy   := DBMS_XEVENT.getCurrentUser(XDBEventobj);
      BEGIN
        SELECT XMLCast(
                 XMLQuery(
                   &#39;declare namespace ns = &#34;http://xmlns.oracle.com/xdb/XDBResource.xsd&#34;;
                    /ns:Resource/ns:ContentType&#39;
                   PASSING r.RES RETURNING CONTENT) AS VARCHAR2(100))
          INTO ResType
          FROM PATH_VIEW r WHERE r.PATH=ResPath;
          EXCEPTION WHEN OTHERS THEN NULL;
      END;
      IF ResType = &#39;<span class="bold">text/xml</span>&#39; THEN LinkFolder := &#39;<span class="bold">/public/app/XML-TXT/</span>&#39;;
      END IF;
      IF ResType = &#39;<span class="bold">image/gif</span>&#39; THEN LinkFolder := &#39;<span class="bold">/public/app/IMG/</span>&#39;;
      END IF;
      IF ResType = &#39;<span class="bold">application/octet-stream</span>&#39; THEN LinkFolder := &#39;/<span class="bold">public/app/FOLDER/</span>&#39;;
      END IF;
      DBMS_XDB_REPOS.<span class="bold">deleteResource</span>(LinkFolder || ResDisplayName);
  END;
 
  PROCEDURE <span class="bold">handlePostLinkIn</span> (eventObject DBMS_XEVENT.XDBRepositoryEvent) AS
      XDBResourceObj DBMS_XDBRESOURCE.XDBResource;
      ResDisplayName VARCHAR2(100);
      ResPath        VARCHAR2(1000);
      ResOwner       VARCHAR2(1000);
      ResDeletedBy   VARCHAR2(1000);
      XDBPathobj     DBMS_XEVENT.XDBPath;
      XDBEventobj    DBMS_XEVENT.XDBEvent;
      SeqChar        VARCHAR2(1000);
      LinkName       VARCHAR2(10000);
      ResType        VARCHAR2(100);
      LinkFolder     VARCHAR2(100);
    BEGIN
      XDBResourceObj := DBMS_XEVENT.getResource(eventObject);
      ResDisplayName := DBMS_XDBRESOURCE.getDisplayName(XDBResourceObj);
      ResOwner       := DBMS_XDBRESOURCE.getOwner(XDBResourceObj);
      XDBPathobj     := DBMS_XEVENT.getPath(eventObject);
      ResPath        := DBMS_XEVENT.getName(XDBPathObj);
      XDBEventobj    := DBMS_XEVENT.getXDBEvent(eventObject);
      ResDeletedBy   := DBMS_XEVENT.getCurrentUser(XDBEventobj);
      SELECT XMLCast(
               XMLQuery(
                 &#39;declare namespace ns = &#34;http://xmlns.oracle.com/xdb/XDBResource.xsd&#34;;
                  /ns:Resource/ns:ContentType&#39;
                 PASSING r.RES RETURNING CONTENT) AS VARCHAR2(100))
        INTO ResType
        FROM PATH_VIEW r WHERE r.PATH=ResPath;
      IF ResType = &#39;<span class="bold">text/xml</span>&#39; THEN LinkFolder := &#39;<span class="bold">/public/app/XML-TXT</span>&#39;;
      END IF;
      IF ResType = &#39;<span class="bold">image/gif</span>&#39; THEN LinkFolder := &#39;<span class="bold">/public/app/IMG</span>&#39;;
      END IF;
      IF ResType = &#39;<span class="bold">application/octet-stream</span>&#39; THEN LinkFolder := &#39;<span class="bold">/public/app/FOLDER</span>&#39;;
      END IF;
      DBMS_XDB_REPOS.<span class="bold">link</span>(ResPath, LinkFolder, ResDisplayName);
    END;
 END;
 /
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABCFCIH">
<p class="titleinexample">Example 30-4 Java Code Implementing Event Listeners</p>
<pre dir="ltr">import oracle.xdb.event.*;
import oracle.xdb.spi.*;
import java.sql.*;
import java.io.*;
import java.net.*;
import oracle.jdbc.*;
import oracle.sql.*;
import oracle.xdb.XMLType;
import oracle.xdb.dom.*;
 
public class <span class="bold">category</span>
extends oracle.xdb.event.XDBBasicEventListener
{
  public Connection <span class="bold">connectToDB</span>() throws java.sql.SQLException
  {
    try
    {
      String strUrl=&#34;jdbc:oracle:kprb:&#34;;
      String strUname=&#34;appcatguser1&#34;;
      String strPwd=&#34;appcatguser1 &#34;;
      Connection conn=null;
      OraclePreparedStatement stmt=null;
      DriverManager.registerDriver(new oracle.jdbc.OracleDriver());
      conn = DriverManager.getConnection(strUrl, strUname, strPwd);
      return conn;
    }
    catch(Exception e1)
    {
      System.out.println(&#34;Exception in connectToDB java function&#34;);
      System.out.println(&#34;e1:&#34; + e1.toString());
      return null;
    }
  }
  public void <span class="bold">handlePostLinkIn</span> (XDBRepositoryEvent eventObject)
  {
    XDBPath objXDBPath = null;
    String strPathName=&#34;&#34;;
    objXDBPath = eventObject.getPath();
    strPathName = objXDBPath.getName();
    XDBResource objXDBResource1;
    objXDBResource1 = eventObject.getResource();
    String textResDisplayName = objXDBResource1.getDisplayName();
    String resType = objXDBResource1.getContentType();
    String linkFolder=&#34;&#34;;
    System.out.println(&#34;resType&#34; + resType+&#34;sumit&#34;);
    System.out.println(&#34;strPathName:&#34; + strPathName);
    System.out.println(&#34;textResDisplayName:&#34; + textResDisplayName);
    if (resType.equals(&#34;<span class="bold">text/xml</span>&#34;)) linkFolder = &#34;<span class="bold">/public/app/XML-TXT/</span>&#34;;
    else if (resType.equals(&#34;<span class="bold">image/gif</span>&#34;)) linkFolder = &#34;<span class="bold">/public/app/IMG/</span>&#34;;
    else if (resType.equals(&#34;<span class="bold">application/octet-stream</span>&#34;))
            linkFolder = &#34;<span class="bold">/public/app/FOLDER/</span>&#34;;
    System.out.println(&#34;linkFolder:&#34; + linkFolder);
    try
    {
      Connection con1 = connectToDB();
      OraclePreparedStatement stmt=null;
      stmt = (OraclePreparedStatement)con1.prepareStatement(
               &#34;CALL DBMS_XDB_REPOS.<span class="bold">link</span>(?,?,?)&#34;);
      stmt.setString(1,strPathName);
      stmt.setString(2,linkFolder);
      stmt.setString(3,textResDisplayName);
      stmt.execute();
      stmt.close();
      con1.close();
    }
    catch(java.sql.SQLException ej1)
    {
      System.out.println(&#34;ej1:&#34; + ej1.toString());
    }
 
  /* Make sure the link is not in the category folders.
     Then check the target resource&#39;s mime type and create a link
     in the appropriate category folder. */
  }
  public void <span class="bold">handlePreUnlinkIn</span> (XDBRepositoryEvent eventObject)
  {
    XDBPath objXDBPath = null;
    String strPathName=&#34;&#34;;
    objXDBPath = eventObject.getPath();
    strPathName = objXDBPath.getName();
    XDBResource objXDBResource1;
    objXDBResource1 = eventObject.getResource();
    String textResDisplayName = objXDBResource1.getDisplayName();
    String resType = objXDBResource1.getContentType();
    String linkFolder=&#34;&#34;;
    if (resType.equals(&#34;<span class="bold">text/xml</span>&#34;)) linkFolder = &#34;<span class="bold">/public/app/XML-TXT/</span>&#34;;
    else if (resType.equals(&#34;<span class="bold">image/gif</span>&#34;)) linkFolder = &#34;<span class="bold">/public/app/IMG/</span>&#34;;
    else if (resType.equals(&#34;<span class="bold">application/octet-stream</span>&#34;))
            linkFolder = &#34;<span class="bold">/public/app/FOLDER/</span>&#34;;
    try
    {
      Connection con1 = connectToDB();
      OraclePreparedStatement stmt=null;
      stmt = (OraclePreparedStatement)con1.prepareStatement(
               &#34;CALL DBMS_XDB_REPOS.<span class="bold">deleteResource</span>(?)&#34;);
      stmt.setString(1,linkFolder+textResDisplayName);
      stmt.execute();
      stmt.close();
      con1.close();
    }
    catch(java.sql.SQLException ej1)
    {
      System.out.println(&#34;ej1:&#34; + ej1.toString());
    }
  }
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-52AEF536-45B7-40B3-88FF-0B1DD0C56976__BABIHGGH">
<p class="titleinexample">Example 30-5 Invoking Event Handlers</p>
<pre dir="ltr">DECLARE
  ret BOOLEAN;
BEGIN
  ret := DBMS_XDB_REPOS.createResource(&#39;/public/<span class="bold">res-app/res1.xml</span>&#39;,
                                       &#39;&lt;name&gt;TestForEventType-1&lt;/name&gt;&#39;);
END;
/
DECLARE
  b BOOLEAN := FALSE;
  dummy_data CLOB := &#39;AAA&#39;;
BEGIN
  b := DBMS_XDB_REPOS.createResource(&#39;/public/<span class="bold">res-app/res2.gif</span>&#39;, dummy_data);
END;
/
DECLARE
  b BOOLEAN := FALSE;
  dummy_data CLOB := &#39;AAA&#39;;
BEGIN
  b := DBMS_XDB_REPOS.createFolder(&#39;/public/<span class="bold">res-app/res-appfolder1</span>&#39;);
END;
 
SELECT PATH FROM PATH_VIEW WHERE PATH LIKE &#39;/public/<span class="bold">app</span>/%&#39; ORDER BY PATH;
 
PATH
---------------------------------
/public/app/FOLDER
/public/<span class="bold">app/FOLDER/res-appfolder1</span>
/public/app/IMG
/public/<span class="bold">app/IMG/res2.gif</span>
/public/app/XML-TXT
/public/<span class="bold">app/XML-TXT/res1.xml</span>
 
6 rows selected.
 
-- Delete the /res-app resources. The /app resources are deleted also.
EXEC DBMS_XDB_REPOS.deleteResource(&#39;/public/res-app/res2.gif&#39;);
EXEC DBMS_XDB_REPOS.deleteResource(&#39;/public/res-app/res1.xml&#39;);
EXEC DBMS_XDB_REPOS.deleteResource(&#39;/public/res-app/res-appfolder1&#39;);
 
SELECT PATH FROM PATH_VIEW WHERE PATH LIKE &#39;/public/<span class="bold">app</span>/%&#39; ORDER BY PATH;
 
PATH
-------------------
/public/app/FOLDER
/public/app/IMG
/public/app/XML-TXT
 
3 rows selected.
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3410">
<tr>
<td class="cellalignment3417">
<table class="cellalignment3415">
<tr>
<td class="cellalignment3414"><a href="xdb_repos_meta.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3414"><a href="xdb_jcr.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3419">
<table class="cellalignment3413">
<tr>
<td class="cellalignment3414"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3414"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3414"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3414"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3414"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>