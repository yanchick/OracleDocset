<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1473"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Deprecated%20Functions%20for%20Updating%20XML%20Data"></a><title>Deprecated Functions for Updating XML Data</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="updating XML data, partial update, definition, partial update of XML data, definition, updateXML SQL function (deprecated), functions, SQL, updateXML (deprecated), updating same node more than once, fidelity, DOM, using SQL function updateXML, fidelity, using SQL functions, optimization, insertChildXML SQL function (deprecated), insertChildXML (deprecated), insertChildXMLbefore SQL function (deprecated), insertChildXMLbefore (deprecated), insertChildXMLafter SQL function (deprecated), insertChildXMLafter (deprecated), insertXMLbefore SQL function (deprecated), insertXMLbefore (deprecated), insertXMLafter SQL function (deprecated), insertXMLafter (deprecated), appendChildXML SQL function (deprecated), appendChildXML (deprecated), deleteXML SQL function (deprecated), deleteXML (deprecated)"/>
<meta name="dcterms.created" content="2016-12-08T13:53:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E41152-15"/>
<meta name="dcterms.isVersionOf" content="ADXDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="appjspec.htm" title="Previous" type="text/html"/>
<link rel="Next" href="app_depr_transl.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41152-15.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-0FC4D071-65A4-4092-AE78-6F707F882E03"></a> <span id="PAGE" style="display:none;">58/61</span> <!-- End Header -->
<a id="ADXDB6044"></a>
<h1 id="ADXDB-GUID-0FC4D071-65A4-4092-AE78-6F707F882E03" class="sect1"><span class="enumeration_chapter">C</span> Deprecated Functions for Updating XML Data</h1>
<div>
<p>Oracle SQL functions for updating XML data that are <span class="italic">deprecated</span> starting with Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.1) are described. Use XQuery Update instead to update XML data (see <a href="xdb_xquery.htm#GUID-4F83A835-C94B-4D62-999B-111AB5E8A8F1" title="The XQuery language is one of the main ways that you interact with XML data in Oracle XML&nbsp;DB. Support for the language includes SQL*Plus commandXQUERY and SQL/XML functions XMLQuery, XMLTable, XMLExists, and XMLCast.">XQuery and Oracle XML&nbsp;DB</a>).</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="app_depr_upd.htm#GUID-8DFBDD92-2FD8-4F30-8B26-6E5FC22090F7" title="The XQuery Update Facility 1.0 Recommendation is supported by Oracle XML&nbsp;DB starting with Oracle Database&nbsp;12c Release 1 (12.1.0.1). Prior to this release, to update XML data your queries necessarily used Oracle-specific SQL functions: appendChildXML, deleteXML, insertChildXML, insertchildXMLafter, insertChildXMLbefore, insertXMLafter, insertXMLbefore, and updateXML.">Migration from Oracle Functions for Updating XML Data to XQuery Update</a></p>
</li>
<li>
<p><a href="app_depr_upd.htm#GUID-65A5282B-487A-4389-9C42-2F34FA80E0D6" title="Prior to their deprecation, you used the following Oracle SQL functions to update XML data incrementally&thinsp;&mdash;&thinsp;that is, to replace, insert, or delete XML data without replacing the entire surrounding XML document. This is also called partial updating.">Deprecated Oracle SQL Functions for Updating XML Data</a></p>
</li>
<li>
<p><a href="app_depr_upd.htm#GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E" title="Deprecated Oracle SQL function updateXML replaces XML nodes of any kind. The XML document that is the target of the update can be schema-based or non-schema-based.">UPDATEXML Deprecated Oracle SQL Function</a></p>
</li>
<li>
<p><a href="app_depr_upd.htm#GUID-505550EB-A598-40F4-BB73-12837E3D887C" title="In most cases, the deprecated Oracle SQL functions that modify XML data materialize a copy of the entire input XML document in memory, then update the copy. However, functions updateXML, insertChildXML, insertChildXMLbefore, insertChildXMLafter, and deleteXML &mdash; that is, all except insertXMLbefore, insertXMLafter, and appendChildXML &mdash; are optimized for XMLType UPDATE operations.">Optimization of Deprecated Oracle SQL Functions that Modify XML Data</a></p>
</li>
<li>
<p><a href="app_depr_upd.htm#GUID-646CDBD2-A1DC-4FC3-BF87-7E5D47B28005" title="You can use the deprecated Oracle SQL functions that modify XML data (updateXML, insertChildXML, insertChildXMLbefore, insertChildXMLafter, insertXMLbefore, insertXMLafter, appendChildXML, and deleteXML) to create new views of XML data.">Creating XML Views Using Deprecated Oracle SQL Functions that Modify XML Data</a></p>
</li>
<li>
<p><a href="app_depr_upd.htm#GUID-23A699A3-B5F1-4BB1-A6FC-2D079398F8DD" title="Deprecated Oracle SQL function insertChildXML inserts new children (one or more elements of the same type or a single attribute) under parent XML elements. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">INSERTCHILDXML Deprecated Oracle SQL Function</a></p>
</li>
<li>
<p><a href="app_depr_upd.htm#GUID-B71A91D0-7DE0-4B86-BEBC-CE0080D3A8D7" title="Deprecated Oracle SQL function insertChildXMLbefore inserts one or more collection elements as children of target parent elements. The insertion for each target occurs immediately before a specified existing collection element. The existing XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">INSERTCHILDXMLBEFORE Deprecated Oracle SQL Function</a></p>
</li>
<li>
<p><a href="app_depr_upd.htm#GUID-38E1764C-91A1-448A-A485-B01A2172CACD" title="Deprecated Oracle SQL function insertChildXMLafter inserts one or more collection elements as children of target parent elements. The insertion for each target occurs immediately after a specified existing collection element. The existing XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">INSERTCHILDXMLAFTER Deprecated Oracle SQL Function</a></p>
</li>
<li>
<p><a href="app_depr_upd.htm#GUID-9C56911D-B8B9-4C3D-A90F-F471C5DB3C8F" title="Deprecated Oracle SQL function insertXMLbefore inserts one or more nodes of any kind immediately before a target node that is not an attribute node. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">INSERTXMLBEFORE Deprecated Oracle SQL Function</a></p>
</li>
<li>
<p><a href="app_depr_upd.htm#GUID-A9632F5C-6BB3-4AF6-B01E-92C4FD562C3B" title="Deprecated Oracle SQL function insertXMLafter inserts one or more nodes of any kind immediately after a target node that is not an attribute node. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">INSERTXMLAFTER Deprecated Oracle SQL Function</a></p>
</li>
<li>
<p><a href="app_depr_upd.htm#GUID-7F8F13A6-493A-4831-B698-0FCC07508222" title="Deprecated Oracle SQL function appendChildXML inserts one or more nodes of any kind as the last children of a given element node. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">APPENDCHILDXML Deprecated Oracle SQL Function</a></p>
</li>
<li>
<p><a href="app_depr_upd.htm#GUID-4E781DD7-B60E-49A5-8238-9E7CD207238B" title="Deprecated Oracle SQL function deleteXML deletes XML nodes of any kind. The XML document that is the target of the deletion can be XML Schema-based or non-schema-based.">DELETEXML Deprecated Oracle SQL Function</a></p>
</li>
</ul>
</div>
<a id="ADXDB6160"></a><a id="ADXDB6159"></a>
<div class="props_rev_3"><a id="GUID-8DFBDD92-2FD8-4F30-8B26-6E5FC22090F7"></a>
<h2 id="ADXDB-GUID-8DFBDD92-2FD8-4F30-8B26-6E5FC22090F7" class="sect2"><span class="enumeration_section">C.1</span> Migration from Oracle Functions for Updating XML Data to XQuery Update</h2>
<div>
<p>The XQuery Update Facility 1.0 Recommendation is supported by Oracle XML&nbsp;DB starting with Oracle Database&nbsp;12c Release 1 (12.1.0.1). Prior to this release, to update XML data your queries necessarily used Oracle-specific SQL functions: <code>appendChildXML</code>, <code>deleteXML</code>, <code>insertChildXML</code>, <code>insertchildXMLafter</code>, <code>insertChildXMLbefore</code>, <code>insertXMLafter</code>, <code>insertXMLbefore</code>, and <code>updateXML</code>.</p>
<p>These functions are covered in detail in the other sections of this appendix.</p>
<p>If you have legacy code that uses these functions, Oracle recommends that you migrate that code to use XQuery Update. This section provides information about which XQuery Update constructs you can use to replace the use of the Oracle-specific XML updating functions in queries.</p>
<p><a href="app_depr_upd.htm#GUID-8DFBDD92-2FD8-4F30-8B26-6E5FC22090F7__CIHEAEBF" title="Migrating Oracle-Specific XML Updating Queries to XQuery Update">Table C-1</a> provides a mapping from typical queries that use Oracle-specific updating SQL functions to queries that use XQuery Update.</p>
<p>Note that there is no Oracle-specific equivalent for the XQuery Update constructs <code>rename</code> and <code>insert as first into</code>.</p>
<p>Note too that if the target XPath expression matches more than one node then the Oracle updating functions act on <span class="italic">all</span> such nodes, whereas the XQuery Update functions raise an error in this case. To act on multiple nodes using XQuery Update you need to use explicit iteration (that is, a <code>for</code> expression).</p>
<div class="tblformalwide" id="GUID-8DFBDD92-2FD8-4F30-8B26-6E5FC22090F7__CIHEAEBF">
<p class="titleintable">Table C-1 Migrating Oracle-Specific XML Updating Queries to XQuery Update</p>
<table class="cellalignment3431" title="Migrating Oracle-Specific XML Updating Queries to XQuery Update" summary="Migrating Oracle-Specific XML Updating Queries to XQuery Update">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3425" id="d186203e341">Original Expression</th>
<th class="cellalignment3425" id="d186203e344">Replacement Expression</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e349" headers="d186203e341">
<pre dir="ltr">-- Insert a node as the last child of a node.
UPDATE warehouses SET warehouse_spec =
  <span class="bold">appendChildXML</span>(
    warehouse_spec,
    &#39;/Warehouse/Parking&#39;,
    XMLType(&#39;&lt;Spaces&gt;250&lt;/Spaces&gt;&#39;));
</pre></td>
<td class="cellalignment3426" headers="d186203e349 d186203e344">
<pre dir="ltr">-- Insert a node as the last child of a node.
UPDATE warehouses SET warehouse_spec =
  XMLQuery(&#39;copy $tmp := . modify <span class="bold">insert</span> node 
            &lt;Spaces&gt;250&lt;/Spaces&gt;
            <span class="bold">as last</span> into $tmp/Warehouse/Parking
            return $tmp&#39;
           PASSING warehouse_spec RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e365" headers="d186203e341">
<pre dir="ltr">-- Delete a node.
UPDATE warehouses SET warehouse_spec =
  <span class="bold">deleteXML</span>(value(po), &#39;/Warehouse/VClearance&#39;);
</pre></td>
<td class="cellalignment3426" headers="d186203e365 d186203e344">
<pre dir="ltr">-- Delete a node.
UPDATE warehouses SET warehouse_spec =
  XMLQuery(&#39;copy $tmp := . modify <span class="bold">delete</span> node
            $tmp/Warehouse/VClearance return $tmp&#39;
           PASSING warehouse_spec RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e378" headers="d186203e341">
<pre dir="ltr">-- Insert a node as a child of a node.
UPDATE warehouses SET warehouse_spec =
  <span class="bold">insertChildXML</span>(
    warehouse_spec,
    &#39;/Warehouse/Parking&#39;,
    &#39;Spaces&#39;,
    XMLType(&#39;&lt;Spaces&gt;300&lt;/Spaces&gt;&#39;);
</pre></td>
<td class="cellalignment3426" headers="d186203e378 d186203e344">
<pre dir="ltr">-- Insert a node as a child of a node.
UPDATE warehouses SET warehouse_spec =
  XMLQuery(&#39;copy $tmp := . modify <span class="bold">insert</span> node
            &lt;Spaces&gt;300&lt;/Spaces&gt;
            <span class="bold">into</span> $tmp/Warehouse/Parking
            return $tmp&#39;
           PASSING warehouse_spec RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e394" headers="d186203e341">
<pre dir="ltr">-- Insert a node before a node.
UPDATE warehouses SET warehouse_spec = 
  <span class="bold">insertXMLbefore</span>(
    warehouse_spec, 
    &#39;/Warehouse/RailAccess&#39;, 
    XMLType(&#39;&lt;SkyAccess&gt;N&lt;/SkyAccess&gt;&#39;);
</pre></td>
<td class="cellalignment3426" headers="d186203e394 d186203e344">
<pre dir="ltr">-- Insert a node before a node.
UPDATE warehouses SET warehouse_spec =
  XMLQuery(&#39;copy $tmp := . modify <span class="bold">insert</span> node
            &lt;SkyAccess&gt;N&lt;/SkyAccess&gt;
            <span class="bold">before</span> $tmp/Warehouse/RailAccess 
            return $tmp&#39;
           PASSING warehouse_spec RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e410" headers="d186203e341">
<pre dir="ltr">-- Insert a node after a node.
UPDATE warehouses SET warehouse_spec = 
  <span class="bold">insertXMLafter</span>(
    warehouse_spec,
    &#39;/Warehouse/RailAccess&#39;, 
    XMLType(&#39;&lt;SkyAccess&gt;N&lt;/SkyAccess&gt;&#39;);
</pre></td>
<td class="cellalignment3426" headers="d186203e410 d186203e344">
<pre dir="ltr">-- Insert a node after a node.
UPDATE warehouses SET warehouse_spec =
  XMLQuery(&#39;copy $tmp := . modify <span class="bold">insert</span> node 
            &lt;SkyAccess&gt;N&lt;/SkyAccess&gt;
            <span class="bold">after</span> $tmp/Warehouse/RailAccess 
            return $tmp&#39;
           PASSING warehouse_spec RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e426" headers="d186203e341">
<pre dir="ltr">-- Replace the text value of a set of nodes.
-- (Assumes a collection of &lt;Building&gt; nodes.)
UPDATE warehouses SET warehouse_spec = 
  <span class="bold">updateXML</span>(warehouse_spec,  
            &#39;/Warehouse/Building/text()&#39;,
            &#39;Owned&#39;);
</pre></td>
<td class="cellalignment3426" headers="d186203e426 d186203e344">
<pre dir="ltr">-- Replace the text value of a set of nodes.
-- (Assumes a collection of &lt;Building&gt; nodes.)
UPDATE warehouses SET warehouse_spec =
  XMLQuery(&#39;copy $tmp := . modify
            (for $i in $tmp/Warehouse/Building/text()  
             return <span class="bold">replace value of</span> node $i
                    <span class="bold">with</span> &#39;&#39;Owned&#39;&#39;) 
            return $tmp&#39;
           PASSING warehouse_spec RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e442" headers="d186203e341">
<pre dir="ltr">-- Insert a child under each node in a collection.
-- (Assumes a collection of &lt;Building&gt; nodes.)
UPDATE warehouses SET warehouse_spec = 
  <span class="bold">insertChildXML</span>(
    warehouse_spec, 
    &#39;/Warehouse/Building&#39;,
    &#39;Owner&#39;, 
    XMLType(&#39;&lt;Owner&gt;LesserCo&lt;/Owner&gt;&#39;));
</pre></td>
<td class="cellalignment3426" headers="d186203e442 d186203e344">
<pre dir="ltr">-- Insert a child under each node in a collection.
-- (Assumes a collection of &lt;Building&gt; nodes.)
UPDATE warehouses SET warehouse_spec =
  XMLQuery(&#39;copy $tmp := . modify
            (for $i in $tmp/Warehouse/Building
             return <span class="bold">insert</span> node       
             &lt;Owner&gt;LesserCo&lt;/Owner&gt;
             <span class="bold">into</span> $i)
            return $tmp&#39;
           PASSING warehouse_spec RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e458" headers="d186203e341">
<pre dir="ltr">-- Insert as child before the other children.
-- (Assumes a collection of &lt;Owner&gt; nodes.)
UPDATE warehouses SET warehouse_spec = 
  <span class="bold">insertChildXMLbefore</span>(
    warehouse_spec, 
    &#39;/Warehouse/Building[1]&#39;,
    &#39;Owner&#39;, 
    XMLType(&#39;&lt;Owner&gt;LesserCo&lt;/Owner&gt;&#39;));
</pre></td>
<td class="cellalignment3426" headers="d186203e458 d186203e344">
<pre dir="ltr">-- Insert as child before the other children.
-- (Assumes a collection of &lt;Owner&gt; nodes.)
UPDATE warehouses SET warehouse_spec =
  XMLQuery(
    &#39;copy $tmp := . modify
     (for $i in $tmp/Warehouse/Building[1]/Owner
      return <span class="bold">insert</span> node &lt;Owner&gt;LesserCo&lt;/Owner&gt;
             <span class="bold">before</span> $i)
     return $tmp&#39;
    PASSING warehouse_spec RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e474" headers="d186203e341">
<pre dir="ltr">-- Insert as child after the other children.
-- (Assumes a collection of &lt;Owner&gt; nodes.)
UPDATE warehouses SET warehouse_spec =
  <span class="bold">insertChildXMLafter</span>(
    warehouse_spec, 
    &#39;/Warehouse/Building[1]&#39;,
    &#39;Owner&#39;, 
    XMLType(&#39;&lt;Owner&gt;LesserCo&lt;/Owner&gt;&#39;));
</pre></td>
<td class="cellalignment3426" headers="d186203e474 d186203e344">
<pre dir="ltr">-- Insert as child after the other children.
-- (Assumes a collection of &lt;Owner&gt; nodes.)
UPDATE warehouses SET warehouse_spec =
  XMLQuery(
    &#39;copy $tmp := . modify
     (for $i in $tmp/Warehouse/Building[1]/Owner
      return <span class="bold">insert</span> node &lt;Owner&gt;LesserCo&lt;/Owner&gt;
             <span class="bold">after</span> $i)
     return $tmp&#39;
    PASSING warehouse_spec RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e490" headers="d186203e341">
<pre dir="ltr">-- Delete a node.
UPDATE warehouses SET warehouse_spec = 
  <span class="bold">updateXML</span>(warehouse_spec,
            &#39;/Warehouse/Docks&#39;,
            <span class="bold">NULL</span>);
</pre></td>
<td class="cellalignment3426" headers="d186203e490 d186203e344">
<pre dir="ltr">-- Delete a node.
UPDATE warehouses SET warehouse_spec =
  XMLQuery(&#39;copy $tmp := . modify <span class="bold">delete node</span> 
            $tmp/Warehouse/Docks return $tmp&#39;
           PASSING warehouse_spec RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e506" headers="d186203e341">
<pre dir="ltr">-- Replace with an empty node.
UPDATE warehouses SET warehouse_spec = 
  <span class="bold">updateXML</span>(warehouse_spec, &#39;/Warehouse/Docks&#39;, <span class="bold">&#39;&#39;</span> );
</pre></td>
<td class="cellalignment3426" headers="d186203e506 d186203e344">
<pre dir="ltr">-- Replace with an empty node.
UPDATE warehouses SET warehouse_spec =
  XMLQuery(&#39;copy $tmp := $p1 modify
            (for $j in $tmp/Warehouse/Docks
             return <span class="bold">replace node</span> $j with $p2)
            return $tmp&#39;
           PASSING warehouse_spec &#34;p1&#34;, <span class="bold">&#39;&#39;</span> AS &#34;p2&#34; 
           RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3426" id="d186203e526" headers="d186203e341">
<pre dir="ltr">-- Update multiple paths.
UPDATE warehouses SET warehouse_spec = 
  <span class="bold">updateXML</span>(warehouse_spec,  
            &#39;/Warehouse/Docks/text()&#39;, &#39;4&#39;,
            &#39;/Warehouse/Area/text()&#39;, &#39;3500&#39;);
</pre></td>
<td class="cellalignment3426" headers="d186203e526 d186203e344">
<pre dir="ltr">-- Update multiple paths.
UPDATE warehouses SET warehouse_spec =
  XMLQuery(
    &#39;copy $tmp := . modify
     ((for $i in $tmp/Warehouse/Docks/text()  
       return <span class="bold">replace value of</span> node $i with 4),
      (for $i in $tmp/Warehouse/Area/text()  
       return <span class="bold">replace value of</span> node $i with 3500))
     return $tmp&#39;
    PASSING warehouse_spec RETURNING CONTENT)
  WHERE warehouse_spec IS NOT NULL;
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="ADXDB6045"></a>
<div class="props_rev_3"><a id="GUID-65A5282B-487A-4389-9C42-2F34FA80E0D6"></a>
<h2 id="ADXDB-GUID-65A5282B-487A-4389-9C42-2F34FA80E0D6" class="sect2"><span class="enumeration_section">C.2</span> Deprecated Oracle SQL Functions for Updating XML Data</h2>
<div>
<p>Prior to their deprecation, you used the following Oracle SQL functions to update XML data incrementally&thinsp;&mdash;&thinsp;that is, to replace, insert, or delete XML data without replacing the entire surrounding XML document. This is also called <strong class="term">partial updating</strong>.</p>
<ul style="list-style-type: disc;">
<li>
<p><code>updateXML</code> &ndash; Replace XML nodes of any kind. See <span class="q">&#34;<a href="app_depr_upd.htm#GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E" title="Deprecated Oracle SQL function updateXML replaces XML nodes of any kind. The XML document that is the target of the update can be schema-based or non-schema-based.">UPDATEXML Deprecated Oracle SQL Function</a>&#34;</span>.</p>
</li>
<li>
<p><code>insertChildXML</code> &ndash; Insert XML element or attribute nodes as children of a given element node. See <span class="q">&#34;<a href="app_depr_upd.htm#GUID-23A699A3-B5F1-4BB1-A6FC-2D079398F8DD" title="Deprecated Oracle SQL function insertChildXML inserts new children (one or more elements of the same type or a single attribute) under parent XML elements. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">INSERTCHILDXML Deprecated Oracle SQL Function</a>&#34;</span>.</p>
</li>
<li>
<p><code>insertChildXMLbefore</code> &ndash; Insert new collection elements immediately before a given collection element of the same type. See <span class="q">&#34;<a href="app_depr_upd.htm#GUID-B71A91D0-7DE0-4B86-BEBC-CE0080D3A8D7" title="Deprecated Oracle SQL function insertChildXMLbefore inserts one or more collection elements as children of target parent elements. The insertion for each target occurs immediately before a specified existing collection element. The existing XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">INSERTCHILDXMLBEFORE Deprecated Oracle SQL Function</a>&#34;</span>.</p>
</li>
<li>
<p><code>insertChildXMLafter</code> &ndash; Insert new collection elements immediately after a given collection element of the same type. See <span class="q">&#34;<a href="app_depr_upd.htm#GUID-38E1764C-91A1-448A-A485-B01A2172CACD" title="Deprecated Oracle SQL function insertChildXMLafter inserts one or more collection elements as children of target parent elements. The insertion for each target occurs immediately after a specified existing collection element. The existing XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">INSERTCHILDXMLAFTER Deprecated Oracle SQL Function</a>&#34;</span>.</p>
</li>
<li>
<p><code>insertXMLbefore</code> &ndash; Insert XML nodes of any kind immediately before a given node (other than an attribute node). See <span class="q">&#34;<a href="app_depr_upd.htm#GUID-9C56911D-B8B9-4C3D-A90F-F471C5DB3C8F" title="Deprecated Oracle SQL function insertXMLbefore inserts one or more nodes of any kind immediately before a target node that is not an attribute node. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">INSERTXMLBEFORE Deprecated Oracle SQL Function</a>&#34;</span>.</p>
</li>
<li>
<p><code>insertXMLafter</code> &ndash; Insert XML nodes of any kind immediately after a given node (other than an attribute node). See <span class="q">&#34;<a href="app_depr_upd.htm#GUID-A9632F5C-6BB3-4AF6-B01E-92C4FD562C3B" title="Deprecated Oracle SQL function insertXMLafter inserts one or more nodes of any kind immediately after a target node that is not an attribute node. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">INSERTXMLAFTER Deprecated Oracle SQL Function</a>&#34;</span>.</p>
</li>
<li>
<p><code>appendChildXML</code> &ndash; Insert XML nodes of any kind as the last child nodes of a given element node. See <span class="q">&#34;<a href="app_depr_upd.htm#GUID-7F8F13A6-493A-4831-B698-0FCC07508222" title="Deprecated Oracle SQL function appendChildXML inserts one or more nodes of any kind as the last children of a given element node. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.">APPENDCHILDXML Deprecated Oracle SQL Function</a>&#34;</span>.</p>
</li>
<li>
<p><code>deleteXML</code> &ndash; Delete XML nodes of any kind. See <span class="q">&#34;<a href="app_depr_upd.htm#GUID-4E781DD7-B60E-49A5-8238-9E7CD207238B" title="Deprecated Oracle SQL function deleteXML deletes XML nodes of any kind. The XML document that is the target of the deletion can be XML Schema-based or non-schema-based.">DELETEXML Deprecated Oracle SQL Function</a>&#34;</span>.</p>
</li>
</ul>
<p>Functions <code>insertChildXML</code>, <code>insertChildXMLbefore</code>, <code>insertChildXMLafter</code>, <code>insertXMLbefore</code>, <code>insertXMLafter</code>, and <code>appendChildXML</code> are for inserting XML data. Function <code>deleteXML</code> deletes XML data. Function <code>updateXML</code> replaces XML data.</p>
<p>In particular, do <span class="italic">not</span> use function <code>updateXML</code> to insert or delete XML data by replacing a parent node in its entirety. That works, but it is less efficient than using one of the other functions, which perform more localized updates.</p>
<p>These Oracle SQL functions do <span class="italic">not</span>, by themselves, change database data &ndash; they are all pure functions, without side effect. Each applies an XPath-expression argument to input XML data and returns a modified <span class="italic">copy</span> of the input XML data. You can then use that result with SQL DML operator <code>UPDATE</code> to modify database data. This is no different from the way you use SQL function <code>upper</code> to convert database data to uppercase: you must use a SQL DML operator such as <code>UPDATE</code> to change the stored data.</p>
<p>Each of these functions can be used on XML documents that are either schema-based or non-schema-based. For XML schema-based data, these Oracle SQL functions perform partial validation on the result, and, where appropriate, argument values are also checked for compatibility with the XML schema.</p>
<div class="infobox-note" id="GUID-65A5282B-487A-4389-9C42-2F34FA80E0D6__GUID-981A69CD-9FFB-4BAA-A952-184F0254D064">
<p class="notep1">Note:</p>
<p>Oracle SQL functions and <code>XMLType</code> methods respect the W3C XPath recommendation, which states that if an XPath expression targets <span class="italic">no nodes</span> when applied to XML data, then an empty sequence must be returned. An error must <span class="italic">not</span> be raised in this case.</p>
<p>The specific semantics of an Oracle SQL function or <code>XMLType</code> method that applies an XPath expression to XML data determines what is returned. For example, SQL/XML function <code>XMLQuery</code> returns <code>NULL</code> if its XPath-expression argument targets no nodes, and the deprecated updating Oracle SQL functions, such as <code>deleteXML</code>, return the input XML data unchanged. An error is never raised if no nodes are targeted, but the deprecated updating Oracle SQL functions can raise an error if an XPath-expression argument targets inappropriate nodes, such as attribute nodes or text nodes.</p>
</div>
<div class="infoboxnotealso" id="GUID-65A5282B-487A-4389-9C42-2F34FA80E0D6__GUID-9BF52C00-03C8-4977-8EDF-1E0E98DCC089">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb08tra.htm#GUID-BEF51F7F-33A8-4FED-AA21-FE8849821BEC" title="When you insert XML Schema-based documents into the database they can be validated partially or fully.">Partial and Full XML Schema Validation</a>&#34;</span> for more information about partial validation against an XML schema</p>
</div>
</div>
<a id="ADXDB6046"></a>
<div class="props_rev_3"><a id="GUID-5AFD9F2B-9107-474F-99E6-CBBA0307D92D"></a>
<h3 id="ADXDB-GUID-5AFD9F2B-9107-474F-99E6-CBBA0307D92D" class="sect3"><span class="enumeration_section">C.2.1</span> Insertion of XML Elements Using Deprecated Oracle SQL Functions</h3>
<div>
<p>There are several deprecated Oracle SQL functions for inserting XML nodes into (a copy of) existing XML data. Each can insert nodes at multiple locations that are referenced by an XPath expression. They differ in the placement of the new nodes and how the target XML data is referenced.</p>
<ul style="list-style-type: disc;">
<li>
<p>Function <code>appendChildXML</code> appends nodes to the target elements. That is, for each target element, it inserts one or more nodes of any kind as the element&#39;s last children.</p>
</li>
<li>
<p>Function <code>insertChildXML</code> inserts new children (one or more elements of the same type or a single attribute) under target elements. The position of a new child element under its parent is not specified. If the target data is XML schema-based, then the schema can sometimes be used to determine the position. Otherwise, the position is arbitrary.</p>
</li>
<li>
<p>Function <code>insertXMLbefore</code> inserts one or more nodes of <span class="italic">any kind</span> immediately before a target node (which is not an attribute node).</p>
<p>Function <code>insertXMLafter</code> inserts a node similarly, but after the target, not before.</p>
</li>
<li>
<p>Function <code>insertChildXMLbefore</code> is similar to <code>insertChildXML</code>, except that the inserted node must be an element (not an attribute), and you specify the position of the new element among its siblings. It is similar to <code>insertXMLbefore</code>, except that it inserts only <span class="italic">collection</span> elements, not arbitrary elements. The insertion position specifies a successor collection member. The actual element to be inserted must correspond to the element type for the collection.</p>
<p>Function <code>insertChildXMLafter</code> inserts a node similarly, but after the target, not before.</p>
</li>
</ul>
<p>Though the effect of <code>insertChildXMLbefore</code> (-<code>after</code>) is similar to that of <code>insertXMLbefore</code> (-<code>after</code>), the target location is expressed differently. For the former, the target is the parent of the new child. For the latter, the target is the succeeding (or preceding) sibling. This difference is reflected in the function names (<code>Child</code>).</p>
<p>For example, to insert a new <code>LineItem</code> element before the third <code>LineItem</code> element under element <code>/PurchaseOrder/LineItems</code>, you can use <code>insertChildXMLbefore</code>, specifying the target parent as <code>/PurchaseOrder/LineItems</code> and the succeeding sibling as <code>LineItem[3]</code>. Or you can use <code>insertXMLbefore</code>, specifying the target succeeding sibling as <code>/PurchaseOrder/LineItems/LineItem[3]</code>. If you use <code>insertChildXML</code> for the insertion, then you cannot specify the position of the new element in the collection&thinsp;&mdash;&thinsp;the resulting position is indeterminate.</p>
<p>Another difference among these functions is that all of them <span class="italic">except</span> <code>insertXMLbefore</code>, <code>insertXMLafter</code>, and <code>appendChildXML</code>&thinsp;&mdash;are optimized for SQL <code>UPDATE</code> operations on <code>XMLType</code> tables and columns that are stored object-relationally or as binary XML.</p>
<div class="infoboxnotealso" id="GUID-5AFD9F2B-9107-474F-99E6-CBBA0307D92D__GUID-E1BDC3D0-42E4-4B82-A3C4-FF52832D588F">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="app_depr_upd.htm#GUID-505550EB-A598-40F4-BB73-12837E3D887C" title="In most cases, the deprecated Oracle SQL functions that modify XML data materialize a copy of the entire input XML document in memory, then update the copy. However, functions updateXML, insertChildXML, insertChildXMLbefore, insertChildXMLafter, and deleteXML &mdash; that is, all except insertXMLbefore, insertXMLafter, and appendChildXML &mdash; are optimized for XMLType UPDATE operations.">Optimization of Deprecated Oracle SQL Functions that Modify XML Data</a>&#34;</span></p>
</div>
</div>
</div>
</div>
<a id="ADXDB6048"></a><a id="ADXDB6049"></a><a id="ADXDB6050"></a><a id="ADXDB6051"></a><a id="ADXDB6047"></a>
<div class="props_rev_3"><a id="GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E"></a>
<h2 id="ADXDB-GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E" class="sect2"><span class="enumeration_section">C.3</span> UPDATEXML Deprecated Oracle SQL Function</h2>
<div>
<p>Deprecated Oracle SQL function <code>updateXML</code> replaces XML nodes of any kind. The XML document that is the target of the update can be schema-based or non-schema-based.</p>
<p>A <span class="italic">copy</span> of the input <code>XMLType</code> instance is modified and returned. The original data is unaffected. You can then use the returned data with SQL operation <code>UPDATE</code> to modify database data.</p>
<p>Function <code>updateXML</code> has the following parameters (in order):</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><span class="bold"><code>target-data</code></span></span> (<code>XMLType</code>) &ndash; The XML data containing the target node to replace.</p>
</li>
<li>
<p>One or more <span class="italic">pairs</span> of <span class="italic"><code>xpath</code></span> and <span class="italic"><code>replacement</code></span> parameters:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><span class="bold"><code>xpath</code></span></span> (<code>VARCHAR2</code>) &ndash; An XPath&nbsp;1.0 expression that locates the nodes within <span class="italic"><code>target-data</code></span> to replace. <span class="italic">Each</span> targeted node is replaced by <span class="italic"><code>replacement</code></span>. These can be nodes of any kind. If <span class="italic"><code>xpath</code></span> matches an empty sequence of nodes then no replacement is done, and <span class="italic"><code>target-data</code></span> is returned unchanged (and no error is raised).</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>replacement</code></span></span> (<code>XMLType</code> or <code>VARCHAR2</code>) &ndash; The XML data that replaces the data targeted by <span class="italic"><code>xpath</code></span>. The data type of <span class="italic"><code>replacement</code></span> must correspond to the data to be replaced. If <span class="italic"><code>xpath</code></span> targets an element node for replacement, then the data type must be <code>XMLType</code>. If <span class="italic"><code>xpath</code></span> targets an attribute node or a text node, then it must be <code>VARCHAR2</code>. For an attribute node, <span class="italic"><code>replacement</code></span> is only the replacement <span class="italic">value</span> of the attribute (for example, 23), not the complete attribute node including the name (for example, <code>my_attribute=&#34;23&#34;</code>).</p>
</li>
</ul>
</li>
<li>
<p><span class="italic"><span class="bold"><code>namespace</code></span></span> (<code>VARCHAR2</code>, <span class="italic">optional</span>) &ndash; The XML namespace for parameter <span class="italic"><code>xpath</code></span>.</p>
</li>
</ul>
<p>Deprecated Oracle SQL function <code>updateXML</code> can be used to <span class="italic">replace</span> existing elements, attributes, and other nodes with new values. It is <span class="italic">not</span> an efficient way to insert new nodes or delete existing ones. You can perform insertions and deletions with <code>updateXML</code> only by using it to replace the entire node that is the parent of the node to be inserted or deleted.</p>
<p>Function <code>updateXML</code> updates only the transient XML instance in memory. Use a SQL <code>UPDATE</code> statement to update data stored in tables.</p>
<p><a href="app_depr_upd.htm#GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E__BABEGCHA">Figure C-1</a> illustrates the syntax.</p>
<div class="figure" id="GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E__BABEGCHA">
<p class="titleinfigure">Figure C-1 UPDATEXML Syntax</p>
<img width="754" height="58" src="img/GUID-02BB031F-7FE0-4245-91D3-D1EF94C22657-default.gif" alt="Description of Figure C-1 follows" title="Description of Figure C-1 follows"/><br/>
<a href="img_text/GUID-02BB031F-7FE0-4245-91D3-D1EF94C22657-print.htm">Description of &#34;Figure C-1 UPDATEXML Syntax&#34;</a></div>
<!-- class="figure" -->
<p><a href="app_depr_upd.htm#GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E__BABIHDJF">Example C-1</a> uses <code>updateXML</code> on the right side of an <code>UPDATE</code> statement to update the XML document in a table instead of creating a new document. The entire document is updated, not just the part that is selected.</p>
<p><a href="app_depr_upd.htm#GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E__BABFIJJB">Example C-2</a> updates multiple nodes using Oracle SQL function <code>updateXML</code>.</p>
<p><a href="app_depr_upd.htm#GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E__BABJBEAG">Example C-3</a> uses SQL function <code>updateXML</code> to update selected nodes within a collection.</p>
<div class="example" id="GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E__BABIHDJF">
<p class="titleinexample">Example C-1 Updating XMLTYPE Using UPDATE and UPDATEXML (Deprecated)</p>
<pre dir="ltr">SELECT XMLQuery(&#39;$p/PurchaseOrder/Actions/Action[1]&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34;
                                                     RETURNING CONTENT) action
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
ACTION
--------------------------------
&lt;Action&gt;
  &lt;User&gt;SVOLLMAN&lt;/User&gt;
&lt;/Action&gt;

UPDATE purchaseorder po
  SET po.OBJECT_VALUE = <span class="bold">updateXML</span>(po.OBJECT_VALUE, 
                                  &#39;/PurchaseOrder/Actions/Action[1]/User/text()&#39;,
                                  &#39;<span class="bold">SKING</span>&#39;)
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
SELECT XMLQuery(&#39;$p/PurchaseOrder/Actions/Action[1]&#39; PASSING po.OBJECT_VALUE AS &#34;p&#34;
                                                     RETURNING CONTENT) action
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
ACTION
---------------------------------
&lt;Action&gt;
  &lt;User&gt;<span class="bold">SKING</span>&lt;/User&gt;
&lt;/Action&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E__BABFIJJB">
<p class="titleinexample">Example C-2 Updating Multiple Text Nodes and Attribute Values Using UPDATEXML (Deprecated)</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- ------------------------------------------------------------------------
Sarah J. Bell    &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     &lt;Description&gt;A Night to Remember&lt;/Description&gt;
                     &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;2&#34;&gt;
                     &lt;Description&gt;The Unbearable Lightness Of Being&lt;/Description&gt;
                     &lt;Part Id=&#34;37429140222&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;3&#34;&gt;
                     &lt;Description&gt;Sisters&lt;/Description&gt;
                     &lt;Part Id=&#34;715515011020&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;4&#34;/&gt;
                   &lt;/LineItem&gt;
                 &lt;/LineItems&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE = updateXML(OBJECT_VALUE,
                               &#39;/PurchaseOrder/Requestor/text()&#39;,&#39;Stephen G. King&#39;,
                               &#39;/PurchaseOrder/LineItems/LineItem[1]/Part/@Id&#39;,&#39;786936150421&#39;,
                               &#39;/PurchaseOrder/LineItems/LineItem[1]/Description/text()&#39;,&#39;The Rock&#39;,
                               &#39;/PurchaseOrder/LineItems/LineItem[3]&#39;,
                               XMLType(&#39;&lt;LineItem ItemNumber=&#34;99&#34;&gt;
                                          &lt;Description&gt;Dead Ringers&lt;/Description&gt;
                                          &lt;Part Id=&#34;715515009249&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
                                        &lt;/LineItem&gt;&#39;))
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- ------------------------------------------------------------------
Stephen G. King  &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     &lt;Description&gt;The Rock&lt;/Description&gt;
                     &lt;Part Id=&#34;786936150421&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;2&#34;&gt;
                     &lt;Description&gt;The Unbearable Lightness Of Being&lt;/Description&gt;
                     &lt;Part Id=&#34;37429140222&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;99&#34;&gt;
                     &lt;Description&gt;Dead Ringers&lt;/Description&gt;
                     &lt;Part Id=&#34;715515009249&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                 &lt;/LineItems&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-EFE0A8A0-7B0A-4F77-B70D-A2DABFC0BB9E__BABJBEAG">
<p class="titleinexample">Example C-3 Updating Selected Nodes within a Collection Using UPDATEXML (Deprecated)</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- ----------------------------------------------------------------
Sarah J. Bell    &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     &lt;Description&gt;A Night to Remember&lt;/Description&gt;
                     &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;2&#34;&gt;
                     &lt;Description&gt;The Unbearable Lightness Of Being&lt;/Description&gt;
                     &lt;Part Id=&#34;37429140222&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;3&#34;&gt;
                     &lt;Description&gt;Sisters&lt;/Description&gt;
                     &lt;Part Id=&#34;715515011020&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;4&#34;/&gt;
                   &lt;/LineItem&gt;
                 &lt;/LineItems&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE = 
      updateXML(OBJECT_VALUE,
                &#39;/PurchaseOrder/Requestor/text()&#39;,&#39;Stephen G. King&#39;,
                &#39;/PurchaseOrder/LineItems/LineItem/Part[@Id=&#34;715515009058&#34;]/@Quantity&#39;,
                25,
                &#39;/PurchaseOrder/LineItems/LineItem[Description/text() =
                                                   &#34;The Unbearable Lightness Of Being&#34;]&#39;,
                XMLType(&#39;&lt;LineItem ItemNumber=&#34;99&#34;&gt;
                           &lt;Part Id=&#34;786936150421&#34; Quantity=&#34;5&#34; UnitPrice=&#34;29.95&#34;/&gt;
                           &lt;Description&gt;The Rock&lt;/Description&gt;
                         &lt;/LineItem&gt;&#39;))
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- -------------------------------------------------------------
Stephen G. King  &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     &lt;Description&gt;A Night to Remember&lt;/Description&gt;
                     &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;25&#34;/&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;99&#34;&gt;
                     &lt;Part Id=&#34;786936150421&#34; Quantity=&#34;5&#34; UnitPrice=&#34;29.95&#34;/&gt;
                     &lt;Description&gt;The Rock&lt;/Description&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;3&#34;&gt;
                     &lt;Description&gt;Sisters&lt;/Description&gt;
                     &lt;Part Id=&#34;715515011020&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;4&#34;/&gt;
                   &lt;/LineItem&gt;
                 &lt;/LineItems&gt;
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB6053"></a><a id="ADXDB6054"></a><a id="ADXDB6052"></a>
<div class="props_rev_3"><a id="GUID-5CD0462B-B427-4BA6-9AA9-66A7494F279A"></a>
<h3 id="ADXDB-GUID-5CD0462B-B427-4BA6-9AA9-66A7494F279A" class="sect3"><span class="enumeration_section">C.3.1</span> Deprecated Oracle SQL Function UPDATEXML and NULL Values</h3>
<div>
<p>Several considerations apply to using deprecated Oracle SQL function <code>updateXML</code> with <code>NULL</code> values.</p>
<ul style="list-style-type: disc;">
<li>
<p>If you update an XML <span class="italic">element</span> to <code>NULL</code>, the attributes and children of the element are removed, and the element becomes empty. The type and namespace properties of the element are retained. See <a href="app_depr_upd.htm#GUID-5CD0462B-B427-4BA6-9AA9-66A7494F279A__BABJCJHA">Example C-4</a>.</p>
</li>
<li>
<p>If you update an <span class="italic">attribute</span> value to <code>NULL</code>, the value appears as the empty string. See <a href="app_depr_upd.htm#GUID-5CD0462B-B427-4BA6-9AA9-66A7494F279A__BABJCJHA">Example C-4</a>.</p>
</li>
<li>
<p>If you update the <span class="italic">text</span> node of an element to <code>NULL</code>, the content (text) of the element is removed. The element itself remains, but it is empty. See <a href="app_depr_upd.htm#GUID-5CD0462B-B427-4BA6-9AA9-66A7494F279A__BABEBCFG">Example C-5</a>.</p>
</li>
</ul>
<p><a href="app_depr_upd.htm#GUID-5CD0462B-B427-4BA6-9AA9-66A7494F279A__BABJCJHA">Example C-4</a> updates all of the following to <code>NULL</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code>Description</code> element and the <code>Quantity</code> attribute of the <code>LineItem</code> element whose <code>Part</code> element has attribute <code>Id</code> value 715515009058.</p>
</li>
<li>
<p>The <code>LineItem</code> element whose <code>Description</code> element has the content (text) &#34;The Unbearable Lightness Of Being&#34;.</p>
</li>
</ul>
<p><a href="app_depr_upd.htm#GUID-5CD0462B-B427-4BA6-9AA9-66A7494F279A__BABEBCFG">Example C-5</a> updates the text node of a <code>Part</code> element whose <code>Description</code> attribute has value &#34;<code>A Night to Remember</code>&#34; to <code>NULL</code>. The XML data for this example corresponds to a different, revised purchase-order XML schema &ndash; see <span class="q">&#34;<a href="xdb07evo.htm#GUID-AD87A5C3-D0E8-4109-A6B2-F3F673D42FFD" title="An evolved version of a purchase-order XML schema is shown. It is used in examples that illustrate the use of copy-based XML schema evolution.">Scenario for Copy-Based Evolution</a>&#34;</span>. In that XML schema, <code>Description</code> is an attribute of the <code>Part</code> element, not a sibling element.</p>
<div class="infoboxnotealso" id="GUID-5CD0462B-B427-4BA6-9AA9-66A7494F279A__GUID-3DEF06E9-FE92-4D58-AD0B-4EC6966EFD5E">
<p class="notep1">See Also:</p>
<p><a href="xdb03usg.htm#GUID-96D5EAC3-463F-48C0-BF3C-D051E0B174E8__CHDBGCBG">Example 3-26</a></p>
</div>
<div class="example" id="GUID-5CD0462B-B427-4BA6-9AA9-66A7494F279A__BABJCJHA">
<p class="titleinexample">Example C-4 NULL Updates with UPDATEXML (Deprecated) &ndash; Element and Attribute</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- -------------------------------------------------------------------
Sarah J. Bell    &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     &lt;Description&gt;A Night to Remember&lt;/Description&gt;
                     &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;2&#34;&gt;
                     &lt;Description&gt;The Unbearable Lightness Of Being&lt;/Description&gt;
                     &lt;Part Id=&#34;37429140222&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;2&#34;/&gt;
                   &lt;/LineItem&gt;
                   &lt;LineItem ItemNumber=&#34;3&#34;&gt;
                     &lt;Description&gt;Sisters&lt;/Description&gt;
                     &lt;Part Id=&#34;715515011020&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;4&#34;/&gt;
                   &lt;/LineItem&gt;
                 &lt;/LineItems&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE = 
      updateXML(
        OBJECT_VALUE,
        &#39;/PurchaseOrder/LineItems/LineItem[Part/@Id=&#34;715515009058&#34;]/Description&#39;, NULL,
             &#39;/PurchaseOrder/LineItems/LineItem/Part[@Id=&#34;715515009058&#34;]/@Quantity&#39;, NULL,
        &#39;/PurchaseOrder/LineItems/LineItem[Description/text()=
                                           &#34;The Unbearable Lightness Of Being&#34;]&#39;, NULL)
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Requestor&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30)) name,
       XMLQuery(&#39;$p/PurchaseOrder/LineItems&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT) lineitems
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
NAME             LINEITEMS
---------------- ----------------------------------------------------------------
Sarah J. Bell    &lt;LineItems&gt;
                   &lt;LineItem ItemNumber=&#34;1&#34;&gt;
                     <span class="bold">&lt;Description/&gt;</span>
                     &lt;Part Id=&#34;715515009058&#34; UnitPrice=&#34;39.95&#34; <span class="bold">Quantity=&#34;&#34;</span>/&gt;
                   &lt;/LineItem&gt;
                   <span class="bold">&lt;LineItem/&gt;</span>
                   &lt;LineItem ItemNumber=&#34;3&#34;&gt;
                     &lt;Description&gt;Sisters&lt;/Description&gt;
                     &lt;Part Id=&#34;715515011020&#34; UnitPrice=&#34;29.95&#34; Quantity=&#34;4&#34;/&gt;
                   &lt;/LineItem&gt;
                 &lt;/LineItems&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-5CD0462B-B427-4BA6-9AA9-66A7494F279A__BABEBCFG">
<p class="titleinexample">Example C-5 NULL Updates with UPDATEXML (Deprecated) &ndash; Text Node</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem/Part[@Description=&#34;A Night to Remember&#34;]&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(128)) part
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[@Reference=&#34;SBELL-2003030912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

PART
----
&lt;Part Description=&#34;A Night to Remember&#34; UnitCost=&#34;39.95&#34;&gt;<span class="bold">715515009058</span>&lt;/Part&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE = 
        updateXML(OBJECT_VALUE, 
                  &#39;/PurchaseOrder/LineItems/LineItem/Part[@Description=&#34;A Night to Remember&#34;]/<span class="bold">text()</span>&#39;, <span class="bold">NULL</span>)
  WHERE XMLExists(&#39;$p/PurchaseOrder[@Reference=&#34;SBELL-2003030912333601PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem/Part[@Description=&#34;A Night to Remember&#34;]&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(128)) part
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[@Reference=&#34;SBELL-2003030912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

PART
----
&lt;Part Description=&#34;A Night to Remember&#34; UnitCost=&#34;39.95&#34;/&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6055"></a>
<div class="props_rev_3"><a id="GUID-3235F02A-4E7D-4168-AD1B-6EF8F9A7D133"></a>
<h3 id="ADXDB-GUID-3235F02A-4E7D-4168-AD1B-6EF8F9A7D133" class="sect3"><span class="enumeration_section">C.3.2</span> Update of the Same XML Node More Than Once Using UPDATEXML (Deprecated)</h3>
<div>
<p>You can update the same XML node more than once in an <code>updateXML</code> expression. The order of updates is determined by the order of the XPath expressions, in left-to-right order. Each successive update works on the result of the previous one.</p>
<p>For example, you can update both <code>/EMP[EMPNO=217]</code> and <code>/EMP[EMPNAME=&#34;Jane&#34;]/EMPNO</code>, where the first XPath identifies the <code>EMPNO</code> node containing it as well.</p>
</div>
</div>
<a id="ADXDB6056"></a>
<div class="props_rev_3"><a id="GUID-7C22238D-7EA2-4EDB-8198-092C17824FEE"></a>
<h3 id="ADXDB-GUID-7C22238D-7EA2-4EDB-8198-092C17824FEE" class="sect3"><span class="enumeration_section">C.3.3</span> Guidelines for DOM Fidelity When Using UPDATEXML (Deprecated)</h3>
<div>
<p>Guidelines are presented for DOM fidelity when using Oracle SQL function <code>updateXML</code>.</p>
<ul style="list-style-type: disc;">
<li>
<p>When DOM fidelity is preserved &mdash;</p>
<p>When you update an element to <code>NULL</code>, you make that element appear <span class="italic">empty</span> in its parent. When you update a text node inside an element to <code>NULL</code>, you <span class="italic">remove</span> the text node. When you update an attribute node to <code>NULL</code>, you make the attribute value the <span class="italic">empty</span> string.</p>
<p>An example of an empty element is <code>&lt;myElem/&gt;</code>. An example of an attribute with an empty-string value is <code>myAttr=&#34;&#34;</code>.</p>
</li>
<li>
<p>When DOM fidelity is not preserved &mdash;</p>
<p>When you update a <code>complexType</code> element to <code>NULL</code>, you make it appear <span class="italic">empty</span> in its parent. When you update a SQL-inlined <code>simpleType</code> element to <code>NULL</code>, you make it <span class="italic">disappear</span> from its parent. Updating a text node to <code>NULL</code> is the same as setting the parent <code>simpleType</code> element to <code>NULL</code>.</p>
<p>Furthermore, text nodes can only appear inside <code>simpleType</code> elements when DOM fidelity is not preserved, since there is no positional descriptor with which to store mixed content. When you update an attribute node to <code>NULL</code>, you <span class="italic">remove</span> the attribute from the element.</p>
</li>
<li>
<p>How to tell whether DOM fidelity is preserved &mdash;</p>
<p>You can determine whether or not DOM fidelity is preserved for particular parts of a given <code>XMLType</code> instance in a given XML schema by querying the XML schema metadata for attribute <code>maintainDOM</code>.</p>
<div class="infoboxnotealso" id="GUID-7C22238D-7EA2-4EDB-8198-092C17824FEE__GUID-1D20F7BC-4BDD-4997-805E-0E5890A41FD3">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb06stt.htm#GUID-0A560425-E6F2-4AA2-9818-B80EFE2D0AD3" title="You can query database views USER_XML_SCHEMAS and ALL_XML_SCHEMAS to obtain a registered XML schema with all of its annotations. The registered version of an XML schema contains a full set of Oracle XML&nbsp;DB annotations. These annotations were supplied by a user or set by default during XML schema registration.">Querying a Registered XML Schema to Obtain Annotations</a>&#34;</span> for an example of querying a schema to retrieve DOM fidelity values</p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb05sto.htm#GUID-F809A6FE-28CD-4776-AB11-0B34ECBD9FF6" title="DOM fidelity means that all information in an XML document is preserved except whitespace that is insignificant. You can use DOM fidelity to ensure the accuracy and integrity of XML documents stored in Oracle XML&nbsp;DB.">DOM Fidelity</a>&#34;</span></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDB6061"></a><a id="ADXDB6062"></a><a id="ADXDB6060"></a>
<div class="props_rev_3"><a id="GUID-505550EB-A598-40F4-BB73-12837E3D887C"></a>
<h2 id="ADXDB-GUID-505550EB-A598-40F4-BB73-12837E3D887C" class="sect2"><span class="enumeration_section">C.4</span> Optimization of Deprecated Oracle SQL Functions that Modify XML Data</h2>
<div>
<p>In most cases, the deprecated Oracle SQL functions that modify XML data materialize a copy of the entire input XML document in memory, then update the copy. However, functions <code>updateXML</code>, <code>insertChildXML</code>, <code>insertChildXMLbefore</code>, <code>insertChildXMLafter</code>, and <code>deleteXML</code> &mdash; that is, all <span class="italic">except</span> <code>insertXMLbefore</code>, <code>insertXMLafter</code>, and <code>appendChildXML</code> &mdash; are optimized for <code>XMLType</code> <code>UPDATE</code> operations.</p>
<p>For object-relational storage, if particular conditions are met, then the function call can be rewritten to update the object-relational columns directly with the values. For binary XML storage, data preceding the targeted update is not modified, and, if SecureFiles LOBs are used (the default behavior), then sliding inserts are used to update only the portions of the data that need changing.</p>
<div class="infoboxnotealso" id="GUID-505550EB-A598-40F4-BB73-12837E3D887C__GUID-B0794157-07F7-4455-974F-AAC6B9C3BC20">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb03usg.htm#GUID-757B4470-851B-47B7-AB78-81F47ECE5398" title="An overview of the various ways of using Oracle XML&nbsp;DB is presented.">Overview of How To Use Oracle XML&nbsp;DB</a> and <a href="xdb_rewrite.htm#GUID-35551023-CCAC-477B-8BBF-CD0E0B44C962" title="For XMLType data stored object-relationally, queries involving XPath expression arguments to various SQL functions can often be automatically rewritten to queries against the underlying SQL tables, which are highly optimized.">XPath Rewrite for Object-Relational Storage</a> for information about the conditions for XPath rewrite</p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb04cre.htm#GUID-F72DC7CD-40A9-4F07-9350-B80D2AD1F4D0" title="A SQL query that involves XQuery expressions can often be automatically rewritten (optimized) in one or more ways. This optimization is referred to as XML query rewrite or optimization. When this happens, the XQuery expression is, in effect, evaluated directly against the XML document without constructing a DOM in memory.">Performance Tuning for XQuery</a>&#34;</span></p>
</li>
</ul>
</div>
<p>As an example with object-relational storage, the XPath argument to <code>updateXML</code> in <a href="app_depr_upd.htm#GUID-505550EB-A598-40F4-BB73-12837E3D887C__BABCCAFF">Example C-6</a> is processed by Oracle XML&nbsp;DB and rewritten into equivalent object-relational SQL code, as illustrated in <a href="app_depr_upd.htm#GUID-505550EB-A598-40F4-BB73-12837E3D887C__BABHBDIC">Example C-7</a>.</p>
<div class="infobox-note" id="GUID-505550EB-A598-40F4-BB73-12837E3D887C__GUID-EB3F4EC4-3863-4335-A497-F71AB8A0BCCF">
<p class="notep1">Note:</p>
<p>The use of <code>XMLDATA</code> for DML is shown here only as an illustration of internal Oracle XML&nbsp;DB behavior. Do <span class="italic">not</span> use <code>XMLDATA</code> yourself for DML operations. You can use <code>XMLDATA</code> directly only for DDL operations, never for DML operations.</p>
<p>More generally, in your code, do not rely on the current mapping between the XML Schema object model and the SQL object model. This Oracle XML&nbsp;DB implementation mapping might change in the future.</p>
</div>
<div class="example" id="GUID-505550EB-A598-40F4-BB73-12837E3D887C__BABCCAFF">
<p class="titleinexample">Example C-6 XPath Expressions in UPDATEXML Expression</p>
<pre dir="ltr">SET LONG 2000
</pre>
<pre dir="ltr">--
</pre>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/User&#39;
PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
       AS VARCHAR2(30))
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
XMLCAST(XMLQUERY(&#39;$P/PURCHASEO
------------------------------
SBELL

UPDATE purchaseorder
  SET OBJECT_VALUE = updateXML(OBJECT_VALUE, <span class="bold">&#39;/PurchaseOrder/User/text()&#39;, &#39;SVOLLMAN&#39;</span>)
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
  PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/User&#39;
PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
       AS VARCHAR2(30))
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 
XMLCAST(XMLQUERY(&#39;$P/PURCHASEO
------------------------------
<span class="bold">SVOLLMAN</span>
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-505550EB-A598-40F4-BB73-12837E3D887C__BABHBDIC">
<p class="titleinexample">Example C-7 Object Relational Equivalent of UPDATEXML Expression</p>
<pre dir="ltr">SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/User&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30))
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLCAST(XMLQUERY(&#39;$P/PURCHASEO
------------------------------
SBELL
 
UPDATE purchaseorder p
   SET p.&#34;XMLDATA&#34;.&#34;<span class="bold">USERID</span>&#34; = &#39;<span class="bold">SVOLLMAN</span>&#39;
   WHERE p.&#34;XMLDATA&#34;.&#34;REFERENCE&#34; = &#39;SBELL-2002100912333601PDT&#39;;

SELECT XMLCast(XMLQuery(&#39;$p/PurchaseOrder/User&#39;
                        PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
               AS VARCHAR2(30))
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);
 

XMLCAST(XMLQUERY(&#39;$P/PURCHASEO
------------------------------
<span class="bold">SVOLLMAN</span>
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6064"></a><a id="ADXDB6063"></a>
<div class="props_rev_3"><a id="GUID-646CDBD2-A1DC-4FC3-BF87-7E5D47B28005"></a>
<h2 id="ADXDB-GUID-646CDBD2-A1DC-4FC3-BF87-7E5D47B28005" class="sect2"><span class="enumeration_section">C.5</span> Creating XML Views Using Deprecated Oracle SQL Functions that Modify XML Data</h2>
<div>
<p>You can use the deprecated Oracle SQL functions that modify XML data (<code>updateXML</code>, <code>insertChildXML</code>, <code>insertChildXMLbefore</code>, <code>insertChildXMLafter</code>, <code>insertXMLbefore</code>, <code>insertXMLafter</code>, <code>appendChildXML</code>, and <code>deleteXML</code>) to create new views of XML data.</p>
<div class="section">
<p><a href="app_depr_upd.htm#GUID-646CDBD2-A1DC-4FC3-BF87-7E5D47B28005__BABHECAF">Example C-8</a> creates a view of table <code>purchaseorder</code> using deprecated Oracle SQL function <code>updateXML</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-646CDBD2-A1DC-4FC3-BF87-7E5D47B28005__BABHECAF">
<p class="titleinexample">Example C-8 Creating a View Using UPDATEXML (Deprecated)</p>
<pre dir="ltr">CREATE OR REPLACE VIEW purchaseorder_summary OF XMLType AS
  SELECT <span class="bold">updateXML</span>(OBJECT_VALUE,
                   &#39;/PurchaseOrder/Actions&#39;, NULL,
                   &#39;/PurchaseOrder/ShippingInstructions&#39;, NULL,
                   &#39;/PurchaseOrder/LineItems&#39;, NULL) AS XML
  FROM purchaseorder p;

SELECT OBJECT_VALUE FROM purchaseorder_summary
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;DAUSTIN-20021009123335811PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);
 
OBJECT_VALUE
---------------------------------------------------------------------------
&lt;PurchaseOrder
    xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
    xsi:noNamespaceSchemaLocation=
      &#34;http://localhost:8080/source/schemas/poSource/xsd/purchaseOrder.xsd&#34;&gt;
  &lt;Reference&gt;DAUSTIN-20021009123335811PDT&lt;/Reference&gt;
  &lt;Actions/&gt;
  &lt;Reject/&gt;
  &lt;Requestor&gt;David L. Austin&lt;/Requestor&gt;
  &lt;User&gt;DAUSTIN&lt;/User&gt;
  &lt;CostCenter&gt;S30&lt;/CostCenter&gt;
  &lt;ShippingInstructions/&gt;
  &lt;SpecialInstructions&gt;Courier&lt;/SpecialInstructions&gt;
  &lt;LineItems/&gt;
&lt;/PurchaseOrder&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6066"></a><a id="ADXDB6067"></a><a id="ADXDB6068"></a><a id="ADXDB6065"></a>
<div class="props_rev_3"><a id="GUID-23A699A3-B5F1-4BB1-A6FC-2D079398F8DD"></a>
<h2 id="ADXDB-GUID-23A699A3-B5F1-4BB1-A6FC-2D079398F8DD" class="sect2"><span class="enumeration_section">C.6</span> INSERTCHILDXML Deprecated Oracle SQL Function</h2>
<div>
<p>Deprecated Oracle SQL function <code>insertChildXML</code> inserts new children (one or more elements of the same type or a single attribute) under parent XML elements. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.</p>
<p>A <span class="italic">copy</span> of the input <code>XMLType</code> instance is modified and returned. The original data is unaffected. You can then use the returned data with SQL operation <code>UPDATE</code> to modify database data.</p>
<p>Function <code>insertChildXML</code> has the following parameters (in order):</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><span class="bold"><code>target-data</code></span></span> (<code>XMLType</code>) &ndash; The XML data containing the target parent element.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>parent-xpath</code></span></span> (<code>VARCHAR2</code>) &ndash; An XPath&nbsp;1.0 expression that locates the parent elements within <span class="italic"><code>target-data</code></span>. The <span class="italic"><code>child-data</code></span> is inserted under <span class="italic">each</span> parent element.</p>
<p>If <span class="italic"><code>parent-xpath</code></span> matches an empty sequence of element nodes, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged (no error is raised). If <span class="italic"><code>parent-xpath</code></span> does not match a sequence of element nodes (in particular, if <span class="italic"><code>parent-xpath</code></span> matches one or more <span class="italic">attribute</span> or <span class="italic">text</span> nodes), then an error is raised.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>child-name</code></span></span> (<code>VARCHAR2</code>) &ndash; The name of the child elements or attribute to insert. An attribute name is distinguished from an element name by having an at-sign (<code>@</code>) prefix as part of <span class="italic"><code>child-name</code></span>, for example, <code>@my_attribute</code> versus <code>my_element</code>. (The at-sign is not part of the attribute name, but serves in the argument to indicate that <span class="italic"><code>child-name</code></span> refers to an attribute.)</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>child-data</code></span></span> (<code>XMLType</code> or <code>VARCHAR2</code>) &ndash; The child XML data to insert:</p>
<ul style="list-style-type: disc;">
<li>
<p>If one or more <span class="italic">elements</span> are being inserted, then this is of data type <code>XMLType</code>, and it contains element nodes. <span class="italic">Each</span> of the top-level element nodes in <span class="italic"><code>child-data</code></span> must have the same name (tag) as <span class="italic"><code>child-name</code></span> (or else an error is raised).</p>
</li>
<li>
<p>If an <span class="italic">attribute</span> is being inserted, then this is of data type <code>VARCHAR2</code>, and it represents the (scalar) attribute value. If an attribute of the same name already exists at the insertion location, then an error is raised.</p>
</li>
</ul>
</li>
<li>
<p><span class="italic"><span class="bold"><code>namespace</code></span></span> (<code>VARCHAR2</code>, <span class="italic">optional</span>) &ndash; The XML namespace for parameters <span class="italic"><code>parent-xpath</code></span> and <span class="italic"><code>child-data</code></span>.</p>
</li>
</ul>
<p>XML data <span class="italic"><code>child-data</code></span> is inserted as one or more child elements, or a single child attribute, under <span class="italic">each</span> of the parent elements located at <span class="italic"><code>parent-xpath</code></span>.</p>
<p>In order of decreasing precedence, function <code>insertChildXML</code> has the following behavior for <code>NULL</code> arguments:</p>
<ul style="list-style-type: disc;">
<li>
<p>If <span class="italic"><code>child-name</code></span> is <code>NULL</code>, then an error is raised.</p>
</li>
<li>
<p>If <span class="italic"><code>target-data</code></span> or <span class="italic"><code>parent-xpath</code></span> is <code>NULL</code>, then <code>NULL</code> is returned.</p>
</li>
<li>
<p>If <span class="italic"><code>child-data</code></span> is <code>NULL</code>, then:</p>
<ul style="list-style-type: disc;">
<li>
<p>If <span class="italic"><code>child-name</code></span> names an element, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged.</p>
</li>
<li>
<p>If <span class="italic"><code>child-name</code></span> names an attribute, then an empty attribute value is inserted, for example, <code>my_attribute&nbsp;=&nbsp;</code><span class="bold"><code>&#34;&#34;</code></span>.</p>
</li>
</ul>
</li>
</ul>
<p><a href="app_depr_upd.htm#GUID-23A699A3-B5F1-4BB1-A6FC-2D079398F8DD__BABHGDJI">Figure C-2</a> shows the syntax.</p>
<div class="figure" id="GUID-23A699A3-B5F1-4BB1-A6FC-2D079398F8DD__BABHGDJI">
<p class="titleinfigure">Figure C-2 INSERTCHILDXML Syntax</p>
<img width="735" height="103" src="img/GUID-A393A6E7-1928-479B-A72A-13C7EDF7BA52-default.gif" alt="Description of Figure C-2 follows" title="Description of Figure C-2 follows"/><br/>
<a href="img_text/GUID-A393A6E7-1928-479B-A72A-13C7EDF7BA52-print.htm">Description of &#34;Figure C-2 INSERTCHILDXML Syntax&#34;</a></div>
<!-- class="figure" -->
<p>If <span class="italic"><code>target-data</code></span> is XML <span class="italic">schema-based</span>, then the schema is consulted to determine the insertion positions. For example, if the schema constrains child elements named <span class="italic"><code>child-name</code></span> to be the first child elements of a <span class="italic"><code>parent-xpath</code></span>, then the insertion takes this into account. Similarly, if the <span class="italic"><code>child-name</code></span> or <span class="italic"><code>child-data</code></span> argument is inappropriate for an associated schema, then an error is raised.</p>
<p>If the parent element does <span class="italic">not</span> yet have a child corresponding in name and kind to <span class="italic"><code>child-name</code></span> (and if such a child is permitted by the associated XML schema, if any), then <span class="italic"><code>child-data</code></span> is inserted as new child elements, or a new attribute value, named <span class="italic"><code>child-name</code></span>.</p>
<p>If the parent element already has a child <span class="italic">attribute</span> named <span class="italic"><code>child-name</code></span> (without the at-sign), then an error is raised. If the parent element already has a child <span class="italic">element</span> named <span class="italic"><code>child-name</code></span> (and if more than one child element is permitted by the associated XML schema, if any), then <span class="italic"><code>child-data</code></span> is inserted so that its elements become child elements named <span class="italic"><code>child-name</code></span>, but their positions in the sequence of children are unpredictable.</p>
<p>If you need to insert elements into an existing, non-empty collection of child elements, and the order is important to you, then use SQL/XML function <code>appendChildXML</code> or <code>insertXMLbefore</code>.</p>
<p><a href="app_depr_upd.htm#GUID-23A699A3-B5F1-4BB1-A6FC-2D079398F8DD__BABIGHGG">Example C-9</a> shows how to use a SQL <code>UPDATE</code> statement and Oracle SQL function <code>insertChildXML</code> to insert a new <code>LineItem</code> element as a child of element <code>LineItems</code>.</p>
<p>If the XML data to be updated is XML schema-based and it refers to a namespace, then the data to be inserted must also refer to the same namespace. Otherwise, an error is raised because the inserted data does not conform to the XML schema.</p>
<p><a href="app_depr_upd.htm#GUID-23A699A3-B5F1-4BB1-A6FC-2D079398F8DD__BABFACIB">Example C-10</a> is the same as <a href="app_depr_upd.htm#GUID-23A699A3-B5F1-4BB1-A6FC-2D079398F8DD__BABIGHGG">Example C-9</a>, except that the <code>LineItem</code> element to be inserted refers to a namespace. This assumes that the relevant XML schema requires a namespace for this element.</p>
<p>Note that this use of namespaces is different from the use of a namespace <span class="italic">argument</span> to function <code>insertChildXML</code>. Namespaces supplied in that optional argument apply only to the XPath argument, not to the content to be inserted.</p>
<div class="example" id="GUID-23A699A3-B5F1-4BB1-A6FC-2D079398F8DD__BABIGHGG">
<p class="titleinexample">Example C-9 Insertion into a Collection Using INSERTCHILDXML (Deprecated)</p>
<pre dir="ltr">SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[@ItemNumber=222]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[@ITEMNUMBER=222]&#39;
---------------------------------------------------------------

1 row selected.

UPDATE purchaseorder
  SET OBJECT_VALUE = 
        <span class="bold">insertChildXML</span>(OBJECT_VALUE, 
                       &#39;/PurchaseOrder/LineItems&#39;, 
                       &#39;LineItem&#39;, 
                       XMLType(&#39;&lt;LineItem ItemNumber=&#34;222&#34;&gt;
                                  &lt;Description&gt;The Harder They Come&lt;/Description&gt;
                                  &lt;Part Id=&#34;953562951413&#34; 
                                        UnitPrice=&#34;22.95&#34; 
                                        Quantity=&#34;1&#34;/&gt;
                                &lt;/LineItem&gt;&#39;))
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[@ItemNumber=222]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[@ITEMNUMBER=222]&#39;
---------------------------------------------------------------
&lt;LineItem ItemNumber=&#34;222&#34;&gt;
  &lt;Description&gt;The Harder They Come&lt;/Description&gt;
  &lt;Part Id=&#34;953562951413&#34; UnitPrice=&#34;22.95&#34; Quantity=&#34;1&#34;/&gt;
&lt;/LineItem&gt;

1 row selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-23A699A3-B5F1-4BB1-A6FC-2D079398F8DD__BABFACIB">
<p class="titleinexample">Example C-10 Inserting an Element that Uses a Namespace</p>
<pre dir="ltr">UPDATE purchaseorder
  SET OBJECT_VALUE = 
        insertChildXML(OBJECT_VALUE, 
                       &#39;/PurchaseOrder/LineItems&#39;, 
                       &#39;LineItem&#39;, 
                       XMLType(&#39;&lt;LineItem <span class="bold">xmlns=&#34;films.xsd&#34;</span> ItemNumber=&#34;222&#34;&gt;
                                  &lt;Description&gt;The Harder They Come&lt;/Description&gt;
                                  &lt;Part Id=&#34;953562951413&#34; 
                                        UnitPrice=&#34;22.95&#34; 
                                        Quantity=&#34;1&#34;/&gt;
                                &lt;/LineItem&gt;&#39;))
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6070"></a><a id="ADXDB6069"></a>
<div class="props_rev_3"><a id="GUID-B71A91D0-7DE0-4B86-BEBC-CE0080D3A8D7"></a>
<h2 id="ADXDB-GUID-B71A91D0-7DE0-4B86-BEBC-CE0080D3A8D7" class="sect2"><span class="enumeration_section">C.7</span> INSERTCHILDXMLBEFORE Deprecated Oracle SQL Function</h2>
<div>
<p>Deprecated Oracle SQL function <code>insertChildXMLbefore</code> inserts one or more collection elements as children of target parent elements. The insertion for each target occurs immediately before a specified existing collection element. The existing XML document that is the target of the insertion can be XML Schema-based or non-schema-based.</p>
<p>A <span class="italic">copy</span> of the input <code>XMLType</code> instance is modified and returned. The original data is unaffected. You can then use the returned data with SQL operation <code>UPDATE</code> to modify database data.</p>
<p>Function <code>insertChildXMLbefore</code> has the following parameters (in order):</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><span class="bold"><code>target-data</code></span></span> (<code>XMLType</code>) &ndash; The XML data that is the target of the insertion.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>parent-xpath</code></span></span> (<code>VARCHAR2</code>) &ndash; An XPath&nbsp;1.0 expression that locates the parent elements within <span class="italic"><code>target-data</code></span>. The <span class="italic"><code>child-data</code></span> is inserted under <span class="italic">each</span> parent element.</p>
<p>If <span class="italic"><code>parent-xpath</code></span> matches an empty sequence of element nodes, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged (no error is raised). If <span class="italic"><code>parent-xpath</code></span> does not match a sequence of element nodes (in particular, if <span class="italic"><code>parent-xpath</code></span> matches one or more <span class="italic">attribute</span> or <span class="italic">text</span> nodes), then an error is raised.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>child-xpath</code></span></span> (<code>VARCHAR2</code>) &ndash; A relative XPath&nbsp;1.0 expression that locates the existing child that will become the successor of the inserted <span class="italic"><code>child-data</code></span>. It must name a child element of the element indicated by <span class="italic"><code>parent-xpath</code></span>, and it can include a predicate.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>child-data</code></span></span> (<code>XMLType</code>) &ndash; The child element XML data to insert. This is of data type <code>XMLType</code>, and it contains element nodes. <span class="italic">Each</span> of the top-level element nodes in <span class="italic"><code>child-data</code></span> must have the same data type as the element indicated by <span class="italic"><code>child-xpath</code></span> (or else an error is raised).</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>namespace</code></span></span> (<span class="italic">optional</span>, <code>VARCHAR2</code>) &ndash; The namespace for parameters <span class="italic"><code>parent-xpath</code></span>, <span class="italic"><code>child-xpath</code></span>, and <span class="italic"><code>child-data</code></span>.</p>
</li>
</ul>
<p>XML data <span class="italic"><code>child-data</code></span> is inserted as one or more child elements under <span class="italic">each</span> of the parent elements located at <span class="italic"><code>parent-xpath</code></span>.</p>
<p>In order of decreasing precedence, function <code>insertChildXMLbefore</code> has the following behavior for <code>NULL</code> arguments:</p>
<ul style="list-style-type: disc;">
<li>
<p>If <span class="italic"><code>child-xpath</code></span> is <code>NULL</code>, then an error is raised.</p>
</li>
<li>
<p>If <span class="italic"><code>target-data</code></span> or <span class="italic"><code>parent-xpath</code></span> is <code>NULL</code>, then <code>NULL</code> is returned.</p>
</li>
<li>
<p>If <span class="italic"><code>child-data</code></span> is <code>NULL</code>, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged.</p>
</li>
</ul>
<p><a href="app_depr_upd.htm#GUID-B71A91D0-7DE0-4B86-BEBC-CE0080D3A8D7__BABGBCCC">Figure C-3</a> shows the syntax.</p>
<div class="figure" id="GUID-B71A91D0-7DE0-4B86-BEBC-CE0080D3A8D7__BABGBCCC">
<p class="titleinfigure">Figure C-3 INSERTCHILDXMLBEFORE Syntax</p>
<img width="735" height="103" src="img/GUID-0C773605-FBD0-4CFB-BB47-76FEEB834AEF-default.gif" alt="Description of Figure C-3 follows" title="Description of Figure C-3 follows"/><br/>
<a href="img_text/GUID-0C773605-FBD0-4CFB-BB47-76FEEB834AEF-print.htm">Description of &#34;Figure C-3 INSERTCHILDXMLBEFORE Syntax&#34;</a></div>
<!-- class="figure" --></div>
</div>
<a id="ADXDB6072"></a><a id="ADXDB6071"></a>
<div class="props_rev_3"><a id="GUID-38E1764C-91A1-448A-A485-B01A2172CACD"></a>
<h2 id="ADXDB-GUID-38E1764C-91A1-448A-A485-B01A2172CACD" class="sect2"><span class="enumeration_section">C.8</span> INSERTCHILDXMLAFTER Deprecated Oracle SQL Function</h2>
<div>
<p>Deprecated Oracle SQL function <code>insertChildXMLafter</code> inserts one or more collection elements as children of target parent elements. The insertion for each target occurs immediately after a specified existing collection element. The existing XML document that is the target of the insertion can be XML Schema-based or non-schema-based.</p>
<p>A <span class="italic">copy</span> of the input <code>XMLType</code> instance is modified and returned. The original data is unaffected. You can then use the returned data with SQL operation <code>UPDATE</code> to modify database data.</p>
<p>Function <code>insertChildXMLafter</code> has the following parameters (in order):</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><span class="bold"><code>target-data</code></span></span> (<code>XMLType</code>) &ndash; The XML data that is the target of the insertion.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>parent-xpath</code></span></span> (<code>VARCHAR2</code>) &ndash; An XPath&nbsp;1.0 expression that locates the parent elements within <span class="italic"><code>target-data</code></span>. The <span class="italic"><code>child-data</code></span> is inserted under <span class="italic">each</span> parent element.</p>
<p>If <span class="italic"><code>parent-xpath</code></span> matches an empty sequence of element nodes, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged (no error is raised). If <span class="italic"><code>parent-xpath</code></span> does not match a sequence of element nodes (in particular, if <span class="italic"><code>parent-xpath</code></span> matches one or more <span class="italic">attribute</span> or <span class="italic">text</span> nodes), then an error is raised.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>child-xpath</code></span></span> (<code>VARCHAR2</code>) &ndash; A relative XPath&nbsp;1.0 expression that locates the existing child that will become the predecessor of the inserted <span class="italic"><code>child-data</code></span>. It must name a child element of the element indicated by <span class="italic"><code>parent-xpath</code></span>, and it can include a predicate.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>child-data</code></span></span> (<code>XMLType</code>) &ndash; The child element XML data to insert. This is of data type <code>XMLType</code>, and it contains element nodes. <span class="italic">Each</span> of the top-level element nodes in <span class="italic"><code>child-data</code></span> must have the same data type as the element indicated by <span class="italic"><code>child-xpath</code></span> (or else an error is raised).</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>namespace</code></span></span> (<span class="italic">optional</span>, <code>VARCHAR2</code>) &ndash; The namespace for parameters <span class="italic"><code>parent-xpath</code></span>, <span class="italic"><code>child-xpath</code></span>, and <span class="italic"><code>child-data</code></span>.</p>
</li>
</ul>
<p>XML data <span class="italic"><code>child-data</code></span> is inserted as one or more child elements under <span class="italic">each</span> of the parent elements located at <span class="italic"><code>parent-xpath</code></span>.</p>
<p>In order of decreasing precedence, function <code>insertChildXMLafter</code> has the following behavior for <code>NULL</code> arguments:</p>
<ul style="list-style-type: disc;">
<li>
<p>If <span class="italic"><code>child-xpath</code></span> is <code>NULL</code>, then an error is raised.</p>
</li>
<li>
<p>If <span class="italic"><code>target-data</code></span> or <span class="italic"><code>parent-xpath</code></span> is <code>NULL</code>, then <code>NULL</code> is returned.</p>
</li>
<li>
<p>If <span class="italic"><code>child-data</code></span> is <code>NULL</code>, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged.</p>
</li>
</ul>
<p><a href="app_depr_upd.htm#GUID-38E1764C-91A1-448A-A485-B01A2172CACD__BABICFGH">Figure C-4</a> shows the syntax.</p>
<div class="figure" id="GUID-38E1764C-91A1-448A-A485-B01A2172CACD__BABICFGH">
<p class="titleinfigure">Figure C-4 INSERTCHILDXMLAFTER Syntax</p>
<img width="735" height="103" src="img/GUID-D9529EBF-DBF5-4BDE-9C7C-5FF3913137D9-default.gif" alt="Description of Figure C-4 follows" title="Description of Figure C-4 follows"/><br/>
<a href="img_text/GUID-D9529EBF-DBF5-4BDE-9C7C-5FF3913137D9-print.htm">Description of &#34;Figure C-4 INSERTCHILDXMLAFTER Syntax&#34;</a></div>
<!-- class="figure" --></div>
</div>
<a id="ADXDB6074"></a><a id="ADXDB6075"></a><a id="ADXDB6073"></a>
<div class="props_rev_3"><a id="GUID-9C56911D-B8B9-4C3D-A90F-F471C5DB3C8F"></a>
<h2 id="ADXDB-GUID-9C56911D-B8B9-4C3D-A90F-F471C5DB3C8F" class="sect2"><span class="enumeration_section">C.9</span> INSERTXMLBEFORE Deprecated Oracle SQL Function</h2>
<div>
<p>Deprecated Oracle SQL function <code>insertXMLbefore</code> inserts one or more nodes of any kind immediately before a target node that is not an attribute node. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.</p>
<p>A <span class="italic">copy</span> of the input <code>XMLType</code> instance is modified and returned. The original data is unaffected. You can then use the returned data with SQL operation <code>UPDATE</code> to modify database data.</p>
<p>Function <code>insertXMLbefore</code> has the following parameters (in order):</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><span class="bold"><code>target-data</code></span></span> (<code>XMLType</code>) &ndash; The XML data that is the target of the insertion.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>successor-xpath</code></span></span> (<code>VARCHAR2</code>) &ndash; An XPath&nbsp;1.0 expression that locates zero or more nodes in <span class="italic"><code>target-data</code></span> of any kind <span class="italic">except</span> attribute nodes. <span class="italic"><code>XML-data</code></span> is inserted immediately before <span class="italic">each</span> of these nodes. Thus, the nodes in <span class="italic"><code>XML-data</code></span> become preceding siblings of each of the <span class="italic"><code>successor-xpath</code></span> nodes.</p>
<p>If <span class="italic"><code>successor-xpath</code></span> matches an empty sequence of nodes, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged (no error is raised). If <span class="italic"><code>successor-xpath</code></span> does not match a sequence of nodes that are not attribute nodes, then an error is raised.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>XML-data</code></span></span> (<code>XMLType</code>) &ndash; The XML data to be inserted: one or more nodes of <span class="italic">any kind</span>. The order of the nodes is preserved after the insertion.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>namespace</code></span></span> (<span class="italic">optional</span>, <code>VARCHAR2</code>) &ndash; The namespace for parameter <span class="italic"><code>successor-xpath</code></span>.</p>
</li>
</ul>
<p>The <span class="italic"><code>XML-data</code></span> nodes are inserted immediately before <span class="italic">each</span> of the non-attribute nodes located at <span class="italic"><code>successor-xpath</code></span>.</p>
<p>Function <code>insertXMLbefore</code> has the following behavior for <code>NULL</code> arguments:</p>
<ul style="list-style-type: disc;">
<li>
<p>If <span class="italic"><code>target-data</code></span> or <span class="italic"><code>parent-xpath</code></span> is <code>NULL</code>, then <code>NULL</code> is returned.</p>
</li>
<li>
<p>Otherwise, if <span class="italic"><code>child-data</code></span> is <code>NULL</code>, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged.</p>
</li>
</ul>
<p><a href="app_depr_upd.htm#GUID-9C56911D-B8B9-4C3D-A90F-F471C5DB3C8F__BABJEDEC">Figure C-5</a> shows the syntax.</p>
<div class="figure" id="GUID-9C56911D-B8B9-4C3D-A90F-F471C5DB3C8F__BABJEDEC">
<p class="titleinfigure">Figure C-5 INSERTXMLBEFORE Syntax</p>
<img width="767" height="46" src="img/GUID-822CAB1C-35D3-43E6-AE77-9059BC713959-default.gif" alt="Description of Figure C-5 follows" title="Description of Figure C-5 follows"/><br/>
<a href="img_text/GUID-822CAB1C-35D3-43E6-AE77-9059BC713959-print.htm">Description of &#34;Figure C-5 INSERTXMLBEFORE Syntax&#34;</a></div>
<!-- class="figure" -->
<p><a href="app_depr_upd.htm#GUID-9C56911D-B8B9-4C3D-A90F-F471C5DB3C8F__BABHGEAH">Example C-11</a> uses deprecated Oracle SQL function <code>insertXMLbefore</code> to insert a <code>LineItem</code> element before the first <code>LineItem</code> element.</p>
<div class="infobox-note" id="GUID-9C56911D-B8B9-4C3D-A90F-F471C5DB3C8F__GUID-C42F0415-FE08-4372-A62F-72DEB0E05E78">
<p class="notep1">Note:</p>
<p>Queries that use Oracle SQL function <code>insertXMLbefore</code> are <span class="italic">not</span> optimized. For this reason, Oracle recommends that you use function <code>insertChildXML</code>, <code>insertChildXMLbefore</code>, or <code>insertChildXMLafter</code> instead. See <span class="q">&#34;<a href="xdb04cre.htm#GUID-F72DC7CD-40A9-4F07-9350-B80D2AD1F4D0" title="A SQL query that involves XQuery expressions can often be automatically rewritten (optimized) in one or more ways. This optimization is referred to as XML query rewrite or optimization. When this happens, the XQuery expression is, in effect, evaluated directly against the XML document without constructing a DOM in memory.">Performance Tuning for XQuery</a>&#34;</span>.</p>
</div>
<div class="example" id="GUID-9C56911D-B8B9-4C3D-A90F-F471C5DB3C8F__BABHGEAH">
<p class="titleinexample">Example C-11 Insertion Before an Element Using INSERTXMLBEFORE (Deprecated)</p>
<pre dir="ltr">SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[1]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                   PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[1]&#39;PASSINGPO.OBJECT_
------------------------------------------------------------------
&lt;LineItem ItemNumber=&#34;1&#34;&gt;
  &lt;Description&gt;Salesman&lt;/Description&gt;
  &lt;Part Id=&#34;37429158920&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
&lt;/LineItem&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE = 
      <span class="bold">insertXMLbefore</span>(OBJECT_VALUE, 
                      &#39;/PurchaseOrder/LineItems/LineItem[1]&#39;, 
                      XMLType(&#39;<span class="bold">&lt;LineItem ItemNumber=&#34;314&#34;&gt;</span>
                                 <span class="bold">&lt;Description&gt;Brazil&lt;/Description&gt;</span>
                                 <span class="bold">&lt;Part Id=&#34;314159265359&#34;</span> 
                                       <span class="bold">UnitPrice=&#34;69.95&#34;</span> 
                                       <span class="bold">Quantity=&#34;2&#34;/&gt;</span>
                               <span class="bold">&lt;/LineItem&gt;</span>&#39;))
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[<span class="bold">position() &lt;= 2</span>]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                   PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[POSITION()&lt;=2]&#39;PASSINGPO.OBJECT_
------------------------------------------------------------------------------
<span class="bold">&lt;LineItem ItemNumber=&#34;314&#34;&gt;</span>
  <span class="bold">&lt;Description&gt;Brazil&lt;/Description&gt;</span>
  <span class="bold">&lt;Part Id=&#34;314159265359&#34; UnitPrice=&#34;69.95&#34; Quantity=&#34;2&#34;/&gt;</span>
<span class="bold">&lt;/LineItem&gt;</span>
&lt;LineItem ItemNumber=&#34;1&#34;&gt;
  &lt;Description&gt;Salesman&lt;/Description&gt;
  &lt;Part Id=&#34;37429158920&#34; UnitPrice=&#34;39.95&#34; Quantity=&#34;2&#34;/&gt;
&lt;/LineItem&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6077"></a><a id="ADXDB6076"></a>
<div class="props_rev_3"><a id="GUID-A9632F5C-6BB3-4AF6-B01E-92C4FD562C3B"></a>
<h2 id="ADXDB-GUID-A9632F5C-6BB3-4AF6-B01E-92C4FD562C3B" class="sect2"><span class="enumeration_section">C.10</span> INSERTXMLAFTER Deprecated Oracle SQL Function</h2>
<div>
<p>Deprecated Oracle SQL function <code>insertXMLafter</code> inserts one or more nodes of any kind immediately after a target node that is not an attribute node. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.</p>
<p>Function <code>insertXMLafter</code> is thus similar to <code>insertXMLbefore</code>, but it inserts after, not before, the target node.</p>
<p>A <span class="italic">copy</span> of the input <code>XMLType</code> instance is modified and returned. The original data is unaffected. You can then use the returned data with SQL operation <code>UPDATE</code> to modify database data.</p>
<p>Function <code>insertXMLafter</code> has the following parameters (in order):</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><span class="bold"><code>target-data</code></span></span> (<code>XMLType</code>) &ndash; The XML data that is the target of the insertion.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>successor-xpath</code></span></span> (<code>VARCHAR2</code>) &ndash; An XPath&nbsp;1.0 expression that locates zero or more nodes in <span class="italic"><code>target-data</code></span> of any kind <span class="italic">except</span> attribute nodes. <span class="italic"><code>XML-data</code></span> is inserted immediately after <span class="italic">each</span> of these nodes. Thus, the nodes in <span class="italic"><code>XML-data</code></span> become succeeding siblings of each of the <span class="italic"><code>successor-xpath</code></span> nodes.</p>
<p>If <span class="italic"><code>successor-xpath</code></span> matches an empty sequence of nodes, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged (no error is raised). If <span class="italic"><code>successor-xpath</code></span> does not match a sequence of nodes that are not attribute nodes, then an error is raised.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>XML-data</code></span></span> (<code>XMLType</code>) &ndash; The XML data to be inserted: one or more nodes of <span class="italic">any kind</span>. The order of the nodes is preserved after the insertion.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>namespace</code></span></span> (<span class="italic">optional</span>, <code>VARCHAR2</code>) &ndash; The namespace for parameter <span class="italic"><code>successor-xpath</code></span>.</p>
</li>
</ul>
<p>The <span class="italic"><code>XML-data</code></span> nodes are inserted immediately after <span class="italic">each</span> of the non-attribute nodes located at <span class="italic"><code>successor-xpath</code></span>.</p>
<p>Function <code>insertXMLafter</code> has the following behavior for <code>NULL</code> arguments:</p>
<ul style="list-style-type: disc;">
<li>
<p>If <span class="italic"><code>target-data</code></span> or <span class="italic"><code>parent-xpath</code></span> is <code>NULL</code>, then <code>NULL</code> is returned.</p>
</li>
<li>
<p>Otherwise, if <span class="italic"><code>child-data</code></span> is <code>NULL</code>, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged.</p>
</li>
</ul>
<p><a href="app_depr_upd.htm#GUID-A9632F5C-6BB3-4AF6-B01E-92C4FD562C3B__BABJGACE">Figure C-6</a> shows the syntax.</p>
<div class="figure" id="GUID-A9632F5C-6BB3-4AF6-B01E-92C4FD562C3B__BABJGACE">
<p class="titleinfigure">Figure C-6 INSERTXMLAFTER Syntax</p>
<img width="756" height="46" src="img/GUID-026D1042-02AB-4361-9E7F-8059D933F71E-default.gif" alt="Description of Figure C-6 follows" title="Description of Figure C-6 follows"/><br/>
<a href="img_text/GUID-026D1042-02AB-4361-9E7F-8059D933F71E-print.htm">Description of &#34;Figure C-6 INSERTXMLAFTER Syntax&#34;</a></div>
<!-- class="figure" -->
<div class="infobox-note" id="GUID-A9632F5C-6BB3-4AF6-B01E-92C4FD562C3B__GUID-5C67BDCD-3D4A-422F-B1FD-9C024228D1A7">
<p class="notep1">Note:</p>
<p>Queries that use Oracle SQL function <code>insertXMLafter</code> are <span class="italic">not</span> optimized. For this reason, Oracle recommends that you use function <code>insertChildXML</code>, <code>insertChildXMLbefore</code>, or <code>insertChildXMLafter</code> instead. See <span class="q">&#34;<a href="xdb04cre.htm#GUID-F72DC7CD-40A9-4F07-9350-B80D2AD1F4D0" title="A SQL query that involves XQuery expressions can often be automatically rewritten (optimized) in one or more ways. This optimization is referred to as XML query rewrite or optimization. When this happens, the XQuery expression is, in effect, evaluated directly against the XML document without constructing a DOM in memory.">Performance Tuning for XQuery</a>&#34;</span>.</p>
</div>
</div>
</div>
<a id="ADXDB6079"></a><a id="ADXDB6080"></a><a id="ADXDB6078"></a>
<div class="props_rev_3"><a id="GUID-7F8F13A6-493A-4831-B698-0FCC07508222"></a>
<h2 id="ADXDB-GUID-7F8F13A6-493A-4831-B698-0FCC07508222" class="sect2"><span class="enumeration_section">C.11</span> APPENDCHILDXML Deprecated Oracle SQL Function</h2>
<div>
<p>Deprecated Oracle SQL function <code>appendChildXML</code> inserts one or more nodes of any kind as the last children of a given element node. The XML document that is the target of the insertion can be XML Schema-based or non-schema-based.</p>
<p>A <span class="italic">copy</span> of the input <code>XMLType</code> instance is modified and returned. The original data is unaffected. You can then use the returned data with SQL operation <code>UPDATE</code> to modify database data.</p>
<p>Function <code>appendChildXML</code> has the following parameters (in order):</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><span class="bold"><code>target-data</code></span></span> (<code>XMLType</code>)&ndash; The XML data containing the target parent element.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>parent-xpath</code></span></span> (<code>VARCHAR2</code>) &ndash; An XPath&nbsp;1.0 expression that locates zero or more <span class="italic">element</span> nodes in <span class="italic"><code>target-data</code></span> that are the targets of the insertion operation. The <span class="italic"><code>child-data</code></span> is inserted as the last child or children of <span class="italic">each</span> of these parent elements.</p>
<p>If <span class="italic"><code>parent-xpath</code></span> matches an empty sequence of element nodes, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged (no error is raised). If <span class="italic"><code>parent-xpath</code></span> does not match a sequence of element nodes (in particular, if <span class="italic"><code>parent-xpath</code></span> matches one or more <span class="italic">attribute</span> or <span class="italic">text</span> nodes), then an error is raised.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>child-data</code></span></span> (<code>XMLType</code>) &ndash; Child data to be inserted: one or more nodes of <span class="italic">any kind</span>. The order of the nodes is preserved after the insertion.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>namespace</code></span></span> (<span class="italic">optional</span>, <code>VARCHAR2</code>) &ndash; The namespace for parameter <span class="italic"><code>parent-xpath</code></span>.</p>
</li>
</ul>
<p>XML data <span class="italic"><code>child-data</code></span> is inserted as the last child or children of <span class="italic">each</span> of the element nodes indicated by <span class="italic"><code>parent-xpath</code></span>.</p>
<p>Function <code>appendChildXML</code> has the following behavior for <code>NULL</code> arguments:</p>
<ul style="list-style-type: disc;">
<li>
<p>If <span class="italic"><code>target-data</code></span> or <span class="italic"><code>parent-xpath</code></span> is <code>NULL</code>, then <code>NULL</code> is returned.</p>
</li>
<li>
<p>Otherwise, if <span class="italic"><code>child-data</code></span> is <code>NULL</code>, then no insertion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged.</p>
</li>
</ul>
<p><a href="app_depr_upd.htm#GUID-7F8F13A6-493A-4831-B698-0FCC07508222__BABHAAII">Figure C-7</a> shows the syntax.</p>
<div class="figure" id="GUID-7F8F13A6-493A-4831-B698-0FCC07508222__BABHAAII">
<p class="titleinfigure">Figure C-7 APPENDCHILDXML Syntax</p>
<img width="758" height="46" src="img/GUID-A5F6A495-FF27-444B-862B-C37DA9240DEC-default.gif" alt="Description of Figure C-7 follows" title="Description of Figure C-7 follows"/><br/>
<a href="img_text/GUID-A5F6A495-FF27-444B-862B-C37DA9240DEC-print.htm">Description of &#34;Figure C-7 APPENDCHILDXML Syntax&#34;</a></div>
<!-- class="figure" -->
<p><a href="app_depr_upd.htm#GUID-7F8F13A6-493A-4831-B698-0FCC07508222__BABEGBAD">Example C-12</a> uses deprecated Oracle SQL function <code>appendChildXML</code> to insert a <code>Date</code> element as the last child of an <code>Action</code> element.</p>
<div class="infobox-note" id="GUID-7F8F13A6-493A-4831-B698-0FCC07508222__GUID-974B6DEE-7752-4621-9789-629547CAC559">
<p class="notep1">Note:</p>
<p>Queries that use Oracle SQL function <code>appendChildXML</code> are <span class="italic">not</span> optimized. For this reason, Oracle recommends that you use function <code>insertChildXML</code>, <code>insertChildXMLbefore</code>, or <code>insertChildXMLafter</code> instead. See <span class="q">&#34;<a href="xdb04cre.htm#GUID-F72DC7CD-40A9-4F07-9350-B80D2AD1F4D0" title="A SQL query that involves XQuery expressions can often be automatically rewritten (optimized) in one or more ways. This optimization is referred to as XML query rewrite or optimization. When this happens, the XQuery expression is, in effect, evaluated directly against the XML document without constructing a DOM in memory.">Performance Tuning for XQuery</a>&#34;</span>.</p>
</div>
<div class="example" id="GUID-7F8F13A6-493A-4831-B698-0FCC07508222__BABEGBAD">
<p class="titleinexample">Example C-12 Insertion as the Last Child Using APPENDCHILDXML (Deprecated)</p>
<pre dir="ltr">SELECT XMLQuery(&#39;$p/PurchaseOrder/Actions/Action[1]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/ACTIONS/ACTION[1]&#39;PASSINGPO.OBJECT_VALUE
-------------------------------------------------------------------
&lt;Action&gt;
  &lt;User&gt;KPARTNER&lt;/User&gt;
&lt;/Action&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE = 
      <span class="bold">appendChildXML</span>(OBJECT_VALUE, 
                     &#39;PurchaseOrder/Actions/Action[1]&#39;, 
                     XMLType(&#39;<span class="bold">&lt;Date&gt;2002-11-04&lt;/Date&gt;</span>&#39;))
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLQuery(&#39;$p/PurchaseOrder/Actions/Action[1]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/ACTIONS/ACTION[1]&#39;PASSINGPO.OBJECT_VALUE
-------------------------------------------------------------------
&lt;Action&gt;
  &lt;User&gt;KPARTNER&lt;/User&gt;
  <span class="bold">&lt;Date&gt;2002-11-04&lt;/Date&gt;</span>
&lt;/Action&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6082"></a><a id="ADXDB6083"></a><a id="ADXDB6081"></a>
<div class="props_rev_3"><a id="GUID-4E781DD7-B60E-49A5-8238-9E7CD207238B"></a>
<h2 id="ADXDB-GUID-4E781DD7-B60E-49A5-8238-9E7CD207238B" class="sect2"><span class="enumeration_section">C.12</span> DELETEXML Deprecated Oracle SQL Function</h2>
<div>
<p>Deprecated Oracle SQL function <code>deleteXML</code> deletes XML nodes of any kind. The XML document that is the target of the deletion can be XML Schema-based or non-schema-based.</p>
<p>A <span class="italic">copy</span> of the input <code>XMLType</code> instance is modified and returned. The original data is unaffected. You can then use the returned data with SQL operation <code>UPDATE</code> to modify database data.</p>
<p>Function <code>deleteXML</code> has the following parameters (in order):</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><span class="bold"><code>target-data</code></span></span> (<code>XMLType</code>) &ndash; The XML data containing the target nodes (to be deleted).</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>xpath</code></span></span> (<code>VARCHAR2</code>) &ndash; An XPath&nbsp;1.0 expression that locates zero or more nodes in <span class="italic"><code>target-data</code></span> that are the targets of the deletion operation. <span class="italic">Each</span> of these nodes is deleted.</p>
<p>If <span class="italic"><code>xpath</code></span> matches an empty sequence of nodes, then no deletion is done, and <span class="italic"><code>target-data</code></span> is returned unchanged (no error is raised). If <span class="italic"><code>xpath</code></span> matches the top-level element node, then an error is raised.</p>
</li>
<li>
<p><span class="italic"><span class="bold"><code>namespace</code></span></span> (<span class="italic">optional</span>, <code>VARCHAR2</code>) &ndash; The namespace for parameter <span class="italic"><code>xpath</code></span>.</p>
</li>
</ul>
<p>The XML nodes located at <span class="italic"><code>xpath</code></span> are deleted from <span class="italic"><code>target-data</code></span>. Function <code>deleteXML</code> returns <code>NULL</code> if <span class="italic"><code>target-data</code></span> or <span class="italic"><code>xpath</code></span> is <code>NULL</code>.</p>
<p><a href="app_depr_upd.htm#GUID-4E781DD7-B60E-49A5-8238-9E7CD207238B__BABGIGID">Figure C-8</a> shows the syntax.</p>
<div class="figure" id="GUID-4E781DD7-B60E-49A5-8238-9E7CD207238B__BABGIGID">
<p class="titleinfigure">Figure C-8 DELETEXML Syntax</p>
<img width="610" height="46" src="img/GUID-001AAC67-F4B3-46C4-9E9E-F593C78D0CF3-default.gif" alt="Description of Figure C-8 follows" title="Description of Figure C-8 follows"/><br/>
<a href="img_text/GUID-001AAC67-F4B3-46C4-9E9E-F593C78D0CF3-print.htm">Description of &#34;Figure C-8 DELETEXML Syntax&#34;</a></div>
<!-- class="figure" -->
<p><a href="app_depr_upd.htm#GUID-4E781DD7-B60E-49A5-8238-9E7CD207238B__BABEJFDA">Example C-13</a> uses deprecated Oracle SQL function <code>deleteXML</code> to delete the <code>LineItem</code> element whose <code>ItemNumber</code> attribute has value <code>222</code>.</p>
<div class="example" id="GUID-4E781DD7-B60E-49A5-8238-9E7CD207238B__BABEJFDA">
<p class="titleinexample">Example C-13 Deletion of an Element Using DELETEXML (Deprecated)</p>
<pre dir="ltr">SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[@ItemNumber=222]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[@ITEMNUMBER=222]&#39;PASSINGPO
------------------------------------------------------------------------
&lt;LineItem ItemNumber=&#34;222&#34;&gt;
  &lt;Description&gt;The Harder They Come&lt;/Description&gt;
  &lt;Part Id=&#34;953562951413&#34; UnitPrice=&#34;22.95&#34; Quantity=&#34;1&#34;/&gt;
&lt;/LineItem&gt;

UPDATE purchaseorder
  SET OBJECT_VALUE = 
      <span class="bold">deleteXML</span>(OBJECT_VALUE, 
                &#39;/PurchaseOrder/LineItems/LineItem[@ItemNumber=&#34;222&#34;]&#39;)
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);

SELECT XMLQuery(&#39;$p/PurchaseOrder/LineItems/LineItem[@ItemNumber=222]&#39;
                PASSING po.OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  FROM purchaseorder po
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;AMCEWEN-20021009123336171PDT&#34;]&#39;
                  PASSING po.OBJECT_VALUE AS &#34;p&#34;);

XMLQUERY(&#39;$P/PURCHASEORDER/LINEITEMS/LINEITEM[@ITEMNUMBER=222]&#39;PASSINGPO
------------------------------------------------------------------------
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3410">
<tr>
<td class="cellalignment3417">
<table class="cellalignment3415">
<tr>
<td class="cellalignment3414"><a href="appjspec.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3414"><a href="app_depr_transl.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3419">
<table class="cellalignment3413">
<tr>
<td class="cellalignment3414"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3414"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3414"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3414"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3414"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>