<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1629"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Relational%20Views%20over%20XML%20Data"></a><title>Relational Views over XML Data</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="Relational database views over XML data provide conventional, relational access to XML content."/>
<meta name="dcterms.created" content="2016-12-08T13:53:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E41152-15"/>
<meta name="dcterms.isVersionOf" content="ADXDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="xdb13gen.htm" title="Previous" type="text/html"/>
<link rel="Next" href="xdb14vie.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41152-15.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-420496CE-D62F-4EBE-A76E-861B932AE1E6"></a> <span id="PAGE" style="display:none;">19/61</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='xdb_rel_views'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="ADXDB6124"></a>
<h1 id="ADXDB-GUID-420496CE-D62F-4EBE-A76E-861B932AE1E6" class="sect1"><span class="enumeration_chapter">9</span> Relational Views over XML Data</h1>
<div>
<p>Relational database views over XML data provide conventional, relational access to XML content.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb_rel_views.htm#GUID-614FF4CF-E438-4DA7-A6EB-4B673A52A8CF" title="You can use the XML-specific functions and methods provided by Oracle XML&nbsp;DB to create conventional database views that provide relational access to XML content. This lets programmers, tools, and applications that understand Oracle Database, but not necessarily XML, work with XML content stored in the database.">Introduction to Creating and Using Relational Views over XML Data</a></p>
</li>
<li>
<p><a href="xdb_rel_views.htm#GUID-72791BF5-0F8A-4164-9036-A8E1F920C3CF" title="To expose each document in an XMLType table as a row in a relational view, use CREATE OR REPLACE VIEW AS SELECT, selecting from a join of the XMLType table and a relational table that you create from the XML data using SQL/XML function XMLTable.">Creating a Relational View over XML: One Row for Each XML Document</a></p>
</li>
<li>
<p><a href="xdb_rel_views.htm#GUID-E550E7D4-0D19-47CA-B86F-76825EE54CE1" title="To expose data from multiple levels of an XMLType table as individual rows in a relational view, apply SQL/XML function XMLTable to each level. Use this technique whenever there is a one-to-many (1:N) relationship between documents in the XMLType table and rows in the view.">Creating a Relational View over XML: Mapping XML Nodes to Columns</a></p>
</li>
<li>
<p><a href="xdb_rel_views.htm#GUID-DFEC1462-BAD9-44CA-A9C4-88C27A0CD46C" title="If the relational columns of the structured component of an XMLIndex index over binary XML data match the columns of a relational view over that data, then the view too is effectively indexed.">Indexing Binary XML Data Exposed Using a Relational View</a></p>
</li>
<li>
<p><a href="xdb_rel_views.htm#GUID-E01598F7-2AB9-406A-9C33-678943880812" title="Examples here show relational queries of XML data. They illustrate some of the benefits provided by creating relational views over XMLType tables and columns.">Querying XML Content As Relational Data</a></p>
</li>
</ul>
</div>
<a id="ADXDB4134"></a>
<div class="props_rev_3"><a id="GUID-614FF4CF-E438-4DA7-A6EB-4B673A52A8CF"></a>
<h2 id="ADXDB-GUID-614FF4CF-E438-4DA7-A6EB-4B673A52A8CF" class="sect2"><span class="enumeration_section">9.1</span> Introduction to Creating and Using Relational Views over XML Data</h2>
<div>
<p>You can use the XML-specific functions and methods provided by Oracle XML&nbsp;DB to create conventional database views that provide relational access to XML content. This lets programmers, tools, and applications that understand Oracle Database, but not necessarily XML, work with XML content stored in the database.</p>
<p>The relational views can use XQuery expressions and SQL/XML functions such as <code>XMLTable</code> to define a mapping between columns in the view and nodes in an XML document.</p>
<div class="infoboxnotealso" id="GUID-614FF4CF-E438-4DA7-A6EB-4B673A52A8CF__GUID-AFF36E4B-DB3A-4E89-99FF-1FDE11F1FF92">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb_xquery.htm#GUID-4F83A835-C94B-4D62-999B-111AB5E8A8F1" title="The XQuery language is one of the main ways that you interact with XML data in Oracle XML&nbsp;DB. Support for the language includes SQL*Plus commandXQUERY and SQL/XML functions XMLQuery, XMLTable, XMLExists, and XMLCast.">XQuery and Oracle XML&nbsp;DB</a></p>
</li>
<li>
<p><a href="xdb_indexing.htm#GUID-FE16BE28-035C-49EE-9683-6ED37876C3FC" title="You can create indexes on your XML data, to focus on particular parts of it that you query often and thus improve performance. There are various ways that you can index XMLType data, whether it is XML schema-based or non-schema-based, and regardless of the XMLType storage model you use.">Indexes for XMLType Data</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="ADXDB4136"></a><a id="ADXDB4135"></a>
<div class="props_rev_3"><a id="GUID-72791BF5-0F8A-4164-9036-A8E1F920C3CF"></a>
<h2 id="ADXDB-GUID-72791BF5-0F8A-4164-9036-A8E1F920C3CF" class="sect2"><span class="enumeration_section">9.2</span> Creating a Relational View over XML: One Row for Each XML Document</h2>
<div>
<p>To expose each document in an <code>XMLType</code> table as a row in a relational view, use <code>CREATE OR REPLACE VIEW AS SELECT</code>, selecting from a join of the <code>XMLType</code> table and a relational table that you create from the XML data using SQL/XML function <code>XMLTable</code>.</p>
<div class="section">
<p>You use standard SQL/XML function <code>XMLTable</code> to map nodes in the XML document to columns in the view. Use this technique whenever there is a one-to-<span class="italic">one</span> (1:1) relationship between documents in the <code>XMLType</code> table and the rows in the view.</p>
<p><a href="xdb_rel_views.htm#GUID-72791BF5-0F8A-4164-9036-A8E1F920C3CF__BJFCIHJE">Example 9-1</a> creates relational view <code>purchaseorder_master_view</code>, which has one row for each row in <code>XMLType</code> table <code>po_binaryxml</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-72791BF5-0F8A-4164-9036-A8E1F920C3CF__BJFCIHJE">
<p class="titleinexample">Example 9-1 Creating a Relational View of XML Content</p>
<pre>CREATE TABLE po_binaryxml OF XMLType
  XMLTYPE STORE AS BINARY XML;

INSERT INTO po_binaryxml SELECT OBJECT_VALUE FROM OE.purchaseorder;

CREATE OR REPLACE VIEW <span class="bold">purchaseorder_master_view</span> AS
  SELECT <span class="bold">po.*</span>
    FROM po_binaryxml pur,
         XMLTable(
           &#39;$p/PurchaseOrder&#39; PASSING pur.OBJECT_VALUE as &#34;p&#34;
           COLUMNS
             reference       VARCHAR2(30)   PATH &#39;Reference&#39;,
             requestor       VARCHAR2(128)  PATH &#39;Requestor&#39;,
             userid          VARCHAR2(10)   PATH &#39;User&#39;,
             costcenter      VARCHAR2(4)    PATH &#39;CostCenter&#39;,
             ship_to_name    VARCHAR2(20)   PATH &#39;ShippingInstructions/name&#39;,
             ship_to_address VARCHAR2(256)  PATH &#39;ShippingInstructions/address&#39;,
             ship_to_phone   VARCHAR2(24)   PATH &#39;ShippingInstructions/telephone&#39;,
             instructions    VARCHAR2(2048) PATH &#39;SpecialInstructions&#39;) <span class="bold">po</span>;

View created.

DESCRIBE purchaseorder_master_view

Name            Null?    Type
--------------------------------------------
REFERENCE                VARCHAR2(30)
REQUESTOR                VARCHAR2(128)
USERID                   VARCHAR2(10)
COSTCENTER               VARCHAR2(4)
SHIP_TO_NAME             VARCHAR2(20)
SHIP_TO_ADDRESS          VARCHAR2(256)
SHIP_TO_PHONE            VARCHAR2(24)
INSTRUCTIONS             VARCHAR2(2048)
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4138"></a><a id="ADXDB4137"></a>
<div class="props_rev_3"><a id="GUID-E550E7D4-0D19-47CA-B86F-76825EE54CE1"></a>
<h2 id="ADXDB-GUID-E550E7D4-0D19-47CA-B86F-76825EE54CE1" class="sect2"><span class="enumeration_section">9.3</span> Creating a Relational View over XML: Mapping XML Nodes to Columns</h2>
<div>
<p>To expose data from multiple levels of an <code>XMLType</code> table as individual rows in a relational view, apply SQL/XML function <code>XMLTable</code> to each level. Use this technique whenever there is a one-to-<span class="italic">many</span> (1:N) relationship between documents in the <code>XMLType</code> table and rows in the view.</p>
<div class="section">
<p>That is, you use the same general approach as for breaking up a single level (see <span class="q">&#34;<a href="xdb_rel_views.htm#GUID-72791BF5-0F8A-4164-9036-A8E1F920C3CF" title="To expose each document in an XMLType table as a row in a relational view, use CREATE OR REPLACE VIEW AS SELECT, selecting from a join of the XMLType table and a relational table that you create from the XML data using SQL/XML function XMLTable.">Creating a Relational View over XML: One Row for Each XML Document</a>&#34;</span>): Define the columns making up the view, and map the XML nodes to those columns. But in this case you apply <code>XMLTable</code> to each document level that is to be broken up and stored in relational columns.</p>
<p>For example, each <code>PurchaseOrder</code> element contains a <code>LineItems</code> element, which in turn contains one or more <code>LineItem</code> elements. Each <code>LineItem</code> element has child elements, such as <code>Description</code>, and an <code>ItemNumber</code> attribute. To make such lower-level data accessible as a relational value, use <code>XMLTable</code> to project both the <code>PurchaseOrder</code> element and the <code>LineItem</code> collection.</p>
<p>When element <code>PurchaseOrder</code> is broken up, its descendant <code>LineItem</code> element is mapped to a column of type <code>XMLType</code>, which contains an XML fragment. That column is then passed to a second call to <code>XMLTable</code> to be broken into its various parts as multiple columns of relational values.</p>
<p><a href="xdb_rel_views.htm#GUID-E550E7D4-0D19-47CA-B86F-76825EE54CE1__CHDEEIFD">Example 9-2</a> illustrates this. It uses <code>XMLTable</code> to effect a one-to-<span class="italic">many</span> (1:N) relationship between the documents in <code>XMLType</code> table <code>po_binaryxml</code> and the rows in relational view <code>purchaseorder_detail_view</code>. The view provides access to the individual members of a collection and exposes the collection members as a set of rows.</p>
<p>In <a href="xdb_rel_views.htm#GUID-E550E7D4-0D19-47CA-B86F-76825EE54CE1__CHDEEIFD">Example 9-2</a>, there is one row in view <code>purchaseorder_detail_view</code> for each <code>LineItem</code> element in the XML documents stored in <code>XMLType</code> table <code>po_binaryxml</code>.</p>
<p>The <code>CREATE OR REPLACE VIEW</code> statement of <a href="xdb_rel_views.htm#GUID-E550E7D4-0D19-47CA-B86F-76825EE54CE1__CHDEEIFD">Example 9-2</a> defines the set of relational columns that make up the view. The <code>SELECT</code> statement passes table <code>po_binaryxml</code> as context to function <code>XMLTable</code> to create virtual table <code>p</code>, which has columns <code>reference</code> and <code>lineitem</code>. These columns contain the <code>Reference</code> and <code>LineItem</code> elements of the purchase-order documents, respectively.</p>
<p>Column <code>lineitem</code> contains a collection of <code>LineItem</code> elements as an <code>XMLType</code> instance&thinsp;&mdash;&thinsp;one row for each element. These rows are in turn passed to a second <code>XMLTable</code> expression to serve as its context. This second <code>XMLTable</code> expression creates a virtual table of line-item rows, with columns corresponding to various descendant nodes of element <code>LineItem</code>. Most of these descendants are attributes (<code>ItemNumber</code>, <code>Part/@Id</code>, and so on). One of the descendants is the child element <code>Description</code>.</p>
<p>Element <code>Reference</code> is projected in view <code>purchaseorder_detail_view</code> as column <code>reference</code>. It provides a foreign key that can be used to join rows in view <code>purchaseorder_detail_view</code> to corresponding rows in view <code>purchaseorder_master_view</code>. The correlated join in the <code>CREATE OR REPLACE VIEW</code> statement ensures that the one-to-many (1:N) relationship between element <code>Reference</code> and the associated <code>LineItem</code> elements is maintained whenever the view is accessed.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E550E7D4-0D19-47CA-B86F-76825EE54CE1__CHDEEIFD">
<p class="titleinexample">Example 9-2 Accessing Individual Members of a Collection Using a View</p>
<pre dir="ltr">CREATE OR REPLACE VIEW <span class="bold">purchaseorder_detail_view</span> AS
  SELECT <span class="bold">po.reference</span>, <span class="bold">li.*</span>
    FROM po_binaryxml p,
         XMLTable(&#39;/PurchaseOrder&#39; PASSING p.OBJECT_VALUE
                  COLUMNS
                    <span class="bold">reference</span> VARCHAR2(30) PATH &#39;Reference&#39;,
                    lineitem  XMLType      PATH &#39;LineItems/LineItem&#39;) <span class="bold">po</span>,
         XMLTable(&#39;/LineItem&#39; PASSING po.lineitem
                  COLUMNS
                    itemno      NUMBER(38)    PATH &#39;@ItemNumber&#39;,
                    description VARCHAR2(256) PATH &#39;Description&#39;,
                    partno      VARCHAR2(14)  PATH &#39;Part/@Id&#39;,
                    quantity    NUMBER(12, 2) PATH &#39;Part/@Quantity&#39;,
                    unitprice   NUMBER(8, 4)  PATH &#39;Part/@UnitPrice&#39;) <span class="bold">li</span>;

View created.

DESCRIBE purchaseorder_detail_view
Name           Null?    Type
----------------------------
REFERENCE               VARCHAR2(30)
ITEMNO                  NUMBER(38)
DESCRIPTION             VARCHAR2(256)
PARTNO                  VARCHAR2(14)
QUANTITY                NUMBER(12,2)
UNITPRICE               NUMBER(8,4)
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB6126"></a><a id="ADXDB6127"></a><a id="ADXDB6125"></a>
<div class="props_rev_3"><a id="GUID-DFEC1462-BAD9-44CA-A9C4-88C27A0CD46C"></a>
<h2 id="ADXDB-GUID-DFEC1462-BAD9-44CA-A9C4-88C27A0CD46C" class="sect2"><span class="enumeration_section">9.4</span> Indexing Binary XML Data Exposed Using a Relational View</h2>
<div>
<p>If the relational columns of the structured component of an <code>XMLIndex</code> index over binary XML data match the columns of a relational view over that data, then the view too is effectively indexed.</p>
<div class="section">
<p>When the <code>XMLType</code> data that is exposed in a relational view is stored as binary XML, you can typically improve performance by creating an <code>XMLIndex</code> index that has a structured component that matches the view columns. Such an index projects parts of the XML data onto relational columns, just as the view does. When the columns of the index match the columns of the view, the view is itself indexed.</p>
<p>To simplify the creation of such an <code>XMLIndex</code> index, you can PL/SQL function <code>DBMS_XMLSTORAGE_MANAGE.getSIDXDefFromView</code> to provide exactly the <code>XMLTable</code> expression needed for creating the index. That is the sole purpose of this function: to return an <code>XMLTable</code> expression that you can use to create an <code>XMLIndex</code> index for a relational view. It takes the view as argument and returns a <code>CLOB</code> instance. <a href="xdb_rel_views.htm#GUID-DFEC1462-BAD9-44CA-A9C4-88C27A0CD46C__BACDHEJH">Example 9-3</a> illustrates this.</p>
<p><a href="xdb_rel_views.htm#GUID-DFEC1462-BAD9-44CA-A9C4-88C27A0CD46C__BACDCDFI">Example 9-4</a> shows the <code>XMLTable</code> expression used in <a href="xdb_rel_views.htm#GUID-DFEC1462-BAD9-44CA-A9C4-88C27A0CD46C__BACDHEJH">Example 9-3</a>.</p>
<div class="infoboxnotealso" id="GUID-DFEC1462-BAD9-44CA-A9C4-88C27A0CD46C__GUID-AF4B1DCB-CFF7-4756-9BB7-EC47360DF2F4">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb_indexing.htm#GUID-476331FD-F58B-4980-BECD-015F0A794AC9" title="An XMLIndex structured component indexes specific islands of structure in your XML data.">Use of XMLIndex with a Structured Component</a>&#34;</span></p>
</li>
<li>
<p><a class="olink ARPLS74791" target="_blank" href="../ARPLS/d_xmlschema_annotate.htm#ARPLS74791"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about PL/SQL function <code>DBMS_XMLSTORAGE_MANAGE.getSIDXDefFromView</code></p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-DFEC1462-BAD9-44CA-A9C4-88C27A0CD46C__BACDHEJH">
<p class="titleinexample">Example 9-3 XMLIndex Index that Matches Relational View Columns</p>
<pre dir="ltr">CALL DBMS_XMLINDEX.registerParameter(
  &#39;my_param&#39;,
  DBMS_XMLSTORAGE_MANAGE.<span class="bold">getSIDXDefFromView</span>(&#39;PURCHASEORDER_MASTER_VIEW&#39;));<a id="fn_1" href="#fn_1" onclick="footdisplay(1,&#34;The view-name argument to getSIDXDefFromView must be uppercase, because that is how the name is recorded. &#34;)"><sup>Foot 1</sup></a>

CREATE INDEX my_idx on po_binaryxml (OBJECT_VALUE) INDEXTYPE IS XDB.XMLIndex
  PARAMETERS (&#39;PARAM my_param&#39;);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-DFEC1462-BAD9-44CA-A9C4-88C27A0CD46C__BACDCDFI">
<p class="titleinexample">Example 9-4 XMLTable Expression Returned by PL/SQL Function getSIDXDefFromView</p>
<pre dir="ltr">SELECT DBMS_XMLSTORAGE_MANAGE.getSIDXDefFromView(&#39;PURCHASEORDER_MASTER_VIEW&#39;)
  FROM DUAL;

XMLTABLE po_binaryxml_XTAB_1 &#39;/PurchaseOrder&#39; PASSING OBJECT_VALUE
  COLUMNS
    reference       VARCHAR2   (30) PATH &#39;Reference&#39;,
    requestor       VARCHAR2  (128) PATH &#39;Requestor&#39;,
    userid          VARCHAR2   (10) PATH &#39;User&#39;,
    costcenter      VARCHAR2    (4) PATH &#39;CostCenter&#39;,
    ship_to_name    VARCHAR2   (20) PATH &#39;ShippingInstructions/name&#39;,
    ship_to_address VARCHAR2  (256) PATH &#39;ShippingInstructions/address&#39;,
    ship_to_phone   VARCHAR2   (24) PATH &#39;ShippingInstructions/telephone&#39;,
    instructions    VARCHAR2 (2048) PATH &#39;SpecialInstructions&#39;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4140"></a><a id="ADXDB6128"></a><a id="ADXDB4141"></a><a id="ADXDB4139"></a>
<div class="props_rev_3"><a id="GUID-E01598F7-2AB9-406A-9C33-678943880812"></a>
<h2 id="ADXDB-GUID-E01598F7-2AB9-406A-9C33-678943880812" class="sect2"><span class="enumeration_section">9.5</span> Querying XML Content As Relational Data</h2>
<div>
<p>Examples here show relational queries of XML data. They illustrate some of the benefits provided by creating relational views over <code>XMLType</code> tables and columns.</p>
<div class="section">
<p><a href="xdb_rel_views.htm#GUID-E01598F7-2AB9-406A-9C33-678943880812__BJFCEJFA">Example 9-5</a> and <a href="xdb_rel_views.htm#GUID-E01598F7-2AB9-406A-9C33-678943880812__BACDJBDA">Example 9-6</a> show how to query master and detail relational views of XML data. <a href="xdb_rel_views.htm#GUID-E01598F7-2AB9-406A-9C33-678943880812__BJFCEJFA">Example 9-5</a> queries the master view to select the rows where column <code>userid</code> starts with <code>S</code>.</p>
<p><a href="xdb_rel_views.htm#GUID-E01598F7-2AB9-406A-9C33-678943880812__BACDJBDA">Example 9-6</a> joins the master view and the detail view. It selects the <code>purchaseorder_detail_view</code> rows where the value of column <code>itemno</code> is <code>1</code> and the corresponding <code>purchaseorder_master_view</code> row contains a <code>userid</code> column with the value <code>SBELL</code>.</p>
<p><a href="xdb_rel_views.htm#GUID-E01598F7-2AB9-406A-9C33-678943880812__BJFBEFDD">Example 9-7</a> shows how to use relational views over XML content to perform business-intelligence queries on XML documents. The example query selects <code>PurchaseOrder</code> documents that contain orders for titles identified by UPC codes <code>715515009058</code> and <code>715515009126</code>.</p>
<p>The query in <a href="xdb_rel_views.htm#GUID-E01598F7-2AB9-406A-9C33-678943880812__BJFBEFDD">Example 9-7</a> determines the number of copies of each film title that are ordered in each <code>PurchaseOrder</code> document. For example, for part number <code>715515009126</code>, there are four <code>PurchaseOrder</code> documents where one copy of the item is ordered and seven <code>PurchaseOrder</code> documents where three copies of the item are ordered.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E01598F7-2AB9-406A-9C33-678943880812__BJFCEJFA">
<p class="titleinexample">Example 9-5 Querying Master Relational View of XML Data</p>
<pre dir="ltr">SELECT reference, costcenter, ship_to_name
  FROM purchaseorder_master_view
  WHERE userid LIKE &#39;S%&#39;;
 
REFERENCE                      COST SHIP_TO_NAME
------------------------------ ---- --------------
SBELL-20021009123336231PDT     S30  Sarah J. Bell
SBELL-20021009123336331PDT     S30  Sarah J. Bell
SKING-20021009123336321PDT     A10  Steven A. King
...
36 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E01598F7-2AB9-406A-9C33-678943880812__BACDJBDA">
<p class="titleinexample">Example 9-6 Querying Master and Detail Relational Views of XML Data</p>
<pre dir="ltr">SELECT d.reference, d.itemno, d.partno, d.description
  FROM purchaseorder_detail_view d, purchaseorder_master_view m
  WHERE m.reference = d.reference
    AND m.userid = &#39;SBELL&#39;
    AND d.itemno = 1;

REFERENCE                          ITEMNO PARTNO         DESCRIPTION
------------------------------ ------------------------------------------------
SBELL-20021009123336231PDT              1 37429165829    Juliet of the Spirits
SBELL-20021009123336331PDT              1 715515009225   Salo
SBELL-20021009123337353PDT              1 37429141625    The Third Man
SBELL-20021009123338304PDT              1 715515009829   Nanook of the North
SBELL-20021009123338505PDT              1 37429122228    The 400 Blows
SBELL-20021009123335771PDT              1 37429139028    And the Ship Sails on
SBELL-20021009123335280PDT              1 715515011426   All That Heaven Allows
SBELL-2002100912333763PDT               1 715515010320   Life of Brian - Python
SBELL-2002100912333601PDT               1 715515009058   A Night to Remember
SBELL-20021009123336362PDT              1 715515012928   In the Mood for Love
SBELL-20021009123336532PDT              1 37429162422    Wild Strawberries
SBELL-20021009123338204PDT              1 37429168820    Red Beard
SBELL-20021009123337673PDT              1 37429156322    Cries and Whispers

13 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E01598F7-2AB9-406A-9C33-678943880812__BJFBEFDD">
<p class="titleinexample">Example 9-7 Business-Intelligence Query of XML Data Using a View</p>
<pre dir="ltr">SELECT partno, count(*) &#34;No of Orders&#34;, quantity &#34;No of Copies&#34;
  FROM purchaseorder_detail_view
  WHERE partno IN (715515009126, 715515009058)
  GROUP BY rollup(partno, quantity);
 
PARTNO         No of Orders No of Copies
-------------- ------------ ------------
715515009058              7            1
715515009058              9            2
715515009058              5            3
715515009058              2            4
715515009058             23
715515009126              4            1
715515009126              7            3
715515009126             11
                         34 
9 rows selected.
</pre></div>
<!-- class="example" --></div>
</div>
<hr/>
<br/>
<p style="text-decoration:underline">Footnote Legend</p>
Footnote&nbsp;1:
<p>The view-name argument to <code>getSIDXDefFromView</code> must be uppercase, because that is how the name is recorded.</p>
<br/></div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3410">
<tr>
<td class="cellalignment3417">
<table class="cellalignment3415">
<tr>
<td class="cellalignment3414"><a href="xdb13gen.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3414"><a href="xdb14vie.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3419">
<table class="cellalignment3413">
<tr>
<td class="cellalignment3414"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3414"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3414"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3414"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3414"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>