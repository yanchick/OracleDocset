<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1610"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Java%20DOM%20API%20for%20XMLType"></a><title>Java DOM API for XMLType</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="The Java DOM API for XMLType lets you operate on XMLType instances using a DOM. You can use it to manipulate XML data in Java, including fetching it through Java Database Connectivity (JDBC)."/>
<meta name="keywords" content="DOM, Java API for XMLType, Java, DOM API for XMLType, JDBC, accessing XML documents, manipulating XML documents, drivers, OCI and thin, loading large XML documents, loading large XML documents using JDBC, getCLOB() XMLType method, XMLType, methods, getCLOB(), methods, XMLType, connections, thick and thin, SQLJ"/>
<meta name="dcterms.created" content="2016-12-08T13:53:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E41152-15"/>
<meta name="dcterms.isVersionOf" content="ADXDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="xdb_dbmstore.htm" title="Previous" type="text/html"/>
<link rel="Next" href="xdb12oci.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41152-15.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-4C510052-8A31-4917-8567-0E2825927C54"></a> <span id="PAGE" style="display:none;">24/61</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='xdb11jav'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="ADXDB1300"></a>
<h1 id="ADXDB-GUID-4C510052-8A31-4917-8567-0E2825927C54" class="sect1"><span class="enumeration_chapter">13</span> Java DOM API for XMLType</h1>
<div>
<p>The Java DOM API for <code>XMLType</code> lets you operate on <code>XMLType</code> instances using a DOM. You can use it to manipulate XML data in Java, including fetching it through Java Database Connectivity (JDBC).</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb11jav.htm#GUID-353F087D-90D2-4337-B346-342E002FED36" title="Oracle XML&nbsp;DB supports the Java Document Object Model (DOM) Application Program Interface (API) for XMLType. This is a generic API for client and server, for both XML Schema-based and non-schema-based documents.">Overview of Java DOM API for XMLType</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-225EFCBA-435C-4461-A3A1-54FC14AFF530" title="Java Database Connectivity (JDBC) is a SQL-based way for Java applications to access any data in Oracle Database, including XML documents in Oracle XML&nbsp;DB.">Access to XMLType Data Using JDBC</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-2F228754-D548-44F2-8C09-7DFAB1793799" title="You can update, insert, and delete XMLType data stored in the database using Java Database Connectivity (JDBC) with Oracle XML&nbsp;DB.">Manipulating XML Database Documents Using JDBC</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-B41ECF30-93FD-43D2-9F12-649890E68C52" title="To load a large XML document into the database using Java Database Connectivity (JDBC), use a Java CLOB object to hold the document, and use Java method insertXML() to perform the insertion.">Loading a Large XML Document into the Database Using JDBC</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-6533CA45-5048-4B18-B099-7359E643E169" title="The Java DOM API for XMLType supports deep and shallow searching within a document to retrieve children and properties of XML objects such as name and namespace. It lets applications create XML documents programmatically, including on the fly (dynamically). Such documents can conform to a registered XML schema or not.">Java DOM API for XMLType Features</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-AB51C56E-03E8-4B86-8D99-7C59E35F3DAF" title="If you use Java Security Manager (class SecurityManager) on MS Windows to implement a security policy for your application, then you must add certain permissions to your security policy file, in order to use the Java DOM API for XMLType with a thick connection.">MS Windows Java Security Manager Permissions for Java DOM API with a Thick Connection</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-7C93723D-5D83-4444-BD06-216BECAE4983" title="To create XML Schema-based documents, Java DOM API for XMLType uses an extension to specify which XML schema URL to use. It also verifies that the DOM being created conforms to the specified XML schema, that is, that the appropriate children are being inserted under the appropriate documents.">Creating XML Schema-Based Documents</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-6144192C-114A-4120-B117-D7FB6B871CDE" title="Oracle XML&nbsp;DB supports the W3C DOM Level 2 Recommendation. It also provides Oracle-specific extensions, to facilitate interfacing your application with Oracle XML Developer&#39;s Kit for Java. The Java DOM API for XMLType provides classes that implement W3C DOM interfaces.">Classes of Java DOM API for XMLType</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-3E7F205E-A19A-4CE4-91A1-D1BE63516F4A" title="Several classes and methods of the Java DOM API for XMLType that were used in releases prior to Oracle Database&nbsp;11g Release 1 have been deprecated or desupported.">Java DOM API for XMLType Classes and Methods That Are Deprecated or Not Supported</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-F5F719CF-F383-4677-A655-6329C1E462FA" title="Retrieve data from an XMLType table or column and obtain a Java XMLDocument instance from it. Manipulate elements of the DOM tree for the data using the Java DOM API for XMLType.">Using the Java DOM API for XMLType</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-292AD380-743C-4E36-BDD1-039A279006C0" title="Oracle XML&nbsp;DB provides abstract streams and stream-manipulation methods that you can use to handle XML nodes that are larger than 64 K bytes. Use Java classes XMLNode and XMLAttr, together with a thick or kprb connection, to manipulate large nodes.">Large XML Node Handling with Java</a></p>
</li>
<li>
<p><a href="xdb11jav.htm#GUID-1234728D-0732-4DC6-82EF-9D372702061F" title="You can use the Java DOM API for XML and Java Database Connectivity (JDBC) to read or write XML data that is encoded as binary XML from or to Oracle XML DB. Doing so involves the usual read and write procedures.">Using the Java DOM API and JDBC with Binary XML</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-4C510052-8A31-4917-8567-0E2825927C54__GUID-5FD77191-E90B-4564-9271-113020E528D8">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="xdb04cre.htm#GUID-8F3B9C09-6877-4E43-A6E7-873BF0E74DAB" title="XQuery API for Java (XQJ), also known as JSR-225, provides an industry-standard way for Java programs to access XML data using XQuery. It lets you evaluate XQuery expressions against XML data sources and process the results as XML data.">Using XQuery with XQJ to Access Database Data</a>&#34;</span></p>
</div>
</div>
<a id="ADXDB4931"></a>
<div class="props_rev_3"><a id="GUID-353F087D-90D2-4337-B346-342E002FED36"></a>
<h2 id="ADXDB-GUID-353F087D-90D2-4337-B346-342E002FED36" class="sect2"><span class="enumeration_section">13.1</span> Overview of Java DOM API for XMLType</h2>
<div>
<p>Oracle XML&nbsp;DB supports the Java Document Object Model (DOM) Application Program Interface (API) for <code>XMLType</code>. This is a generic API for client and server, for both XML Schema-based and non-schema-based documents.</p>
<p>DOM is a tree-based object representation of XML documents in dynamic memory that enables programmatic access to their elements and attributes. The DOM object and interface are part of a W3C recommendation. As discussed in <a href="xdb10pls.htm#GUID-2D5B2D47-9CFF-49D0-9BD8-114BBE48A289" title="There are several PL/SQL packages that provide APIs for XMLType.">PL/SQL APIs for XMLType</a>, the Oracle XML&nbsp;DB DOM APIs are compliant with the W3C DOM Level 1.0 and Level 2.0 Core Recommendation.</p>
<p>The Java DOM API for <code>XMLType</code> handles all well-formed XML documents stored in Oracle XML&nbsp;DB. It presents a uniform view of an XML document, whether it is XML Schema-based or non-schema-based and whatever the underlying <code>XMLType</code> storage model. The Java DOM API works on both client and server.</p>
<p>The Java DOM API for <code>XMLType</code> can be used to construct an <code>XMLType</code> instance from data encoded in different character sets.</p>
<p>You can use the Java DOM API for <code>XMLType</code> to access XML documents stored in Oracle XML&nbsp;DB Repository from Java applications. Naming conforms to the Java binding for DOM as specified by the W3C DOM Recommendation. The repository can contain both XML schema-based and non-schema-based documents.</p>
<p>To access <code>XMLType</code> data using JDBC, use the class <code>oracle.xdb.XMLType</code>.</p>
<p>The Java DOM API for <code>XMLType</code> is implemented using Java package <code>oracle.xml.parser.v2</code>.</p>
<div class="infoboxnotealso" id="GUID-353F087D-90D2-4337-B346-342E002FED36__GUID-7FDBC05D-9534-4E94-9AE2-CD0DE91D2B10">
<p class="notep1">See Also:</p>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a></p>
</div>
</div>
</div>
<a id="ADXDB4933"></a>
<div class="props_rev_3"><a id="GUID-225EFCBA-435C-4461-A3A1-54FC14AFF530"></a>
<h2 id="ADXDB-GUID-225EFCBA-435C-4461-A3A1-54FC14AFF530" class="sect2"><span class="enumeration_section">13.2</span> Access to XMLType Data Using JDBC</h2>
<div>
<p>Java Database Connectivity (JDBC) is a SQL-based way for Java applications to access any data in Oracle Database, including XML documents in Oracle XML&nbsp;DB.</p>
<p>You use Java class <code>oracle.xdb.XMLType</code>, method <code>createXML()</code> to create XML data.</p>
<div class="infobox-note" id="GUID-225EFCBA-435C-4461-A3A1-54FC14AFF530__GUID-5EE9B003-EA31-4F59-90E0-CC827D5EA6A2">
<p class="notep1">Note:</p>
<p>Use the thick driver with method <code>XMLType.createXML()</code> if you pass a stream as input. You cannot use the thin driver in this case.</p>
</div>
<p>The JDBC 4.0 standard data type for XML data is <code>java.sql.SQLXML</code>. Method <code>getObject()</code> returns an object of type <code>oracle.xdb.XMLType</code>. Starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.3), <code>oracle.xdb.XMLType</code> implements interface <code>java.sql.SQLXML</code>.</p>
</div>
<a id="ADXDB4935"></a><a id="ADXDB5887"></a><a id="ADXDB4937"></a><a id="ADXDB4938"></a><a id="ADXDB4934"></a>
<div class="props_rev_3"><a id="GUID-01FFCF6C-0197-417E-B1E6-6CF2FF770179"></a>
<h3 id="ADXDB-GUID-01FFCF6C-0197-417E-B1E6-6CF2FF770179" class="sect3"><span class="enumeration_section">13.2.1</span> Using JDBC to Access XML Documents in Oracle XML&nbsp;DB</h3>
<div>
<p>JDBC users can query an <code>XMLType</code> table to obtain a JDBC <code>XMLType</code> interface that supports all SQL/XML functions supported by SQL data type <code>XMLType</code>. The Java (JDBC) API for <code>XMLType</code> interface can implement the DOM document interface.</p>
<div class="section">
<p><a href="xdb11jav.htm#GUID-01FFCF6C-0197-417E-B1E6-6CF2FF770179__CHDHEGED">Example 13-1</a> illustrates how to use JDBC to query an <code>XMLType</code> table:</p>
<p>You can select <code>XMLType</code> data using JDBC in any of these ways:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Use SQL/XML function <code>XMLSerialize</code> in SQL, and obtain the result as an <code>oracle.sql.CLOB</code>, <code>java.lang.String</code> or <code>oracle.sql.BLOB</code> in Java. The Java snippet in <a href="xdb11jav.htm#GUID-01FFCF6C-0197-417E-B1E6-6CF2FF770179__CHDGIDFE">Example 13-2</a> illustrates this.</p>
</li>
<li>
<p>Call method <code>getObject()</code> in the <code>PreparedStatement</code> to obtain the whole <code>XMLType</code> instance. The return value of this method is of type <code>oracle.xdb.XMLType</code>. Then you can use Java functions on class <code>XMLType</code> to access the data. <a href="xdb11jav.htm#GUID-01FFCF6C-0197-417E-B1E6-6CF2FF770179__CHDJJHCE">Example 13-3</a> shows how to do this.</p>
</li>
</ul>
<p><a href="xdb11jav.htm#GUID-01FFCF6C-0197-417E-B1E6-6CF2FF770179__CHDJJHCE">Example 13-3</a> shows the use of method <code>getObject()</code> to directly obtain an <code>XMLType</code> instance from <code>ResultSet</code>.</p>
<p><a href="xdb11jav.htm#GUID-01FFCF6C-0197-417E-B1E6-6CF2FF770179__CHDGFDCD">Example 13-4</a> shows how to bind an output parameter of type <code>XMLType</code> to a SQL statement. The output parameter is registered as having data type <code>XMLType</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-01FFCF6C-0197-417E-B1E6-6CF2FF770179__CHDHEGED">
<p class="titleinexample">Example 13-1 Querying an XMLType Table Using JDBC</p>
<pre>import oracle.xdb.XMLType; 
... 
OraclePreparedStatement stmt = (OraclePreparedStatement)
conn.prepareStatement(&#34;SELECT e.poDoc FROM po_xml_tab e&#34;); 
ResultSet rset = stmt.executeQuery(); 
OracleResultSet orset = (OracleResultSet) rset; 
while(orset.next())
{ 
  // get the XMLType 
  <span class="bold">XMLType poxml = (XMLType)orset.getObject(1);</span> 
  // get the XMLDocument as a string... 
  Document podoc = (Document)poxml.getDOM(); 
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-01FFCF6C-0197-417E-B1E6-6CF2FF770179__CHDGIDFE">
<p class="titleinexample">Example 13-2 Selecting XMLType Data Using getStringVal() and getCLOB()</p>
<pre dir="ltr">DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
Connection conn = 
  DriverManager.getConnection(&#34;jdbc:oracle:oci8:@&#34;, &#34;QUINE&#34;, &#34;CURRY&#34;);
OraclePreparedStatement stmt = 
  (OraclePreparedStatement) conn.prepareStatement(
     &#34;SELECT <span class="bold">XMLSerialize</span>(DOCUMENT e.poDoc <span class="bold">AS CLOB</span>) poDoc, &#34; +
     &#34;<span class="bold">XMLSerialize</span>(DOCUMENT e.poDoc AS <span class="bold">VARCHAR2(2000)</span>) poString &#34; +
     &#34; FROM po_xml_tab e&#34;);
ResultSet rset = stmt.executeQuery();
OracleResultSet orset = (OracleResultSet) rset;
while(orset.next())
{
  // the first argument is a CLOB
  <span class="bold">oracle.sql.CLOB clb = orset.getCLOB(1);</span>
  // the second argument is a string..
  String poString = orset.getString(2);
  // now use the CLOB inside the program
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-01FFCF6C-0197-417E-B1E6-6CF2FF770179__CHDJJHCE">
<p class="titleinexample">Example 13-3 Returning XMLType Data Using getObject()</p>
<pre dir="ltr">import oracle.xdb.XMLType;
...
PreparedStatement stmt = conn.prepareStatement(
                           &#34;SELECT e.poDoc FROM po_xml_tab e&#34;); 
ResultSet rset = stmt.executeQuery(); 
while(rset.next())
{ 
  // get the XMLType 
  XMLType poxml = (XMLType)rset.<span class="bold">getObject</span>(1); 
  // get the XML as a string...
  String poString = poxml.getStringVal();
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-01FFCF6C-0197-417E-B1E6-6CF2FF770179__CHDGFDCD">
<p class="titleinexample">Example 13-4 Returning XMLType Data Using an Output Parameter</p>
<pre dir="ltr">public void doCall (String[] args) throws Exception 
{ 
  //  CREATE OR REPLACE FUNCTION getPurchaseOrder(reference VARCHAR2) 
  //  RETURN XMLTYPE 
  //  AS 
  //    xml XMLTYPE; 
  //  BEGIN 
  //    SELECT OBJECT_VALUE INTO xml 
  //      FROM purchaseorder 
  //      WHERE XMLCast(XMLQuery(&#39;$p/PurchaseOrder/Reference&#39;
  //                             PASSING OBJECT_VALUE AS &#34;p&#34; RETURNING CONTENT)
  //                    AS VARCHAR2(30))
  //            = reference;
  //      RETURN xml; 
  //  END; 
  String SQLTEXT = &#34;{? = call getPurchaseOrder(&#39;BLAKE-2002100912333601PDT&#39;)}&#34;; 
  CallableStatement sqlStatement = null; 
  XMLType xml = null; 
  super.doSomething(args); 
  createConnection(); 
  try 
  { 
    System.out.println(&#34;SQL := &#34; + SQLTEXT); 
    sqlStatement = getConnection().prepareCall(SQLTEXT); 
    sqlStatement.<span class="bold">registerOutParameter</span> (1, OracleTypes.OPAQUE,&#34;SYS.XMLTYPE&#34;); 
    sqlStatement.execute(); 
    xml = <span class="bold">(XMLType)</span> sqlStatement.<span class="bold">getObject</span>(1); 
    System.out.println(xml.getStringVal()); 
  } 
  catch (SQLException SQLe) 
  { 
    if (sqlStatement != null) 
    { 
      sqlStatement.close(); 
      throw SQLe; 
    } 
  }
} 
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB5889"></a><a id="ADXDB5890"></a><a id="ADXDB4941"></a><a id="ADXDB4942"></a><a id="ADXDB5891"></a><a id="ADXDB5892"></a><a id="ADXDB4939"></a>
<div class="props_rev_3"><a id="GUID-2F228754-D548-44F2-8C09-7DFAB1793799"></a>
<h2 id="ADXDB-GUID-2F228754-D548-44F2-8C09-7DFAB1793799" class="sect2"><span class="enumeration_section">13.3</span> Manipulating XML Database Documents Using JDBC</h2>
<div>
<p>You can update, insert, and delete <code>XMLType</code> data stored in the database using Java Database Connectivity (JDBC) with Oracle XML&nbsp;DB.</p>
<div class="section">
<div class="infobox-note" id="GUID-2F228754-D548-44F2-8C09-7DFAB1793799__GUID-6BBA39E0-1407-4055-A108-5DBEB6E92930">
<p class="notep1">Note:</p>
<p><code>XMLType</code> methods <code>extract()</code>, <code>transform()</code>, and <code>existsNode()</code> work only with the OCI driver.</p>
<p>Not all <code>oracle.xdb.XMLType</code> functions are supported by the thin JDBC driver. If you do not use <code>oracle.xdb.XMLType</code> classes and the OCI driver, you could lose performance benefits associated with the intelligent handling of XML.</p>
</div>
<p>You can update, insert, or delete <code>XMLType</code> data in either of these ways:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Bind a <code>CLOB</code> instance or a string to an <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statement, and use the <code>XMLType</code> constructor inside SQL to construct the XML instance. <a href="xdb11jav.htm#GUID-2F228754-D548-44F2-8C09-7DFAB1793799__CHDJFABC">Example 13-5</a> illustrates this.</p>
</li>
<li>
<p>Use <code>setObject()</code> in the <code>PreparedStatement</code> to set the entire <code>XMLType</code> instance. <a href="xdb11jav.htm#GUID-2F228754-D548-44F2-8C09-7DFAB1793799__CHDJBADD">Example 13-6</a> illustrates this.</p>
</li>
</ul>
<p>When selecting <code>XMLType</code> values, JDBC describes the column as an opaque type. You can select the column type name and compare it with <code>XMLTYPE</code> to see whether you are dealing with an <code>XMLType</code> instance. <a href="xdb11jav.htm#GUID-2F228754-D548-44F2-8C09-7DFAB1793799__i1031938">Example 13-7</a> illustrates this.</p>
<p><a href="xdb11jav.htm#GUID-2F228754-D548-44F2-8C09-7DFAB1793799__i1031963">Example 13-8</a> updates element <code>discount</code> inside element <code>PurchaseOrder</code> stored in an <code>XMLType</code> column. It uses JDBC and class <code>oracle.xdb.XMLType</code>. It uses the XML parser to update a DOM tree and write the updated XML value to the <code>XMLType</code> column.</p>
<p><a href="xdb11jav.htm#GUID-2F228754-D548-44F2-8C09-7DFAB1793799__CHDBDGFB">Example 13-9</a> shows the updated purchase order that results from <a href="xdb11jav.htm#GUID-2F228754-D548-44F2-8C09-7DFAB1793799__i1031963">Example 13-8</a>.</p>
<p><a href="xdb11jav.htm#GUID-2F228754-D548-44F2-8C09-7DFAB1793799__CHDEFDIE">Example 13-10</a> does all of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Selects an <code>XMLType</code> instance from an <code>XMLType</code> table</p>
</li>
<li>
<p>Extracts portions of the <code>XMLType</code> instance, based on an XPath expression</p>
</li>
<li>
<p>Checks for the existence of elements</p>
</li>
<li>
<p>Transforms the <code>XMLType</code> instance to another XML format based on XSL</p>
</li>
<li>
<p>Checks the validity of the <code>XMLType</code> document against an XML schema</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-2F228754-D548-44F2-8C09-7DFAB1793799__CHDJFABC">
<p class="titleinexample">Example 13-5 Updating XMLType Data Using SQL UPDATE with Constructor XMLType</p>
<pre dir="ltr">OraclePreparedStatement stmt = 
    (OraclePreparedStatement) conn.prepareStatement(
                                &#34;UPDATE po_xml_tab SET poDoc = <span class="bold">XMLType</span>(?)&#34;);
// the second argument is a string..
String poString = &#34;&lt;PO&gt;&lt;PONO&gt;200&lt;/PONO&gt;&lt;PNAME&gt;PO_2&lt;/PNAME&gt;&lt;/PO&gt;&#34;;
// now bind the string..
stmt.setString(1,poString);
stmt.execute();
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2F228754-D548-44F2-8C09-7DFAB1793799__CHDJBADD">
<p class="titleinexample">Example 13-6 Updating XMLType Data Using SQL UPDATE with setObject()</p>
<pre dir="ltr">import oracle.xdb.XMLType;
...
OraclePreparedStatement stmt = 
  (OraclePreparedStatement) conn.prepareStatement(
                              &#34;UPDATE po_xml_tab SET poDoc = ?&#34;);
// the second argument is a string
String poString = &#34;&lt;PO&gt;&lt;PONO&gt;200&lt;/PONO&gt;&lt;PNAME&gt;PO_2&lt;/PNAME&gt;&lt;/PO&gt;&#34;;
XMLType poXML = XMLType.createXML(conn, poString);
// now bind the string..
stmt.<span class="bold">setObject</span>(1,poXML);
stmt.execute();
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2F228754-D548-44F2-8C09-7DFAB1793799__i1031938">
<p class="titleinexample">Example 13-7 Retrieving Metadata about XMLType Data Using JDBC</p>
<pre dir="ltr">import oracle.sql.*;
import oracle.jdbc.*;
...
OraclePreparedStatement stmt = 
    (OraclePreparedStatement) conn.prepareStatement(
        &#34;SELECT poDoc FROM po_xml_tab&#34;);
OracleResultSet rset = (OracleResultSet)stmt.executeQuery();
// Get the resultset metadata
OracleResultSetMetaData mdata = 
        (OracleResultSetMetaData)rset.getMetaData();
// Describe the column = the column type comes out as OPAQUE
// and column type name comes out as XMLTYPE
if (mdata.getColumnType(1) == OracleTypes.OPAQUE &amp;&amp; 
    mdata.getColumnTypeName(1).compareTo(&#34;SYS.XMLTYPE&#34;) == 0)
{
   // It is an XMLtype instance
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2F228754-D548-44F2-8C09-7DFAB1793799__i1031963">
<p class="titleinexample">Example 13-8 Updating an Element in an XMLType Column Using JDBC</p>
<pre dir="ltr">-- Create po_xml_hist table to store old PurchaseOrders
CREATE TABLE po_xml_hist (xpo XMLType);
/* NOTE: You must have xmlparserv2.jar and xdb.jar in CLASSPATH */
import java.sql.*;
import java.io.*;
import oracle.xml.parser.v2.*;
import org.xml.sax.*;
import org.w3c.dom.*;
import oracle.jdbc.driver.*;
import oracle.sql.*;
import oracle.xdb.XMLType;
public class tkxmtpje
{
  static String conStr = &#34;jdbc:oracle:oci8:@&#34;;
  static String user = &#34;QUINE&#34;;
  static String pass = &#34;CURRY&#34;;
  static String qryStr =
  &#34;SELECT x.poDoc from po_xml_tab x &#34; +
  &#34;WHERE XMLCast(XMLQuery(&#39;/PO/PONO/text()&#39;&#34; +
  &#34; PASSING x.poDoc RETURNING CONTENT)&#34; +
  &#34; AS NUMBER)&#34; +
  &#34; = 200&#34;;
  static String updateXML(String xmlTypeStr)
  Java DOM API for XMLType
  Beta Draft Java DOM API for XMLType 15-7
  {
    System.out.println(&#34;\n===============================&#34;);
    System.out.println(&#34;xmlType.getStringVal():&#34;);
    System.out.println(xmlTypeStr);
    System.out.println(&#34;===============================&#34;);
    String outXML = null;
    try
    {
      DOMParser parser = new DOMParser();
      parser.setValidationMode(false);
      parser.setPreserveWhitespace (true);
      parser.parse(new StringReader(xmlTypeStr));
      System.out.println(&#34;xmlType.getStringVal(): xml String is well-formed&#34;);
      XMLDocument doc = parser.getDocument();
      NodeList nl = doc.getElementsByTagName(&#34;<span class="bold">DISCOUNT</span>&#34;);
      for(int i=0;i&lt;nl.getLength();i++)
      {
        XMLElement discount = (XMLElement)nl.item(i);
        XMLNode textNode = (XMLNode)discount.getFirstChild();
        textNode.setNodeValue(&#34;<span class="bold">10</span>&#34;);
      }
      StringWriter sw = new StringWriter();
      doc.print(new PrintWriter(sw));
      outXML = sw.toString();
      //print modified xml
      System.out.println(&#34;\n===============================&#34;);
      System.out.println(&#34;Updated PurchaseOrder:&#34;);
      System.out.println(outXML);
      System.out.println(&#34;===============================&#34;);
    }
    catch (Exception e)
    {
      e.printStackTrace(System.out);
    }
    return outXML;
  }
}
public static void main(String args[]) throws Exception
{
  try
  {
    System.out.println(&#34;qryStr=&#34; + qryStr);
    DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
    Connection conn =
    DriverManager.getConnection(&#34;jdbc:oracle:oci8:@&#34;, user, pass);
    Statement s = conn.createStatement();
    OraclePreparedStatement stmt;
    ResultSet rset = s.executeQuery(qryStr);
    OracleResultSet orset = (OracleResultSet) rset;
    while(orset.next())
    {
      //retrieve PurchaseOrder xml document from database
      XMLType xt = (XMLType)orset.getObject(1);
      //store this PurchaseOrder in po_xml_hist table
      stmt = (OraclePreparedStatement)conn.prepareStatement(
      &#34;INSERT INTO po_xml_hist VALUES(?)&#34;);
      stmt.setObject(1,xt); // bind the XMLType instance
      stmt.execute();
      //update &#34;DISCOUNT&#34; element
      String newXML = updateXML(xt.getStringVal());
      // create a new instance of an XMLtype from the updated value
      xt = XMLType.createXML(conn, newXML);
      // update PurchaseOrder xml document in database
      stmt = (OraclePreparedStatement)conn.prepareStatement(
      &#34;UPDATE po_xml_tab x SET x.poDoc =? WHERE &#34; +
      &#34;XMLCast(XMLQuery(&#39;/PO/PONO/text()&#39;&#34; +
      &#34; PASSING value(xmltab) RETURNING CONTENT)&#34; +
      &#34; AS NUMBER)&#34; +
      &#34;= 200&#34;);
      stmt.setObject(1,xt); // bind the XMLType instance
      stmt.execute();
      conn.commit();
      System.out.println(&#34;PurchaseOrder 200 Updated!&#34;);
    }
    //delete PurchaseOrder 1001
    s.execute(&#34;DELETE FROM po_xml x WHERE&#34; +
              &#34;XMLCast(XMLQuery(&#39;/PurchaseOrder/PONO/text()&#39;&#34; +
              &#34; PASSING value(xmltab) RETURNING CONTENT)&#34; +
              &#34; AS NUMBER)&#34; +
              &#34;= 1001&#34;);
    System.out.println(&#34;PurchaseOrder 1001 deleted!&#34;);
  }
  catch(Exception e)
  {
    e.printStackTrace(System.out);
  }
}
SELECT x.xpo.getCLOBVal() FROM po_xml x;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2F228754-D548-44F2-8C09-7DFAB1793799__CHDBDGFB">
<p class="titleinexample">Example 13-9 Updated Purchase-Order Document</p>
<pre dir="ltr">&lt;?xml version = &#34;1.0&#34;?&gt;
&lt;PurchaseOrder&gt;
  &lt;PONO&gt;200&lt;/PONO&gt;
  &lt;CUSTOMER&gt;
   &lt;CUSTNO&gt;2&lt;/CUSTNO&gt;
   &lt;CUSTNAME&gt;John Nike&lt;/CUSTNAME&gt;
   &lt;ADDRESS&gt;
    &lt;STREET&gt;323 College Drive&lt;/STREET&gt;
    &lt;CITY&gt;Edison&lt;/CITY&gt;
    &lt;STATE&gt;NJ&lt;/STATE&gt;
    &lt;ZIP&gt;08820&lt;/ZIP&gt;
   &lt;/ADDRESS&gt;
   &lt;PHONELIST&gt;
    &lt;VARCHAR2&gt;609-555-1212&lt;/VARCHAR2&gt;
    &lt;VARCHAR2&gt;201-555-1212&lt;/VARCHAR2&gt;
   &lt;/PHONELIST&gt;
  &lt;/CUSTOMER&gt;
  &lt;ORDERDATE&gt;20-APR-97&lt;/ORDERDATE&gt;
  &lt;SHIPDATE&gt;20-MAY-97 12.00.00.000000 AM&lt;/SHIPDATE&gt;
  &lt;LINEITEMS&gt;
   &lt;LINEITEM_TYP LineItemNo=&#34;1&#34;&gt;
    &lt;ITEM StockNo=&#34;1004&#34;&gt;
     &lt;PRICE&gt;6750&lt;/PRICE&gt;
     &lt;TAXRATE&gt;2&lt;/TAXRATE&gt;
    &lt;/ITEM&gt;
    &lt;QUANTITY&gt;1&lt;/QUANTITY&gt;
    <span class="bold">&lt;DISCOUNT&gt;10&lt;/DISCOUNT&gt;</span>
   &lt;/LINEITEM_TYP&gt;
   &lt;LINEITEM_TYP LineItemNo=&#34;2&#34;&gt;
    &lt;ITEM StockNo=&#34;1011&#34;&gt;
     &lt;PRICE&gt;4500.23&lt;/PRICE&gt;
     &lt;TAXRATE&gt;2&lt;/TAXRATE&gt;
    &lt;/ITEM&gt;
    &lt;QUANTITY&gt;2&lt;/QUANTITY&gt;
    <span class="bold">&lt;DISCOUNT&gt;10&lt;/DISCOUNT&gt;</span>
   &lt;/LINEITEM_TYP&gt;
  &lt;/LINEITEMS&gt;
  &lt;SHIPTOADDR&gt;
   &lt;STREET&gt;55 Madison Ave&lt;/STREET&gt;
   &lt;CITY&gt;Madison&lt;/CITY&gt;
   &lt;STATE&gt;WI&lt;/STATE&gt;
   &lt;ZIP&gt;53715&lt;/ZIP&gt;
  &lt;/SHIPTOADDR&gt;
&lt;/PurchaseOrder&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2F228754-D548-44F2-8C09-7DFAB1793799__CHDEFDIE">
<p class="titleinexample">Example 13-10 Manipulating an XMLType Column Using JDBC</p>
<pre dir="ltr">import java.sql.*;
import java.io.*;
import java.net.*;
import java.util.*;
import oracle.xml.parser.v2.*;
import oracle.xml.parser.schema.*;
import org.xml.sax.*;
import org.w3c.dom.*;
import oracle.xml.sql.dataset.*;
import oracle.xml.sql.query.*;
import oracle.xml.sql.docgen.*;
import oracle.xml.sql.*;
import oracle.jdbc.driver.*;
import oracle.sql.*;
import oracle.xdb.XMLType;
public class tkxmtpk1
{
  static String conStr = &#34;jdbc:oracle:oci8:@&#34;;
  static String user = &#34;tpjc&#34;;
  static String pass = &#34;tpjc&#34;;
  static String qryStr = &#34;select x.resume from t1 x where id&lt;3&#34;;
  static String xslStr =
    &#34;&lt;?xml version=&#39;1.0&#39;?&gt; &#34; +
    &#34;&lt;xsl:stylesheet version=&#39;1.0&#39; xmlns:xsl=&#39;http://www.w3.org/1&#34; +
    &#34;999/XSL/Transform&#39;&gt; &#34; +
    &#34;&lt;xsl:template match=&#39;ROOT&#39;&gt; &#34; +
    &#34;&lt;xsl:apply-templates/&gt; &#34; +
    &#34;&lt;/xsl:template&gt; &#34; +
    &#34;&lt;xsl:template match=&#39;NAME&#39;&gt; &#34; +
    &#34;&lt;html&gt; &#34; +
    &#34; &lt;body&gt; &#34; +
    &#34; This is Test &#34; +
    &#34; &lt;/body&gt; &#34; +
    &#34;&lt;/html&gt; &#34; +
    &#34;&lt;/xsl:template&gt; &#34; +
    &#34;&lt;/xsl:stylesheet&gt;&#34;;
  static void parseArg(String args[])
  {
    conStr = (args.length &gt;= 1 ? args[0]:conStr);
    user = (args.length &gt;= 2 ? args[1].substring(0, args[1].indexOf(&#34;/&#34;)):user);
    pass = (args.length &gt;= 2 ? args[1].substring(args[1].indexOf(&#34;/&#34;)+1):pass);
    qryStr = (args.length &gt;= 3 ? args[2]:qryStr);
  }
  /**
  * Print the byte array contents
  */
  static void showValue(byte[] bytes) throws SQLException
  {
    if (bytes == null)
    System.out.println(&#34;null&#34;);
    else if (bytes.length == 0)
    System.out.println(&#34;empty&#34;);
    else
    {
      for(int i=0; i&lt;bytes.length; i++)
        System.out.print((bytes[i]&amp;0xff)+&#34; &#34;);
      System.out.println();
    }
  }
  public static void main(String args[]) throws Exception
  {
    tkxmjnd1 util = new tkxmjnd1();
    try
    {
      if(args != null)
        parseArg(args);
      // System.out.println(&#34;conStr=&#34; + conStr);
      System.out.println(&#34;user/pass=&#34; + user + &#34;/&#34; +pass );
      System.out.println(&#34;qryStr=&#34; + qryStr);
      DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
      Connection conn = DriverManager.getConnection(conStr, user, pass);
      Statement s = conn.createStatement();
      ResultSet rset = s.executeQuery(qryStr);
      OracleResultSet orset = (OracleResultSet) rset;
      OPAQUE xml;
      while(orset.next())
      {
        oracle.xdb.XMLType xt = (oracle.xdb.XMLType)(orset.getObject(1));
        System.out.println(&#34;Testing getDOM() ...&#34;);
        Document doc = xt.getDOM();
        util.printDocument(doc);
        System.out.println(&#34;Testing getBytesValue() ...&#34;);
        showValue(xt.getBytesValue());
        System.out.println(&#34;Testing existsNode() ...&#34;);
        try
        {
          System.out.println(&#34;existsNode(/)&#34; + xt.existsNode(&#34;/&#34;, null));
        }
        catch (SQLException e)
        {
          System.out.println(&#34;Thin driver Expected exception: &#34; + e);
        }
        System.out.println(&#34;Testing extract() ...&#34;);
        try
        {
          XMLType xt1 = xt.extract(&#34;/RESUME&#34;, null);
          System.out.println(&#34;extract RESUME: &#34; + xt1.getStringVal());
          System.out.println(&#34;should be Fragment: &#34; + xt1.isFragment());
        }
        catch (SQLException e)
        {
          System.out.println(&#34;Thin driver Expected exception: &#34; + e);
        }
        System.out.println(&#34;Testing isFragment() ...&#34;);
        try
        {
          System.out.println(&#34;isFragment = &#34; + xt.isFragment());
        }
        catch (SQLException e)
        {
          System.out.println(&#34;Thin driver Expected exception: &#34; + e);
        }
        System.out.println(&#34;Testing isSchemaValid() ...&#34;);
        try
        {
          System.out.println(&#34;isSchemaValid(): &#34; +
                             xt.isSchemaValid(null,&#34;RES UME&#34;));
        }
        catch (SQLException e)
        {
          System.out.println(&#34;Thin driver Expected exception: &#34; + e);
        }
        System.out.println(&#34;Testing transform() ...&#34;);
        System.out.println(&#34;XSLDOC: \n&#34; + xslStr + &#34;\n&#34;);
        try
        {
          /* XMLType xslDoc = XMLType.createXML(conn, xslStr);
             System.out.println(&#34;XSLDOC Generated&#34;);
             System.out.println(&#34;After transformation:\n&#34; +
                                (xt.transform(xslDoc,
                                 null)).getStringVal());
           */
           System.out.println(&#34;After transformation:\n&#34; +
                              (xt.transform(null,
                               null)).getStringVal());
        }
        catch (SQLException e)
        {
          System.out.println(&#34;Thin driver Expected exception: &#34; + e);
        }
        System.out.println(&#34;Testing createXML(conn, doc) ...&#34;);
        try
        {
          XMLType xt1 = XMLType.createXML(conn, doc);
          System.out.println(xt1.getStringVal());
        }
        catch (SQLException e)
        {
          System.out.println(&#34;Got exception: &#34; + e);
        }
      }
    }
    catch(Exception e)
    {
      e.printStackTrace(System.out);
    }
  }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB5893"></a><a id="ADXDB5894"></a><a id="ADXDB4944"></a>
<div class="props_rev_3"><a id="GUID-B41ECF30-93FD-43D2-9F12-649890E68C52"></a>
<h2 id="ADXDB-GUID-B41ECF30-93FD-43D2-9F12-649890E68C52" class="sect2"><span class="enumeration_section">13.4</span> Loading a Large XML Document into the Database Using JDBC</h2>
<div>
<p>To load a large XML document into the database using Java Database Connectivity (JDBC), use a Java <code>CLOB</code> object to hold the document, and use Java method <code>insertXML()</code> to perform the insertion.</p>
<div class="section">
<p>If a large XML document (greater than 4000 characters, typically) is inserted into an <code>XMLType</code> table or column using a <code>String</code> object in JDBC, this run-time error occurs:</p>
<pre dir="ltr">&#34;java.sql.SQLException: Data size bigger than max size for this type&#34;
</pre>
<p>This error can be avoided by using a Java <code>CLOB</code> object to hold the large XML document. <a href="xdb11jav.htm#GUID-B41ECF30-93FD-43D2-9F12-649890E68C52__CHDCHFIG">Example 13-11</a> shows code that uses this technique. It defines <code>XMLType</code> method <code>insertXML()</code>, which can be used to insert a large XML document into <code>XMLType</code> column <code>purchaseOrder</code> of table <code>poTable</code>. The same approach can be used for an <code>XMLType</code> table.</p>
<p>Method <code>insertXML()</code> uses a <code>CLOB</code> object that contains the XML document. It creates the <code>CLOB</code> object using class <code>oracle.sql.CLOB</code> on the client side. This class is the Oracle JDBC driver implementation of the standard JDBC interface <code>java.sql.Clob</code>. Method <code>insertXML()</code> binds the <code>CLOB</code> object to a JDBC prepared statement, which inserts the data into the <code>XMLType</code> column.</p>
<p>The prerequisites for using <code>insertXML()</code> are as follows:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Oracle Database, release 9.2.0.1 or later.</p>
</li>
<li>
<p>The target database table. Execute the following SQL before running the example:</p>
<p><code>CREATE TABLE poTable (purchaseOrder XMLType);</code></p>
</li>
</ul>
<p>The formal parameters of <code>XMLType</code> method <code>insertXML()</code> are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><code>xmlData</code></span> &ndash; XML data to be inserted into the <code>XMLType</code> column</p>
</li>
<li>
<p><span class="italic"><code>conn</code></span> &ndash; database connection object (Oracle Connection Object)</p>
</li>
</ul>
<p>Java method <code>insertXML()</code> calls method <code>getCLOB()</code> to create and return the <code>CLOB</code> object that holds the XML data. The formal parameters of method <code>getCLOB()</code>, which is defined in <a href="xdb11jav.htm#GUID-B41ECF30-93FD-43D2-9F12-649890E68C52__CHDFFDJH">Example 13-12</a>, are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><code>xmlData</code></span> &ndash; XML data to be inserted into the <code>XMLType</code> column</p>
</li>
<li>
<p><span class="italic"><code>conn</code></span> &ndash; database connection object (Oracle Connection Object)</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-B41ECF30-93FD-43D2-9F12-649890E68C52__GUID-853A0A6C-0A7D-41F8-AD92-FF2658A0AE06">
<p class="notep1">See Also:</p>
<p><a class="olink ADLOB45482" target="_blank" href="../ADLOB/adlob_api_overview.htm#ADLOB45482"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a></p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-B41ECF30-93FD-43D2-9F12-649890E68C52__CHDCHFIG">
<p class="titleinexample">Example 13-11 Java Method insertXML()</p>
<pre dir="ltr">...
import oracle.sql.CLOB; 
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.PreparedStatement;
... 
private void <span class="bold">insertXML</span>(String xmlData, Connection conn)
{
  CLOB clob = null;
  String query;
  // Initialize statement Object
  PreparedStatement pstmt = null;
  try
  {
    query = &#34;INSERT INTO potable (purchaseOrder) VALUES (XMLType(?)) &#34;;
    // Get the statement Object
    pstmt = conn.prepareStatement(query);
    // xmlData is the string that contains the XML Data.
    // Get the CLOB object.
    clob = <span class="bold">getCLOB</span>(xmlData, conn);
    // Bind this CLOB with the prepared Statement
    pstmt.setObject(1, clob);
    // Execute the Prepared Statement
    if (pstmt.executeUpdate () == 1)
    {
      System.out.println (&#34;Successfully inserted a Purchase Order&#34;);
    }
  }
  catch(SQLException sqlexp)
  {
    sqlexp.printStackTrace();
  }
  catch(Exception exp)
  {
    exp.printStackTrace();
  }
}
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-B41ECF30-93FD-43D2-9F12-649890E68C52__CHDFFDJH">
<p class="titleinexample">Example 13-12 Java Method getCLOB()</p>
<pre dir="ltr">...
import oracle.sql.CLOB; 
import java.sql.Connection;
import java.sql.SQLException;
import java.io.Writer;
... 
private CLOB <span class="bold">getCLOB</span>(String xmlData, Connection conn) throws SQLException
{
  CLOB tempClob = null;
  try
  {
    // If the temporary CLOB has not yet been created, create one
    tempClob = CLOB.createTemporary(conn, true, CLOB.DURATION_SESSION); 
    // Open the temporary CLOB in readwrite mode, to enable writing
    tempClob.open(CLOB.MODE_READWRITE); 
    // Get the output stream to write
    Writer tempClobWriter = tempClob.getCharacterOutputStream(); 
    // Write the data into the temporary CLOB
    tempClobWriter.write(xmlData); 
    // Flush and close the stream
    tempClobWriter.flush();
    tempClobWriter.close(); 
    // Close the temporary CLOB 
    tempClob.close();    
  }
  catch(SQLException sqlexp)
  {
    tempClob.freeTemporary(); 
    sqlexp.printStackTrace();
  }
  catch(Exception exp)
  {
    tempClob.freeTemporary(); 
    exp.printStackTrace();
  }
  return tempClob; 
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4946"></a>
<div class="props_rev_3"><a id="GUID-6533CA45-5048-4B18-B099-7359E643E169"></a>
<h2 id="ADXDB-GUID-6533CA45-5048-4B18-B099-7359E643E169" class="sect2"><span class="enumeration_section">13.5</span> Java DOM API for XMLType Features</h2>
<div>
<p>The Java DOM API for <code>XMLType</code> supports deep and shallow searching within a document to retrieve children and properties of XML objects such as name and namespace. It lets applications create XML documents programmatically, including on the fly (dynamically). Such documents can conform to a registered XML schema or not.</p>
<p>The Java API for <code>XMLType</code> conforms to the DOM 2.0 recommendation, and it is namespace-aware.</p>
<p>Java classes <code>XMLDocument</code> and <code>XDBDocument</code> (which is deprecated) are instances of the W3C Document Object Model (DOM) interface. From this document interface you can access the document elements and perform all of the operations specified in the W3C DOM Recommendation. The DOM works on:</p>
<ul style="list-style-type: disc;">
<li>
<p>Any type of XML document, schema-based or non-schema-based</p>
</li>
<li>
<p>Either type of underlying storage used by the document:</p>
<ul style="list-style-type: disc;">
<li>
<p>Binary Large Object (BLOB)</p>
</li>
<li>
<p>object-relational</p>
</li>
</ul>
</li>
</ul>
<p>When you use the Java DOM API to retrieve XML data from Oracle XML&nbsp;DB:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the connection is <span class="italic">thin</span>, you get an <span class="bold"><code>XML</code></span><code>Document</code> instance</p>
</li>
<li>
<p>If the connection is <span class="italic">thick</span> or <span class="italic">kprb</span>, you get an <span class="bold"><code>XDB</code></span><code>Document</code> instance with method <code>getDOM()</code> and an <span class="bold"><code>XML</code></span><code>Document</code> instance with method <code>getDocument()</code>. Method <code>getDOM()</code> and class <code>XDBDocument</code> are deprecated.</p>
</li>
</ul>
</div>
</div>
<a id="ADXDB6347"></a><a id="ADXDB6346"></a>
<div class="props_rev_3"><a id="GUID-AB51C56E-03E8-4B86-8D99-7C59E35F3DAF"></a>
<h2 id="ADXDB-GUID-AB51C56E-03E8-4B86-8D99-7C59E35F3DAF" class="sect2"><span class="enumeration_section">13.6</span> MS Windows Java Security Manager Permissions for Java DOM API with a Thick Connection</h2>
<div>
<p>If you use Java Security Manager (class <code>SecurityManager</code>) on MS Windows to implement a security policy for your application, then you must add certain permissions to your security policy file, in order to use the Java DOM API for <code>XMLType</code> with a thick connection.</p>
<p><a href="xdb11jav.htm#GUID-AB51C56E-03E8-4B86-8D99-7C59E35F3DAF__CACBACJG">Example 13-13</a> shows the contents of such a policy file, where the workspace folder that contains the jars related to Oracle XML&nbsp;DB is <code>c:\myworkspace</code>. (The policy file must be in the same folder.)</p>
<p>The libraries used in <a href="xdb11jav.htm#GUID-AB51C56E-03E8-4B86-8D99-7C59E35F3DAF__CACBACJG">Example 13-13</a> are <code>orageneric12</code> and <code>oraxml12</code>. The last two characters (<code>12</code> here) must correspond to your major database release number (so for Oracle Database 13 Release 2, for example, you would use <code>orageneric</code><span class="bold"><code>13</code></span> and <code>oraxml</code><span class="bold"><code>13</code></span>).</p>
<p>After you have created the policy file, you can invoke your program using the following command-line switches:</p>
<pre dir="ltr">-Djava.security.manager=default -Djava.security.policy=c:\myworkspace\ojdbc.policy
</pre>
<div class="example" id="GUID-AB51C56E-03E8-4B86-8D99-7C59E35F3DAF__CACBACJG">
<p class="titleinexample">Example 13-13 Policy File Granting Permissions for Java DOM API</p>
<pre dir="ltr">grant codeBase &#34;file:c:\myworkspace&#34; {
  permission java.lang.RuntimePermission &#34;loadLibrary.orageneric12&#34;;
  permission java.lang.RuntimePermission &#34;loadLibrary.oraxml12&#34;;
}
 
grant codeBase &#34;file:c:\myworkspace\<span class="bold">xdb6.jar</span>&#34; {
  permission java.lang.RuntimePermission &#34;loadLibrary.orageneric12&#34;;
  permission java.lang.RuntimePermission &#34;loadLibrary.oraxml12&#34;;
}
 
grant codeBase &#34;file:c:\myworkspace\<span class="bold">ojdbc6.jar</span>&#34; {
  permission java.lang.RuntimePermission &#34;loadLibrary.orageneric12&#34;;
  permission java.lang.RuntimePermission &#34;loadLibrary.oraxml12&#34;;
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4948"></a><a id="ADXDB4947"></a>
<div class="props_rev_3"><a id="GUID-7C93723D-5D83-4444-BD06-216BECAE4983"></a>
<h2 id="ADXDB-GUID-7C93723D-5D83-4444-BD06-216BECAE4983" class="sect2"><span class="enumeration_section">13.7</span> Creating XML Schema-Based Documents</h2>
<div>
<p>To create XML Schema-based documents, Java DOM API for <code>XMLType</code> uses an extension to specify which XML schema URL to use. It also verifies that the DOM being created conforms to the specified XML schema, that is, that the appropriate children are being inserted under the appropriate documents.</p>
<div class="section">
<div class="infobox-note" id="GUID-7C93723D-5D83-4444-BD06-216BECAE4983__GUID-28F18FFC-0830-4BFA-97ED-B50F1CF9957F">
<p class="notep1">Note:</p>
<p>The Java DOM API for <code>XMLType</code> does <span class="italic">not</span> perform type and constraint checks.</p>
</div>
<p>Once the DOM object has been created, it can be saved to Oracle XML&nbsp;DB Repository using the Oracle XML&nbsp;DB resource API for Java. The XML document is stored in the appropriate format:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>As a BLOB instance for non-schema-based documents.</p>
</li>
<li>
<p>In the format specified by the XML schema for XML schema-based documents.</p>
</li>
</ul>
<p><a href="xdb11jav.htm#GUID-7C93723D-5D83-4444-BD06-216BECAE4983__CHDGCCEB">Example 13-14</a> shows how you can use the Java DOM API for <code>XMLType</code> to create a DOM object and store it in the format specified by the associated XML schema. Validation against the XML schema is not shown here.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-7C93723D-5D83-4444-BD06-216BECAE4983__CHDGCCEB">
<p class="titleinexample">Example 13-14 Creating a DOM Object with the Java DOM API</p>
<pre dir="ltr">import oracle.xdb.XMLType;
...
OraclePreparedStatement stmt = 
    (OraclePreparedStatement) conn.prepareStatement(
                                &#34;update po_xml_XMLTypetab set poDoc = ? &#34;);
// the second argument is a string
String poString = &#34;&lt;PO&gt;&lt;PONO&gt;200&lt;/PONO&gt;&lt;PNAME&gt;PO_2&lt;/PNAME&gt;&lt;/PO&gt;&#34;;
XMLType poXML = XMLType.createXML(conn, poString);
Document poDOM = (Document)poXML.getDOM();
Element rootElem = poDOM.createElement(&#34;PO&#34;);
poDOM.insertBefore(poDOM, rootElem, null);
// now bind the string..
stmt.setObject(1,poXML);
stmt.execute();
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4949"></a>
<div class="props_rev_3"><a id="GUID-71138EC1-A710-4557-91C0-7CEBE4BD90B5"></a>
<h2 id="ADXDB-GUID-71138EC1-A710-4557-91C0-7CEBE4BD90B5" class="sect2"><span class="enumeration_section">13.8</span> XMLType Instance Representation in Java (JDBC or SQLJ)</h2>
<div>
<p>An <code>XMLType</code> instance is represented in Java by <code>oracle.xdb.XMLType</code>. When an instance of <code>XMLType</code> is fetched using JDBC or a SQLJ client, it is automatically manifested as an object of the provided <code>XMLType</code> class.</p>
<p>You can bind objects of this class as values to Data Manipulation Language (DML) statements where an <code>XMLType</code> is expected.</p>
</div>
</div>
<a id="ADXDB4951"></a><a id="ADXDB4950"></a>
<div class="props_rev_3"><a id="GUID-6144192C-114A-4120-B117-D7FB6B871CDE"></a>
<h2 id="ADXDB-GUID-6144192C-114A-4120-B117-D7FB6B871CDE" class="sect2"><span class="enumeration_section">13.9</span> Classes of Java DOM API for XMLType</h2>
<div>
<p>Oracle XML&nbsp;DB supports the W3C DOM Level 2 Recommendation. It also provides Oracle-specific extensions, to facilitate interfacing your application with Oracle XML Developer&#39;s Kit for Java. The Java DOM API for <code>XMLType</code> provides classes that implement W3C DOM interfaces.</p>
<p>A list of the Oracle extensions is available at:</p>
<p><a href="http://www.oracle.com/technetwork/database-features/xmldb/overview/index.html" target="_blank"><code>http://www.oracle.com/technetwork/database-features/xmldb/overview/index.html</code></a></p>
<p><code>XMLDocument</code> is a class that represents the DOM for the instantiated XML document. You can retrieve an <code>XMLType</code> instance from an XML document using the <code>XMLType</code> constructor that takes a <code>Document</code> argument:</p>
<p><code>XMLType createXML(Connection conn, Document domdoc)</code></p>
<p><a href="xdb11jav.htm#GUID-6144192C-114A-4120-B117-D7FB6B871CDE__CACFFCEG" title="This table describes the Java DOM API for XMLType classes. It includes a listing of the equivalent W3C classes.">Table 13-1</a> lists the Java DOM API for <code>XMLType</code> classes and the W3C DOM interfaces they implement. The Java DOM API classes are in package <code>oracle.xml.parser.v2</code>.</p>
<div class="tblformal" id="GUID-6144192C-114A-4120-B117-D7FB6B871CDE__CACFFCEG">
<p class="titleintable">Table 13-1 Java DOM API for XMLType: Classes</p>
<table class="cellalignment3420" title="Java DOM API for XMLType: Classes" summary="This table describes the Java DOM API for XMLType classes. It includes a listing of the equivalent W3C classes.">
<thead>
<tr class="cellalignment3411">
<th class="cellalignment3524" id="d75114e1289">Java DOM API for XMLType Class</th>
<th class="cellalignment3556" id="d75114e1292">W3C DOM Interface Recommendation Class</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1297" headers="d75114e1289">
<pre dir="ltr">XMLDocument
</pre></td>
<td class="cellalignment3557" headers="d75114e1297 d75114e1292">
<pre dir="ltr">org.w3c.dom.Document 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1304" headers="d75114e1289">
<pre dir="ltr">XMLCDATA
</pre></td>
<td class="cellalignment3557" headers="d75114e1304 d75114e1292">
<pre dir="ltr">org.w3c.dom.CDataSection 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1311" headers="d75114e1289">
<pre dir="ltr">XMLComment
</pre></td>
<td class="cellalignment3557" headers="d75114e1311 d75114e1292">
<pre dir="ltr">org.w3c.dom.Comment 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1318" headers="d75114e1289">
<pre dir="ltr">XMLPI
</pre></td>
<td class="cellalignment3557" headers="d75114e1318 d75114e1292">
<pre dir="ltr">org.w3c.dom.ProcessingInstruction 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1325" headers="d75114e1289">
<pre dir="ltr">XMLText 
</pre></td>
<td class="cellalignment3557" headers="d75114e1325 d75114e1292">
<pre dir="ltr">org.w3c.dom.Text 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1332" headers="d75114e1289">
<pre dir="ltr">XMLEntity
</pre></td>
<td class="cellalignment3557" headers="d75114e1332 d75114e1292">
<pre dir="ltr">org.w3c.dom.Entity 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1339" headers="d75114e1289">
<pre dir="ltr">DTD
</pre></td>
<td class="cellalignment3557" headers="d75114e1339 d75114e1292">
<pre dir="ltr">org.w3c.dom.DocumentType 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1346" headers="d75114e1289">
<pre dir="ltr">XMLNotation
</pre></td>
<td class="cellalignment3557" headers="d75114e1346 d75114e1292">
<pre dir="ltr">org.w3c.dom.Notation 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1353" headers="d75114e1289">
<pre dir="ltr">XMLAttr
</pre></td>
<td class="cellalignment3557" headers="d75114e1353 d75114e1292">
<pre dir="ltr">org.w3c.dom.Attribute 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1360" headers="d75114e1289">
<pre dir="ltr">XMLDomImplementation
</pre></td>
<td class="cellalignment3557" headers="d75114e1360 d75114e1292">
<pre dir="ltr">org.w3c.dom.DOMImplementation 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1367" headers="d75114e1289">
<pre dir="ltr">XMLElement
</pre></td>
<td class="cellalignment3557" headers="d75114e1367 d75114e1292">
<pre dir="ltr">org.w3c.dom.Element 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1375" headers="d75114e1289">
<pre dir="ltr">XMLAttrList
</pre></td>
<td class="cellalignment3557" headers="d75114e1375 d75114e1292">
<pre dir="ltr">org.w3c.dom.NamedNodeMap 
</pre></td>
</tr>
<tr class="cellalignment3411">
<td class="cellalignment3525" id="d75114e1382" headers="d75114e1289">
<pre dir="ltr">XMLNode 
</pre></td>
<td class="cellalignment3557" headers="d75114e1382 d75114e1292">
<pre dir="ltr">org.w3c.dom.Node 
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="ADXDB4952"></a>
<div class="props_rev_3"><a id="GUID-3E7F205E-A19A-4CE4-91A1-D1BE63516F4A"></a>
<h2 id="ADXDB-GUID-3E7F205E-A19A-4CE4-91A1-D1BE63516F4A" class="sect2"><span class="enumeration_section">13.10</span> Java DOM API for XMLType Classes and Methods That Are Deprecated or Not Supported</h2>
<div>
<p>Several classes and methods of the Java DOM API for <code>XMLType</code> that were used in releases prior to Oracle Database&nbsp;11g Release 1 have been deprecated or desupported.</p>
<div class="section">
<p>The following methods documented in Oracle Database 9i (9.2.0.1) are no longer supported:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>XDBDocument.getElementByID</code></p>
</li>
<li>
<p><code>XDBDocument.importNode</code></p>
</li>
<li>
<p><code>XDBNode.normalize</code></p>
</li>
<li>
<p><code>XDBNode.isSupported</code></p>
</li>
<li>
<p><code>XDBDomImplementation.hasFeature</code></p>
</li>
</ul>
<p>In addition, in releases prior to Oracle Database&nbsp;11<span class="italic">g</span> Release 1, a different API, in package <code>oracle.xdb.dom</code>, was used for the Java DOM. Please refer to the documentation for such releases for more information on that deprecated API. The following classes in <code>oracle.xdb.dom</code> are <span class="italic">deprecated</span>. Use <code>oracle.xml.parser.v2</code> classes instead.</p>
<ul style="list-style-type: disc;">
<li>
<p><code>XDBAttribute</code> &ndash; use <code>XMLAttr</code></p>
</li>
<li>
<p><code>XDBBinaryDocument</code></p>
</li>
<li>
<p><code>XDBCData</code> &ndash; use <code>XMLCDATA</code></p>
</li>
<li>
<p><code>XDBComment</code> &ndash; use <code>XMLComment</code></p>
</li>
<li>
<p><code>XDBDocFragment</code> &ndash; use <code>XMLDocumentFragment</code></p>
</li>
<li>
<p><code>XDBDocument</code> &ndash; use <code>XMLDocument</code></p>
</li>
<li>
<p><code>XDBDocumentType</code> &ndash; use <code>DTD</code></p>
</li>
<li>
<p><code>XDBDOMException</code> &ndash; use <code>XMLDomException</code></p>
</li>
<li>
<p><code>XDBDomImplementation</code> &ndash; use <code>XMLDomImplementation</code></p>
</li>
<li>
<p><code>XDBElement</code> &ndash; use <code>XMLElement</code></p>
</li>
<li>
<p><code>XDBEntity</code> &ndash; use <code>XMLEntity</code></p>
</li>
<li>
<p><code>XDBEntityReference</code> &ndash; use <code>XMLEntityReference</code></p>
</li>
<li>
<p><code>XDBNamedNodeMap</code> &ndash; use <code>XMLAttrList</code></p>
</li>
<li>
<p><code>XDBNode</code> &ndash; use <code>XMLNode</code></p>
</li>
<li>
<p><code>XDBNodeList</code> &ndash; use <code>NodeList</code></p>
</li>
<li>
<p><code>XDBNotation</code> &ndash; use <code>XMLNotation</code></p>
</li>
<li>
<p><code>XDBProcInst</code> &ndash; use <code>XMLPI</code></p>
</li>
<li>
<p><code>XDBText</code> &ndash; use <code>XMLText</code></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="ADXDB4954"></a><a id="ADXDB4953"></a>
<div class="props_rev_3"><a id="GUID-F5F719CF-F383-4677-A655-6329C1E462FA"></a>
<h2 id="ADXDB-GUID-F5F719CF-F383-4677-A655-6329C1E462FA" class="sect2"><span class="enumeration_section">13.11</span> Using the Java DOM API for XMLType</h2>
<div>
<p>Retrieve data from an <code>XMLType</code> table or column and obtain a Java <code>XMLDocument</code> instance from it. Manipulate elements of the DOM tree for the data using the Java DOM API for <code>XMLType</code>.</p>
<div class="section">
<p><a href="xdb11jav.htm#GUID-F5F719CF-F383-4677-A655-6329C1E462FA__i1031454">Figure 13-1</a> illustrates how to use the Java DOM API for <code>XMLType</code>.<a id="fn_1" href="#fn_1" onclick="footdisplay(1,&#34;This assumes that your XML data is pre-registered with an XML schema, and that it is stored in an XMLType column. &#34;)"><sup>Foot&nbsp;1</sup></a> These are the steps:</p>
<ol>
<li>
<p>Retrieve the XML data from the <code>XMLType</code> table or <code>XMLType</code> column in the table. When you fetch XML data, Oracle creates an <code>XMLType</code> instance. You can then use method <code>getDocument()</code> to retrieve an <code>XMLDocument</code> instance.</p>
</li>
<li>
<p>Use the Java DOM API for <code>XMLType</code> to manipulate elements of the DOM tree. The <code>XMLType</code> instance holds the modified data, but the data is sent back using a JDBC update.</p>
</li>
</ol>
<p>The <code>XMLType</code> and <code>XMLDocument</code> instances should be closed using method <code>close()</code> in the respective classes. This frees any underlying memory that is held.</p>
<div class="figure" id="GUID-F5F719CF-F383-4677-A655-6329C1E462FA__i1031454">
<p class="titleinfigure">Figure 13-1 Using the Java DOM API for XMLType</p>
<img width="323" height="300" src="img/GUID-B4FD311F-182C-4341-9FB4-211B7C7F26C0-default.gif" alt="Description of Figure 13-1 follows" title="Description of Figure 13-1 follows"/><br/>
<a href="img_text/GUID-B4FD311F-182C-4341-9FB4-211B7C7F26C0-print.htm">Description of &#34;Figure 13-1 Using the Java DOM API for XMLType&#34;</a></div>
<!-- class="figure" --></div>
<!-- class="section" --></div>
</div>
<a id="ADXDB1150"></a>
<div class="props_rev_3"><a id="GUID-292AD380-743C-4E36-BDD1-039A279006C0"></a>
<h2 id="ADXDB-GUID-292AD380-743C-4E36-BDD1-039A279006C0" class="sect2"><span class="enumeration_section">13.12</span> Large XML Node Handling with Java</h2>
<div>
<p>Oracle XML&nbsp;DB provides abstract streams and stream-manipulation methods that you can use to handle XML nodes that are larger than 64 K bytes. Use Java classes <code>XMLNode</code> and <code>XMLAttr</code>, together with a thick or kprb connection, to manipulate large nodes.</p>
<div class="infobox-note" id="GUID-292AD380-743C-4E36-BDD1-039A279006C0__GUID-221D5813-F9B6-44D4-B048-142BF6FF7A49">
<p class="notep1">Note:</p>
<p>The large-node feature works only with a thick or kprb connection. It does not work with a thin connection.</p>
</div>
<p>Prior to Oracle Database 11g Release 1 (11.1), each text node or attribute value processed by Oracle XML&nbsp;DB was limited in size to 64 K bytes. Starting with release 11.1, this restriction no longer applies.</p>
<p>The former restrictions on the size of nodes were because the Java methods to set and get a node value supported only arguments of type <code>java.lang.String</code>. The maximum size of a string is dependent on the implementation of the Java VM, but it is bounded. Prior to Release 11.1, the Java DOM APIs to manage a node value, contained within class <code>oracle.xdb.dom.XDBNode.java</code>, were these:</p>
<pre dir="ltr">public String getNodeValue ();
public void setNodeValue (String value);
</pre>
<p>Prior to Release 11.1, the Java DOM APIs to manage an attribute, contained within class <code>oracle.xdb.dom.XDBAttribute.java</code>, were these:</p>
<pre dir="ltr">public String getValue ();
public void setValue (String value);
</pre>
<p>Package <code>oracle.xdb.dom</code> is deprecated, starting with Oracle Database 11g Release 1 (11.1). Java classes <code>XDBNode</code> and <code>XDBAttribute</code> in that package are replaced by classes <code>XMLNode</code> and <code>XMLAttr</code>, respectively, in package <code>oracle.xml.parser.v2</code>. In addition, these DOM APIs were extended in Release 11.1 to support text and binary node values of arbitrary size.</p>
<div class="infoboxnotealso" id="GUID-292AD380-743C-4E36-BDD1-039A279006C0__GUID-E06C0653-B6FF-42B9-BB84-75D263D4C822">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb10pls.htm#GUID-27F60B86-33DC-4E4B-B870-DDCBCF7819F6" title="Oracle XML&nbsp;DB provides abstract streams and stream-manipulation methods that you can use to handle XML nodes that are larger than 64 K bytes.">Large Node Handling Using DBMS_XMLDOM</a>&#34;</span> for information on using PL/SQL with large nodes</p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb11jav.htm#GUID-3E7F205E-A19A-4CE4-91A1-D1BE63516F4A" title="Several classes and methods of the Java DOM API for XMLType that were used in releases prior to Oracle Database&nbsp;11g Release 1 have been deprecated or desupported.">Java DOM API for XMLType Classes and Methods That Are Deprecated or Not Supported</a>&#34;</span> for more about deprecated classes <code>XDBNode</code> and <code>XDBAttribute</code></p>
</li>
</ul>
</div>
</div>
<a id="ADXDB4955"></a>
<div class="props_rev_3"><a id="GUID-385EA5A7-6646-4EA6-8443-5BF243C149B4"></a>
<h3 id="ADXDB-GUID-385EA5A7-6646-4EA6-8443-5BF243C149B4" class="sect3"><span class="enumeration_section">13.12.1</span> Stream Extensions to Java DOM</h3>
<div>
<p>All Java <code>String</code>, <code>Reader</code>, and <code>Writer</code> data is represented in UCS2, which might be different from the database character set. Additionally, node character data is tagged with a character set id, which is set at the time the node value is populated.</p>
<p>The following methods of <code>oracle.xml.parser.v2.XMLNode.java</code> can be used to access nodes of size greater than 64 KB. These APIs throw exceptions if you try to get or set a node that is not a leaf node (attribute, <code>PI</code>, <code>CDATA</code>, and so on). Also, be sure to use <code>close()</code> which actually writes the value and frees resources used to maintain the state for streaming access to nodes.</p>
</div>
<a id="ADXDB4956"></a>
<div class="props_rev_3"><a id="GUID-83D45962-6911-4E8D-AA76-7DB19C4B5288"></a>
<h4 id="ADXDB-GUID-83D45962-6911-4E8D-AA76-7DB19C4B5288" class="sect4"><span class="enumeration_section">13.12.1.1</span> Get-Pull Model</h4>
<div>
<p>You can use methods <code>getNodeValueAsBinaryStream()</code> and <code>getNodeValueAsCharacterStream()</code> to retrieve the value of a DOM node, using a parser that is in pull mode. Oracle XML&nbsp;DB reads the event data from an input stream written by the parser.</p>
<p>For a binary input stream:</p>
<pre dir="ltr">public java.io.InputStream getNodeValueAsBinaryStream () 
  throws java.io.IOException,
         DOMException;
</pre>
<p>Method <code>getNodeValueAsBinaryStream()</code> returns an instance of <code>java.io.InputStream</code> that can be read using the defined methods for this class. The data type of the node must be <code>RAW</code> or <code>BLOB</code>. If not, an <code>IOException</code> is thrown. The following example fragment illustrates reading the value of a node in binary 50-byte segments:</p>
<pre dir="ltr">...
oracle.xml.parser.v2.XMLNode node = null;
...
java.io.InputStream value = node.getNodeValueAsBinaryStream ();
// now read InputStream...
byte buffer [] = new byte [50];
int returnValue = 0;
while ((returnValue = value.read (buffer)) != -1)
{
  // process next 50 bytes of node
}
...
</pre>
<p>For a character input stream:</p>
<pre dir="ltr">public java.io.Reader getNodeValueAsCharacterStream() 
  throws java.io.IOException,
         DOMException;
</pre>
<p>Method <code>getNodeValueAsCharacterStream()</code> returns an instance of <code>java.io.Reader</code> that can be read using the defined methods for this class. If the data type of the node is neither character nor <code>CLOB</code>, the node data is first converted to character. All node data is ultimately in character format and is converted to <code>UCS2</code>, if necessary. The following example fragment illustrates reading the node value in segments of 50 characters:</p>
<pre dir="ltr">...
oracle.xml.parser.v2.XMLNode node = null;
...
java.io.Reader value = node.getNodeValueAsCharacterStream ();
// now read InputStream
char buffer [] = new char [50];
int returnValue = 0;
while ((returnValue = value.read (buffer)) != -1)
{
  // process next 50 characters of node
}
...
</pre></div>
</div>
<a id="ADXDB4957"></a>
<div class="props_rev_3"><a id="GUID-1A5DF09B-C27C-45EC-B22A-A9D235883AB1"></a>
<h4 id="ADXDB-GUID-1A5DF09B-C27C-45EC-B22A-A9D235883AB1" class="sect4"><span class="enumeration_section">13.12.1.2</span> Get-Push Model</h4>
<div>
<p>In this model, you retrieve the value of a DOM node, using a parser that is in push mode. Oracle XML&nbsp;DB writes the node data to an output stream that the parser reads.</p>
<p>For a binary output stream:</p>
<pre dir="ltr">public void getNodeValueAsBinaryStream (java.io.OutputStream pushValue) 
  throws java.io.IOException,
         DOMException;
</pre>
<p>The state of the <code>java.io.OutputStream</code> specified by <code>pushValue</code> must be open. The data type of the node must be <code>RAW</code> or <code>BLOB</code>. If not, an <code>IOException</code> is thrown. The node binary data is written to <code>pushValue</code> using method <code>write()</code> of <code>OutputStream</code>, and method <code>close()</code> is called when the node value has been completely written to the stream.</p>
<p>For a character output stream:</p>
<pre dir="ltr">public void getNodeValueAsCharacterStream (java.io.Writer pushValue) 
  throws java.io.IOException,
         DOMException;
</pre>
<p>The state of the <code>java.io.Writer</code> specified by <code>pushValue</code> must be open. If the data type of the node is neither character nor <code>CLOB</code>, then the data is first converted to character. The node data, always in character format, is converted, as necessary, to <code>UCS2</code> and then pushed into the <code>java.io.Writer</code>.</p>
</div>
</div>
<a id="ADXDB4958"></a>
<div class="props_rev_3"><a id="GUID-5528C4C8-C076-4B03-AC18-F16BCC3C3DFE"></a>
<h4 id="ADXDB-GUID-5528C4C8-C076-4B03-AC18-F16BCC3C3DFE" class="sect4"><span class="enumeration_section">13.12.1.3</span> Set-Pull Model</h4>
<div>
<p>In this model, you set the value of a DOM node, using a parser that is in pull mode. Oracle XML&nbsp;DB reads the event data from an input stream written by the parser.</p>
<p>For a binary input stream:</p>
<pre dir="ltr">public void setNodeValueAsBinaryStream (java.io.InputStream pullValue) 
  throws java.io.IOException,
         DOMException;
</pre>
<p>The state of the <code>java.io.InputStream</code> specified by <code>pullValue</code> must be open. The data type of the node must be <code>RAW</code> or <code>BLOB</code>. If not, an <code>IOException</code> is thrown. The binary data from <code>pullValue</code> is read in its entirety using method <code>read()</code> of <code>InputStream</code> and replaces the node value.</p>
<pre dir="ltr">import java.io.InputStream;
import oracle.xml.parser.*;
...
oracle.xml.parser.v2.XMLNode node = null;
...
byte [] buffer = new byte [500];
java.io.InputStream  istream; //user-defined input stream
node.setNodeValueAsBinaryStream (istream);
</pre>
<p>For a character input stream:</p>
<pre dir="ltr">public void setNodeValueAsCharacterStream (java.io.Reader pullValue) 
  throws java.io.IOException,
         DOMException;
</pre>
<p>The state of the <code>java.io.Reader</code> specified by <code>pullValue</code> must be open. If the data type of the node is neither character nor <code>CLOB</code>, the character data is converted from <code>UCS2</code> to the node data type. If the data type of the node is character or <code>CLOB</code>, then the character data read from <code>pullValue</code> is converted from <code>UCS2</code> to the character set of the node.</p>
</div>
</div>
<a id="ADXDB4959"></a>
<div class="props_rev_3"><a id="GUID-EDECA2DC-5808-4549-8F99-0B5092208529"></a>
<h4 id="ADXDB-GUID-EDECA2DC-5808-4549-8F99-0B5092208529" class="sect4"><span class="enumeration_section">13.12.1.4</span> Set-Push Model</h4>
<div>
<p>In this model, you set the value of a DOM node, using a parser that is in push mode. Oracle XML&nbsp;DB writes the node data to an output stream that the parser reads.</p>
<p>For a binary output stream:</p>
<pre dir="ltr">public java.io.OutputStream setNodeValueAsBinaryStream () 
  throws java.io.IOException,
         DOMException;
</pre>
<p>Method <code>setNodeValueAsBinaryStream()</code> returns an instance of <code>java.io.OutputStream</code>, into which the caller can write the node value. The data type of the node must be <code>RAW</code> or <code>BLOB</code>. Otherwise, an <code>IOException</code> is raised. The following example fragment illustrates setting the value of a node to binary data by writing to the implementation of <code>java.io.OutputStream</code> provided by Oracle XML&nbsp;DB or Oracle XML Developer&#39;s Kit.</p>
<p>For a character output stream:</p>
<pre dir="ltr">public java.io.Writer setNodeValueAsCharacterStream () 
  throws java.io.IOException,
         DOMException;
</pre>
<p>Method <code>setNodeValueAsCharacterStream()</code> returns an instance of <code>java.io.Writer</code> into which the caller can write the node value. The character data written is first converted from <code>UCS2</code> to the node character set, if necessary. If the data type of the node is neither character nor <code>CLOB</code>, then the character data is converted to the node data type. Similarly, the following example fragment illustrates setting the value of a node to character data by writing to the implementation of <code>java.io.Writer</code> provided by Oracle XML&nbsp;DB or Oracle XML Developer&#39;s Kit.</p>
<pre dir="ltr">import java.io.Writer;
import oracle.xml.parser.*;
...
oracle.xml.parser.v2.XMLNode node = null;
...
char [] buffer = new char [500];
java.io.Writer  writer = node.setNodeValueAsCharacterStream ();
for (int k = 0; k &lt; 10; k++)
{
  byte segment [] = new byte [50];
  // copy next subset of buffer into segment
  writer.write (segment);
}
writer.flush ();
writer.close();
</pre>
<div class="infoboxnotealso" id="GUID-EDECA2DC-5808-4549-8F99-0B5092208529__GUID-D1751450-44F5-4233-AE1C-1E9F13D4AFF0">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink JAXML" target="_blank" href="../JAXML/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a></p>
</li>
<li>
<p><a class="olink CAXML" target="_blank" href="../CAXML/toc.htm"><span class="italic">Oracle Database XML C API Reference</span></a> for information about C functions for large nodes</p>
</li>
</ul>
</div>
<p>Oracle XML&nbsp;DB creates a <code>writer</code> or <code>OutputStream</code> and passes it to the user who calls method <code>write()</code> repeatedly until the complete node value has been written. The new node value is reflected only when the user calls method <code>close()</code>.</p>
</div>
</div>
</div>
</div>
<a id="ADXDB4961"></a><a id="ADXDB4960"></a>
<div class="props_rev_3"><a id="GUID-1234728D-0732-4DC6-82EF-9D372702061F"></a>
<h2 id="ADXDB-GUID-1234728D-0732-4DC6-82EF-9D372702061F" class="sect2"><span class="enumeration_section">13.13</span> Using the Java DOM API and JDBC with Binary XML</h2>
<div>
<p>You can use the Java DOM API for XML and Java Database Connectivity (JDBC) to read or write XML data that is encoded as binary XML from or to Oracle XML DB. Doing so involves the usual read and write procedures.</p>
<div class="section">
<p>XML data can be stored in Oracle XML DB using data type <code>XMLType</code>, and one of the storage models for this abstract data type is binary XML, a compact, XML Schema-aware encoding of XML data. You can use binary XML as a storage model for <code>XMLType</code> in the database, but you can also use it for XML data located outside the database. Client-side processing of XML data can involve data stored in Oracle XML DB or transient data that resides outside the database.</p>
<p>Binary XML is XML Schema-aware and can use various encoding schemes, depending on your needs and your data. Because of this, in order to manipulate binary XML data, you must have both the data and this metadata about the relevant XML schemas and encodings.</p>
<p>For <code>XMLType</code> data stored in the database, this metadata is also stored in the database. However, depending on how your database and data are set up, the metadata might not be on the same server as the data it applies to. If this is the case, then, before you can read or write binary XML data from or to the database, you must carry out these steps:</p>
<ol>
<li>
<p>Create a context instance for the metadata.</p>
</li>
<li>
<p>Associate this context with a data connection that you use to access binary XML data in the database. A data connection can be a dedicated connection or a connection pool. You use methods <code>getDedicatedConn()</code> and <code>getConnPool()</code> in class <code>java.sql.Connection</code> to obtain handles to these two types of connection, respectively.</p>
</li>
</ol>
<p>Then, when your application needs to encode or decode binary XML data on the data connection, it automatically fetches the metadata needed for that. The overall sequence of actions is thus as follows:</p>
<ol>
<li>
<p>Create an XML data connection object, in class <code>java.sql.Connection</code>.</p>
</li>
<li>
<p>Create one or more metadata contexts, as needed, using method <code>BinXMLMetadataProviderFactory.createDBMetadataProvider()</code> in package <code>oracle.xml.binxml</code>. A metadata context is sometimes referred to as a metadata repository. You can create a metadata context from a dedicated connection or from a connection pool.</p>
</li>
<li>
<p>Associate the metadata context(s) with the binary XML data connection(s). Use method <code>DBBinXMLMetadataProvider.associateDataConnection()</code> in package <code>oracle.xml.binxml</code> to do this.</p>
</li>
<li>
<p>(Optional) If the XML data originated outside of the database, use method <code>oracle.xdb.XMLType.setFormatPref()</code> to specify that XML data to be sent to the database be encoded in the binary XML format. This applies to a DOM document (class <code>oracle.xdb.XMLType</code>). If you do not specify binary XML, the data is sent to the database as text.</p>
</li>
<li>
<p>Use the usual Java methods to read and write XML data from and to the database. Whenever it is needed for encoding or decoding binary XML documents, the necessary metadata is fetched automatically using the metadata context.</p>
<p>Use the Java DOM API for XML to operate on the XML data at the client level.</p>
</li>
</ol>
<p><a href="xdb11jav.htm#GUID-1234728D-0732-4DC6-82EF-9D372702061F__CHDJJAED">Example 13-15</a> illustrates this.</p>
<div class="infoboxnotealso" id="GUID-1234728D-0732-4DC6-82EF-9D372702061F__GUID-BC392FC9-DE8C-47C9-9CDE-B1AE0E385A68">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb01int.htm#GUID-B8507F44-B010-4384-94E6-101131DD7D88" title="XMLType is an abstract data type that provides different storage models to best fit your data and your use of it. As an abstract data type, your applications and database queries gain in flexibility: the same interface is available for all XMLType operations.">XMLType Storage Models</a>&#34;</span></p>
</li>
<li>
<p><a class="olink ADXDK4440" target="_blank" href="../ADXDK/adx_j_xmlbin.htm#ADXDK4440"><span class="italic">Oracle XML Developer&#39;s Kit Programmer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-1234728D-0732-4DC6-82EF-9D372702061F__CHDJJAED">
<p class="titleinexample">Example 13-15 Using the Java DOM API with Binary XML</p>
<pre dir="ltr">import java.sql.*;
import oracle.jdbc.*;
import oracle.jdbc.pool.OracleDataSource;
import oracle.xdb.XMLType;
import oracle.xml.binxml.*;
class tdadxdbxdb11jav001
{
  public static void printBinXML() throws SQLException, BinXMLException
  {
    // Create datasource to connect to local database
    OracleDataSource ods = new OracleDataSource();
    ods.setURL(&#34;jdbc:oracle:kprb&#34;);
    System.out.println(&#34;Starting Binary XML Java Example&#34;);
    // Create data connection
    Connection conn = ods.<span class="bold">getConnection</span>();
    // Create binary XML metadata context, using connection pool
    DBBinXMLMetadataProvider repos =
      <span class="bold">BinXMLMetadataProviderFactory.createDBMetadataProvider</span>();
    repos.<span class="bold">setConnectionPool</span>(ods);
    // Associate metadata context with data connection
    repos.<span class="bold">associateDataConnection</span>(conn);
    // Query XML data stored in XMLType column as binary XML
    Statement stmt = conn.createStatement();
    ResultSet rset = stmt.executeQuery(&#34;SELECT doc FROM po_binxmltab&#34;);
    // Get the XMLType object
    while (rset.next())
    {
      XMLType xmlobj = (XMLType) rset.getObject(1);
      // Perform XMLType operation
      String xmlvalue = xmlobj.getStringVal();
      System.out.println(xmlvalue);
    }
    // Close result set, statement, and connection
    rset.close();
    stmt.close();
    conn.close();
    System.out.println(&#34;Completed Binary XML Java Example&#34;);
  }
}
</pre></div>
<!-- class="example" --></div>
</div>
<hr/>
<br/>
<p style="text-decoration:underline">Footnote Legend</p>
Footnote&nbsp;1:
<p>This assumes that your XML data is pre-registered with an XML schema, and that it is stored in an <code>XMLType</code> column.</p>
<br/></div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3410">
<tr>
<td class="cellalignment3417">
<table class="cellalignment3415">
<tr>
<td class="cellalignment3414"><a href="xdb_dbmstore.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3414"><a href="xdb12oci.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3419">
<table class="cellalignment3413">
<tr>
<td class="cellalignment3414"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3414"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3414"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3414"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3414"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>