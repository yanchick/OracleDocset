<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-1608"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Transformation%20and%20Validation%20of%20XMLType%20Data"></a><title>Transformation and Validation of XMLType Data</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="There are several Oracle SQL functions and XMLType APIs for transforming XMLType data using XSLT stylesheets and for validating XMLType instances against an XML schema."/>
<meta name="keywords" content="XSLT, stylesheets, use with Oracle XML DB, XMLtransform SQL function, functions, SQL, XMLtransform, use with DBUri servlet, partial validation of XML data, definition, validation of XML data, partial, XMLIsValid SQL function, XMLIsValid, validating, XMLIsValid SQL function, use as CHECK constraint, examples"/>
<meta name="dcterms.created" content="2016-12-08T13:53:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="XML DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E41152-15"/>
<meta name="dcterms.isVersionOf" content="ADXDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="xdb_indexing.htm" title="Previous" type="text/html"/>
<link rel="Next" href="partpg4.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41152-15.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-EC4E2212-67EF-425C-AB5E-D48E62EAB9A7"></a> <span id="PAGE" style="display:none;">16/61</span> <!-- End Header -->
<a id="ADXDB0900"></a>
<h1 id="ADXDB-GUID-EC4E2212-67EF-425C-AB5E-D48E62EAB9A7" class="sect1"><span class="enumeration_chapter">7</span> Transformation and Validation of XMLType Data</h1>
<div>
<p>There are several Oracle SQL functions and <code>XMLType</code> APIs for transforming <code>XMLType</code> data using XSLT stylesheets and for validating <code>XMLType</code> instances against an XML schema.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="xdb08tra.htm#GUID-DBEB8B7E-B335-4D07-8A5D-42083A83155D" title="You can apply XSL transformations to XML Schema-based documents using the built-in Oracle XML&nbsp;DB XSLT processor. In-database XML-specific optimizations can significantly reduce the memory required, eliminate the overhead associated with parsing, and reduce network traffic.">XSL Transformation and Oracle XML&nbsp;DB</a></p>
</li>
<li>
<p><a href="xdb08tra.htm#GUID-45DAA30E-3F14-4D70-8105-ED3855B92A50" title="Besides needing to know whether a particular XML document is well-formed, you often need to know whether it conforms to a given XML schema, that is, whether it is valid with respect to that XML schema.">Validation of XMLType Instances</a></p>
</li>
</ul>
</div>
<a id="ADXDB4172"></a><a id="ADXDB4171"></a>
<div class="props_rev_3"><a id="GUID-DBEB8B7E-B335-4D07-8A5D-42083A83155D"></a>
<h2 id="ADXDB-GUID-DBEB8B7E-B335-4D07-8A5D-42083A83155D" class="sect2"><span class="enumeration_section">7.1</span> XSL Transformation and Oracle XML&nbsp;DB</h2>
<div>
<p>You can apply XSL transformations to XML Schema-based documents using the built-in Oracle XML&nbsp;DB XSLT processor. In-database XML-specific optimizations can significantly reduce the memory required, eliminate the overhead associated with parsing, and reduce network traffic.</p>
<p>The W3C XSLT Recommendation defines an XML language for specifying how to transform XML documents from one form to another. See <a href="http://www.w3.org/TR/xslt" target="_blank"><code>http://www.w3.org/TR/xslt</code></a> for information about the XSLT standard.</p>
<p>Transformation can include mapping from one XML schema to another or mapping from XML to some other format such as HTML or WML.</p>
<p>XSL transformation can be costly in terms of the amount of memory and processing required. In typical XSL processors, the entire source document and stylesheet must be parsed and loaded into memory, before processing can begin. Typically, XSL processors use DOM to provide dynamic memory representations of document and stylesheet, to allow random access to their different parts. The XSL processor then applies the stylesheet to the source document, generating a third document.</p>
<p>Parsing and loading the document and stylesheet into memory before beginning transformation requires significant memory and processor resources. It is especially inefficient when only a small part of the document needs to be transformed.</p>
<p>Oracle XML&nbsp;DB includes an XSLT processor that performs XSL transformations <span class="italic">inside the database</span>. In this way, it can provide XML-specific optimizations that can significantly reduce the memory required to perform the transformation, eliminate overhead associated with parsing, and reduce network traffic.</p>
<p>These optimizations are available, however, <span class="italic">only</span> when the source for the transformation is a <span class="italic">schema-based</span> XML document. In that case, there is no need to parse before processing can begin. The Oracle XML&nbsp;DB lazily loaded virtual DOM loads content only on demand, as the nodes are accessed. This also reduces the memory required, because only parts of the document that need to be processed are loaded.</p>
<p>You can transform XML data in the following ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>In Oracle Database &ndash; Using Oracle SQL function <code>XMLtransform</code>, <code>XMLType</code> method <code>transform()</code>, or PL/SQL package <code>DBMS_XSLPROCESSOR</code></p>
</li>
<li>
<p>In the middle tier &ndash; Using Oracle XML Developer&#39;s Kit transformation options , such as XSLT Processor for Java.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-DBEB8B7E-B335-4D07-8A5D-42083A83155D__GUID-EF4E8E76-0AB6-4F9D-90FA-750FD31F6442">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink SQLRF06171" target="_blank" href="../SQLRF/functions270.htm#SQLRF06171"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about SQL function <code>XMLTransform</code></p>
</li>
<li>
<p><span class="q">&#34;<a href="xdb10pls.htm#GUID-0E3358AF-0819-4B17-AF0B-793E96DA5EB9" title="You can use PL/SQL package DBMS_XSLPROCESSOR to transform one XML document to another or to convert XML data into HTML, PDF, or other formats. This package traverses the DOM tree for the document and applies Extensible Stylesheet Language Transformation (XSLT) statements to it to produce the transformed document.">PL/SQL XSLT Processor for XMLType (DBMS_XSLPROCESSOR)</a>&#34;</span> and <a class="olink ARPLS379" target="_blank" href="../ARPLS/d_xslpro.htm#ARPLS379"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about PL/SQL package <code>DBMS_XSLPROCESSOR</code></p>
</li>
<li>
<p><a class="olink ADXDK19222" target="_blank" href="../ADXDK/adx_j_xslt.htm#ADXDK19222"><span class="italic">Oracle XML Developer&#39;s Kit Programmer&#39;s Guide</span></a> for information about XSLT Processor for Java</p>
</li>
</ul>
</div>
<p>Each of these XML transformation methods takes as input a source XML document and an XSL stylesheet in the form of <code>XMLType</code> instances. For SQL function <code>XMLtransform</code> and <code>XMLType</code> method <code>transform()</code>, the result of the transformation can be an XML document or a non-XML document, such as HTML. However, for PL/SQL package <code>DBMS_XSLPROCESSOR</code>, the result of the transformation is expected to be a valid XML document. Any HTML data generated by a transformation using package <code>DBMS_XSLPROCESSOR</code> is XHTML data, which is both valid XML data and valid HTML data.</p>
<p><a href="xdb08tra.htm#GUID-DBEB8B7E-B335-4D07-8A5D-42083A83155D__BJFCGIFJ">Example 7-1</a> shows part of an XSLT stylesheet, <code>PurchaseOrder.xsl</code>. The complete stylesheet is given in <span class="q">&#34;<a href="apphxdb.htm#GUID-7593BF83-2C00-477D-8973-C070253C4456" title="The full listing is presented of XSLT stylesheet PurchaseOrder.xsl, which is used in various examples.">XSLT Stylesheet Example_ PurchaseOrder.xsl</a>&#34;</span>.</p>
<p>These is nothing Oracle XML&nbsp;DB-specific about the stylesheet of <a href="xdb08tra.htm#GUID-DBEB8B7E-B335-4D07-8A5D-42083A83155D__BJFCGIFJ">Example 7-1</a>. A stylesheet can be stored in an <code>XMLType</code> table or column or stored as non-schema-based XML data inside Oracle XML&nbsp;DB Repository.</p>
<div class="example" id="GUID-DBEB8B7E-B335-4D07-8A5D-42083A83155D__BJFCGIFJ">
<p class="titleinexample">Example 7-1 XSLT Stylesheet Example: PurchaseOrder.xsl</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34; encoding=&#34;WINDOWS-1252&#34;?&gt;
&lt;xsl:stylesheet version=&#34;1.0&#34;
  xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;
  xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34; 
  xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&gt;
  &lt;xsl:template match=&#34;/&#34;&gt;
    &lt;html&gt;
      &lt;head/&gt;
      &lt;body bgcolor=&#34;#003333&#34; text=&#34;#FFFFCC&#34; link=&#34;#FFCC00&#34; vlink=&#34;#66CC99&#34; alink=&#34;#669999&#34;&gt;
        &lt;FONT FACE=&#34;Arial, Helvetica, sans-serif&#34;&gt;
          &lt;xsl:for-each select=&#34;PurchaseOrder&#34;/&gt;
          &lt;xsl:for-each select=&#34;PurchaseOrder&#34;&gt;
            &lt;center&gt;
              &lt;span style=&#34;font-family:Arial; font-weight:bold&#34;&gt;
                &lt;FONT COLOR=&#34;#FF0000&#34;&gt;
                  &lt;B&gt;PurchaseOrder &lt;/B&gt;
                &lt;/FONT&gt;
              &lt;/span&gt;
            &lt;/center&gt;
            &lt;br/&gt;
            &lt;center&gt;
              &lt;xsl:for-each select=&#34;Reference&#34;&gt;
                &lt;span style=&#34;font-family:Arial; font-weight:bold&#34;&gt;
                  &lt;xsl:apply-templates/&gt;
                &lt;/span&gt;
              &lt;/xsl:for-each&gt;
            &lt;/center&gt;
          &lt;/xsl:for-each&gt;
          &lt;P&gt;
            &lt;xsl:for-each select=&#34;PurchaseOrder&#34;&gt;
              &lt;br/&gt;
            &lt;/xsl:for-each&gt;
            &lt;P/&gt;
            &lt;P&gt;
              &lt;xsl:for-each select=&#34;PurchaseOrder&#34;&gt;
                &lt;br/&gt;
              &lt;/xsl:for-each&gt;
            &lt;/P&gt;
          &lt;/P&gt;
          &lt;xsl:for-each select=&#34;PurchaseOrder&#34;/&gt;
          &lt;xsl:for-each select=&#34;PurchaseOrder&#34;&gt;
            &lt;table border=&#34;0&#34; width=&#34;100%&#34; BGCOLOR=&#34;#000000&#34;&gt;
              &lt;tbody&gt;
                &lt;tr&gt;
                  &lt;td WIDTH=&#34;296&#34;&gt;
                    &lt;P&gt;
                      &lt;B&gt;
                        &lt;FONT SIZE=&#34;+1&#34; COLOR=&#34;#FF0000&#34; FACE=&#34;Arial, Helvetica, sans-serif&#34;&gt;Internal&lt;/FONT&gt;
                      &lt;/B&gt;
                    &lt;/P&gt;

                    <span class="bold">...</span>

                  &lt;/td&gt;
                  &lt;td width=&#34;93&#34;/&gt;
                  &lt;td valign=&#34;top&#34; WIDTH=&#34;340&#34;&gt;
                    &lt;B&gt;
                      &lt;FONT COLOR=&#34;#FF0000&#34;&gt;
                        &lt;FONT SIZE=&#34;+1&#34;&gt;Ship To&lt;/FONT&gt;
                      &lt;/FONT&gt;
                    &lt;/B&gt;
                    &lt;xsl:for-each select=&#34;ShippingInstructions&#34;&gt;
                      &lt;xsl:if test=&#34;position()=1&#34;/&gt;
                    &lt;/xsl:for-each&gt;
                    &lt;xsl:for-each select=&#34;ShippingInstructions&#34;&gt;
                    &lt;/xsl:for-each&gt;
 
                      <span class="bold">...</span>
</pre></div>
<!-- class="example" --></div>
<a id="ADXDB4722"></a><a id="ADXDB4723"></a><a id="ADXDB4721"></a>
<div class="props_rev_3"><a id="GUID-9E65513C-C113-4EA1-8511-462AC3EEE2D8"></a>
<h3 id="ADXDB-GUID-9E65513C-C113-4EA1-8511-462AC3EEE2D8" class="sect3"><span class="enumeration_section">7.1.1</span> SQL Function XMLTRANSFORM and XMLType Method TRANSFORM()</h3>
<div>
<p>SQL function <code>XMLtransform</code> transforms an XML document by using an XSLT stylesheet. It returns the processed output as XML, HTML, and so on, as specified by the stylesheet.</p>
<p><a href="xdb08tra.htm#GUID-9E65513C-C113-4EA1-8511-462AC3EEE2D8__i1026954">Figure 7-1</a> shows the syntax of Oracle SQL function <code>XMLtransform</code>. This function takes as arguments an <code>XMLType</code> instance and an XSLT stylesheet. The stylesheet can be an <code>XMLType</code> instance or a <code>VARCHAR2</code> string literal. It applies the stylesheet to the instance and returns an <code>XMLType</code> instance.</p>
<div class="figure" id="GUID-9E65513C-C113-4EA1-8511-462AC3EEE2D8__i1026954">
<p class="titleinfigure">Figure 7-1 XMLTRANSFORM Syntax</p>
<img width="506" height="58" src="img/GUID-9A362789-2AA8-402C-84A6-E389C22A6608-default.gif" alt="Description of Figure 7-1 follows" title="Description of Figure 7-1 follows"/><br/>
<a href="img_text/GUID-9A362789-2AA8-402C-84A6-E389C22A6608-print.htm">Description of &#34;Figure 7-1 XMLTRANSFORM Syntax&#34;</a></div>
<!-- class="figure" -->
<p>You can alternatively use <code>XMLType</code> method <code>transform()</code> as an alternative to Oracle SQL function <code>XMLtransform</code>. It has the same functionality.</p>
<p><a href="xdb08tra.htm#GUID-9E65513C-C113-4EA1-8511-462AC3EEE2D8__i1026237">Figure 7-2</a> shows how <code>XMLtransform</code> transforms an XML document by using an XSLT stylesheet. It returns the processed output as XML, HTML, and so on, as specified by the XSLT stylesheet. You typically use <code>XMLtransform</code> when retrieving or generating XML documents stored as <code>XMLType</code> in the database.</p>
<div class="infoboxnotealso" id="GUID-9E65513C-C113-4EA1-8511-462AC3EEE2D8__GUID-D322B013-B74D-40C1-90A9-9A4D54B532F9">
<p class="notep1">See Also:</p>
<p><a href="xdb01int.htm#GUID-43B25825-FE37-4782-B627-8B2EFB44068D__BABCJCII">Figure 1-3</a> in <a href="xdb01int.htm#GUID-A8E97BAC-3685-46C8-8FD9-3D31D36F9344" title="Oracle XML&nbsp;DB provides Oracle Database with native XML support by encompassing both the SQL and XML data models in an interoperable way.">Introduction to Oracle XML&nbsp;DB</a></p>
</div>
<div class="figure" id="GUID-9E65513C-C113-4EA1-8511-462AC3EEE2D8__i1026237">
<p class="titleinfigure">Figure 7-2 Using XMLTRANSFORM</p>
<img width="453" height="66" src="img/GUID-764640D9-ACD7-4A54-8C95-E8CF1463FEBA-default.png" alt="Description of Figure 7-2 follows" title="Description of Figure 7-2 follows"/><br/>
<a href="img_text/GUID-764640D9-ACD7-4A54-8C95-E8CF1463FEBA-print.htm">Description of &#34;Figure 7-2 Using XMLTRANSFORM&#34;</a></div>
<!-- class="figure" --></div>
<a id="ADXDB4725"></a><a id="ADXDB4726"></a><a id="ADXDB4728"></a><a id="ADXDB4173"></a><a id="ADXDB4724"></a>
<div class="props_rev_3"><a id="GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091"></a>
<h4 id="ADXDB-GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091" class="sect4"><span class="enumeration_section">7.1.1.1</span> XMLTRANSFORM and XMLType.transform(): Examples</h4>
<div>
<p>Examples illustrate how to use Oracle SQL function <code>XMLtransform</code> and <code>XMLType</code> method <code>transform()</code> to transform XML data stored as <code>XMLType</code> to various formats.</p>
<div class="section">
<p><a href="xdb08tra.htm#GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091__CFHJDEJE">Example 7-2</a> sets up an XML schema and tables that are needed to run other examples in this chapter. The call to <code>deleteSchema</code> here ensures that there is no existing XML schema before creating one. If no such schema exists, then <code>deleteSchema</code> raises an error.</p>
<p><a href="xdb08tra.htm#GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091__i1027535">Example 7-3</a> stores an XSLT stylesheet, then retrieves it and uses it with Oracle SQL function <code>XMLTransform</code> to transform the XML data stored in <a href="xdb08tra.htm#GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091__CFHJDEJE">Example 7-2</a>.</p>
<p><a href="xdb08tra.htm#GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091__CFHGHGJI">Example 7-4</a> uses <code>XMLType</code> method <code>transform()</code> with an XSL stylesheet created on the fly.</p>
<p><a href="xdb08tra.htm#GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091__BJFJJDIB">Example 7-5</a> uses <code>XMLTransform</code> to apply an XSL stylesheet to produce HTML code. PL/SQL constructor <code>XDBURIType</code> reads the XSL stylesheet from Oracle XML&nbsp;DB Repository.</p>
<p>Only part of the HTML result is shown in <a href="xdb08tra.htm#GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091__BJFJJDIB">Example 7-5</a>. Omitted parts are indicated with an ellipsis (<span class="bold"><code>. . .</code></span>). <a href="xdb08tra.htm#GUID-A35A47AF-A28C-4B2F-BB1C-AA10500E3BAF__BABJGIGH">Figure 7-3</a> shows what the transformed result looks like in a Web browser.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091__CFHJDEJE">
<p class="titleinexample">Example 7-2 Registering an XML Schema and Inserting XML Data</p>
<pre dir="ltr">BEGIN
  -- Delete the schema, if it already exists.
  DBMS_XMLSCHEMA.deleteSchema(&#39;http://www.example.com/schemas/ipo.xsd&#39;,4);
END;
/
BEGIN
  -- Register the schema
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; &#39;http://www.example.com/schemas/ipo.xsd&#39;,
    SCHEMADOC =&gt; &#39;&lt;schema targetNamespace=&#34;http://www.example.com/IPO&#34;
                          xmlns=&#34;http://www.w3.org/2001/XMLSchema&#34;
                          xmlns:ipo=&#34;http://www.example.com/IPO&#34;&gt;
                    &lt;!-- annotation&gt;
                      &lt;documentation&gt;
                       International Purchase order schema for Example.com
                       Copyright 2000 Example.com. All rights reserved.
                      &lt;/documentation&gt;
                    &lt;/annotation --&gt;
                    &lt;element name=&#34;purchaseOrder&#34; type=&#34;ipo:PurchaseOrderType&#34;/&gt;
                    &lt;element name=&#34;comment&#34; type=&#34;string&#34;/&gt;
                    &lt;complexType name=&#34;PurchaseOrderType&#34;&gt;
                      &lt;sequence&gt;
                        &lt;element name=&#34;shipTo&#34;     type=&#34;ipo:Address&#34;/&gt;
                        &lt;element name=&#34;billTo&#34;     type=&#34;ipo:Address&#34;/&gt;
                        &lt;element ref=&#34;ipo:comment&#34; minOccurs=&#34;0&#34;/&gt;
                        &lt;element name=&#34;items&#34;      type=&#34;ipo:Items&#34;/&gt;
                      &lt;/sequence&gt;
                      &lt;attribute name=&#34;orderDate&#34; type=&#34;date&#34;/&gt;
                    &lt;/complexType&gt;
                    &lt;complexType name=&#34;Items&#34;&gt;
                      &lt;sequence&gt;
                        &lt;element name=&#34;item&#34; minOccurs=&#34;0&#34; maxOccurs=&#34;unbounded&#34;&gt;
                          &lt;complexType&gt;
                            &lt;sequence&gt;
                              &lt;element name=&#34;productName&#34; type=&#34;string&#34;/&gt;
                              &lt;element name=&#34;quantity&#34;&gt;
                                &lt;simpleType&gt;
                                  &lt;restriction base=&#34;positiveInteger&#34;&gt;
                                    &lt;maxExclusive value=&#34;100&#34;/&gt;
                                  &lt;/restriction&gt;
                                &lt;/simpleType&gt;
                              &lt;/element&gt;
                              &lt;element name=&#34;USPrice&#34;    type=&#34;decimal&#34;/&gt;
                              &lt;element ref=&#34;ipo:comment&#34; minOccurs=&#34;0&#34;/&gt;
                              &lt;element name=&#34;shipDate&#34;   type=&#34;date&#34; minOccurs=&#34;0&#34;/&gt;
                            &lt;/sequence&gt;
                            &lt;attribute name=&#34;partNum&#34; type=&#34;ipo:SKU&#34; use=&#34;required&#34;/&gt;
                          &lt;/complexType&gt;
                        &lt;/element&gt;
                      &lt;/sequence&gt;
                    &lt;/complexType&gt;
                    &lt;complexType name=&#34;Address&#34;&gt;
                      &lt;sequence&gt;
                        &lt;element name=&#34;name&#34;    type=&#34;string&#34;/&gt;
                        &lt;element name=&#34;street&#34;  type=&#34;string&#34;/&gt;
                        &lt;element name=&#34;city&#34;    type=&#34;string&#34;/&gt;
                        &lt;element name=&#34;state&#34;   type=&#34;string&#34;/&gt;
                        &lt;element name=&#34;country&#34; type=&#34;string&#34;/&gt;
                        &lt;element name=&#34;zip&#34;     type=&#34;string&#34;/&gt;
                      &lt;/sequence&gt;
                    &lt;/complexType&gt;
                    &lt;simpleType name=&#34;SKU&#34;&gt;
                      &lt;restriction base=&#34;string&#34;&gt;
                        &lt;pattern value=&#34;[0-9]{3}-[A-Z]{2}&#34;/&gt;
                      &lt;/restriction&gt;
                    &lt;/simpleType&gt;
                  &lt;/schema&gt;&#39;,
    LOCAL     =&gt; TRUE,
    GENTYPES  =&gt; TRUE);
END;
/

-- Create table to hold XML purchase-order documents, and insert the documents
DROP TABLE po_tab;
CREATE TABLE po_tab (id NUMBER, xmlcol XMLType) 
 XMLType COLUMN xmlcol
 XMLSCHEMA &#34;http://www.example.com/schemas/ipo.xsd&#34;
 ELEMENT &#34;purchaseOrder&#34;;

INSERT INTO po_tab 
  VALUES(1, XMLType(
              &#39;&lt;?xml version=&#34;1.0&#34;?&gt;
               &lt;ipo:purchaseOrder
                 xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
                 xmlns:ipo=&#34;http://www.example.com/IPO&#34;
                 xsi:schemaLocation=&#34;http://www.example.com/IPO
                                     http://www.example.com/schemas/ipo.xsd&#34;
                 orderDate=&#34;1999-12-01&#34;&gt;
                 &lt;shipTo&gt;
                   &lt;name&gt;Helen Zoe&lt;/name&gt;
                   &lt;street&gt;121 Broadway&lt;/street&gt;
                   &lt;city&gt;Cardiff&lt;/city&gt;
                   &lt;state&gt;Wales&lt;/state&gt;
                   &lt;country&gt;UK&lt;/country&gt;
                   &lt;zip&gt;CF2 1QJ&lt;/zip&gt;
                 &lt;/shipTo&gt;
                 &lt;billTo&gt;
                   &lt;name&gt;Robert Smith&lt;/name&gt;
                   &lt;street&gt;8 Oak Avenue&lt;/street&gt;
                   &lt;city&gt;Old Town&lt;/city&gt;
                   &lt;state&gt;CA&lt;/state&gt;
                   &lt;country&gt;US&lt;/country&gt;
                   &lt;zip&gt;95819&lt;/zip&gt;
                 &lt;/billTo&gt;
                 &lt;items&gt;
                   &lt;item partNum=&#34;833-AA&#34;&gt;
                     &lt;productName&gt;Lapis necklace&lt;/productName&gt;
                     &lt;quantity&gt;1&lt;/quantity&gt;
                     &lt;USPrice&gt;99.95&lt;/USPrice&gt;
                     &lt;ipo:comment&gt;Want this for the holidays!&lt;/ipo:comment&gt;
                     &lt;shipDate&gt;1999-12-05&lt;/shipDate&gt;
                   &lt;/item&gt;
                 &lt;/items&gt;
               &lt;/ipo:purchaseOrder&gt;&#39;));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091__i1027535">
<p class="titleinexample">Example 7-3 Using SQL Function XMLTRANSFORM to Apply an XSL Stylesheet</p>
<pre dir="ltr">DROP TABLE stylesheet_tab;
CREATE TABLE stylesheet_tab (id NUMBER, stylesheet XMLType);
INSERT INTO stylesheet_tab 
  VALUES (1, 
          XMLType(
            &#39;&lt;?xml version=&#34;1.0&#34; ?&gt;
             &lt;xsl:stylesheet version=&#34;1.0&#34; 
                             xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;&gt;
               &lt;xsl:template match=&#34;*&#34;&gt;
                 &lt;td&gt;
                   &lt;xsl:choose&gt;
                     &lt;xsl:when test=&#34;count(child::*) &gt; 1&#34;&gt;
                       &lt;xsl:call-template name=&#34;nested&#34;/&gt;
                     &lt;/xsl:when&gt;
                     &lt;xsl:otherwise&gt;
                       &lt;xsl:value-of select=&#34;name(.)&#34;/&gt;:&lt;xsl:value-of 
                                                          select=&#34;text()&#34;/&gt;
                     &lt;/xsl:otherwise&gt;
                   &lt;/xsl:choose&gt;
                 &lt;/td&gt;
               &lt;/xsl:template&gt;
               &lt;xsl:template match=&#34;*&#34; name=&#34;nested&#34; priority=&#34;-1&#34; mode=&#34;nested2&#34;&gt;
                 &lt;b&gt;
                   &lt;!-- xsl:value-of select=&#34;count(child::*)&#34;/ --&gt;
                   &lt;xsl:choose&gt;
                     &lt;xsl:when test=&#34;count(child::*) &gt; 1&#34;&gt;
                       &lt;xsl:value-of select=&#34;name(.)&#34;/&gt;:&lt;xsl:apply-templates 
                                                          mode=&#34;nested2&#34;/&gt;
                     &lt;/xsl:when&gt;
                     &lt;xsl:otherwise&gt;
                       &lt;xsl:value-of select=&#34;name(.)&#34;/&gt;:&lt;xsl:value-of 
                                                          select=&#34;text()&#34;/&gt;
                     &lt;/xsl:otherwise&gt;
                   &lt;/xsl:choose&gt;
                 &lt;/b&gt;
               &lt;/xsl:template&gt;
             &lt;/xsl:stylesheet&gt;&#39;));

SELECT XMLSerialize(DOCUMENT <span class="bold">XMLtransform</span>(x.xmlcol, y.stylesheet)
                    AS VARCHAR2(1000))
  AS result FROM po_tab x, stylesheet_tab y WHERE y.id = 1;
</pre>
<p>This produces the following output (pretty-printed here for readability):</p>
<pre dir="ltr">RESULT
---------------------------------------------------------
&lt;td&gt;
  &lt;b&gt;ipo:purchaseOrder:
    &lt;b&gt;shipTo:
      &lt;b&gt;name:Helen Zoe&lt;/b&gt;
      &lt;b&gt;street:100 Broadway&lt;/b&gt;
      &lt;b&gt;city:Cardiff&lt;/b&gt;
      &lt;b&gt;state:Wales&lt;/b&gt;
      &lt;b&gt;country:UK&lt;/b&gt;
      &lt;b&gt;zip:CF2 1QJ&lt;/b&gt;
    &lt;/b&gt;
    &lt;b&gt;billTo:
      &lt;b&gt;name:Robert Smith&lt;/b&gt;
      &lt;b&gt;street:8 Oak Avenue&lt;/b&gt;
      &lt;b&gt;city:Old Town&lt;/b&gt;
      &lt;b&gt;state:CA&lt;/b&gt;
      &lt;b&gt;country:US&lt;/b&gt;
      &lt;b&gt;zip:95819&lt;/b&gt;
    &lt;/b&gt;
    &lt;b&gt;items:&lt;/b&gt;
  &lt;/b&gt;
&lt;/td&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091__CFHGHGJI">
<p class="titleinexample">Example 7-4 Using XMLType Method TRANSFORM() with a Transient XSL Stylesheet</p>
<pre dir="ltr">SELECT XMLSerialize(
         DOCUMENT
         x.xmlcol.<span class="bold">transform</span>(
           XMLType(&#39;&lt;?xml version=&#34;1.0&#34; ?&gt;
                  &lt;xsl:stylesheet
                      version=&#34;1.0&#34;
                      xmlns:xsl=&#34;http://www.w3.org/1999/XSL/Transform&#34;&gt;
                    &lt;xsl:template match=&#34;*&#34;&gt;
                      &lt;td&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test=&#34;count(child::*) &gt; 1&#34;&gt;
                            &lt;xsl:call-template name=&#34;nested&#34;/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:otherwise&gt;
                            &lt;xsl:value-of
                               select =
                                 &#34;name(.)&#34;/&gt;:&lt;xsl:value-of select=&#34;text()&#34;/&gt;
                          &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/td&gt;
                    &lt;/xsl:template&gt;
                    &lt;xsl:template match=&#34;*&#34; name=&#34;nested&#34; priority=&#34;-1&#34;
                                  mode=&#34;nested2&#34;&gt;
                      &lt;b&gt;
                        &lt;!-- xsl:value-of select=&#34;count(child::*)&#34;/ --&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test=&#34;count(child::*) &gt; 1&#34;&gt;
                            &lt;xsl:value-of select=&#34;name(.)&#34;/&gt;:
                            &lt;xsl:apply-templates mode=&#34;nested2&#34;/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:otherwise&gt;
                            &lt;xsl:value-of
                               select =
                                 &#34;name(.)&#34;/&gt;:&lt;xsl:value-of select=&#34;text()&#34;/&gt;
                          &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/b&gt;
                    &lt;/xsl:template&gt;
                  &lt;/xsl:stylesheet&gt;&#39;))
         AS varchar2(1000))
  FROM po_tab x;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-8AC216AA-45F5-43F1-8E0E-0A85021E7091__BJFJJDIB">
<p class="titleinexample">Example 7-5 Using XMLTRANSFORM to Apply an XSL Stylesheet Retrieved Using XDBURIType</p>
<pre dir="ltr">SELECT
  <span class="bold">XMLTransform</span>(
    OBJECT_VALUE, 
    <span class="bold">XDBURIType</span>(&#39;/source/schemas/poSource/xsl/purchaseOrder.xsl&#39;).getXML())
  FROM purchaseorder
  WHERE XMLExists(&#39;$p/PurchaseOrder[Reference=&#34;SBELL-2002100912333601PDT&#34;]&#39;
                  PASSING OBJECT_VALUE AS &#34;p&#34;);
 
XMLTRANSFORM(OBJECT_VALUE, XDBURITYPE(&#39;/SOURCE/SCHEMAS/POSOURCE/XSL/PURCHASEORDER.XSL&#39;).GET
---------------------------------------------------------------------------------------------
&lt;html xmlns:xdb=&#34;http://xmlns.oracle.com/xdb&#34;
      xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&gt;
  &lt;head/&gt;
  &lt;body bgcolor=&#34;#003333&#34; text=&#34;#FFFFCC&#34; link=&#34;#FFCC00&#34; vlink=&#34;#66CC99&#34; alink=&#34;#669999&#34;&gt;
    &lt;FONT FACE=&#34;Arial, Helvetica, sans-serif&#34;&gt;
      &lt;center&gt;
        &lt;span style=&#34;font-family:Arial; font-weight:bold&#34;&gt;
          &lt;FONT COLOR=&#34;#FF0000&#34;&gt;
            &lt;B&gt;PurchaseOrder &lt;/B&gt;
          &lt;/FONT&gt;
        &lt;/span&gt;
      &lt;/center&gt;
      &lt;br/&gt;
      &lt;center&gt;
        &lt;span style=&#34;font-family:Arial; font-weight:bold&#34;&gt;SBELL-2002100912333601PDT&lt;/span&gt;
      &lt;/center&gt;
      &lt;P&gt;
        &lt;br/&gt;
        &lt;P/&gt;
        &lt;P&gt;
          &lt;br/&gt;
        &lt;/P&gt;
      &lt;/P&gt;
      &lt;table border=&#34;0&#34; width=&#34;100%&#34; BGCOLOR=&#34;#000000&#34;&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td WIDTH=&#34;296&#34;&gt;
              &lt;P&gt;
                &lt;B&gt;
                  &lt;FONT SIZE=&#34;+1&#34; COLOR=&#34;#FF0000&#34; FACE=&#34;Arial, Helvetica,
                        sans-serif&#34;&gt;Internal&lt;/FONT&gt;
                &lt;/B&gt;
              &lt;/P&gt;
              &lt;table border=&#34;0&#34; width=&#34;98%&#34; BGCOLOR=&#34;#000099&#34;&gt;
</pre>
<pre dir="ltr"><span class="bold">                                                     . . .</span>
</pre>
<pre dir="ltr">              &lt;/table&gt;
            &lt;/td&gt;
            &lt;td width=&#34;93&#34;&gt;
            &lt;/td&gt;
            &lt;td valign=&#34;top&#34; WIDTH=&#34;340&#34;&gt;
              &lt;B&gt;
                &lt;FONT COLOR=&#34;#FF0000&#34;&gt;
                  &lt;FONT SIZE=&#34;+1&#34;&gt;Ship To&lt;/FONT&gt;
                &lt;/FONT&gt;
              &lt;/B&gt;
              &lt;table border=&#34;0&#34; BGCOLOR=&#34;#999900&#34;&gt;
                <span class="bold">. . .</span>
              &lt;/table&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br/&gt;
      &lt;B&gt;
        &lt;FONT COLOR=&#34;#FF0000&#34; SIZE=&#34;+1&#34;&gt;Items:&lt;/FONT&gt;
      &lt;/B&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;table border=&#34;0&#34;&gt;
        <span class="bold">. . .</span>
      &lt;/table&gt;
    &lt;/FONT&gt;
  &lt;/body&gt;
&lt;/html&gt;
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="ADXDB4227"></a><a id="ADXDB4228"></a><a id="ADXDB4226"></a>
<div class="props_rev_3"><a id="GUID-A35A47AF-A28C-4B2F-BB1C-AA10500E3BAF"></a>
<h3 id="ADXDB-GUID-A35A47AF-A28C-4B2F-BB1C-AA10500E3BAF" class="sect3"><span class="enumeration_section">7.1.2</span> XSL Transformation Using DBUri Servlet</h3>
<div>
<p>You can apply an XSL transformation to XML content that is generated by the DBUri servlet.</p>
<p><a href="xdb08tra.htm#GUID-A35A47AF-A28C-4B2F-BB1C-AA10500E3BAF__BABJGIGH">Figure 7-3</a> shows the result of such a transformation. The URL is the following (it is split and truncated here):</p>
<pre dir="ltr">http://localhost:8080/oradb/SCOTT/PURCHASEORDER/ROW/PurchaseOrder[Reference=&#34;SBELL-2003030912333601PDT&#34;]
contenttype=text/html&amp;<span class="bold">transform=/home/SCOTT/xsl/purchaseOrder.xsl</span>...
</pre>
<p>The presence of parameter <code>transform</code> causes the DBUri servlet to use SQL function <code>XMLTransform</code> to apply the XSL stylesheet at <code>/home/SCOTT/xsl/purchaseOrder.xsl</code> to the <code>PurchaseOrder</code> document that is identified by the main URL. The result of the transformation, which is HTML code, is returned to the browser for display. The URL also uses parameter <code>contentType</code> to specify that the MIME-type of the final document is <code>text/html</code>.</p>
<div class="figure" id="GUID-A35A47AF-A28C-4B2F-BB1C-AA10500E3BAF__BABJGIGH">
<p class="titleinfigure">Figure 7-3 Database XSL Transformation of a PurchaseOrder Using DBUri Servlet</p>
<img width="1024" height="768" src="img/GUID-172D0319-C5B8-49ED-A2C0-4EA9CB9C3A58-default.gif" alt="Description of Figure 7-3 follows" title="Description of Figure 7-3 follows"/><br/>
<a href="img_text/GUID-172D0319-C5B8-49ED-A2C0-4EA9CB9C3A58-default.htm">Description of &#34;Figure 7-3 Database XSL Transformation of a PurchaseOrder Using DBUri Servlet&#34;</a></div>
<!-- class="figure" -->
<p><a href="xdb08tra.htm#GUID-A35A47AF-A28C-4B2F-BB1C-AA10500E3BAF__CEGGCDJE">Figure 7-4</a> shows table <code>departments</code> displayed as an HTML document. You need no code to achieve this. You need only an <code>XMLType</code> view based on SQL/XML functions, an industry-standard XSL stylesheet, and <code>DBUri</code> servlet.</p>
<div class="figure" id="GUID-A35A47AF-A28C-4B2F-BB1C-AA10500E3BAF__CEGGCDJE">
<p class="titleinfigure">Figure 7-4 Database XSL Transformation of Departments Table Using DBUri Servlet</p>
<img width="892" height="632" src="img/GUID-582ADE8A-0989-4377-9CA3-21B807F3FC1F-default.gif" alt="Description of Figure 7-4 follows" title="Description of Figure 7-4 follows"/><br/>
<a href="img_text/GUID-582ADE8A-0989-4377-9CA3-21B807F3FC1F-default.htm">Description of &#34;Figure 7-4 Database XSL Transformation of Departments Table Using DBUri Servlet&#34;</a></div>
<!-- class="figure" --></div>
</div>
</div>
<a id="ADXDB4729"></a>
<div class="props_rev_3"><a id="GUID-45DAA30E-3F14-4D70-8105-ED3855B92A50"></a>
<h2 id="ADXDB-GUID-45DAA30E-3F14-4D70-8105-ED3855B92A50" class="sect2"><span class="enumeration_section">7.2</span> Validation of XMLType Instances</h2>
<div>
<p>Besides needing to know whether a particular XML document is well-formed, you often need to know whether it conforms to a given XML schema, that is, whether it is valid with respect to that XML schema.</p>
<p>XML schema-based data that is stored as binary XML it is automatically validated fully whenever it is inserted or updated. This validation does not require building a DOM. It is done using streaming, which is efficient and minimizes memory use.</p>
<p>For <code>XMLType</code> data that is stored object-relationally, full validation requires building a DOM, which can be costly in terms of memory management. For this reason, Oracle XML&nbsp;DB does not automatically perform full validation when you insert or update data that is stored object-relationally.</p>
<p>However, in the process of decomposing XML data to store it object-relationally, Oracle XML&nbsp;DB does automatically perform partial validation, to ensure that the structure of the XML document conforms to the SQL data type definitions that were derived from the XML schema.</p>
<p>If you require full validation for <code>XMLType</code> data stored object-relationally, then consider validating on the client before inserting the data into the database or updating it.</p>
<p>You can use the following to perform full validation and manipulate the recorded validation status of XML documents:</p>
<ul style="list-style-type: disc;">
<li>
<p>Oracle SQL function <span class="bold"><code>XMLIsValid</code></span> and <code>XMLType</code> method <span class="bold"><code>IsSchemaValid()</code></span> &ndash; Run the validation process unconditionally. Do not record any validation status. Return:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>1</code> if the document is determined to be <span class="italic">valid</span>.</p>
</li>
<li>
<p><code>0</code> if the document is determined to be <span class="italic">invalid</span> or the validity of the document <span class="italic">cannot be determined</span>.</p>
</li>
</ul>
</li>
<li>
<p><code>XMLType</code> method <span class="bold"><code>SchemaValidate()</code></span> &ndash; Runs the validation process if the validation status is <code>0</code>, which it is by default. Sets the validation status to <code>1</code> if the document is determined to be <span class="italic">valid</span>. (Otherwise, the status remains <code>0</code>.)</p>
</li>
<li>
<p><code>XMLType</code> method <span class="bold"><code>isSchemaValidated()</code></span> returns the recorded validation status of an <code>XMLType</code> instance.</p>
</li>
<li>
<p><code>XMLType</code> method <span class="bold"><code>setSchemaValidated()</code></span> sets (records) the validation status of an <code>XMLType</code> instance.</p>
</li>
</ul>
<p>Note that the validation status indicates knowledge of validity, as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>1</code> means that the document is known to be <span class="italic">valid</span>.</p>
</li>
<li>
<p><code>0</code> means that validity of the document is <span class="italic">unknown</span>. The document might have been shown to be invalid during a validation check, but that invalidity is not recorded. A recorded validation status of <code>0</code> indicates only a lack of knowledge about the document&#39;s validity.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-45DAA30E-3F14-4D70-8105-ED3855B92A50__GUID-F462B68A-F414-4F2B-98FB-5EBD0D1D0AAE">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="xdb08tra.htm#GUID-BEF51F7F-33A8-4FED-AA21-FE8849821BEC" title="When you insert XML Schema-based documents into the database they can be validated partially or fully.">Partial and Full XML Schema Validation</a>&#34;</span></p>
</li>
<li>
<p><a class="olink SQLRF06147" target="_blank" href="../SQLRF/functions261.htm#SQLRF06147"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about Oracle SQL function <code>XMLIsValid</code></p>
</li>
<li>
<p><a class="olink ARPLS369" target="_blank" href="../ARPLS/t_xml.htm#ARPLS369"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about <code>XMLType</code> methods <code>IsSchemaValid()</code>, <code>IsSchemaValidated()</code>, <code>SchemaValidate()</code>, and <code>setSchemaValidated()</code></p>
</li>
</ul>
</div>
</div>
<a id="ADXDB4102"></a>
<div class="props_rev_3"><a id="GUID-BEF51F7F-33A8-4FED-AA21-FE8849821BEC"></a>
<h3 id="ADXDB-GUID-BEF51F7F-33A8-4FED-AA21-FE8849821BEC" class="sect3"><span class="enumeration_section">7.2.1</span> Partial and Full XML Schema Validation</h3>
<div>
<p>When you insert XML Schema-based documents into the database they can be validated partially or fully.</p>
</div>
<a id="ADXDB4104"></a><a id="ADXDB4103"></a>
<div class="props_rev_3"><a id="GUID-2360608F-BA11-4BEB-98F3-E79888A57BDD"></a>
<h4 id="ADXDB-GUID-2360608F-BA11-4BEB-98F3-E79888A57BDD" class="sect4"><span class="enumeration_section">7.2.1.1</span> Partial Validation</h4>
<div>
<p>For binary XML storage, Oracle XML&nbsp;DB validates XML Schema-based documents fully when they are inserted into an <code>XMLType</code> table or column. For object-relational XML storage, only a partial validation is performed. This is because complete XML schema validation is quite costly for object-relational storage, in terms of performance.</p>
<p><span class="bold">Partial validation</span> ensures only that all of the mandatory elements and attributes are present, and that there are no unexpected elements or attributes in the document. That is, it ensures only that the structure of the XML document conforms to the SQL data type definitions that were derived from the XML schema. Partial validation does not ensure that the instance document is fully compliant with the XML schema.</p>
<p><a href="xdb08tra.htm#GUID-2360608F-BA11-4BEB-98F3-E79888A57BDD__BABFEGDC">Example 7-6</a> provides an example of failing partial validation while inserting an XML document into table <code>PurchaseOrder</code>, which is stored object-relationally.</p>
<div class="example" id="GUID-2360608F-BA11-4BEB-98F3-E79888A57BDD__BABFEGDC">
<p class="titleinexample">Example 7-6 Error When Inserting Incorrect XML Document (Partial Validation)</p>
<pre dir="ltr">INSERT INTO purchaseorder
  VALUES(XMLType(bfilename(&#39;XMLDIR&#39;, &#39;InvalidElement.xml&#39;),
                 nls_charset_id(&#39;AL32UTF8&#39;)));
  VALUES(XMLType(bfilename(&#39;XMLDIR&#39;, &#39;InvalidElement.xml&#39;),
         *
ERROR at line 2:
ORA-30937: No schema definition for &#39;UserName&#39; (namespace &#39;##local&#39;) in parent
&#39;/PurchaseOrder&#39;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="ADXDB4105"></a>
<div class="props_rev_3"><a id="GUID-CD089007-3832-4812-8617-642B2854C6BE"></a>
<h4 id="ADXDB-GUID-CD089007-3832-4812-8617-642B2854C6BE" class="sect4"><span class="enumeration_section">7.2.1.2</span> Full Validation</h4>
<div>
<p>Loading XML Schema-based data into binary XML storage fully validates it against the target XML schemas. For object-relational <code>XMLType</code> storage, you can force full validation at any time.</p>
<p>To force full validation, use either of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Table level <code>CHECK</code> constraint</p>
</li>
<li>
<p>PL/SQL <code>BEFORE INSERT</code> trigger</p>
</li>
</ul>
<p>Both approaches ensure that only valid XML documents can be stored in the <code>XMLType</code> table.</p>
<p>The advantage of a <code>TABLE CHECK</code> constraint is that it is easy to code. The disadvantage is that it is based on Oracle SQL function <code>XMLisValid</code>, so it can only indicate whether or not the XML document is valid. If an XML document is invalid, a <code>TABLE CHECK</code> constraint cannot provide any information as to <span class="italic">why</span> it is invalid.</p>
<p>A <code>BEFORE INSERT</code> trigger requires slightly more code. The trigger validates the XML document by invoking <code>XMLType</code> method <code>schemaValidate()</code>. The advantage of using <code>schemaValidate()</code> is that the exception raised provides additional information about what was wrong with the instance document. Using a <code>BEFORE INSERT</code> trigger also makes it possible to attempt corrective action when an invalid document is encountered.</p>
</div>
<a id="ADXDB4107"></a><a id="ADXDB4108"></a><a id="ADXDB4106"></a>
<div class="props_rev_3"><a id="GUID-2920BC25-F964-452D-973B-5FACD538A744"></a>
<h5 id="ADXDB-GUID-2920BC25-F964-452D-973B-5FACD538A744" class="sect5"><span class="enumeration_section">7.2.1.2.1</span> Full XML Schema Validation Costs Processing Time and Memory Usage</h5>
<div>
<p>Unless you are using binary XML storage, full XML schema validation costs processing time and memory. You should thus perform full XML schema validation only when necessary. If you can rely on your application to validate an XML document, you can obtain higher overall throughput with non-binary XML storage, by avoiding the overhead associated with full validation. If you cannot be sure about the validity of incoming XML documents, you can rely on the database to ensure that an <code>XMLType</code> table or column contains only schema-valid XML documents.</p>
<p><a href="xdb08tra.htm#GUID-2920BC25-F964-452D-973B-5FACD538A744__BABHIFBH">Example 7-7</a> shows how to force a full XML schema validation by adding a <code>CHECK</code> constraint to an <code>XMLType</code> table. In <a href="xdb08tra.htm#GUID-2920BC25-F964-452D-973B-5FACD538A744__BABHIFBH">Example 7-7</a>, the XML document <code>InvalidReference</code> is a not valid with respect to the XML schema. The XML schema defines a minimum length of 18 characters for the text node associated with the <code>Reference</code> element. In this document, the node contains the value <code>SBELL-20021009</code>, which is only 14 characters long. Partial validation would not catch this error. Unless the constraint or trigger is present, attempts to insert this document into the database would succeed.</p>
<div class="example" id="GUID-2920BC25-F964-452D-973B-5FACD538A744__BABHIFBH">
<p class="titleinexample">Example 7-7 Forcing Full XML Schema Validation Using a CHECK Constraint</p>
<pre dir="ltr">ALTER TABLE purchaseorder
  ADD CONSTRAINT validate_purchaseorder
  <span class="bold">CHECK (XMLIsValid(OBJECT_VALUE) = 1);</span>
 
Table altered.
 
INSERT INTO purchaseorder
  VALUES (XMLType(bfilename(&#39;XMLDIR&#39;, &#39;InvalidReference.xml&#39;),
                  nls_charset_id(&#39;AL32UTF8&#39;)));

INSERT INTO purchaseorder
*
 
ERROR at line 1:
ORA-02290: check constraint (QUINE.VALIDATE_PURCHASEORDER) violated
</pre>
<p>Pseudocolumn <code>OBJECT_VALUE</code> can be used to access the content of an <code>XMLType</code> table from within a trigger. <a href="xdb08tra.htm#GUID-2920BC25-F964-452D-973B-5FACD538A744__BABDJDHC">Example 7-8</a> illustrates this, showing how to use a <code>BEFORE INSERT</code> trigger to validate that the data being inserted into the <code>XMLType</code> table conforms to the specified XML schema.</p>
</div>
<!-- class="example" -->
<div class="example" id="GUID-2920BC25-F964-452D-973B-5FACD538A744__BABDJDHC">
<p class="titleinexample">Example 7-8 Enforcing Full XML Schema Validation Using a BEFORE INSERT Trigger</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER validate_purchaseorder
   BEFORE INSERT ON purchaseorder
   FOR EACH ROW
BEGIN
  IF (:new.OBJECT_VALUE IS NOT NULL) THEN :new.<span class="bold">OBJECT_VALUE.schemavalidate</span>();
  END IF;
END;
/

INSERT INTO purchaseorder  VALUES (XMLType(bfilename(&#39;XMLDIR&#39;, &#39;InvalidReference.xml&#39;),
                  nls_charset_id(&#39;AL32UTF8&#39;)));
  VALUES (XMLType( bfilename(&#39;XMLDIR&#39;, &#39;InvalidReference.xml&#39;),
          *
ERROR at line 2:
ORA-31154: invalid XML document
ORA-19202: Error occurred in XML processing
LSX-00221: &#34;SBELL-20021009&#34; is too short (minimum length is 18)
LSX-00213: only 0 occurrences of particle &#34;sequence&#34;, minimum is 1
ORA-06512: at &#34;SYS.XMLTYPE&#34;, line 354
ORA-06512: at &#34;QUINE.VALIDATE_PURCHASEORDER&#34;, line 3
ORA-04088: error during execution of trigger &#39;QUINE.VALIDATE_PURCHASEORDER&#39;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<a id="ADXDB4741"></a><a id="ADXDB4742"></a><a id="ADXDB4743"></a><a id="ADXDB4744"></a><a id="ADXDB4740"></a>
<div class="props_rev_3"><a id="GUID-3563099E-B1F3-4B70-8D2F-8FA001FF632B"></a>
<h3 id="ADXDB-GUID-3563099E-B1F3-4B70-8D2F-8FA001FF632B" class="sect3"><span class="enumeration_section">7.2.2</span> Validating XML Data Stored as XMLType: Examples</h3>
<div>
<p>Examples here illustrate how to use Oracle SQL function <code>XMLIsValid</code> and <code>XMLType</code> methods <code>isSchemaValid()</code> and <code>schemaValidate()</code> to validate XML data being stored as <code>XMLType</code> in Oracle XML&nbsp;DB.</p>
<div class="section">
<p><a href="xdb08tra.htm#GUID-3563099E-B1F3-4B70-8D2F-8FA001FF632B__CFHHFGAI">Example 7-9</a> and <a href="xdb08tra.htm#GUID-3563099E-B1F3-4B70-8D2F-8FA001FF632B__CFHCEHFA">Example 7-10</a> show how to validate an XML instance against an XML schema using PL/SQL method <code>isSchemaValid</code>().</p>
<p><code>XMLType</code> method <code>schemaValidate()</code> can be used within <code>INSERT</code> and <code>UPDATE</code> triggers to ensure that all instances stored in the table are validated against the XML schema. <a href="xdb08tra.htm#GUID-3563099E-B1F3-4B70-8D2F-8FA001FF632B__CFHJFAEG">Example 7-11</a> illustrates this.</p>
<p><a href="xdb08tra.htm#GUID-3563099E-B1F3-4B70-8D2F-8FA001FF632B__CFHEGCDB">Example 7-12</a> uses Oracle SQL function <code>XMLIsValid</code> to do the following:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Verify that the <code>XMLType</code> instance conforms to the specified XML schema</p>
</li>
<li>
<p>Ensure that the incoming XML documents are valid by using <code>CHECK</code> constraints</p>
</li>
</ul>
<div class="infobox-note" id="GUID-3563099E-B1F3-4B70-8D2F-8FA001FF632B__GUID-432B1B1F-C9D8-4FCA-BF9B-E888BBA6DA28">
<p class="notep1">Note:</p>
<p>The validation functions and procedures described in <span class="q">&#34;<a href="xdb08tra.htm#GUID-45DAA30E-3F14-4D70-8105-ED3855B92A50" title="Besides needing to know whether a particular XML document is well-formed, you often need to know whether it conforms to a given XML schema, that is, whether it is valid with respect to that XML schema.">Validation of XMLType Instances</a>&#34;</span> facilitate validation checking. Of these, <code>schemaValidate</code> is the only one that raises errors that indicate why validation has failed.</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-3563099E-B1F3-4B70-8D2F-8FA001FF632B__CFHHFGAI">
<p class="titleinexample">Example 7-9 Validating XML Using Method ISSCHEMAVALID() in SQL</p>
<pre dir="ltr">SELECT x.xmlcol.<span class="bold">isSchemaValid</span>(&#39;http://www.example.com/schemas/ipo.xsd&#39;,
                              &#39;purchaseOrder&#39;)
    FROM po_tab x;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3563099E-B1F3-4B70-8D2F-8FA001FF632B__CFHCEHFA">
<p class="titleinexample">Example 7-10 Validating XML Using Method ISSCHEMAVALID() in PL/SQL</p>
<pre dir="ltr">DECLARE
  xml_instance XMLType;
BEGIN
  SELECT x.xmlcol INTO xml_instance FROM po_tab x WHERE id = 1;
  IF xml_instance.<span class="bold">isSchemaValid</span>(&#39;http://www.example.com/schemas/ipo.xsd&#39;) = 0
    THEN raise_application_error(-20500, &#39;Invalid Instance&#39;);
    ELSE DBMS_OUTPUT.put_line(&#39;Instance is valid&#39;);
  END IF;
END;
/
Instance is valid
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3563099E-B1F3-4B70-8D2F-8FA001FF632B__CFHJFAEG">
<p class="titleinexample">Example 7-11 Validating XML Using Method SCHEMAVALIDATE() within Triggers</p>
<pre dir="ltr">DROP TABLE po_tab;
CREATE TABLE po_tab OF XMLType 
  XMLSCHEMA &#34;http://www.example.com/schemas/ipo.xsd&#34; ELEMENT &#34;purchaseOrder&#34;;

CREATE TRIGGER emp_trig BEFORE INSERT OR UPDATE ON po_tab FOR EACH ROW

DECLARE 
  newxml XMLType;
BEGIn
  newxml := :new.OBJECT_VALUE;
  XMLTYPE.<span class="bold">schemavalidate</span>(newxml);
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3563099E-B1F3-4B70-8D2F-8FA001FF632B__CFHEGCDB">
<p class="titleinexample">Example 7-12 Checking XML Validity Using XMLISVALID Within CHECK Constraints</p>
<pre dir="ltr">DROP TABLE po_tab;
CREATE TABLE po_tab OF XMLType 
   (<span class="bold">CHECK</span>(<span class="bold">XMLIsValid</span>(OBJECT_VALUE) = 1))
   XMLSCHEMA &#34;http://www.example.com/schemas/ipo.xsd&#34; ELEMENT &#34;purchaseOrder&#34;;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3410">
<tr>
<td class="cellalignment3417">
<table class="cellalignment3415">
<tr>
<td class="cellalignment3414"><a href="xdb_indexing.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3414"><a href="partpg4.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2016, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3419">
<table class="cellalignment3413">
<tr>
<td class="cellalignment3414"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3414"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3414"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3414"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3414"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3414"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>