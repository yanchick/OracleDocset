<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-104249"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Streams%20Tags"></a><title>Oracle Streams Tags</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1044"/>
<meta name="dcterms.created" content="2015-02-12T7:14:20Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Streams Replication Administrator&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53118-02"/>
<meta name="dcterms.isVersionOf" content="STREP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="conflict.htm" title="Previous" type="text/html"/>
<link rel="Next" href="hetero.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53118-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/28</span> <!-- End Header -->
<div id="STREP008" class="chapter"><a id="g1014437"></a> <a id="i1007387"></a>
<h1 class="chapter"><span class="secnum">10</span> Oracle Streams Tags</h1>
<p><a id="sthref433"></a><a id="sthref434"></a>This chapter explains the concepts related to Oracle Streams tags.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1007476">Introduction to Tags</a></p>
</li>
<li>
<p><a href="#i1007496">Tags and Rules Created by the DBMS_STREAMS_ADM Package</a></p>
</li>
<li>
<p><a href="#i1008389">Tags and Online Backup Statements</a></p>
</li>
<li>
<p><a href="#i1007598">Tags and an Apply Process</a></p>
</li>
<li>
<p><a href="#i1007693">Oracle Streams Tags in a Replication Environment</a></p>
</li>
<li>
<p><a href="#i1010806">Managing Oracle Streams Tags</a></p>
</li>
<li>
<p><a href="#i1015034">Monitoring Oracle Streams Tags</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1010806">&#34;Managing Oracle Streams Tags&#34;</a></div>
<a id="i1007476"></a>
<div id="STREP390" class="sect1">
<h2 class="sect1">Introduction to Tags<a id="sthref435"></a><a id="sthref436"></a><a id="sthref437"></a><a id="sthref438"></a><a id="sthref439"></a><a id="sthref440"></a></h2>
<p>Every redo entry in the redo log has a <span class="bold">tag</span> associated with it. The data type of the tag is <code dir="ltr">RAW</code>. By default, when a user or application generates redo entries, the value of the tag is <code dir="ltr">NULL</code> for each redo entry, and a <code dir="ltr">NULL</code> tag consumes no space. The size limit for a tag value is 2000 bytes.</p>
<p>You can configure how tag values are interpreted. For example, you can use a tag to determine whether an LCR contains a change that originated in the local database or at a different database, so that you can avoid change cycling (sending an LCR back to the database where it originated). Tags can be used for other LCR tracking purposes as well. You can also use tags to specify the set of destination databases for each LCR.</p>
<p>You can control the value of the tags generated in the redo log in the following ways:</p>
<ul>
<li>
<p>Use the <code dir="ltr">DBMS_STREAMS.SET_TAG</code> procedure to specify the value of the redo tags generated in the current session. When a database change is made in the session, the tag becomes part of the redo entry that records the change. Different sessions can have the same tag setting or different tag settings.</p>
</li>
<li>
<p>Use the <code dir="ltr">CREATE_APPLY</code> or <code dir="ltr">ALTER_APPLY</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package to control the value of the redo tags generated when an apply process runs. All sessions coordinated by the apply process coordinator use this tag setting. By default, redo entries generated by an apply process have a tag value that is the hexadecimal equivalent of <code dir="ltr">&#39;00&#39;</code> (double zero).</p>
</li>
</ul>
<p>Based on the rules in the rule sets for a capture process, the tag value in the redo entry for a change can determine whether the change is captured. Based on the rules in the rule sets for a synchronous capture, the session tag value for a change can determine whether the change is captured. The tags become part of the LCRs captured by a capture process or synchronous capture.</p>
<p>Similarly, once a tag is part of an LCR, the value of the tag can determine whether a propagation propagates the LCR and whether an apply process applies the LCR. The behavior of a custom rule-based transformation or apply handler can also depend on the value of the tag. In addition, you can set the tag value for an existing LCR using the <code dir="ltr">SET_TAG</code> member procedure for the LCR in a custom rule-based transformation or an apply handler that uses a PL/SQL procedure. You cannot set a tag value for an existing LCR in a statement DML handler or change handler.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS307" href="../ARPLS/t_lcr.htm#ARPLS307"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">SET_TAG</code> member procedure for LCRs</p>
</li>
<li>
<p><a class="olink STRMS006" href="../STRMS/strms_rules.htm#STRMS006"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about how rules are used in Oracle Streams</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1007496"></a>
<div id="STREP391" class="sect1">
<h2 class="sect1">Tags and Rules Created by the DBMS_STREAMS_ADM Package<a id="sthref441"></a><a id="sthref442"></a><a id="sthref443"></a></h2>
<p>When you use a procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package to create rules and set the <code dir="ltr">include_tagged_lcr</code> parameter to <code dir="ltr">FALSE</code>, each rule contains a condition that evaluates to <code dir="ltr">TRUE</code> only if the tag is <code dir="ltr">NULL</code>. In DML rules, the condition is the following:</p>
<pre dir="ltr">:dml.is_null_tag()=&#39;Y&#39;
</pre>
<p>In DDL rules, the condition is the following:</p>
<pre dir="ltr">:ddl.is_null_tag()=&#39;Y&#39;
</pre>
<p>Consider a positive rule set with a single rule and assume the rule contains such a condition. In this case, Oracle Streams capture processes, synchronous captures, propagations, and apply processes behave in the following way:</p>
<ul>
<li>
<p>A capture process captures a change only if the tag in the redo log entry for the change is <code dir="ltr">NULL</code> and the rest of the rule conditions evaluate to <code dir="ltr">TRUE</code> for the change.</p>
</li>
<li>
<p>A synchronous capture captures a change only if the tag for the session that makes the change is <code dir="ltr">NULL</code> and the rest of the rule conditions evaluate to <code dir="ltr">TRUE</code> for the change.</p>
</li>
<li>
<p>A propagation propagates an LCR only if the tag in the LCR is <code dir="ltr">NULL</code> and the rest of the rule conditions evaluate to <code dir="ltr">TRUE</code> for the LCR.</p>
</li>
<li>
<p>An apply process applies an LCR only if the tag in the LCR is <code dir="ltr">NULL</code> and the rest of the rule conditions evaluate to <code dir="ltr">TRUE</code> for the LCR.</p>
</li>
</ul>
<p>Alternatively, consider a negative rule set with a single rule and assume the rule contains such a condition. In this case, Oracle Streams capture processes, propagations, and apply processes behave in the following way:</p>
<ul>
<li>
<p>A capture process discards a change only if the tag in the redo log entry for the change is <code dir="ltr">NULL</code> and the rest of the rule conditions evaluate to <code dir="ltr">TRUE</code> for the change.</p>
</li>
<li>
<p>A propagation or apply process discards LCR only if the tag in the LCR is <code dir="ltr">NULL</code> and the rest of the rule conditions evaluate to <code dir="ltr">TRUE</code> for the LCR.</p>
</li>
</ul>
<p>In most cases, specify <code dir="ltr">TRUE</code> for the <code dir="ltr">include_tagged_lcr</code> parameter if rules are being added to a negative rule set so that changes are discarded regardless of their tag values.</p>
<p>The following procedures in the <code dir="ltr">DBMS_STREAMS_ADM</code> package create rules that contain one of these conditions by default:</p>
<ul>
<li>
<p><code dir="ltr">ADD_GLOBAL_PROPAGATION_RULES</code></p>
</li>
<li>
<p><code dir="ltr">ADD_GLOBAL_RULES</code></p>
</li>
<li>
<p><code dir="ltr">ADD_SCHEMA_PROPAGATION_RULES</code></p>
</li>
<li>
<p><code dir="ltr">ADD_SCHEMA_RULES</code></p>
</li>
<li>
<p><code dir="ltr">ADD_SUBSET_PROPAGATION_RULES</code></p>
</li>
<li>
<p><code dir="ltr">ADD_SUBSET_RULES</code></p>
</li>
<li>
<p><code dir="ltr">ADD_TABLE_PROPAGATION_RULES</code></p>
</li>
<li>
<p><code dir="ltr">ADD_TABLE_RULES</code></p>
</li>
</ul>
<p><a id="sthref444"></a>If you do not want the rules to contain such a condition, then set the <code dir="ltr">include_tagged_lcr</code> parameter to <code dir="ltr">TRUE</code> when you run these procedures. This setting results in no conditions relating to tags in the rules. Therefore, rule evaluation of the database change does not depend on the value of the tag.</p>
<p>For example, consider a table rule that evaluates to <code dir="ltr">TRUE</code> for all DML changes to the <code dir="ltr">hr.locations</code> table that originated at the <code dir="ltr">dbs1.example.com</code> source database.</p>
<p>Assume the <code dir="ltr">ADD_TABLE_RULES</code> procedure is run to generate this rule:</p>
<pre dir="ltr">BEGIN 
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name               =&gt;  &#39;hr.locations&#39;,
    streams_type             =&gt;  &#39;capture&#39;,
    streams_name             =&gt;  &#39;capture&#39;,
    queue_name               =&gt;  &#39;streams_queue&#39;,
    include_tagged_lcr       =&gt;  FALSE,  <span class="bold">-- Note parameter setting</span>
    source_database          =&gt;  &#39;dbs1.example.com&#39;,
    include_dml              =&gt;  TRUE,
    include_ddl              =&gt;  FALSE);
END;
/
</pre>
<p>Notice that the <code dir="ltr">include_tagged_lcr</code> parameter is set to <code dir="ltr">FALSE</code>, which is the default. The <code dir="ltr">ADD_TABLE_RULES</code> procedure generates a rule with a rule condition similar to the following:</p>
<pre dir="ltr">(((:dml.get_object_owner() = &#39;HR&#39; and :dml.get_object_name() = &#39;LOCATIONS&#39;)) 
and :dml.is_null_tag() = &#39;Y&#39; and :dml.get_source_database_name() = 
&#39;DBS1.EXAMPLE.COM&#39; )
</pre>
<p>If a capture process uses a positive rule set that contains this rule, then the rule evaluates to <code dir="ltr">FALSE</code> if the tag for a change in a redo entry is a non-<code dir="ltr">NULL</code> value, such as <code dir="ltr">&#39;0&#39;</code>&nbsp;or&nbsp;<code dir="ltr">&#39;1&#39;</code>. So, if a redo entry contains a row change to the <code dir="ltr">hr.locations</code> table, then the change is captured only if the tag for the redo entry is <code dir="ltr">NULL</code>.</p>
<p>However, suppose the <code dir="ltr">include_tagged_lcr</code> parameter is set to <code dir="ltr">TRUE</code> when <code dir="ltr">ADD_TABLE_RULES</code> is run:</p>
<pre dir="ltr">BEGIN 
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name               =&gt;  &#39;hr.locations&#39;,
    streams_type             =&gt;  &#39;capture&#39;,
    streams_name             =&gt;  &#39;capture&#39;,
    queue_name               =&gt;  &#39;streams_queue&#39;,
    include_tagged_lcr       =&gt;  TRUE,   <span class="bold">-- Note parameter setting</span>
    source_database          =&gt;  &#39;dbs1.example.com&#39;,
    include_dml              =&gt;  TRUE,
    include_ddl              =&gt;  FALSE);
END;
/
</pre>
<p>In this case, the <code dir="ltr">ADD_TABLE_RULES</code> procedure generates a rule with a rule condition similar to the following:</p>
<pre dir="ltr">(((:dml.get_object_owner() = &#39;HR&#39; and :dml.get_object_name() = &#39;LOCATIONS&#39;)) 
and :dml.get_source_database_name() = &#39;DBS1.EXAMPLE.COM&#39; )
</pre>
<p>Notice that there is no condition relating to the tag. If a capture process uses a positive rule set that contains this rule, then the rule evaluates to <code dir="ltr">TRUE</code> if the tag in a redo entry for a DML change to the <code dir="ltr">hr.locations</code> table is a non-<code dir="ltr">NULL</code> value, such as <code dir="ltr">&#39;0&#39;</code>&nbsp;or&nbsp;<code dir="ltr">&#39;1&#39;</code>. The rule also evaluates to <code dir="ltr">TRUE</code> if the tag is <code dir="ltr">NULL</code>. So, if a redo entry contains a DML change to the <code dir="ltr">hr.locations</code> table, then the change is captured regardless of the value for the tag.</p>
<p>To modify the <code dir="ltr">is_null_tag</code> condition in an existing system-created rule, use an appropriate procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package to create a rule that is the same as the rule you want to modify, except for the <code dir="ltr">is_null_tag</code> condition. Next, use the <code dir="ltr">REMOVE_RULE</code> procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package to remove the old rule from the appropriate rule set. In addition, you can use the <code dir="ltr">and_condition</code> parameter for the procedures that create rules in the <code dir="ltr">DBMS_STREAMS_ADM</code> package to add conditions relating to tags to system-created rules.</p>
<p>If you created a rule with the <code dir="ltr">DBMS_RULE_ADM</code> package, then you can add, remove, or modify the <code dir="ltr">is_null_tag</code> condition in the rule by using the <code dir="ltr">ALTER_RULE</code> procedure in this package.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STRMS006" href="../STRMS/strms_rules.htm#STRMS006"><span class="italic">Oracle Streams Concepts and Administration</span></a> for examples of rules generated by the procedures in the <code dir="ltr">DBMS_STREAMS_ADM</code> package</p>
</li>
<li>
<p><a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <a class="olink ARPLS305" href="../ARPLS/d_streams_adm.htm#ARPLS305"><code dir="ltr">DBMS_STREAMS_ADM</code></a> package and the <a class="olink ARPLS328" href="../ARPLS/d_rule_a.htm#ARPLS328"><code dir="ltr">DBMS_RULE_ADM.ALTER_RULE</code></a> procedure</p>
</li>
<li>
<p><a href="#i1010893">&#34;Setting the Tag Values Generated by an Apply Process&#34;</a> for more information about the <code dir="ltr">SET_TAG</code> procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1008389"></a>
<div id="STREP392" class="sect1">
<h2 class="sect1">Tags and Online Backup Statements<a id="sthref445"></a><a id="sthref446"></a></h2>
<p>If you are using global rules to capture and apply DDL changes for an entire database, then online backup statements will be captured, propagated, and applied by default. Typically, database administrators do not want to replicate online backup statements. Instead, they only want them to run at the database where they are executed originally. An online backup statement uses the <code dir="ltr">BEGIN</code> <code dir="ltr">BACKUP</code> and <code dir="ltr">END</code> <code dir="ltr">BACKUP</code> clauses in an <code dir="ltr">ALTER</code> <code dir="ltr">TABLESPACE</code> or <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> statement.</p>
<p>To avoid replicating online backup statements, you can use one of the following strategies:</p>
<ul>
<li>
<p>Include one or more calls to the <code dir="ltr">DBMS_STREAMS.SET_TAG</code> procedure in your online backup procedures, and set the session tag to a value that will cause the online backup statements to be ignored by a capture process.</p>
</li>
<li>
<p>Use a DDL handler for an apply process to avoid applying the online backup statements.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use Recovery Manager (RMAN) to perform an online backup, then the online backup statements are not used, and there is no need to set Oracle Streams tags for backups.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink BRADV016" href="../BRADV/osbackup.htm#BRADV016"><span class="italic">Oracle Database Backup and Recovery User&#39;s Guide</span></a> for information about making backups</div>
</div>
<!-- class="sect1" -->
<a id="i1007598"></a>
<div id="STREP393" class="sect1">
<h2 class="sect1">Tags and an Apply Process<a id="sthref447"></a><a id="sthref448"></a><a id="sthref449"></a><a id="sthref450"></a><a id="sthref451"></a><a id="sthref452"></a></h2>
<p>An apply process generates entries in the redo log of a destination database when it applies DML or DDL changes. For example, if the apply process applies a change that updates a row in a table, then that change is recorded in the redo log at the destination database. You can control the tags in these redo entries by setting the <code dir="ltr">apply_tag</code> parameter in the <code dir="ltr">CREATE_APPLY</code> or <code dir="ltr">ALTER_APPLY</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package. For example, an apply process can generate redo tags that are equivalent to the hexadecimal value of <code dir="ltr">&#39;0&#39;</code> (zero) or <code dir="ltr">&#39;1&#39;</code>.</p>
<p>The default tag value generated in the redo log by an apply process is <code dir="ltr">&#39;00&#39;</code> (double zero). This value is the default tag value for an apply process if you use a procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package or the <code dir="ltr">CREATE_APPLY</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package to create the apply process. There is nothing special about this value beyond the fact that it is a non-<code dir="ltr">NULL</code> value. The fact that it is a non-<code dir="ltr">NULL</code> value is important because rules created by the <code dir="ltr">DBMS_STREAMS_ADM</code> package by default contain a condition that evaluates to <code dir="ltr">TRUE</code> only if the tag is <code dir="ltr">NULL</code> in a redo entry or an LCR. You can alter the tag value for an existing apply process using the <code dir="ltr">ALTER_APPLY</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package.</p>
<p>Redo entries generated by an apply handler for an apply process have the tag value of the apply process, unless the handler sets the tag to a different value using the <code dir="ltr">SET_TAG</code> procedure. If a procedure DML handler, DDL handler, or message handler calls the <code dir="ltr">SET_TAG</code> procedure in the <code dir="ltr">DBMS_STREAMS</code> package, then any subsequent redo entries generated by the handler will include the tag specified in the <code dir="ltr">SET_TAG</code> call, even if the tag for the apply process is different. When the handler exits, any subsequent redo entries generated by the apply process have the tag specified for the apply process.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STRMS004" href="../STRMS/strms_apply.htm#STRMS004"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about the apply process</p>
</li>
<li>
<p><a href="#i1007496">&#34;Tags and Rules Created by the DBMS_STREAMS_ADM Package&#34;</a> for more information about the default tag condition in Oracle Streams rules</p>
</li>
<li>
<p><a href="#i1010806">&#34;Managing Oracle Streams Tags&#34;</a></p>
</li>
<li>
<p><a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <a class="olink ARPLS305" href="../ARPLS/d_streams_adm.htm#ARPLS305"><code dir="ltr">DBMS_STREAMS_ADM</code></a> package and the <a class="olink ARPLS300" href="../ARPLS/d_apply.htm#ARPLS300"><code dir="ltr">DBMS_APPLY_ADM</code></a> package</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1007693"></a>
<div id="STREP394" class="sect1">
<h2 class="sect1">Oracle Streams Tags in a Replication Environment<a id="sthref453"></a><a id="sthref454"></a><a id="sthref455"></a><a id="sthref456"></a><a id="sthref457"></a></h2>
<p>In an Oracle Streams environment that includes multiple databases sharing data bidirectionally, you can use tags to avoid <span class="bold">change cycling</span>. Change cycling means sending a change back to the database where it originated. Typically, change cycling should be avoided because it can result in each change going through endless loops back to the database where it originated. Such loops can result in unintended data in the database and tax the networking and computer resources of an environment. By default, Oracle Streams is designed to avoid change cycling.</p>
<p>Using tags and appropriate rules for Oracle Streams capture processes, synchronous captures, propagations, and apply processes, you can avoid such change cycles. This section describes common Oracle Streams environments and how you can use tags and rules to avoid change cycling in these environments.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1007084">N-Way Replication Environments</a></p>
</li>
<li>
<p><a href="#i1007130">Hub-and-Spoke Replication Environments</a></p>
</li>
<li>
<p><a href="#i1007245">Hub-and-Spoke Replication Environment with Several Extended Secondary Databases</a></p>
</li>
</ul>
<a id="i1007084"></a>
<div id="STREP131" class="sect2">
<h3 class="sect2">N-Way Replication Environments<a id="sthref458"></a><a id="sthref459"></a></h3>
<p>An <span class="bold">n-way replication</span> environment is one in which each database is a source database for every other database, and each database is a destination database of every other database. Each database communicates directly with every other database.</p>
<p>For example, consider an environment that replicates the database objects and data in the <code dir="ltr">hrmult</code> schema between three Oracle databases: <code dir="ltr">mult1.example.com</code>, <code dir="ltr">mult2.example.com</code>, and <code dir="ltr">mult3.example.com</code>. DML and DDL changes made to tables in the <code dir="ltr">hrmult</code> schema are captured at all three databases in the environment and propagated to each of the other databases in the environment, where changes are applied. <a href="#i1007094">Figure 10-1</a> illustrates a sample n-way replication environment.</p>
<div id="STREP395" class="figure">
<p class="titleinfigure"><a id="i1007094"></a>Figure 10-1 Each Database Is a Source and Destination Database</p>
<img width="668" height="746" src="img/strep066.gif" alt="Description of Figure 10-1 follows"/><br/>
<a id="sthref460" href="img_text/strep066.htm">Description of &#34;Figure 10-1 Each Database Is a Source and Destination Database&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>You can avoid change cycles by configuring such an environment in the following way:</p>
<ul>
<li>
<p>Configure one apply process at each database to generate non-<code dir="ltr">NULL</code> redo tags for changes from each source database. If you use a procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package to create an apply process, then the apply process generates non-<code dir="ltr">NULL</code> tags with a value of <code dir="ltr">&#39;00&#39;</code> in the redo log by default. In this case, no further action is required for the apply process to generate non-<code dir="ltr">NULL</code> tags.</p>
<p>If you use the <code dir="ltr">CREATE_APPLY</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package to create an apply process, then do not set the <code dir="ltr">apply_tag</code> parameter. Again, the apply process generates non-<code dir="ltr">NULL</code> tags with a value of <code dir="ltr">&#39;00&#39;</code> in the redo log by default, and no further action is required.</p>
</li>
<li>
<p>Configure the capture process at each database to capture changes only if the tag in the redo entry for the change is <code dir="ltr">NULL</code>. You do this by ensuring that each DML rule in the positive rule set used by the capture process has the following condition:</p>
<pre dir="ltr">:dml.is_null_tag()=&#39;Y&#39;
</pre>
<p>Each DDL rule should have the following condition:</p>
<pre dir="ltr">:ddl.is_null_tag()=&#39;Y&#39;
</pre>
<p>These rule conditions indicate that the capture process captures a change only if the tag for the change is <code dir="ltr">NULL</code>. If you use the <code dir="ltr">DBMS_STREAMS_ADM</code> package to generate rules, then each rule has such a condition by default.</p>
</li>
</ul>
<p>This configuration prevents change cycling because all of the changes applied by the apply processes are never recaptured (they were captured originally at the source databases). Each database sends all of its changes to the <code dir="ltr">hrmult</code> schema to every other database. So, in this environment, no changes are lost, and all databases are synchronized. <a href="#i1007114">Figure 10-2</a> illustrates how tags can be used in a database in an n-way replication environment.</p>
<div id="STREP396" class="figure">
<p class="titleinfigure"><a id="i1007114"></a>Figure 10-2 Tag Use When Each Database Is a Source and Destination Database</p>
<img width="665" height="516" src="img/strep067.gif" alt="Description of Figure 10-2 follows"/><br/>
<a id="sthref461" href="img_text/strep067.htm">Description of &#34;Figure 10-2 Tag Use When Each Database Is a Source and Destination Database&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink STREX004" href="../STREX/repmultdemo.htm#STREX004"><span class="italic">Oracle Streams Extended Examples</span></a> for a detailed illustration of this example</div>
</div>
<!-- class="sect2" -->
<a id="i1007130"></a>
<div id="STREP111" class="sect2">
<h3 class="sect2">Hub-and-Spoke Replication Environments<a id="sthref462"></a><a id="sthref463"></a></h3>
<p>A <span class="bold">hub-and-spoke replication</span> environment is one in which a primary database, or hub, communicates with secondary databases, or spokes. The spokes do not communicate directly with each other. In a hub-and-spoke replication environment, the spokes might or might not allow changes to the replicated database objects.</p>
<p>If the spokes do not allow changes to the replicated database objects, then the primary database captures local changes to the shared data and propagates these changes to all secondary databases, where these changes are applied at each secondary database locally. Change cycling is not possible when none of the secondary databases allow changes to the replicated database objects because changes to the replicated database objects are captured in only one location.</p>
<p>If the spokes allow changes to the replicated database objects, then changes are captured, propagated, and applied in the following way:</p>
<ul>
<li>
<p>The primary database captures local changes to the shared data and propagates these changes to all secondary databases, where these changes are applied at each secondary database locally.</p>
</li>
<li>
<p>Each secondary database captures local changes to the shared data and propagates these changes to the primary database only, where these changes are applied at the primary database locally.</p>
</li>
<li>
<p>The primary database applies changes from each secondary database locally. Next, these changes are captured at the primary database and propagated to all secondary databases, except for the one at which the change originated. Each secondary database applies the changes from the other secondary databases locally, after they have gone through the primary database. This configuration is an example of apply forwarding.</p>
<p>An alternate scenario might use queue forwarding. If this environment used queue forwarding, then changes from secondary databases that are applied at the primary database are not captured at the primary database. Instead, these changes are forwarded from the queue at the primary database to all secondary databases, except for the one at which the change originated.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS105" href="../STRMS/strms_prop.htm#STRMS105"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about apply forwarding and queue forwarding</div>
<p>For example, consider an environment that replicates the database objects and data in the <code dir="ltr">hr</code> schema between one primary database named <code dir="ltr">ps1.example.com</code> and three secondary databases named <code dir="ltr">ps2.example.com</code>, <code dir="ltr">ps3.example.com</code>, and <code dir="ltr">ps4.example.com</code>. DML and DDL changes made to tables in the <code dir="ltr">hr</code> schema are captured at the primary database and at the three secondary databases in the environment. Next, these changes are propagated and applied as described previously. The environment uses apply forwarding, not queue forwarding, to share data between the secondary databases through the primary database. <a href="#i1007156">Figure 10-3</a> illustrates a sample environment which has one primary database and multiple secondary databases.</p>
<div id="STREP397" class="figure">
<p class="titleinfigure"><a id="i1007156"></a>Figure 10-3 Primary Database Sharing Data with Several Secondary Databases</p>
<img width="600" height="336" src="img/strep030.gif" alt="Description of Figure 10-3 follows"/><br/>
<a id="sthref464" href="img_text/strep030.htm">Description of &#34;Figure 10-3 Primary Database Sharing Data with Several Secondary Databases&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>You can avoid change cycles by configuring the environment in the following way:</p>
<ul>
<li>
<p>Configure each apply process at the primary database <code dir="ltr">ps1.example.com</code> to generate non-<code dir="ltr">NULL</code> redo tags that indicate the site from which it is receiving changes. In this environment, the primary database has at least one apply process for each secondary database from which it receives changes. For example, if an apply process at the primary database receives changes from the <code dir="ltr">ps2.example.com</code> secondary database, then this apply process can generate a raw value that is equivalent to the hexadecimal value <code dir="ltr">&#39;2&#39;</code> for all changes it applies. You do this by setting the <code dir="ltr">apply_tag</code> parameter in the <code dir="ltr">CREATE_APPLY</code> or <code dir="ltr">ALTER_APPLY</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package to the non-<code dir="ltr">NULL</code> value.</p>
<p>For example, run the following procedure to create an apply process that generates redo entries with tags that are equivalent to the hexadecimal value&nbsp;<code dir="ltr">&#39;2&#39;</code>:</p>
<pre dir="ltr">BEGIN
  DBMS_APPLY_ADM.CREATE_APPLY(
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    apply_name      =&gt; &#39;apply_ps2&#39;,
    rule_set_name   =&gt; &#39;strmadmin.apply_rules_ps2&#39;,
    apply_tag       =&gt; HEXTORAW(&#39;2&#39;),
    apply_captured  =&gt; TRUE);
END;
/
</pre></li>
<li>
<p>Configure the apply process at each secondary database to generate non-<code dir="ltr">NULL</code> redo tags. The exact value of the tags is irrelevant if it is non-<code dir="ltr">NULL</code>. In this environment, each secondary database has one apply process that applies changes from the primary database.</p>
<p>If you use a procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package to create an apply process, then the apply process generates non-<code dir="ltr">NULL</code> tags with a value of <code dir="ltr">&#39;00&#39;</code> in the redo log by default. In this case, no further action is required for the apply process to generate non-<code dir="ltr">NULL</code> tags.</p>
<p>For example, assuming no apply processes exist at the secondary databases, run the <code dir="ltr">ADD_SCHEMA_RULES</code> procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package at each secondary database to create an apply process that generates non-<code dir="ltr">NULL</code> redo entries with tags that are equivalent to the hexadecimal value <code dir="ltr">&#39;00&#39;</code>:</p>
<pre dir="ltr">BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name     =&gt; &#39;hr&#39;,   
    streams_type    =&gt; &#39;apply&#39;,
    streams_name    =&gt; &#39;apply&#39;,
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;ps1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/
</pre></li>
<li>
<p>Configure the capture process at the primary database to capture changes to the shared data regardless of the tags. You do this by setting the <code dir="ltr">include_tagged_lcr</code> parameter to <code dir="ltr">TRUE</code> when you run one of the procedures that generate capture process rules in the <code dir="ltr">DBMS_STREAMS_ADM</code> package. If you use the <code dir="ltr">DBMS_RULE_ADM</code> package to create rules for the capture process at the primary database, then ensure that the rules do not contain <code dir="ltr">is_null_tag</code> conditions, because these conditions involve tags in the redo&nbsp;log.</p>
<p>For example, run the following procedure at the primary database to produce one DML capture process rule and one DDL capture process rule that each have a condition that evaluates to <code dir="ltr">TRUE</code> for changes in the <code dir="ltr">hr</code> schema, regardless of the tag for the change:</p>
<pre dir="ltr">BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name         =&gt; &#39;hr&#39;,   
    streams_type        =&gt; &#39;capture&#39;,
    streams_name        =&gt; &#39;capture&#39;,
    queue_name          =&gt; &#39;strmadmin.streams_queue&#39;,
    include_tagged_lcr  =&gt; TRUE, <span class="bold">-- Note parameter setting</span>
    include_dml         =&gt; TRUE,
    include_ddl         =&gt; TRUE,
    inclusion_rule      =&gt; TRUE);
END;
/
</pre></li>
<li>
<p>Configure the capture process at each secondary database to capture changes only if the tag in the redo entry for the change is <code dir="ltr">NULL</code>. You do this by ensuring that each DML rule in the positive rule set used by the capture process at the secondary database has the following condition:</p>
<pre dir="ltr">:dml.is_null_tag()=&#39;Y&#39;
</pre>
<p>DDL rules should have the following condition:</p>
<pre dir="ltr">:ddl.is_null_tag()=&#39;Y&#39;
</pre>
<p>These rules indicate that the capture process captures a change only if the tag for the change is <code dir="ltr">NULL</code>. If you use the <code dir="ltr">DBMS_STREAMS_ADM</code> package to generate rules, then each rule has one of these conditions by default. If you use the <code dir="ltr">DBMS_RULE_ADM</code> package to create rules for the capture process at a secondary database, then ensure that each rule contains one of these conditions.</p>
</li>
<li>
<p>Configure one propagation from the queue at the primary database to the queue at each secondary database. Each propagation should use a positive rule set with rules that instruct the propagation to propagate all LCRs in the queue at the primary database to the queue at the secondary database, except for changes that originated at the secondary database.</p>
<p>For example, if a propagation propagates changes to the secondary database <code dir="ltr">ps2.example.com</code>, whose tags are equivalent to the hexadecimal value&nbsp;<code dir="ltr">&#39;2&#39;</code>, then the rules for the propagation should propagate all LCRs relating to the <code dir="ltr">hr</code> schema to the secondary database, except for LCRs with a tag of <code dir="ltr">&#39;2&#39;</code>. For row LCRs, such rules should include the following condition:</p>
<pre dir="ltr">:dml.get_tag() IS NULL OR :dml.get_tag()!=HEXTORAW(&#39;2&#39;)
</pre>
<p>For DDL LCRs, such rules should include the following condition:</p>
<pre dir="ltr">:ddl.get_tag() IS NULL OR :ddl.get_tag()!=HEXTORAW(&#39;2&#39;)
</pre>
<p>Alternatively, you can add rules to the negative rule set for the propagation so that the propagation discards LCRs with the tag value. For row LCRs, such rules should include the following condition:</p>
<pre dir="ltr">:dml.get_tag()=HEXTORAW(&#39;2&#39;)
</pre>
<p>For DDL LCRs, such rules should include the following condition:</p>
<pre dir="ltr">:ddl.get_tag()=HEXTORAW(&#39;2&#39;)
</pre>
<p>You can use the <code dir="ltr">and_condition</code> parameter in a procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package to add these conditions to system-created rules, or you can use the <code dir="ltr">CREATE_RULE</code> procedure in the <code dir="ltr">DBMS_RULE_ADM</code> package to create rules with these conditions. When you specify the condition in the <code dir="ltr">and_condition</code> parameter, specify <code dir="ltr">:lcr</code> instead of <code dir="ltr">:dml</code> or <code dir="ltr">:ddl</code>. See <a class="olink STRMS139" href="../STRMS/strms_rules.htm#STRMS139"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about the <code dir="ltr">and_condition</code> parameter.</p>
</li>
<li>
<p>Configure one propagation from the queue at each secondary database to the queue at the primary database. A queue at one of the secondary databases contains only local changes made by user sessions and applications at the secondary database, not changes made by an apply process. Therefore, no further configuration is necessary for these propagations.</p>
</li>
</ul>
<p>This configuration prevents change cycling in the following way:</p>
<ul>
<li>
<p>Changes that originated at a secondary database are never propagated back to that secondary database.</p>
</li>
<li>
<p>Changes that originated at the primary database are never propagated back to the primary database.</p>
</li>
<li>
<p>All changes made to the shared data at any database in the environment are propagated to every other database in the environment.</p>
</li>
</ul>
<p>So, in this environment, no changes are lost, and all databases are synchronized.</p>
<p><a href="#i1007229">Figure 10-4</a> illustrates how tags are used at the primary database <code dir="ltr">ps1.example.com</code>.</p>
<div id="STREP398" class="figure">
<p class="titleinfigure"><a id="i1007229"></a>Figure 10-4 Tags Used at the Primary Database</p>
<img width="620" height="783" src="img/strep065.gif" alt="Description of Figure 10-4 follows"/><br/>
<a id="sthref465" href="img_text/strep065.htm">Description of &#34;Figure 10-4 Tags Used at the Primary Database&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a href="#i1007239">Figure 10-5</a> illustrates how tags are used at one of the secondary databases (<code dir="ltr">ps2.example.com</code>).</p>
<div id="STREP399" class="figure">
<p class="titleinfigure"><a id="i1007239"></a>Figure 10-5 Tags Used at a Secondary Database</p>
<img width="594" height="581" src="img/strep028.gif" alt="Description of Figure 10-5 follows"/><br/>
<a id="sthref466" href="img_text/strep028.htm">Description of &#34;Figure 10-5 Tags Used at a Secondary Database&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="prep_rep.htm#CEGDHBAH">&#34;About Hub-And-Spoke Replication Environments&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1007245"></a>
<div id="STREP400" class="sect2">
<h3 class="sect2">Hub-and-Spoke Replication Environment with Several Extended Secondary Databases</h3>
<p>In this environment, one primary database shares data with several secondary databases, but the secondary databases have other secondary databases connected to them, which will be called <span class="italic">remote secondary</span> databases. This environment is an extension of the environment described in <a href="#i1007130">&#34;Hub-and-Spoke Replication Environments&#34;</a>.</p>
<p>If a remote secondary database allows changes to the replicated database objects, then the remote secondary database does not share data directly with the primary database. Instead, it shares data indirectly with the primary database through a secondary database. So, the shared data exists at the primary database, at each secondary database, and at each remote secondary database. Changes made at any of these databases can be captured and propagated to all of the other databases. <a href="#i1007258">Figure 10-6</a> illustrates an environment with one primary database and multiple extended secondary databases.</p>
<div id="STREP401" class="figure">
<p class="titleinfigure"><a id="i1007258"></a>Figure 10-6 Primary Database and Several Extended Secondary Databases</p>
<img width="600" height="576" src="img/strep024.gif" alt="Description of Figure 10-6 follows"/><br/>
<a id="sthref467" href="img_text/strep024.htm">Description of &#34;Figure 10-6 Primary Database and Several Extended Secondary Databases&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>In such an environment, you can avoid change cycling in the following way:</p>
<ul>
<li>
<p>Configure the primary database in the same way that it is configured in the example described in <a href="#i1007130">&#34;Hub-and-Spoke Replication Environments&#34;</a>.</p>
</li>
<li>
<p>Configure each remote secondary database similar to the way that each secondary database is configured in the example described in <a href="#i1007130">&#34;Hub-and-Spoke Replication Environments&#34;</a>. The only difference is that the remote secondary databases share data directly with secondary databases, not the primary database.</p>
</li>
<li>
<p>At each secondary database, configure one apply process to apply changes from the primary database with a redo tag value that is equivalent to the hexadecimal value <code dir="ltr">&#39;00&#39;</code>. This value is the default tag value for an apply process.</p>
</li>
<li>
<p>At each secondary database, configure one apply process to apply changes from each of its remote secondary databases with a redo tag value that is unique for the remote secondary database.</p>
</li>
<li>
<p>Configure the capture process at each secondary database to capture all changes to the shared data in the redo log, regardless of the tag value for the changes.</p>
</li>
<li>
<p>Configure one propagation from the queue at each secondary database to the queue at the primary database. The propagation should use a positive rule set with rules that instruct the propagation to propagate all LCRs in the queue at the secondary database to the queue at the primary database, except for changes that originated at the primary database. You do this by adding a condition to the rules that evaluates to <code dir="ltr">TRUE</code> only if the tag in the LCR does not equal <code dir="ltr">&#39;00&#39;</code>. For example, enter a condition similar to the following for row&nbsp;LCRs:</p>
<pre dir="ltr">:dml.get_tag() IS NULL OR :dml.get_tag()!=HEXTORAW(&#39;00&#39;)
</pre>
<p>You can use the <code dir="ltr">and_condition</code> parameter in a procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package to add this condition to system-created rules, or you can use the <code dir="ltr">CREATE_RULE</code> procedure in the <code dir="ltr">DBMS_RULE_ADM</code> package to create rules with this condition. When you specify the condition in the <code dir="ltr">and_condition</code> parameter, specify <code dir="ltr">:lcr</code> instead of <code dir="ltr">:dml</code> or <code dir="ltr">:ddl</code>. See <a class="olink STRMS139" href="../STRMS/strms_rules.htm#STRMS139"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about the <code dir="ltr">and_condition</code> parameter.</p>
</li>
<li>
<p>Configure one propagation from the queue at each secondary database to the queue at each remote secondary database. Each propagation should use a positive rule set with rules that instruct the propagation to propagate all LCRs in the queue at the secondary database to the queue at the remote secondary database, except for changes that originated at the remote secondary database. You do this by adding a condition to the rules that evaluates to <code dir="ltr">TRUE</code> only if the tag in the LCR does not equal the tag value for the remote secondary database.</p>
<p>For example, if the tag value of a remote secondary database is equivalent to the hexadecimal value <code dir="ltr">&#39;19&#39;</code>, then enter a condition similar to the following for row LCRs:</p>
<pre dir="ltr">:dml.get_tag() IS NULL OR :dml.get_tag()!=HEXTORAW(&#39;19&#39;)
</pre>
<p>You can use the <code dir="ltr">and_condition</code> parameter in a procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package to add this condition to system-created rules, or you can use the <code dir="ltr">CREATE_RULE</code> procedure in the <code dir="ltr">DBMS_RULE_ADM</code> package to create rules with this condition. When you specify the condition in the <code dir="ltr">and_condition</code> parameter, specify <code dir="ltr">:lcr</code> instead of <code dir="ltr">:dml</code> or <code dir="ltr">:ddl</code>. See <a class="olink STRMS139" href="../STRMS/strms_rules.htm#STRMS139"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about the <code dir="ltr">and_condition</code> parameter.</p>
</li>
</ul>
<p>By configuring the environment in this way, you prevent change cycling, and no changes originating at any database are lost.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="prep_rep.htm#CEGDHBAH">&#34;About Hub-And-Spoke Replication Environments&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010806"></a>
<div id="STREP127" class="sect1">
<h2 class="sect1">Managing Oracle Streams Tags<a id="sthref468"></a><a id="sthref469"></a></h2>
<p>You can set or get the value of the tags generated by the current session or by an apply process. The following sections describe how to set and get tag values.</p>
<ul>
<li>
<p><a href="#i1010837">Managing Oracle Streams Tags for the Current Session</a></p>
</li>
<li>
<p><a href="#i1010867">Managing Oracle Streams Tags for an Apply Process</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015034">&#34;Monitoring Oracle Streams Tags&#34;</a></div>
<a id="i1010837"></a>
<div id="STREP402" class="sect2">
<h3 class="sect2">Managing Oracle Streams Tags for the Current Session</h3>
<p>This section contains instructions for setting and getting the tag for the current session.</p>
<a id="i1010843"></a>
<div id="STREP120" class="sect3">
<h4 class="sect3">Setting the Tag Values Generated by the Current Session<a id="sthref470"></a><a id="sthref471"></a></h4>
<p>You can set the tag for all redo entries generated by the current session using the <code dir="ltr">SET_TAG</code> procedure in the <code dir="ltr">DBMS_STREAMS</code> package. For example, to set the tag to the hexadecimal value of <code dir="ltr">&#39;1D&#39;</code> in the current session, run the following procedure:</p>
<pre dir="ltr">BEGIN
   DBMS_STREAMS.SET_TAG(
      tag  =&gt;  HEXTORAW(&#39;1D&#39;));
END;
/
</pre>
<p>After running this procedure, each redo entry generated by DML or DDL statements in the current session will have a tag value of <code dir="ltr">1D</code>. Running this procedure affects only the current session.</p>
<p>The following are considerations for the <code dir="ltr">SET_TAG</code> procedure:</p>
<ul>
<li>
<p>This procedure is not transactional. That is, the effects of <code dir="ltr">SET_TAG</code> cannot be rolled back.</p>
</li>
<li>
<p>If the <code dir="ltr">SET_TAG</code> procedure is run to set a non-<code dir="ltr">NULL</code> session tag before a data dictionary build has been performed on the database, then the redo entries for a transaction that started before the dictionary build might not include the specified tag value for the session. Therefore, perform a data dictionary build before using the <code dir="ltr">SET_TAG</code> procedure in a session. A data dictionary build happens when the <code dir="ltr">DBMS_CAPTURE_ADM.BUILD</code> procedure is run. The <code dir="ltr">BUILD</code> procedure can be run automatically when a capture process is created.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1011161"></a>
<div id="STREP403" class="sect3">
<h4 class="sect3">Getting the Tag Value for the Current Session<a id="sthref472"></a><a id="sthref473"></a></h4>
<p>You can get the tag for all redo entries generated by the current session using the <code dir="ltr">GET_TAG</code> procedure in the <code dir="ltr">DBMS_STREAMS</code> package. For example, to get the hexadecimal value of the tags generated in the redo entries for the current session, run the following procedure:</p>
<pre dir="ltr">SET SERVEROUTPUT ON
DECLARE
   raw_tag RAW(2048);
BEGIN
   raw_tag := DBMS_STREAMS.GET_TAG();
   DBMS_OUTPUT.PUT_LINE(&#39;Tag Value = &#39; || RAWTOHEX(raw_tag));
END;
/
</pre>
<p>You can also display the tag value for the current session by querying the <code dir="ltr">DUAL</code> view:</p>
<pre dir="ltr">SELECT DBMS_STREAMS.GET_TAG FROM DUAL;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1010867"></a>
<div id="STREP119" class="sect2">
<h3 class="sect2">Managing Oracle Streams Tags for an Apply Process</h3>
<p>This section contains instructions for setting and removing the tag for an apply process.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1007598">&#34;Tags and an Apply Process&#34;</a> for conceptual information about how tags are used by an apply process and apply handlers</p>
</li>
<li>
<p><a class="olink STRMS004" href="../STRMS/strms_apply.htm#STRMS004"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
</ul>
</div>
<a id="i1010893"></a>
<div id="STREP404" class="sect3">
<h4 class="sect3">Setting the Tag Values Generated by an Apply Process<a id="sthref474"></a><a id="sthref475"></a><a id="sthref476"></a></h4>
<p>An apply process generates redo entries when it applies changes to a database or invokes handlers. You can set the default tag for all redo entries generated by an apply process when you create the apply process using the <code dir="ltr">CREATE_APPLY</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package, or when you alter an existing apply process using the <code dir="ltr">ALTER_APPLY</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package. In both of these procedures, set the <code dir="ltr">apply_tag</code> parameter to the value you want to specify for the tags generated by the apply process.</p>
<p>For example, to set the value of the tags generated in the redo log by an existing apply process named <code dir="ltr">strep01_apply</code> to the hexadecimal value of <code dir="ltr">&#39;7&#39;</code>, run the following procedure:</p>
<pre dir="ltr">BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
     apply_name  =&gt;  &#39;strep01_apply&#39;,
     apply_tag   =&gt;  HEXTORAW(&#39;7&#39;));
END;
/
</pre>
<p>After running this procedure, each redo entry generated by the apply process will have a tag value of <code dir="ltr">7</code>.</p>
</div>
<!-- class="sect3" -->
<a id="i1010905"></a>
<div id="STREP405" class="sect3">
<h4 class="sect3">Removing the Apply Tag for an Apply Process<a id="sthref477"></a><a id="sthref478"></a><a id="sthref479"></a></h4>
<p>You remove the apply tag for an apply process by setting the <code dir="ltr">remove_apply_tag</code> parameter to <code dir="ltr">TRUE</code> in the <code dir="ltr">ALTER_APPLY</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package. Removing the apply tag means that each redo entry generated by the apply process has a <code dir="ltr">NULL</code> tag. For example, the following procedure removes the apply tag from an apply process named <code dir="ltr">strep01_apply</code>.</p>
<pre dir="ltr">BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name       =&gt; &#39;strep01_apply&#39;,
    remove_apply_tag =&gt; TRUE);
END;
/
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1015034"></a>
<div id="STREP159" class="sect1">
<h2 class="sect1">Monitoring Oracle Streams Tags<a id="sthref480"></a><a id="sthref481"></a></h2>
<p>The following sections contain queries that you can run to display the Oracle Streams tag for the current session and the default tag for each apply process:</p>
<ul>
<li>
<p><a href="#i1012008">Displaying the Tag Value for the Current Session</a></p>
</li>
<li>
<p><a href="#i1012009">Displaying the Default Tag Value for Each Apply Process</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1010806">&#34;Managing Oracle Streams Tags&#34;</a></p>
</li>
<li>
<p><a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <a class="olink ARPLS332" href="../ARPLS/d_streams.htm#ARPLS332"><code dir="ltr">DBMS_STREAMS</code></a> package</p>
</li>
</ul>
</div>
<a id="i1012008"></a>
<div id="STREP406" class="sect2">
<h3 class="sect2">Displaying the Tag Value for the Current Session<a id="sthref482"></a><a id="sthref483"></a><a id="sthref484"></a></h3>
<p>You can display the tag value generated in all redo entries for the current session by querying the <code dir="ltr">DUAL</code> view:</p>
<pre dir="ltr">SELECT DBMS_STREAMS.GET_TAG FROM DUAL;
</pre>
<p>Your output looks similar to the following:</p>
<pre dir="ltr">GET_TAG
--------------------------------------------------------------------------------
1D
</pre>
<p>You can also determine the tag for a session by calling the <code dir="ltr">DBMS_STREAMS.GET_TAG</code> function.</p>
</div>
<!-- class="sect2" -->
<a id="i1012009"></a>
<div id="STREP407" class="sect2">
<h3 class="sect2">Displaying the Default Tag Value for Each Apply Process<a id="sthref485"></a><a id="sthref486"></a><a id="sthref487"></a><a id="sthref488"></a></h3>
<p>You can get the default tag for all redo entries generated by each apply process by querying for the <code dir="ltr">APPLY_TAG</code> value in the <code dir="ltr">DBA_APPLY</code> data dictionary view. For example, to get the hexadecimal value of the default tag generated in the redo entries by each apply process, run the following query:</p>
<pre dir="ltr">COLUMN APPLY_NAME HEADING &#39;Apply Process Name&#39; FORMAT A30
COLUMN APPLY_TAG HEADING &#39;Tag Value&#39; FORMAT A30

SELECT APPLY_NAME, APPLY_TAG FROM DBA_APPLY;
</pre>
<p>Your output looks similar to the following:</p>
<pre dir="ltr">Apply Process Name             Tag Value
------------------------------ ------------------------------
APPLY_FROM_MULT2               00
APPLY_FROM_MULT3               00
</pre>
<p>A handler or custom rule-based transformation function associated with an apply process can get the tag by calling the <code dir="ltr">DBMS_STREAMS.GET_TAG</code> function.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment91">
<tr>
<td class="cellalignment98">
<table class="cellalignment96">
<tr>
<td class="cellalignment95"><a href="conflict.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment95"><a href="hetero.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment100">
<table class="cellalignment94">
<tr>
<td class="cellalignment95"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment95"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment95"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment95"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment95"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment95"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>