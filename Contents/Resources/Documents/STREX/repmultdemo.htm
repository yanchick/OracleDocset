<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-104286"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/N-Way%20Replication%20Example"></a><title>N-Way Replication Example</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1042"/>
<meta name="dcterms.created" content="2015-02-05T11:48:35Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Streams Extended Examples"/>
<meta name="dcterms.identifier" content="E17912-10"/>
<meta name="dcterms.isVersionOf" content="STREX"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2008, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="repsingdemo.htm" title="Previous" type="text/html"/>
<link rel="Next" href="capappdemo.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17912-10.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/11</span> <!-- End Header -->
<div id="STREX004" class="chapter"><a id="g1109208"></a> <a id="BCGCFEEA"></a>
<h1 class="chapter"><span class="secnum">3</span> N-Way Replication Example</h1>
<p><a id="sthref51"></a><a id="sthref52"></a><a id="sthref53"></a><a id="sthref54"></a>This chapter illustrates an example of an n-way replication environment that can be constructed using Oracle Streams.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#BCGCJCFJ">Overview of the N-Way Replication Example</a></p>
</li>
<li>
<p><a href="#i1006149">Prerequisites</a></p>
</li>
<li>
<p><a href="#BCGBAIGI">Create the hrmult Schema at the mult1.example.com Database</a></p>
</li>
<li>
<p><a href="#BCGEFAGD">Create Queues and Database Links</a></p>
</li>
<li>
<p><a href="#BCGIHEBJ">Example Script for Configuring N-Way Replication</a></p>
</li>
<li>
<p><a href="#BCGJHBAF">Make DML and DDL Changes to Tables in the hrmult Schema</a></p>
</li>
</ul>
<a id="BCGCJCFJ"></a>
<div id="STREX561" class="sect1">
<h2 class="sect1">Overview of the N-Way Replication Example</h2>
<p>This example illustrates using Oracle Streams to replicate data for a schema among three Oracle databases. DML and DDL changes made to tables in the <code dir="ltr">hrmult</code> schema are captured at all databases in the environment and propagated to each of the other databases in the environment.</p>
<p>This type of environment is called an n-way replication environment. An n-way replication environment is a type of multiple-source replication environment because more than one source database captures and replicates changes.</p>
<p><a href="#BCGDAICB">Figure 3-1</a> provides an overview of the environment.</p>
<div id="STREX562" class="figure">
<p class="titleinfigure"><a id="BCGDAICB"></a>Figure 3-1 Sample N-Way Replication Environment</p>
<img width="671" height="674" src="img/strex018.gif" alt="Description of Figure 3-1 follows"/><br/>
<a id="sthref55" href="img_text/strex018.htm">Description of &#34;Figure 3-1 Sample N-Way Replication Environment&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>As illustrated in <a href="#BCGDAICB">Figure 3-1</a>, all of the databases will contain the <code dir="ltr">hrmult</code> schema when the example is complete. However, at the beginning of the example, the <code dir="ltr">hrmult</code> schema exists only at <code dir="ltr">mult1.example.com</code>. During the example, you instantiate the <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult2.example.com</code> and <code dir="ltr">mult3.example.com</code>.</p>
<p>In this example, Oracle Streams is used to perform the following series of actions:</p>
<ol>
<li>
<p>After instantiation, the capture process at each database captures DML and DDL changes for all of the tables in the <code dir="ltr">hrmult</code> schema and enqueues them into a local queue.</p>
</li>
<li>
<p>Propagations at each database propagate these changes to all of the other databases in the environment.</p>
</li>
<li>
<p>The apply processes at each database apply changes in the <code dir="ltr">hrmult</code> schema received from the other databases in the environment.</p>
</li>
</ol>
<p>This example avoids sending changes back to their source database by using the default apply tag for the apply processes. When you create an apply process, the changes applied by the apply process have redo entries with a tag of <code dir="ltr">&#39;00&#39;</code> (double zero) by default. These changes are not recaptured because, by default, rules created by the <code dir="ltr">DBMS_STREAMS_ADM</code> package have an <code dir="ltr">is_null_tag()=&#39;Y&#39;</code> condition by default, and this condition ensures that each capture process captures a change in a redo entry only if the tag for the redo entry is&nbsp;<code dir="ltr">NULL</code>.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a class="olink STREP224" href="../STREP/prep_rep.htm#STREP224"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about n-way replication environments</p>
</li>
<li>
<p><a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1006149"></a>
<div id="STREX563" class="sect1">
<h2 class="sect1">Prerequisites</h2>
<p>The following prerequisites must be completed before you begin the example in this chapter.</p>
<ul>
<li>
<p>Set the following initialization parameters to the values indicated at each database in the Oracle Streams environment:</p>
<ul>
<li>
<p><code dir="ltr">GLOBAL_NAMES</code>: This parameter must be set to <code dir="ltr">TRUE</code>. Ensure that the global names of the databases are <code dir="ltr">mult1.example.com</code>, <code dir="ltr">mult2.example.com</code>, and <code dir="ltr">mult3.example.com</code>.</p>
</li>
<li>
<p><code dir="ltr">COMPATIBLE</code>: This parameter must be set to <code dir="ltr">10.2.0</code> or higher.</p>
</li>
<li>
<p>Ensure that the <code dir="ltr">PROCESSES</code> and <code dir="ltr">SESSIONS</code> initialization parameters are set high enough for all of the Oracle Streams clients used in this example. This example configures one capture process, two propagations, and two apply processes at each database.</p>
</li>
<li>
<p><code dir="ltr">STREAMS_POOL_SIZE</code>: Optionally set this parameter to an appropriate value for each database in the environment. This parameter specifies the size of the Oracle Streams pool. The Oracle Streams pool stores messages in a buffered queue and is used for internal communications during parallel capture and apply. When the <code dir="ltr">MEMORY_TARGET</code>, <code dir="ltr">MEMORY_MAX_TARGET</code>, or <code dir="ltr">SGA_TARGET</code> initialization parameter is set to a nonzero value, the Oracle Streams pool size is managed automatically.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You might need to modify other initialization parameter settings for this example to run properly.</div>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP201" href="../STREP/prep_rep.htm#STREP201"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for information about other initialization parameters that are important in an Oracle Streams environment</div>
</li>
<li>
<p>Any database producing changes that will be captured must be running in <code dir="ltr">ARCHIVELOG</code> mode. In this example, all databases are capturing changes, and so all databases must be running in <code dir="ltr">ARCHIVELOG</code> mode.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN008" href="../ADMIN/archredo.htm#ADMIN008"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for information about running a database in <code dir="ltr">ARCHIVELOG</code> mode</div>
</li>
<li>
<p>Configure your network and Oracle Net so that all three databases can communicate with each other.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NETAG" href="../NETAG/toc.htm"><span class="italic">Oracle Database Net Services Administrator&#39;s Guide</span></a></div>
</li>
<li>
<p>Create an Oracle Streams administrator at each database in the replication environment. In this example, the databases are <code dir="ltr">mult1.example.com</code>, <code dir="ltr">mult2.example.com</code>, and <code dir="ltr">mult3.example.com</code>. This example assumes that the user name of the Oracle Streams administrator is <code dir="ltr">strmadmin</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP200" href="../STREP/prep_rep.htm#STREP200"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for instructions about creating an Oracle Streams administrator</div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BCGBAIGI"></a>
<div id="STREX564" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Create the hrmult Schema at the mult1.example.com Database</h2>
<p>For the purposes of this example, create a new schema named <code dir="ltr">hrmult</code> at the <code dir="ltr">mult1.example.com</code> database. The n-way environment will replicate this new schema.</p>
<p>Complete the following steps to use Data Pump export/import to create an <code dir="ltr">hrmult</code> schema that is a copy of the <code dir="ltr">hr</code> schema:</p>
<ol>
<li>
<p>In SQL*Plus, connect to the <code dir="ltr">mult1.example.com</code> database as an administrative user.</p>
<p>See <a class="olink ADMIN00102" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=ADMIN00102"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for instructions about connecting to a database in SQL*Plus.</p>
</li>
<li>
<p>Create a directory object to hold the export dump file and export log file. The directory object can point to any accessible directory on the computer system. For example, the following statement creates a directory object named <code dir="ltr">dp_hrmult_dir</code> that points to the <code dir="ltr">/usr/tmp</code> directory:</p>
<pre dir="ltr">CREATE DIRECTORY dp_hrmult_dir AS &#39;/usr/tmp&#39;;
</pre>
<p>Substitute an appropriate directory on your computer system.</p>
</li>
<li id="CIHFAHAG">
<p>Determine the current system change number (SCN) of the source database:</p>
<pre dir="ltr">SELECT DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER FROM DUAL;
</pre>
<p>The SCN value returned by this query is specified for the <code dir="ltr">FLASHBACK_SCN</code> Data Pump export parameter in Step <a href="#CIHFHAEG">5</a>. Because the <code dir="ltr">hr</code> schema includes foreign key constraints between tables, the <code dir="ltr">FLASHBACK_SCN</code> export parameter, or a similar export parameter, must be specified during export.</p>
</li>
<li>
<p>Exit SQL*Plus.</p>
</li>
<li id="CIHFHAEG">
<p>On a command line at the <code dir="ltr">mult1.example.com</code> database site, use Data Pump to export the <code dir="ltr">hr</code> schema at the <code dir="ltr">mult1.example.com</code> database. Ensure that you specify the SCN value returned in Step <a href="#CIHFAHAG">3</a> for the <code dir="ltr">FLASHBACK_SCN</code> parameter:</p>
<pre dir="ltr">expdp system SCHEMAS=hr DIRECTORY=dp_hrmult_dir
DUMPFILE=hrmult_schema.dmp FLASHBACK_SCN=<span class="italic">flashback_scn_value</span>
</pre></li>
<li id="BCGFGGAG">
<p>On a command line at the <code dir="ltr">mult1.example.com</code> database site, use Data Pump to import the import dump file <code dir="ltr">hrmult_schema.dmp</code>:</p>
<pre dir="ltr">impdp system SCHEMAS=hr DIRECTORY=dp_hrmult_dir
DUMPFILE=hrmult_schema.dmp REMAP_SCHEMA=hr:hrmult
</pre></li>
<li>
<p>In SQL*Plus, connect to the <code dir="ltr">mult1.example.com</code> database as an administrative user.</p>
</li>
<li>
<p>Assign a password to the new <code dir="ltr">hrmult</code> user at the <code dir="ltr">mult1.example.com</code> database using the <code dir="ltr">ALTER</code> <code dir="ltr">USER</code> statement.</p>
<p>Remember the password that you assign to the <code dir="ltr">hrmult</code> user so that you can log in as the user in the future.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BCGEFAGD"></a>
<div id="STREX565" class="sect1">
<h2 class="sect1">Create Queues and Database Links</h2>
<p>This section illustrates how to create queues and database links for an Oracle Streams replication environment that includes three Oracle databases. The remaining parts of this example depend on the queues and database links that you configure in this section.</p>
<p>Complete the following steps to create the queues and database links at all of the databases.</p>
<ol>
<li>
<p><a href="#i1081411">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#BCGJCFJH">Create the ANYDATA Queue at mult1.example.com</a></p>
</li>
<li>
<p><a href="#BCGJGDAH">Create the Database Links at mult1.example.com</a></p>
</li>
<li>
<p><a href="#BCGFFIIF">Prepare the Tables at mult1.example.com for Latest Time Conflict Resolution</a></p>
</li>
<li>
<p><a href="#BCGDDAGJ">Create the ANYDATA Queue at mult2.example.com</a></p>
</li>
<li>
<p><a href="#BCGBAJHF">Create the Database Links at mult2.example.com</a></p>
</li>
<li>
<p><a href="#BCGJHIDH">Create the ANYDATA Queue at mult3.example.com</a></p>
</li>
<li>
<p><a href="#BCGBGAGD">Create the Database Links at mult3.example.com</a></p>
</li>
<li>
<p><a href="#BCGGBHGF">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<a id="i1081411"></a>
<dl>
<dd><a id="STREX1270"></a><a id="sthref56"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL streams_setup_mult.out

/*
</pre></dd>
<dd><a id="STREX1271"></a><a id="BCGJCFJH"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create the ANYDATA Queue at mult1.example.com</dt>
<dd>
<p>Connect as the Oracle Streams administrator at <code dir="ltr">mult1.example.com</code>.</p>
<pre dir="ltr">*/

CONNECT strmadmin@mult1.example.com

/*
</pre>
<p>Run the <code dir="ltr">SET_UP_QUEUE</code> procedure to create the following queues:</p>
<ul>
<li>
<p>The <code dir="ltr">captured_mult1</code> queue to hold changes captured at the <code dir="ltr">mult1.example.com</code> database and propagated to other databases.</p>
</li>
<li>
<p>The <code dir="ltr">from_mult2</code> queue to hold changes captured at the <code dir="ltr">mult2.example.com</code> database and propagated to the <code dir="ltr">mult1.example.com</code> database to be applied.</p>
</li>
<li>
<p>The <code dir="ltr">from_mult3</code> queue to hold changes captured at the <code dir="ltr">mult3.example.com</code> database and propagated to the <code dir="ltr">mult1.example.com</code> database to be applied.</p>
</li>
</ul>
<p>Running the <code dir="ltr">SET_UP_QUEUE</code> procedure performs the following actions for each queue:</p>
<ul>
<li>
<p>Creates a queue table that is owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>) and that uses the default storage of this user.</p>
</li>
<li>
<p>Creates an <code dir="ltr">ANYDATA</code> queue that is owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>).</p>
</li>
<li>
<p>Starts the queue.</p>
</li>
</ul>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE(
    queue_table  =&gt; &#39;strmadmin.captured_mult1_table&#39;,
    queue_name   =&gt; &#39;strmadmin.captured_mult1&#39;);
END;
/

BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE(
    queue_table  =&gt; &#39;strmadmin.from_mult2_table&#39;,
    queue_name   =&gt; &#39;strmadmin.from_mult2&#39;);
END;
/

BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE(
    queue_table  =&gt; &#39;strmadmin.from_mult3_table&#39;,
    queue_name   =&gt; &#39;strmadmin.from_mult3&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1272"></a><a id="BCGJGDAH"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Create the Database Links at mult1.example.com</dt>
<dd>
<p>Create database links from the current database to the other databases in the environment.</p>
<pre dir="ltr">*/

ACCEPT password PROMPT &#39;Enter password for user: &#39; HIDE

CREATE DATABASE LINK mult2.example.com CONNECT TO strmadmin 
   IDENTIFIED BY &amp;password USING &#39;mult2.example.com&#39;;

CREATE DATABASE LINK mult3.example.com CONNECT TO strmadmin 
   IDENTIFIED BY &amp;password USING &#39;mult3.example.com&#39;;

/*
</pre></dd>
<dd><a id="STREX1273"></a><a id="BCGFFIIF"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Prepare the Tables at mult1.example.com for Latest Time Conflict Resolution<a class="dashingAutolink" name="autolink-104278"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref57"></a></dt>
<dd>
<p>This example will configure the tables in the <code dir="ltr">hrmult</code> schema for conflict resolution based on the latest time for a transaction.</p>
<p>Connect to <code dir="ltr">mult1.example.com</code> as the <code dir="ltr">hrmult</code> user.</p>
<pre dir="ltr">*/
 
CONNECT hrmult@mult1.example.com

/*
</pre>
<p>Add a <code dir="ltr">time</code> column to each table in the <code dir="ltr">hrmult</code> schema.</p>
<pre dir="ltr">*/
 
ALTER TABLE hrmult.countries ADD (time TIMESTAMP WITH TIME ZONE);
ALTER TABLE hrmult.departments ADD (time TIMESTAMP WITH TIME ZONE);
ALTER TABLE hrmult.employees ADD (time TIMESTAMP WITH TIME ZONE);
ALTER TABLE hrmult.job_history ADD (time TIMESTAMP WITH TIME ZONE);
ALTER TABLE hrmult.jobs ADD (time TIMESTAMP WITH TIME ZONE);
ALTER TABLE hrmult.locations ADD (time TIMESTAMP WITH TIME ZONE);
ALTER TABLE hrmult.regions ADD (time TIMESTAMP WITH TIME ZONE);

/*
</pre>
<p>Create a trigger for each table in the <code dir="ltr">hrmult</code> schema to insert the time of a transaction for each row inserted or updated by the transaction.</p>
<pre dir="ltr">*/

CREATE OR REPLACE TRIGGER hrmult.insert_time_countries
BEFORE
  INSERT OR UPDATE ON hrmult.countries FOR EACH ROW
BEGIN
   -- Consider time synchronization problems. The previous update to this 
   -- row might have originated from a site with a clock time ahead of the 
   -- local clock time.
   IF :OLD.TIME IS NULL OR :OLD.TIME &lt; SYSTIMESTAMP THEN
     :NEW.TIME := SYSTIMESTAMP;
   ELSE
     :NEW.TIME := :OLD.TIME + 1 / 86400;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER hrmult.insert_time_departments
BEFORE
  INSERT OR UPDATE ON hrmult.departments FOR EACH ROW
BEGIN
   IF :OLD.TIME IS NULL OR :OLD.TIME &lt; SYSTIMESTAMP THEN
     :NEW.TIME := SYSTIMESTAMP;
   ELSE
     :NEW.TIME := :OLD.TIME + 1 / 86400;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER hrmult.insert_time_employees
BEFORE
  INSERT OR UPDATE ON hrmult.employees FOR EACH ROW
BEGIN
   IF :OLD.TIME IS NULL OR :OLD.TIME &lt; SYSTIMESTAMP THEN
     :NEW.TIME := SYSTIMESTAMP;
   ELSE
     :NEW.TIME := :OLD.TIME + 1 / 86400;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER hrmult.insert_time_job_history
BEFORE
  INSERT OR UPDATE ON hrmult.job_history FOR EACH ROW
BEGIN
   IF :OLD.TIME IS NULL OR :OLD.TIME &lt; SYSTIMESTAMP THEN
     :NEW.TIME := SYSTIMESTAMP;
   ELSE
     :NEW.TIME := :OLD.TIME + 1 / 86400;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER hrmult.insert_time_jobs
BEFORE
  INSERT OR UPDATE ON hrmult.jobs FOR EACH ROW
BEGIN
   IF :OLD.TIME IS NULL OR :OLD.TIME &lt; SYSTIMESTAMP THEN
     :NEW.TIME := SYSTIMESTAMP;
   ELSE
     :NEW.TIME := :OLD.TIME + 1 / 86400;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER hrmult.insert_time_locations
BEFORE
  INSERT OR UPDATE ON hrmult.locations FOR EACH ROW
BEGIN
   IF :OLD.TIME IS NULL OR :OLD.TIME &lt; SYSTIMESTAMP THEN
     :NEW.TIME := SYSTIMESTAMP;
   ELSE
     :NEW.TIME := :OLD.TIME + 1 / 86400;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER hrmult.insert_time_regions
BEFORE
  INSERT OR UPDATE ON hrmult.regions FOR EACH ROW
BEGIN
   IF :OLD.TIME IS NULL OR :OLD.TIME &lt; SYSTIMESTAMP THEN
     :NEW.TIME := SYSTIMESTAMP;
   ELSE
     :NEW.TIME := :OLD.TIME + 1 / 86400;
   END IF;
END;
/

/*
</pre></dd>
<dd><a id="STREX1274"></a><a id="BCGDDAGJ"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create the ANYDATA Queue at mult2.example.com</dt>
<dd>
<p>Connect as the Oracle Streams administrator at <code dir="ltr">mult2.example.com</code>.</p>
<pre dir="ltr">*/

CONNECT strmadmin@mult2.example.com

/*
</pre>
<p>Run the <code dir="ltr">SET_UP_QUEUE</code> procedure to create the following queues:</p>
<ul>
<li>
<p>The <code dir="ltr">captured_mult2</code> queue to hold changes captured at the <code dir="ltr">mult2.example.com</code> database and propagated to other databases.</p>
</li>
<li>
<p>The <code dir="ltr">from_mult1</code> queue to hold changes captured at the <code dir="ltr">mult1.example.com</code> database and propagated to the <code dir="ltr">mult2.example.com</code> database to be applied.</p>
</li>
<li>
<p>The <code dir="ltr">from_mult3</code> queue to hold changes captured at the <code dir="ltr">mult3.example.com</code> database and propagated to the <code dir="ltr">mult2.example.com</code> database to be applied.</p>
</li>
</ul>
<p>Running the <code dir="ltr">SET_UP_QUEUE</code> procedure performs the following actions for each queue:</p>
<ul>
<li>
<p>Creates a queue table that is owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>) and that uses the default storage of this user.</p>
</li>
<li>
<p>Creates an <code dir="ltr">ANYDATA</code> queue that is owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>).</p>
</li>
<li>
<p>Starts the queue.</p>
</li>
</ul>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE(
    queue_table  =&gt; &#39;strmadmin.captured_mult2_table&#39;,
    queue_name   =&gt; &#39;strmadmin.captured_mult2&#39;);
END;
/

BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE(
    queue_table  =&gt; &#39;strmadmin.from_mult1_table&#39;,
    queue_name   =&gt; &#39;strmadmin.from_mult1&#39;);
END;
/

BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE(
    queue_table  =&gt; &#39;strmadmin.from_mult3_table&#39;,
    queue_name   =&gt; &#39;strmadmin.from_mult3&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1275"></a><a id="BCGBAJHF"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Create the Database Links at mult2.example.com</dt>
<dd>
<p>Create database links from the current database to the other databases in the environment.</p>
<pre dir="ltr">*/

CREATE DATABASE LINK mult1.example.com CONNECT TO strmadmin 
   IDENTIFIED BY &amp;password USING &#39;mult1.example.com&#39;;

CREATE DATABASE LINK mult3.example.com CONNECT TO strmadmin 
   IDENTIFIED BY &amp;password USING &#39;mult3.example.com&#39;;

/*
</pre></dd>
<dd><a id="STREX1276"></a><a id="BCGJHIDH"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Create the ANYDATA Queue at mult3.example.com</dt>
<dd>
<p>Connect as the Oracle Streams administrator at <code dir="ltr">mult3.example.com</code>.</p>
<pre dir="ltr">*/

CONNECT strmadmin@mult3.example.com

/*
</pre>
<p>Run the <code dir="ltr">SET_UP_QUEUE</code> procedure to create the following queues:</p>
<ul>
<li>
<p>The <code dir="ltr">captured_mult3</code> queue to hold changes captured at the <code dir="ltr">mult3.example.com</code> database and propagated to other databases.</p>
</li>
<li>
<p>The <code dir="ltr">from_mult1</code> queue to hold changes captured at the <code dir="ltr">mult1.example.com</code> database and propagated to the <code dir="ltr">mult3.example.com</code> database to be applied.</p>
</li>
<li>
<p>The <code dir="ltr">from_mult2</code> queue to hold changes captured at the <code dir="ltr">mult2.example.com</code> database and propagated to the <code dir="ltr">mult3.example.com</code> database to be applied.</p>
</li>
</ul>
<p>Running the <code dir="ltr">SET_UP_QUEUE</code> procedure performs the following actions for each queue:</p>
<ul>
<li>
<p>Creates a queue table that is owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>) and that uses the default storage of this user.</p>
</li>
<li>
<p>Creates an <code dir="ltr">ANYDATA</code> queue that is owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>).</p>
</li>
<li>
<p>Starts the queue.</p>
</li>
</ul>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE(
    queue_table  =&gt; &#39;strmadmin.captured_mult3_table&#39;,
    queue_name   =&gt; &#39;strmadmin.captured_mult3&#39;);
END;
/

BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE(
    queue_table  =&gt; &#39;strmadmin.from_mult1_table&#39;,
    queue_name   =&gt; &#39;strmadmin.from_mult1&#39;);
END;
/

BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE(
    queue_table  =&gt; &#39;strmadmin.from_mult2_table&#39;,
    queue_name   =&gt; &#39;strmadmin.from_mult2&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1277"></a><a id="BCGBGAGD"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Create the Database Links at mult3.example.com</dt>
<dd>
<p>Create database links from the current database to the other databases in the environment.</p>
<pre dir="ltr">*/

CREATE DATABASE LINK mult1.example.com CONNECT TO strmadmin 
   IDENTIFIED BY &amp;password USING &#39;mult1.example.com&#39;;

CREATE DATABASE LINK mult2.example.com CONNECT TO strmadmin 
   IDENTIFIED BY &amp;password USING &#39;mult2.example.com&#39;;

/*
</pre></dd>
<dd><a id="STREX1278"></a><a id="BCGGBHGF"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">streams_setup_mult.out</code> spool file to ensure that all actions finished successfully after this script is completed.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1081813"></a>/*************************** END OF SCRIPT ******************************/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="BCGIHEBJ"></a>
<div id="STREX566" class="sect1">
<h2 class="sect1">Example Script for Configuring N-Way Replication</h2>
<p>Complete the following steps to configure an Oracle Streams n-way replication environment.</p>
<ol>
<li>
<p><a href="#i1081952">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#BCGIFJFD">Specify Supplemental Logging at mult1.example.com</a></p>
</li>
<li>
<p><a href="#BCGFCGBH">Create the Capture Process at mult1.example.com</a></p>
</li>
<li>
<p><a href="#BCGJGGCF">Create One Apply Process at mult1.example.com for Each Source Database</a></p>
</li>
<li>
<p><a href="#BCGIBGHH">Configure Latest Time Conflict Resolution at mult1.example.com</a></p>
</li>
<li>
<p><a href="#BCGHHDEI">Configure Propagation at mult1.example.com</a></p>
</li>
<li>
<p><a href="#BCGEDCIJ">Create the Capture Process at mult2.example.com.</a></p>
</li>
<li>
<p><a href="#BCGHCGBB">Set the Instantiation SCN for mult2.example.com at the Other Databases</a></p>
</li>
<li>
<p><a href="#BCGDAAFA">Create One Apply Process at mult2.example.com for Each Source Database</a></p>
</li>
<li>
<p><a href="#BCGGHIDC">Configure Propagation at mult2.example.com</a></p>
</li>
<li>
<p><a href="#BCGGEGBC">Create the Capture Process at mult3.example.com</a></p>
</li>
<li>
<p><a href="#BCGBJEEE">Set the Instantiation SCN for mult3.example.com at the Other Databases</a></p>
</li>
<li>
<p><a href="#BCGDHIIA">Create One Apply Process at mult3.example.com for Each Source Database</a></p>
</li>
<li>
<p><a href="#BCGFGACE">Configure Propagation at mult3.example.com</a></p>
</li>
<li>
<p><a href="#BCGHDJFE">Instantiate the hrmult Schema at mult2.example.com</a></p>
</li>
<li>
<p><a href="#BCGFBGFB">Instantiate the hrmult Schema at mult3.example.com</a></p>
</li>
<li>
<p><a href="#BCGJEJFI">Configure Latest Time Conflict Resolution at mult2.example.com</a></p>
</li>
<li>
<p><a href="#BCGFCGJH">Start the Apply Processes at mult2.example.com</a></p>
</li>
<li>
<p><a href="#BCGGICEA">Configure Latest Time Conflict Resolution at mult3.example.com</a></p>
</li>
<li>
<p><a href="#BCGBDIED">Start the Apply Processes at mult3.example.com</a></p>
</li>
<li>
<p><a href="#BCGDICEA">Start the Apply Processes at mult1.example.com</a></p>
</li>
<li>
<p><a href="#BCGBJGIG">Start the Capture Process at mult1.example.com</a></p>
</li>
<li>
<p><a href="#BCGGJADB">Start the Capture Process at mult2.example.com</a></p>
</li>
<li>
<p><a href="#BCGJBJDB">Start the Capture Process at mult3.example.com</a></p>
</li>
<li>
<p><a href="#BCGDICFE">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<a id="i1081952"></a>
<dl>
<dd><a id="STREX1279"></a><a id="sthref58"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL streams_mult.out

/*
</pre></dd>
<dd><a id="STREX1280"></a><a id="BCGIFJFD"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Specify Supplemental Logging at mult1.example.com<a class="dashingAutolink" name="autolink-104279"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref59"></a><a class="dashingAutolink" name="autolink-104280"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref60"></a><a class="dashingAutolink" name="autolink-104281"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref61"></a></dt>
<dd>
<p>Connect to <code dir="ltr">mult1.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@mult1.example.com

/*
</pre>
<p>Specify an unconditional supplemental log group that includes the primary key for each table and the column list for each table, as specified in <a href="#BCGIBGHH">&#34;Configure Latest Time Conflict Resolution at mult1.example.com&#34;</a>. Because the column list for each table includes all of the columns of each table except for its primary key, this step creates a supplemental log group for each table that includes all of the columns in the table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>For convenience, this example includes the primary key column(s) for each table and the columns used for update conflict resolution in a single unconditional log group. You can choose to place the primary key column(s) for each table in an unconditional log group and the columns used for update conflict resolution in a conditional log group.</p>
</li>
<li>
<p>You do not need to specify supplemental logging explicitly at <code dir="ltr">mult2.example.com</code> and <code dir="ltr">mult3.example.com</code> in this example. When you use Data Pump to instantiate the tables in the <code dir="ltr">hrmult</code> schema at these databases later in this example, the supplemental logging specifications at <code dir="ltr">mult1.example.com</code> are retained at <code dir="ltr">mult2.example.com</code> and <code dir="ltr">mult3.example.com</code>.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP107" href="../STREP/prep_rep.htm#STREP107"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a></div>
<pre dir="ltr">*/

ALTER TABLE hrmult.countries ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;

ALTER TABLE hrmult.departments ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;

ALTER TABLE hrmult.employees ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;

ALTER TABLE hrmult.jobs ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;

ALTER TABLE hrmult.job_history ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;

ALTER TABLE hrmult.locations ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;

ALTER TABLE hrmult.regions ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;

/*
</pre></dd>
<dd><a id="STREX1281"></a><a id="BCGFCGBH"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Create the Capture Process at mult1.example.com</dt>
<dd>
<p>Create the capture process to capture changes to the entire <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult1.example.com</code>. This step also prepares the <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult1.example.com</code> for instantiation. After this step is complete, users can modify tables in the <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN   
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name    =&gt; &#39;hrmult&#39;,
    streams_type   =&gt; &#39;capture&#39;,
    streams_name   =&gt; &#39;capture_hrmult&#39;, 
    queue_name     =&gt; &#39;strmadmin.captured_mult1&#39;,
    include_dml    =&gt; TRUE,
    include_ddl    =&gt; TRUE,
    inclusion_rule =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1282"></a><a id="BCGJGGCF"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create One Apply Process at mult1.example.com for Each Source Database</dt>
<dd>
<p>Configure <code dir="ltr">mult1.example.com</code> to apply changes to the <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult2.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name     =&gt; &#39;hrmult&#39;,   
    streams_type    =&gt; &#39;apply&#39;,
    streams_name    =&gt; &#39;apply_from_mult2&#39;,
    queue_name      =&gt; &#39;strmadmin.from_mult2&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;mult2.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

/*
</pre>
<p>Configure <code dir="ltr">mult1.example.com</code> to apply changes to the <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult3.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name     =&gt; &#39;hrmult&#39;,   
    streams_type    =&gt; &#39;apply&#39;,
    streams_name    =&gt; &#39;apply_from_mult3&#39;,
    queue_name      =&gt; &#39;strmadmin.from_mult3&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;mult3.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1283"></a><a id="BCGIBGHH"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Configure Latest Time Conflict Resolution at mult1.example.com<a class="dashingAutolink" name="autolink-104282"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref62"></a><a class="dashingAutolink" name="autolink-104283"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref63"></a></dt>
<dd>
<p>Specify an update conflict handler for each table in the <code dir="ltr">hrmult</code> schema. For each table, designate the <code dir="ltr">time</code> column as the resolution column for a <code dir="ltr">MAXIMUM</code> conflict handler. When an update conflict occurs, such an update conflict handler applies the transaction with the latest (or greater) time and discards the transaction with the earlier (or lesser) time. The column lists include all columns for each table, except for the primary key, because this example assumes that primary key values are never updated.</p>
<pre dir="ltr">*/
 
DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;country_name&#39;;
  cols(2) := &#39;region_id&#39;;
  cols(3) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.countries&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;department_name&#39;;
  cols(2) := &#39;manager_id&#39;;
  cols(3) := &#39;location_id&#39;;
  cols(4) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.departments&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1)  := &#39;first_name&#39;;
  cols(2)  := &#39;last_name&#39;;
  cols(3)  := &#39;email&#39;;
  cols(4)  := &#39;phone_number&#39;;
  cols(5)  := &#39;hire_date&#39;;
  cols(6)  := &#39;job_id&#39;;
  cols(7)  := &#39;salary&#39;;
  cols(8)  := &#39;commission_pct&#39;;
  cols(9)  := &#39;manager_id&#39;;
  cols(10) := &#39;department_id&#39;;
  cols(11) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.employees&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;job_title&#39;;
  cols(2) := &#39;min_salary&#39;;
  cols(3) := &#39;max_salary&#39;;
  cols(4) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.jobs&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;employee_id&#39;;
  cols(2) := &#39;start_date&#39;;
  cols(3) := &#39;end_date&#39;;
  cols(4) := &#39;job_id&#39;;
  cols(5) := &#39;department_id&#39;;
  cols(6) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.job_history&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;street_address&#39;;
  cols(2) := &#39;postal_code&#39;;
  cols(3) := &#39;city&#39;;
  cols(4) := &#39;state_province&#39;;
  cols(5) := &#39;country_id&#39;;
  cols(6) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.locations&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;region_name&#39;;
  cols(2) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.regions&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

/*
</pre></dd>
<dd><a id="STREX1284"></a><a id="BCGHHDEI"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Configure Propagation at mult1.example.com</dt>
<dd>
<p>Configure and schedule propagation of DML and DDL changes in the <code dir="ltr">hrmult</code> schema from the queue at <code dir="ltr">mult1.example.com</code> to the queue at <code dir="ltr">mult2.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_PROPAGATION_RULES(
    schema_name               =&gt; &#39;hrmult&#39;, 
    streams_name              =&gt; &#39;mult1_to_mult2&#39;,    
    source_queue_name         =&gt; &#39;strmadmin.captured_mult1&#39;,
    destination_queue_name    =&gt; &#39;strmadmin.from_mult1@mult2.example.com&#39;,
    include_dml               =&gt; TRUE,
    include_ddl               =&gt; TRUE,
    source_database           =&gt; &#39;mult1.example.com&#39;,
    inclusion_rule            =&gt; TRUE,
    queue_to_queue            =&gt; TRUE);
END;
/

/*
</pre>
<p>Configure and schedule propagation of DML and DDL changes in the <code dir="ltr">hrmult</code> schema from the queue at <code dir="ltr">mult1.example.com</code> to the queue at <code dir="ltr">mult3.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_PROPAGATION_RULES(
    schema_name               =&gt; &#39;hrmult&#39;, 
    streams_name              =&gt; &#39;mult1_to_mult3&#39;,    
    source_queue_name         =&gt; &#39;strmadmin.captured_mult1&#39;,
    destination_queue_name    =&gt; &#39;strmadmin.from_mult1@mult3.example.com&#39;,
    include_dml               =&gt; TRUE,
    include_ddl               =&gt; TRUE,
    source_database           =&gt; &#39;mult1.example.com&#39;,
    inclusion_rule            =&gt; TRUE,
    queue_to_queue            =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1285"></a><a id="BCGEDCIJ"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Create the Capture Process at mult2.example.com.</dt>
<dd>
<p>Connect to <code dir="ltr">mult2.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@mult2.example.com

/*
</pre>
<p>Create the capture process to capture changes to the entire <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult2.example.com</code>. This step also prepares the <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult2.example.com</code> for instantiation.</p>
<pre dir="ltr">*/

BEGIN   
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name    =&gt; &#39;hrmult&#39;,
    streams_type   =&gt; &#39;capture&#39;,
    streams_name   =&gt; &#39;capture_hrmult&#39;, 
    queue_name     =&gt; &#39;strmadmin.captured_mult2&#39;,
    include_dml    =&gt; TRUE,
    include_ddl    =&gt; TRUE,
    inclusion_rule =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1286"></a><a id="BCGHCGBB"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Set the Instantiation SCN for mult2.example.com at the Other Databases</dt>
<dd>
<p>In this example, the <code dir="ltr">hrmult</code> schema already exists at all of the databases. The tables in the schema exist only at <code dir="ltr">mult1.example.com</code> until they are instantiated at <code dir="ltr">mult2.example.com</code> and <code dir="ltr">mult3.example.com</code> in Step <a href="#BCGFBGFB">16</a>. The instantiation is done using an import of the tables from <code dir="ltr">mult1.example.com</code>. These import operations set the schema instantiation SCNs for <code dir="ltr">mult1.example.com</code> at <code dir="ltr">mult2.example.com</code> and <code dir="ltr">mult3.example.com</code> automatically.</p>
<p>However, the instantiation SCNs for <code dir="ltr">mult2.example.com</code> and <code dir="ltr">mult3.example.com</code> are not set automatically at the other sites in the environment. This step sets the schema instantiation SCN for <code dir="ltr">mult2.example.com</code> manually at <code dir="ltr">mult1.example.com</code> and <code dir="ltr">mult3.example.com</code>. The current SCN at <code dir="ltr">mult2.example.com</code> is obtained by using the <code dir="ltr">GET_SYSTEM_CHANGE_NUMBER</code> function in the <code dir="ltr">DBMS_FLASHBACK</code> package at <code dir="ltr">mult2.example.com</code>. This SCN is used at <code dir="ltr">mult1.example.com</code> and <code dir="ltr">mult3.example.com</code> to run the <code dir="ltr">SET_SCHEMA_INSTANTIATION_SCN</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package.</p>
<p>The <code dir="ltr">SET_SCHEMA_INSTANTIATION_SCN</code> procedure controls which DDL LCRs for a schema are ignored by an apply process and which DDL LCRs for a schema are applied by an apply process. If the commit SCN of a DDL LCR for a database object in a schema from a source database is less than or equal to the instantiation SCN for that database object at some destination database, then the apply process at the destination database disregards the DDL LCR. Otherwise, the apply process applies the DDL LCR.</p>
<p>Because you are running the <code dir="ltr">SET_SCHEMA_INSTANTIATION_SCN</code> procedure before the tables are instantiated at <code dir="ltr">mult2.example.com</code>, and because the local capture process is configured already, you do not need to run the <code dir="ltr">SET_TABLE_INSTANTIATION_SCN</code> for each table after the instantiation. In this example, an apply process at both <code dir="ltr">mult1.example.com</code> and <code dir="ltr">mult3.example.com</code> will apply transactions to the tables in the <code dir="ltr">hrmult</code> schema with SCNs that were committed after the SCN obtained in this step.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>In a case where you are instantiating a schema that does not exist, you can set the global instantiation SCN instead of the schema instantiation SCN.</p>
</li>
<li>
<p>In a case where the tables are instantiated before you set the instantiation SCN, you must set the schema instantiation SCN and the instantiation SCN for each table in the schema.</p>
</li>
</ul>
</div>
<pre dir="ltr">*/

DECLARE
  iscn  NUMBER;         -- Variable to hold instantiation SCN value
BEGIN
  iscn := DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER();
  DBMS_APPLY_ADM.SET_SCHEMA_INSTANTIATION_SCN@MULT1.EXAMPLE.COM(
    source_schema_name    =&gt; &#39;hrmult&#39;,
    source_database_name  =&gt; &#39;mult2.example.com&#39;,
    instantiation_scn     =&gt; iscn);
  DBMS_APPLY_ADM.SET_SCHEMA_INSTANTIATION_SCN@MULT3.EXAMPLE.COM(
    source_schema_name    =&gt; &#39;hrmult&#39;,
    source_database_name  =&gt; &#39;mult2.example.com&#39;,
    instantiation_scn     =&gt; iscn);
END;
/
</pre>
<p>/*</p>
</dd>
<dd><a id="STREX1287"></a><a id="BCGDAAFA"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Create One Apply Process at mult2.example.com for Each Source Database</dt>
<dd>
<p>Configure <code dir="ltr">mult2.example.com</code> to apply changes to the <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name     =&gt; &#39;hrmult&#39;,   
    streams_type    =&gt; &#39;apply&#39;,
    streams_name    =&gt; &#39;apply_from_mult1&#39;,
    queue_name      =&gt; &#39;strmadmin.from_mult1&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;mult1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

/*
</pre>
<p>Configure <code dir="ltr">mult2.example.com</code> to apply changes to the <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult3.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name     =&gt; &#39;hrmult&#39;,   
    streams_type    =&gt; &#39;apply&#39;,
    streams_name    =&gt; &#39;apply_from_mult3&#39;,
    queue_name      =&gt; &#39;strmadmin.from_mult3&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;mult3.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1288"></a><a id="BCGGHIDC"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Configure Propagation at mult2.example.com</dt>
<dd>
<p>Configure and schedule propagation of DML and DDL changes in the <code dir="ltr">hrmult</code> schema from the queue at <code dir="ltr">mult2.example.com</code> to the queue at <code dir="ltr">mult1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_PROPAGATION_RULES(
    schema_name             =&gt; &#39;hrmult&#39;,
    streams_name            =&gt; &#39;mult2_to_mult1&#39;,
    source_queue_name       =&gt; &#39;strmadmin.captured_mult2&#39;,
    destination_queue_name  =&gt; &#39;strmadmin.from_mult2@mult1.example.com&#39;,
    include_dml             =&gt; TRUE,
    include_ddl             =&gt; TRUE, 
    source_database         =&gt; &#39;mult2.example.com&#39;,
    inclusion_rule          =&gt; TRUE,
    queue_to_queue          =&gt; TRUE);
END;
/

/*
</pre>
<p>Configure and schedule propagation of DML and DDL changes in the <code dir="ltr">hrmult</code> schema from the queue at <code dir="ltr">mult2.example.com</code> to the queue at <code dir="ltr">mult3.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_PROPAGATION_RULES(
    schema_name             =&gt; &#39;hrmult&#39;,
    streams_name            =&gt; &#39;mult2_to_mult3&#39;,
    source_queue_name       =&gt; &#39;strmadmin.captured_mult2&#39;,
    destination_queue_name  =&gt; &#39;strmadmin.from_mult2@mult3.example.com&#39;, 
    include_dml             =&gt; TRUE,
    include_ddl             =&gt; TRUE,
    source_database         =&gt; &#39;mult2.example.com&#39;,
    inclusion_rule          =&gt; TRUE,
    queue_to_queue          =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1289"></a><a id="BCGGEGBC"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Create the Capture Process at mult3.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">mult3.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@mult3.example.com

/*
</pre>
<p>Create the capture process to capture changes to the entire <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult3.example.com</code>. This step also prepares the <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult3.example.com</code> for instantiation.</p>
<pre dir="ltr">*/

BEGIN   
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name    =&gt; &#39;hrmult&#39;,
    streams_type   =&gt; &#39;capture&#39;,
    streams_name   =&gt; &#39;capture_hrmult&#39;, 
    queue_name     =&gt; &#39;strmadmin.captured_mult3&#39;,
    include_dml    =&gt; TRUE,
    include_ddl    =&gt; TRUE,
    inclusion_rule =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1290"></a><a id="BCGBJEEE"></a></dd>
<dt class="seghead">Step 12&nbsp;&nbsp;&nbsp;Set the Instantiation SCN for mult3.example.com at the Other Databases</dt>
<dd>
<p>In this example, the <code dir="ltr">hrmult</code> schema already exists at all of the databases. The tables in the schema exist only at <code dir="ltr">mult1.example.com</code> until they are instantiated at <code dir="ltr">mult2.example.com</code> and <code dir="ltr">mult3.example.com</code> in Step <a href="#BCGFBGFB">16</a>. The instantiation is done using an import of the tables from <code dir="ltr">mult1.example.com</code>. These import operations set the schema instantiation SCNs for <code dir="ltr">mult1.example.com</code> at <code dir="ltr">mult2.example.com</code> and <code dir="ltr">mult3.example.com</code> automatically.</p>
<p>However, the instantiation SCNs for <code dir="ltr">mult2.example.com</code> and <code dir="ltr">mult3.example.com</code> are not set automatically at the other sites in the environment. This step sets the schema instantiation SCN for <code dir="ltr">mult3.example.com</code> manually at <code dir="ltr">mult1.example.com</code> and <code dir="ltr">mult2.example.com</code>. The current SCN at <code dir="ltr">mult3.example.com</code> is obtained by using the <code dir="ltr">GET_SYSTEM_CHANGE_NUMBER</code> function in the <code dir="ltr">DBMS_FLASHBACK</code> package at <code dir="ltr">mult3.example.com</code>. This SCN is used at <code dir="ltr">mult1.example.com</code> and <code dir="ltr">mult2.example.com</code> to run the <code dir="ltr">SET_SCHEMA_INSTANTIATION_SCN</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package.</p>
<p>The <code dir="ltr">SET_SCHEMA_INSTANTIATION_SCN</code> procedure controls which DDL LCRs for a schema are ignored by an apply process and which DDL LCRs for a schema are applied by an apply process. If the commit SCN of a DDL LCR for a database object in a schema from a source database is less than or equal to the instantiation SCN for that database object at some destination database, then the apply process at the destination database disregards the DDL LCR. Otherwise, the apply process applies the DDL LCR.</p>
<p>Because you are running the <code dir="ltr">SET_SCHEMA_INSTANTIATION_SCN</code> procedure before the tables are instantiated at <code dir="ltr">mult3.example.com</code>, and because the local capture process is configured already, you do not need to run the <code dir="ltr">SET_TABLE_INSTANTIATION_SCN</code> for each table after the instantiation. In this example, an apply process at both <code dir="ltr">mult1.example.com</code> and <code dir="ltr">mult2.example.com</code> will apply transactions to the tables in the <code dir="ltr">hrmult</code> schema with SCNs that were committed after the SCN obtained in this step.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>In a case where you are instantiating a schema that does not exist, you can set the global instantiation SCN instead of the schema instantiation SCN.</p>
</li>
<li>
<p>In a case where the tables are instantiated before you set the instantiation SCN, you must set the schema instantiation SCN and the instantiation SCN for each table in the schema.</p>
</li>
</ul>
</div>
<pre dir="ltr">*/

DECLARE
  iscn  NUMBER;         -- Variable to hold instantiation SCN value
BEGIN
  iscn := DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER();
  DBMS_APPLY_ADM.SET_SCHEMA_INSTANTIATION_SCN@MULT1.EXAMPLE.COM(
    source_schema_name    =&gt; &#39;hrmult&#39;,
    source_database_name  =&gt; &#39;mult3.example.com&#39;,
    instantiation_scn     =&gt; iscn);
  DBMS_APPLY_ADM.SET_SCHEMA_INSTANTIATION_SCN@MULT2.EXAMPLE.COM(
    source_schema_name    =&gt; &#39;hrmult&#39;,
    source_database_name  =&gt; &#39;mult3.example.com&#39;,
    instantiation_scn     =&gt; iscn);
END;
/

/*
</pre></dd>
<dd><a id="STREX1291"></a><a id="BCGDHIIA"></a></dd>
<dt class="seghead">Step 13&nbsp;&nbsp;&nbsp;Create One Apply Process at mult3.example.com for Each Source Database</dt>
<dd>
<p>Configure <code dir="ltr">mult3.example.com</code> to apply changes to the <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name     =&gt; &#39;hrmult&#39;,   
    streams_type    =&gt; &#39;apply&#39;,
    streams_name    =&gt; &#39;apply_from_mult1&#39;,
    queue_name      =&gt; &#39;strmadmin.from_mult1&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;mult1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

/*
</pre>
<p>Configure <code dir="ltr">mult3.example.com</code> to apply changes to the <code dir="ltr">hrmult</code> schema at <code dir="ltr">mult2.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name     =&gt; &#39;hrmult&#39;,   
    streams_type    =&gt; &#39;apply&#39;,
    streams_name    =&gt; &#39;apply_from_mult2&#39;,
    queue_name      =&gt; &#39;strmadmin.from_mult2&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;mult2.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1292"></a><a id="BCGFGACE"></a></dd>
<dt class="seghead">Step 14&nbsp;&nbsp;&nbsp;Configure Propagation at mult3.example.com</dt>
<dd>
<p>Configure and schedule propagation of DML and DDL changes in the <code dir="ltr">hrmult</code> schema from the queue at <code dir="ltr">mult3.example.com</code> to the queue at <code dir="ltr">mult1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_PROPAGATION_RULES(
    schema_name             =&gt; &#39;hrmult&#39;,
    streams_name            =&gt; &#39;mult3_to_mult1&#39;,
    source_queue_name       =&gt; &#39;strmadmin.captured_mult3&#39;,
    destination_queue_name  =&gt; &#39;strmadmin.from_mult3@mult1.example.com&#39;, 
    include_dml             =&gt; TRUE,
    include_ddl             =&gt; TRUE,
    source_database         =&gt; &#39;mult3.example.com&#39;,
    inclusion_rule          =&gt; TRUE,
    queue_to_queue          =&gt; TRUE);
END;
/

/*
</pre>
<p>Configure and schedule propagation of DML and DDL changes in the <code dir="ltr">hrmult</code> schema from the queue at <code dir="ltr">mult3.example.com</code> to the queue at <code dir="ltr">mult2.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_PROPAGATION_RULES(
    schema_name             =&gt; &#39;hrmult&#39;,
    streams_name            =&gt; &#39;mult3_to_mult2&#39;,
    source_queue_name       =&gt; &#39;strmadmin.captured_mult3&#39;,
    destination_queue_name  =&gt; &#39;strmadmin.from_mult3@mult2.example.com&#39;, 
    include_dml             =&gt; TRUE,
    include_ddl             =&gt; TRUE,
    source_database         =&gt; &#39;mult3.example.com&#39;,
    inclusion_rule          =&gt; TRUE,
    queue_to_queue          =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1293"></a><a id="BCGHDJFE"></a></dd>
<dt class="seghead">Step 15&nbsp;&nbsp;&nbsp;Instantiate the hrmult Schema at mult2.example.com<a class="dashingAutolink" name="autolink-104284"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref64"></a></dt>
<dd>
<p>This example performs a network Data Pump import of the <code dir="ltr">hrmult</code> schema from <code dir="ltr">mult1.example.com</code> to <code dir="ltr">mult2.example.com</code>. A network import means that Data Pump imports the database objects in the schema from <code dir="ltr">mult1.example.com</code> without using an export dump file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for information about performing an import</div>
<p>Connect to <code dir="ltr">mult2.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@mult2.example.com

/*
</pre>
<p>This example will do a schema-level import using the <code dir="ltr">DBMS_DATAPUMP</code> package. For simplicity, exceptions from any of the API calls will not be trapped. However, Oracle recommends that you define exception handlers and call <code dir="ltr">GET_STATUS</code> to retrieve more detailed error information if a failure occurs. If you want to monitor the import, then query the <code dir="ltr">DBA_DATAPUMP_JOBS</code> data dictionary view at the import database.</p>
<pre dir="ltr">*/

SET SERVEROUTPUT ON
DECLARE
  h1                 NUMBER;         -- Data Pump job handle
  mult2_instantscn   NUMBER;         -- Variable to hold current source SCN
  job_state          VARCHAR2(30);   -- To keep track of job state
  js                 ku$_JobStatus;  -- The job status from GET_STATUS
  sts                ku$_Status;     -- The status object returned by GET_STATUS
  job_not_exist    exception;
  pragma exception_init(job_not_exist, -31626);
BEGIN
-- Create a (user-named) Data Pump job to do a schema-level import.
  h1 := DBMS_DATAPUMP.OPEN(
          operation   =&gt; &#39;IMPORT&#39;,
          job_mode    =&gt; &#39;SCHEMA&#39;,
          remote_link =&gt; &#39;MULT1.EXAMPLE.COM&#39;,
          job_name    =&gt; &#39;dp_mult2&#39;);
-- A metadata filter is used to specify the schema that owns the tables 
-- that will be imported.
  DBMS_DATAPUMP.METADATA_FILTER(
    handle    =&gt; h1,
    name      =&gt; &#39;SCHEMA_EXPR&#39;,
    value     =&gt; &#39;=&#39;&#39;HRMULT&#39;&#39;&#39;);
-- Get the current SCN of the source database, and set the FLASHBACK_SCN 
-- parameter to this value to ensure consistency between all of the 
-- objects in the schema.
  mult2_instantscn := DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER@mult1.example.com();  
  DBMS_DATAPUMP.SET_PARAMETER(
    handle =&gt; h1,
    name   =&gt; &#39;FLASHBACK_SCN&#39;,
    value  =&gt; mult2_instantscn); 
-- Start the job. 
  DBMS_DATAPUMP.START_JOB(h1);
-- The import job should be running. In the following loop, the job
-- is monitored until it completes.
  job_state := &#39;UNDEFINED&#39;;
  BEGIN
    WHILE (job_state != &#39;COMPLETED&#39;) AND (job_state != &#39;STOPPED&#39;) LOOP
      sts:=DBMS_DATAPUMP.GET_STATUS(
             handle  =&gt; h1,
             mask    =&gt; DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR +
                        DBMS_DATAPUMP.KU$_STATUS_JOB_STATUS +
                        DBMS_DATAPUMP.KU$_STATUS_WIP,
             timeout =&gt; -1);
      js := sts.job_status;
      DBMS_LOCK.SLEEP(10);
      job_state := js.state;
    END LOOP;
  -- Gets an exception when job no longer exists
    EXCEPTION WHEN job_not_exist THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Data Pump job has completed&#39;);
      DBMS_OUTPUT.PUT_LINE(&#39;Instantiation SCN: &#39; ||mult2_instantscn);
  END;
END;
/

/*
</pre></dd>
<dd><a id="STREX1294"></a><a id="BCGFBGFB"></a></dd>
<dt class="seghead">Step 16&nbsp;&nbsp;&nbsp;Instantiate the hrmult Schema at mult3.example.com<a class="dashingAutolink" name="autolink-104285"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref65"></a></dt>
<dd>
<p>This example performs a network Data Pump import of the <code dir="ltr">hrmult</code> schema from <code dir="ltr">mult1.example.com</code> to <code dir="ltr">mult3.example.com</code>. A network import means that Data Pump imports the database objects in the schema from <code dir="ltr">mult1.example.com</code> without using an export dump file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for information about performing an import</div>
<p>Connect to <code dir="ltr">mult3.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@mult3.example.com

/*
</pre>
<p>This example will do a table import using the <code dir="ltr">DBMS_DATAPUMP</code> package. For simplicity, exceptions from any of the API calls will not be trapped. However, Oracle recommends that you define exception handlers and call <code dir="ltr">GET_STATUS</code> to retrieve more detailed error information if a failure occurs. If you want to monitor the import, then query the <code dir="ltr">DBA_DATAPUMP_JOBS</code> data dictionary view at the import database.</p>
<pre dir="ltr">*/

SET SERVEROUTPUT ON
DECLARE
  h1                 NUMBER;         -- Data Pump job handle
  mult3_instantscn   NUMBER;         -- Variable to hold current source SCN
  job_state          VARCHAR2(30);   -- To keep track of job state
  js                 ku$_JobStatus;  -- The job status from GET_STATUS
  sts                ku$_Status;     -- The status object returned by GET_STATUS
  job_not_exist    exception;
  pragma exception_init(job_not_exist, -31626);
BEGIN
-- Create a (user-named) Data Pump job to do a schema-level import.
  h1 := DBMS_DATAPUMP.OPEN(
          operation   =&gt; &#39;IMPORT&#39;,
          job_mode    =&gt; &#39;SCHEMA&#39;,
          remote_link =&gt; &#39;MULT1.EXAMPLE.COM&#39;,
          job_name    =&gt; &#39;dp_mult3&#39;);
-- A metadata filter is used to specify the schema that owns the tables 
-- that will be imported.
  DBMS_DATAPUMP.METADATA_FILTER(
    handle    =&gt; h1,
    name      =&gt; &#39;SCHEMA_EXPR&#39;,
    value     =&gt; &#39;=&#39;&#39;HRMULT&#39;&#39;&#39;);
-- Get the current SCN of the source database, and set the FLASHBACK_SCN 
-- parameter to this value to ensure consistency between all of the 
-- objects in the schema.
  mult3_instantscn := DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER@mult1.example.com();
  DBMS_DATAPUMP.SET_PARAMETER(
    handle =&gt; h1,
    name   =&gt; &#39;FLASHBACK_SCN&#39;,
    value  =&gt; mult3_instantscn); 
-- Start the job. 
  DBMS_DATAPUMP.START_JOB(h1);
-- The import job should be running. In the following loop, the job
-- is monitored until it completes.
  job_state := &#39;UNDEFINED&#39;;
  BEGIN
    WHILE (job_state != &#39;COMPLETED&#39;) AND (job_state != &#39;STOPPED&#39;) LOOP
      sts:=DBMS_DATAPUMP.GET_STATUS(
             handle  =&gt; h1,
             mask    =&gt; DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR +
                        DBMS_DATAPUMP.KU$_STATUS_JOB_STATUS +
                        DBMS_DATAPUMP.KU$_STATUS_WIP,
             timeout =&gt; -1);
      js := sts.job_status;
      DBMS_LOCK.SLEEP(10);
      job_state := js.state;
    END LOOP;
  -- Gets an exception when job no longer exists
    EXCEPTION WHEN job_not_exist THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Data Pump job has completed&#39;);
      DBMS_OUTPUT.PUT_LINE(&#39;Instantiation SCN: &#39; ||mult3_instantscn);
  END;
END;
/

/*
</pre></dd>
<dd><a id="STREX1295"></a><a id="BCGJEJFI"></a></dd>
<dt class="seghead">Step 17&nbsp;&nbsp;&nbsp;Configure Latest Time Conflict Resolution at mult2.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">mult2.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@mult2.example.com

/*
</pre>
<p>Specify an update conflict handler for each table in the <code dir="ltr">hrmult</code> schema. For each table, designate the <code dir="ltr">time</code> column as the resolution column for a <code dir="ltr">MAXIMUM</code> conflict handler. When an update conflict occurs, such an update conflict handler applies the transaction with the latest (or greater) time and discards the transaction with the earlier (or lesser) time.</p>
<pre dir="ltr">*/
 
DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;country_name&#39;;
  cols(2) := &#39;region_id&#39;;
  cols(3) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.countries&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;department_name&#39;;
  cols(2) := &#39;manager_id&#39;;
  cols(3) := &#39;location_id&#39;;
  cols(4) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.departments&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1)  := &#39;first_name&#39;;
  cols(2)  := &#39;last_name&#39;;
  cols(3)  := &#39;email&#39;;
  cols(4)  := &#39;phone_number&#39;;
  cols(5)  := &#39;hire_date&#39;;
  cols(6)  := &#39;job_id&#39;;
  cols(7)  := &#39;salary&#39;;
  cols(8)  := &#39;commission_pct&#39;;
  cols(9)  := &#39;manager_id&#39;;
  cols(10) := &#39;department_id&#39;;
  cols(11) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.employees&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;job_title&#39;;
  cols(2) := &#39;min_salary&#39;;
  cols(3) := &#39;max_salary&#39;;
  cols(4) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.jobs&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;employee_id&#39;;
  cols(2) := &#39;start_date&#39;;
  cols(3) := &#39;end_date&#39;;
  cols(4) := &#39;job_id&#39;;
  cols(5) := &#39;department_id&#39;;
  cols(6) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.job_history&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;street_address&#39;;
  cols(2) := &#39;postal_code&#39;;
  cols(3) := &#39;city&#39;;
  cols(4) := &#39;state_province&#39;;
  cols(5) := &#39;country_id&#39;;
  cols(6) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.locations&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;region_name&#39;;
  cols(2) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.regions&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

/*
</pre></dd>
<dd><a id="STREX1296"></a><a id="BCGFCGJH"></a></dd>
<dt class="seghead">Step 18&nbsp;&nbsp;&nbsp;Start the Apply Processes at mult2.example.com</dt>
<dd>
<p>Start both of the apply processes at <code dir="ltr">mult2.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply_from_mult1&#39;);
END;
/

BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply_from_mult3&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1297"></a><a id="BCGGICEA"></a></dd>
<dt class="seghead">Step 19&nbsp;&nbsp;&nbsp;Configure Latest Time Conflict Resolution at mult3.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">mult3.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@mult3.example.com

/*
</pre>
<p>Specify an update conflict handler for each table in the <code dir="ltr">hrmult</code> schema. For each table, designate the <code dir="ltr">time</code> column as the resolution column for a <code dir="ltr">MAXIMUM</code> conflict handler. When an update conflict occurs, such an update conflict handler applies the transaction with the latest (or greater) time and discards the transaction with the earlier (or lesser) time.</p>
<pre dir="ltr">*/
 
DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;country_name&#39;;
  cols(2) := &#39;region_id&#39;;
  cols(3) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.countries&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;department_name&#39;;
  cols(2) := &#39;manager_id&#39;;
  cols(3) := &#39;location_id&#39;;
  cols(4) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.departments&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1)  := &#39;first_name&#39;;
  cols(2)  := &#39;last_name&#39;;
  cols(3)  := &#39;email&#39;;
  cols(4)  := &#39;phone_number&#39;;
  cols(5)  := &#39;hire_date&#39;;
  cols(6)  := &#39;job_id&#39;;
  cols(7)  := &#39;salary&#39;;
  cols(8)  := &#39;commission_pct&#39;;
  cols(9)  := &#39;manager_id&#39;;
  cols(10) := &#39;department_id&#39;;
  cols(11) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.employees&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;job_title&#39;;
  cols(2) := &#39;min_salary&#39;;
  cols(3) := &#39;max_salary&#39;;
  cols(4) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.jobs&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;employee_id&#39;;
  cols(2) := &#39;start_date&#39;;
  cols(3) := &#39;end_date&#39;;
  cols(4) := &#39;job_id&#39;;
  cols(5) := &#39;department_id&#39;;
  cols(6) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.job_history&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;street_address&#39;;
  cols(2) := &#39;postal_code&#39;;
  cols(3) := &#39;city&#39;;
  cols(4) := &#39;state_province&#39;;
  cols(5) := &#39;country_id&#39;;
  cols(6) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.locations&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := &#39;region_name&#39;;
  cols(2) := &#39;time&#39;;
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  &#39;hrmult.regions&#39;,
    method_name           =&gt;  &#39;MAXIMUM&#39;,
    resolution_column     =&gt;  &#39;time&#39;,
    column_list           =&gt;  cols);
END;
/

/*
</pre></dd>
<dd><a id="STREX1298"></a><a id="BCGBDIED"></a></dd>
<dt class="seghead">Step 20&nbsp;&nbsp;&nbsp;Start the Apply Processes at mult3.example.com</dt>
<dd>
<p>Start both of the apply processes at <code dir="ltr">mult3.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply_from_mult1&#39;);
END;
/

BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply_from_mult2&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1299"></a><a id="BCGDICEA"></a></dd>
<dt class="seghead">Step 21&nbsp;&nbsp;&nbsp;Start the Apply Processes at mult1.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">mult1.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@mult1.example.com

/*
</pre>
<p>Start both of the apply processes at <code dir="ltr">mult1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply_from_mult2&#39;);
END;
/

BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply_from_mult3&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1300"></a><a id="BCGBJGIG"></a></dd>
<dt class="seghead">Step 22&nbsp;&nbsp;&nbsp;Start the Capture Process at mult1.example.com</dt>
<dd>
<p>Start the capture process at <code dir="ltr">mult1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_CAPTURE_ADM.START_CAPTURE(
    capture_name  =&gt; &#39;capture_hrmult&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1301"></a><a id="BCGGJADB"></a></dd>
<dt class="seghead">Step 23&nbsp;&nbsp;&nbsp;Start the Capture Process at mult2.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">mult2.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@mult2.example.com

/*
</pre>
<p>Start the capture process at <code dir="ltr">mult2.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_CAPTURE_ADM.START_CAPTURE(
    capture_name  =&gt; &#39;capture_hrmult&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1302"></a><a id="BCGJBJDB"></a></dd>
<dt class="seghead">Step 24&nbsp;&nbsp;&nbsp;Start the Capture Process at mult3.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">mult3.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@mult3.example.com

/*
</pre>
<p>Start the capture process at <code dir="ltr">mult3.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_CAPTURE_ADM.START_CAPTURE(
    capture_name  =&gt; &#39;capture_hrmult&#39;);
END;
/

SET ECHO OFF

/*
</pre></dd>
<dd><a id="STREX1303"></a><a id="BCGDICFE"></a></dd>
<dt class="seghead">Step 25&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">streams_mult.out</code> spool file to ensure that all actions finished successfully after this script is completed.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1083300"></a>/*************************** END OF SCRIPT ******************************/
</pre></dd>
</dl>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP058" href="../STREP/config_add.htm#STREP058"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for general instructions that explain how to add database objects or databases to the replication environment</div>
</div>
<!-- class="sect1" -->
<a id="BCGJHBAF"></a>
<div id="STREX567" class="sect1">
<h2 class="sect1">Make DML and DDL Changes to Tables in the hrmult Schema</h2>
<p>You can make DML and DDL changes to the tables in the <code dir="ltr">hrmult</code> schema at any of the databases in the environment. These changes will be replicated to the other databases in the environment, and you can run queries to view the replicated data.</p>
<p>For example, complete the following steps to make DML changes to the <code dir="ltr">hrmult.employees</code> table at <code dir="ltr">mult1.example.com</code> and <code dir="ltr">mult2.example.com</code>. To see the update conflict handler you configured earlier resolve an update conflict, you can make a change to the same row in these two databases and commit the changes at nearly the same time. You can query the changed row at each database in the environment to confirm that the changes were captured, propagated, and applied correctly.</p>
<p>You can also make a DDL change to the <code dir="ltr">hrmult.jobs</code> table at <code dir="ltr">mult3.example.com</code> and then confirm that the change was captured at <code dir="ltr">mult3.example.com</code>, propagated to the other databases in the environment, and applied at these databases.</p>
<a id="i1083307"></a>
<dl>
<dd><a id="STREX1304"></a><a id="BCGHAAGF"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Make a DML Change to hrmult.employees at mult.example.com and mult2.example.com</dt>
<dd>
<p>Make the following changes. To simulate a conflict, try to commit them at nearly the same time, but commit the change at <code dir="ltr">mult2.example.com</code> after you commit the change at <code dir="ltr">mult1.example.com</code>. The update conflict handler at each database will resolve the conflict.</p>
<pre dir="ltr">CONNECT hrmult@mult1.example.com
Enter password: <span class="italic">password</span>

UPDATE hrmult.employees SET salary=9000 WHERE employee_id=206;
COMMIT;

CONNECT hrmult@mult2.example.com
Enter password: <span class="italic">password</span>

UPDATE hrmult.employees SET salary=10000 WHERE employee_id=206;
COMMIT;
</pre></dd>
<dd><a id="STREX1305"></a><a id="BCGBDFFH"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Alter the hrmult.jobs Table at mult3.example.com</dt>
<dd>
<p>Alter the <code dir="ltr">hrmult.jobs</code> table by renaming the <code dir="ltr">job_title</code> column to <code dir="ltr">job_name</code>:</p>
<pre dir="ltr">CONNECT hrmult@mult3.example.com
Enter password: <span class="italic">password</span>

ALTER TABLE hrmult.jobs RENAME COLUMN job_title TO job_name;
</pre></dd>
<dd><a id="STREX1306"></a><a id="sthref66"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Query the hrmult.employees Table at Each Database</dt>
<dd>
<p>After some time passes to allow for capture, propagation, and apply of the changes performed in Step <a href="#BCGHAAGF">1</a>, run the following query to confirm that the <code dir="ltr">UPDATE</code> changes have been applied at each database.</p>
<pre dir="ltr">CONNECT hrmult@mult1.example.com
Enter password: <span class="italic">password</span>

SELECT salary FROM hrmult.employees WHERE employee_id=206;

CONNECT hrmult@mult2.example.com
Enter password: <span class="italic">password</span>

SELECT salary FROM hrmult.employees WHERE employee_id=206;

CONNECT hrmult@mult3.example.com
Enter password: <span class="italic">password</span>

SELECT salary FROM hrmult.employees WHERE employee_id=206;
</pre>
<p>All of the queries should show <code dir="ltr">10000</code> for the value of the salary. The update conflict handler at each database has resolved the conflict by using the latest change to the row. In this case, the latest change to the row was made at the <code dir="ltr">mult2.example.com</code> database in Step <a href="#BCGHAAGF">1</a>.</p>
</dd>
<dd><a id="STREX1307"></a><a id="sthref67"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Describe the hrmult.jobs Table at Each Database</dt>
<dd>
<p>After some time passes to allow for capture, propagation, and apply of the change performed in Step <a href="#BCGBDFFH">2</a>, describe the <code dir="ltr">hrmult.jobs</code> table at each database to confirm that the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> change was propagated and applied correctly.</p>
<pre dir="ltr">CONNECT hrmult@mult1.example.com
Enter password: <span class="italic">password</span>

DESC hrmult.jobs

CONNECT hrmult@mult2.example.com
Enter password: <span class="italic">password</span>

DESC hrmult.jobs

CONNECT hrmult@mult3.example.com
Enter password: <span class="italic">password</span>

DESC hrmult.jobs
</pre>
<p>Each database should show <code dir="ltr">job_name</code> as the second column in the table.</p>
</dd>
</dl>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4743">
<tr>
<td class="cellalignment4750">
<table class="cellalignment4748">
<tr>
<td class="cellalignment4747"><a href="repsingdemo.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4747"><a href="capappdemo.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2008, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4752">
<table class="cellalignment4746">
<tr>
<td class="cellalignment4747"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4747"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4747"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4747"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4747"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4747"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>