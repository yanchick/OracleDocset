<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-104369"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Rule-Based%20Application%20Example"></a><title>Rule-Based Application Example</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1042"/>
<meta name="dcterms.created" content="2015-02-05T11:48:35Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Streams Extended Examples"/>
<meta name="dcterms.identifier" content="E17912-10"/>
<meta name="dcterms.isVersionOf" content="STREX"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2008, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="loblcrdemo.htm" title="Previous" type="text/html"/>
<link rel="Next" href="index.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17912-10.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/11</span> <!-- End Header -->
<div id="STREX017" class="chapter"><a id="g1139361"></a> <a id="CEGEEBGC"></a>
<h1 class="chapter"><span class="secnum">6</span> Rule-Based Application Example</h1>
<p><a id="sthref97"></a><a id="sthref98"></a><a id="sthref99"></a>This chapter illustrates a rule-based application that uses the Oracle rules engine.</p>
<p>The examples in this chapter are independent of Oracle Streams. That is, no Oracle Streams capture processes, propagations, apply processes, or messaging clients are clients of the rules engine in these examples, and no queues are used.</p>
<p>The following topics describe configuring examples of rules-based applications:</p>
<ul>
<li>
<p><a href="#i1006139">Overview of the Rule-Based Application</a></p>
</li>
<li>
<p><a href="#CEGFDFBI">Using Rules on Nontable Data Stored in Explicit Variables</a></p>
</li>
<li>
<p><a href="#CEGEFJEJ">Using Rules on Data in Explicit Variables with Iterative Results</a></p>
</li>
<li>
<p><a href="#i1113054">Using Partial Evaluation of Rules on Data in Explicit Variables</a></p>
</li>
<li>
<p><a href="#i1113395">Using Rules on Data Stored in a Table</a></p>
</li>
<li>
<p><a href="#i1113697">Using Rules on Both Explicit Variables and Table Data</a></p>
</li>
<li>
<p><a href="#i1114031">Using Rules on Implicit Variables and Table Data</a></p>
</li>
<li>
<p><a href="#i1114392">Using Event Contexts and Implicit Variables with Rules</a></p>
</li>
<li>
<p><a href="#i1114762">Dispatching Problems and Checking Results for the Table Examples</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS" href="../STRMS/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a></div>
<a id="i1006139"></a>
<div id="STREX1156" class="sect1">
<h2 class="sect1">Overview of the Rule-Based Application</h2>
<p>Each example in this chapter creates a rule-based application that handles customer problems. The application uses rules to determine actions that must be completed based on the problem priority when a new problem is reported. For example, the application assigns each problem to a particular company center based on the problem priority.</p>
<p>The application enforces these rules using the rules engine. An evaluation context named <code dir="ltr">evalctx</code> is created to define the information surrounding a support problem. Rules are created based on the requirements described previously, and they are added to a rule set named <code dir="ltr">rs</code>.</p>
<p>The task of assigning problems is done by a user-defined procedure named <code dir="ltr">problem_dispatch</code>, which calls the rules engine to evaluate rules in the rule set <code dir="ltr">rs</code> and then takes appropriate action based on the rules that evaluate to&nbsp;<code dir="ltr">TRUE</code>.</p>
</div>
<!-- class="sect1" -->
<a id="CEGFDFBI"></a>
<div id="STREX1157" class="sect1">
<h2 class="sect1">Using Rules on Nontable Data Stored in Explicit Variables<a id="sthref100"></a></h2>
<p>This example illustrates how to use rules to evaluate data stored in explicit variables. This example handles customer problems based on priority and uses the following rules for handling customer problems:</p>
<ul>
<li>
<p>Assign all problems with priority greater than 2 to the San Jose Center.</p>
</li>
<li>
<p>Assign all problems with priority less than or equal to 2 to the New York Center.</p>
</li>
<li>
<p>Send an alert to the vice president of support for a problem with priority equal&nbsp;to&nbsp;1.</p>
</li>
</ul>
<p>The evaluation context contains only one explicit variable named <code dir="ltr">priority</code>, which refers to the priority of the problem being dispatched. The value for this variable is passed to <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure by the <code dir="ltr">problem_dispatch</code> procedure.</p>
<p>Complete the following steps:</p>
<ol>
<li>
<p><a href="#i1112638">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CEGHHFAA">Create the support User</a></p>
</li>
<li>
<p><a href="#CEGEFJFD">Grant the support User the Necessary System Privileges on Rules</a></p>
</li>
<li>
<p><a href="#CEGEJBDH">Create the evalctx Evaluation Context</a></p>
</li>
<li>
<p><a href="#CEGHHDGB">Create the Rules that Correspond to Problem Priority</a></p>
</li>
<li>
<p><a href="#CEGBDGJJ">Create the rs Rule Set</a></p>
</li>
<li>
<p><a href="#CEGECBAJ">Add the Rules to the Rule Set</a></p>
</li>
<li>
<p><a href="#CEGEHJAF">Query the Data Dictionary</a></p>
</li>
<li>
<p><a href="#CEGCGJGB">Create the problem_dispatch PL/SQL Procedure</a></p>
</li>
<li>
<p><a href="#CEGFICAG">Dispatch Sample Problems</a></p>
</li>
<li>
<p><a href="#CEGHHEAC">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<a id="i1112638"></a>
<dl>
<dd><a id="STREX1339"></a><a id="CEGICGEA"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL rules_stored_variables.out

/*
</pre></dd>
<dd><a id="STREX1340"></a><a id="CEGHHFAA"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create the support User</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT SYSTEM

ACCEPT password PROMPT &#39;Enter password for user: &#39; HIDE

GRANT ALTER SESSION, CREATE CLUSTER, CREATE DATABASE LINK, CREATE SEQUENCE,
  CREATE SESSION, CREATE SYNONYM, CREATE TABLE, CREATE VIEW, CREATE INDEXTYPE, 
  CREATE OPERATOR, CREATE PROCEDURE, CREATE TRIGGER, CREATE TYPE
TO support IDENTIFIED BY &amp;password;

/*
</pre></dd>
<dd><a id="STREX1341"></a><a id="CEGEFJFD"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Grant the support User the Necessary System Privileges on Rules</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_SET_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_OBJ,
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1342"></a><a id="CEGEJBDH"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create the evalctx Evaluation Context<a class="dashingAutolink" name="autolink-104299"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref101"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT support

SET FEEDBACK 1
SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 100
SET SERVEROUTPUT ON
DECLARE
  vt SYS.RE$VARIABLE_TYPE_LIST;
BEGIN
  vt := SYS.RE$VARIABLE_TYPE_LIST(
    SYS.RE$VARIABLE_TYPE(&#39;priority&#39;, &#39;NUMBER&#39;, NULL, NULL));
  DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT(
    evaluation_context_name    =&gt; &#39;evalctx&#39;,
    variable_types             =&gt; vt,
    evaluation_context_comment =&gt; &#39;support problem definition&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1343"></a><a id="CEGHHDGB"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create the Rules that Correspond to Problem Priority<a class="dashingAutolink" name="autolink-104300"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref102"></a><a class="dashingAutolink" name="autolink-104301"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref103"></a></dt>
<dd>
<p>The following code creates one action context for each rule, and one name-value pair in each action context.</p>
<pre dir="ltr">*/

DECLARE
  ac  SYS.RE$NV_LIST;
BEGIN
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;San Jose&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r1&#39;,
    condition      =&gt; &#39;:priority &gt; 2&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;Low priority problems&#39;);
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;New York&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r2&#39;,
    condition      =&gt; &#39;:priority &lt;= 2&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;High priority problems&#39;);
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;ALERT&#39;, ANYDATA.CONVERTVARCHAR2(&#39;John Doe&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r3&#39;,
    condition      =&gt; &#39;:priority = 1&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;Urgent problems&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1344"></a><a id="CEGBDGJJ"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Create the rs Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name      =&gt; &#39;rs&#39;,
    evaluation_context =&gt; &#39;evalctx&#39;,
    rule_set_comment   =&gt; &#39;support rules&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1345"></a><a id="CEGECBAJ"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Add the Rules to the Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r1&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r2&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r3&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1346"></a><a id="CEGEHJAF"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Query the Data Dictionary</dt>
<dd>
<p>At this point, you can view the evaluation context, rules, and rule set you created in the previous steps.</p>
<pre dir="ltr">*/

COLUMN EVALUATION_CONTEXT_NAME HEADING &#39;Eval Context Name&#39; FORMAT A30
COLUMN EVALUATION_CONTEXT_COMMENT HEADING &#39;Eval Context Comment&#39; FORMAT A40

SELECT EVALUATION_CONTEXT_NAME, EVALUATION_CONTEXT_COMMENT
  FROM USER_EVALUATION_CONTEXTS
  ORDER BY EVALUATION_CONTEXT_NAME;

SET LONGCHUNKSIZE 4000
SET LONG 4000
COLUMN RULE_NAME HEADING &#39;Rule|Name&#39; FORMAT A5
COLUMN RULE_CONDITION HEADING &#39;Rule Condition&#39; FORMAT A35
COLUMN ACTION_CONTEXT_NAME HEADING &#39;Action|Context|Name&#39; FORMAT A10
COLUMN ACTION_CONTEXT_VALUE HEADING &#39;Action|Context|Value&#39; FORMAT A10

SELECT RULE_NAME, 
       RULE_CONDITION,
       AC.NVN_NAME ACTION_CONTEXT_NAME, 
       AC.NVN_VALUE.ACCESSVARCHAR2() ACTION_CONTEXT_VALUE
  FROM USER_RULES R, TABLE(R.RULE_ACTION_CONTEXT.ACTX_LIST) AC
  ORDER BY RULE_NAME;

COLUMN RULE_SET_NAME HEADING &#39;Rule Set Name&#39; FORMAT A20
COLUMN RULE_SET_EVAL_CONTEXT_OWNER HEADING &#39;Eval Context|Owner&#39; FORMAT A12
COLUMN RULE_SET_EVAL_CONTEXT_NAME HEADING &#39;Eval Context Name&#39; FORMAT A25
COLUMN RULE_SET_COMMENT HEADING &#39;Rule Set|Comment&#39; FORMAT A15

SELECT RULE_SET_NAME, 
       RULE_SET_EVAL_CONTEXT_OWNER,
       RULE_SET_EVAL_CONTEXT_NAME,
       RULE_SET_COMMENT
  FROM USER_RULE_SETS
  ORDER BY RULE_SET_NAME;

/*
</pre></dd>
<dd><a id="STREX1347"></a><a id="CEGCGJGB"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Create the problem_dispatch PL/SQL Procedure<a class="dashingAutolink" name="autolink-104302"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref104"></a><a class="dashingAutolink" name="autolink-104303"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref105"></a><a class="dashingAutolink" name="autolink-104304"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref106"></a><a class="dashingAutolink" name="autolink-104305"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref107"></a><a class="dashingAutolink" name="autolink-104306"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref108"></a><a class="dashingAutolink" name="autolink-104307"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref109"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE problem_dispatch (priority NUMBER) 
IS
    vv        SYS.RE$VARIABLE_VALUE;
    vvl       SYS.RE$VARIABLE_VALUE_LIST;
    truehits  SYS.RE$RULE_HIT_LIST;
    maybehits SYS.RE$RULE_HIT_LIST;
    ac        SYS.RE$NV_LIST;
    namearray SYS.RE$NAME_ARRAY;
    name      VARCHAR2(30);
    cval      VARCHAR2(100);
    rnum      INTEGER;
    i         INTEGER;
    status    PLS_INTEGER;
BEGIN
  vv  := SYS.RE$VARIABLE_VALUE(&#39;priority&#39;,
                               ANYDATA.CONVERTNUMBER(priority));
  vvl := SYS.RE$VARIABLE_VALUE_LIST(vv);
  truehits := SYS.RE$RULE_HIT_LIST();
  maybehits := SYS.RE$RULE_HIT_LIST();
  DBMS_RULE.EVALUATE(
      rule_set_name        =&gt; &#39;support.rs&#39;,
      evaluation_context   =&gt; &#39;evalctx&#39;,
      variable_values      =&gt; vvl,
      true_rules           =&gt; truehits,
      maybe_rules          =&gt; maybehits);
  FOR rnum IN 1..truehits.COUNT LOOP
    DBMS_OUTPUT.PUT_LINE(&#39;Using rule &#39;|| truehits(rnum).rule_name);
    ac := truehits(rnum).rule_action_context;
    namearray := ac.GET_ALL_NAMES;
      FOR i IN 1..namearray.count loop
        name := namearray(i);
        status := ac.GET_VALUE(name).GETVARCHAR2(cval);
        IF (name = &#39;CENTER&#39;) then
          DBMS_OUTPUT.PUT_LINE(&#39;Assigning problem to &#39; || cval);
        ELSIF (name = &#39;ALERT&#39;) THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Sending alert to: &#39;|| cval);
        END IF;
      END LOOP;
  END LOOP;
END;
/

/*
</pre></dd>
<dd><a id="STREX1348"></a><a id="CEGFICAG"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Dispatch Sample Problems</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">EXECUTE problem_dispatch(1);
EXECUTE problem_dispatch(2);
EXECUTE problem_dispatch(3);
EXECUTE problem_dispatch(5);

/*
</pre></dd>
<dd><a id="STREX1349"></a><a id="CEGHHEAC"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">rules_stored_variables.out</code> spool file to ensure that all actions completed successfully after this script completes.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1112874"></a>/*************************** END OF SCRIPT ******************************/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="CEGEFJEJ"></a>
<div id="STREX1158" class="sect1">
<h2 class="sect1">Using Rules on Data in Explicit Variables with Iterative Results<a id="sthref110"></a></h2>
<p>This example is the same as the previous example <a href="#CEGFDFBI">&#34;Using Rules on Nontable Data Stored in Explicit Variables&#34;</a>, except that this example returns evaluation results iteratively instead of all at once.</p>
<p>Complete the following steps:</p>
<ol>
<li>
<p><a href="#i1112917">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CEGIJCCC">Ensure That You Have Completed the Preliminary Steps</a></p>
</li>
<li>
<p><a href="#CEGGIAEG">Replace the problem_dispatch PL/SQL Procedure</a></p>
</li>
<li>
<p><a href="#CEGEEHGG">Dispatch Sample Problems</a></p>
</li>
<li>
<p><a href="#CEGHGFFI">Clean Up the Environment (Optional)</a></p>
</li>
<li>
<p><a href="#CEGHCIED">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<a id="i1112917"></a>
<dl>
<dd><a id="STREX1350"></a><a id="sthref111"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL rules_stored_variables_iterative.out

/*
</pre></dd>
<dd><a id="STREX1351"></a><a id="CEGIJCCC"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Ensure That You Have Completed the Preliminary Steps</dt>
<dd>
<p>Ensure that you have completed Steps <a href="#CEGICGEA">1</a> to <a href="#CEGEHJAF">8</a> in the <a href="#CEGFDFBI">&#34;Using Rules on Nontable Data Stored in Explicit Variables&#34;</a>. If you have not completed these steps, then complete them before you continue.</p>
<pre dir="ltr">*/ 

PAUSE Press &lt;RETURN&gt; to continue when the preliminary steps have been completed.

/*
</pre></dd>
<dd><a id="STREX1352"></a><a id="CEGGIAEG"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Replace the problem_dispatch PL/SQL Procedure<a class="dashingAutolink" name="autolink-104308"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref112"></a><a class="dashingAutolink" name="autolink-104309"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref113"></a><a class="dashingAutolink" name="autolink-104310"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref114"></a><a class="dashingAutolink" name="autolink-104311"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref115"></a><a class="dashingAutolink" name="autolink-104312"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref116"></a><a class="dashingAutolink" name="autolink-104313"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref117"></a><a class="dashingAutolink" name="autolink-104314"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref118"></a></dt>
<dd>
<p>Replace the <code dir="ltr">problem_dispatch</code> procedure created in Step <a href="#CEGCGJGB">9</a> with the procedure in this step. The difference between the two procedures is that the procedure created in Step <a href="#CEGCGJGB">9</a> returns all evaluation results at once while the procedure in this step returns evaluation results iteratively.</p>
<pre dir="ltr">*/

CONNECT support

SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE problem_dispatch (priority NUMBER) 
IS
    vv          SYS.RE$VARIABLE_VALUE;
    vvl         SYS.RE$VARIABLE_VALUE_LIST;
    truehits    BINARY_INTEGER;
    maybehits   BINARY_INTEGER;
    hit         SYS.RE$RULE_HIT;
    ac          SYS.RE$NV_LIST;
    namearray   SYS.RE$NAME_ARRAY;
    name        VARCHAR2(30);
    cval        VARCHAR2(100);
    i           INTEGER;
    status      PLS_INTEGER;
    iter_closed EXCEPTION;
    pragma exception_init(iter_closed, -25453);
BEGIN
  vv  := SYS.RE$VARIABLE_VALUE(&#39;priority&#39;,
                               ANYDATA.CONVERTNUMBER(priority));
  vvl := SYS.RE$VARIABLE_VALUE_LIST(vv);
  DBMS_RULE.EVALUATE(
      rule_set_name        =&gt; &#39;support.rs&#39;,
      evaluation_context   =&gt; &#39;evalctx&#39;,
      variable_values      =&gt; vvl,
      true_rules_iterator  =&gt; truehits,
      maybe_rules_iterator =&gt; maybehits);
  LOOP
    hit := DBMS_RULE.GET_NEXT_HIT(truehits);
    EXIT WHEN hit IS NULL;
    DBMS_OUTPUT.PUT_LINE(&#39;Using rule &#39;|| hit.rule_name);
    ac := hit.rule_action_context;
    namearray := ac.GET_ALL_NAMES;
      FOR i IN 1..namearray.COUNT LOOP
        name := namearray(i);
        status := ac.GET_VALUE(name).GETVARCHAR2(cval);
        IF (name = &#39;CENTER&#39;) then
          DBMS_OUTPUT.PUT_LINE(&#39;Assigning problem to &#39; || cval);
        ELSIF (name = &#39;ALERT&#39;) THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Sending alert to: &#39;|| cval);
        END IF;
      END LOOP;
  END LOOP;
  -- Close iterators
  BEGIN
    DBMS_RULE.CLOSE_ITERATOR(truehits);
  EXCEPTION
    WHEN iter_closed THEN
      NULL;
  END;
  BEGIN
    DBMS_RULE.CLOSE_ITERATOR(maybehits);
  EXCEPTION
    WHEN iter_closed THEN
      NULL;
  END;
END;
/

/*
</pre></dd>
<dd><a id="STREX1353"></a><a id="CEGEEHGG"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Dispatch Sample Problems</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">EXECUTE problem_dispatch(1);
EXECUTE problem_dispatch(2);
EXECUTE problem_dispatch(3);
EXECUTE problem_dispatch(5);

/*
</pre></dd>
<dd><a id="STREX1354"></a><a id="CEGHGFFI"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Clean Up the Environment (Optional)</dt>
<dd>
<p>You can clean up the sample environment by dropping the <code dir="ltr">support</code> user.</p>
<pre dir="ltr">*/

CONNECT SYSTEM

DROP USER support CASCADE;

/*
</pre></dd>
<dd><a id="STREX1355"></a><a id="CEGHCIED"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">rules_stored_variables_iterative.out</code> spool file to ensure that all actions completed successfully after this script completes.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1113052"></a>/*************************** END OF SCRIPT ******************************/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i1113054"></a>
<div id="STREX1159" class="sect1">
<h2 class="sect1">Using Partial Evaluation of Rules on Data in Explicit Variables<a id="sthref119"></a><a id="sthref120"></a></h2>
<p>This example illustrates how to use partial evaluation when an event causes rules to evaluate to <code dir="ltr">MAYBE</code> instead of <code dir="ltr">TRUE</code> or <code dir="ltr">FALSE</code>. This example handles customer problems based on priority and problem type, and uses the following rules for handling customer problems:</p>
<ul>
<li>
<p>Assign all problems whose problem type is <code dir="ltr">HARDWARE</code> to the San Jose Center.</p>
</li>
<li>
<p>Assign all problems whose problem type is <code dir="ltr">SOFTWARE</code> to the New York Center.</p>
</li>
<li>
<p>Assign all problems whose problem type is <code dir="ltr">NULL</code> (unknown) to the Texas Center.</p>
</li>
<li>
<p>Send an alert to the vice president of support for a problem with priority equal&nbsp;to&nbsp;1.</p>
</li>
</ul>
<p>Problems whose problem type is <code dir="ltr">NULL</code> evaluate to <code dir="ltr">MAYBE</code>. This example uses partial evaluation to take an action when <code dir="ltr">MAYBE</code> rules are returned to the rules engine client. In this case, the action is to assign the problem to the Texas Center.</p>
<p>The evaluation context contains an explicit variable named <code dir="ltr">priority</code>, which refers to the priority of the problem being dispatched. The evaluation context also contains an explicit variable named <code dir="ltr">problem_type</code>, which refers to the type of problem being dispatched (either <code dir="ltr">HARDWARE</code> or <code dir="ltr">SOFTWARE</code>). The values for these variables are passed to <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure by the <code dir="ltr">problem_dispatch</code> procedure.</p>
<p>Complete the following steps:</p>
<ol>
<li>
<p><a href="#i1113123">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CEGEJGAH">Create the support User</a></p>
</li>
<li>
<p><a href="#CEGJIBHJ">Grant the support User the Necessary System Privileges on Rules</a></p>
</li>
<li>
<p><a href="#CEGGHAAG">Create the evalctx Evaluation Context</a></p>
</li>
<li>
<p><a href="#CEGHJFIC">Create the Rules that Correspond to Problem Priority</a></p>
</li>
<li>
<p><a href="#CEGBEEEA">Create the rs Rule Set</a></p>
</li>
<li>
<p><a href="#CEGJHHCI">Add the Rules to the Rule Set</a></p>
</li>
<li>
<p><a href="#CEGBJBGB">Query the Data Dictionary</a></p>
</li>
<li>
<p><a href="#CEGFJHFC">Create the problem_dispatch PL/SQL Procedure</a></p>
</li>
<li>
<p><a href="#CEGDAEDC">Dispatch Sample Problems</a></p>
</li>
<li>
<p><a href="#CEGGBFAJ">Clean Up the Environment (Optional)</a></p>
</li>
<li>
<p><a href="#CEGBCCCC">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<a id="i1113123"></a>
<dl>
<dd><a id="STREX1356"></a><a id="sthref121"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL rules_stored_variables_partial.out

/*
</pre></dd>
<dd><a id="STREX1357"></a><a id="CEGEJGAH"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create the support User</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT SYSTEM

ACCEPT password PROMPT &#39;Enter password for user: &#39; HIDE

GRANT ALTER SESSION, CREATE CLUSTER, CREATE DATABASE LINK, CREATE SEQUENCE,
  CREATE SESSION, CREATE SYNONYM, CREATE TABLE, CREATE VIEW, CREATE INDEXTYPE, 
  CREATE OPERATOR, CREATE PROCEDURE, CREATE TRIGGER, CREATE TYPE
TO support IDENTIFIED BY &amp;password;

/*
</pre></dd>
<dd><a id="STREX1358"></a><a id="CEGJIBHJ"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Grant the support User the Necessary System Privileges on Rules</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_SET_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_OBJ,
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1359"></a><a id="CEGGHAAG"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create the evalctx Evaluation Context<a class="dashingAutolink" name="autolink-104315"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref122"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT support

SET FEEDBACK 1
SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 100
SET SERVEROUTPUT ON
DECLARE
  vt  SYS.RE$VARIABLE_TYPE_LIST;
BEGIN
  vt := SYS.RE$VARIABLE_TYPE_LIST(
        SYS.RE$VARIABLE_TYPE(&#39;priority&#39;, &#39;NUMBER&#39;, NULL, NULL),
        SYS.RE$VARIABLE_TYPE(&#39;problem_type&#39;, &#39;VARCHAR2(30)&#39;, NULL, NULL));
  DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT(
    evaluation_context_name    =&gt; &#39;evalctx&#39;,
    variable_types             =&gt; vt,
    evaluation_context_comment =&gt; &#39;support problem definition&#39;);
end;
/

/*
</pre></dd>
<dd><a id="STREX1360"></a><a id="CEGHJFIC"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create the Rules that Correspond to Problem Priority<a class="dashingAutolink" name="autolink-104316"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref123"></a><a class="dashingAutolink" name="autolink-104317"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref124"></a></dt>
<dd>
<p>The following code creates one action context for each rule, and one name-value pair in each action context.</p>
<pre dir="ltr">*/

DECLARE
  ac  SYS.RE$NV_LIST;
begin
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;ALERT&#39;, ANYDATA.CONVERTVARCHAR2(&#39;John Doe&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r1&#39;,
    condition      =&gt; &#39;:priority = 1&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;Urgent problems&#39;);
  ac := sys.re$nv_list(NULL);
  ac.ADD_PAIR(&#39;TRUE CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;San Jose&#39;));
  ac.ADD_PAIR(&#39;MAYBE CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;Texas&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name       =&gt; &#39;r2&#39;,
    condition       =&gt; &#39;:problem_type = &#39;&#39;HARDWARE&#39;&#39;&#39;,
    action_context  =&gt; ac,
    rule_comment    =&gt; &#39;Hardware problems&#39;);
  ac := sys.re$nv_list(NULL);
  ac.ADD_PAIR(&#39;TRUE CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;New York&#39;));
  ac.ADD_PAIR(&#39;MAYBE CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;Texas&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name       =&gt; &#39;r3&#39;,
    condition       =&gt; &#39;:problem_type = &#39;&#39;SOFTWARE&#39;&#39;&#39;,
    action_context  =&gt; ac,
    rule_comment    =&gt; &#39;Software problems&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1361"></a><a id="CEGBEEEA"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Create the rs Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name      =&gt; &#39;rs&#39;,
    evaluation_context =&gt; &#39;evalctx&#39;,
    rule_set_comment   =&gt; &#39;support rules&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1362"></a><a id="CEGJHHCI"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Add the Rules to the Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r1&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r2&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r3&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1363"></a><a id="CEGBJBGB"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Query the Data Dictionary</dt>
<dd>
<p>At this point, you can view the evaluation context, rules, and rule set you created in the previous steps.</p>
<pre dir="ltr">*/

COLUMN EVALUATION_CONTEXT_NAME HEADING &#39;Eval Context Name&#39; FORMAT A30
COLUMN EVALUATION_CONTEXT_COMMENT HEADING &#39;Eval Context Comment&#39; FORMAT A40

SELECT EVALUATION_CONTEXT_NAME, EVALUATION_CONTEXT_COMMENT
  FROM USER_EVALUATION_CONTEXTS
  ORDER BY EVALUATION_CONTEXT_NAME;

SET LONGCHUNKSIZE 4000
SET LONG 4000
COLUMN RULE_NAME HEADING &#39;Rule|Name&#39; FORMAT A5
COLUMN RULE_CONDITION HEADING &#39;Rule Condition&#39; FORMAT A35
COLUMN ACTION_CONTEXT_NAME HEADING &#39;Action|Context|Name&#39; FORMAT A10
COLUMN ACTION_CONTEXT_VALUE HEADING &#39;Action|Context|Value&#39; FORMAT A10

SELECT RULE_NAME, 
       RULE_CONDITION,
       AC.NVN_NAME ACTION_CONTEXT_NAME, 
       AC.NVN_VALUE.ACCESSVARCHAR2() ACTION_CONTEXT_VALUE
  FROM USER_RULES R, TABLE(R.RULE_ACTION_CONTEXT.ACTX_LIST) AC
  ORDER BY RULE_NAME;

COLUMN RULE_SET_NAME HEADING &#39;Rule Set Name&#39; FORMAT A20
COLUMN RULE_SET_EVAL_CONTEXT_OWNER HEADING &#39;Eval Context|Owner&#39; FORMAT A12
COLUMN RULE_SET_EVAL_CONTEXT_NAME HEADING &#39;Eval Context Name&#39; FORMAT A25
COLUMN RULE_SET_COMMENT HEADING &#39;Rule Set|Comment&#39; FORMAT A15

SELECT RULE_SET_NAME, 
       RULE_SET_EVAL_CONTEXT_OWNER,
       RULE_SET_EVAL_CONTEXT_NAME,
       RULE_SET_COMMENT
  FROM USER_RULE_SETS
  ORDER BY RULE_SET_NAME;

/*
</pre></dd>
<dd><a id="STREX1364"></a><a id="CEGFJHFC"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Create the problem_dispatch PL/SQL Procedure<a class="dashingAutolink" name="autolink-104318"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref125"></a><a class="dashingAutolink" name="autolink-104319"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref126"></a><a class="dashingAutolink" name="autolink-104320"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref127"></a><a class="dashingAutolink" name="autolink-104321"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref128"></a><a class="dashingAutolink" name="autolink-104322"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref129"></a><a class="dashingAutolink" name="autolink-104323"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref130"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE problem_dispatch (priority     NUMBER,
                                              problem_type VARCHAR2 := NULL) 
IS
    vvl       SYS.RE$VARIABLE_VALUE_LIST;
    truehits  SYS.RE$RULE_HIT_LIST;
    maybehits SYS.RE$RULE_HIT_LIST;
    ac        SYS.RE$NV_LIST;
    namearray SYS.RE$NAME_ARRAY;
    name      VARCHAR2(30);
    cval      VARCHAR2(100);
    rnum      INTEGER;
    i         INTEGER;
    status    PLS_INTEGER;
BEGIN
  IF (problem_type IS NULL) THEN 
    vvl  := SYS.RE$VARIABLE_VALUE_LIST(
            SYS.RE$VARIABLE_VALUE(&#39;priority&#39;,
                                  ANYDATA.CONVERTNUMBER(priority)));
  ELSE
    vvl  := SYS.RE$VARIABLE_VALUE_LIST(
            SYS.RE$VARIABLE_VALUE(&#39;priority&#39;,
                                  ANYDATA.CONVERTNUMBER(priority)),
            SYS.RE$VARIABLE_VALUE(&#39;problem_type&#39;,
                                  ANYDATA.CONVERTVARCHAR2(problem_type)));
  END IF;
  truehits := SYS.RE$RULE_HIT_LIST();
  maybehits := SYS.RE$RULE_HIT_LIST();
  DBMS_RULE.EVALUATE(
      rule_set_name        =&gt; &#39;support.rs&#39;,
      evaluation_context   =&gt; &#39;evalctx&#39;,
      variable_values      =&gt; vvl,
      true_rules           =&gt; truehits,
      maybe_rules          =&gt; maybehits);
  FOR rnum IN 1..truehits.COUNT LOOP
    DBMS_OUTPUT.PUT_LINE(&#39;Using rule &#39;|| truehits(rnum).rule_name);
    ac := truehits(rnum).rule_action_context;
    namearray := ac.GET_ALL_NAMES;
      FOR i IN 1..namearray.count LOOP
        name := namearray(i);
        status := ac.GET_VALUE(name).GETVARCHAR2(cval);
        IF (name = &#39;TRUE CENTER&#39;) then
          DBMS_OUTPUT.PUT_LINE(&#39;Assigning problem to &#39; || cval);
        ELSIF (name = &#39;ALERT&#39;) THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Sending alert to: &#39;|| cval);
        END IF;
      END LOOP;
  END LOOP;
  FOR rnum IN 1..maybehits.COUNT LOOP
    DBMS_OUTPUT.PUT_LINE(&#39;Using rule &#39;|| maybehits(rnum).rule_name);
    ac := maybehits(rnum).rule_action_context;
    namearray := ac.GET_ALL_NAMES;
      FOR i IN 1..namearray.count loop
        name := namearray(i);
        status := ac.GET_VALUE(name).GETVARCHAR2(cval);
        IF (name = &#39;MAYBE CENTER&#39;) then
          DBMS_OUTPUT.PUT_LINE(&#39;Assigning problem to &#39; || cval);
        END IF;
      END LOOP;
  END LOOP;
END;
/

/*
</pre></dd>
<dd><a id="STREX1365"></a><a id="CEGDAEDC"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Dispatch Sample Problems</dt>
<dd>
<p>The first problem dispatch in this step uses partial evaluation and takes an action based on the partial evaluation. Specifically, the first problem dispatch specifies that the <code dir="ltr">priority</code> is <code dir="ltr">1</code> and the <code dir="ltr">problem_type</code> is <code dir="ltr">NULL</code>. In this case, the rules engine returns a <code dir="ltr">MAYBE</code> rule for the event, and the <code dir="ltr">problem_dispatch</code> procedure assigns the problem to the Texas center.</p>
<p>The second and third problem dispatches do not use partial evaluation. Each of these problems evaluate to <code dir="ltr">TRUE</code> for a rule, and the problem is assigned accordingly by the <code dir="ltr">problem_dispatch</code> procedure.</p>
<pre dir="ltr">*/

EXECUTE problem_dispatch(1, NULL);
EXECUTE problem_dispatch(2, &#39;HARDWARE&#39;);
EXECUTE problem_dispatch(3, &#39;SOFTWARE&#39;);

/*
</pre></dd>
<dd><a id="STREX1366"></a><a id="CEGGBFAJ"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Clean Up the Environment (Optional)</dt>
<dd>
<p>You can clean up the sample environment by dropping the <code dir="ltr">support</code> user.</p>
<pre dir="ltr">*/

CONNECT SYSTEM

DROP USER support CASCADE;

/*
</pre></dd>
<dd><a id="STREX1367"></a><a id="CEGBCCCC"></a></dd>
<dt class="seghead">Step 12&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">rules_stored_variables_partial.out</code> spool file to ensure that all actions completed successfully after this script completes.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1113393"></a>/*************************** END OF SCRIPT ******************************/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i1113395"></a>
<div id="STREX1160" class="sect1">
<h2 class="sect1">Using Rules on Data Stored in a Table<a id="sthref131"></a></h2>
<p>This example illustrates how to use rules to evaluate data stored in a table. This example is similar to the example described in <a href="#CEGFDFBI">&#34;Using Rules on Nontable Data Stored in Explicit Variables&#34;</a>. In both examples, the application routes customer problems based on priority. However, in this example, the problems are stored in a table instead of variables.</p>
<p>The application uses the <code dir="ltr">problems</code> table in the <code dir="ltr">support</code> schema, into which customer problems are inserted. This example uses the following rules for handling customer problems:</p>
<ul>
<li>
<p>Assign all problems with priority greater than 2 to the San Jose Center.</p>
</li>
<li>
<p>Assign all problems with priority less than or equal to 2 to the New York Center.</p>
</li>
<li>
<p>Send an alert to the vice president of support for a problem with priority equal&nbsp;to&nbsp;1.</p>
</li>
</ul>
<p>The evaluation context consists of the <code dir="ltr">problems</code> table. The relevant row of the table, which corresponds to the problem being routed, is passed to the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure as a table value.</p>
<p><a id="i1113410"></a>Complete the following steps:</p>
<ol>
<li>
<p><a href="#i1113466">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CEGEDEIE">Create the support User</a></p>
</li>
<li>
<p><a href="#CEGHHHCJ">Grant the support User the Necessary System Privileges on Rules</a></p>
</li>
<li>
<p><a href="#CEGIFJJC">Create the problems Table</a></p>
</li>
<li>
<p><a href="#CEGHGGJC">Create the evalctx Evaluation Context</a></p>
</li>
<li>
<p><a href="#CEGHCJII">Create the Rules that Correspond to Problem Priority</a></p>
</li>
<li>
<p><a href="#CEGJFDHH">Create the rs Rule Set</a></p>
</li>
<li>
<p><a href="#CEGGABDI">Add the Rules to the Rule Set</a></p>
</li>
<li>
<p><a href="#CEGEIJIE">Create the problem_dispatch PL/SQL Procedure</a></p>
</li>
<li>
<p><a href="#CEGGDBGJ">Log Problems</a></p>
</li>
<li>
<p><a href="#CEGJICFB">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<a id="i1113466"></a>
<dl>
<dd><a id="STREX1368"></a><a id="sthref132"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL rules_table.out

/*
</pre></dd>
<dd><a id="STREX1369"></a><a id="CEGEDEIE"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create the support User</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT SYSTEM

CREATE TABLESPACE support_tbs1 DATAFILE &#39;support_tbs1.dbf&#39; 
  SIZE 5M REUSE AUTOEXTEND ON MAXSIZE UNLIMITED;

ACCEPT password PROMPT &#39;Enter password for user: &#39; HIDE

CREATE USER support
IDENTIFIED BY &amp;password
  DEFAULT TABLESPACE support_tbs1
  QUOTA UNLIMITED ON support_tbs1;

GRANT ALTER SESSION, CREATE CLUSTER, CREATE DATABASE LINK, CREATE SEQUENCE,
  CREATE SESSION, CREATE SYNONYM, CREATE TABLE, CREATE VIEW, CREATE INDEXTYPE, 
  CREATE OPERATOR, CREATE PROCEDURE, CREATE TRIGGER, CREATE TYPE
TO support;

/*
</pre></dd>
<dd><a id="STREX1370"></a><a id="CEGHHHCJ"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Grant the support User the Necessary System Privileges on Rules</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_SET_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_OBJ,
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1371"></a><a id="CEGIFJJC"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create the problems Table</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT support

SET FEEDBACK 1
SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 100
SET SERVEROUTPUT ON

CREATE TABLE problems(
  probid          NUMBER PRIMARY KEY,
  custid          NUMBER,
  priority        NUMBER,
  description     VARCHAR2(4000),
  center          VARCHAR2(100));

/*
</pre></dd>
<dd><a id="STREX1372"></a><a id="CEGHGGJC"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create the evalctx Evaluation Context<a class="dashingAutolink" name="autolink-104324"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref133"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">DECLARE
  ta  SYS.RE$TABLE_ALIAS_LIST;
BEGIN
  ta := SYS.RE$TABLE_ALIAS_LIST(SYS.RE$TABLE_ALIAS(&#39;prob&#39;, &#39;problems&#39;));
  DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT(
    evaluation_context_name    =&gt; &#39;evalctx&#39;,
    table_aliases              =&gt; ta,
    evaluation_context_comment =&gt; &#39;support problem definition&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1373"></a><a id="CEGHCJII"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Create the Rules that Correspond to Problem Priority<a class="dashingAutolink" name="autolink-104325"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref134"></a><a class="dashingAutolink" name="autolink-104326"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref135"></a></dt>
<dd>
<p>The following code creates one action context for each rule, and one name-value pair in each action context.</p>
<pre dir="ltr">*/

DECLARE
  ac  SYS.RE$NV_LIST;
BEGIN
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;San Jose&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r1&#39;,
    condition      =&gt; &#39;prob.priority &gt; 2&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;Low priority problems&#39;);
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;New York&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r2&#39;,
    condition      =&gt; &#39;prob.priority &lt;= 2&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;High priority problems&#39;);
  ac := sys.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;ALERT&#39;, ANYDATA.CONVERTVARCHAR2(&#39;John Doe&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r3&#39;,
    condition      =&gt; &#39;prob.priority = 1&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;Urgent problems&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1374"></a><a id="CEGJFDHH"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Create the rs Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name      =&gt; &#39;rs&#39;,
    evaluation_context =&gt; &#39;evalctx&#39;,
    rule_set_comment   =&gt; &#39;support rules&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1375"></a><a id="CEGGABDI"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Add the Rules to the Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r1&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r2&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r3&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1376"></a><a id="CEGEIJIE"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Create the problem_dispatch PL/SQL Procedure<a class="dashingAutolink" name="autolink-104327"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref136"></a><a class="dashingAutolink" name="autolink-104328"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref137"></a><a class="dashingAutolink" name="autolink-104329"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref138"></a><a class="dashingAutolink" name="autolink-104330"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref139"></a><a class="dashingAutolink" name="autolink-104331"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref140"></a><a class="dashingAutolink" name="autolink-104332"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref141"></a><a class="dashingAutolink" name="autolink-104333"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref142"></a><a class="dashingAutolink" name="autolink-104334"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref143"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE problem_dispatch 
IS
    cursor c IS SELECT probid, rowid FROM problems WHERE center IS NULL;
    tv        SYS.RE$TABLE_VALUE;
    tvl       SYS.RE$TABLE_VALUE_LIST;
    truehits  SYS.RE$RULE_HIT_LIST;
    maybehits SYS.RE$RULE_HIT_LIST;
    ac        SYS.RE$NV_LIST;
    namearray SYS.RE$NAME_ARRAY;
    name      VARCHAR2(30);
    cval      VARCHAR2(100);
    rnum      INTEGER;
    i         INTEGER;
    status    PLS_INTEGER;
BEGIN
  FOR r IN c LOOP
    tv  := SYS.RE$TABLE_VALUE(&#39;prob&#39;, rowidtochar(r.rowid));
    tvl := SYS.RE$TABLE_VALUE_LIST(tv);
    truehits := SYS.RE$RULE_HIT_LIST();
    maybehits := SYS.RE$RULE_HIT_LIST();
    DBMS_RULE.EVALUATE(
      rule_set_name        =&gt; &#39;support.rs&#39;,
      evaluation_context   =&gt; &#39;evalctx&#39;,
      table_values         =&gt; tvl,
      true_rules           =&gt; truehits,
      maybe_rules          =&gt; maybehits);
    FOR rnum IN 1..truehits.COUNT LOOP
      DBMS_OUTPUT.PUT_LINE(&#39;Using rule &#39;|| truehits(rnum).rule_name);
      ac := truehits(rnum).rule_action_context;
      namearray := ac.GET_ALL_NAMES;
      FOR i IN 1..namearray.COUNT LOOP
        name := namearray(i);
        status := ac.GET_VALUE(name).GETVARCHAR2(cval);
        IF (name = &#39;CENTER&#39;) THEN
          UPDATE PROBLEMS SET center = cval WHERE rowid = r.rowid;
          DBMS_OUTPUT.PUT_LINE(&#39;Assigning &#39;|| r.probid || &#39; to &#39; || cval);
        ELSIF (name = &#39;ALERT&#39;) THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Alert: &#39;|| cval || &#39; Problem:&#39; || r.probid);
        END IF;
       END LOOP;
    END LOOP;
  END LOOP;
END;
/

/*
</pre></dd>
<dd><a id="STREX1377"></a><a id="CEGGDBGJ"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Log Problems</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">INSERT INTO problems(probid, custid, priority, description)
  VALUES(10101, 11, 1, &#39;no dial tone&#39;);

INSERT INTO problems(probid, custid, priority, description)
  VALUES(10102, 21, 2, &#39;noise on local calls&#39;);

INSERT INTO problems(probid, custid, priority, description)
  VALUES(10103, 31, 3, &#39;noise on long distance calls&#39;);

COMMIT;

/*
</pre></dd>
<dd><a id="STREX1378"></a><a id="CEGJICFB"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">rules_table.out</code> spool file to ensure that all actions completed successfully after this script completes.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1113684"></a>/*************************** END OF SCRIPT ******************************/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1114762">&#34;Dispatching Problems and Checking Results for the Table Examples&#34;</a> for the steps to complete to dispatch the problems logged in this example and check the results of the problem dispatch</div>
</dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i1113697"></a>
<div id="STREX1161" class="sect1">
<h2 class="sect1">Using Rules on Both Explicit Variables and Table Data<a id="sthref144"></a><a id="sthref145"></a></h2>
<p>This example illustrates how to use rules to evaluate data stored in explicit variables and in a table. The application uses the <code dir="ltr">problems</code> table in the <code dir="ltr">support</code> schema, into which customer problems are inserted. This example uses the following rules for handling customer problems:</p>
<ul>
<li>
<p>Assign all problems with priority greater than 2 to the San Jose Center.</p>
</li>
<li>
<p>Assign all problems with priority equal to 2 to the New York Center.</p>
</li>
<li>
<p>Assign all problems with priority equal to 1 to the Tampa Center from 8 AM to 8&nbsp;PM.</p>
</li>
<li>
<p>Assign all problems with priority equal to 1 to the Bangalore Center from 8 PM to 8 AM.</p>
</li>
<li>
<p>Send an alert to the vice president of support for a problem with priority equal&nbsp;to&nbsp;1.</p>
</li>
</ul>
<p>The evaluation context consists of the <code dir="ltr">problems</code> table. The relevant row of the table, which corresponds to the problem being routed, is passed to the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure as a table value.</p>
<p>Some of the rules in this example refer to the current time, which is represented as an explicit variable named <code dir="ltr">current_time</code>. The current time is treated as additional data in the evaluation context. It is represented as a variable for the following reasons:</p>
<ul>
<li>
<p>It is not practical to store the current time in a table because it would have to be updated very often.</p>
</li>
<li>
<p>The current time can be accessed by inserting calls to <code dir="ltr">SYSDATE</code> in every rule that requires it, but that would cause repeated invocations of the same SQL function <code dir="ltr">SYSDATE</code>, which might slow down rule evaluation. Different values of the current time in different rules might lead to incorrect behavior.</p>
</li>
</ul>
<p>Complete the following steps:</p>
<ol>
<li>
<p><a href="#i1113765">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CEGGIHGG">Create the support User</a></p>
</li>
<li>
<p><a href="#CEGBBHIG">Grant the support User the Necessary System Privileges on Rules</a></p>
</li>
<li>
<p><a href="#CEGEBIDH">Create the problems Table</a></p>
</li>
<li>
<p><a href="#CEGDJAJJ">Create the evalctx Evaluation Context</a></p>
</li>
<li>
<p><a href="#CEGFBCJA">Create the Rules that Correspond to Problem Priority</a></p>
</li>
<li>
<p><a href="#CEGDFJDD">Create the rs Rule Set</a></p>
</li>
<li>
<p><a href="#CEGCEGDC">Add the Rules to the Rule Set</a></p>
</li>
<li>
<p><a href="#CEGBIGHC">Create the problem_dispatch PL/SQL Procedure</a></p>
</li>
<li>
<p><a href="#CEGCJDJJ">Log Problems</a></p>
</li>
<li>
<p><a href="#CEGHAHEI">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<a id="i1113765"></a>
<dl>
<dd><a id="STREX1379"></a><a id="sthref146"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL rules_var_tab.out

/*
</pre></dd>
<dd><a id="STREX1380"></a><a id="CEGGIHGG"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create the support User</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT SYSTEM

CREATE TABLESPACE support_tbs2 DATAFILE &#39;support_tbs2.dbf&#39; 
  SIZE 5M REUSE AUTOEXTEND ON MAXSIZE UNLIMITED;

ACCEPT password PROMPT &#39;Enter password for user: &#39; HIDE

CREATE USER support
IDENTIFIED BY &amp;password
  DEFAULT TABLESPACE support_tbs2
  QUOTA UNLIMITED ON support_tbs2;

GRANT ALTER SESSION, CREATE CLUSTER, CREATE DATABASE LINK, CREATE SEQUENCE,
  CREATE SESSION, CREATE SYNONYM, CREATE TABLE, CREATE VIEW, CREATE INDEXTYPE, 
  CREATE OPERATOR, CREATE PROCEDURE, CREATE TRIGGER, CREATE TYPE
TO support;

/*
</pre></dd>
<dd><a id="STREX1381"></a><a id="CEGBBHIG"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Grant the support User the Necessary System Privileges on Rules</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_SET_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_OBJ,
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1382"></a><a id="CEGEBIDH"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create the problems Table</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT support

SET FEEDBACK 1
SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 100
SET SERVEROUTPUT ON

CREATE TABLE problems(
  probid          NUMBER PRIMARY KEY,
  custid          NUMBER,
  priority        NUMBER,
  description     VARCHAR2(4000),
  center          VARCHAR2(100));

/*
</pre></dd>
<dd><a id="STREX1383"></a><a id="CEGDJAJJ"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create the evalctx Evaluation Context<a class="dashingAutolink" name="autolink-104335"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref147"></a><a class="dashingAutolink" name="autolink-104336"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref148"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">DECLARE
  ta SYS.RE$TABLE_ALIAS_LIST;
  vt SYS.RE$VARIABLE_TYPE_LIST;
BEGIN
  ta := SYS.RE$TABLE_ALIAS_LIST(SYS.RE$TABLE_ALIAS(&#39;prob&#39;, &#39;problems&#39;));
  vt := SYS.RE$VARIABLE_TYPE_LIST(
          SYS.RE$VARIABLE_TYPE(&#39;current_time&#39;, &#39;DATE&#39;, NULL, NULL));
  DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT(
    evaluation_context_name    =&gt; &#39;evalctx&#39;,
    table_aliases              =&gt; ta,
    variable_types             =&gt; vt,
    evaluation_context_comment =&gt; &#39;support problem definition&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1384"></a><a id="CEGFBCJA"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Create the Rules that Correspond to Problem Priority</dt>
<dd>
<p>The following code creates one action context for each rule, and one name-value pair in each action context.</p>
<pre dir="ltr">*/

DECLARE
  ac SYS.RE$NV_LIST;
BEGIN
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;San Jose&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r1&#39;,
    condition      =&gt; &#39;prob.priority &gt; 2&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;Low priority problems&#39;);
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;New York&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r2&#39;,
    condition      =&gt; &#39;prob.priority = 2&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;High priority problems&#39;);
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;ALERT&#39;, ANYDATA.CONVERTVARCHAR2(&#39;John Doe&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r3&#39;,
    condition      =&gt; &#39;prob.priority = 1&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;Urgent problems&#39;);
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;Tampa&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name =&gt; &#39;r4&#39;,
    condition =&gt; &#39;(prob.priority = 1) and &#39; ||
                 &#39;(TO_NUMBER(TO_CHAR(:current_time, &#39;&#39;HH24&#39;&#39;)) &gt;= 8) and &#39; ||
                 &#39;(TO_NUMBER(TO_CHAR(:current_time, &#39;&#39;HH24&#39;&#39;)) &lt;= 20)&#39;,
    action_context =&gt; ac,
    rule_comment =&gt; &#39;Urgent daytime problems&#39;);
  ac := sys.RE$NV_LIST(NULL);
  ac.add_pair(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;Bangalore&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name =&gt; &#39;r5&#39;,
    condition =&gt; &#39;(prob.priority = 1) and &#39; ||
                 &#39;((TO_NUMBER(TO_CHAR(:current_time, &#39;&#39;HH24&#39;&#39;)) &lt; 8) or &#39; ||
                 &#39; (TO_NUMBER(TO_CHAR(:current_time, &#39;&#39;HH24&#39;&#39;)) &gt; 20))&#39;,
    action_context =&gt; ac,
    rule_comment =&gt; &#39;Urgent nighttime problems&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1385"></a><a id="CEGDFJDD"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Create the rs Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name      =&gt; &#39;rs&#39;,
    evaluation_context =&gt; &#39;evalctx&#39;,
    rule_set_comment   =&gt; &#39;support rules&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1386"></a><a id="CEGCEGDC"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Add the Rules to the Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r1&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r2&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r3&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r4&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r5&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1387"></a><a id="CEGBIGHC"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Create the problem_dispatch PL/SQL Procedure<a class="dashingAutolink" name="autolink-104337"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref149"></a><a class="dashingAutolink" name="autolink-104338"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref150"></a><a class="dashingAutolink" name="autolink-104339"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref151"></a><a class="dashingAutolink" name="autolink-104340"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref152"></a><a class="dashingAutolink" name="autolink-104341"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref153"></a><a class="dashingAutolink" name="autolink-104342"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref154"></a><a class="dashingAutolink" name="autolink-104343"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref155"></a><a class="dashingAutolink" name="autolink-104344"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref156"></a><a class="dashingAutolink" name="autolink-104345"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref157"></a><a class="dashingAutolink" name="autolink-104346"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref158"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE problem_dispatch
IS
    cursor c  is SELECT probid, rowid FROM PROBLEMS WHERE center IS NULL;
    tv        SYS.RE$TABLE_VALUE;
    tvl       SYS.RE$TABLE_VALUE_LIST;
    vv1       SYS.RE$VARIABLE_VALUE;
    vvl       SYS.RE$VARIABLE_VALUE_LIST;
    truehits  SYS.RE$RULE_HIT_LIST;
    maybehits SYS.RE$RULE_HIT_LIST;
    ac        SYS.RE$NV_LIST;
    namearray SYS.RE$NAME_ARRAY;
    name      VARCHAR2(30);
    cval      VARCHAR2(100);
    rnum      INTEGER;
    i         INTEGER;
    status    PLS_INTEGER;
BEGIN
  FOR r IN c LOOP
    tv  := sYS.RE$TABLE_VALUE(&#39;prob&#39;, ROWIDTOCHAR(r.rowid));
    tvl := SYS.RE$TABLE_VALUE_LIST(tv);
    vv1 := SYS.RE$VARIABLE_VALUE(&#39;current_time&#39;,
                                 ANYDATA.CONVERTDATE(SYSDATE));
    vvl := SYS.RE$VARIABLE_VALUE_LIST(vv1);
    truehits := SYS.RE$RULE_HIT_LIST();
    maybehits := SYS.RE$RULE_HIT_LIST();
    DBMS_RULE.EVALUATE(
        rule_set_name        =&gt; &#39;support.rs&#39;,
        evaluation_context   =&gt; &#39;evalctx&#39;,
        table_values         =&gt; tvl,
        variable_values      =&gt; vvl,
        true_rules           =&gt; truehits,
        maybe_rules          =&gt; maybehits);
    FOR rnum IN 1..truehits.COUNT loop
      DBMS_OUTPUT.PUT_LINE(&#39;Using rule &#39;|| truehits(rnum).rule_name);
      ac := truehits(rnum).rule_action_context;
      namearray := ac.GET_ALL_NAMES;
      FOR i in 1..namearray.COUNT LOOP
        name := namearray(i);
        status := ac.GET_VALUE(name).GETVARCHAR2(cval);
        IF (name = &#39;CENTER&#39;) THEN
          UPDATE problems SET center = cval
          WHERE rowid = r.rowid;
          DBMS_OUTPUT.PUT_LINE(&#39;Assigning &#39;|| r.probid || &#39; to &#39; || cval);
        ELSIF (name = &#39;ALERT&#39;) THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Alert: &#39;|| cval || &#39; Problem:&#39; || r.probid);
        END IF;
      END LOOP;
    END LOOP;  
  END LOOP;
END;
/

/*
</pre></dd>
<dd><a id="STREX1388"></a><a id="CEGCJDJJ"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Log Problems</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">INSERT INTO problems(probid, custid, priority, description)
  VALUES(10201, 12, 1, &#39;no dial tone&#39;);

INSERT INTO problems(probid, custid, priority, description)
  VALUES(10202, 22, 2, &#39;noise on local calls&#39;);

INSERT INTO PROBLEMS(probid, custid, priority, description)
  VALUES(10203, 32, 3, &#39;noise on long distance calls&#39;);

COMMIT;

/*
</pre></dd>
<dd><a id="STREX1389"></a><a id="CEGHAHEI"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">rules_var_tab.out</code> spool file to ensure that all actions completed successfully after this script completes.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1114018"></a>/*************************** END OF SCRIPT ******************************/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1114762">&#34;Dispatching Problems and Checking Results for the Table Examples&#34;</a> for the steps to complete to dispatch the problems logged in this example and check the results of the problem dispatch</div>
</dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i1114031"></a>
<div id="STREX1162" class="sect1">
<h2 class="sect1">Using Rules on Implicit Variables and Table Data<a id="sthref159"></a><a id="sthref160"></a></h2>
<p>This example illustrates how to use rules to evaluate implicit variables and data stored in a table. The application uses the <code dir="ltr">problems</code> table in the <code dir="ltr">support</code> schema, into which customer problems are inserted. This example uses the following rules for handling customer problems:</p>
<ul>
<li>
<p>Assign all problems with priority greater than 2 to the San Jose Center.</p>
</li>
<li>
<p>Assign all problems with priority equal to 2 to the New York Center.</p>
</li>
<li>
<p>Assign all problems with priority equal to 1 to the Tampa Center from 8 AM to 8&nbsp;PM.</p>
</li>
<li>
<p>Assign all problems with priority equal to 1 to the Bangalore Center after 8&nbsp;PM and before 8 AM.</p>
</li>
<li>
<p>Send an alert to the vice president of support for a problem with priority equal&nbsp;to&nbsp;1.</p>
</li>
</ul>
<p>The evaluation context consists of the <code dir="ltr">problems</code> table. The relevant row of the table, which corresponds to the problem being routed, is passed to the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure as a table value.</p>
<p>As in the example illustrated in <a href="#i1113697">&#34;Using Rules on Both Explicit Variables and Table Data&#34;</a>, the current time is represented as a variable named <code dir="ltr">current_time</code>. However, this variable value is not specified during evaluation by the caller. That is, <code dir="ltr">current_time</code> is an implicit variable in this example. A PL/SQL function named <code dir="ltr">timefunc</code> is specified for <code dir="ltr">current_time</code>, and this function is invoked once during evaluation to get its value.</p>
<p>Using implicit variables can be useful in other cases if one of the following conditions is true:</p>
<ul>
<li>
<p>The caller does not have access to the variable value.</p>
</li>
<li>
<p>The variable is referenced infrequently in rules. Because it is implicit, its value can be retrieved only when necessary, and does not need to be passed in for every evaluation.</p>
</li>
</ul>
<p>Complete the following steps:</p>
<ol>
<li>
<p><a href="#i1114110">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CEGGBABD">Create the support User</a></p>
</li>
<li>
<p><a href="#CEGDEAAA">Grant the support User the Necessary System Privileges on Rules</a></p>
</li>
<li>
<p><a href="#CEGDBJGG">Create the problems Table</a></p>
</li>
<li>
<p><a href="#CEGGGHEF">Create the timefunc Function to Return the Value of current_time</a></p>
</li>
<li>
<p><a href="#CEGBICCJ">Create the evalctx Evaluation Context</a></p>
</li>
<li>
<p><a href="#CEGHAEAH">Create the Rules that Correspond to Problem Priority</a></p>
</li>
<li>
<p><a href="#CEGJHECF">Create the rs Rule Set</a></p>
</li>
<li>
<p><a href="#CEGJEFCA">Add the Rules to the Rule Set</a></p>
</li>
<li>
<p><a href="#CEGDCCEA">Create the problem_dispatch PL/SQL Procedure</a></p>
</li>
<li>
<p><a href="#CEGEBIIF">Log Problems</a></p>
</li>
<li>
<p><a href="#CEGGGFBC">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<a id="i1114110"></a>
<dl>
<dd><a id="STREX1390"></a><a id="sthref161"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL rules_implicit_var.out

/*
</pre></dd>
<dd><a id="STREX1391"></a><a id="CEGGBABD"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create the support User</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT SYSTEM

CREATE TABLESPACE support_tbs3 DATAFILE &#39;support_tbs3.dbf&#39; 
  SIZE 5M REUSE AUTOEXTEND ON MAXSIZE UNLIMITED;

ACCEPT password PROMPT &#39;Enter password for user: &#39; HIDE

CREATE USER support
IDENTIFIED BY &amp;password
  DEFAULT TABLESPACE support_tbs3
  QUOTA UNLIMITED ON support_tbs3;

GRANT ALTER SESSION, CREATE CLUSTER, CREATE DATABASE LINK, CREATE SEQUENCE,
  CREATE SESSION, CREATE SYNONYM, CREATE TABLE, CREATE VIEW, CREATE INDEXTYPE, 
  CREATE OPERATOR, CREATE PROCEDURE, CREATE TRIGGER, CREATE TYPE
TO support;

/*
</pre></dd>
<dd><a id="STREX1392"></a><a id="CEGDEAAA"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Grant the support User the Necessary System Privileges on Rules</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_SET_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_OBJ,
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1393"></a><a id="CEGDBJGG"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create the problems Table</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT support

SET FEEDBACK 1
SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 100
SET SERVEROUTPUT ON

CREATE TABLE problems(
  probid          NUMBER PRIMARY KEY,
  custid          NUMBER,
  priority        NUMBER,
  description     VARCHAR2(4000),
  center          VARCHAR2(100));

/*
</pre></dd>
<dd><a id="STREX1394"></a><a id="CEGGGHEF"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create the timefunc Function to Return the Value of current_time</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CREATE OR REPLACE FUNCTION timefunc(
  eco    VARCHAR2, 
  ecn    VARCHAR2, 
  var    VARCHAR2,
  evctx  SYS.RE$NV_LIST)
RETURN SYS.RE$VARIABLE_VALUE
IS
BEGIN
  IF (var = &#39;CURRENT_TIME&#39;) THEN
    RETURN(SYS.RE$VARIABLE_VALUE(&#39;current_time&#39;,
                                 ANYDATA.CONVERTDATE(SYSDATE)));
  ELSE
    RETURN(NULL);
  END IF;
END;
/

/*
</pre></dd>
<dd><a id="STREX1395"></a><a id="CEGBICCJ"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Create the evalctx Evaluation Context<a class="dashingAutolink" name="autolink-104347"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref162"></a><a class="dashingAutolink" name="autolink-104348"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref163"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">DECLARE
  ta SYS.RE$TABLE_ALIAS_LIST;
  vt SYS.RE$VARIABLE_TYPE_LIST;
BEGIN
  ta := SYS.RE$TABLE_ALIAS_LIST(SYS.RE$TABLE_ALIAS(&#39;prob&#39;, &#39;problems&#39;));
  vt := SYS.RE$VARIABLE_TYPE_LIST(
          SYS.RE$VARIABLE_TYPE(&#39;current_time&#39;, &#39;DATE&#39;, &#39;timefunc&#39;, NULL));
  DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT(
    evaluation_context_name    =&gt; &#39;evalctx&#39;,
    table_aliases              =&gt; ta,
    variable_types             =&gt; vt,
    evaluation_context_comment =&gt; &#39;support problem definition&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1396"></a><a id="CEGHAEAH"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Create the Rules that Correspond to Problem Priority<a class="dashingAutolink" name="autolink-104349"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref164"></a><a class="dashingAutolink" name="autolink-104350"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref165"></a></dt>
<dd>
<p>The following code creates one action context for each rule, and one name-value pair in each action context.</p>
<pre dir="ltr">*/

DECLARE
  ac SYS.RE$NV_LIST;
BEGIN
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;San Jose&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r1&#39;,
    condition      =&gt; &#39;prob.priority &gt; 2&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;Low priority problems&#39;);
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;New York&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r2&#39;,
    condition      =&gt; &#39;prob.priority = 2&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;High priority problems&#39;);
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;ALERT&#39;, ANYDATA.CONVERTVARCHAR2(&#39;John Doe&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name      =&gt; &#39;r3&#39;,
    condition      =&gt; &#39;prob.priority = 1&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;Urgent problems&#39;);
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;Tampa&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name =&gt; &#39;r4&#39;,
    condition =&gt; &#39;(prob.priority = 1) and &#39; ||
                 &#39;(TO_NUMBER(TO_CHAR(:current_time, &#39;&#39;HH24&#39;&#39;)) &gt;= 8) and &#39; ||
                 &#39;(TO_NUMBER(TO_CHAR(:current_time, &#39;&#39;HH24&#39;&#39;)) &lt;= 20)&#39;,
    action_context =&gt; ac,
    rule_comment   =&gt; &#39;Urgent daytime problems&#39;);
  ac := SYS.RE$NV_LIST(NULL);
  ac.add_pair(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;Bangalore&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name =&gt; &#39;r5&#39;,
    condition =&gt; &#39;(prob.priority = 1) and &#39; ||
                 &#39;((TO_NUMBER(TO_CHAR(:current_time, &#39;&#39;HH24&#39;&#39;)) &lt; 8) or &#39; ||
                 &#39; (TO_NUMBER(TO_CHAR(:current_time, &#39;&#39;HH24&#39;&#39;)) &gt; 20))&#39;,
    action_context =&gt; ac,
    rule_comment =&gt; &#39;Urgent nighttime problems&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1397"></a><a id="CEGJHECF"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Create the rs Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name      =&gt; &#39;rs&#39;,
    evaluation_context =&gt; &#39;evalctx&#39;,
    rule_set_comment   =&gt; &#39;support rules&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1398"></a><a id="CEGJEFCA"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Add the Rules to the Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r1&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r2&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r3&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r4&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r5&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1399"></a><a id="CEGDCCEA"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Create the problem_dispatch PL/SQL Procedure<a class="dashingAutolink" name="autolink-104351"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref166"></a><a class="dashingAutolink" name="autolink-104352"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref167"></a><a class="dashingAutolink" name="autolink-104353"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref168"></a><a class="dashingAutolink" name="autolink-104354"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref169"></a><a class="dashingAutolink" name="autolink-104355"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref170"></a><a class="dashingAutolink" name="autolink-104356"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref171"></a><a class="dashingAutolink" name="autolink-104357"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref172"></a><a class="dashingAutolink" name="autolink-104358"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref173"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE problem_dispatch
IS
    cursor c  IS SELECT probid, rowid FROM problems WHERE center IS NULL;
    tv        SYS.RE$TABLE_VALUE;
    tvl       SYS.RE$TABLE_VALUE_LIST;
    truehits  SYS.RE$RULE_HIT_LIST;
    maybehits SYS.RE$RULE_HIT_LIST;
    ac        SYS.RE$NV_LIST;
    namearray SYS.RE$NAME_ARRAY;
    name      VARCHAR2(30);
    cval      VARCHAR2(100);
    rnum      INTEGER;
    i         INTEGER;
    status    PLS_INTEGER;
BEGIN
  FOR r IN c LOOP
    tv  := SYS.RE$TABLE_VALUE(&#39;prob&#39;, rowidtochar(r.rowid));
    tvl := SYS.RE$TABLE_VALUE_LIST(tv);
    truehits := SYS.RE$RULE_HIT_LIST();
    maybehits := SYS.RE$RULE_HIT_LIST();
    DBMS_RULE.EVALUATE(
        rule_set_name        =&gt; &#39;support.rs&#39;,
        evaluation_context   =&gt; &#39;evalctx&#39;,
        table_values         =&gt; tvl,
        true_rules           =&gt; truehits,
        maybe_rules          =&gt; maybehits);
    FOR rnum IN 1..truehits.COUNT LOOP
      DBMS_OUTPUT.PUT_LINE(&#39;Using rule &#39;|| truehits(rnum).rule_name);
      ac := truehits(rnum).rule_action_context;
      namearray := ac.GET_ALL_NAMES;
      FOR i IN 1..namearray.COUNT LOOP
        name := namearray(i);
        status := ac.GET_VALUE(name).GETVARCHAR2(cval);
        IF (name = &#39;CENTER&#39;) THEN
          UPDATE problems SET center = cval
            WHERE rowid = r.rowid;
          DBMS_OUTPUT.PUT_LINE(&#39;Assigning &#39;|| r.probid || &#39; to &#39; || cval);
        ELSIF (name = &#39;ALERT&#39;) THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Alert: &#39;|| cval || &#39; Problem:&#39; || r.probid);
        END IF;
      END LOOP;
    END LOOP;
  END LOOP;
END;
/

/*
</pre></dd>
<dd><a id="STREX1400"></a><a id="CEGEBIIF"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Log Problems</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">INSERT INTO problems(probid, custid, priority, description)
  VALUES(10301, 13, 1, &#39;no dial tone&#39;);

INSERT INTO problems(probid, custid, priority, description)
  VALUES(10302, 23, 2, &#39;noise on local calls&#39;);

INSERT INTO problems(probid, custid, priority, description)
  VALUES(10303, 33, 3, &#39;noise on long distance calls&#39;);

COMMIT;

/*
</pre></dd>
<dd><a id="STREX1401"></a><a id="CEGGGFBC"></a></dd>
<dt class="seghead">Step 12&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">rules_implicit_var.out</code> spool file to ensure that all actions completed successfully after this script completes.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1114379"></a>/*************************** END OF SCRIPT ******************************/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1114762">&#34;Dispatching Problems and Checking Results for the Table Examples&#34;</a> for the steps to complete to dispatch the problems logged in this example and check the results of the problem dispatch</div>
</dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i1114392"></a>
<div id="STREX1163" class="sect1">
<h2 class="sect1">Using Event Contexts and Implicit Variables with Rules<a id="sthref174"></a><a id="sthref175"></a></h2>
<p>An event context is a varray of type <code dir="ltr">SYS.RE$NV_LIST</code> that contains name-value pairs that contain information about the event. This optional information is not directly used or interpreted by the rules engine. Instead, it is passed to client callbacks such as an evaluation function, a variable value function (for implicit variables), or a variable method function.</p>
<p>In this example, assume every customer has a primary contact person, and the goal is to assign the problem reported by a customer to the support center to which the customer&#39;s primary contact person belongs. The customer name is passed in the event context.</p>
<p>This example illustrates how to use event contexts with rules to evaluate implicit variables. Specifically, when an event is evaluated using the <code dir="ltr">DBMS_RULE.EVALUATE</code> procedure, the event context is passed to the variable value function for implicit variables in the evaluation context. The name of the variable value function is <code dir="ltr">find_contact</code>, and this PL/SQL function returns the contact person based on the name of the company specified in the event context. The rule set is evaluated based on the contact person name and the priority for an event.</p>
<p>This example uses the following rules for handling customer problems:</p>
<ul>
<li>
<p>Assign all problems that belong to Jane to the San Jose Center.</p>
</li>
<li>
<p>Assign all problems that belong to Fred to the New York Center.</p>
</li>
<li>
<p>Assign all problems whose primary contact is unknown to George at the Texas Center.</p>
</li>
<li>
<p>Send an alert to the vice president of support for a problem with priority equal&nbsp;to&nbsp;1.</p>
</li>
</ul>
<p>Complete the following steps:</p>
<ol>
<li>
<p><a href="#i1114466">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CEGGGCCI">Create the support User</a></p>
</li>
<li>
<p><a href="#CEGIIFCC">Grant the support User the Necessary System Privileges on Rules</a></p>
</li>
<li>
<p><a href="#CEGEHGDA">Create the find_contact Function to Return a Customer&#39;s Contact</a></p>
</li>
<li>
<p><a href="#CEGBEJFJ">Create the evalctx Evaluation Context</a></p>
</li>
<li>
<p><a href="#CEGGHBDI">Create the Rules that Correspond to Problem Priority and Contact</a></p>
</li>
<li>
<p><a href="#CEGIFGCE">Create the rs Rule Set</a></p>
</li>
<li>
<p><a href="#CEGDJBEE">Add the Rules to the Rule Set</a></p>
</li>
<li>
<p><a href="#CEGBJGGI">Query the Data Dictionary</a></p>
</li>
<li>
<p><a href="#CEGDJIHE">Create the problem_dispatch PL/SQL Procedure</a></p>
</li>
<li>
<p><a href="#CEGHBBII">Dispatch Sample Problems</a></p>
</li>
<li>
<p><a href="#CEGHGCHA">Clean Up the Environment (Optional)</a></p>
</li>
<li>
<p><a href="#CEGGHFJB">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<a id="i1114466"></a>
<dl>
<dd><a id="STREX1402"></a><a id="sthref176"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL rules_event_context.out

/*
</pre></dd>
<dd><a id="STREX1403"></a><a id="CEGGGCCI"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create the support User</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT SYSTEM

ACCEPT password PROMPT &#39;Enter password for user: &#39; HIDE

GRANT ALTER SESSION, CREATE CLUSTER, CREATE DATABASE LINK, CREATE SEQUENCE,
  CREATE SESSION, CREATE SYNONYM, CREATE TABLE, CREATE VIEW, CREATE INDEXTYPE, 
  CREATE OPERATOR, CREATE PROCEDURE, CREATE TRIGGER, CREATE TYPE
TO support IDENTIFIED BY &amp;support;

/*
</pre></dd>
<dd><a id="STREX1404"></a><a id="CEGIIFCC"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Grant the support User the Necessary System Privileges on Rules</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_SET_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_RULE_OBJ,
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
  DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
    privilege    =&gt; DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT_OBJ, 
    grantee      =&gt; &#39;support&#39;, 
    grant_option =&gt; FALSE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1405"></a><a id="CEGEHGDA"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create the find_contact Function to Return a Customer&#39;s Contact</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT support

SET FEEDBACK 1
SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 100
SET SERVEROUTPUT ON
CREATE OR REPLACE FUNCTION find_contact(
  eco       VARCHAR2, 
  ecn       VARCHAR2, 
  var       VARCHAR2,
  evctx     SYS.RE$NV_LIST)
RETURN SYS.RE$VARIABLE_VALUE IS
  cust      VARCHAR2(30);
  contact   VARCHAR2(30);
  status    PLS_INTEGER;
BEGIN  
  IF (var = &#39;CUSTOMER_CONTACT&#39;) THEN
    status := evctx.GET_VALUE(&#39;CUSTOMER&#39;).GETVARCHAR2(cust);    
    IF (cust = &#39;COMPANY1&#39;) THEN     -- COMPANY1&#39;s contact person is Jane
      contact := &#39;JANE&#39;;
    ELSIF (cust = &#39;COMPANY2&#39;) THEN  -- COMPANY2&#39;s contact person is Fred
      contact := &#39;FRED&#39;;
    ELSE        -- Assign customers without primary contact person to George
      contact := &#39;GEORGE&#39;;
    END IF;
    RETURN SYS.RE$VARIABLE_VALUE(&#39;customer_contact&#39;,
                                 ANYDATA.CONVERTVARCHAR2(contact));
  ELSE
    RETURN NULL;
  END IF;
END;
/

/*
</pre></dd>
<dd><a id="STREX1406"></a><a id="CEGBEJFJ"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create the evalctx Evaluation Context<a class="dashingAutolink" name="autolink-104359"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref177"></a><a class="dashingAutolink" name="autolink-104360"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref178"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">DECLARE
  vt  SYS.RE$VARIABLE_TYPE_LIST;
BEGIN
  vt := SYS.RE$VARIABLE_TYPE_LIST(
        SYS.RE$VARIABLE_TYPE(&#39;priority&#39;, &#39;NUMBER&#39;, NULL, NULL),
        SYS.RE$VARIABLE_TYPE(&#39;customer_contact&#39;, &#39;VARCHAR2(30)&#39;, 
                             &#39;find_contact&#39;, NULL));
  DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT(
    evaluation_context_name    =&gt; &#39;evalctx&#39;,
    variable_types             =&gt; vt,
    evaluation_context_comment =&gt; &#39;support problem definition&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1407"></a><a id="CEGGHBDI"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Create the Rules that Correspond to Problem Priority and Contact</dt>
<dd>
<p>The following code creates one action context for each rule, and one name-value pair in each action context.</p>
<pre dir="ltr">*/

DECLARE
  ac  SYS.RE$NV_LIST;
BEGIN
  ac := SYS.RE$NV_LIST(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;San Jose&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name       =&gt; &#39;r1&#39;,
    condition       =&gt; &#39;:customer_contact = &#39;&#39;JANE&#39;&#39;&#39;,
    action_context  =&gt; ac,
    rule_comment    =&gt; &#39;Jane&#39;&#39;s customer problems&#39;);
  ac := sys.re$nv_list(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;New York&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name       =&gt; &#39;r2&#39;,
    condition       =&gt; &#39;:customer_contact = &#39;&#39;FRED&#39;&#39;&#39;,
    action_context  =&gt; ac,
    rule_comment    =&gt; &#39;Fred&#39;&#39;s customer problems&#39;);
  ac := sys.re$nv_list(NULL);
  ac.ADD_PAIR(&#39;CENTER&#39;, ANYDATA.CONVERTVARCHAR2(&#39;Texas&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name       =&gt; &#39;r3&#39;,
    condition       =&gt; &#39;:customer_contact = &#39;&#39;GEORGE&#39;&#39;&#39;,
    action_context  =&gt; ac,
    rule_comment    =&gt; &#39;George&#39;&#39;s customer problems&#39;);
  ac := sys.re$nv_list(NULL);
  ac.ADD_PAIR(&#39;ALERT&#39;, ANYDATA.CONVERTVARCHAR2(&#39;John Doe&#39;));
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name       =&gt; &#39;r4&#39;,
    condition       =&gt; &#39;:priority=1&#39;,
    action_context  =&gt; ac,
    rule_comment    =&gt; &#39;Urgent problems&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1408"></a><a id="CEGIFGCE"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Create the rs Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name      =&gt; &#39;rs&#39;,
    evaluation_context =&gt; &#39;evalctx&#39;,
    rule_set_comment   =&gt; &#39;support rules&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1409"></a><a id="CEGDJBEE"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Add the Rules to the Rule Set</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r1&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r2&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r3&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name     =&gt; &#39;r4&#39;, 
    rule_set_name =&gt; &#39;rs&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1410"></a><a id="CEGBJGGI"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Query the Data Dictionary</dt>
<dd>
<p>At this point, you can view the evaluation context, rules, and rule set you created in the previous steps.</p>
<pre dir="ltr">*/

COLUMN EVALUATION_CONTEXT_NAME HEADING &#39;Eval Context Name&#39; FORMAT A30
COLUMN EVALUATION_CONTEXT_COMMENT HEADING &#39;Eval Context Comment&#39; FORMAT A40

SELECT EVALUATION_CONTEXT_NAME, EVALUATION_CONTEXT_COMMENT
  FROM USER_EVALUATION_CONTEXTS
  ORDER BY EVALUATION_CONTEXT_NAME;

SET LONGCHUNKSIZE 4000
SET LONG 4000
COLUMN RULE_NAME HEADING &#39;Rule|Name&#39; FORMAT A5
COLUMN RULE_CONDITION HEADING &#39;Rule Condition&#39; FORMAT A35
COLUMN ACTION_CONTEXT_NAME HEADING &#39;Action|Context|Name&#39; FORMAT A10
COLUMN ACTION_CONTEXT_VALUE HEADING &#39;Action|Context|Value&#39; FORMAT A10

SELECT RULE_NAME, 
       RULE_CONDITION,
       AC.NVN_NAME ACTION_CONTEXT_NAME, 
       AC.NVN_VALUE.ACCESSVARCHAR2() ACTION_CONTEXT_VALUE
  FROM USER_RULES R, TABLE(R.RULE_ACTION_CONTEXT.ACTX_LIST) AC
  ORDER BY RULE_NAME;

COLUMN RULE_SET_NAME HEADING &#39;Rule Set Name&#39; FORMAT A20
COLUMN RULE_SET_EVAL_CONTEXT_OWNER HEADING &#39;Eval Context|Owner&#39; FORMAT A12
COLUMN RULE_SET_EVAL_CONTEXT_NAME HEADING &#39;Eval Context Name&#39; FORMAT A25
COLUMN RULE_SET_COMMENT HEADING &#39;Rule Set|Comment&#39; FORMAT A15

SELECT RULE_SET_NAME, 
       RULE_SET_EVAL_CONTEXT_OWNER,
       RULE_SET_EVAL_CONTEXT_NAME,
       RULE_SET_COMMENT
  FROM USER_RULE_SETS
  ORDER BY RULE_SET_NAME;

/*
</pre></dd>
<dd><a id="STREX1411"></a><a id="CEGDJIHE"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Create the problem_dispatch PL/SQL Procedure<a class="dashingAutolink" name="autolink-104361"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref179"></a><a class="dashingAutolink" name="autolink-104362"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref180"></a><a class="dashingAutolink" name="autolink-104363"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref181"></a><a class="dashingAutolink" name="autolink-104364"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref182"></a><a class="dashingAutolink" name="autolink-104365"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref183"></a><a class="dashingAutolink" name="autolink-104366"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref184"></a><a class="dashingAutolink" name="autolink-104367"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref185"></a><a class="dashingAutolink" name="autolink-104368"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref186"></a></dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE problem_dispatch (priority  NUMBER,
                                              customer  VARCHAR2) 
IS
    vvl       SYS.RE$VARIABLE_VALUE_LIST;
    truehits  SYS.RE$RULE_HIT_LIST;
    maybehits SYS.RE$RULE_HIT_LIST;
    ac        SYS.RE$NV_LIST;
    namearray SYS.RE$NAME_ARRAY;
    name      VARCHAR2(30);
    cval      VARCHAR2(100);
    rnum      INTEGER;
    i         INTEGER;
    status    PLS_INTEGER;
    evctx     SYS.RE$NV_LIST;
BEGIN
  vvl  := SYS.RE$VARIABLE_VALUE_LIST(
            SYS.RE$VARIABLE_VALUE(&#39;priority&#39;,
                                  ANYDATA.CONVERTNUMBER(priority)));
  evctx := SYS.RE$NV_LIST(NULL);
  evctx.ADD_PAIR(&#39;CUSTOMER&#39;, ANYDATA.CONVERTVARCHAR2(customer));
  truehits  := SYS.RE$RULE_HIT_LIST();
  maybehits := SYS.RE$RULE_HIT_LIST();
  DBMS_RULE.EVALUATE(
      rule_set_name        =&gt; &#39;support.rs&#39;,
      evaluation_context   =&gt; &#39;evalctx&#39;,
      event_context        =&gt; evctx,
      variable_values      =&gt; vvl,
      true_rules           =&gt; truehits,
      maybe_rules          =&gt; maybehits);
  FOR rnum IN 1..truehits.COUNT LOOP
    DBMS_OUTPUT.PUT_LINE(&#39;Using rule &#39;|| truehits(rnum).rule_name);
    ac := truehits(rnum).rule_action_context;
    namearray := ac.GET_ALL_NAMES;
      FOR i IN 1..namearray.count LOOP
        name := namearray(i);
        status := ac.GET_VALUE(name).GETVARCHAR2(cval);
        IF (name = &#39;CENTER&#39;) THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Assigning problem to &#39; || cval);
        ELSIF (name = &#39;ALERT&#39;) THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Sending alert to: &#39;|| cval);
        END IF;
      END LOOP;
  END LOOP;
END;
/

/*
</pre></dd>
<dd><a id="STREX1412"></a><a id="CEGHBBII"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Dispatch Sample Problems</dt>
<dd>
<p>The first problem dispatch in this step uses the event context and the variable value function to determine the contact person for <code dir="ltr">COMPANY1</code>. The event context is passed to the <code dir="ltr">find_contact</code> variable value function, and this function returns the contact name <code dir="ltr">JANE</code>. Therefore, rule <code dir="ltr">r1</code> evaluates to <code dir="ltr">TRUE</code>. The <code dir="ltr">problem_dispatch</code> procedure sends the problem to the San Jose office because <code dir="ltr">JANE</code> belongs to that office. In addition, the priority for this event is 1, which causes rule <code dir="ltr">r4</code> to evaluate to <code dir="ltr">TRUE</code>. As a result, the <code dir="ltr">problem_dispatch</code> procedure sends an alert to John Doe.</p>
<p>The second problem dispatch in this step uses the event context and the variable value function to determine the contact person for <code dir="ltr">COMPANY2</code>. The event context is passed to the <code dir="ltr">find_contact</code> variable value function, and this function returns the contact name <code dir="ltr">FRED</code>. Therefore, rule <code dir="ltr">r2</code> evaluates to <code dir="ltr">TRUE</code>. The <code dir="ltr">problem_dispatch</code> procedure sends the problem to the New York office because <code dir="ltr">FRED</code> belongs to that office.</p>
<p>The third problem dispatch in this step uses the event context and the variable value function to determine the contact person for <code dir="ltr">COMPANY3</code>. This company does not have a dedicated contact person. The event context is passed to the <code dir="ltr">find_contact</code> variable value function, and this function returns the contact name <code dir="ltr">GEORGE</code>, because <code dir="ltr">GEORGE</code> is the default contact when no contact person is found. Therefore, rule <code dir="ltr">r3</code> evaluates to <code dir="ltr">TRUE</code>. The <code dir="ltr">problem_dispatch</code> procedure sends the problem to the Texas office because <code dir="ltr">GEORGE</code> belongs to that office.</p>
<pre dir="ltr">*/

EXECUTE problem_dispatch(1, &#39;COMPANY1&#39;);
EXECUTE problem_dispatch(2, &#39;COMPANY2&#39;);
EXECUTE problem_dispatch(5, &#39;COMPANY3&#39;);

/*
</pre></dd>
<dd><a id="STREX1413"></a><a id="CEGHGCHA"></a></dd>
<dt class="seghead">Step 12&nbsp;&nbsp;&nbsp;Clean Up the Environment (Optional)</dt>
<dd>
<p>You can clean up the sample environment by dropping the <code dir="ltr">support</code> user.</p>
<pre dir="ltr">*/

CONNECT SYSTEM

DROP USER support CASCADE;

/*
</pre></dd>
<dd><a id="STREX1414"></a><a id="CEGGHFJB"></a></dd>
<dt class="seghead">Step 13&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">rules_event_context.out</code> spool file to ensure that all actions completed successfully after this script completes.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

/*************************** END OF SCRIPT ******************************/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i1114762"></a>
<div id="STREX1164" class="sect1">
<h2 class="sect1">Dispatching Problems and Checking Results for the Table Examples</h2>
<p>The following sections configure a <code dir="ltr">problem_dispatch</code> procedure that updates information in the <code dir="ltr">problems</code> table:</p>
<ul>
<li>
<p><a href="#i1113395">&#34;Using Rules on Data Stored in a Table&#34;</a></p>
</li>
<li>
<p><a href="#i1113697">&#34;Using Rules on Both Explicit Variables and Table Data&#34;</a></p>
</li>
<li>
<p><a href="#i1114031">&#34;Using Rules on Implicit Variables and Table Data&#34;</a></p>
</li>
</ul>
<p>Complete the following steps to dispatch the problems by running the <code dir="ltr">problem_dispatch</code> procedure and display the results in the <code dir="ltr">problems</code> table:</p>
<ol>
<li>
<p><a href="#CEGDJADE">Query the Data Dictionary</a></p>
</li>
<li>
<p><a href="#CEGIDIAA">List the Problems in the problems Table</a></p>
</li>
<li>
<p><a href="#CEGBHCCH">Dispatch the Problems by Running the problem_dispatch Procedure</a></p>
</li>
<li>
<p><a href="#CEGBCAFC">List the Problems in the problems Table</a></p>
</li>
<li>
<p><a href="#CEGEADIF">Clean Up the Environment (Optional)</a></p>
</li>
</ol>
<dl>
<dd><a id="STREX1415"></a><a id="CEGDJADE"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Query the Data Dictionary</dt>
<dd>
<p>View the evaluation context, rules, and rule set you created in the example:</p>
<pre dir="ltr">CONNECT support
Enter password: <span class="italic">password</span>

COLUMN EVALUATION_CONTEXT_NAME HEADING &#39;Eval Context Name&#39; FORMAT A30
COLUMN EVALUATION_CONTEXT_COMMENT HEADING &#39;Eval Context Comment&#39; FORMAT A40

SELECT EVALUATION_CONTEXT_NAME, EVALUATION_CONTEXT_COMMENT
  FROM USER_EVALUATION_CONTEXTS
  ORDER BY EVALUATION_CONTEXT_NAME;

SET LONGCHUNKSIZE 4000
SET LONG 4000
COLUMN RULE_NAME HEADING &#39;Rule|Name&#39; FORMAT A5
COLUMN RULE_CONDITION HEADING &#39;Rule Condition&#39; FORMAT A35
COLUMN ACTION_CONTEXT_NAME HEADING &#39;Action|Context|Name&#39; FORMAT A10
COLUMN ACTION_CONTEXT_VALUE HEADING &#39;Action|Context|Value&#39; FORMAT A10

SELECT RULE_NAME, 
       RULE_CONDITION,
       AC.NVN_NAME ACTION_CONTEXT_NAME, 
       AC.NVN_VALUE.ACCESSVARCHAR2() ACTION_CONTEXT_VALUE
  FROM USER_RULES R, TABLE(R.RULE_ACTION_CONTEXT.ACTX_LIST) AC
  ORDER BY RULE_NAME;

COLUMN RULE_SET_NAME HEADING &#39;Rule Set Name&#39; FORMAT A20
COLUMN RULE_SET_EVAL_CONTEXT_OWNER HEADING &#39;Eval Context|Owner&#39; FORMAT A12
COLUMN RULE_SET_EVAL_CONTEXT_NAME HEADING &#39;Eval Context Name&#39; FORMAT A25
COLUMN RULE_SET_COMMENT HEADING &#39;Rule Set|Comment&#39; FORMAT A15

SELECT RULE_SET_NAME, 
       RULE_SET_EVAL_CONTEXT_OWNER,
       RULE_SET_EVAL_CONTEXT_NAME,
       RULE_SET_COMMENT
  FROM USER_RULE_SETS
  ORDER BY RULE_SET_NAME;
</pre></dd>
<dd><a id="STREX1416"></a><a id="CEGIDIAA"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;List the Problems in the problems Table</dt>
<dd>
<p>This <code dir="ltr">SELECT</code> statement should show the problems logged previously.</p>
<pre dir="ltr">COLUMN probid HEADING &#39;Problem ID&#39; FORMAT 99999
COLUMN custid HEADING &#39;Customer ID&#39; FORMAT 99
COLUMN priority HEADING &#39;Priority&#39; FORMAT 9
COLUMN description HEADING &#39;Problem Description&#39; FORMAT A30
COLUMN center HEADING &#39;Center&#39; FORMAT A10

SELECT probid, custid, priority, description, center FROM problems
  ORDER BY probid;
</pre>
<p>Your output looks similar to the following:</p>
<pre dir="ltr">Problem ID Customer ID Priority Problem Description            Center
---------- ----------- -------- ------------------------------ ----------
     10301          13        1 no dial tone
     10302          23        2 noise on local calls
     10303          33        3 noise on long distance calls
</pre>
<p>Notice that the <code dir="ltr">Center</code> column is <code dir="ltr">NULL</code> for each new row inserted.</p>
</dd>
<dd><a id="STREX1417"></a><a id="CEGBHCCH"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Dispatch the Problems by Running the problem_dispatch Procedure</dt>
<dd>
<p>Execute the <code dir="ltr">problem_dispatch</code> procedure.</p>
<pre dir="ltr">SET SERVEROUTPUT ON
EXECUTE problem_dispatch;
</pre></dd>
<dd><a id="STREX1418"></a><a id="CEGBCAFC"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;List the Problems in the problems Table</dt>
<dd>
<p>If the problems were dispatched successfully in Step <a href="#CEGBHCCH">3</a>, then this <code dir="ltr">SELECT</code> statement should show the center to which each problem was dispatched in the <code dir="ltr">Center</code> column.</p>
<pre dir="ltr">SELECT probid, custid, priority, description, center FROM problems
  ORDER BY probid;
</pre>
<p>Your output looks similar to the following:</p>
<pre dir="ltr">Problem ID Customer ID Priority Problem Description            Center
---------- ----------- -------- ------------------------------ ----------
     10201          12        1 no dial tone                   Tampa
     10202          22        2 noise on local calls           New York
     10203          32        3 noise on long distance calls   San Jose
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The output will vary depending on which example you used to create the <code dir="ltr">problem_dispatch</code> procedure.</div>
</dd>
<dd><a id="STREX1419"></a><a id="CEGEADIF"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Clean Up the Environment (Optional)</dt>
<dd>
<p>You can clean up the sample environment by dropping the <code dir="ltr">support</code> user.</p>
<pre dir="ltr">CONNECT SYSTEM
Enter password: <span class="italic">password</span>

DROP USER support CASCADE;
</pre></dd>
</dl>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4743">
<tr>
<td class="cellalignment4750">
<table class="cellalignment4748">
<tr>
<td class="cellalignment4747"><a href="loblcrdemo.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4747"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2008, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4752">
<table class="cellalignment4746">
<tr>
<td class="cellalignment4747"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4747"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4747"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4747"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4747"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4747"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>