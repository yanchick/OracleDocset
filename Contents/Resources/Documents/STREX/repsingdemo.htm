<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-104298"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Single-Source%20Heterogeneous%20Replication%C2%A0Example"></a><title>Single-Source Heterogeneous Replication&nbsp;Example</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1042"/>
<meta name="dcterms.created" content="2015-02-05T11:48:35Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Streams Extended Examples"/>
<meta name="dcterms.identifier" content="E17912-10"/>
<meta name="dcterms.isVersionOf" content="STREX"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2008, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="repsimpdemo.htm" title="Previous" type="text/html"/>
<link rel="Next" href="repmultdemo.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17912-10.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/11</span> <!-- End Header -->
<div id="STREX003" class="chapter"><a id="g1138515"></a> <a id="CJFCFAEJ"></a>
<h1 class="chapter"><span class="secnum">2</span> Single-Source Heterogeneous Replication&nbsp;Example</h1>
<p><a id="sthref17"></a><a id="sthref18"></a>This chapter illustrates an example of a single-source heterogeneous replication environment that can be constructed using Oracle Streams, as well as the tasks required to add new objects and databases to such an environment.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1006128">Overview of the Single-Source Heterogeneous Replication Example</a></p>
</li>
<li>
<p><a href="#i1006173">Prerequisites</a></p>
</li>
<li>
<p><a href="#CJFCEGEF">Create Queues and Database Links</a></p>
</li>
<li>
<p><a href="#CJFDEBIE">Example Scripts for Sharing Data from One Database</a></p>
</li>
<li>
<p><a href="#CJFGBBAA">Make DML and DDL Changes to Tables in the hr Schema</a></p>
</li>
<li>
<p><a href="#i1008513">Add Objects to an Existing Oracle Streams Replication Environment</a></p>
</li>
<li>
<p><a href="#CJFHGEDI">Make a DML Change to the hr.employees Table</a></p>
</li>
<li>
<p><a href="#i1008932">Add a Database to an Existing Oracle Streams Replication Environment</a></p>
</li>
<li>
<p><a href="#CJFGFGFH">Make a DML Change to the hr.departments Table</a></p>
</li>
</ul>
<a id="i1006128"></a>
<div id="STREX550" class="sect1">
<h2 class="sect1">Overview of the Single-Source Heterogeneous Replication Example</h2>
<p>This example illustrates using Oracle Streams to replicate data between four databases. The environment is heterogeneous because three of the databases are Oracle databases and one is a Sybase database. DML and DDL changes made to tables in the <code dir="ltr">hr</code> schema at the <code dir="ltr">dbs1.example.com</code> Oracle database are captured and propagated to the other two Oracle databases. Only DML changes are captured and propagated to the <code dir="ltr">dbs4.example.com</code> database, because an apply process cannot apply DDL changes to a non-Oracle database. Changes to the <code dir="ltr">hr</code> schema occur only at <code dir="ltr">dbs1.example.com</code>. The <code dir="ltr">hr</code> schema is read-only at the other databases in the environment.</p>
<p><a href="#i1006138">Figure 2-1</a> provides an overview of the environment.</p>
<div id="STREX551" class="figure">
<p class="titleinfigure"><a id="i1006138"></a>Figure 2-1 Sample Environment that Shares Data from a Single Source Database</p>
<img width="641" height="608" src="img/strex002.gif" alt="Description of Figure 2-1 follows"/><br/>
<a id="sthref19" href="img_text/strex002.htm">Description of &#34;Figure 2-1 Sample Environment that Shares Data from a Single Source Database&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>As illustrated in <a href="#i1006138">Figure 2-1</a>, <code dir="ltr">dbs1.example.com</code> contains the following tables in the <code dir="ltr">hr</code> schema:</p>
<ul>
<li>
<p><code dir="ltr">countries</code></p>
</li>
<li>
<p><code dir="ltr">departments</code></p>
</li>
<li>
<p><code dir="ltr">employees</code></p>
</li>
<li>
<p><code dir="ltr">job_history</code></p>
</li>
<li>
<p><code dir="ltr">jobs</code></p>
</li>
<li>
<p><code dir="ltr">locations</code></p>
</li>
<li>
<p><code dir="ltr">regions</code></p>
</li>
</ul>
<p>This example uses directed networks, which means that captured changes at a source database are propagated to another database through one or more intermediate databases. Here, the <code dir="ltr">dbs1.example.com</code> database propagates changes to the <code dir="ltr">dbs3.example.com</code> database through the intermediate database <code dir="ltr">dbs2.example.com</code>. This configuration is an example of queue forwarding in a directed network. Also, the <code dir="ltr">dbs1.example.com</code> database propagates changes to the <code dir="ltr">dbs2.example.com</code> database, which applies the changes directly to the <code dir="ltr">dbs4.example.com</code> database through an Oracle Database Gateway.</p>
<p>Some of the databases in the environment do not have certain tables. If the database is not an intermediate database for a table and the database does not contain the table, then changes to the table do not need to be propagated to that database. For example, the <code dir="ltr">departments</code>, <code dir="ltr">employees</code>, <code dir="ltr">job_history</code>, and <code dir="ltr">jobs</code> tables do not exist at <code dir="ltr">dbs3.example.com</code>. Therefore, <code dir="ltr">dbs2.example.com</code> does not propagate changes to these tables to <code dir="ltr">dbs3.example.com</code>.</p>
<p>In this example, Oracle Streams is used to perform the following series of actions:</p>
<ol>
<li>
<p>The capture process captures DML and DDL changes for all of the tables in the <code dir="ltr">hr</code> schema and enqueues them at the <code dir="ltr">dbs1.example.com</code> database. In this example, changes to only four of the seven tables are propagated to destination databases, but in the example that illustrates <a href="#i1008513">&#34;Add Objects to an Existing Oracle Streams Replication Environment&#34;</a>, the remaining tables in the <code dir="ltr">hr</code> schema are added to a destination database.</p>
</li>
<li>
<p>The <code dir="ltr">dbs1.example.com</code> database propagates these changes in the form of messages to a queue at <code dir="ltr">dbs2.example.com</code>.</p>
</li>
<li>
<p>At <code dir="ltr">dbs2.example.com</code>, DML changes to the <code dir="ltr">jobs</code> table are transformed into DML changes for the <code dir="ltr">assignments</code> table (which is a direct mapping of <code dir="ltr">jobs</code>) and then applied. Changes to other tables in the <code dir="ltr">hr</code> schema are not applied at&nbsp;<code dir="ltr">dbs2.example.com</code>.</p>
</li>
<li>
<p>Because the queue at <code dir="ltr">dbs3.example.com</code> receives changes from the queue at <code dir="ltr">dbs2.example.com</code> that originated in <code dir="ltr">countries</code>, <code dir="ltr">locations</code>, and <code dir="ltr">regions</code> tables at <code dir="ltr">dbs1.example.com</code>, these changes are propagated from <code dir="ltr">dbs2.example.com</code> to <code dir="ltr">dbs3.example.com</code>. This configuration is an example of directed networks.</p>
</li>
<li>
<p>The apply process at <code dir="ltr">dbs3.example.com</code> applies changes to the <code dir="ltr">countries</code>, <code dir="ltr">locations</code>, and <code dir="ltr">regions</code> tables.</p>
</li>
<li>
<p>Because <code dir="ltr">dbs4.example.com</code>, a Sybase database, receives changes from the queue at <code dir="ltr">dbs2.example.com</code> to the <code dir="ltr">jobs</code> table that originated at <code dir="ltr">dbs1.example.com</code>, these changes are applied remotely from <code dir="ltr">dbs2.example.com</code> using the <code dir="ltr">dbs4.example.com</code> database link through an Oracle Database Gateway. This configuration is an example of heterogeneous support.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i1006173"></a>
<div id="STREX552" class="sect1">
<h2 class="sect1">Prerequisites</h2>
<p>The following prerequisites must be completed before you begin the example in this chapter.</p>
<ul>
<li>
<p><a id="sthref20"></a><a id="sthref21"></a><a id="sthref22"></a>Set the following initialization parameters to the values indicated for all databases in the environment:</p>
<ul>
<li>
<p><code dir="ltr">GLOBAL_NAMES</code>: This parameter must be set to <code dir="ltr">TRUE</code> at each database that is participating in your Oracle Streams environment.</p>
</li>
<li>
<p><code dir="ltr">COMPATIBLE</code>: This parameter must be set to <code dir="ltr">10.2.0</code> or higher.</p>
</li>
<li>
<p><code dir="ltr">STREAMS_POOL_SIZE</code>: Optionally set this parameter to an appropriate value for each database in the environment. This parameter specifies the size of the Oracle Streams pool. The Oracle Streams pool stores messages in a buffered queue and is used for internal communications during parallel capture and apply. When the <code dir="ltr">MEMORY_TARGET</code>, <code dir="ltr">MEMORY_MAX_TARGET</code>, or <code dir="ltr">SGA_TARGET</code> initialization parameter is set to a nonzero value, the Oracle Streams pool size is managed automatically.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink STREP201" href="../STREP/prep_rep.htm#STREP201"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for information about other initialization parameters that are important in an Oracle Streams environment</div>
</li>
<li>
<p><a id="sthref23"></a><a id="sthref24"></a>Any database producing changes that will be captured must be running in <code dir="ltr">ARCHIVELOG</code> mode. In this example, changes are produced at <code dir="ltr">dbs1.example.com</code>, and so <code dir="ltr">dbs1.example.com</code> must be running in <code dir="ltr">ARCHIVELOG</code> mode.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN008" href="../ADMIN/archredo.htm#ADMIN008"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for information about running a database in <code dir="ltr">ARCHIVELOG</code> mode</div>
</li>
<li>
<p>Configure an Oracle Database Gateway on <code dir="ltr">dbs2.example.com</code> to communicate with the Sybase database <code dir="ltr">dbs4.example.com</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink HETER" href="../HETER/toc.htm"><span class="italic">Oracle Database Heterogeneous Connectivity User&#39;s Guide</span></a></div>
</li>
<li>
<p>At the Sybase database <code dir="ltr">dbs4.example.com</code>, set up the <code dir="ltr">hr</code> user.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Your Sybase documentation for information about creating users and tables in your Sybase database</div>
</li>
<li>
<p>Instantiate the <code dir="ltr">hr.jobs</code> table from the <code dir="ltr">dbs1.example.com</code> Oracle database at the <code dir="ltr">dbs4.example.com</code> Sybase database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP106" href="../STREP/hetero.htm#STREP106"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a></div>
</li>
<li>
<p>Configure your network and Oracle Net so that the following databases can communicate with each other:</p>
<ul>
<li>
<p><code dir="ltr">dbs1.example.com</code> and <code dir="ltr">dbs2.example.com</code></p>
</li>
<li>
<p><code dir="ltr">dbs2.example.com</code> and <code dir="ltr">dbs3.example.com</code></p>
</li>
<li>
<p><code dir="ltr">dbs2.example.com</code> and <code dir="ltr">dbs4.example.com</code></p>
</li>
<li>
<p><code dir="ltr">dbs3.example.com</code> and <code dir="ltr">dbs1.example.com</code> (for optional Data Pump network instantiation)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NETAG" href="../NETAG/toc.htm"><span class="italic">Oracle Database Net Services Administrator&#39;s Guide</span></a></div>
</li>
</ul>
</li>
<li>
<p>Create an Oracle Streams administrator at each Oracle database in the replication environment. In this example, the databases are <code dir="ltr">dbs1.example.com</code>, <code dir="ltr">dbs2.example.com</code>, and <code dir="ltr">dbs3.example.com</code>. This example assumes that the user name of the Oracle Streams administrator is <code dir="ltr">strmadmin</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP200" href="../STREP/prep_rep.htm#STREP200"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for instructions about creating an Oracle Streams administrator</div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CJFCEGEF"></a>
<div id="STREX553" class="sect1">
<h2 class="sect1">Create Queues and Database Links</h2>
<p>Complete the following steps to create queues and database links for an Oracle Streams replication environment that includes three Oracle databases and one Sybase database:</p>
<ol>
<li>
<p><a href="#i1112704">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CJFBIJAF">Create the ANYDATA Queue at dbs1.example.com</a></p>
</li>
<li>
<p><a href="#CJFEIBFJ">Create the Database Link at dbs1.example.com</a></p>
</li>
<li>
<p><a href="#CJFBHJFI">Create the ANYDATA Queue at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFDDFBI">Create the Database Links at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFBBDHE">Create the hr.assignments Table at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFFFGFH">Create the ANYDATA Queue at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFDDFBI">Create the Database Links at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFGBHDJ">Drop All of the Tables in the hr Schema at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFGGEEF">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="STREX1194"></a><a id="sthref25"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;<span class="bold">Show Output and Spool Results</span></dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL streams_setup_single.out

/*
</pre></dd>
<dd><a id="STREX1195"></a><a id="CJFBIJAF"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create the ANYDATA Queue at dbs1.example.com</dt>
<dd>
<p>Connect as the Oracle Streams administrator at the database where you want to capture changes. In this example, that database is <code dir="ltr">dbs1.example.com</code>.</p>
<pre dir="ltr">*/

CONNECT strmadmin@dbs1.example.com

/*
</pre>
<p>Run the <code dir="ltr">SET_UP_QUEUE</code> procedure to create a queue named <code dir="ltr">streams_queue</code> at <code dir="ltr">dbs1.example.com</code>. This queue will function as the <code dir="ltr">ANYDATA</code> queue by holding the captured changes that will be propagated to other databases.</p>
<p>Running the <code dir="ltr">SET_UP_QUEUE</code> procedure performs the following actions:</p>
<ul>
<li>
<p>Creates a queue table named <code dir="ltr">streams_queue_table</code>. This queue table is owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>) and uses the default storage of this user.</p>
</li>
<li>
<p>Creates a queue named <code dir="ltr">streams_queue</code> owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>).</p>
</li>
<li>
<p>Starts the queue.</p>
</li>
</ul>
<pre dir="ltr">*/

EXEC DBMS_STREAMS_ADM.SET_UP_QUEUE();

/*
</pre></dd>
<dd><a id="STREX1196"></a><a id="CJFEIBFJ"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Create the Database Link at dbs1.example.com<a class="dashingAutolink" name="autolink-104289"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref26"></a></dt>
<dd>
<p>Create the database link from the database where changes are captured to the database where changes are propagated. In this example, the database where changes are captured is <code dir="ltr">dbs1.example.com</code>, and these changes are propagated to&nbsp;<code dir="ltr">dbs2.example.com</code>.</p>
<pre dir="ltr">*/

ACCEPT password PROMPT &#39;Enter password for user: &#39; HIDE

CREATE DATABASE LINK dbs2.example.com CONNECT TO strmadmin 
   IDENTIFIED BY &amp;password USING &#39;dbs2.example.com&#39;;

/*
</pre></dd>
<dd><a id="STREX1197"></a><a id="CJFBHJFI"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create the ANYDATA Queue at dbs2.example.com</dt>
<dd>
<p>Connect as the Oracle Streams administrator at <code dir="ltr">dbs2.example.com</code>.</p>
<pre dir="ltr">*/

CONNECT strmadmin@dbs2.example.com

/*
</pre>
<p>Run the <code dir="ltr">SET_UP_QUEUE</code> procedure to create a queue named <code dir="ltr">streams_queue</code> at <code dir="ltr">dbs2.example.com</code>. This queue will function as the <code dir="ltr">ANYDATA</code> queue by holding the changes that will be applied at this database and the changes that will be propagated to other databases.</p>
<p>Running the <code dir="ltr">SET_UP_QUEUE</code> procedure performs the following actions:</p>
<ul>
<li>
<p>Creates a queue table named <code dir="ltr">streams_queue_table</code>. This queue table is owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>) and uses the default storage of this user.</p>
</li>
<li>
<p>Creates a queue named <code dir="ltr">streams_queue</code> owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>).</p>
</li>
<li>
<p>Starts the queue.</p>
</li>
</ul>
<pre dir="ltr">*/

EXEC  DBMS_STREAMS_ADM.SET_UP_QUEUE();

/*
</pre></dd>
<dd><a id="STREX1198"></a><a id="CJFDDFBI"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create the Database Links at dbs2.example.com</dt>
<dd>
<p>Create the database links to the databases where changes are propagated. In this example, database <code dir="ltr">dbs2.example.com</code> propagates changes to <code dir="ltr">dbs3.example.com</code>, which is another Oracle database, and to <code dir="ltr">dbs4.example.com</code>, which is a Sybase database. Notice that the database link to the Sybase database connects to the owner of the tables, not to the Oracle Streams administrator. This database link can connect to any user at <code dir="ltr">dbs4.example.com</code> that has privileges to change the <code dir="ltr">hr.jobs</code> table at that database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
On some non-Oracle databases, including Sybase, you must ensure that the characters in the user name and password are in the correct case. Therefore, double quotation marks are specified for the user name and password at the Sybase database.</div>
<pre dir="ltr">*/

CREATE DATABASE LINK dbs3.example.com CONNECT TO strmadmin 
   IDENTIFIED BY &amp;password USING &#39;dbs3.example.com&#39;;

CREATE DATABASE LINK dbs4.example.com CONNECT TO &#34;hr&#34; 
   IDENTIFIED BY &#34;&amp;password&#34; USING &#39;dbs4.example.com&#39;;

/*
</pre></dd>
<dd><a id="STREX1199"></a><a id="CJFBBDHE"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Create the hr.assignments Table at dbs2.example.com</dt>
<dd>
<p>This example illustrates a custom rule-based transformation in which changes to the <code dir="ltr">hr.jobs</code> table at <code dir="ltr">dbs1.example.com</code> are transformed into changes to the <code dir="ltr">hr.assignments</code> table at <code dir="ltr">dbs2.example.com</code>. You must create the <code dir="ltr">hr.assignments</code> table on <code dir="ltr">dbs2.example.com</code> for the transformation portion of this example to work properly.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Instead of using a custom rule-based transformation to change the name of the table, you can use a <code dir="ltr">RENAME_TABLE</code> declarative rule-based transformation. See <a class="olink STRMS151" href="../STRMS/strms_transform.htm#STRMS151"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</div>
<p>Connect as hr at <code dir="ltr">dbs2.example.com</code>.</p>
<pre dir="ltr">*/

CONNECT hr@dbs2.example.com

/*
</pre>
<p>Create the <code dir="ltr">hr.assignments</code> table in the <code dir="ltr">dbs2.example.com</code> database.</p>
<pre dir="ltr">*/

CREATE TABLE hr.assignments AS SELECT * FROM hr.jobs;

ALTER TABLE hr.assignments ADD PRIMARY KEY (job_id);

/*
</pre></dd>
<dd><a id="STREX1200"></a><a id="CJFFFGFH"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Create the ANYDATA Queue at dbs3.example.com</dt>
<dd>
<p>Connect as the Oracle Streams administrator at <code dir="ltr">dbs3.example.com</code>.</p>
<pre dir="ltr">*/

CONNECT strmadmin@dbs3.example.com

/*
</pre>
<p>Run the <code dir="ltr">SET_UP_QUEUE</code> procedure to create a queue named <code dir="ltr">streams_queue</code> at <code dir="ltr">dbs3.example.com</code>. This queue will function as the <code dir="ltr">ANYDATA</code> queue by holding the changes that will be applied at this database.</p>
<p>Running the <code dir="ltr">SET_UP_QUEUE</code> procedure performs the following actions:</p>
<ul>
<li>
<p>Creates a queue table named <code dir="ltr">streams_queue_table</code>. This queue table is owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>) and uses the default storage of this user.</p>
</li>
<li>
<p>Creates a queue named <code dir="ltr">streams_queue</code> owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>).</p>
</li>
<li>
<p>Starts the queue.</p>
</li>
</ul>
<pre dir="ltr">*/

EXEC  DBMS_STREAMS_ADM.SET_UP_QUEUE();

/*
</pre></dd>
<dd><a id="STREX1201"></a><a id="sthref27"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Create a Database Link at dbs3.example.com<a class="dashingAutolink" name="autolink-104290"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref28"></a> to dbs1.example.com</dt>
<dd>
<p>Create a database link from <code dir="ltr">dbs3.example.com</code> to <code dir="ltr">dbs1.example.com</code>. Later in this example, this database link is used for the instantiation of some of the database objects that were dropped in Step <a href="#CJFGBHDJ">9</a>. This example uses the <code dir="ltr">DBMS_DATAPUMP</code> package to perform a network import of these database objects directly from the <code dir="ltr">dbs1.example.com</code> database. Because this example performs a network import, no dump file is required.</p>
<p>Alternatively, you can perform an export at the source database <code dir="ltr">dbs1.example.com</code>, transfer the export dump file to the destination database <code dir="ltr">dbs3.example.com</code>, and then import the export dump file at the destination database. In this case, the database link created in this step is not required.</p>
<pre dir="ltr">*/

CREATE DATABASE LINK dbs1.example.com CONNECT TO strmadmin 
   IDENTIFIED BY &amp;password USING &#39;dbs1.example.com&#39;;

/*
</pre></dd>
<dd><a id="STREX1202"></a><a id="CJFGBHDJ"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Drop All of the Tables in the hr Schema at dbs3.example.com</dt>
<dd>
<p>This example illustrates instantiating tables in the <code dir="ltr">hr</code> schema by importing them from <code dir="ltr">dbs1.example.com</code> into <code dir="ltr">dbs3.example.com</code> with Data Pump. You must delete these tables at <code dir="ltr">dbs3.example.com</code> for the instantiation portion of this example to work properly.</p>
<p>Connect as <code dir="ltr">hr</code> at <code dir="ltr">dbs3.example.com</code>.</p>
<pre dir="ltr">*/

CONNECT hr@dbs3.example.com

/*
</pre>
<p>Drop all tables in the <code dir="ltr">hr</code> schema in the <code dir="ltr">dbs3.example.com</code> database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you complete this step and drop all of the tables in the <code dir="ltr">hr</code> schema, then you should complete the remaining sections of this example to reinstantiate the <code dir="ltr">hr</code> schema at <code dir="ltr">dbs3.example.com</code>. If the <code dir="ltr">hr</code> schema does not exist in an Oracle database, then some examples in the Oracle documentation set can fail.</div>
<pre dir="ltr">*/

DROP TABLE hr.countries CASCADE CONSTRAINTS;
DROP TABLE hr.departments CASCADE CONSTRAINTS;
DROP TABLE hr.employees CASCADE CONSTRAINTS;
DROP TABLE hr.job_history CASCADE CONSTRAINTS;
DROP TABLE hr.jobs CASCADE CONSTRAINTS;
DROP TABLE hr.locations CASCADE CONSTRAINTS;
DROP TABLE hr.regions CASCADE CONSTRAINTS;

/*
</pre></dd>
<dd><a id="STREX1203"></a><a id="CJFGGEEF"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">streams_setup_single.out</code> spool file to ensure that all actions finished successfully after this script is completed.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1112586"></a>/*************************** END OF SCRIPT ******************************/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="CJFDEBIE"></a>
<div id="STREX554" class="sect1">
<h2 class="sect1">Example Scripts for Sharing Data from One Database</h2>
<p>This example illustrates two ways to accomplish the replication of the tables in the <code dir="ltr">hr</code> schema using Oracle Streams.</p>
<ul>
<li>
<p><a href="#i1112610">&#34;Simple Configuration for Sharing Data from a Single Database&#34;</a> demonstrates a simple way to configure the environment. This example uses the <code dir="ltr">DBMS_STREAMS_ADM</code> package to create a capture process, propagations, and apply processes, as well as the rule sets associated with them. Using the <code dir="ltr">DBMS_STREAMS_ADM</code> package is the simplest way to configure an Oracle Streams environment.</p>
</li>
<li>
<p><a href="#CJFJFCGF">&#34;Flexible Configuration for Sharing Data from a Single Database&#34;</a> demonstrates a more flexible way to configure this environment. This example uses the <code dir="ltr">DBMS_CAPTURE_ADM</code> package to create a capture process, the <code dir="ltr">DBMS_PROPAGATION_ADM</code> package to create propagations, and the <code dir="ltr">DBMS_APPLY_ADM</code> package to create apply processes. Also, this example uses the <code dir="ltr">DBMS_RULES_ADM</code> package to create and populate the rule sets associated with these capture processes, propagations, and apply processes. Using these packages, instead of the <code dir="ltr">DBMS_STREAMS_ADM</code> package, provides more configuration options and flexibility.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
These examples illustrate two different ways to configure the same Oracle Streams environment. Therefore, you should run only one of the examples for a particular distributed database system. Otherwise, errors stating that objects already exist will result.</div>
</li>
</ul>
<a id="i1112610"></a>
<div id="STREX555" class="sect2">
<h3 class="sect2">Simple Configuration for Sharing Data from a Single Database</h3>
<p>Complete the following steps to specify the capture, propagation, and apply definitions using primarily the <code dir="ltr">DBMS_STEAMS_ADM</code> package.</p>
<ol>
<li>
<p><a href="#i1112704">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CJFFJJHD">Configure Propagation at dbs1.example.com</a></p>
</li>
<li id="CJFBEBJF">
<p><a href="#CJFDDFCE">Configure the Capture Process at dbs1.example.com</a></p>
</li>
<li>
<p><a href="#CJFDCEDE">Set the Instantiation SCN for the Existing Tables at Other Databases</a></p>
</li>
<li>
<p><a href="#CJFDCDIB">Instantiate the dbs1.example.com Tables at dbs3.example.com</a></p>
</li>
<li id="i1112640">
<p><a href="#CJFFBEDG">Configure the Apply Process at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFHFFDG">Specify hr as the Apply User for the Apply Process at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFEDFGH">Grant the hr User Execute Privilege on the Apply Process Rule Set</a></p>
</li>
<li>
<p><a href="#CJFJCICF">Start the Apply Process at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFEGFHA">Configure Propagation at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFBIBBH">Create the Custom Rule-Based Transformation for Row LCRs at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFDJGAG">Configure the Apply Process for Local Apply at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFGBFHD">Specify hr as the Apply User for the Apply Process at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFJJCIC">Grant the hr User Execute Privilege on the Apply Process Rule Set</a></p>
</li>
<li>
<p><a href="#CJFGGJDH">Start the Apply Process at dbs2.example.com for Local Apply</a></p>
</li>
<li>
<p><a href="#CJFEACAG">Configure the Apply Process at dbs2.example.com for Apply at dbs4.example.com</a></p>
</li>
<li>
<p><a href="#CJFGCFEE">Start the Apply Process at dbs2.example.com for Apply at dbs4.example.com</a></p>
</li>
<li>
<p><a href="#CJFCHABB">Start the Capture Process at dbs1.example.com</a></p>
</li>
<li>
<p><a href="#CJFHJAGI">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<a id="i1112704"></a>
<dl>
<dd><a id="STREX1204"></a><a id="CJFJDEEJ"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL streams_share_schema1.out

/*
</pre></dd>
<dd><a id="STREX1205"></a><a id="CJFFJJHD"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Configure Propagation at dbs1.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs1.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs1.example.com

/*
</pre>
<p>Configure and schedule propagation of DML and DDL changes in the <code dir="ltr">hr</code> schema from the queue at <code dir="ltr">dbs1.example.com</code> to the queue at <code dir="ltr">dbs2.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_PROPAGATION_RULES(
    schema_name             =&gt; &#39;hr&#39;, 
    streams_name            =&gt; &#39;dbs1_to_dbs2&#39;, 
    source_queue_name       =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_queue_name  =&gt; &#39;strmadmin.streams_queue@dbs2.example.com&#39;,
    include_dml             =&gt; TRUE,
    include_ddl             =&gt; TRUE,
    source_database         =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule          =&gt; TRUE,
    queue_to_queue          =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1206"></a><a id="CJFDDFCE"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Configure the Capture Process at dbs1.example.com</dt>
<dd>
<p>Configure the capture process to capture changes to the entire <code dir="ltr">hr</code> schema at <code dir="ltr">dbs1.example.com</code>. This step specifies that changes to the tables in the specified schema are captured by the capture process and enqueued into the specified queue.</p>
<p>This step also prepares the <code dir="ltr">hr</code> schema for instantiation and enables supplemental logging for any primary key, unique key, bitmap index, and foreign key columns in the tables in this schema. Supplemental logging places additional information in the redo log for changes made to tables. The apply process needs this extra information to perform certain operations, such as unique row identification and conflict resolution. Because <code dir="ltr">dbs1.example.com</code> is the only database where changes are captured in this environment, it is the only database where you must specify supplemental logging for the tables in the <code dir="ltr">hr</code> schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP107" href="../STREP/prep_rep.htm#STREP107"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a></div>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name    =&gt; &#39;hr&#39;,   
    streams_type   =&gt; &#39;capture&#39;,
    streams_name   =&gt; &#39;capture&#39;,
    queue_name     =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml    =&gt; TRUE, 
    include_ddl    =&gt; TRUE,
    inclusion_rule =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1207"></a><a id="CJFDCEDE"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Set the Instantiation SCN for the Existing Tables at Other Databases</dt>
<dd>
<p>In this example, the <code dir="ltr">hr.jobs</code> table already exists at <code dir="ltr">dbs2.example.com</code> and <code dir="ltr">dbs4.example.com</code>. At <code dir="ltr">dbs2.example.com</code>, this table is named <code dir="ltr">assignments</code>, but it has the same shape and data as the <code dir="ltr">jobs</code> table at <code dir="ltr">dbs1.example.com</code>. Also, in this example, <code dir="ltr">dbs4.example.com</code> is a Sybase database. All of the other tables in the Oracle Streams environment are instantiated at the other destination databases using Data Pump import.</p>
<p>Because the <code dir="ltr">hr.jobs</code> table already exists at <code dir="ltr">dbs2.example.com</code> and <code dir="ltr">dbs4.example.com</code>, this example uses the <code dir="ltr">GET_SYSTEM_CHANGE_NUMBER</code> function in the <code dir="ltr">DBMS_FLASHBACK</code> package at <code dir="ltr">dbs1.example.com</code> to obtain the current SCN for the database. This SCN is used at <code dir="ltr">dbs2.example.com</code> to run the <code dir="ltr">SET_TABLE_INSTANTIATION_SCN</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package. Running this procedure twice sets the instantiation SCN for the <code dir="ltr">hr.jobs</code> table at <code dir="ltr">dbs2.example.com</code> and <code dir="ltr">dbs4.example.com</code>.</p>
<p>The <code dir="ltr">SET_TABLE_INSTANTIATION_SCN</code> procedure controls which LCRs for a table are ignored by an apply process and which LCRs for a table are applied by an apply process. If the commit SCN of an LCR for a table from a source database is less than or equal to the instantiation SCN for that table at a destination database, then the apply process at the destination database discards the LCR. Otherwise, the apply process applies the LCR.</p>
<p>In this example, both of the apply processes at <code dir="ltr">dbs2.example.com</code> will apply transactions to the <code dir="ltr">hr.jobs</code> table with SCNs that were committed after SCN obtained in this step.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This example assumes that the contents of the <code dir="ltr">hr.jobs</code> table at <code dir="ltr">dbs1.example.com</code>, <code dir="ltr">dbs2.example.com</code> (as <code dir="ltr">hr.assignments</code>), and <code dir="ltr">dbs4.example.com</code> are consistent when you complete this step. You might want to lock the table at each database while you complete this step to ensure consistency.</div>
<pre dir="ltr">*/

DECLARE
  iscn  NUMBER;         -- Variable to hold instantiation SCN value
BEGIN
  iscn := DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER();
  DBMS_APPLY_ADM.SET_TABLE_INSTANTIATION_SCN@DBS2.EXAMPLE.COM(
    source_object_name    =&gt; &#39;hr.jobs&#39;,
    source_database_name  =&gt; &#39;dbs1.example.com&#39;,
    instantiation_scn     =&gt; iscn);
  DBMS_APPLY_ADM.SET_TABLE_INSTANTIATION_SCN@DBS2.EXAMPLE.COM(
    source_object_name    =&gt; &#39;hr.jobs&#39;,
    source_database_name  =&gt; &#39;dbs1.example.com&#39;,
    instantiation_scn     =&gt; iscn,
    apply_database_link   =&gt; &#39;dbs4.example.com&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1208"></a><a id="CJFDCDIB"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Instantiate the dbs1.example.com Tables at dbs3.example.com<a class="dashingAutolink" name="autolink-104291"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref29"></a></dt>
<dd>
<p>This example performs a network Data Pump import of the following tables:</p>
<ul>
<li>
<p><code dir="ltr">hr.countries</code></p>
</li>
<li>
<p><code dir="ltr">hr.locations</code></p>
</li>
<li>
<p><code dir="ltr">hr.regions</code></p>
</li>
</ul>
<p>A network import means that Data Pump imports these tables from <code dir="ltr">dbs1.example.com</code> without using an export dump file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for information about performing an import</div>
<p>Connect to <code dir="ltr">dbs3.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs3.example.com

/*
</pre>
<p>This example will do a table import using the <code dir="ltr">DBMS_DATAPUMP</code> package. For simplicity, exceptions from any of the API calls will not be trapped. However, Oracle recommends that you define exception handlers and call <code dir="ltr">GET_STATUS</code> to retrieve more detailed error information if a failure occurs. If you want to monitor the import, then query the <code dir="ltr">DBA_DATAPUMP_JOBS</code> data dictionary view at the import database.</p>
<pre dir="ltr">*/

SET SERVEROUTPUT ON
DECLARE
  h1        NUMBER;         -- Data Pump job handle
  sscn      NUMBER;         -- Variable to hold current source SCN
  job_state VARCHAR2(30);   -- To keep track of job state
  js        ku$_JobStatus;  -- The job status from GET_STATUS
  sts       ku$_Status;     -- The status object returned by GET_STATUS
  job_not_exist    exception;
  pragma exception_init(job_not_exist, -31626);
BEGIN
-- Create a (user-named) Data Pump job to do a table-level import.
  h1 := DBMS_DATAPUMP.OPEN(
          operation   =&gt; &#39;IMPORT&#39;,
          job_mode    =&gt; &#39;TABLE&#39;,
          remote_link =&gt; &#39;DBS1.EXAMPLE.COM&#39;,
          job_name    =&gt; &#39;dp_sing1&#39;);
-- A metadata filter is used to specify the schema that owns the tables 
-- that will be imported.
  DBMS_DATAPUMP.METADATA_FILTER(
    handle    =&gt; h1,
    name      =&gt; &#39;SCHEMA_EXPR&#39;,
    value     =&gt; &#39;=&#39;&#39;HR&#39;&#39;&#39;);
-- A metadata filter is used to specify the tables that will be imported.
  DBMS_DATAPUMP.METADATA_FILTER(
    handle    =&gt; h1,
    name      =&gt; &#39;NAME_EXPR&#39;,
    value     =&gt; &#39;IN(&#39;&#39;COUNTRIES&#39;&#39;, &#39;&#39;REGIONS&#39;&#39;, &#39;&#39;LOCATIONS&#39;&#39;)&#39;);
-- Get the current SCN of the source database, and set the FLASHBACK_SCN 
-- parameter to this value to ensure consistency between all of the 
-- objects included in the import.
  sscn := DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER@dbs1.example.com(); 
  DBMS_DATAPUMP.SET_PARAMETER(
    handle =&gt; h1,
    name   =&gt; &#39;FLASHBACK_SCN&#39;,
    value  =&gt; sscn); 
-- Start the job. 
  DBMS_DATAPUMP.START_JOB(h1);
-- The import job should be running. In the following loop, the job
-- is monitored until it completes.
  job_state := &#39;UNDEFINED&#39;;
  BEGIN
    WHILE (job_state != &#39;COMPLETED&#39;) AND (job_state != &#39;STOPPED&#39;) LOOP
      sts:=DBMS_DATAPUMP.GET_STATUS(
             handle  =&gt; h1,
             mask    =&gt; DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR +
                        DBMS_DATAPUMP.KU$_STATUS_JOB_STATUS +
                        DBMS_DATAPUMP.KU$_STATUS_WIP,
             timeout =&gt; -1);
      js := sts.job_status;
      DBMS_LOCK.SLEEP(10);
      job_state := js.state;
    END LOOP;
  -- Gets an exception when job no longer exists
    EXCEPTION WHEN job_not_exist THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Data Pump job has completed&#39;);
      DBMS_OUTPUT.PUT_LINE(&#39;Instantiation SCN: &#39; ||sscn);
  END;
END;
/

/*
</pre></dd>
<dd><a id="STREX1209"></a><a id="CJFFBEDG"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Configure the Apply Process at dbs3.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs3.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs3.example.com

/*
</pre>
<p>Configure <code dir="ltr">dbs3.example.com</code> to apply changes to the <code dir="ltr">countries</code> table, <code dir="ltr">locations</code> table, and <code dir="ltr">regions</code> table.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name      =&gt; &#39;hr.countries&#39;,
    streams_type    =&gt; &#39;apply&#39;, 
    streams_name    =&gt; &#39;apply&#39;,
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name      =&gt; &#39;hr.locations&#39;,
    streams_type    =&gt; &#39;apply&#39;, 
    streams_name    =&gt; &#39;apply&#39;,
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name      =&gt; &#39;hr.regions&#39;,
    streams_type    =&gt; &#39;apply&#39;, 
    streams_name    =&gt; &#39;apply&#39;,
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1210"></a><a id="CJFHFFDG"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Specify hr as the Apply User for the Apply Process at dbs3.example.com</dt>
<dd>
<p>In this example, the <code dir="ltr">hr</code> user owns all of the database objects for which changes are applied by the apply process at this database. Therefore, <code dir="ltr">hr</code> already has the necessary privileges to change these database objects, and it is convenient to make <code dir="ltr">hr</code> the apply user.</p>
<p>When the apply process was created in the previous step, the Oracle Streams administrator <code dir="ltr">strmadmin</code> was specified as the apply user by default, because <code dir="ltr">strmadmin</code> ran the procedure that created the apply process. Instead of specifying hr as the apply user, you could retain <code dir="ltr">strmadmin</code> as the apply user, but then you must grant <code dir="ltr">strmadmin</code> privileges on all of the database objects for which changes are applied and privileges to execute all user procedures used by the apply process. In an environment where an apply process applies changes to database objects in multiple schemas, it might be more convenient to use the Oracle Streams administrator as the apply user.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP200" href="../STREP/prep_rep.htm#STREP200"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about configuring an Oracle Streams administrator</div>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name =&gt; &#39;apply&#39;,
    apply_user =&gt; &#39;hr&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1211"></a><a id="CJFEDFGH"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Grant the hr User Execute Privilege on the Apply Process Rule Set</dt>
<dd>
<p>Because the <code dir="ltr">hr</code> user was specified as the apply user in the previous step, the <code dir="ltr">hr</code> user requires <code dir="ltr">EXECUTE</code> privilege on the positive rule set used by the apply process</p>
<pre dir="ltr">*/

DECLARE
   rs_name  VARCHAR2(64);   -- Variable to hold rule set name
BEGIN
  SELECT RULE_SET_OWNER||&#39;.&#39;||RULE_SET_NAME 
    INTO rs_name 
    FROM DBA_APPLY 
    WHERE APPLY_NAME=&#39;APPLY&#39;;
  DBMS_RULE_ADM.GRANT_OBJECT_PRIVILEGE(
    privilege   =&gt; SYS.DBMS_RULE_ADM.EXECUTE_ON_RULE_SET,
    object_name =&gt; rs_name,
    grantee     =&gt; &#39;hr&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1212"></a><a id="CJFJCICF"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Start the Apply Process at dbs3.example.com</dt>
<dd>
<p>Set the <code dir="ltr">disable_on_error</code> parameter to <code dir="ltr">n</code> so that the apply process will not be disabled if it encounters an error, and start the apply process at <code dir="ltr">dbs3.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.SET_PARAMETER(
    apply_name  =&gt; &#39;apply&#39;, 
    parameter   =&gt; &#39;disable_on_error&#39;, 
    value       =&gt; &#39;N&#39;);
END;
/
 
BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1213"></a><a id="CJFEGFHA"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Configure Propagation at dbs2.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs2.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs2.example.com

/*
</pre>
<p>Configure and schedule propagation from the queue at <code dir="ltr">dbs2.example.com</code> to the queue at <code dir="ltr">dbs3.example.com</code>. You must specify this propagation for each table that will apply changes at <code dir="ltr">dbs3.example.com</code>. This configuration is an example of directed networks because the changes at <code dir="ltr">dbs2.example.com</code> originated at <code dir="ltr">dbs1.example.com</code>.</p>
<pre dir="ltr">*/
 
BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_PROPAGATION_RULES(
    table_name               =&gt; &#39;hr.countries&#39;,
    streams_name             =&gt; &#39;dbs2_to_dbs3&#39;,
    source_queue_name        =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_queue_name   =&gt; &#39;strmadmin.streams_queue@dbs3.example.com&#39;, 
    include_dml              =&gt; TRUE,
    include_ddl              =&gt; TRUE,
    source_database          =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule           =&gt; TRUE,
    queue_to_queue           =&gt; TRUE);
END;
/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_PROPAGATION_RULES(
    table_name              =&gt; &#39;hr.locations&#39;,
    streams_name            =&gt; &#39;dbs2_to_dbs3&#39;,
    source_queue_name       =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_queue_name  =&gt; &#39;strmadmin.streams_queue@dbs3.example.com&#39;, 
    include_dml             =&gt; TRUE,
    include_ddl             =&gt; TRUE,
    source_database         =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule          =&gt; TRUE);
END;
/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_PROPAGATION_RULES(
    table_name              =&gt; &#39;hr.regions&#39;,
    streams_name            =&gt; &#39;dbs2_to_dbs3&#39;,
    source_queue_name       =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_queue_name  =&gt; &#39;strmadmin.streams_queue@dbs3.example.com&#39;, 
    include_dml             =&gt; TRUE,
    include_ddl             =&gt; TRUE,
    source_database         =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule          =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1214"></a><a id="CJFBIBBH"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Create the Custom Rule-Based Transformation for Row LCRs at dbs2.example.com<a class="dashingAutolink" name="autolink-104292"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref30"></a><a class="dashingAutolink" name="autolink-104293"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref31"></a><a class="dashingAutolink" name="autolink-104294"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref32"></a></dt>
<dd>
<p>Connect to <code dir="ltr">dbs2.example.com</code> as the <code dir="ltr">hr</code> user.</p>
<pre dir="ltr">*/
 
CONNECT hr@dbs2.example.com

/*
</pre>
<p>Create the custom rule-based transformation function that transforms row changes resulting from DML statements to the <code dir="ltr">jobs</code> table from <code dir="ltr">dbs1.example.com</code> into row changes to the <code dir="ltr">assignments</code> table on <code dir="ltr">dbs2.example.com</code>.</p>
<p>The following function transforms every row LCR for the <code dir="ltr">jobs</code> table into a row LCR for the <code dir="ltr">assignments</code> table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If DDL changes were also applied to the <code dir="ltr">assignments</code> table, then another transformation would be required for the DDL LCRs. This transformation would need to change the object name and the DDL&nbsp;text.</div>
<pre dir="ltr">*/

CREATE OR REPLACE FUNCTION hr.to_assignments_trans_dml(
  p_in_data in ANYDATA) 
  RETURN ANYDATA IS out_data SYS.LCR$_ROW_RECORD;
  tc   pls_integer;
BEGIN
  -- Typecast AnyData to LCR$_ROW_RECORD
     tc := p_in_data.GetObject(out_data);
     IF out_data.GET_OBJECT_NAME() = &#39;JOBS&#39;
     THEN
  -- Transform the in_data into the out_data
     out_data.SET_OBJECT_NAME(&#39;ASSIGNMENTS&#39;);
     END IF;
  -- Convert to AnyData
     RETURN ANYDATA.ConvertObject(out_data);
END;
/

/*
</pre></dd>
<dd><a id="STREX1215"></a><a id="CJFDJGAG"></a></dd>
<dt class="seghead">Step 12&nbsp;&nbsp;&nbsp;Configure the Apply Process for Local Apply at dbs2.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs2.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs2.example.com

/*
</pre>
<p><a id="sthref33"></a><a id="sthref34"></a>Configure <code dir="ltr">dbs2.example.com</code> to apply changes to the <code dir="ltr">assignments</code> table. Remember that the <code dir="ltr">assignments</code> table receives changes from the <code dir="ltr">jobs</code> table at <code dir="ltr">dbs1.example.com</code>.</p>
<pre dir="ltr">*/

DECLARE
  to_assignments_rulename_dml   VARCHAR2(30);
  dummy_rule                    VARCHAR2(30);
BEGIN
--  DML changes to the jobs table from dbs1.example.com are applied 
--  to the assignments table. The to_assignments_rulename_dml variable 
--  is an out parameter in this call.
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name      =&gt; &#39;hr.jobs&#39;, -- jobs, not assignments, specified
    streams_type    =&gt; &#39;apply&#39;, 
    streams_name    =&gt; &#39;apply_dbs2&#39;,
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; FALSE,
    source_database =&gt; &#39;dbs1.example.com&#39;,
    dml_rule_name   =&gt; to_assignments_rulename_dml,
    ddl_rule_name   =&gt; dummy_rule,
    inclusion_rule  =&gt; TRUE); 
--  Modify the rule for the hr.jobs table to use the transformation function.
  DBMS_STREAMS_ADM.SET_RULE_TRANSFORM_FUNCTION(
    rule_name          =&gt; to_assignments_rulename_dml,
    transform_function =&gt; &#39;hr.to_assignments_trans_dml&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1216"></a><a id="CJFGBFHD"></a></dd>
<dt class="seghead">Step 13&nbsp;&nbsp;&nbsp;Specify hr as the Apply User for the Apply Process at dbs2.example.com</dt>
<dd>
<p>In this example, the <code dir="ltr">hr</code> user owns all of the database objects for which changes are applied by the apply process at this database. Therefore, <code dir="ltr">hr</code> already has the necessary privileges to change these database objects, and it is convenient to make <code dir="ltr">hr</code> the apply user.</p>
<p>When the apply process was created in the previous step, the Oracle Streams administrator <code dir="ltr">strmadmin</code> was specified as the apply user by default, because <code dir="ltr">strmadmin</code> ran the procedure that created the apply process. Instead of specifying hr as the apply user, you could retain <code dir="ltr">strmadmin</code> as the apply user, but then you must grant <code dir="ltr">strmadmin</code> privileges on all of the database objects for which changes are applied and privileges to execute all user procedures used by the apply process. In an environment where an apply process applies changes to database objects in multiple schemas, it might be more convenient to use the Oracle Streams administrator as the apply user.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP200" href="../STREP/prep_rep.htm#STREP200"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about configuring an Oracle Streams administrator</div>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name =&gt; &#39;apply_dbs2&#39;,
    apply_user =&gt; &#39;hr&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1217"></a><a id="CJFJJCIC"></a></dd>
<dt class="seghead">Step 14&nbsp;&nbsp;&nbsp;Grant the hr User Execute Privilege on the Apply Process Rule Set</dt>
<dd>
<p>Because the <code dir="ltr">hr</code> user was specified as the apply user in the previous step, the <code dir="ltr">hr</code> user requires <code dir="ltr">EXECUTE</code> privilege on the positive rule set used by the apply process</p>
<pre dir="ltr">*/

DECLARE
   rs_name  VARCHAR2(64);   -- Variable to hold rule set name
BEGIN
  SELECT RULE_SET_OWNER||&#39;.&#39;||RULE_SET_NAME 
    INTO rs_name 
    FROM DBA_APPLY 
    WHERE APPLY_NAME=&#39;APPLY_DBS2&#39;;
  DBMS_RULE_ADM.GRANT_OBJECT_PRIVILEGE(
    privilege   =&gt; SYS.DBMS_RULE_ADM.EXECUTE_ON_RULE_SET,
    object_name =&gt; rs_name,
    grantee     =&gt; &#39;hr&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1218"></a><a id="CJFGGJDH"></a></dd>
<dt class="seghead">Step 15&nbsp;&nbsp;&nbsp;Start the Apply Process at dbs2.example.com for Local Apply</dt>
<dd>
<p>Set the <code dir="ltr">disable_on_error</code> parameter to <code dir="ltr">n</code> so that the apply process will not be disabled if it encounters an error, and start the apply process for local apply at <code dir="ltr">dbs2.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.SET_PARAMETER(
    apply_name  =&gt; &#39;apply_dbs2&#39;, 
    parameter   =&gt; &#39;disable_on_error&#39;, 
    value       =&gt; &#39;N&#39;);
END;
/
 
BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply_dbs2&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1219"></a><a id="CJFEACAG"></a></dd>
<dt class="seghead">Step 16&nbsp;&nbsp;&nbsp;Configure the Apply Process at dbs2.example.com for Apply at dbs4.example.com<a class="dashingAutolink" name="autolink-104295"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref35"></a></dt>
<dd>
<p>Configure the apply process for <code dir="ltr">dbs4.example.com</code>, which is a Sybase database. The <code dir="ltr">dbs2.example.com</code> database is acting as a gateway to <code dir="ltr">dbs4.example.com</code>. Therefore, the apply process for <code dir="ltr">dbs4.example.com</code> must be configured at <code dir="ltr">dbs2.example.com</code>. The apply process cannot apply DDL changes to non-Oracle databases. Therefore, the <code dir="ltr">include_ddl</code> parameter is set to <code dir="ltr">FALSE</code> when the <code dir="ltr">ADD_TABLE_RULES</code> procedure is run.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.CREATE_APPLY(
    queue_name          =&gt; &#39;strmadmin.streams_queue&#39;,
    apply_name          =&gt; &#39;apply_dbs4&#39;,
    apply_database_link =&gt; &#39;dbs4.example.com&#39;,
    apply_captured      =&gt; TRUE);
END;
/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name      =&gt; &#39;hr.jobs&#39;,
    streams_type    =&gt; &#39;apply&#39;, 
    streams_name    =&gt; &#39;apply_dbs4&#39;,
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; FALSE,
    source_database =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1220"></a><a id="CJFGCFEE"></a></dd>
<dt class="seghead">Step 17&nbsp;&nbsp;&nbsp;Start the Apply Process at dbs2.example.com for Apply at dbs4.example.com</dt>
<dd>
<p>Set the <code dir="ltr">disable_on_error</code> parameter to <code dir="ltr">n</code> so that the apply process will not be disabled if it encounters an error, and start the remote apply for Sybase using database link <code dir="ltr">dbs4.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.SET_PARAMETER(
    apply_name  =&gt; &#39;apply_dbs4&#39;, 
    parameter   =&gt; &#39;disable_on_error&#39;, 
    value       =&gt; &#39;N&#39;);
END;
/
 
BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply_dbs4&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1221"></a><a id="CJFCHABB"></a></dd>
<dt class="seghead">Step 18&nbsp;&nbsp;&nbsp;Start the Capture Process at dbs1.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs1.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs1.example.com

/*
</pre>
<p><a id="i1113290"></a>Start the capture process at <code dir="ltr">dbs1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_CAPTURE_ADM.START_CAPTURE(
    capture_name  =&gt; &#39;capture&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1222"></a><a id="CJFHJAGI"></a></dd>
<dt class="seghead">Step 19&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">streams_share_schema1.out</code> spool file to ensure that all actions finished successfully after this script is completed.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

/*
</pre>
<p>You can now make DML and DDL changes to specific tables at <code dir="ltr">dbs1.example.com</code> and see these changes replicated to the other databases in the environment based on the rules you configured for the Oracle Streams processes and propagations in this environment.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CJFGBBAA">&#34;Make DML and DDL Changes to Tables in the hr Schema&#34;</a> for examples of changes that are replicated in this environment</div>
<pre dir="ltr"><a id="i1113323"></a>
/*************************** END OF SCRIPT ******************************/
</pre></dd>
</dl>
</div>
<!-- class="sect2" -->
<a id="CJFJFCGF"></a>
<div id="STREX102" class="sect2">
<h3 class="sect2">Flexible Configuration for Sharing Data from a Single Database</h3>
<p>Complete the following steps to use a more flexible approach for specifying the capture, propagation, and apply definitions. This approach does not use the <code dir="ltr">DBMS_STREAMS_ADM</code> package. Instead, it uses the following packages:</p>
<ul>
<li>
<p>The <code dir="ltr">DBMS_CAPTURE_ADM</code> package to configure capture processes</p>
</li>
<li>
<p>The <code dir="ltr">DBMS_PROPAGATION_ADM</code> package to configure propagations</p>
</li>
<li>
<p>The <code dir="ltr">DBMS_APPLY_ADM</code> package to configure apply processes</p>
</li>
<li>
<p>The <code dir="ltr">DBMS_RULES_ADM</code> package to specify capture process, propagation, and apply process rules and rule sets</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Neither the <code dir="ltr">ALL_STREAMS_TABLE_RULES</code> nor the <code dir="ltr">DBA_STREAMS_TABLE_RULES</code> data dictionary view is populated by the rules created in this example. To view the rules created in this example, you can query the <code dir="ltr">ALL_STREAMS_RULES</code> or <code dir="ltr">DBA_STREAMS_RULES</code> data dictionary view.</div>
</li>
</ul>
<p>This example includes the following steps:</p>
<ol>
<li>
<p><a href="#CJFIFIAC">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CJFIACJC">Configure Propagation at dbs1.example.com</a></p>
</li>
<li>
<p><a href="#CJFEGIIB">Configure the Capture Process at dbs1.example.com</a></p>
</li>
<li>
<p><a href="#CJFCAEGH">Prepare the hr Schema at dbs1.example.com for Instantiation</a></p>
</li>
<li>
<p><a href="#CJFJHEIH">Set the Instantiation SCN for the Existing Tables at Other Databases</a></p>
</li>
<li>
<p><a href="#CJFCEFDI">Instantiate the dbs1.example.com Tables at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFGBFIC">Configure the Apply Process at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFJCJFE">Grant the hr User Execute Privilege on the Apply Process Rule Set</a></p>
</li>
<li>
<p><a href="#CJFFJHBB">Start the Apply Process at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFDBEJH">Configure Propagation at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFJBFAA">Create the Custom Rule-Based Transformation for Row LCRs at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFEIBGI">Configure the Apply Process for Local Apply at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFFJEGD">Grant the hr User Execute Privilege on the Apply Process Rule Set</a></p>
</li>
<li>
<p><a href="#CJFIEBCE">Start the Apply Process at dbs2.example.com for Local Apply</a></p>
</li>
<li>
<p><a href="#CJFFDHAA">Configure the Apply Process at dbs2.example.com for Apply at dbs4.example.com</a></p>
</li>
<li>
<p><a href="#CJFDCIII">Start the Apply Process at dbs2.example.com for Apply at dbs4.example.com</a></p>
</li>
<li>
<p><a href="#CJFDHBJD">Start the Capture Process at dbs1.example.com</a></p>
</li>
<li>
<p><a href="#CJFCEDAJ">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="STREX1223"></a><a id="CJFIFIAC"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL streams_share_schema2.out

/*
</pre></dd>
<dd><a id="STREX1224"></a><a id="CJFIACJC"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Configure Propagation at dbs1.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs1.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs1.example.com

/*
</pre>
<p>Configure and schedule propagation from the queue at <code dir="ltr">dbs1.example.com</code> to the queue at <code dir="ltr">dbs2.example.com</code>. This configuration specifies that the propagation propagates all changes to the <code dir="ltr">hr</code> schema. You have the option of omitting the rule set specification, but then everything in the queue will be propagated, which might not be desired if, in the future, multiple capture processes will use the <code dir="ltr">streams_queue</code>.</p>
<pre dir="ltr">*/

BEGIN
  -- Create the rule set
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name       =&gt; &#39;strmadmin.propagation_dbs1_rules&#39;,
    evaluation_context  =&gt; &#39;SYS.STREAMS$_EVALUATION_CONTEXT&#39;);
  -- Create rules for all modifications to the hr schema
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name  =&gt; &#39;strmadmin.all_hr_dml&#39;,
    condition  =&gt; &#39; :dml.get_object_owner() = &#39;&#39;HR&#39;&#39; AND &#39; || 
                  &#39; :dml.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                  &#39; :dml.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name  =&gt; &#39;strmadmin.all_hr_ddl&#39;,
    condition  =&gt; &#39; (:ddl.get_object_owner() = &#39;&#39;HR&#39;&#39; OR &#39; ||
                  &#39; :ddl.get_base_table_owner() =   &#39;&#39;HR&#39;&#39;) AND &#39; || 
                  &#39; :ddl.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                  &#39; :ddl.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  -- Add rules to rule set
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_hr_dml&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.propagation_dbs1_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_hr_ddl&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.propagation_dbs1_rules&#39;);
  -- Create a propagation that uses the rule set as its positive rule set
  DBMS_PROPAGATION_ADM.CREATE_PROPAGATION(
    propagation_name    =&gt; &#39;dbs1_to_dbs2&#39;,
    source_queue        =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_queue   =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_dblink  =&gt; &#39;dbs2.example.com&#39;,
    rule_set_name       =&gt; &#39;strmadmin.propagation_dbs1_rules&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1225"></a><a id="CJFEGIIB"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Configure the Capture Process at dbs1.example.com</dt>
<dd>
<p>Create a capture process and rules to capture the entire <code dir="ltr">hr</code> schema at <code dir="ltr">dbs1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  -- Create the rule set
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name       =&gt; &#39;strmadmin.demo_rules&#39;,
    evaluation_context  =&gt; &#39;SYS.STREAMS$_EVALUATION_CONTEXT&#39;);
  --   Create rules that specify the entire hr schema
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name  =&gt; &#39;strmadmin.schema_hr_dml&#39;,
    condition  =&gt; &#39; :dml.get_object_owner() = &#39;&#39;HR&#39;&#39;  AND &#39; || 
                  &#39; :dml.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                  &#39; :dml.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name  =&gt; &#39;strmadmin.schema_hr_ddl&#39;,
    condition  =&gt; &#39; (:ddl.get_object_owner() = &#39;&#39;HR&#39;&#39; OR &#39; ||
                  &#39; :ddl.get_base_table_owner() =   &#39;&#39;HR&#39;&#39;) AND &#39; || 
                  &#39; :ddl.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                  &#39; :ddl.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  --  Add the rules to the rule set
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.schema_hr_dml&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.demo_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.schema_hr_ddl&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.demo_rules&#39;);
  --  Create a capture process that uses the rule set as its positive rule set
  DBMS_CAPTURE_ADM.CREATE_CAPTURE(
    queue_name    =&gt; &#39;strmadmin.streams_queue&#39;,
    capture_name  =&gt; &#39;capture&#39;,
    rule_set_name =&gt; &#39;strmadmin.demo_rules&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1226"></a><a id="CJFCAEGH"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Prepare the hr Schema at dbs1.example.com for Instantiation</dt>
<dd>
<p>While still connected as the Oracle Streams administrator at <code dir="ltr">dbs1.example.com</code>, prepare the <code dir="ltr">hr</code> schema at <code dir="ltr">dbs1.example.com</code> for instantiation at <code dir="ltr">dbs3.example.com</code>. This step marks the lowest SCN of the tables in the schema for instantiation. SCNs subsequent to the lowest SCN can be used for instantiation.</p>
<p>This step also enables supplemental logging for any primary key, unique key, bitmap index, and foreign key columns in the tables in the <code dir="ltr">hr</code> schema. Supplemental logging places additional information in the redo log for changes made to tables. The apply process needs this extra information to perform certain operations, such as unique row identification and conflict resolution. Because <code dir="ltr">dbs1.example.com</code> is the only database where changes are captured in this environment, it is the only database where you must specify supplemental logging for the tables in the <code dir="ltr">hr</code> schema.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This step is not required in the <a href="#i1112610">&#34;Simple Configuration for Sharing Data from a Single Database&#34;</a>. In that example, when the <code dir="ltr">ADD_SCHEMA_RULES</code> procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package is run in Step <a href="#CJFDDFCE">3</a><a href="#CJFDDFCE">3</a>, the <code dir="ltr">PREPARE_SCHEMA_INSTANTIATION</code> procedure in the <code dir="ltr">DBMS_CAPTURE_ADM</code> package is run automatically for the <code dir="ltr">hr</code> schema.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP107" href="../STREP/prep_rep.htm#STREP107"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a></div>
<pre dir="ltr">*/

BEGIN
  DBMS_CAPTURE_ADM.PREPARE_SCHEMA_INSTANTIATION(
    schema_name          =&gt; &#39;hr&#39;,
    supplemental_logging =&gt; &#39;keys&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1227"></a><a id="CJFJHEIH"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Set the Instantiation SCN for the Existing Tables at Other Databases</dt>
<dd>
<p>In this example, the <code dir="ltr">hr.jobs</code> table already exists at <code dir="ltr">dbs2.example.com</code> and <code dir="ltr">dbs4.example.com</code>. At <code dir="ltr">dbs2.example.com</code>, this table is named <code dir="ltr">assignments</code>, but it has the same shape and data as the <code dir="ltr">jobs</code> table at <code dir="ltr">dbs1.example.com</code>. Also, in this example, <code dir="ltr">dbs4.example.com</code> is a Sybase database. All of the other tables in the Oracle Streams environment are instantiated at the other destination databases using Data Pump import.</p>
<p>Because the <code dir="ltr">hr.jobs</code> table already exists at <code dir="ltr">dbs2.example.com</code> and <code dir="ltr">dbs4.example.com</code>, this example uses the <code dir="ltr">GET_SYSTEM_CHANGE_NUMBER</code> function in the <code dir="ltr">DBMS_FLASHBACK</code> package at <code dir="ltr">dbs1.example.com</code> to obtain the current SCN for the database. This SCN is used at <code dir="ltr">dbs2.example.com</code> to run the <code dir="ltr">SET_TABLE_INSTANTIATION_SCN</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package. Running this procedure twice sets the instantiation SCN for the <code dir="ltr">hr.jobs</code> table at <code dir="ltr">dbs2.example.com</code> and <code dir="ltr">dbs4.example.com</code>.</p>
<p>The <code dir="ltr">SET_TABLE_INSTANTIATION_SCN</code> procedure controls which LCRs for a table are ignored by an apply process and which LCRs for a table are applied by an apply process. If the commit SCN of an LCR for a table from a source database is less than or equal to the instantiation SCN for that table at a destination database, then the apply process at the destination database discards the LCR. Otherwise, the apply process applies the LCR.</p>
<p>In this example, both of the apply processes at <code dir="ltr">dbs2.example.com</code> will apply transactions to the <code dir="ltr">hr.jobs</code> table with SCNs that were committed after SCN obtained in this step.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This example assumes that the contents of the <code dir="ltr">hr.jobs</code> table at <code dir="ltr">dbs1.example.com</code>, <code dir="ltr">dbs2.example.com</code> (as <code dir="ltr">hr.assignments</code>), and <code dir="ltr">dbs4.example.com</code> are consistent when you complete this step. You might want to lock the table at each database while you complete this step to ensure consistency.</div>
<pre dir="ltr">*/

DECLARE
  iscn  NUMBER;         -- Variable to hold instantiation SCN value
BEGIN
  iscn := DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER();
  DBMS_APPLY_ADM.SET_TABLE_INSTANTIATION_SCN@DBS2.EXAMPLE.COM(
    source_object_name    =&gt; &#39;hr.jobs&#39;,
    source_database_name  =&gt; &#39;dbs1.example.com&#39;,
    instantiation_scn     =&gt; iscn);
  DBMS_APPLY_ADM.SET_TABLE_INSTANTIATION_SCN@DBS2.EXAMPLE.COM(
    source_object_name    =&gt; &#39;hr.jobs&#39;,
    source_database_name  =&gt; &#39;dbs1.example.com&#39;,
    instantiation_scn     =&gt; iscn,
    apply_database_link   =&gt;       &#39;dbs4.example.com&#39;);
END;
/
</pre>
<p>/*</p>
</dd>
<dd><a id="STREX1228"></a><a id="CJFCEFDI"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Instantiate the dbs1.example.com Tables at dbs3.example.com<a class="dashingAutolink" name="autolink-104296"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref36"></a></dt>
<dd>
<p>This example performs a network Data Pump import of the following tables:</p>
<ul>
<li>
<p><code dir="ltr">hr.countries</code></p>
</li>
<li>
<p><code dir="ltr">hr.locations</code></p>
</li>
<li>
<p><code dir="ltr">hr.regions</code></p>
</li>
</ul>
<p>A network import means that Data Pump imports these tables from <code dir="ltr">dbs1.example.com</code> without using an export dump file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for information about performing an import</div>
<p>Connect to <code dir="ltr">dbs3.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs3.example.com

/*
</pre>
<p>This example will do a table import using the <code dir="ltr">DBMS_DATAPUMP</code> package. For simplicity, exceptions from any of the API calls will not be trapped. However, Oracle recommends that you define exception handlers and call <code dir="ltr">GET_STATUS</code> to retrieve more detailed error information if a failure occurs. If you want to monitor the import, then query the <code dir="ltr">DBA_DATAPUMP_JOBS</code> data dictionary view at the import database.</p>
<pre dir="ltr">*/

SET SERVEROUTPUT ON
DECLARE
  h1        NUMBER;         -- Data Pump job handle
  sscn      NUMBER;         -- Variable to hold current source SCN
  job_state VARCHAR2(30);   -- To keep track of job state
  js        ku$_JobStatus;  -- The job status from GET_STATUS
  sts       ku$_Status;     -- The status object returned by GET_STATUS
  job_not_exist    exception;
  pragma exception_init(job_not_exist, -31626);
BEGIN
-- Create a (user-named) Data Pump job to do a table-level import.
  h1 := DBMS_DATAPUMP.OPEN(
          operation   =&gt; &#39;IMPORT&#39;,
          job_mode    =&gt; &#39;TABLE&#39;,
          remote_link =&gt; &#39;DBS1.EXAMPLE.COM&#39;,
          job_name    =&gt; &#39;dp_sing2&#39;);
-- A metadata filter is used to specify the schema that owns the tables 
-- that will be imported.
  DBMS_DATAPUMP.METADATA_FILTER(
    handle    =&gt; h1,
    name      =&gt; &#39;SCHEMA_EXPR&#39;,
    value     =&gt; &#39;=&#39;&#39;HR&#39;&#39;&#39;);
-- A metadata filter is used to specify the tables that will be imported.
  DBMS_DATAPUMP.METADATA_FILTER(
    handle    =&gt; h1,
    name      =&gt; &#39;NAME_EXPR&#39;,
    value     =&gt; &#39;IN(&#39;&#39;COUNTRIES&#39;&#39;, &#39;&#39;REGIONS&#39;&#39;, &#39;&#39;LOCATIONS&#39;&#39;)&#39;);
-- Get the current SCN of the source database, and set the FLASHBACK_SCN 
-- parameter to this value to ensure consistency between all of the 
-- objects included in the import.
  sscn := DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER@dbs1.example.com();
  DBMS_DATAPUMP.SET_PARAMETER(
    handle =&gt; h1,
    name   =&gt; &#39;FLASHBACK_SCN&#39;,
    value  =&gt; sscn); 
-- Start the job. 
  DBMS_DATAPUMP.START_JOB(h1);
-- The import job should be running. In the following loop, the job
-- is monitored until it completes.
  job_state := &#39;UNDEFINED&#39;;
  BEGIN
    WHILE (job_state != &#39;COMPLETED&#39;) AND (job_state != &#39;STOPPED&#39;) LOOP
      sts:=DBMS_DATAPUMP.GET_STATUS(
             handle  =&gt; h1,
             mask    =&gt; DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR +
                        DBMS_DATAPUMP.KU$_STATUS_JOB_STATUS +
                        DBMS_DATAPUMP.KU$_STATUS_WIP,
             timeout =&gt; -1);
      js := sts.job_status;
      DBMS_LOCK.SLEEP(10);
      job_state := js.state;
    END LOOP;
  -- Gets an exception when job no longer exists
    EXCEPTION WHEN job_not_exist THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Data Pump job has completed&#39;);
      DBMS_OUTPUT.PUT_LINE(&#39;Instantiation SCN: &#39; ||sscn);
  END;
END;
/

/*
</pre></dd>
<dd><a id="STREX1229"></a><a id="CJFGBFIC"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Configure the Apply Process at dbs3.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs3.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs3.example.com

/*
</pre>
<p>Configure <code dir="ltr">dbs3.example.com</code> to apply DML and DDL changes to the <code dir="ltr">countries</code> table, <code dir="ltr">locations</code> table, and <code dir="ltr">regions</code> table.</p>
<pre dir="ltr">*/

BEGIN
  -- Create the rule set
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name       =&gt; &#39;strmadmin.apply_rules&#39;,
    evaluation_context  =&gt; &#39;SYS.STREAMS$_EVALUATION_CONTEXT&#39;);
  -- Rules for hr.countries
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name    =&gt; &#39;strmadmin.all_countries_dml&#39;,
    condition    =&gt; &#39; :dml.get_object_owner() = &#39;&#39;HR&#39;&#39; AND &#39; || 
                    &#39; :dml.get_object_name() = &#39;&#39;COUNTRIES&#39;&#39;  AND &#39; || 
                    &#39; :dml.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                    &#39; :dml.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name    =&gt; &#39;strmadmin.all_countries_ddl&#39;,
    condition    =&gt; &#39; (:ddl.get_object_owner() = &#39;&#39;HR&#39;&#39; OR &#39; ||
                    &#39; :ddl.get_base_table_owner() =         &#39;&#39;HR&#39;&#39;) AND &#39; || 
                    &#39; :ddl.get_object_name() = &#39;&#39;COUNTRIES&#39;&#39; AND &#39; || 
                    &#39; :ddl.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                    &#39; :ddl.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  -- Rules for hr.locations
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name    =&gt; &#39;strmadmin.all_locations_dml&#39;,
    condition    =&gt; &#39; :dml.get_object_owner() = &#39;&#39;HR&#39;&#39; AND &#39; ||
                    &#39; :dml.get_object_name() = &#39;&#39;LOCATIONS&#39;&#39; AND &#39; || 
                    &#39; :dml.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                    &#39; :dml.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name    =&gt; &#39;strmadmin.all_locations_ddl&#39;,
    condition    =&gt; &#39; (:ddl.get_object_owner() = &#39;&#39;HR&#39;&#39; OR &#39; ||
                    &#39; :ddl.get_base_table_owner() =         &#39;&#39;HR&#39;&#39;) AND &#39; ||
                    &#39; :ddl.get_object_name() = &#39;&#39;LOCATIONS&#39;&#39; AND &#39; || 
                    &#39; :ddl.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                    &#39; :ddl.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  -- Rules for hr.regions
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name    =&gt; &#39;strmadmin.all_regions_dml&#39;,
    condition    =&gt; &#39; :dml.get_object_owner() = &#39;&#39;HR&#39;&#39; AND &#39; ||
                    &#39; :dml.get_object_name() = &#39;&#39;REGIONS&#39;&#39; AND &#39; || 
                    &#39; :dml.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                    &#39; :dml.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name    =&gt; &#39;strmadmin.all_regions_ddl&#39;,
    condition    =&gt; &#39; (:ddl.get_object_owner() = &#39;&#39;HR&#39;&#39; OR &#39; ||
                    &#39; :ddl.get_base_table_owner() =         &#39;&#39;HR&#39;&#39;) AND &#39; ||
                    &#39; :ddl.get_object_name() = &#39;&#39;REGIONS&#39;&#39; AND &#39; || 
                    &#39; :ddl.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                    &#39; :ddl.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  -- Add rules to rule set
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_countries_dml&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.apply_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_countries_ddl&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.apply_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_locations_dml&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.apply_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_locations_ddl&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.apply_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_regions_dml&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.apply_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_regions_ddl&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.apply_rules&#39;);
  -- Create an apply process that uses the rule set as its positive rule set
  DBMS_APPLY_ADM.CREATE_APPLY(
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    apply_name      =&gt; &#39;apply&#39;,
    rule_set_name   =&gt; &#39;strmadmin.apply_rules&#39;,
    apply_user      =&gt; &#39;hr&#39;,
    apply_captured  =&gt; TRUE,
    source_database =&gt; &#39;dbs1.example.com&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1230"></a><a id="CJFJCJFE"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Grant the hr User Execute Privilege on the Apply Process Rule Set</dt>
<dd>
<p>Because the <code dir="ltr">hr</code> user was specified as the apply user in the previous step, the <code dir="ltr">hr</code> user requires <code dir="ltr">EXECUTE</code> privilege on the positive rule set used by the apply process</p>
<pre dir="ltr">*/

BEGIN
  DBMS_RULE_ADM.GRANT_OBJECT_PRIVILEGE(
    privilege   =&gt; SYS.DBMS_RULE_ADM.EXECUTE_ON_RULE_SET,
    object_name =&gt; &#39;strmadmin.apply_rules&#39;,
    grantee     =&gt; &#39;hr&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1231"></a><a id="CJFFJHBB"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Start the Apply Process at dbs3.example.com</dt>
<dd>
<p>Set the <code dir="ltr">disable_on_error</code> parameter to <code dir="ltr">n</code> so that the apply process will not be disabled if it encounters an error, and start the apply process at <code dir="ltr">dbs3.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.SET_PARAMETER(
    apply_name  =&gt; &#39;apply&#39;, 
    parameter   =&gt; &#39;disable_on_error&#39;, 
    value       =&gt; &#39;N&#39;);
END;
/
 
BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1232"></a><a id="CJFDBEJH"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Configure Propagation at dbs2.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs2.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs2.example.com

/*
</pre>
<p>Configure and schedule propagation from the queue at <code dir="ltr">dbs2.example.com</code> to the queue at <code dir="ltr">dbs3.example.com</code>. This configuration is an example of directed networks because the changes at <code dir="ltr">dbs2.example.com</code> originated at <code dir="ltr">dbs1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  -- Create the rule set
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name       =&gt; &#39;strmadmin.propagation_dbs3_rules&#39;,
    evaluation_context  =&gt; &#39;SYS.STREAMS$_EVALUATION_CONTEXT&#39;);
  -- Create rules for all modifications to the countries table
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name  =&gt; &#39;strmadmin.all_countries_dml&#39;,
    condition  =&gt; &#39; :dml.get_object_owner() = &#39;&#39;HR&#39;&#39; AND &#39; || 
                  &#39; :dml.get_object_name() = &#39;&#39;COUNTRIES&#39;&#39; AND &#39; || 
                  &#39; :dml.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                  &#39; :dml.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name  =&gt; &#39;strmadmin.all_countries_ddl&#39;,
    condition  =&gt; &#39; (:ddl.get_object_owner() = &#39;&#39;HR&#39;&#39; OR &#39; ||
                  &#39; :ddl.get_base_table_owner() =   &#39;&#39;HR&#39;&#39;) AND &#39; || 
                  &#39; :ddl.get_object_name() = &#39;&#39;COUNTRIES&#39;&#39; AND &#39; || 
                  &#39; :ddl.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                  &#39; :ddl.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  -- Create rules for all modifications to the locations table
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name   =&gt; &#39;strmadmin.all_locations_dml&#39;,
    condition  =&gt; &#39; :dml.get_object_owner() = &#39;&#39;HR&#39;&#39; AND &#39; ||
                  &#39; :dml.get_object_name() = &#39;&#39;LOCATIONS&#39;&#39; AND &#39; || 
                  &#39; :dml.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                  &#39; :dml.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name   =&gt; &#39;strmadmin.all_locations_ddl&#39;,
    condition  =&gt; &#39; (:ddl.get_object_owner() = &#39;&#39;HR&#39;&#39; OR &#39; ||
                  &#39; :ddl.get_base_table_owner() =   &#39;&#39;HR&#39;&#39;) AND &#39; ||
                  &#39; :ddl.get_object_name() = &#39;&#39;LOCATIONS&#39;&#39; AND &#39; || 
                  &#39; :ddl.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                  &#39; :ddl.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  -- Create rules for all modifications to the regions table
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name   =&gt; &#39;strmadmin.all_regions_dml&#39;,
    condition  =&gt; &#39; :dml.get_object_owner() = &#39;&#39;HR&#39;&#39; AND &#39; ||
                  &#39; :dml.get_object_name() = &#39;&#39;REGIONS&#39;&#39; AND &#39; || 
                  &#39; :dml.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                  &#39; :dml.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name   =&gt; &#39;strmadmin.all_regions_ddl&#39;,
    condition  =&gt; &#39; (:ddl.get_object_owner() = &#39;&#39;HR&#39;&#39; OR &#39; ||
                  &#39; :ddl.get_base_table_owner() =   &#39;&#39;HR&#39;&#39;) AND &#39; ||
                  &#39; :ddl.get_object_name() = &#39;&#39;REGIONS&#39;&#39; AND &#39; || 
                  &#39; :ddl.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                  &#39; :ddl.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  -- Add rules to rule set
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_countries_dml&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.propagation_dbs3_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_countries_ddl&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.propagation_dbs3_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_locations_dml&#39;,  
    rule_set_name  =&gt; &#39;strmadmin.propagation_dbs3_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_locations_ddl&#39;,  
    rule_set_name  =&gt; &#39;strmadmin.propagation_dbs3_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_regions_dml&#39;,  
    rule_set_name  =&gt; &#39;strmadmin.propagation_dbs3_rules&#39;);
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_regions_ddl&#39;,  
    rule_set_name  =&gt; &#39;strmadmin.propagation_dbs3_rules&#39;);
  -- Create a propagation that uses the rule set as its positive rule set
  DBMS_PROPAGATION_ADM.CREATE_PROPAGATION(
    propagation_name    =&gt; &#39;dbs2_to_dbs3&#39;,
    source_queue        =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_queue   =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_dblink  =&gt; &#39;dbs3.example.com&#39;,
    rule_set_name       =&gt; &#39;strmadmin.propagation_dbs3_rules&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1233"></a><a id="CJFJBFAA"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Create the Custom Rule-Based Transformation for Row LCRs at dbs2.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs2.example.com</code> as the <code dir="ltr">hr</code> user.</p>
<pre dir="ltr">*/
 
CONNECT hr@dbs2.example.com

/*
</pre>
<p>Create the custom rule-based transformation function that transforms row changes resulting from DML statements to the <code dir="ltr">jobs</code> table from <code dir="ltr">dbs1.example.com</code> into row changes to the <code dir="ltr">assignments</code> table on <code dir="ltr">dbs2.example.com</code>.</p>
<p>The following function transforms every row LCR for the <code dir="ltr">jobs</code> table into a row LCR for the <code dir="ltr">assignments</code> table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If DDL changes were also applied to the <code dir="ltr">assignments</code> table, then another transformation would be required for the DDL LCRs. This transformation would need to change the object name and the DDL&nbsp;text.</div>
<pre dir="ltr">*/

CREATE OR REPLACE FUNCTION hr.to_assignments_trans_dml(
  p_in_data in ANYDATA) 
  RETURN ANYDATA IS out_data SYS.LCR$_ROW_RECORD;
  tc   pls_integer;
BEGIN
  -- Typecast AnyData to LCR$_ROW_RECORD
     tc := p_in_data.GetObject(out_data);
     IF out_data.GET_OBJECT_NAME() = &#39;JOBS&#39;
     THEN
  -- Transform the in_data into the out_data
     out_data.SET_OBJECT_NAME(&#39;ASSIGNMENTS&#39;);
     END IF;
  -- Convert to AnyData
     RETURN ANYDATA.ConvertObject(out_data);
END;
/

/*
</pre></dd>
<dd><a id="STREX1234"></a><a id="CJFEIBGI"></a></dd>
<dt class="seghead">Step 12&nbsp;&nbsp;&nbsp;Configure the Apply Process for Local Apply at dbs2.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs2.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs2.example.com

/*
</pre>
<p>Configure <code dir="ltr">dbs2.example.com</code> to apply changes to the local <code dir="ltr">assignments</code> table. Remember that the <code dir="ltr">assignments</code> table receives changes from the <code dir="ltr">jobs</code> table at <code dir="ltr">dbs1.example.com</code>. This step specifies a custom rule-based transformation without using the <code dir="ltr">SET_RULE_TRANSFORM_FUNCTION</code> procedure in the <code dir="ltr">DBMS_STREAMS_ADM</code> package. Instead, a name-value pair is added manually to the action context of the rule. The name-value pair specifies <code dir="ltr">STREAMS$_TRANSFORM_FUNCTION</code> for the name and <code dir="ltr">hr.to_assignments_trans_dml</code> for the value.</p>
<pre dir="ltr">*/

DECLARE
  action_ctx_dml       SYS.RE$NV_LIST;
  action_ctx_ddl       SYS.RE$NV_LIST;
  ac_name              VARCHAR2(30) := &#39;STREAMS$_TRANSFORM_FUNCTION&#39;;
BEGIN
  -- Specify the name-value pair in the action context
  action_ctx_dml := SYS.RE$NV_LIST(SYS.RE$NV_ARRAY());
  action_ctx_dml.ADD_PAIR(
    ac_name, 
    ANYDATA.CONVERTVARCHAR2(&#39;hr.to_assignments_trans_dml&#39;));
  --  Create the rule set strmadmin.apply_rules
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name       =&gt; &#39;strmadmin.apply_rules&#39;,
    evaluation_context  =&gt; &#39;SYS.STREAMS$_EVALUATION_CONTEXT&#39;);
  --  Create a rule that transforms all DML changes to the jobs table into 
  --  DML changes for assignments table
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name       =&gt; &#39;strmadmin.all_jobs_dml&#39;,
    condition       =&gt; &#39; :dml.get_object_owner() = &#39;&#39;HR&#39;&#39; AND &#39; ||
                       &#39; :dml.get_object_name() = &#39;&#39;JOBS&#39;&#39; AND &#39; || 
                       &#39; :dml.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                       &#39; :dml.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;,
    action_context  =&gt; action_ctx_dml);
  --  Add the rule to the rule set
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_jobs_dml&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.apply_rules&#39;);
  -- Create an apply process that uses the rule set as its positive rule set
  DBMS_APPLY_ADM.CREATE_APPLY(
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    apply_name      =&gt; &#39;apply_dbs2&#39;,
    rule_set_name   =&gt; &#39;strmadmin.apply_rules&#39;,
    apply_user      =&gt; &#39;hr&#39;,
    apply_captured  =&gt; TRUE,
    source_database =&gt; &#39;dbs1.example.com&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1235"></a><a id="CJFFJEGD"></a></dd>
<dt class="seghead">Step 13&nbsp;&nbsp;&nbsp;Grant the hr User Execute Privilege on the Apply Process Rule Set</dt>
<dd>
<p>Because the <code dir="ltr">hr</code> user was specified as the apply user in the previous step, the <code dir="ltr">hr</code> user requires <code dir="ltr">EXECUTE</code> privilege on the positive rule set used by the apply process</p>
<pre dir="ltr">*/

BEGIN
  DBMS_RULE_ADM.GRANT_OBJECT_PRIVILEGE(
    privilege   =&gt; SYS.DBMS_RULE_ADM.EXECUTE_ON_RULE_SET,
    object_name =&gt; &#39;strmadmin.apply_rules&#39;,
    grantee     =&gt; &#39;hr&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1236"></a><a id="CJFIEBCE"></a></dd>
<dt class="seghead">Step 14&nbsp;&nbsp;&nbsp;Start the Apply Process at dbs2.example.com for Local Apply</dt>
<dd>
<p>Set the <code dir="ltr">disable_on_error</code> parameter to <code dir="ltr">n</code> so that the apply process will not be disabled if it encounters an error, and start the apply process for local apply at <code dir="ltr">dbs2.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.SET_PARAMETER(
    apply_name  =&gt; &#39;apply_dbs2&#39;, 
    parameter   =&gt; &#39;disable_on_error&#39;, 
    value       =&gt; &#39;N&#39;);
END;
/
 
BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply_dbs2&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1237"></a><a id="CJFFDHAA"></a></dd>
<dt class="seghead">Step 15&nbsp;&nbsp;&nbsp;Configure the Apply Process at dbs2.example.com for Apply at dbs4.example.com</dt>
<dd>
<p>Configure <code dir="ltr">dbs2.example.com</code> to apply DML changes to the <code dir="ltr">jobs</code> table at <code dir="ltr">dbs4.example.com</code>, which is a Sybase database. Remember that these changes originated at <code dir="ltr">dbs1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  -- Create the rule set
  DBMS_RULE_ADM.CREATE_RULE_SET(
    rule_set_name      =&gt; &#39;strmadmin.apply_dbs4_rules&#39;,
    evaluation_context =&gt; &#39;SYS.STREAMS$_EVALUATION_CONTEXT&#39;);
  -- Create rule strmadmin.all_jobs_remote for all modifications 
  -- to the jobs table
  DBMS_RULE_ADM.CREATE_RULE(
    rule_name    =&gt; &#39;strmadmin.all_jobs_remote&#39;,
    condition    =&gt; &#39; :dml.get_object_owner() = &#39;&#39;HR&#39;&#39; AND &#39; ||
                    &#39; :dml.get_object_name() = &#39;&#39;JOBS&#39;&#39; AND &#39; || 
                    &#39; :dml.is_null_tag() = &#39;&#39;Y&#39;&#39; AND &#39; ||
                    &#39; :dml.get_source_database_name() = &#39;&#39;DBS1.EXAMPLE.COM&#39;&#39; &#39;);
  -- Add the rule to the rule set
  DBMS_RULE_ADM.ADD_RULE(
    rule_name      =&gt; &#39;strmadmin.all_jobs_remote&#39;, 
    rule_set_name  =&gt; &#39;strmadmin.apply_dbs4_rules&#39;);
  -- Create an apply process that uses the rule set as its positive rule set
  DBMS_APPLY_ADM.CREATE_APPLY(
    queue_name          =&gt; &#39;strmadmin.streams_queue&#39;,
    apply_name          =&gt; &#39;apply_dbs4&#39;,
    rule_set_name       =&gt; &#39;strmadmin.apply_dbs4_rules&#39;,
    apply_database_link =&gt; &#39;dbs4.example.com&#39;,
    apply_captured      =&gt; TRUE,
    source_database     =&gt; &#39;dbs1.example.com&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1238"></a><a id="CJFDCIII"></a></dd>
<dt class="seghead">Step 16&nbsp;&nbsp;&nbsp;Start the Apply Process at dbs2.example.com for Apply at dbs4.example.com</dt>
<dd>
<p>Set the <code dir="ltr">disable_on_error</code> parameter to <code dir="ltr">n</code> so that the apply process will not be disabled if it encounters an error, and start the remote apply for Sybase using database link <code dir="ltr">dbs4.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.SET_PARAMETER(
    apply_name  =&gt; &#39;apply_dbs4&#39;, 
    parameter   =&gt; &#39;disable_on_error&#39;, 
    value       =&gt; &#39;N&#39;);
END;
/

BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply_dbs4&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1239"></a><a id="CJFDHBJD"></a></dd>
<dt class="seghead">Step 17&nbsp;&nbsp;&nbsp;Start the Capture Process at dbs1.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs1.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs1.example.com

/*
</pre>
<p>Start the capture process at <code dir="ltr">dbs1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_CAPTURE_ADM.START_CAPTURE(
    capture_name  =&gt; &#39;capture&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1240"></a><a id="CJFCEDAJ"></a></dd>
<dt class="seghead">Step 18&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">streams_share_schema2.out</code> spool file to ensure that all actions finished successfully after this script is completed.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

/*
</pre>
<p>You can now make DML and DDL changes to specific tables at <code dir="ltr">dbs1.example.com</code> and see these changes replicated to the other databases in the environment based on the rules you configured for the Oracle Streams processes and propagations in this environment.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CJFGBBAA">&#34;Make DML and DDL Changes to Tables in the hr Schema&#34;</a> for examples of changes that are replicated in this environment</div>
<pre dir="ltr"><a id="i1114141"></a>
/*************************** END OF SCRIPT ******************************/
</pre></dd>
</dl>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CJFGBBAA"></a>
<div id="STREX556" class="sect1">
<h2 class="sect1">Make DML and DDL Changes to Tables in the hr Schema</h2>
<p>After completing either of the examples described in <a href="#CJFDEBIE">&#34;Example Scripts for Sharing Data from One Database&#34;</a>, you can make DML and DDL changes to the tables in the <code dir="ltr">hr</code> schema at the <code dir="ltr">dbs1.example.com</code> database. These changes will be replicated to the other databases in the environment based on the rules you configured for Oracle Streams processes and propagations. You can check the other databases to see that the changes have been replicated.</p>
<p>For example, complete the following steps to make DML changes to the <code dir="ltr">hr.jobs</code> and <code dir="ltr">hr.locations</code> tables at <code dir="ltr">dbs1.example.com</code>. You can also make a DDL change to the <code dir="ltr">hr.locations</code> table at <code dir="ltr">dbs1.example.com</code>.</p>
<p>After you make these changes, you can query the <code dir="ltr">hr.assignments</code> table at <code dir="ltr">dbs2.example.com</code> to see that the DML change you made to this table at <code dir="ltr">dbs1.example.com</code> has been replicated. Remember that a custom rule-based transformation configured for the apply process at <code dir="ltr">dbs2.example.com</code> transforms DML changes to the <code dir="ltr">hr.jobs</code> table into DML changes to the <code dir="ltr">hr.assignments</code> table. You can also query the <code dir="ltr">hr.locations</code> table at <code dir="ltr">dbs3.example.com</code> to see that the DML and DDL changes you made to this table at <code dir="ltr">dbs1.example.com</code> have been replicated.</p>
<dl>
<dd><a id="STREX1241"></a><a id="sthref37"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Make DML and DDL Changes to Tables in the hr Schema</dt>
<dd>
<p>Make the following changes:</p>
<pre dir="ltr">CONNECT hr@dbs1.example.com
Enter password: <span class="italic">password</span>

UPDATE hr.jobs SET max_salary=10000 WHERE job_id=&#39;MK_REP&#39;;
COMMIT;

INSERT INTO hr.locations VALUES(
  3300, &#39;521 Ralston Avenue&#39;, &#39;94002&#39;, &#39;Belmont&#39;, &#39;CA&#39;, &#39;US&#39;);
COMMIT;

ALTER TABLE hr.locations RENAME COLUMN state_province TO state_or_province;
</pre></dd>
<dd><a id="STREX1242"></a><a id="sthref38"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Query the hr.assignments Table at dbs2.example.com</dt>
<dd>
<p>After some time passes to allow for capture, propagation, and apply of the changes performed the previous step, run the following query to confirm that the <code dir="ltr">UPDATE</code> change made to the <code dir="ltr">hr.jobs</code> table at <code dir="ltr">dbs1.example.com</code> has been applied to the <code dir="ltr">hr.assignments</code> table at <code dir="ltr">dbs2.example.com</code>.</p>
<pre dir="ltr">CONNECT hr@dbs2.example.com
Enter password: <span class="italic">password</span>

SELECT max_salary FROM hr.assignments WHERE job_id=&#39;MK_REP&#39;;
</pre>
<p>You should see <code dir="ltr">10000</code> for the value of the <code dir="ltr">max_salary</code>.</p>
</dd>
<dd><a id="STREX1243"></a><a id="sthref39"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Query and Describe the hr.locations Table at dbs3.example.com</dt>
<dd>
<p>Run the following query to confirm that the <code dir="ltr">INSERT</code> change made to the <code dir="ltr">hr.locations</code> table at <code dir="ltr">dbs1.example.com</code> has been applied at <code dir="ltr">dbs3.example.com</code>.</p>
<pre dir="ltr">CONNECT hr@dbs3.example.com
Enter password: <span class="italic">password</span>

SELECT * FROM hr.locations WHERE location_id=3300;
</pre>
<p>You should see the row inserted into the <code dir="ltr">hr.locations</code> table at <code dir="ltr">dbs1.example.com</code> in the previous step.</p>
<p>Next, describe the <code dir="ltr">hr.locations</code> table at to confirm that the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> change was propagated and applied correctly.</p>
<pre dir="ltr">DESC hr.locations
</pre>
<p>The fifth column in the table should be <code dir="ltr">state_or_province</code>.</p>
</dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i1008513"></a>
<div id="STREX103" class="sect1">
<h2 class="sect1">Add Objects to an Existing Oracle Streams Replication Environment<a id="sthref40"></a><a id="sthref41"></a></h2>
<p>This example extends the Oracle Streams environment configured in the previous sections by adding replicated objects to an existing database. To complete this example, you must have completed the tasks in one of the previous examples in this chapter.</p>
<p>This example will add the following tables to the <code dir="ltr">hr</code> schema in the <code dir="ltr">dbs3.example.com</code> database:</p>
<ul>
<li>
<p><code dir="ltr">departments</code></p>
</li>
<li>
<p><code dir="ltr">employees</code></p>
</li>
<li>
<p><code dir="ltr">job_history</code></p>
</li>
<li>
<p><code dir="ltr">jobs</code></p>
</li>
</ul>
<p>When you complete this example, Oracle Streams processes changes to these tables with the following series of actions:</p>
<ol>
<li>
<p>The capture process captures changes at <code dir="ltr">dbs1.example.com</code> and enqueues them at <code dir="ltr">dbs1.example.com</code>.</p>
</li>
<li>
<p>A propagation propagates changes from the queue at <code dir="ltr">dbs1.example.com</code> to the queue at <code dir="ltr">dbs2.example.com</code>.</p>
</li>
<li>
<p>A propagation propagates changes from the queue at <code dir="ltr">dbs2.example.com</code> to the queue at <code dir="ltr">dbs3.example.com</code>.</p>
</li>
<li>
<p>The apply process at <code dir="ltr">dbs3.example.com</code> applies the changes at <code dir="ltr">dbs3.example.com</code>.</p>
</li>
</ol>
<p>When you complete this example, the <code dir="ltr">hr</code> schema at the <code dir="ltr">dbs3.example.com</code> database will have all of its original tables, because the <code dir="ltr">countries</code>, <code dir="ltr">locations</code>, and <code dir="ltr">regions</code> tables were instantiated at <code dir="ltr">dbs3.example.com</code> in the previous section.</p>
<p><a href="#CJFCFGFG">Figure 2-2</a> provides an overview of the environment with the added tables.</p>
<div id="STREX557" class="figure">
<p class="titleinfigure"><a id="CJFCFGFG"></a>Figure 2-2 Adding Objects to dbs3.example.com in the Environment</p>
<img width="647" height="618" src="img/strex003.gif" alt="Description of Figure 2-2 follows"/><br/>
<a id="sthref42" href="img_text/strex003.htm">Description of &#34;Figure 2-2 Adding Objects to dbs3.example.com in the Environment&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Complete the following steps to replicate these tables to the <code dir="ltr">dbs3.example.com</code> database.</p>
<ol>
<li>
<p><a href="#CJFHDIFJ">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CJFIBEFA">Stop the Apply Process at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFEJFIG">Configure the Apply Process for the Added Tables at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFBJJIF">Specify the Table Propagation Rules for the Added Tables at dbs2.example.com</a></p>
</li>
<li>
<p><a href="#CJFEEEHE">Prepare the Four Added Tables for Instantiation at dbs1.example.com</a></p>
</li>
<li>
<p><a href="#CJFIJIEH">Instantiate the dbs1.example.com Tables at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFFJCHI">Start the Apply Process at dbs3.example.com</a></p>
</li>
<li>
<p><a href="#CJFGEGEJ">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="STREX1244"></a><a id="CJFHDIFJ"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL streams_addobjs.out

/*
</pre></dd>
<dd><a id="STREX1245"></a><a id="CJFIBEFA"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp; Stop the Apply Process at dbs3.example.com</dt>
<dd>
<p>Until you finish adding objects to <code dir="ltr">dbs3.example.com</code>, you must ensure that the apply process that will apply changes for the added objects does not try to apply changes for these objects. You can do this by stopping the capture process at the source database. Or, you can do this by stopping propagation of changes from <code dir="ltr">dbs2.example.com</code> to <code dir="ltr">dbs3.example.com</code>. Yet another alternative is to stop the apply process at <code dir="ltr">dbs3.example.com</code>. This example stops the apply process at <code dir="ltr">dbs3.example.com</code>.</p>
<p>Connect to <code dir="ltr">dbs3.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs3.example.com

/*
</pre>
<p>Stop the apply process at <code dir="ltr">dbs3.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.STOP_APPLY(
    apply_name  =&gt; &#39;apply&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1246"></a><a id="CJFEJFIG"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Configure the Apply Process for the Added Tables at dbs3.example.com</dt>
<dd>
<p>Configure the apply process at <code dir="ltr">dbs3.example.com</code> to apply changes to the tables you are adding.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name      =&gt; &#39;hr.departments&#39;,
    streams_type    =&gt; &#39;apply&#39;, 
    streams_name    =&gt; &#39;apply&#39;,
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name      =&gt; &#39;hr.employees&#39;,
    streams_type    =&gt; &#39;apply&#39;, 
    streams_name    =&gt; &#39;apply&#39;,
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name      =&gt; &#39;hr.job_history&#39;,
    streams_type    =&gt; &#39;apply&#39;, 
    streams_name    =&gt; &#39;apply&#39;,
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name      =&gt; &#39;hr.jobs&#39;,
    streams_type    =&gt; &#39;apply&#39;, 
    streams_name    =&gt; &#39;apply&#39;,
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1247"></a><a id="CJFBJJIF"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Specify the Table Propagation Rules for the Added Tables at dbs2.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs2.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs2.example.com

/*
</pre>
<p>Add the tables to the rules for propagation from the queue at <code dir="ltr">dbs2.example.com</code> to the queue at <code dir="ltr">dbs3.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_PROPAGATION_RULES(
    table_name               =&gt; &#39;hr.departments&#39;,
    streams_name             =&gt; &#39;dbs2_to_dbs3&#39;,
    source_queue_name        =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_queue_name   =&gt; &#39;strmadmin.streams_queue@dbs3.example.com&#39;, 
    include_dml              =&gt; TRUE,
    include_ddl              =&gt; TRUE,
    source_database          =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule           =&gt; TRUE);
END;
/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_PROPAGATION_RULES(
    table_name              =&gt; &#39;hr.employees&#39;,
    streams_name            =&gt; &#39;dbs2_to_dbs3&#39;,
    source_queue_name       =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_queue_name  =&gt; &#39;strmadmin.streams_queue@dbs3.example.com&#39;, 
    include_dml             =&gt; TRUE,
    include_ddl             =&gt; TRUE,
    source_database         =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule          =&gt; TRUE);
END;
/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_PROPAGATION_RULES(
    table_name              =&gt; &#39;hr.job_history&#39;,
    streams_name            =&gt; &#39;dbs2_to_dbs3&#39;,
    source_queue_name       =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_queue_name  =&gt; &#39;strmadmin.streams_queue@dbs3.example.com&#39;, 
    include_dml             =&gt; TRUE,
    include_ddl             =&gt; TRUE,
    source_database         =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule          =&gt; TRUE);
END;
/

BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_PROPAGATION_RULES(
    table_name              =&gt; &#39;hr.jobs&#39;,
    streams_name            =&gt; &#39;dbs2_to_dbs3&#39;,
    source_queue_name       =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_queue_name  =&gt; &#39;strmadmin.streams_queue@dbs3.example.com&#39;, 
    include_dml             =&gt; TRUE,
    include_ddl             =&gt; TRUE,
    source_database         =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule          =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1248"></a><a id="CJFEEEHE"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Prepare the Four Added Tables for Instantiation at dbs1.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs1.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs1.example.com

/*
</pre>
<p>Prepare the tables for instantiation. These tables will be instantiated at <code dir="ltr">dbs3.example.com</code>. This step marks the lowest SCN of the tables for instantiation. SCNs subsequent to the lowest SCN can be used for instantiation. Also, this preparation is necessary so that the Oracle Streams data dictionary for the relevant propagations and the apply process at <code dir="ltr">dbs3.example.com</code> contain information about these tables.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When the <code dir="ltr">PREPARE_TABLE_INSTANTIATION</code> procedure is run in this step, the <code dir="ltr">supplemental_logging</code> parameter is not specified. Therefore, the default value (<code dir="ltr">keys</code>) is used for this parameter. Supplemental logging already was enabled for any primary key, unique key, bitmap index, and foreign key columns in these tables in Step <a href="#CJFBEBJF">3</a>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP115" href="../STREP/instant.htm#STREP115"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a></div>
<pre dir="ltr">*/

BEGIN
  DBMS_CAPTURE_ADM.PREPARE_TABLE_INSTANTIATION(
    table_name  =&gt; &#39;hr.departments&#39;);
END;
/
 
BEGIN
  DBMS_CAPTURE_ADM.PREPARE_TABLE_INSTANTIATION(
    table_name  =&gt; &#39;hr.employees&#39;);
END;
/

BEGIN
  DBMS_CAPTURE_ADM.PREPARE_TABLE_INSTANTIATION(
    table_name  =&gt; &#39;hr.job_history&#39;);
END;
/

BEGIN
  DBMS_CAPTURE_ADM.PREPARE_TABLE_INSTANTIATION(
    table_name  =&gt; &#39;hr.jobs&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1249"></a><a id="CJFIJIEH"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Instantiate the dbs1.example.com Tables at dbs3.example.com</dt>
<dd>
<p>This example performs a network Data Pump import of the following tables:</p>
<ul>
<li>
<p><code dir="ltr">hr.departments</code></p>
</li>
<li>
<p><code dir="ltr">hr.employees</code></p>
</li>
<li>
<p><code dir="ltr">hr.job_history</code></p>
</li>
<li>
<p><code dir="ltr">hr.jobs</code></p>
</li>
</ul>
<p>A network import means that Data Pump imports these tables from <code dir="ltr">dbs1.example.com</code> without using an export dump file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for information about performing an import</div>
<p>Connect to <code dir="ltr">dbs3.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs3.example.com

/*
</pre>
<p>This example will do a table import using the <code dir="ltr">DBMS_DATAPUMP</code> package. For simplicity, exceptions from any of the API calls will not be trapped. However, Oracle recommends that you define exception handlers and call <code dir="ltr">GET_STATUS</code> to retrieve more detailed error information if a failure occurs. If you want to monitor the import, then query the <code dir="ltr">DBA_DATAPUMP_JOBS</code> data dictionary view at the import database.</p>
<pre dir="ltr">*/

SET SERVEROUTPUT ON
DECLARE
  h1        NUMBER;         -- Data Pump job handle
  sscn      NUMBER;         -- Variable to hold current source SCN
  job_state VARCHAR2(30);   -- To keep track of job state
  js        ku$_JobStatus;  -- The job status from GET_STATUS
  sts       ku$_Status;     -- The status object returned by GET_STATUS
  job_not_exist    exception;
  pragma exception_init(job_not_exist, -31626);
BEGIN
-- Create a (user-named) Data Pump job to do a table-level import.
  h1 := DBMS_DATAPUMP.OPEN(
          operation   =&gt; &#39;IMPORT&#39;,
          job_mode    =&gt; &#39;TABLE&#39;,
          remote_link =&gt; &#39;DBS1.EXAMPLE.COM&#39;,
          job_name    =&gt; &#39;dp_sing3&#39;);
-- A metadata filter is used to specify the schema that owns the tables 
-- that will be imported.
  DBMS_DATAPUMP.METADATA_FILTER(
    handle    =&gt; h1,
    name      =&gt; &#39;SCHEMA_EXPR&#39;,
    value     =&gt; &#39;=&#39;&#39;HR&#39;&#39;&#39;);
-- A metadata filter is used to specify the tables that will be imported.
  DBMS_DATAPUMP.METADATA_FILTER(
    handle    =&gt; h1,
    name      =&gt; &#39;NAME_EXPR&#39;,
    value     =&gt; &#39;IN(&#39;&#39;DEPARTMENTS&#39;&#39;, &#39;&#39;EMPLOYEES&#39;&#39;, 
                     &#39;&#39;JOB_HISTORY&#39;&#39;, &#39;&#39;JOBS&#39;&#39;)&#39;);
-- Get the current SCN of the source database, and set the FLASHBACK_SCN 
-- parameter to this value to ensure consistency between all of the 
-- objects included in the import.
  sscn := DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER@dbs1.example.com();
  DBMS_DATAPUMP.SET_PARAMETER(
    handle =&gt; h1,
    name   =&gt; &#39;FLASHBACK_SCN&#39;,
    value  =&gt; sscn); 
-- Start the job. 
  DBMS_DATAPUMP.START_JOB(h1);
-- The import job should be running. In the following loop, the job
-- is monitored until it completes.
  job_state := &#39;UNDEFINED&#39;;
  BEGIN
    WHILE (job_state != &#39;COMPLETED&#39;) AND (job_state != &#39;STOPPED&#39;) LOOP
      sts:=DBMS_DATAPUMP.GET_STATUS(
             handle  =&gt; h1,
             mask    =&gt; DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR +
                        DBMS_DATAPUMP.KU$_STATUS_JOB_STATUS +
                        DBMS_DATAPUMP.KU$_STATUS_WIP,
             timeout =&gt; -1);
      js := sts.job_status;
      DBMS_LOCK.SLEEP(10);
      job_state := js.state;
    END LOOP;
  -- Gets an exception when job no longer exists
    EXCEPTION WHEN job_not_exist THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Data Pump job has completed&#39;);
      DBMS_OUTPUT.PUT_LINE(&#39;Instantiation SCN: &#39; ||sscn);
  END;
END;
/

/*
</pre></dd>
<dd><a id="STREX1250"></a><a id="CJFFJCHI"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp; Start the Apply Process at dbs3.example.com</dt>
<dd>
<p>Start the apply process at <code dir="ltr">dbs3.example.com</code>. This apply process was stopped in Step <a href="#CJFIBEFA">2</a>.</p>
<p>Connect to <code dir="ltr">dbs3.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs3.example.com

/*
</pre>
<p>Start the apply process at <code dir="ltr">dbs3.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1251"></a><a id="CJFGEGEJ"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">streams_addobjs.out</code> spool file to ensure that all actions finished successfully after this script is completed.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1114557"></a>/*************************** END OF SCRIPT ******************************/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="CJFHGEDI"></a>
<div id="STREX558" class="sect1">
<h2 class="sect1">Make a DML Change to the hr.employees Table</h2>
<p>After completing the examples described in the <a href="#i1008513">&#34;Add Objects to an Existing Oracle Streams Replication Environment&#34;</a> section, you can make DML and DDL changes to the tables in the <code dir="ltr">hr</code> schema at the <code dir="ltr">dbs1.example.com</code> database. These changes will be replicated to <code dir="ltr">dbs3.example.com</code>. You can check these tables at <code dir="ltr">dbs3.example.com</code> to see that the changes have been replicated.</p>
<p>For example, complete the following steps to make a DML change to the <code dir="ltr">hr.employees</code> table at <code dir="ltr">dbs1.example.com</code>. Next, query the <code dir="ltr">hr.employees</code> table at <code dir="ltr">dbs3.example.com</code> to see that the change has been replicated.</p>
<dl>
<dd><a id="STREX1252"></a><a id="sthref43"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Make a DML Change to the hr.employees Table</dt>
<dd>
<p>Make the following change:</p>
<pre dir="ltr">CONNECT hr@dbs1.example.com
Enter password: <span class="italic">password</span>

UPDATE hr.employees SET job_id=&#39;ST_MAN&#39; WHERE employee_id=143;
COMMIT;
</pre></dd>
<dd><a id="STREX1253"></a><a id="sthref44"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Query the hr.employees Table at dbs3.example.com</dt>
<dd>
<p>After some time passes to allow for capture, propagation, and apply of the change performed in the previous step, run the following query to confirm that the <code dir="ltr">UPDATE</code> change made to the <code dir="ltr">hr.employees</code> table at <code dir="ltr">dbs1.example.com</code> has been applied to the <code dir="ltr">hr.employees</code> table at <code dir="ltr">dbs3.example.com</code>.</p>
<pre dir="ltr">CONNECT hr@dbs3.example.com
Enter password: <span class="italic">password</span>

SELECT job_id FROM hr.employees WHERE employee_id=143;
</pre>
<p>You should see <code dir="ltr">ST_MAN</code> for the value of the <code dir="ltr">job_id</code>.</p>
</dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i1008932"></a>
<div id="STREX104" class="sect1">
<h2 class="sect1">Add a Database to an Existing Oracle Streams Replication Environment<a id="sthref45"></a><a id="sthref46"></a></h2>
<p>This example extends the Oracle Streams environment configured in the previous sections by adding an additional database to the existing configuration. In this example, an existing Oracle database named <code dir="ltr">dbs5.example.com</code> is added to receive changes to the entire <code dir="ltr">hr</code> schema from the queue at <code dir="ltr">dbs2.example.com</code>.</p>
<p><a href="#i1008946">Figure 2-3</a> provides an overview of the environment with the added database.</p>
<div id="STREX559" class="figure">
<p class="titleinfigure"><a id="i1008946"></a>Figure 2-3 Adding the dbs5.example.com Oracle Database to the Environment</p>
<img width="660" height="659" src="img/strex001.gif" alt="Description of Figure 2-3 follows"/><br/>
<a id="sthref47" href="img_text/strex001.htm">Description of &#34;Figure 2-3 Adding the dbs5.example.com Oracle Database to the Environment&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>To complete this example, you must meet the following prerequisites:</p>
<ul>
<li>
<p>The <code dir="ltr">dbs5.example.com</code> database must exist.</p>
</li>
<li>
<p>The <code dir="ltr">dbs2.example.com</code> and <code dir="ltr">dbs5.example.com</code> databases must be able to communicate with each other through Oracle Net.</p>
</li>
<li>
<p>The <code dir="ltr">dbs5.example.com</code> and <code dir="ltr">dbs1.example.com</code> databases must be able to communicate with each other through Oracle Net (for optional Data Pump network instantiation).</p>
</li>
<li>
<p>You must have completed the tasks in the previous examples in this chapter.</p>
</li>
<li>
<p>The <a href="#i1006173">&#34;Prerequisites&#34;</a> must be met if you want the entire Oracle Streams environment to work properly.</p>
</li>
<li>
<p>This examples creates a new user to function as the Oracle Streams administrator (<code dir="ltr">strmadmin</code>) at the <code dir="ltr">dbs5.example.com</code> database and prompts you for the tablespace you want to use for this user&#39;s data. Before you start this example, either create a new tablespace or identify an existing tablespace for the Oracle Streams administrator to use at the <code dir="ltr">dbs5.example.com</code> database. The Oracle Streams administrator should not use the <code dir="ltr">SYSTEM</code> tablespace.</p>
</li>
</ul>
<p>Complete the following steps to add <code dir="ltr">dbs5.example.com</code> to the Oracle Streams environment.</p>
<ol>
<li>
<p><a href="#CJFJIBGD">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#CJFHIJEG">Drop All of the Tables in the hr Schema at dbs5.example.com</a></p>
</li>
<li>
<p><a href="#CJFJGFBE">Set Up Users at dbs5.example.com</a></p>
</li>
<li>
<p><a href="#CJFHAHAA">Create the ANYDATA Queue at dbs5.example.com</a></p>
</li>
<li>
<p><a href="#CJFCDJGC">Create a Database Link at dbs5.example.com to dbs1.example.com</a></p>
</li>
<li>
<p><a href="#CJFDDBGA">Configure the Apply Process at dbs5.example.com</a></p>
</li>
<li>
<p><a href="#CJFCHEAC">Specify hr as the Apply User for the Apply Process at dbs5.example.com</a></p>
</li>
<li>
<p><a href="#CJFBHJHJ">Grant the hr User Execute Privilege on the Apply Process Rule Set</a></p>
</li>
<li>
<p><a href="#CJFIDAEC">Create the Database Link Between dbs2.example.com and dbs5.example.com</a></p>
</li>
<li>
<p><a href="#CJFDGGCG">Configure Propagation Between dbs2.example.com and dbs5.example.com</a></p>
</li>
<li>
<p><a href="#CJFBEDGC">Prepare the hr Schema for Instantiation at dbs1.example.com</a></p>
</li>
<li>
<p><a href="#CJFFACCJ">Instantiate the dbs1.example.com Tables at dbs5.example.com</a></p>
</li>
<li>
<p><a href="#CJFJDGDB">Start the Apply Process at dbs5.example.com</a></p>
</li>
<li>
<p><a href="#CJFGGDEI">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<dl>
<dd><a id="STREX1254"></a><a id="CJFJIBGD"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL streams_adddb.out

/*
</pre></dd>
<dd><a id="STREX1255"></a><a id="CJFHIJEG"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Drop All of the Tables in the hr Schema at dbs5.example.com</dt>
<dd>
<p>This example illustrates instantiating the tables in the <code dir="ltr">hr</code> schema by importing them from <code dir="ltr">dbs1.example.com</code> into <code dir="ltr">dbs5.example.com</code> using Data Pump. You must delete these tables at <code dir="ltr">dbs5.example.com</code> for the instantiation portion of this example to work properly.</p>
<p>Connect as <code dir="ltr">hr</code> at <code dir="ltr">dbs5.example.com</code>.</p>
<pre dir="ltr">*/

CONNECT hr@dbs5.example.com

/*
</pre>
<p>Drop all tables in the <code dir="ltr">hr</code> schema in the <code dir="ltr">dbs5.example.com</code> database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you complete this step and drop all of the tables in the <code dir="ltr">hr</code> schema, then you should complete the remaining sections of this example to reinstantiate the <code dir="ltr">hr</code> schema at <code dir="ltr">dbs5.example.com</code>. If the <code dir="ltr">hr</code> schema does not exist in an Oracle database, then some examples in the Oracle documentation set can fail.</div>
<pre dir="ltr">*/

DROP TABLE hr.countries CASCADE CONSTRAINTS;
DROP TABLE hr.departments CASCADE CONSTRAINTS;
DROP TABLE hr.employees CASCADE CONSTRAINTS;
DROP TABLE hr.job_history CASCADE CONSTRAINTS;
DROP TABLE hr.jobs CASCADE CONSTRAINTS;
DROP TABLE hr.locations CASCADE CONSTRAINTS;
DROP TABLE hr.regions CASCADE CONSTRAINTS;

/*
</pre></dd>
<dd><a id="STREX1256"></a><a id="CJFJGFBE"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Set Up Users at dbs5.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs5.example.com</code> as <code dir="ltr">SYSTEM</code> user.</p>
<pre dir="ltr">*/
 
CONNECT system@dbs5.example.com

/*
</pre>
<p>Create the Oracle Streams administrator named <code dir="ltr">strmadmin</code> and grant this user the necessary privileges. These privileges enable the user to manage queues, execute subprograms in packages related to Oracle Streams, create rule sets, create rules, and monitor the Oracle Streams environment by querying data dictionary views and queue tables. You can choose a different name for this user.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">ACCEPT</code> command must appear on a single line in the script.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP200" href="../STREP/prep_rep.htm#STREP200"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about configuring an Oracle Streams administrator</div>
<pre dir="ltr">*/

ACCEPT password PROMPT &#39;Enter password for user: &#39; HIDE

GRANT DBA TO strmadmin IDENTIFIED BY &amp;password;

ACCEPT streams_tbs PROMPT &#39;Enter Oracle Streams administrator tablespace on dbs5.example.com: &#39; HIDE

ALTER USER strmadmin DEFAULT TABLESPACE &amp;streams_tbs
                     QUOTA UNLIMITED ON &amp;streams_tbs;

/*
</pre></dd>
<dd><a id="STREX1257"></a><a id="CJFHAHAA"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create the ANYDATA Queue at dbs5.example.com</dt>
<dd>
<p>Connect as the Oracle Streams administrator at the database you are adding. In this example, that database is <code dir="ltr">dbs5.example.com</code>.</p>
<pre dir="ltr">*/

CONNECT strmadmin@dbs5.example.com

/*
</pre>
<p>Run the <code dir="ltr">SET_UP_QUEUE</code> procedure to create a queue named <code dir="ltr">streams_queue</code> at <code dir="ltr">dbs5.example.com</code>. This queue will function as the <code dir="ltr">ANYDATA</code> queue by holding the changes that will be applied at this database.</p>
<p>Running the <code dir="ltr">SET_UP_QUEUE</code> procedure performs the following actions:</p>
<ul>
<li>
<p>Creates a queue table named <code dir="ltr">streams_queue_table</code>. This queue table is owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>) and uses the default storage of this user.</p>
</li>
<li>
<p>Creates a queue named <code dir="ltr">streams_queue</code> owned by the Oracle Streams administrator (<code dir="ltr">strmadmin</code>).</p>
</li>
<li>
<p>Starts the queue.</p>
</li>
</ul>
<pre dir="ltr">*/

EXEC  DBMS_STREAMS_ADM.SET_UP_QUEUE();

/*
</pre></dd>
<dd><a id="STREX1258"></a><a id="CJFCDJGC"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create a Database Link at dbs5.example.com<a class="dashingAutolink" name="autolink-104297"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="sthref48"></a> to dbs1.example.com</dt>
<dd>
<p>Create a database link from <code dir="ltr">dbs5.example.com</code> to <code dir="ltr">dbs1.example.com</code>. Later in this example, this database link is used for the instantiation of the database objects that were dropped in Step <a href="#CJFHIJEG">2</a>. This example uses the <code dir="ltr">DBMS_DATAPUMP</code> package to perform a network import of these database objects directly from the <code dir="ltr">dbs1.example.com</code> database. Because this example performs a network import, no dump file is required.</p>
<p>Alternatively, you can perform an export at the source database <code dir="ltr">dbs1.example.com</code>, transfer the export dump file to the destination database <code dir="ltr">dbs5.example.com</code>, and then import the export dump file at the destination database. In this case, the database link created in this step is not required.</p>
<pre dir="ltr">*/

CREATE DATABASE LINK dbs1.example.com CONNECT TO strmadmin 
   IDENTIFIED BY &amp;password USING &#39;dbs1.example.com&#39;;

/*
</pre></dd>
<dd><a id="STREX1259"></a><a id="CJFDDBGA"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Configure the Apply Process at dbs5.example.com</dt>
<dd>
<p>While still connected as the Oracle Streams administrator at <code dir="ltr">dbs5.example.com</code>, configure the apply process to apply changes to the <code dir="ltr">hr</code> schema.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_RULES(
    schema_name     =&gt; &#39;hr&#39;,   
    streams_type    =&gt; &#39;apply&#39;,
    streams_name    =&gt; &#39;apply&#39;,
    queue_name      =&gt; &#39;strmadmin.streams_queue&#39;,
    include_dml     =&gt; TRUE,
    include_ddl     =&gt; TRUE,
    source_database =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule  =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1260"></a><a id="CJFCHEAC"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Specify hr as the Apply User for the Apply Process at dbs5.example.com</dt>
<dd>
<p>In this example, the <code dir="ltr">hr</code> user owns all of the database objects for which changes are applied by the apply process at this database. Therefore, <code dir="ltr">hr</code> already has the necessary privileges to change these database objects, and it is convenient to make <code dir="ltr">hr</code> the apply user.</p>
<p>When the apply process was created in the previous step, the Oracle Streams administrator <code dir="ltr">strmadmin</code> was specified as the apply user by default, because <code dir="ltr">strmadmin</code> ran the procedure that created the apply process. Instead of specifying hr as the apply user, you could retain <code dir="ltr">strmadmin</code> as the apply user, but then you must grant <code dir="ltr">strmadmin</code> privileges on all of the database objects for which changes are applied and privileges to execute all user procedures used by the apply process. In an environment where an apply process applies changes to database objects in multiple schemas, it might be more convenient to use the Oracle Streams administrator as the apply user.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP200" href="../STREP/prep_rep.htm#STREP200"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about configuring an Oracle Streams administrator</div>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name =&gt; &#39;apply&#39;,
    apply_user =&gt; &#39;hr&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1261"></a><a id="CJFBHJHJ"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Grant the hr User Execute Privilege on the Apply Process Rule Set</dt>
<dd>
<p>Because the <code dir="ltr">hr</code> user was specified as the apply user in the previous step, the <code dir="ltr">hr</code> user requires <code dir="ltr">EXECUTE</code> privilege on the positive rule set used by the apply process</p>
<pre dir="ltr">*/

DECLARE
   rs_name  VARCHAR2(64);   -- Variable to hold rule set name
BEGIN
  SELECT RULE_SET_OWNER||&#39;.&#39;||RULE_SET_NAME 
    INTO rs_name 
    FROM DBA_APPLY 
    WHERE APPLY_NAME=&#39;APPLY&#39;;
  DBMS_RULE_ADM.GRANT_OBJECT_PRIVILEGE(
    privilege   =&gt; SYS.DBMS_RULE_ADM.EXECUTE_ON_RULE_SET,
    object_name =&gt; rs_name,
    grantee     =&gt; &#39;hr&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1262"></a><a id="CJFIDAEC"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Create the Database Link Between dbs2.example.com and dbs5.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs2.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs2.example.com

/*
</pre>
<p>Create the database links to the databases where changes are propagated. In this example, database <code dir="ltr">dbs2.example.com</code> propagates changes to <code dir="ltr">dbs5.example.com</code>.</p>
<pre dir="ltr">*/

CREATE DATABASE LINK dbs5.example.com CONNECT TO strmadmin 
   IDENTIFIED BY &amp;password USING &#39;dbs5.example.com&#39;;

/*
</pre></dd>
<dd><a id="STREX1263"></a><a id="CJFDGGCG"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Configure Propagation Between dbs2.example.com and dbs5.example.com</dt>
<dd>
<p>While still connected as the Oracle Streams administrator at <code dir="ltr">dbs2.example.com</code>, configure and schedule propagation from the queue at <code dir="ltr">dbs2.example.com</code> to the queue at <code dir="ltr">dbs5.example.com</code>. Remember, changes to the <code dir="ltr">hr</code> schema originated at <code dir="ltr">dbs1.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_STREAMS_ADM.ADD_SCHEMA_PROPAGATION_RULES(
    schema_name             =&gt; &#39;hr&#39;, 
    streams_name            =&gt; &#39;dbs2_to_dbs5&#39;, 
    source_queue_name       =&gt; &#39;strmadmin.streams_queue&#39;,
    destination_queue_name  =&gt; &#39;strmadmin.streams_queue@dbs5.example.com&#39;,
    include_dml             =&gt; TRUE,
    include_ddl             =&gt; TRUE,
    source_database         =&gt; &#39;dbs1.example.com&#39;,
    inclusion_rule          =&gt; TRUE,
    queue_to_queue          =&gt; TRUE);
END;
/

/*
</pre></dd>
<dd><a id="STREX1264"></a><a id="CJFBEDGC"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Prepare the hr Schema for Instantiation at dbs1.example.com</dt>
<dd>
<p>Connect to <code dir="ltr">dbs1.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs1.example.com

/*
</pre>
<p>Prepare the <code dir="ltr">hr</code> schema for instantiation. These tables in this schema will be instantiated at <code dir="ltr">dbs5.example.com</code>. This preparation is necessary so that the Oracle Streams data dictionary for the relevant propagations and the apply process at <code dir="ltr">dbs5.example.com</code> contain information about the <code dir="ltr">hr</code> schema and the objects in the schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP115" href="../STREP/instant.htm#STREP115"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a></div>
<pre dir="ltr">*/

BEGIN
  DBMS_CAPTURE_ADM.PREPARE_SCHEMA_INSTANTIATION(
    schema_name          =&gt; &#39;hr&#39;,
    supplemental_logging =&gt; &#39;keys&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1265"></a><a id="CJFFACCJ"></a></dd>
<dt class="seghead">Step 12&nbsp;&nbsp;&nbsp;Instantiate the dbs1.example.com Tables at dbs5.example.com</dt>
<dd>
<p>This example performs a network Data Pump import of the following tables:</p>
<ul>
<li>
<p><code dir="ltr">hr.countries</code></p>
</li>
<li>
<p><code dir="ltr">hr.departments</code></p>
</li>
<li>
<p><code dir="ltr">hr.employees</code></p>
</li>
<li>
<p><code dir="ltr">hr.job_history</code></p>
</li>
<li>
<p><code dir="ltr">hr.jobs</code></p>
</li>
<li>
<p><code dir="ltr">hr.locations</code></p>
</li>
<li>
<p><code dir="ltr">hr.regions</code></p>
</li>
</ul>
<p>A network import means that Data Pump imports these tables from <code dir="ltr">dbs1.example.com</code> without using an export dump file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for information about performing an import</div>
<p>Connect to <code dir="ltr">dbs5.example.com</code> as the <code dir="ltr">strmadmin</code> user.</p>
<pre dir="ltr">*/
 
CONNECT strmadmin@dbs5.example.com

/*
</pre>
<p>This example will do a table import using the <code dir="ltr">DBMS_DATAPUMP</code> package. For simplicity, exceptions from any of the API calls will not be trapped. However, Oracle recommends that you define exception handlers and call <code dir="ltr">GET_STATUS</code> to retrieve more detailed error information if a failure occurs. If you want to monitor the import, then query the <code dir="ltr">DBA_DATAPUMP_JOBS</code> data dictionary view at the import database.</p>
<pre dir="ltr">*/

SET SERVEROUTPUT ON
DECLARE
  h1        NUMBER;         -- Data Pump job handle
  sscn      NUMBER;         -- Variable to hold current source SCN
  job_state VARCHAR2(30);   -- To keep track of job state
  js        ku$_JobStatus;  -- The job status from GET_STATUS
  sts       ku$_Status;     -- The status object returned by GET_STATUS
  job_not_exist    exception;
  pragma exception_init(job_not_exist, -31626);
BEGIN
-- Create a (user-named) Data Pump job to do a table-level import.
  h1 := DBMS_DATAPUMP.OPEN(
          operation   =&gt; &#39;IMPORT&#39;,
          job_mode    =&gt; &#39;TABLE&#39;,
          remote_link =&gt; &#39;DBS1.EXAMPLE.COM&#39;,
          job_name    =&gt; &#39;dp_sing4&#39;);
-- A metadata filter is used to specify the schema that owns the tables 
-- that will be imported.
  DBMS_DATAPUMP.METADATA_FILTER(
    handle    =&gt; h1,
    name      =&gt; &#39;SCHEMA_EXPR&#39;,
    value     =&gt; &#39;=&#39;&#39;HR&#39;&#39;&#39;);
-- Get the current SCN of the source database, and set the FLASHBACK_SCN 
-- parameter to this value to ensure consistency between all of the 
-- objects included in the import.
  sscn := DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER@dbs1.example.com();
  DBMS_DATAPUMP.SET_PARAMETER(
    handle =&gt; h1,
    name   =&gt; &#39;FLASHBACK_SCN&#39;,
    value  =&gt; sscn); 
-- Start the job. 
  DBMS_DATAPUMP.START_JOB(h1);
-- The import job should be running. In the following loop, the job
-- is monitored until it completes.
  job_state := &#39;UNDEFINED&#39;;
  BEGIN
    WHILE (job_state != &#39;COMPLETED&#39;) AND (job_state != &#39;STOPPED&#39;) LOOP
      sts:=DBMS_DATAPUMP.GET_STATUS(
             handle  =&gt; h1,
             mask    =&gt; DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR +
                        DBMS_DATAPUMP.KU$_STATUS_JOB_STATUS +
                        DBMS_DATAPUMP.KU$_STATUS_WIP,
             timeout =&gt; -1);
      js := sts.job_status;
      DBMS_LOCK.SLEEP(10);
      job_state := js.state;
    END LOOP;
  -- Gets an exception when job no longer exists
    EXCEPTION WHEN job_not_exist THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Data Pump job has completed&#39;);
      DBMS_OUTPUT.PUT_LINE(&#39;Instantiation SCN: &#39; ||sscn);
  END;
END;
/

/*
</pre></dd>
<dd><a id="STREX1266"></a><a id="CJFJDGDB"></a></dd>
<dt class="seghead">Step 13&nbsp;&nbsp;&nbsp;Start the Apply Process at dbs5.example.com</dt>
<dd>
<p>Connect as the Oracle Streams administrator at <code dir="ltr">dbs5.example.com</code>.</p>
<pre dir="ltr">*/

CONNECT strmadmin@dbs5.example.com

/*
</pre>
<p>Set the <code dir="ltr">disable_on_error</code> parameter to <code dir="ltr">n</code> so that the apply process will not be disabled if it encounters an error, and start apply process at <code dir="ltr">dbs5.example.com</code>.</p>
<pre dir="ltr">*/

BEGIN
  DBMS_APPLY_ADM.SET_PARAMETER(
    apply_name  =&gt; &#39;apply&#39;, 
    parameter   =&gt; &#39;disable_on_error&#39;, 
    value       =&gt; &#39;N&#39;);
END;
/

BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name  =&gt; &#39;apply&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1267"></a><a id="CJFGGDEI"></a></dd>
<dt class="seghead">Step 14&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">streams_adddb.out</code> spool file to ensure that all actions finished successfully after this script is completed.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1115018"></a>/*************************** END OF SCRIPT ******************************/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="CJFGFGFH"></a>
<div id="STREX560" class="sect1">
<h2 class="sect1">Make a DML Change to the hr.departments Table</h2>
<p>After completing the examples described in the <a href="#i1008932">&#34;Add a Database to an Existing Oracle Streams Replication Environment&#34;</a> section, you can make DML and DDL changes to the tables in the <code dir="ltr">hr</code> schema at the <code dir="ltr">dbs1.example.com</code> database. These changes will be replicated to <code dir="ltr">dbs5.example.com</code>. You can check these tables at <code dir="ltr">dbs5.example.com</code> to see that the changes have been replicated.</p>
<p>For example, complete the following steps to make a DML change to the <code dir="ltr">hr.departments</code> table at <code dir="ltr">dbs1.example.com</code>. Next, query the <code dir="ltr">hr.departments</code> table at <code dir="ltr">dbs5.example.com</code> to see that the change has been replicated.</p>
<dl>
<dd><a id="STREX1268"></a><a id="sthref49"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Make a DML Change to the hr.departments Table</dt>
<dd>
<p>Make the following change:</p>
<pre dir="ltr">CONNECT hr@dbs1.example.com
Enter password: <span class="italic">password</span>

UPDATE hr.departments SET location_id=2400 WHERE department_id=270;
COMMIT;
</pre></dd>
<dd><a id="STREX1269"></a><a id="sthref50"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Query the hr.departments Table at dbs5.example.com</dt>
<dd>
<p>After some time passes to allow for capture, propagation, and apply of the change performed in the previous step, run the following query to confirm that the <code dir="ltr">UPDATE</code> change made to the <code dir="ltr">hr.departments</code> table at <code dir="ltr">dbs1.example.com</code> has been applied to the <code dir="ltr">hr.departments</code> table at <code dir="ltr">dbs5.example.com</code>.</p>
<pre dir="ltr">CONNECT hr@dbs5.example.com
Enter password: <span class="italic">password</span>

SELECT location_id FROM hr.departments WHERE department_id=270;
</pre>
<p>You should see <code dir="ltr">2400</code> for the value of the <code dir="ltr">location_id</code>.</p>
</dd>
</dl>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4743">
<tr>
<td class="cellalignment4750">
<table class="cellalignment4748">
<tr>
<td class="cellalignment4747"><a href="repsimpdemo.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4747"><a href="repmultdemo.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2008, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4752">
<table class="cellalignment4746">
<tr>
<td class="cellalignment4747"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4747"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4747"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4747"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4747"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4747"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>