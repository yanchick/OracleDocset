<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-104275"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Logical%20Change%20Records%20with%20LOBs%20Example"></a><title>Logical Change Records with LOBs Example</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1042"/>
<meta name="dcterms.created" content="2015-02-05T11:48:35Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Streams Extended Examples"/>
<meta name="dcterms.identifier" content="E17912-10"/>
<meta name="dcterms.isVersionOf" content="STREX"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2008, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="capappdemo.htm" title="Previous" type="text/html"/>
<link rel="Next" href="rulesdemo.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17912-10.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/11</span> <!-- End Header -->
<div id="STREX1165" class="chapter"><a id="sthref89"></a>
<h1 class="chapter"><span class="secnum">5</span> Logical Change Records with LOBs Example</h1>
<p><a id="sthref90"></a><a id="sthref91"></a><a id="sthref92"></a><a id="sthref93"></a><a id="sthref94"></a><a id="sthref95"></a>This chapter illustrates an example that creates a PL/SQL procedure for constructing and enqueuing LCRs that contain LOBs.</p>
<p>This chapter contains this topic:</p>
<ul>
<li>
<p><a href="#CHDCCBBJ">Example Script for Constructing and Enqueuing LCRs Containing LOBs</a></p>
</li>
</ul>
<a id="CHDCCBBJ"></a>
<div id="STREX1166" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Example Script for Constructing and Enqueuing LCRs Containing LOBs</h2>
<ol>
<li>
<p><a href="#i1030561">Show Output and Spool Results</a></p>
</li>
<li>
<p><a href="#BABDACEH">Grant the Oracle Streams Administrator EXECUTE Privilege on DBMS_STREAMS_MESSAGING</a></p>
</li>
<li>
<p><a href="#BABBEEDD">Connect as the Oracle Streams Administrator</a></p>
</li>
<li>
<p><a href="#BABBGAIA">Create an ANYDATA Queue</a></p>
</li>
<li>
<p><a href="#BABHCIFD">Create and Start an Apply Process</a></p>
</li>
<li>
<p><a href="#BABJHGCC">Create a Schema with Tables Containing LOB Columns</a></p>
</li>
<li>
<p><a href="#BABGGBGF">Grant the Oracle Streams Administrator Necessary Privileges on the Tables</a></p>
</li>
<li>
<p><a href="#BABBDAIA">Create a PL/SQL Procedure to Enqueue LCRs Containing LOBs</a></p>
</li>
<li id="i1030538">
<p><a href="#BABFFDFH">Create the do_enq_clob Function to Enqueue CLOB Data</a></p>
</li>
<li>
<p><a href="#BABHBEBG">Enqueue CLOB Data Using the do_enq_clob Function</a></p>
</li>
<li>
<p><a href="#BABIIJFJ">Check the Spool Results</a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are viewing this document online, then you can copy the text from the &#34;BEGINNING OF SCRIPT&#34; line after this note to the next &#34;END OF SCRIPT&#34; line into a text editor and then edit the text to create a script for your environment. Run the script with SQL*Plus on a computer that can connect to all of the databases in the environment.</div>
<pre dir="ltr">/************************* BEGINNING OF SCRIPT ******************************
</pre>
<a id="i1030561"></a>
<dl>
<dd><a id="STREX1328"></a><a id="sthref96"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Show Output and Spool Results</dt>
<dd>
<p>Run <code dir="ltr">SET</code> <code dir="ltr">ECHO</code> <code dir="ltr">ON</code> and specify the spool file for the script. Check the spool file for errors after you run this script.</p>
<pre dir="ltr">*/

SET ECHO ON
SPOOL lob_construct.out

/*
</pre></dd>
<dd><a id="STREX1329"></a><a id="BABDACEH"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Grant the Oracle Streams Administrator EXECUTE Privilege on DBMS_STREAMS_MESSAGING</dt>
<dd>
<p>Explicit <code dir="ltr">EXECUTE</code> privilege on the package is required because a procedure in the package is called in within a PL/SQL procedure in Step <a href="#BABBDAIA">8</a>.</p>
<pre dir="ltr">*/

CONNECT / AS SYSDBA;

GRANT EXECUTE ON DBMS_STREAMS_MESSAGING TO strmadmin;

/*
</pre></dd>
<dd><a id="STREX1330"></a><a id="BABBEEDD"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Connect as the Oracle Streams Administrator</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">SET ECHO ON
SET FEEDBACK 1
SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 100
SET SERVEROUTPUT ON SIZE 100000

CONNECT strmadmin

/*
</pre></dd>
<dd><a id="STREX1331"></a><a id="BABBGAIA"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create an ANYDATA Queue</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_STREAMS_ADM.SET_UP_QUEUE( 
    queue_table =&gt; &#39;lobex_queue_table&#39;, 
    queue_name  =&gt; &#39;lobex_queue&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1332"></a><a id="BABHCIFD"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create and Start an Apply Process</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">BEGIN
  DBMS_APPLY_ADM.CREATE_APPLY(
    queue_name      =&gt; &#39;strmadmin.lobex_queue&#39;,
    apply_name      =&gt; &#39;apply_lob&#39;,
    apply_captured  =&gt; FALSE);
END;
/

BEGIN
  DBMS_APPLY_ADM.SET_PARAMETER(
    apply_name =&gt; &#39;apply_lob&#39;, 
    parameter  =&gt; &#39;disable_on_error&#39;,
    value      =&gt; &#39;N&#39;);
END;
/

BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    &#39;apply_lob&#39;);
END;
/

/*
</pre></dd>
<dd><a id="STREX1333"></a><a id="BABJHGCC"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Create a Schema with Tables Containing LOB Columns</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT system

CREATE TABLESPACE lob_user_tbs DATAFILE &#39;lob_user_tbs.dbf&#39; 
  SIZE 5M REUSE AUTOEXTEND ON MAXSIZE UNLIMITED;

ACCEPT password PROMPT &#39;Enter password for user: &#39; HIDE

CREATE USER lob_user
IDENTIFIED BY &amp;password
  DEFAULT TABLESPACE lob_user_tbs
  QUOTA UNLIMITED ON lob_user_tbs;

GRANT ALTER SESSION, CREATE CLUSTER, CREATE DATABASE LINK, CREATE SEQUENCE,
  CREATE SESSION, CREATE SYNONYM, CREATE TABLE, CREATE VIEW, CREATE INDEXTYPE, 
  CREATE OPERATOR, CREATE PROCEDURE, CREATE TRIGGER, CREATE TYPE
TO lob_user;

CONNECT lob_user/lob_user_pw

CREATE TABLE with_clob (a  NUMBER PRIMARY KEY,
                        c1 CLOB,
                        c2 CLOB,
                        c3 CLOB);

CREATE TABLE with_blob (a NUMBER PRIMARY KEY,
                        b BLOB);

/*
</pre></dd>
<dd><a id="STREX1334"></a><a id="BABGGBGF"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Grant the Oracle Streams Administrator Necessary Privileges on the Tables</dt>
<dd>
<p>Granting these privileges enables the Oracle Streams administrator to get the LOB length for offset and to perform DML operations on the tables.</p>
<pre dir="ltr">*/

GRANT ALL ON with_clob TO strmadmin;
GRANT ALL ON with_blob TO strmadmin;
COMMIT;

/*
</pre></dd>
<dd><a id="STREX1335"></a><a id="BABBDAIA"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Create a PL/SQL Procedure to Enqueue LCRs Containing LOBs</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">CONNECT strmadmin

CREATE OR REPLACE PROCEDURE enq_row_lcr(source_dbname  VARCHAR2,
                                            cmd_type       VARCHAR2,
                                            obj_owner      VARCHAR2,
                                            obj_name       VARCHAR2,
                                            old_vals       SYS.LCR$_ROW_LIST,
                                            new_vals       SYS.LCR$_ROW_LIST) AS
  xr_lcr         SYS.LCR$_ROW_RECORD;
BEGIN
  xr_lcr := SYS.LCR$_ROW_RECORD.CONSTRUCT(
              source_database_name =&gt; source_dbname,
              command_type         =&gt; cmd_type,
              object_owner         =&gt; obj_owner,
              object_name          =&gt; obj_name,
              old_values           =&gt; old_vals,
              new_values           =&gt; new_vals);
  -- Enqueue a row lcr
  DBMS_STREAMS_MESSAGING.ENQUEUE(
        queue_name         =&gt; &#39;lobex_queue&#39;, 
        payload            =&gt; ANYDATA.ConvertObject(xr_lcr));
END enq_row_lcr;
/
SHOW ERRORS

/*
</pre></dd>
<dd><a id="STREX1336"></a><a id="BABFFDFH"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Create the do_enq_clob Function to Enqueue CLOB Data</dt>
<dd>
<pre dir="ltr">*/
</pre>
<pre dir="ltr">-- Description of each variable:
-- src_dbname  : Source database name
-- tab_owner   : Table owner
-- tab_name    : Table name
-- col_name    : Name of the CLOB column
-- new_vals    : SYS.LCR$_ROW_LIST containing primary key and supplementally  
--               logged colums
-- clob_data   : CLOB that contains data to be sent
-- offset      : Offset from which data should be sent, default is 1
-- lsize       : Size of data to be sent, default is 0
-- chunk_size  : Size used for creating LOB chunks, default is 2048

CREATE OR REPLACE FUNCTION do_enq_clob(src_dbname     VARCHAR2,
                                       tab_owner      VARCHAR2,
                                       tab_name       VARCHAR2,
                                       col_name       VARCHAR2,
                                       new_vals       SYS.LCR$_ROW_LIST,
                                       clob_data      CLOB,
                                       offset         NUMBER default 1,
                                       lsize          NUMBER default 0,
                                       chunk_size     NUMBER default 2048) 
RETURN NUMBER IS
  lob_offset NUMBER; -- maintain lob offset
  newunit    SYS.LCR$_ROW_UNIT;
  tnewvals   SYS.LCR$_ROW_LIST;
  lob_flag   NUMBER;
  lob_data   VARCHAR2(32767);
  lob_size   NUMBER;
  unit_pos   NUMBER;
  final_size NUMBER;
  exit_flg   BOOLEAN;
  c_size     NUMBER;
  i          NUMBER;
BEGIN
  lob_size := DBMS_LOB.GETLENGTH(clob_data);
  unit_pos := new_vals.count + 1;
  tnewvals := new_vals;
  c_size   := chunk_size;
  i := 0;
  -- validate parameters
  IF (unit_pos &lt;= 1) THEN
    DBMS_OUTPUT.PUT_LINE(&#39;Invalid new_vals list&#39;);
    RETURN 1;
  END IF;

  IF (c_size &lt; 1) THEN
    DBMS_OUTPUT.PUT_LINE(&#39;Invalid LOB chunk size&#39;);
    RETURN 1;
  END IF;

  IF (lsize &lt; 0 OR lsize &gt; lob_size) THEN
    DBMS_OUTPUT.PUT_LINE(&#39;Invalid LOB size&#39;);
    RETURN 1;
  END IF;

  IF (offset &lt; 1 OR offset &gt;= lob_size) THEN
    DBMS_OUTPUT.PUT_LINE(&#39;Invalid lob offset&#39;);
    RETURN 1;
  ELSE
    lob_offset := offset;
  END IF;

  -- calculate final size
  IF (lsize = 0) THEN
    final_size := lob_size;
  ELSE
    final_size := lob_offset + lsize;
  END IF;

  --  The following output lines are for debugging purposes only.
  -- DBMS_OUTPUT.PUT_LINE(&#39;Final size: &#39; || final_size);
  -- DBMS_OUTPUT.PUT_LINE(&#39;Lob size: &#39; || lob_size);

  IF (final_size &lt; 1 OR final_size &gt; lob_size) THEN
    DBMS_OUTPUT.PUT_LINE(&#39;Invalid lob size&#39;);
    RETURN 1;
  END IF;

  -- expand new_vals list for LOB column
  tnewvals.extend();

  exit_flg := FALSE;

  -- Enqueue all LOB chunks
  LOOP
    --  The following output line is for debugging purposes only.
    DBMS_OUTPUT.PUT_LINE(&#39;About to write chunk#&#39; || i);
    i := i + 1;
 
    -- check if last LOB chunk
    IF ((lob_offset + c_size) &lt; final_size) THEN
      lob_flag := DBMS_LCR.LOB_CHUNK;
    ELSE
      lob_flag := DBMS_LCR.LAST_LOB_CHUNK;
      exit_flg := TRUE;
      --  The following output line is for debugging purposes only.
      DBMS_OUTPUT.PUT_LINE(&#39;Last LOB chunk&#39;);
    END IF;

    --  The following output lines are for debugging purposes only.
    DBMS_OUTPUT.PUT_LINE(&#39;lob offset: &#39; || lob_offset);
    DBMS_OUTPUT.PUT_LINE(&#39;Chunk size: &#39; || to_char(c_size));

    lob_data := DBMS_LOB.SUBSTR(clob_data, c_size, lob_offset); 

    -- create row unit for clob
    newunit := SYS.LCR$_ROW_UNIT(col_name,
                                 ANYDATA.ConvertVarChar2(lob_data), 
                                 lob_flag, 
                                 lob_offset, 
                                 NULL);

    -- insert new LCR$_ROW_UNIT
    tnewvals(unit_pos) := newunit;  

    -- enqueue lcr
    enq_row_lcr(
          source_dbname =&gt; src_dbname,
          cmd_type      =&gt; &#39;LOB WRITE&#39;,
          obj_owner     =&gt; tab_owner,
          obj_name      =&gt; tab_name,
          old_vals      =&gt; NULL,
          new_vals      =&gt; tnewvals);

    -- calculate next chunk size 
    lob_offset := lob_offset + c_size;
    
    IF ((final_size - lob_offset) &lt; c_size) THEN
      c_size := final_size - lob_offset + 1;
    END IF;

    --  The following output line is for debugging purposes only.
    DBMS_OUTPUT.PUT_LINE(&#39;Next chunk size : &#39; || TO_CHAR(c_size));

    IF (c_size &lt; 1) THEN
      exit_flg := TRUE;
    END IF;

    EXIT WHEN exit_flg;

  END LOOP;

  RETURN 0;
END do_enq_clob;
/

SHOW ERRORS

/*
</pre></dd>
<dd><a id="STREX1337"></a><a id="BABHBEBG"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Enqueue CLOB Data Using the do_enq_clob Function</dt>
<dd>
<p>The <code dir="ltr">DBMS_OUTPUT</code> lines in the following example can be used for debugging purposes if necessary. If they are not needed, then they can be commented out or deleted.</p>
<pre dir="ltr">*/

SET SERVEROUTPUT ON SIZE 100000
DECLARE
  c1_data CLOB;
  c2_data CLOB;
  c3_data CLOB;
  newunit1 SYS.LCR$_ROW_UNIT;
  newunit2 SYS.LCR$_ROW_UNIT;
  newunit3 SYS.LCR$_ROW_UNIT;
  newunit4 SYS.LCR$_ROW_UNIT;
  newvals  SYS.LCR$_ROW_LIST;
  big_data VARCHAR(22000);
  n        NUMBER;
BEGIN
  -- Create primary key for LCR$_ROW_UNIT
  newunit1 := SYS.LCR$_ROW_UNIT(&#39;A&#39;,
                                ANYDATA.ConvertNumber(3), 
                                NULL, 
                                NULL, 
                                NULL);
  -- Create empty CLOBs
  newunit2 := sys.lcr$_row_unit(&#39;C1&#39;,
                                ANYDATA.ConvertVarChar2(NULL),
                                DBMS_LCR.EMPTY_LOB, 
                                NULL, 
                                NULL);
  newunit3 := SYS.LCR$_ROW_UNIT(&#39;C2&#39;,
                                ANYDATA.ConvertVarChar2(NULL),
                                DBMS_LCR.EMPTY_LOB, 
                                NULL, 
                                NULL);
  newunit4 := SYS.LCR$_ROW_UNIT(&#39;C3&#39;,
                                ANYDATA.ConvertVarChar2(NULL),
                                DBMS_LCR.EMPTY_LOB, 
                                NULL, 
                                NULL);
  newvals := SYS.LCR$_ROW_LIST(newunit1,newunit2,newunit3,newunit4);

  -- Perform an insert
  enq_row_lcr(
    source_dbname =&gt; &#39;MYDB.EXAMPLE.COM&#39;,
    cmd_type      =&gt; &#39;INSERT&#39;,
    obj_owner     =&gt; &#39;LOB_USER&#39;,
    obj_name      =&gt; &#39;WITH_CLOB&#39;,
    old_vals      =&gt; NULL,
    new_vals      =&gt; newvals);

  -- construct clobs
  big_data := RPAD(&#39;Hello World&#39;, 1000, &#39;_&#39;);
  big_data := big_data || &#39;#&#39;;
  big_data := big_data || big_data || big_data || big_data || big_data;
  DBMS_LOB.CREATETEMPORARY(
    lob_loc =&gt; c1_data, 
    cache   =&gt; TRUE);
  DBMS_LOB.WRITEAPPEND(
    lob_loc =&gt; c1_data, 
    amount  =&gt; length(big_data), 
    buffer  =&gt; big_data);

  big_data := RPAD(&#39;1234567890#&#39;, 1000, &#39;_&#39;);
  big_data := big_data || big_data || big_data || big_data;
  DBMS_LOB.CREATETEMPORARY(
    lob_loc =&gt; c2_data, 
    cache   =&gt; TRUE);
  DBMS_LOB.WRITEAPPEND(
    lob_loc =&gt; c2_data, 
    amount  =&gt; length(big_data), 
    buffer  =&gt; big_data);

  big_data := RPAD(&#39;ASDFGHJKLQW&#39;, 2000, &#39;_&#39;);
  big_data := big_data || &#39;#&#39;;
  big_data := big_data || big_data || big_data || big_data || big_data;
  DBMS_LOB.CREATETEMPORARY(
    lob_loc =&gt; c3_data, 
    cache   =&gt; TRUE);
  DBMS_LOB.WRITEAPPEND(
    lob_loc =&gt; c3_data, 
    amount  =&gt; length(big_data), 
    buffer  =&gt; big_data);

  -- pk info
  newunit1 := SYS.LCR$_ROW_UNIT(&#39;A&#39;,
                                ANYDATA.ConvertNumber(3), 
                                NULL, 
                                NULL, 
                                NULL);
  newvals  := SYS.LCR$_ROW_LIST(newunit1); 

  -- write c1 clob
  n := do_enq_clob(
         src_dbname =&gt; &#39;MYDB.EXAMPLE.COM&#39;,
         tab_owner  =&gt; &#39;LOB_USER&#39;,
         tab_name   =&gt; &#39;WITH_CLOB&#39;,
         col_name   =&gt; &#39;C1&#39;,
         new_vals   =&gt; newvals,
         clob_data  =&gt; c1_data,
         offset     =&gt; 1,
         chunk_size =&gt; 1024);
  DBMS_OUTPUT.PUT_LINE(&#39;n=&#39; || n);
 
  -- write c2 clob
  newvals  := SYS.LCR$_ROW_LIST(newunit1); 
  n := do_enq_clob(
         src_dbname =&gt; &#39;MYDB.EXAMPLE.COM&#39;,
         tab_owner  =&gt; &#39;LOB_USER&#39;,
         tab_name   =&gt; &#39;WITH_CLOB&#39;,
         col_name   =&gt; &#39;C2&#39;,
         new_vals   =&gt; newvals,
         clob_data  =&gt; c2_data,
         offset     =&gt; 1,
         chunk_size =&gt; 2000);
  DBMS_OUTPUT.PUT_LINE(&#39;n=&#39; || n);
 
  -- write c3 clob
  newvals  := SYS.LCR$_ROW_LIST(newunit1); 
  n := do_enq_clob(src_dbname=&gt;&#39;MYDB.EXAMPLE.COM&#39;,
         tab_owner  =&gt; &#39;LOB_USER&#39;,
         tab_name   =&gt; &#39;WITH_CLOB&#39;,
         col_name   =&gt; &#39;C3&#39;,
         new_vals   =&gt; newvals,
         clob_data  =&gt; c3_data,
         offset     =&gt; 1,
         chunk_size =&gt; 500);
  DBMS_OUTPUT.PUT_LINE(&#39;n=&#39; || n);
 
  COMMIT;

END;
/

/*
</pre></dd>
<dd><a id="STREX1338"></a><a id="BABIIJFJ"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Check the Spool Results</dt>
<dd>
<p>Check the <code dir="ltr">lob_construct.out</code> spool file to ensure that all actions completed successfully after this script completes.</p>
<pre dir="ltr">*/

SET ECHO OFF
SPOOL OFF

<a id="i1030994"></a>/*************************** END OF SCRIPT ******************************/
</pre>
<p>After you run the script, you can check the <code dir="ltr">lob_user.with_clob</code> table to list the rows applied by the apply process. The <code dir="ltr">DBMS_LOCK.SLEEP</code> statement is used to give the apply process time to apply the enqueued rows.</p>
<pre dir="ltr">CONNECT lob_user/lob_user_pw

EXECUTE DBMS_LOCK.SLEEP(10);

SELECT a, c1, c2, c3 FROM with_clob ORDER BY a;

SELECT a, LENGTH(c1), LENGTH(c2), LENGTH(c3) FROM with_clob ORDER BY a;
</pre></dd>
</dl>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4743">
<tr>
<td class="cellalignment4750">
<table class="cellalignment4748">
<tr>
<td class="cellalignment4747"><a href="capappdemo.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4747"><a href="rulesdemo.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2008, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4752">
<table class="cellalignment4746">
<tr>
<td class="cellalignment4747"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4747"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4747"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4747"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4747"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4747"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>