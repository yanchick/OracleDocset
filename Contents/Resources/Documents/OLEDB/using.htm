<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-86479"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Features%20of%20OraOLEDB"></a><title>Features of OraOLEDB</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-09-17T16:25:0Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Provider for OLE DB Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53664-01"/>
<meta name="dcterms.isVersionOf" content="OLEDB"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="intro.htm" title="Previous" type="text/html"/>
<link rel="Next" href="appxtype.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53664-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/9</span> <!-- End Header -->
<div id="OLEDB003" class="chapter"><a id="BABGIGJF"></a>
<h1 class="chapter"><span class="secnum">2</span> Features of OraOLEDB</h1>
<p>This chapter describes components of Oracle Provider for OLE DB (OraOLEDB) and how to use the components to develop OLE DB consumer applications.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1016475">OraOLEDB Provider Specific Features</a></p>
</li>
<li>
<p><a href="#i1017396">Using OraOLEDB with Visual Basic</a></p>
</li>
</ul>
<a id="i1016475"></a>
<div id="OLEDB126" class="sect1">
<h2 class="sect1">OraOLEDB Provider Specific Features</h2>
<p>The following sections describe <a id="sthref26"></a><a id="sthref27"></a>provider-specific features of OraOLEDB:</p>
<ul>
<li>
<p><a href="#i1016515">Data Source</a></p>
</li>
<li>
<p><a href="#i1016708">OraOLEDB Sessions</a></p>
</li>
<li>
<p><a href="#i1016737">Commands</a></p>
</li>
<li>
<p><a href="#i1017024">Rowsets</a></p>
</li>
<li>
<p><a href="#CHDJJDAJ">Data Types</a></p>
</li>
<li>
<p><a href="#i1017202">LOB Support</a></p>
</li>
<li>
<p><a href="#i1017221">Unicode Support</a></p>
</li>
<li>
<p><a href="#BABHCBAD">Errors</a></p>
</li>
<li>
<p><a href="#i1017293">OLEDB.NET Data Provider Compatibility</a></p>
</li>
</ul>
<p>Additional provider-specific information is provided in <a href="appxtype.htm#g633380">Appendix A, &#34;Provider-Specific Information&#34;</a>.</p>
<a id="i1016515"></a>
<div id="OLEDB144" class="sect2">
<h3 class="sect2">Data Source<a id="sthref28"></a></h3>
<p>A data source object in OraOLEDB is responsible for establishing the first connection to the Oracle Database. To establish the initial connection, the consumer must use the <a id="sthref29"></a><a id="sthref30"></a><a id="sthref31"></a><code>CoCreateInstance</code> function to create an instance of the data source object. This function requires important information about the provider: class ID of the provider and executable context. The <a id="sthref32"></a><a id="sthref33"></a>class ID of OraOLEDB is <code>CLSID_OraOLEDB</code>.</p>
<p>OraOLEDB is an in-process server. When calling <code>CoCreateInstance</code>, use the <a id="sthref34"></a><code>CLSCTX_INPROC_SERVER</code> macro. For example:</p>
<pre>// create an instance of OraOLEDB data source object and 
// obtain the IDBInitialize interface
hr = CoCreateInstance(CLSID_OraOLEDB, NULL, 
                      CLSCTX_INPROC_SERVER, IID_IDBInitialize, 
                     (void**)&amp;pIDBInitialize);
</pre>
<p>The code snippet above does not enable OLEDB Services when instantiating the Data Source object. To enable OLEDB services, see <a href="#BCGIGHHJ">&#34;Compatibility with OLE DB Services&#34;</a> below.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
OraOLEDB does not support persistent data source objects.</div>
<p>After the successful creation of an instance of a data source object, the consumer application can initialize the data source and create sessions.</p>
<p><a id="sthref35"></a><a id="sthref36"></a>OraOLEDB supports connections to Oracle Databases releases. To connect to a specific database, the consumer is required to set the following properties of the <code><a id="sthref37"></a>DBPROPSET_DBINIT</code> property set:</p>
<ul>
<li>
<p><code><a id="sthref38"></a>DBPROP_AUTH_USERNAME</code> with the user ID, such as <code>scott</code></p>
</li>
<li>
<p><code><a id="sthref39"></a>DBPROP_AUTH_PASSWORD</code> with the password, such as <code>tiger</code></p>
</li>
<li>
<p><code><a id="sthref40"></a>DBPROP_INIT_DATASOURCE</code> with the net service name, such as <code>myOraDb</code></p>
</li>
</ul>
<p>The consumer could also populate <code><a id="sthref41"></a>DBPROP_INIT_PROMPT</code> with <code>DBPROMPT_PROMPT</code> which causes the <span class="bold">provider</span> to display a logon box for the user to enter the connect information.</p>
<p>Using <code>DBPROMPT_NOPROMPT</code> disables display of the logon box. In this case, incomplete logon information causes the provider to return a logon error. However, if this property is set to <code>DBPROMPT_COMPLETE</code> or <code>DBPROMPT_COMPLETEREQUIRED</code>, the logon box will be displayed only if the logon information is incomplete.</p>
<a id="BCGIGHHJ"></a>
<div id="OLEDB145" class="sect3">
<h4 class="sect3">Compatibility with OLE DB Services<a id="sthref42"></a><a id="sthref43"></a><a id="sthref44"></a><a id="sthref45"></a><a id="sthref46"></a></h4>
<p>OraOLEDB is compatible with OLE DB Services that are available in OLE DB version 2.0 and later. OLE DB Services contains useful services such as automatic transaction enlistment, Client Cursor Engine (CCE), connection and session pooling, which can enhance application performance, and others.</p>
<p>OLE DB Services can be used with OraOLEDB through C++/COM or ADO.</p>
<p>By default, the <code>OLEDB_SERVICES</code> registry entry for OraOLEDB is set, under the <code>CLSID</code> of OraOLEDB, to <code>0xffffffff</code> (that is, <code>-1</code>), which enables all services. Certain OLE DB Services can also be disabled or enabled programmatically through the <code>DBPROP_INIT_OLEDBSERVICES</code> property setting.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code><a href="http://msdn.microsoft.com/en-us/library/ms724518(VS.85).aspx">http://msdn.microsoft.com/en-us/library/ms724518(VS.85).aspx</a></code> for more information on OLE DB Services and how to enable or disable specific services</div>
<div id="OLEDB146" class="sect4"><a id="sthref47"></a>
<h5 class="sect4">ADO Applications with OLE DB Services<a id="sthref48"></a><a id="sthref49"></a><a id="sthref50"></a></h5>
<p>ADO automatically enables OLE DB Services. Thus, ADO applications do not need any special code to use OLEDB Services.</p>
</div>
<!-- class="sect4" -->
<a id="BCGIIJIA"></a>
<div id="OLEDB147" class="sect4">
<h5 class="sect4">C++/COM Applications with OLE DB Services<a id="sthref51"></a><a id="sthref52"></a></h5>
<p>For C++/COM applications, some additional steps are needed to use OLE DB Services.</p>
<p>The following code snippet shows one way that C++/COM applications can enable OLE DB Services. The code shows the OLE DB consumer creating an instance of the <code>CLSID_MSDAINITIALIZE</code> class through <code>CoCreateInstance()</code>, obtaining the <code>IDataInitialize</code> interface from that object, and then creating an OLE DB data source object through that interface.</p>
<pre>// Instantiate the CLSID_MSDAINITIALIZE class and request for the
// IID_IDataInitialize interface from it
hr = <span class="bold">CoCreateInstance(CLSID_MSDAINITIALIZE</span>, NULL, CLSCTX_INPROC_SERVER, 
  IID_IDataInitialize, (void**)&amp;pIDataInitialize);

// Set properties, datasource name, userid, and password, etc.
...

// Create an OLEDB data source object using the interface obtained from the
// CLSID_MSDAINITIALIZE class.
hr = pIDataInitialize-&gt;CreateDBInstance(CLSID_OraOLEDB, NULL, 
    CLSCTX_INPROC_SERVER, NULL,IID_IDBInitialize,(IUnknown**)&amp;pIDBInitialize);
...

// If connection/session pooling was enabled, pIDBInitialize-&gt;Release()
// releases the connection/session back to the pool.
// pIDataInitialize-&gt;Release() should not be called until the application no
// longer need to use connection/session pooling and the rest of
// the OLE DB Services that were enabled for the application.
//  
pIDBInitialize-&gt;Release();
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="OLEDB148" class="sect3"><a id="sthref53"></a>
<h4 class="sect3">Connecting to an Oracle Database<a id="sthref54"></a></h4>
<p>To connect to an Oracle Database using OraOLEDB, the OLE DB connection string must be as follows:</p>
<pre>&#34;Provider=OraOLEDB.Oracle;User ID=user;Password=<span class="italic">pwd</span>;Data Source=constr;&#34;
</pre>
<p>When connecting to a remote database, <code>Data</code> <code>Source</code> must be set to the correct net service name which is the alias in the <code>tnsnames.ora</code> file. For more information, refer to <a class="olink NETAG" href="../NETAG/toc.htm"><span class="italic">Oracle Database Net Services Administrator&#39;s Guide</span></a>.</p>
</div>
<!-- class="sect3" -->
<a id="i1016558"></a>
<div id="OLEDB149" class="sect3">
<h4 class="sect3">OraOLEDB-Specific Connection String Attributes<a id="sthref55"></a><a id="sthref56"></a></h4>
<p>OraOLEDB offers provider-specific connection string attributes, which are set in the same way as the Provider and User ID are set. The provider-specific connection string attributes are:</p>
<ul>
<li>
<p><code>CacheType<a id="sthref57"></a></code> - specifies the type of cache used to store the rowset data on the client. See <a href="#i1017121">&#34;OraOLEDB-Specific Connection String Attributes for Rowsets&#34;</a>.</p>
</li>
<li>
<p><code>ChunkSize<a id="sthref58"></a></code> - specifies the size of <code>LONG</code> or <code>LONG RAW</code> column data stored in the provider&#39;s cache. See <a href="#i1017121">&#34;OraOLEDB-Specific Connection String Attributes for Rowsets&#34;</a>.</p>
</li>
<li>
<p><code><a id="sthref59"></a>DistribTX</code> - enables or disables distributed transaction enlistment capability. See <a href="#i1016640">&#34;Distributed Transactions&#34;</a>.</p>
</li>
<li>
<p><code>FetchSize<a id="sthref60"></a></code> - specifies the size of the fetch array in rows. See <a href="#i1017121">&#34;OraOLEDB-Specific Connection String Attributes for Rowsets&#34;</a>.</p>
</li>
<li>
<p><code>OLEDB.NET</code> <a id="sthref61"></a> - enables or disables compatibility with <a id="sthref62"></a>OLEDB.NET Data Provider. See <a href="#i1017293">&#34;OLEDB.NET Data Provider Compatibility&#34;</a>.</p>
</li>
<li>
<p><code>OSAuthent<a id="sthref63"></a></code> - specifies whether operating system authentication will be used when connecting to an Oracle Database. See <a href="#i1016644">&#34;Operating System Authentication&#34;</a>.</p>
</li>
<li>
<p><code>PLSQLRSet<a id="sthref64"></a></code> - enables or disables the return of a rowset from <a href="glossary.htm#BABFAJHF"><span class="xrefglossterm">PL/SQL</span></a> stored procedures. See <a href="#i1016761">&#34;OraOLEDB Custom Properties for Commands&#34;</a>.</p>
</li>
<li>
<p><code>PwdChgDlg<a id="sthref65"></a></code> - enables or disables displaying the password change dialog box when the password expires. See <a href="#i1016661">&#34;Password Expiration&#34;</a>.</p>
</li>
<li>
<p><code>UseSessionFormat<a id="sthref66"></a></code> - specifies whether to use the default NLS session formats or let OraOLEDB override some of these formats for the duration of the session. Valid values are <code>0</code> (<code>FALSE</code>) and <code>1</code> (<code>TRUE</code>). The default is <code>FALSE</code> which lets OraOLEDB override some of the default NLS session formats. If the value is <code>TRUE</code>, OraOLEDB uses the default NLS session formats.</p>
<p>Note that this connection attribute does not appear under the <code>\\HKEY_LOCAL_ MACHINE\SOFTWARE\ORACLE\KEY_</code><code><span class="codeinlineitalic">HOMENAME</span></code><code>\OLEDB</code> registry key.</p>
</li>
<li>
<p><code>VCharNull<a id="sthref67"></a></code> - enables or disables the NULL termination of <code>VARCHAR2 OUT</code> parameters from stored procedures.</p>
</li>
<li>
<p><code>SPPrmDefVal</code><a id="sthref68"></a> - specifies whether to use the default value or a NULL value if the application has not specified a stored procedure parameter value.</p>
</li>
<li>
<p><code><a id="sthref69"></a>NDataType</code> - specifies whether any of the parameters bound to the command are of N data types, which include <code>NCHAR</code>, <code>NVARCHAR2</code>, or <code>NCLOB</code>. See <a href="#BABBCDHJ">&#34;NDatatype&#34;</a>.</p>
<p>Note that this connection attribute does not appear under the <code>\\HKEY_LOCAL_ MACHINE\SOFTWARE\ORACLE\KEY_</code><code><span class="codeinlineitalic">HOMENAME</span></code><code>\OLEDB</code> registry key.</p>
</li>
<li>
<p><code><a id="sthref70"></a>SPPrmsLOB</code> - specifies whether one or more parameters bound to the stored procedures are of LOB data type, which include <code>CLOB</code>, <code>BLOB</code>, or <code>NCLOB</code>. See <a href="#BABCAAIG">&#34;SPPrmsLOB&#34;</a>.</p>
<p>Note that this connection attribute does not appear under the <code>\\HKEY_LOCAL_ MACHINE\SOFTWARE\ORACLE\KEY_</code><code><span class="codeinlineitalic">HOMENAME</span></code><code>\OLEDB</code> registry key.</p>
</li>
<li>
<p><code><a id="sthref71"></a>StmtCacheSize</code> &ndash; specifies the maximum number of statements that can be cached. See <a href="#BABCHCDD">&#34;Statement Caching&#34;</a>.</p>
</li>
<li>
<p><code>MetaDataCacheSize</code><a id="sthref72"></a> - specifies the maximum number of <code>SELECT</code> statements for which the metadata can be cached. See <a href="#BCGEAHAE">&#34;Metadata Caching&#34;</a>.</p>
</li>
<li id="BCGEHEEC">
<p><code>DeferUpdChk<a id="sthref73"></a></code> - specifies whether or not to defer the updateability check to support updating read-only disconnected rowsets. See <code>DeferUpdChk</code> under <a href="#i1017121">&#34;OraOLEDB-Specific Connection String Attributes for Rowsets&#34;</a>.</p>
</li>
<li>
<p><code>DBNotifications</code><a id="sthref74"></a> - specifies whether or not to subscribe to the high availability events. See <a href="#BCGGAIBI">&#34;Enhanced Failover Capability&#34;</a>.</p>
</li>
<li>
<p><code>DBNotificationPort<a id="sthref75"></a></code> - specifies the port number, which is opened to listen to the Database notifications. See <a href="#BCGGAIBI">&#34;Enhanced Failover Capability&#34;</a>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1016630"></a>
<div id="OLEDB150" class="sect3">
<h4 class="sect3">Default Attribute Values</h4>
<p><span class="bold"><a id="sthref76"></a><a id="sthref77"></a><a id="sthref78"></a></span>The default values for these attributes are located under the <code>\\HKEY_LOCAL_ MACHINE\SOFTWARE\ORACLE\KEY_</code><code><span class="codeinlineitalic">HOMENAME</span></code><code>\OLEDB</code> registry key, where <code>KEY_</code><code><span class="codeinlineitalic">HOMENAME<a id="sthref79"></a></span></code> is the Oracle home.</p>
<p>The registry default values are read by OraOLEDB from the registry when the provider is loaded into memory. If Oracle-specific connection string attributes are not provided at connection time, then the default registry values are used. However, if the attributes are provided, then these new values override the default registry values.</p>
<p>These attributes can be set by setting the <code><a id="sthref80"></a>DBPROP_INIT_PROVIDERSTRING</code> property, provided in the <code><a id="sthref81"></a>DBPROPSET_DBINIT</code> property set. For example:</p>
<pre>&#34;FetchSize=100;CacheType=Memory;OSAuthent=0;PLSQLRSet=1;StmtCacheSize=10;&#34;
</pre></div>
<!-- class="sect3" -->
<a id="i1016640"></a>
<div id="OLEDB151" class="sect3">
<h4 class="sect3"><a id="sthref82"></a><a id="sthref83"></a><a id="sthref84"></a><a id="sthref85"></a>Distributed Transactions</h4>
<p>The <code>DistribTX</code> attribute specifies whether sessions are enabled to enlist in distributed transactions. Valid values are <code>0</code> (disabled) and <code>1</code> (enabled). The default is <code>1</code> which indicates that sessions are enabled for distributed transaction enlistments.</p>
<p>Applications using Microsoft Distributed Transaction Coordinator must have <code>DistribTX</code> set to <code>1</code>, the default.</p>
<p>Sessions <a id="sthref86"></a>enabled for distributed transaction enlistments cannot run statements that use the direct path load and parallel DML capabilities of the Oracle database. Such statements are executed as conventional path serial statements.</p>
</div>
<!-- class="sect3" -->
<a id="BCGGAIBI"></a>
<div id="OLEDB152" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Enhanced Failover Capability<a id="sthref87"></a><a id="sthref88"></a><a id="sthref89"></a></h4>
<p>This feature enhances failover capability.</p>
<p>These connection string attributes support enhanced failover capability.</p>
<ul>
<li>
<p><code>DBNotifications</code></p>
<p>The <code>DBNotifications</code> attribute specifies whether or not to subscribe to high availability events. Valid values are <code>0</code> (<code>FALSE</code>) and <code>1</code> (<code>TRUE</code>). The default is <code>FALSE</code>, which indicates that OraOLEDB does not subscribe to high availability events. If this attribute is not provided at the connection time, then the default registry value is used.</p>
</li>
<li>
<p><code>DBNotificationPort</code></p>
<p>The <code>DBNotificationPort</code> attribute specifies the port number, which is used to listen to the database notifications. The valid value is an unsigned integer.</p>
<p><code>DBNotificationPort</code> is effective only if the <code>DBNotifications</code> attribute is set to <code>TRUE</code>, either through the connection string attribute or by registry entry. The default for the <code>DBNotificationPort</code> attribute is <code>0</code>, which implies that OraOLEDB opens a valid port randomly. OraOLEDB does not validate the port number, so it is the responsibility of the application to specify a valid port number.</p>
</li>
</ul>
<p class="subhead2"><a id="OLEDB153"></a>Enabling Failover Capability Through Registry Entry</p>
<ul>
<li>
<p><code>DBNotifications</code></p>
<p>The <code>DBNotifications</code> registry entry specifies whether or not to subscribe to high availability events. Valid values are <code>0</code> (<code>FALSE</code>) and <code>1</code> (<code>TRUE</code>). The default value is <code>FALSE</code>, OraOLEDB does not subscribe. This registry entry value is used when the <code>DBNotifications</code> connection string attribute is not set. It is located under the <code>\\HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE\</code><code>KEY_</code><code><span class="codeinlineitalic">HOMENAME</span></code><code>\OLEDB</code> registry key.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1016644"></a>
<div id="OLEDB154" class="sect3">
<h4 class="sect3">Operating System Authentication<a id="sthref90"></a><a id="sthref91"></a><a id="sthref92"></a></h4>
<p>The <code>OSAuthent</code> attribute specifies whether operating system authentication will be used when connecting to an Oracle Database. Valid values are <code>0</code> (disabled) and <code>1</code>(enabled). The default is <code>0</code>, which indicates that operating system authentication is not used.</p>
<p>Operating system authentication is the feature by which Oracle uses the security mechanisms of the operating system to authorize users. For more information on this subject and how to set it up on Windows clients, refer to the information on authenticating database users on Windows in <a class="olink NTQRF327" href="../NTQRF/authen.htm#NTQRF327"><span class="italic">Oracle Database Platform Guide for Microsoft Windows</span></a>.</p>
<p>After the Windows client has been set up properly for operating system authentication, this feature may be enabled by OraOLEDB clients by setting any of the following:</p>
<ul>
<li>
<p><code><a id="sthref93"></a>DBPROP_AUTH_USERNAME</code> to <code>/</code></p>
</li>
<li>
<p><code><a id="sthref94"></a>DBPROP_INIT_PROVIDERSTRING</code> to <code>OSAuthent=1</code>;</p>
</li>
<li>
<p><code><a id="sthref95"></a>OSAuthent</code> in the registry to <code>1</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1016661"></a>
<div id="OLEDB155" class="sect3">
<h4 class="sect3">Password Expiration<a id="sthref96"></a><a id="sthref97"></a><a id="sthref98"></a></h4>
<p>Oracle provides a Password Expiration feature which allows database administrators to force users to change their passwords regularly. The <code>PwdChgDlg</code> attribute enables or disables the displaying of the password change dialog box, whenever a logon fails due to an expired password. When enabled, the provider displays the dialog box to change the password. When disabled, the logon fails with an error message. The valid values are <code>0</code> (disabled) and <code>1</code> (enabled). The default is <code>1</code> (enabled). For more information on the Password Expiration feature, see <a class="olink DBSEG33236" href="../DBSEG/authentication.htm#DBSEG33236"><span class="italic">Oracle Database Security Guide</span></a>.</p>
<p class="subhead1"><a id="OLEDB156"></a>Example: Connecting to an Oracle Database Using ADO<a id="sthref99"></a><a id="sthref100"></a><a id="sthref101"></a></p>
<p>The following examples illustrate how to connect to an Oracle Database using OraOLEDB and ADO.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If <code>Data Source</code>, <code>User ID</code>, and <code>Password</code> are provided with the <code>Open</code> method, then ADO ignores those <code>ConnectionString</code> attributes.</div>
<p class="subhead2"><a id="OLEDB157"></a>Connect Using ConnectionString</p>
<pre>Dim con As New ADODB.Connection
con.ConnectionString = &#34;Provider=OraOLEDB.Oracle;Data Source=MyOraDb;&#34; &amp; _
                     &#34;User ID=scott;Password=tiger;&#34;
con.Open
</pre>
<p class="subhead2"><a id="OLEDB158"></a>Connect Without Using ConnectionString</p>
<pre>Dim con As New ADODB.Connection
con.Provider = &#34;OraOLEDB.Oracle&#34;
con.Open &#34;MyOraDb&#34;, &#34;scott&#34;, &#34;tiger&#34;
</pre>
<p class="subhead2"><a id="OLEDB159"></a>Connect and Set Provider-specific Attributes</p>
<pre>Dim con As New ADODB.Connection
con.Provider = &#34;OraOLEDB.Oracle&#34;
con.ConnectionString = &#34;FetchSize=200;CacheType=Memory;&#34; &amp; _
                       &#34;OSAuthent=0;PLSQLRSet=1;Data Source=MyOraDb;&#34; &amp; _
                       &#34;User ID=scott;Password=tiger;&#34;
con.Open
</pre>
<p class="subhead2"><a id="OLEDB160"></a>Operating System-Authenticated Connect Setting User ID to /</p>
<pre>Dim con As New ADODB.Connection
con.Provider = &#34;OraOLEDB.Oracle&#34;
con.Open &#34;MyOraDb&#34;, &#34;/&#34;, &#34;&#34;
</pre>
<p class="subhead2"><a id="OLEDB161"></a>Operating System-Authenticated Connect Using OSAuthent</p>
<pre>Dim con As New ADODB.Connection
con.Provider = &#34;OraOLEDB.Oracle&#34;
con.ConnectionString = &#34;Data Source=MyOraDb;OSAuthent=1;&#34;
con.Open
</pre></div>
<!-- class="sect3" -->
<div id="OLEDB162" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref102"></a>
<h4 class="sect3">VCharNull</h4>
<p>The <code>VCharNull</code> attribute enables or disables the NULL termination of <code>VARCHAR2 OUT</code> parameters from stored procedures. Valid values are <code>0</code> (disabled) and <code>1</code> (enabled). The default is <code>1</code>, which indicates that <code>VARCHAR2 OUT</code> parameters are NULL terminated. A value of <code>0</code> indicates that <code>VARCHAR2 OUT</code> parameters are padded with spaces.</p>
<p>The default value for this attribute is located under the <code>\\HKEY_LOCAL_ MACHINE\SOFTWARE\ORACLE\KEY_</code><code><span class="codeinlineitalic">HOMENAME</span></code><code>\OLEDB</code> registry key, where <code><span class="codeinlineitalic">HOMENAME</span></code> is the Oracle home. If this attribute is not provided at the connection time, then the default registry value is used.</p>
<p>Note that with this connection attribute enabled, applications need to pad the stored procedure <code>IN</code> and <code>IN OUT CHAR</code> parameters with spaces explicitly, if the parameter is to be used in a <code>WHERE</code> clause.</p>
</div>
<!-- class="sect3" -->
<div id="OLEDB163" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref103"></a>
<h4 class="sect3">SPPrmDefVal</h4>
<p>The <code>SPPrmDefVal</code> attribute specifies whether to use the default value or a NULL value if the application has not specified a stored procedure parameter value. Valid values are <code>0</code> (FALSE) and <code>1</code> (TRUE). The default is FALSE, which enables OraOLEDB to pass a NULL value. If the value is TRUE, then OraOLEDB uses the default value.</p>
<p>The default value for this attribute is located under the <code>\\HKEY_LOCAL_ MACHINE\SOFTWARE\ORACLE\KEY_</code><code><span class="codeinlineitalic">HOMENAME</span></code><code>\OLEDB</code> registry key. If this attribute is not provided at connection time, then the default registry value is used.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1016708"></a>
<div id="OLEDB164" class="sect2">
<h3 class="sect2">OraOLEDB Sessions<a id="sthref104"></a><a id="sthref105"></a></h3>
<p>An OraOLEDB session object represents a single connection to an Oracle Database. The session object exposes the interfaces that allow data access and manipulation.</p>
<p>The first session created on the initialized data source inherits the initial connection established by <code>IDBInitialize::Initialize()</code>. Subsequent sessions that are created establish their own independent connections to the particular Oracle Database specified by the data source properties.</p>
<p>Each session object also defines a transaction space for a data source. All command and rowset objects created from a particular session object are part of the transaction of that session.</p>
<p>After all references to the session object are released, the session object is removed from memory and the connection is dropped.</p>
<div id="OLEDB165" class="sect3"><a id="sthref106"></a>
<h4 class="sect3">Transactions<a id="sthref107"></a></h4>
<p>OraOLEDB supports local and distributed transactions, which provide explicit commit and abort transactional operations.</p>
<p>OraOLEDB does not support nested transactions. In addition, a local transaction cannot be started if the session is currently enlisted in a distributed transaction. This also applies to distributed transactions if the session is currently enlisted in a local transaction.</p>
<div id="OLEDB166" class="sect4"><a id="sthref108"></a>
<h5 class="sect4"><a id="sthref109"></a>Local Transactions</h5>
<p>OraOLEDB supports the <code>ITransactionLocal</code> interface for explicit transactions. By default, OraOLEDB is in an autocommit mode, meaning that each unit of work done on the database is automatically or implicitly committed. With the use of the <code>ITransactionLocal</code> interface, consumers may explicitly start a transaction for a particular session, allowing a unit of work to be explicitly committed or aborted by the consumer.</p>
<p><a id="sthref110"></a>OraOLEDB supports the Read Committed (<a id="sthref111"></a>Cursor Stability) isolation level. In this level, the changes made by other transactions are not visible until those transactions are committed.</p>
</div>
<!-- class="sect4" -->
<div id="OLEDB167" class="sect4"><a id="sthref112"></a>
<h5 class="sect4"><a id="sthref113"></a><a id="sthref114"></a><a id="sthref115"></a><a id="sthref116"></a><a id="sthref117"></a>Distributed Transactions</h5>
<p>OraOLEDB consumers must install <a id="sthref118"></a>Oracle Services for Microsoft Transaction Server (MTS) release 10.2 or higher to be able to participate in Microsoft Transaction Server (or COM+) transactions or to enlist in a distributed transaction coordinated by <a id="sthref119"></a>Microsoft Distributed Transaction Coordinator (MS DTC). For setup and configuration information on Oracle Services for MTS, see <a class="olink NTMTS003" href="../NTMTS/recovery.htm#NTMTS003"><span class="italic">Oracle Services for Microsoft Transaction Server Developer&#39;s Guide for Microsoft Windows</span></a>.</p>
<p>OraOLEDB ignores <code>IsoLevel</code>, <code>IsoFlags</code>, and <code>pOtherOptions</code> parameters when <code>ITransactionJoin::JoinTransaction()</code> is called. These options must be provided when the consumer acquires a transaction object from MS DTC with the <code>ITransactionDispenser::BeginTransaction()</code> method call.</p>
<p>However, if <code>IsoFlags</code> is nonzero, then <code>XACT_E_NOISORETAIN</code> is returned.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1016737"></a>
<div id="OLEDB168" class="sect2">
<h3 class="sect2">Commands<a id="sthref120"></a></h3>
<p>OraOLEDB supports ANSI SQL as supported by Oracle Database and the ODBC SQL syntax.</p>
<div id="OLEDB169" class="sect3"><a id="sthref121"></a>
<h4 class="sect3">Stored Procedures<a id="sthref122"></a></h4>
<p>When executing an Oracle <span class="bold">PL/SQL</span> <a href="glossary.htm#i432031"><span class="xrefglossterm">stored procedure</span></a> using a command, use Oracle native syntax or the ODBC procedure call escape sequence in the command text:</p>
<ul>
<li>
<p>Oracle native syntax: <code>BEGIN credit_account(123, 40); END;</code></p>
</li>
<li>
<p>ODBC syntax: {<code>CALL credit_account(123, 40)}</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="OLEDB170" class="sect3"><a id="sthref123"></a>
<h4 class="sect3">Preparing Commands<a id="sthref124"></a></h4>
<p>OraOLEDB validates and fetches the metadata only for SELECT SQL statements.</p>
</div>
<!-- class="sect3" -->
<div id="OLEDB171" class="sect3"><a id="sthref125"></a>
<h4 class="sect3">Command Parameters<a id="sthref126"></a></h4>
<p>When using Oracle ANSI SQL, parameters in the command text are preceded by a colon. In ODBC SQL, parameters are indicated by a question mark (<code>?</code>).</p>
<p>OraOLEDB supports input, output, and input and output parameters for PL/SQL stored procedures and stored functions. OraOLEDB supports input parameters for SQL statements.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
OraOLEDB supports only positional binding.</div>
</div>
<!-- class="sect3" -->
<a id="i1016761"></a>
<div id="OLEDB172" class="sect3">
<h4 class="sect3">OraOLEDB Custom Properties for Commands</h4>
<p>OraOLEDB custom properties for commands are grouped under the custom property set <code>ORAPROPSET_COMMANDS</code>. It provides these properties:</p>
<div id="OLEDB173" class="tblformal">
<p class="titleintable"><a id="sthref127"></a><a id="sthref128"></a>Table 2-1 Custom Properties for Commands</p>
<table class="cellalignment5829" title="Custom Properties for Commands" summary="rows are commands; first column is Visual Basic; second column is C++" dir="ltr">
<thead>
<tr class="cellalignment5818">
<th class="cellalignment5830" id="r1c1-t6">For Visual Basic Users</th>
<th class="cellalignment5830" id="r1c2-t6">For C++ Users</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5818">
<td class="cellalignment5824" id="r2c1-t6" headers="r1c1-t6">
<p><code>PLSQLRSet</code></p>
</td>
<td class="cellalignment5824" headers="r2c1-t6 r1c2-t6">
<p><code>ORAPROP_PLSQLRSet</code></p>
</td>
</tr>
<tr class="cellalignment5818">
<td class="cellalignment5824" id="r3c1-t6" headers="r1c1-t6">
<p><code>NDatatype</code></p>
</td>
<td class="cellalignment5824" headers="r3c1-t6 r1c2-t6">
<p><code>ORAPROP_NDatatype</code></p>
</td>
</tr>
<tr class="cellalignment5818">
<td class="cellalignment5824" id="r4c1-t6" headers="r1c1-t6">
<p><code>SPPrmsLOB</code></p>
</td>
<td class="cellalignment5824" headers="r4c1-t6 r1c2-t6">
<p><code>ORAPROP_SPPrmsLOB</code></p>
</td>
</tr>
<tr class="cellalignment5818">
<td class="cellalignment5824" id="r5c1-t6" headers="r1c1-t6">
<p><code>AddToStmtCache</code></p>
</td>
<td class="cellalignment5824" headers="r5c1-t6 r1c2-t6">
<p><code>ORAPROP_AddToStmtCache</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead1"><a id="OLEDB174"></a><a id="sthref129"></a>PLSQLRSet</p>
<p>This property is similar to the <code>PLSQLRSet</code> connection string attribute.</p>
<p>The property specifies whether OraOLEDB must return a rowset from the PL/SQL stored procedure. If the stored procedure, provided by the consumer, returns a rowset, <code>PLSQLRSet</code> must be set to <code>TRUE</code> (enabled). This property should be set to <code>FALSE</code> after the command has been run. By default, the property is set to <code>FALSE</code> (disabled).</p>
<p>Consumers should use the property over the attribute, as the property can be set at the command object rather than at the session. By setting it at the command object, the consumer is able to set the property only for the command object executing stored procedures which are returning rowsets. With the attribute, the consumer needed to set it even if only one of many stored procedures being executed by the ADO application returned a rowset. The use of this property should provide a performance boost to applications making use of the attribute previously.</p>
<p class="subhead2"><a id="OLEDB175"></a>Example: Setting the Custom Property PLSQLRSet</p>
<pre>Dim objRes As NEW ADODB.Recordset
Dim objCon As NEW ADODB.Connection
Dim objCmd As NEW ADODB.Command
....
objCmd.ActiveConnection = objCon
objCmd.CommandType = adCmdText

&#39; Enabling the PLSQLRSet property indicates to the provider
&#39; that the command returns one or more rowsets
objCmd.Properties(&#34;PLSQLRSet&#34;) = TRUE

&#39; Assume Employees.GetEmpRecords() has a REF CURSOR as
&#39; one of the arguments
objCmd.CommandText = &#34;{ CALL Employees.GetEmpRecords(?,?) }&#34;

&#39; Execute the SQL
set objRes = objCmd.Execute

&#39; It is a good idea to disable the property after execute as the
&#39; same command object may be used for a different SQL statement
objCmd.Properties(&#34;PLSQLRSet&#34;) = FALSE
</pre>
<p class="subhead1"><a id="BABBCDHJ"></a><a id="OLEDB176"></a><a id="sthref130"></a>NDatatype</p>
<p>This property allows the consumers to specify whether any of the parameters bound to the command are of Oracle&#39;s N data types (<code>NCHAR</code>, <code>NVARCHAR2,</code> or <code>NCLOB</code>). This information is required by OraOLEDB to detect and bind the parameters. This property should not be set for commands executing <code>SELECT</code> statements. However, this property must be set for all other SQL statements, such as <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>.</p>
<p>The use of this property should be limited to SQL statements containing parameters of N data type as setting it incurs a processing overhead of at least one round-trip to the database. By default, this property is set to <code>FALSE</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
OraOLEDB does not support parameters of N data types in the <code>WHERE</code> clause of SQL statements.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Consumers are required to use the ODBC procedure call escape sequence to call <span class="bold">stored procedure</span>s or functions having N data type parameters.</div>
<p class="subhead2"><a id="OLEDB177"></a>Example: Setting the Custom Property NDatatype</p>
<pre>Dim objCon As NEW ADODB.Connection
Dim objCmd As NEW ADODB.Command
Dim prEmpno As NEW ADODB.Parameter
Dim prEname As NEW ADODB.Parameter
...
objCmd.ActiveConnection = objCon
objCmd.CommandType = adCmdText

&#39; Create and append the parameters to the command object
Set prEmpno = objCmd.CreateParameter(&#34;prEmpno&#34;, adSmallInt, adParamInput, ,8521)
&#39; prEname is bound to a NVARCHAR2 column in the EMP table
Set prEname = objCmd.CreateParameter(&#34;prEname&#34;, adBSTR, adParamInput, , &#34;Joe&#34;)
objCmd.Parameters.Append prEmpno
objCmd.Parameters.Append prEname

&#39; Enabling the NDatatype property indicates to the provider
&#39; that one or more of the bound parameters is of N datatype
objCmd.Properties(&#34;NDatatype&#34;) = TRUE

&#39; Assume column ENAME in table EMP is of NVARCHAR2 type
objCmd.CommandText = &#34;INSERT INTO EMP (EMPNO, ENAME) VALUES (?, ?)&#34;

&#39; Execute the SQL
objCmd.Execute

&#39; It is a good idea to disable the property after execute as the same command
&#39; object may be used for a different SQL statement 
objCmd.Properties(&#34;NDatatype&#34;) = FALSE
</pre>
<p class="subhead1"><a id="BABCAAIG"></a><a id="OLEDB178"></a><a id="sthref131"></a>SPPrmsLOB</p>
<p>This property allows the consumer to specify whether one or more of the parameters bound to the stored procedures are of Oracle&#39;s LOB data type (<code>CLOB</code>, <code>BLOB</code>, or <code>NCLOB</code>). OraOLEDB requires this property to be set to <code>TRUE</code>, to fetch the parameter list of the stored procedure prior to execution. The use of this property limits the processing overhead to stored procedures having one or more LOB data type parameters. This property should be set to <code>FALSE</code> after the command has been executed. By default, the property is set to <code>FALSE</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Consumers are required to use the ODBC procedure call escape sequence to call stored procedures or functions having LOB data type parameters.</div>
<p class="subhead2"><a id="OLEDB179"></a>Example: Setting the Custom Property SPPrmsLOB</p>
<pre>Dim objCon As NEW ADODB.Connection
Dim objCmd As NEW ADODB.Command
Dim prCLOB As NEW ADODB.Parameter
...
objCmd.ActiveConnection = objCon
objCmd.CommandType = adCmdText

&#39; Create and append the parameters to the command object
Set prCLOB = objCmd.CreateParameter(&#34;prCLOB&#34;, adLongVarchar, adParamOutput, _
                                                10000)
objCmd.Parameters.Append prCLOB

&#39; Enabling the SPPrmsLOB property indicates to the provider
&#39; that one or more of the bound parameters is of LOB data type
objCmd.Properties(&#34;SPPrmsLOB&#34;) = TRUE

&#39; Assume the Stored Procedure requires a CLOB parameter
objCmd.CommandText = &#34;{ call storedproc(?) }&#34;

&#39;Execute the SQL
objCmd.Execute

&#39; It is a good idea to disable the property after execute as the
&#39; same command object may be used for a different SQL statement 
objCmd.Properties(&#34;SPPrmsLOB&#34;) = FALSE
</pre>
<p class="subhead2"><a id="OLEDB180"></a>AddToStmtCache</p>
<p>This property allows the consumer to cache the executed statements when the property is set to <code>TRUE</code> and statement caching is enabled. If the statement caching is disabled or if this property is set to <code>FALSE</code>, then the executed statement is not cached.</p>
<p>This property is ignored if statement caching is disabled. Statement caching can be enabled by setting the <code>StmtCacheSize</code> connection string attribute to a value greater than zero. This property provides a way to selectively add statements to the cache when statement caching is enabled. By default, the property is set to <code>TRUE</code>.</p>
<p class="subhead2"><a id="OLEDB181"></a>Example: Setting the Custom Property AddToStmtCache</p>
<pre>Dim objCon As NEW ADODB.Connection
Dim objCmd As NEW ADODB.Command
... 

&#39; Statement caching is enabled by setting the &#39;StmtCacheSize&#39;
&#39; connection string attribute to a value greater than zero
objCon.ConnectionString = &#34;StmtCacheSize=10;Data Source=MyOraDb;&#34; &amp; _                        &#34;User ID=scott;Password=tiger;&#34;
objCon.Open
objCmd.ActiveConnection = objCon
objCmd.CommandType = adCmdText
objCmd.CommandText = &#34;SELECT * FROM EMP&#34;

&#39; &#34;SELECT * FROM EMP&#34; statement would be added to the statement cache because
&#39; StmtCacheSize connection string attribute value is greater than 0 and 
&#39; AddToStmtCache property value is TRUE by default.
objCmd.Execute

&#39; Do not add &#34;SELECT * FROM DEPT&#34; to the statement cache
objCmd.CommandText = &#34;SELECT * FROM DEPT&#34;
objCmd.Properties(&#34;AddToStmtCache&#34;) = FALSE

&#39; &#34;SELECT * FROM DEPT&#34; statement would not be added to the statement cache
objCmd.Execute
</pre></div>
<!-- class="sect3" -->
<div id="OLEDB182" class="sect3"><a id="sthref132"></a>
<h4 class="sect3">Stored Procedures and Functions Returning Rowsets<a id="sthref133"></a><a id="sthref134"></a><a id="sthref135"></a></h4>
<p>Oracle Provider for OLE DB allows consumers to execute a <span class="bold">PL/SQL</span> stored procedure with an argument of <code>REF</code> <code>CURSOR</code> type or a stored function returning a <code>REF</code> <code>CURSOR</code> value.</p>
<p>OraOLEDB returns a rowset for the <code>REF</code> <code>CURSOR</code> bind variable. Because there is no predefined data type for <code>REF</code> <code>CURSOR</code> in the OLE DB specification, the consumer must not bind this parameter.</p>
<p>If the PL/SQL stored procedure has one or more arguments of <code>REF</code> <code>CURSOR</code> type, OraOLEDB binds these arguments and returns a rowset for each argument of <code>REF</code> <code>CURSOR</code> type.</p>
<p>If the PL/SQL stored function returns a <code>REF</code> <code>CURSOR</code> or has an argument of <code>REF</code> <code>CURSOR</code> type, OraOLEDB binds these and returns a rowset for each <code>REF</code> <code>CURSOR</code> type.</p>
<p>To use this feature, stored procedures or functions must be called in the ODBC procedure call escape sequence.</p>
<p>The stored procedure or function being called could be either standalone or packaged. However, the <code>REF</code> <code>CURSOR</code> being returned must be explicitly defined in a package in the database.</p>
</div>
<!-- class="sect3" -->
<a id="i1016896"></a>
<div id="OLEDB183" class="sect3">
<h4 class="sect3">Multiple Rowsets</h4>
<p>OraOLEDB supports returning more than one rowset from a stored procedure. Consumers can use this feature to access all the <code>REF</code> <code>CURSOR</code>s being returned by a stored procedure.</p>
<p class="subhead1"><a id="OLEDB184"></a>Example: Stored Procedure Returning Multiple Rowset<a id="sthref136"></a>s</p>
<p class="subhead2"><a id="i1016901"></a><a id="OLEDB185"></a>PL/SQL Package</p>
<pre>CREATE OR REPLACE PACKAGE Employees AS  
  TYPE empcur IS REF CURSOR; 
 
  PROCEDURE GetEmpRecords(p_cursor OUT empcur,
                          q_cursor OUT empcur,
                          indeptno IN NUMBER,
                          p_errorcode OUT NUMBER);
 
  FUNCTION GetDept(inempno IN NUMBER,  
                   p_errorcode OUT NUMBER)  
    RETURN empcur; 
END Employees; 

CREATE OR REPLACE PACKAGE BODY Employees AS 
 
  PROCEDURE GetEmpRecords(p_cursor OUT empcur, 
                          q_cursor OUT empcur, 
                          indeptno IN NUMBER,  
                          p_errorcode OUT NUMBER) IS  
  BEGIN   
    p_errorcode := 0;  
    OPEN p_cursor FOR  
      SELECT *  
      FROM emp  
      WHERE deptno = indeptno  
      ORDER BY empno;  

OPEN q_cursor FOR  
      SELECT empno 
      FROM emp  
      WHERE deptno = indeptno  
      ORDER BY empno; 
 
  EXCEPTION  
    WHEN OTHERS THEN  
      p_errorcode:= SQLCODE;  
 
  END GetEmpRecords;  
 
  FUNCTION GetDept(inempno IN NUMBER,  
                   p_errorcode OUT NUMBER)  
    RETURN empcur IS  
      p_cursor empcur;  
  BEGIN   
    p_errorcode := 0;  
    OPEN p_cursor FOR  
      SELECT deptno  
      FROM emp  
      WHERE empno = inempno;  
    RETURN (p_cursor);  
 
  EXCEPTION  
    WHEN OTHERS THEN  
      p_errorcode:= SQLCODE; 
 
  END GetDept;   
 
END Employees; 
</pre>
<p class="subhead2"><a id="OLEDB186"></a><a id="sthref137"></a>ADO Program</p>
<pre>Dim Con   As New ADODB.Connection
Dim Rst1  As New ADODB.Recordset 
Dim Rst2  As New ADODB.Recordset 
Dim Rst3  As New ADODB.Recordset 
Dim Cmd   As New ADODB.Command 
Dim Prm1  As New ADODB.Parameter 
Dim Prm2  As New ADODB.Parameter 

Con.Provider = &#34;OraOLEDB.Oracle&#34;
Con.ConnectionString = &#34;Data Source=MyOraDb;&#34; &amp; _
                       &#34;User ID=scott;Password=tiger;&#34;
Con.Open
Cmd.ActiveConnection = Con

&#39; Although Employees.GetEmpRecords() takes four parameters, only 
&#39; two need to be bound because Ref cursor parameters are automatically 
&#39; bound by the provider. 

Set Prm1 = Cmd.CreateParameter(&#34;Prm1&#34;, adSmallInt, adParamInput, , 30)
Cmd.Parameters.Append Prm1 
Set Prm2 = Cmd.CreateParameter(&#34;Prm2&#34;, adSmallInt, adParamOutput) 
Cmd.Parameters.Append Prm2 

&#39; Enable PLSQLRSet property
Cmd.Properties (&#34;PLSQLRSet&#34;) = TRUE  

&#39; Stored Procedures returning resultsets must be called using the 
&#39; ODBC escape sequence for calling stored procedures. 
Cmd.CommandText = &#34;{CALL Employees.GetEmpRecords(?, ?)}&#34; 

&#39; Get the first recordset
Set Rst1 = Cmd.Execute 

&#39; Disable PLSQLRSet property
Cmd.Properties(&#34;PLSQLRSet&#34;) = FALSE 

&#39; Get the second recordset
Set Rst2 = Rst1.NextRecordset

&#39; Just as in a stored procedure, the REF CURSOR return value must  
&#39; not be bound in a stored function. 
Prm1.Value = 7839
Prm2.Value = 0

&#39; Enable PLSQLRSet property
Cmd.Properties(&#34;PLSQLRSet&#34;) = TRUE 

&#39; Stored Functions returning resultsets must be called using the 
&#39; ODBC escape sequence for calling stored functions. 
Cmd.CommandText = &#34;{CALL Employees.GetDept(?, ?)}&#34; 

&#39; Get the rowset
Set Rst3 = Cmd.Execute   

&#39; Disable PLSQLRSet
Cmd.Properties (&#34;PLSQLRSet&#34;) = FALSE

&#39; Clean up
Rst1.Close
Rst2.Close
Rst3.Close
</pre></div>
<!-- class="sect3" -->
<a id="BABCHCDD"></a>
<div id="OLEDB187" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Statement Caching</h4>
<p>Statement caching eliminates the need to parse each SQL or PL/SQL statement before execution, by caching server cursors created during the initial statement execution. Subsequent executions of the same statement can reuse the parsed information from the cursor, and then execute the statement without reparsing, for better performance.</p>
<p>To see performance gains from statement caching, Oracle recommends caching only those statements that will be repeatedly executed. Furthermore, SQL or PL/SQL statements should use parameters rather than literal values. This will enable you to take full advantage of statement caching. This is because parsed information from parameterized statements can be reused, even if the parameter values change in subsequent executions. However, if the literal values in the statements are different, the parsed information cannot be reused unless the subsequent statements also have the same literal values.</p>
<p class="subhead2"><a id="OLEDB188"></a>StmtCacheSize Connection String Attribute</p>
<p>This attribute enables or disables OraOLEDB statement caching. By default, this attribute is set to <code>0</code> (disbled). If it is set to a value greater than <code>0</code>, OraOLEDB statement caching is enabled and the value specifies the maximum number of statements that can be cached for a connection.</p>
<p>After a connection has been cached to the specified maximum cache size, the cursor least recently used is freed to make room to cache the newly-created cursor. This value should not be greater than the value of the <code>OPEN_CURSORS</code> parameter set in the <code>init.ora</code> database configuration file.</p>
<p class="subhead2"><a id="OLEDB189"></a>AddToStmtCache Command Property</p>
<p>This property is relevant only when statement caching is enabled. If statement caching is enabled and this property is set to <code>true</code> (default), then statements are added to the cache when they are executed. If statement caching is disabled or if this property is set to <code>false</code>, then the executed statement is not cached.</p>
<p class="subhead2"><a id="OLEDB190"></a>Enabling Statement Caching Through the Registry</p>
<p>To enable statement caching by default for all OraOLEDB applications running in a system without changing the application, set the registry key of <code>\\HKEY_LOCAL_ MACHINE\SOFTWARE\ORACLE\</code><code>KEY_</code><code><span class="codeinlineitalic">HOMENAME</span></code><code>\OLEDB\StmtCacheSize</code> to a value greater than <code>0</code>. Here, <code><span class="codeinlineitalic">HOMENAME</span></code> refers to the appropriate Oracle home. This value specifies the number of cursors that are to be cached on the server. By default, it is set to <code>10</code>.</p>
<p class="subhead2"><a id="OLEDB191"></a>Connections and Statement Caching</p>
<p>Statement caching is managed separately for each connection. Therefore, for running the same statement on different connections, you need to parse once for each connection and cache a separate cursor for each connection.</p>
</div>
<!-- class="sect3" -->
<a id="BCGEAHAE"></a>
<div id="OLEDB192" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Metadata Caching<a id="sthref138"></a><a id="sthref139"></a><a id="sthref140"></a><a id="sthref141"></a></h4>
<p>This feature minimizes the retrieval of metadata for <code>SELECT</code> statements by caching the metadata during the initial statement execution. Subsequent executions of the same statement can reuse the cached metadata information for better performance. To see performance gains from metadata caching, Oracle recommends caching only those statements that are executed repeatedly.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Metadata caching is managed separately for each connection. Therefore, to run the same statement on different connections, the metadata must be cached once for each connection.</div>
<div id="OLEDB193" class="sect4"><a id="sthref142"></a>
<h5 class="sect4">Enabling Metadata Caching Through the Connection String Attribute</h5>
<p>The <code>MetaDataCacheSize</code> attribute enables or disables OraOLEDB metadata caching. If it is set to a value greater than <code>0</code>, OraOLEDB metadata caching is enabled and the value specifies the maximum number of statements for which the metadata can be cached for a connection. By default, this attribute is set to <code>10</code>.</p>
</div>
<!-- class="sect4" -->
<div id="OLEDB194" class="sect4"><a id="sthref143"></a>
<h5 class="sect4">Enabling Metadata Caching Through the Registry</h5>
<p>To enable metadata caching by default for all OraOLEDB applications running in a system, without changing the application, set the following registry key to a value greater than <code>0</code>. By default, it is set to <code>10</code>.</p>
<p><code>\\HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE\</code><code>KEY_</code><code><span class="codeinlineitalic">HOMENAME</span></code><code>\ OLEDB\MetaDataCacheSize</code></p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BCGJCJCE"></a>
<div id="OLEDB255" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Command Timeout and Cancel Method<a id="sthref144"></a><a id="sthref145"></a></h4>
<p>The <code>Cancel</code> method cancels the OraOLEDB command currently being executed. This method can be useful when the application needs to cancel a long running command during times of heavy network traffic or heavy server use.</p>
<p>Alternatively, by using the <code>CommandTimeout</code> property, developers can set a limit to the time that a command executes before OraOLEDB attempts to cancel it. OraOLEDB requires setting the <code>EnableCmdTimeout</code> registry value to <code>1</code> to enable <code>CommandTimeout</code>.</p>
<p>When using OLE DB, the default <code>DPBROP_COMMANDTIMEOUT</code> is <code>0</code> seconds. When using ADO, the default <code>CommandTimeout</code> property is <code>30</code> seconds.</p>
<a id="BCGEACJA"></a>
<div id="OLEDB195" class="sect4">
<h5 class="sect4">Enabling CommandTimeout Through the Registry<a id="sthref146"></a></h5>
<p>The installation adds a registry value called <code>EnableCmdTimeout</code> with the default value set to <code>0</code>. Setting it to <code>0</code> disables command timeout and setting it to <code>1</code> enables it. The <code>CommandTimeout</code> property value setting takes effect only when <code>EnableCmdTimeout</code> is set to <code>1</code>.</p>
<p>The registry value is:</p>
<p><code>\\HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE\KEY_</code><code><span class="codeinlineitalic">HOMENAME</span></code><code>\OLEDB\EnableCmdTimeout</code></p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1017024"></a>
<div id="OLEDB196" class="sect2">
<h3 class="sect2">Rowsets<a id="sthref147"></a></h3>
<p>This section discusses using Rowsets with OraOLEDB.</p>
<div id="OLEDB197" class="sect3"><a id="sthref148"></a>
<h4 class="sect3">To <a id="sthref149"></a><a id="sthref150"></a>Create Rowsets</h4>
<p>OraOLEDB supports <code>IOpenRowset::OpenRowset</code> and <code>ICommand::Execute</code> for creating rowsets.</p>
<p class="subhead1"><a id="OLEDB198"></a>To <a id="sthref151"></a>Create Rowsets with IOpenRowset::OpenRowset</p>
<p>When using <code>IOpenRowset::OpenRowset</code>, note the following guidelines:</p>
<ul>
<li>
<p>The <code>pTableID</code> parameter must contain a <code>DBID</code> structure that specifies a base table or a view.</p>
</li>
<li>
<p>The <code>DBID</code> structure&#39;s <code>eKind</code> member must be set to <code>DBKIND_GUID_NAME</code>, <code>DBKIND_NAME</code>, or <code>DBKIND_PGUID_NAME</code>.</p>
</li>
<li>
<p>The <code>DBID</code> structure&#39;s <code>uName</code> member must specify the base table or view name as a Unicode character string. It cannot be <code>NULL</code>.</p>
</li>
<li>
<p>The <code>pIndexID</code> parameter of <code>OpenRowset</code> must be <code>NULL</code>.</p>
</li>
</ul>
<p class="subhead1"><a id="OLEDB199"></a>To <a id="sthref152"></a>Create Rowsets with ICommand::Execute</p>
<p>OraOLEDB supports SQL <code>SELECT</code> statements that return rowsets. OraOLEDB also supports returning rowsets from PL/SQL stored procedures and functions.</p>
<p>By default, ADO creates a nonupdatable rowset from a command object. An updatable rowset can be created by setting the <code>Updatability</code> and <code>IRowsetChange</code> properties on the command object. The <code>Updatability</code> property can be set to the following values:</p>
<div id="OLEDB200" class="tblformal">
<p class="titleintable"><a id="sthref153"></a><a id="sthref154"></a>Table 2-2 Possible Values for Updatability Property</p>
<table class="cellalignment5829" title="Possible Values for Updatability Property" summary="rows are values that the Updatability property can be set to; first column is value; second column is description" dir="ltr">
<thead>
<tr class="cellalignment5818">
<th class="cellalignment5830" id="r1c1-t11">Value</th>
<th class="cellalignment5830" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5818">
<td class="cellalignment5824" id="r2c1-t11" headers="r1c1-t11">
<p><code>1</code></p>
</td>
<td class="cellalignment5824" headers="r2c1-t11 r1c2-t11">
<p>update</p>
</td>
</tr>
<tr class="cellalignment5818">
<td class="cellalignment5824" id="r3c1-t11" headers="r1c1-t11">
<p><code>2</code></p>
</td>
<td class="cellalignment5824" headers="r3c1-t11 r1c2-t11">
<p>delete</p>
</td>
</tr>
<tr class="cellalignment5818">
<td class="cellalignment5824" id="r4c1-t11" headers="r1c1-t11">
<p><code>3</code></p>
</td>
<td class="cellalignment5824" headers="r4c1-t11 r1c2-t11">
<p>update and delete</p>
</td>
</tr>
<tr class="cellalignment5818">
<td class="cellalignment5824" id="r5c1-t11" headers="r1c1-t11">
<p><code>4</code></p>
</td>
<td class="cellalignment5824" headers="r5c1-t11 r1c2-t11">
<p>insert</p>
</td>
</tr>
<tr class="cellalignment5818">
<td class="cellalignment5824" id="r6c1-t11" headers="r1c1-t11">
<p><code>5</code></p>
</td>
<td class="cellalignment5824" headers="r6c1-t11 r1c2-t11">
<p>insert and update</p>
</td>
</tr>
<tr class="cellalignment5818">
<td class="cellalignment5824" id="r7c1-t11" headers="r1c1-t11">
<p><code>6</code></p>
</td>
<td class="cellalignment5824" headers="r7c1-t11 r1c2-t11">
<p>insert and delete</p>
</td>
</tr>
<tr class="cellalignment5818">
<td class="cellalignment5824" id="r8c1-t11" headers="r1c1-t11">
<p><code>7</code></p>
</td>
<td class="cellalignment5824" headers="r8c1-t11 r1c2-t11">
<p>insert, delete, and update</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>The following ADO code sample sets the <code>Updatability</code> property on a command object to allow insert, delete, and update operations on the rowset object.</p>
<pre>Dim Cmd As New ADODB.Command
Dim Rst As New ADODB.Recordset
Dim Con As New ADODB.Connection
...
Cmd.ActiveConnection = Con
Cmd.CommandText = &#34;SELECT * FROM emp&#34;
Cmd.CommandType = adCmdText
cmd.Properties(&#34;IRowsetChange&#34;) = TRUE
Cmd.Properties(&#34;Updatability&#34;) = 7
&#39; creates an updatable rowset
Set Rst = cmd.Execute
</pre></div>
<!-- class="sect3" -->
<div id="OLEDB201" class="sect3"><a id="sthref155"></a>
<h4 class="sect3"><a id="sthref156"></a>Updatability</h4>
<p>OraOLEDB supports both immediate and deferred update mode. However, insert and update operations cannot be deferred when the operation changes a nonscalar column, such as <code>LONG</code>, <code>BLOB</code>, or <code>CLOB</code>. When nonscalar column values are changed in a deferred update mode, the entire row is transmitted to the database as though the operation was in an immediate update mode. In addition, these operations cannot be undone with the <code>Undo</code> method (ADO) or <code>IRowsetUpdate::Undo()</code>. However, if they are in a transaction, they can be rolled back with <code>RollbackTrans</code> method (ADO) or <code>ITransactionLocal::Abort()</code>.</p>
<p>Rowsets created using queries with joins are updatable by OraOLEDB only with the Client Cursor Engine enabled. C/C++ OLE DB consumers must enable this service to make these rowsets updatable. ADO consumers must specify the <code>CursorLocation</code> as <code>adUseClient</code> to make these rowsets updatable.</p>
<p>For example:</p>
<pre>Dim objCon As New ADODB.Connection
Dim objRst As New ADODB.Recordset

objCon.Provider = &#34;OraOLEDB.Oracle&#34;
objCon.Open &#34;MyOraDb&#34;, &#34;scott&#34;, &#34;tiger&#34;
objRst.CursorLocation = adUseClient       &#39;ADO Client Cursor
objRst.Open &#34;select ename, dname &#34; &amp; _
       &#34;from emp, dept &#34; &amp; _
       &#34;where emp.deptno = dept.deptno&#34;, _
       objCon, adOpenStatic, adLockOptimistic, adCmdText


&#39;Recordset created is updatable. Please note that CursorLocation 
&#39;needs to be explicitly set to adUseClient for this join recordset
&#39;to be updatable.
</pre></div>
<!-- class="sect3" -->
<div id="OLEDB202" class="sect3"><a id="sthref157"></a>
<h4 class="sect3">Server Data on Insert Property<a id="sthref158"></a><a id="sthref159"></a></h4>
<p>If <code>DBPROP_SERVERDATAONINSERT</code> (Server Data on Insert) is set to <code>TRUE</code> using OraOLEDB, the consumer can obtain defaults, sequences, and triggered column values from newly inserted and updated rows, if the insert and update operations are made through the rowset.</p>
<p>Having <code>DBPROP_SERVERDATAONINSERT</code> set to <code>TRUE</code> may degrade performance for both insert and update executions using a rowset because OraOLEDB fetches row data from the database for the newly inserted and updated row. However, if <code>DBPROP_SERVERDATAONINSERT</code> is set to its default value of <code>FALSE</code>, only the explicitly provided values for insert and update operations are returned when column values are requested for those rows.</p>
<p>If the base table from which the rowset was created does not contain any defaults, sequences, or triggers, then it is highly recommended that <code>DBPROP_SERVERDATAONINSERT</code> retain its default value of <code>FALSE</code>.</p>
<p>The <code>DBPROP_SERVERDATAONINSERT</code> property does not affect the performance of insert and update operations using the command object.</p>
</div>
<!-- class="sect3" -->
<div id="OLEDB203" class="sect3"><a id="sthref160"></a>
<h4 class="sect3">To <a id="sthref161"></a>Search for Rows with IRowsetFind::FindNext</h4>
<p>OraOLEDB only supports searches performed on <code>CHAR</code>, <code>DATE</code>, <code>FLOAT</code>, <code>NUMBER</code>, <code>RAW</code>, and <code>VARCHAR2</code> columns. Otherwise, <code>DB_E_NOTSUPPORTED</code> is returned.</p>
<p>When a search is done with a <code>NULL</code> value, only the <code>DBCOMPAREOPS_EQ</code> and <code>DBCOMPAREOPS_NE</code> compare operations are supported. Otherwise, <code>DB_E_NOTSUPPORTED</code> is returned.</p>
</div>
<!-- class="sect3" -->
<a id="i1017121"></a>
<div id="OLEDB204" class="sect3">
<h4 class="sect3">OraOLEDB-Specific Connection String Attributes for Rowsets<a id="sthref162"></a></h4>
<p>OraOLEDB-specific connection string attributes which affect the performance of the rowset are:</p>
<ul>
<li>
<p><code>CacheType<a id="sthref163"></a></code> - specifies the type of caching used by the provider to store rowset data. OraOLEDB provides two caching mechanisms:</p>
<ul>
<li>
<p>Memory - The provider stores all the rowset data in-memory. This caching mechanism provides better performance at the expense of higher memory utilization. The default is Memory.</p>
</li>
<li>
<p>File - The provider stores all the rowset data on disk. This caching mechanism limits memory consumption at the expense of performance.</p>
</li>
</ul>
</li>
<li>
<p><code>ChunkSize<a id="sthref164"></a></code> - This attribute specifies the size, in bytes, of the data in <code>LONG</code> and <code>LONG RAW</code> columns fetched and stored in the provider cache. Providing a high value for this attribute improves performance, but requires more memory to store the data in the rowset. Valid values are <code>1</code> to <code>65535</code>. The default is <code>100</code>.</p>
</li>
<li>
<p><code>FetchSize<a id="sthref165"></a></code> - specifies the number of rows the provider will fetch at a time (fetch array). It must be set on the basis of data size and the response time of the network. If the value is set too high, then this could result in more wait time during the execution of the query. If the value is set too low, then this could result in many more round trips to the database. Valid values are <code>1</code> to <code>429</code>,<code>496</code><code>,</code> and <code>296</code><code>.</code> The default is <code>100</code>.</p>
</li>
<li id="BCGCEBII">
<p><code>DeferUpdChk<a id="sthref166"></a></code><a id="sthref167"></a> - The <code>DeferUpdChk</code> attribute specifies whether or not to defer the updateability check. This supports updating ADO read-only disconnected rowsets. Valid values are <code>0</code> (<code>FALSE</code>) and <code>1</code> (<code>TRUE</code>). The default is <code>FALSE</code>, which implies that OraOLEDB does not defer the check. If this attribute is not provided at the connection time, then the default registry value is used.</p>
</li>
</ul>
<p>The default attribute values are set in the registry. For more information, see <a href="#i1016630">&#34;Default Attribute Values&#34;</a>. The following ADO code example overrides the default attribute values:</p>
<pre>Dim con As ADODB.Connection
Set con = NEW ADODB.Connection
con.ConnectionString = &#34;Provider=OraOLEDB.Oracle;User ID=scott;&#34; &amp; _
                          &#34;Password=tiger;Data Source=MyOraDB;&#34; &amp; _
                          &#34;FetchSize=200;CacheType=File;&#34;
con.Open
</pre></div>
<!-- class="sect3" -->
<div id="OLEDB205" class="sect3"><a id="sthref168"></a>
<h4 class="sect3"><a id="sthref169"></a>Tips for ADO Programmers</h4>
<p>Setting the ADO Rowset property <code><a id="sthref170"></a>LockType</code> to <code>adLockPessimistic</code> is not supported by Oracle Provider for OLE DB. If <code>LockType</code> is set to <code>adLockPessimistic</code>, then OraOLEDB behaves similar to when set as <code>adLockOptimistic</code>. This behavior occurs because OraOLEDB does not perform explicit locks on the rows being modified. However, when new data is submitted to the database, the database only performs the update if the rowset data was not already updated by another user, which means that dirty writes are not allowed. <code>LockType</code> values <code>adLockReadOnly</code>, <code>adLockBatchOptimistic</code>, and <code>adLockOptimistic</code> are supported by OraOLEDB.</p>
<p>Setting ADO Rowset property <code><a id="sthref171"></a>CursorType</code> to <code>adOpenKeyset</code> or <code>adOpenDynamic</code> is not supported by Oracle Provider for OLE DB. OraOLEDB does not support either of the two as Oracle supports <span class="italic">Statement Level Read Consistency</span>, which ensures that the data returned by a query contains only committed data as of the time the query was executed. <code>CursorType</code> values <code>adOpenStatic</code> and <code>adOpenForwardOnly</code> are supported by OraOLEDB.</p>
</div>
<!-- class="sect3" -->
<div id="OLEDB206" class="sect3"><a id="sthref172"></a>
<h4 class="sect3"><a id="sthref173"></a><a id="sthref174"></a>Schema Rowsets</h4>
<p>The schema rowsets available through Oracle Provider for OLE DB are:</p>
<ul>
<li>
<p><code>DBSCHEMA_COLUMNS</code></p>
</li>
<li>
<p><code>DBSCHEMA_INDEXES</code></p>
</li>
<li>
<p><code>DBSCHEMA_SCHEMATA</code></p>
</li>
<li>
<p><code>DBSCHEMA_VIEWS</code></p>
</li>
<li>
<p><code>DBSCHEMA_TABLES</code></p>
</li>
<li>
<p><code>DBSCHEMA_PROVIDER_TYPES</code> (forward scroll only)</p>
</li>
<li>
<p><code>DBSCHEMA_FOREIGN_KEYS</code></p>
</li>
<li>
<p><code>DBSCHEMA_PRIMARY_KEYS</code></p>
</li>
<li>
<p><code>DBSCHEMA_PROCEDURES</code></p>
</li>
<li>
<p><code>DBSCHEMA_PROCEDURE_PARAMETERS</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="OLEDB207" class="sect3"><a id="sthref175"></a>
<h4 class="sect3">Date Formats<a id="sthref176"></a><a id="sthref177"></a><a id="sthref178"></a></h4>
<p>The date format for the Oracle session cannot be set using the <code>ALTER SESSION SET NLS_DATE_FORMAT</code> command. In Visual Basic, date formats are controlled by the Regional Settings properties in Windows Control Panel. For more information on Visual Basic date formats, refer to your Visual Basic documentation.</p>
<p>For Oracle Provider for OLE DB, if the <code>Connection</code> property <code>UseSessionFormat</code> is <code>FALSE</code>, which is a default value, then <code>NLS_DATE_FORMAT</code> is fixed for the session to <code>&#39;YYYY-MM-DD HH24:MI:SS&#39;</code> by the provider. If you pass the date to Oracle Database as a string, the date must be in the <code>&#39;YYYY-MM-DD HH24:MI:SS&#39;</code> format. If <code>UseSessionFormat</code> is <code>TRUE</code>, then <code>NLS_DATE_FORMAT</code> is not fixed by Oracle Provider for OLE DB and the default session <code>NLS_DATE_FORMAT</code> is used. For example:</p>
<pre>SELECT * FROM EMP WHERE HIREDATE &gt; &#39;1981-06-15 17:32:12&#39;
</pre>
<p>To use a different format, you need to use the SQL function, <code>TO_DATE()</code>, to specify the format for dates passed as strings. For example:</p>
<pre>SELECT * FROM EMP WHERE HIREDATE &gt; TO_DATE(&#39;15-JUN-81&#39;, &#39;DD-MON-YY&#39;)
</pre>
<p>However, for dates passed as parameters, the date format is controlled by ADO, which is controlled by the Regional Settings in Windows Control Panel. In this case, <code>TO_DATE()</code> should not be used. For example:</p>
<pre>Private Sub Command1_Click()
  Dim objCon As New ADODB.Connection
  Dim objCmd As New ADODB.Command
  Dim objRst  As New ADODB.Recordset
  Dim pDate As New ADODB.Parameter

  objCon.Provider = &#34;OraOLEDB.Oracle&#34;
  objCon.Open &#34;MyOraDb&#34;, &#34;scott&#34;, &#34;tiger&#34;
  Set pDate = objCmd.CreateParameter(&#34;pDate&#34;, adDate, adParamInput)
  objCmd.Parameters.Append pDate
  objCmd.CommandText = _
         &#34;SELECT * FROM EMP WHERE HIREDATE &gt; ?&#34;
  objCmd.ActiveConnection = objCon
  objCmd.CommandType = adCmdText
  pDate.Value = &#34;06/15/1981&#34;
  Set objRst = objCmd.Execute

    ...
End Sub
</pre></div>
<!-- class="sect3" -->
<div id="OLEDB208" class="sect3"><a id="sthref179"></a>
<h4 class="sect3">Case of Object Names<a id="sthref180"></a><a id="sthref181"></a></h4>
<p>The names of all objects (tables, columns, views, and so forth) in Oracle Database are case-sensitive. This allows the two objects <code>EMP</code> and <code>emp</code> to exist in the same namespace in the database.</p>
<p>The query, <code>SELECT ename FROM emp</code>, executes correctly even though the table name is <code>EMP</code> (all uppercase) in the database. However, if you want to specify object names in mixed case, you can do so by enclosing the name in double quotes. For example:</p>
<pre>SELECT ename FROM &#34;Emp&#34;
</pre>
<p>will execute successfully if the table name in the database is <code>Emp</code>. Double quotes preserve the case of the object names in Oracle Database.</p>
</div>
<!-- class="sect3" -->
<a id="BCGJEGBF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Performing a Fast Load with SQL Server Integration Services</h4>
<p>OraOLEDB implements the <code><a id="sthref182"></a><a id="sthref183"></a><a id="sthref184"></a>IRowsetFastLoad</code> interface when opening a rowset. When used with SQL Server Integration Services (SSIS), this allows an application to perform a fast-load to an OLE DB Destination using Oracle Provider for OLE DB. This can dramatically speed up load times versus using a conventional load. In order to perform a fast-load, set the <code>AccessMode</code> property on the OLE DB Destination to <code>&#34;</code><code>OpenRowset</code> <code>Using</code> <code>FastLoad</code><code>&#34;</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDJJDAJ"></a>
<div id="OLEDB127" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Data Types</h3>
<p>The data types that OraOLEDB supports are listed in <a href="appxtype.htm#BABFJAAH">Table A-1</a> with Unicode and NonUnicode mappings.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For details about these and other data types, and time zones, see <a class="olink SQLRF002" href="../SQLRF/sql_elements.htm#SQLRF002"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
<div id="OLEDB128" class="sect3"><a id="sthref185"></a>
<h4 class="sect3">Binary Data Types</h4>
<p><code>BINARY_FLOAT</code> is a single-precision floating point data type (4 bytes), which is mapped to OLE DB <code>DBTYPE_R4</code>.</p>
<p><code>BINARY_DOUBLE</code> is a double-precision floating point data type (8 bytes), which is mapped to OLE DB <code>DBTYPE_R8</code>.</p>
</div>
<!-- class="sect3" -->
<div id="OLEDB129" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref186"></a>
<h4 class="sect3">TIMESTAMP Data Types</h4>
<p>This section discusses the Timestamp data types and then provides the following:</p>
<ul>
<li>
<p>Sample data illustrating insertion and retrieval operations using each of the <code>Timestamp</code> data types.</p>
</li>
<li>
<p>A Visual Basic code example using the <code>Timestamp</code> data types.</p>
</li>
</ul>
<p>Timestamp data types are mapped to the OLE DB <code>DBTYPE_DBTIMESTAMP</code>. The OLE DB <code>DBTYPE_DBTIMESTAMP</code> data type does not have <code>TIME</code> <code>ZONE</code> information.</p>
<p>The Timestamp data types include:</p>
<ul>
<li>
<p><code>TIMESTAMP</code></p>
</li>
<li>
<p><code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code></p>
</li>
<li>
<p><code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code></p>
</li>
</ul>
<p class="subhead2"><a id="CHDDDBHI"></a><a id="OLEDB130"></a>Data Insertion</p>
<p>For data insertion into a <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> or <code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code> column, the time zone setting of the client is used.</p>
<p>OLE DB Timestamp data type cannot provide the time zone information. For insert operations, the default time zone from the client session is added to the <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> column data.</p>
<p class="subhead2"><a id="CHDICHCD"></a><a id="OLEDB131"></a>Data Retrieval</p>
<p>For data retrieval, <code>TIME</code> <code>ZONE</code> is dropped for <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> columns, but <code>TIME</code> <code>ZONE</code> is used for <code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code> columns.</p>
<p>The OLE DB <code>Timestamp</code> data type cannot store time zone information.</p>
<p class="subhead2"><a id="OLEDB132"></a>Fractional Second</p>
<p>Fractional second is not supported for <code>TIMESTAMP</code> data types binding with <code>Command</code> objects.</p>
<p>Note that using <code>ALTER</code> <code>SESSION</code> to change time zone information does not change the time zone information in the new and existing <code>Recordset</code>s, which use the client time zone setting from the Regional options of the operating system. The maximum <code>fractional_seconds_precision</code> of <code>TIMESTAMP</code> is <code>9</code> and the default precision is <code>6</code>.</p>
<p class="subhead2"><a id="OLEDB133"></a>ADO Consumers</p>
<p>For the Timestamp data types, ADO consumers must specify the value of <code>CursorLocation</code> as <code>adUseServer</code> and use <code>Recordset</code> for DML operations.</p>
<p class="subhead1"><a id="OLEDB134"></a>Examples of Timestamp Insert and Retrieval</p>
<p>The following scenarios assume that the default precision of <code>6</code> is used.</p>
<p class="subhead2"><a id="OLEDB135"></a>TIMESTAMP Column</p>
<p>Insert Data: 4/16/2003 11:19:19 AM (No time zone)</p>
<p>Data in DB: 4/16/2003 11.19.19.000000 AM</p>
<p>Data Retrieval: 4/16/2003 11:19:19 AM</p>
<p class="subhead2"><a id="OLEDB136"></a>TIMESTAMP WITH TIME ZONE Column</p>
<p>Insert Data: 4/16/2003 11:19:19 AM (Time zone of the Client session is used)</p>
<p>Data in DB: 4/16/2003 11.19.19.000000 AM -07:00</p>
<p>Data Retrieval: 4/16/2003 11:19:19 AM (Time zone is dropped)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDDDBHI">&#34;Data Insertion&#34;</a></p>
</li>
<li>
<p><a href="#CHDICHCD">&#34;Data Retrieval&#34;</a></p>
</li>
</ul>
</div>
<p class="subhead2"><a id="OLEDB137"></a>TIMESTAMP WITH LOCAL TIME ZONE Column</p>
<p>The following scenario assumes that the time zone of the client session is <code>-04:00</code>, currently on US EDT (Eastern daylight time). For an insert operation, the data in the <code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code> column does not include time zone displacement, but its <code>TIMESTAMP</code> data is <span class="italic">normalized</span> to the database time zone <code>-07:00</code>, which is the same as US PDT (Pacific daylight time).</p>
<p>For a query, data is returned in the time zone of the client session. The time zone displacement is the difference (in hours and minutes) between the local time and the Coordinated Universal Time (UTC).</p>
<p>Insert Data: 4/16/2003 4:30:23 PM (Client time zone is -04:00)</p>
<p>Data in DB: 4/16/2003 01.30.23.000000 PM (Database time zone -07:00)</p>
<p>Data Retrieval: 4/16/2003 4:30:23 PM (Client time zone is -04:00)</p>
<p>Data Retrieval: 4/16/2003 3:30:23 PM (Client time zone is -05:00)</p>
<p>Data Retrieval: 4/16/2003 2:30:23 PM (Client time zone is -06:00)</p>
<p>Data Retrieval: 4/16/2003 1:30:23 PM (Client time zone is -07:00)</p>
<p class="subhead2"><a id="OLEDB262"></a>Visual Basic Example</p>
<pre>...
Dim DT As Date 
 DT = Now() 
con.ConnectionString = &#34;Provider=OraOLEDB.Oracle.1;User ID=user_name;&#34; &amp; _
    &#34;Password=pwd;Data Source=Oracle;&#34; 
con.Open 
&#39;Must use adUseServer 
rec.CursorLocation = adUseServer 
rec.ActiveConnection = con 
rec.Open &#34;select timestamp_column from test_table&#34;, con, adOpenDynamic,_
    adLockOptimistic 
rec.AddNew Array(&#34;timestamp_column&#34;), Array(DT) 
 
update data 
rec.Update Array(&#34;timestamp_column&#34;), Array(&#34;07/07/07 07:17:17 AM&#34;) 
...
</pre></div>
<!-- class="sect3" -->
<div id="OLEDB140" class="sect3"><a id="sthref187"></a>
<h4 class="sect3">INTERVAL Data Types</h4>
<p>The INTERVAL data types are mapped to OLE DB <code>DBTYPE_STR</code> data type. The INTERVAL data types include:</p>
<ul>
<li>
<p><code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code></p>
</li>
<li>
<p><code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code></p>
</li>
</ul>
<p>For the <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> column, the maximum <code>year_precision</code> is <code>9</code> and the default is <code>2</code>. For <code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code> column, the maximum <code>day_precision</code> is <code>9</code> and the default is <code>2</code> and the maximum <code>fractional_seconds_precision</code> is <code>9</code>, the default is <code>6</code>.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
If the sign is not specified, then the default is <span class="bold">+</span>.</div>
<p class="subhead2"><a id="OLEDB141"></a>INTERVAL YEAR TO MONTH</p>
<p>Usage: (sign) <code>years-months</code></p>
<p>Examples:</p>
<ul>
<li>
<p><code>2-3</code></p>
<p>2 years and 3 months</p>
</li>
<li>
<p><code>+2-3</code></p>
<p>2 years and 3 months</p>
</li>
<li>
<p><code>-2-3</code></p>
<p>negative 2 years and 3 months</p>
</li>
</ul>
<p class="subhead2"><a id="OLEDB142"></a>INTERVAL DAY TO SECOND</p>
<p>Usage: (sign) <code>days hours:minutes:seconds.second_fraction</code></p>
<p>Examples:</p>
<ul>
<li>
<p><code>7</code> <code>10:20:30.123456</code></p>
<p>7 days, 10 hours, 20 minutes, and 30.123456 seconds</p>
</li>
<li>
<p><code>+7</code> <code>10:20:30.123456</code></p>
<p>7 days, 10 hours, 20 minutes, and 30.123456 seconds</p>
</li>
<li>
<p><code>-7</code> <code>10:20:30.123456</code></p>
<p>negative 7 days, 10 hours, 20 minutes, and 30.123456 seconds</p>
</li>
</ul>
<p class="subhead2"><a id="OLEDB143"></a>Visual Basic Example</p>
<pre>...
con.ConnectionString = &#34;Provider=OraOLEDB.Oracle.1;User ID=user_name;&#34;&amp; _
     &#34;Password=pwd;Data Source=Oracle;&#34; 
con.Open 
&#39;no restriction on using adUseServer or adUseClient 
rec.CursorLocation = adUseServer 
rec.ActiveConnection = con 
rec.Open &#34;select * from test_table2&#34;, con, adOpenDynamic, adLockOptimistic 
rec.AddNew Array(&#34;year_to_month_column&#34;, &#34;day_to_second_column&#34;), _
    Array(&#34;8-1&#34;, &#34;3 20:30:10.12&#34;)   
 
&#39;update data 
rec.Update Array(&#34;year_to_month_column&#34;, &#34;day_to_second_column&#34;), _
     Array(&#34;2-3&#34;, &#34;7 10:20:30.123456&#34;)
... 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1017202"></a>
<div id="OLEDB209" class="sect2">
<h3 class="sect2">LOB Support<a id="sthref188"></a><a id="sthref189"></a></h3>
<p>The <code>ISequentialStream</code> interface is supported for all <code>LONG</code>, <code>LONG RAW</code>, and LOB (<code>BLOB</code>, <code>CLOB</code>, <code>NCLOB</code>, and <code>BFILE</code>) columns. The consumer can use this interface to read and write to all the LOB columns, except <code>BFILE</code> which is read-only. To have read and write access to these columns, the <code>SELECT</code> SQL statement used to create the rowset should not contain a join.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Although most of the LOB columns in an Oracle Database support LOBs over 2 GB of data storage, ADO limits the maximum column size to 2 GB.</div>
<p>Columns having the <code>BFILE</code> data type are not updatable in the <code>Rowset</code> interface. However, these columns can be updated using the command interface, if the update is limited to modifying the directory and name of the external file pointed to by the <code>BFILE</code> column. For example:</p>
<pre>INSERT INTO topomaps (areanum, topomap) 
VALUES (158, BFILENAME(&#39;mapdir&#39;, &#39;topo158.tps&#39;))
</pre>
<p>For more information on LOBs, see <a class="olink ADLOB" href="../ADLOB/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="i1017221"></a>
<div id="OLEDB210" class="sect2">
<h3 class="sect2">Unicode Support<a id="sthref190"></a><a id="sthref191"></a></h3>
<p>OraOLEDB supports the Unicode character set. Using this feature, consumers can use OraOLEDB to access data in multiple languages on the same client computer. It can be especially useful in creating global Internet applications supporting as many languages as the Unicode standard entails. For example, you can write a single Active Server Page (ASP) application that accesses an Oracle Database to dynamically generate contents in Japanese, Arabic, English, Thai, and so on.</p>
<div id="OLEDB211" class="sect3"><a id="sthref192"></a>
<h4 class="sect3">Types of Unicode Encoding</h4>
<p>The Oracle Databases store the Unicode data in the UTF-8 encoding scheme, which is an ASCII compatible multibyte encoding of Unicode. Microsoft Windows uses the UTF-16 encoding, which is a 2-byte fixed-width encoding scheme. OraOLEDB transparently converts the data between the two encoding schemes allowing the consumers to deal with only UTF-16.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Unicode support is transparent to ADO consumers. OLE DB consumers using C or C++ need to explicitly specify <code>DBTYPE_WSTR</code> in their data type bindings when Unicode data in involved.</div>
</div>
<!-- class="sect3" -->
<div id="OLEDB212" class="sect3"><a id="sthref193"></a>
<h4 class="sect3">How Oracle Unicode Support Works</h4>
<p>OraOLEDB works in two modes, Unicode mode and nonUnicode mode. When the client character set is not a superset of the server character set or the database character set is a multibyte character set, OraOLEDB automatically enables the Unicode mode. In this mode, OraOLEDB stores the data in its cache in the UTF-16 encoding scheme. The user should ensure that the database&#39;s character set is AL32UTF8 to prevent any data loss.</p>
<p>If the client character set is a superset of the server&#39;s, then the provider operates in the nonUnicode mode. This mode provides slightly better performance as it does not have to deal with larger character buffers required by the UTF-16 encoding.</p>
<p>The detection of the client&#39;s and the server&#39;s character set is performed during logon.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
OraOLEDB no longer requires the client character set to be set to UTF8 to enable the Unicode mode. The provider still supports such setups but no longer requires it.</div>
<p>See <a href="appxtype.htm#i624168">&#34;Data Type Mappings in Rowsets and Parameters&#34;</a> for further information.</p>
</div>
<!-- class="sect3" -->
<div id="OLEDB213" class="sect3"><a id="sthref194"></a>
<h4 class="sect3">Unicode Support Setup</h4>
<p>To prevent any data loss, the database character set should be AL32UTF8. Other than this, there is no other setup required for Unicode support.</p>
<div id="OLEDB214" class="sect4"><a id="sthref195"></a>
<h5 class="sect4">Database Setup</h5>
<p>You must ensure that the Oracle Database is configured to store the data in the AL32UTF8 character set. The character set configuration is typically specified during database creation. To check the character set setting of your database, execute the following query in SQL*Plus:</p>
<pre>SQL&gt; SELECT parameter, value FROM nls_database_parameters
     WHERE parameter = &#39;NLS_CHARACTERSET&#39;;
</pre>
<p>If the character set of your database is not AL32UTF8, you need to create a new database with the AL32UTF8 character set and import your data into it. See <a class="olink ADMIN" href="../ADMIN/toc.htm"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG317" href="../NLSPG/ch6unicode.htm#NLSPG317"><span class="italic">Oracle Database Globalization Support Guide</span></a> for general information</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABHCBAD"></a>
<div id="OLEDB215" class="sect2">
<h3 class="sect2">Errors<a id="sthref196"></a><a id="sthref197"></a><a id="sthref198"></a></h3>
<p>OLE and COM objects report errors through the <code>HRESULT</code> return code of the object member functions. An OLE/COM <code>HRESULT</code> return code is a bit-packed structure. OLE provides macros that dereference structure members. OraOLEDB exposes <code>IErrorLookup</code> to retrieve information about an error.</p>
<p>All objects support extended error information. For this, the consumer must instantiate the OLE DB Extended Error object followed by calling the method <code>GetErrorDescription()</code> to get the error text.</p>
<pre>// Instantiate OraOLEDBErrorLookup and obtain a pointer to its
//   IErrorLookup interface
CoCreateInstance(CLSID_OraOLEDBErrorLookup, NULL, CLSCTX_INPROC_SERVER,
                 IID_IErrorLookup, (void **)&amp;pIErrorLookup)
//Call the method GetErrorDescription() to get the full error text
pIErrorLookup-&gt;GetErrorDescription()
</pre>
<p>The OraOLEDB provider returns the entire error stack in one text block.</p>
<p>For ADO users, the following example applies:</p>
<pre>Dim oerr As ADODB.Error
For Each oerr in con.Errors
    MsgBox &#34;Error: &#34; &amp; oerr.Description &amp; vbCrLf _
        &amp; &#34;Source: &#34; &amp; oerr.Source
Next
</pre></div>
<!-- class="sect2" -->
<a id="i1017293"></a>
<div id="OLEDB0002" class="sect2">
<h3 class="sect2">OLEDB.NET Data Provider Compatibility<a id="sthref199"></a><a id="sthref200"></a><a id="sthref201"></a></h3>
<p>The OLE DB .NET Data Provider can utilize OraOLEDB as the OLE DB Provider for accessing Oracle Database.</p>
<p>To make OraOLEDB compatible with OLE DB .NET Data Provider, set the connection string attribute <a id="sthref202"></a><code>OLEDB.NET</code> to <code>True</code>.</p>
<p>Setting the <code>OLEDB.NET</code> attribute to <code>False</code> disables .NET compatibility.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>OLEDB.NET</code> connection string attribute must not be used in ADO applications.</div>
<div id="OLEDB216" class="sect3"><a id="sthref203"></a>
<h4 class="sect3">Using the OLEDB.NET Attribute in a Connection String</h4>
<p>When using OraOLEDB with the OLE DB .NET Data Provider, the <code>OLEDB.NET</code> connection attribute must be set to <code>True</code> as shown in the following examples:</p>
<pre>// in <a id="sthref204"></a><a id="sthref205"></a><a id="sthref206"></a>VB.NET
Dim con As New OleDbConnection()
con.ConnectionString = &#34;Provider=OraOLEDB.Oracle;User Id=scott;&#34; &amp; _
     &#34;Password=tiger;Data Source=Oracle;OLEDB.NET=True;&#34;
con.Open

// in <a id="sthref207"></a>C#<a id="sthref208"></a><a id="sthref209"></a>
...
OleDbConnection con = new OleDbConnection();
con.ConnectionString = &#34;Provider=OraOLEDB.Oracle;User Id=scott;&#34; +
     &#34;Password=tiger;Data Source=Oracle;OLEDB.NET=true;&#34;
con.Open();
...
</pre></div>
<!-- class="sect3" -->
<div id="OLEDB217" class="sect3"><a id="sthref210"></a>
<h4 class="sect3">Using OraOLEDB Custom Properties</h4>
<p>ADO allows OraOLEDB provider-specific properties to be set at the object level. The OraOLEDB-specific properties <code>SPPrmsLOB</code> and <code>NDatatype</code> can be set as connection string attributes as well as at the command-object level. The <code>StmtCacheSize</code> property can be set as a connection string attribute and the <code>AddToStmtCache</code> property can be set at the command object level. The following example shows the setting of properties at the command level:</p>
<pre>// in VB
Dim cmd as new ADODB.Command
...
cmd.Properties(&#34;SPPrmsLOB&#34;) = True
cmd.Properties(&#34;NDatatype&#34;) = True
cmd.Properties(&#34;AddToStmtCache&#34;) = True
...
</pre>
<p>However, the OLEDB.NET Data Provider cannot expose OLE DB provider-specific properties at the object level. Therefore, the <code>SPPrmsLOB</code> and <code>NDatatype</code> properties can only be set as connection string attributes and <code>AddToStmtCache</code> property is not supported when OraOLEDB is used by OLE DB .NET Data Provider:</p>
<pre>// in VB.NET
Dim con As New OleDbConnection()
con.ConnectionString = &#34;Provider=OraOLEDB.Oracle;User Id=scott;&#34; &amp; _
     &#34;Password=tiger;Data Source=Oracle;OLEDB.NET=True;&#34; &amp; _
     &#34;SPPrmsLOB=False;NDatatype=False;&#34;
con.Open()
</pre>
<p>Both <code>SPPrmsLOB</code> and <code>NDatatype</code> connection string attributes are set to <code>False</code> by default if they are not specified.</p>
<p>Setting either of these connection string attributes to <code>True</code> incurs additional processing overhead when executing commands with parameters. For this reason, before setting either attribute to <code>True,</code> see <a href="#i1016761">&#34;OraOLEDB Custom Properties for Commands&#34;</a>.</p>
</div>
<!-- class="sect3" -->
<div id="OLEDB218" class="sect3"><a id="sthref211"></a>
<h4 class="sect3">Updating Oracle with <a id="sthref212"></a>DataTable Changes</h4>
<p>In order for the <code><a id="sthref213"></a>OleDbDataAdapter.Update()</code> method to properly update Oracle Database with changes made in <code>DataTable</code>, which must contain a primary key of a database table. If the database table does not contain a primary key, the <code><a id="sthref214"></a>ROWID</code> must be selected explicitly when populating <code>DataTable</code>, so that the <code>ROWID</code> can be used to uniquely identify a row when updating a row in the database.</p>
<p>Do not select the <code>ROWID</code> from database tables that contains a primary key. If <code>ROWID</code> is selected along with a primary key, <code>ROWID</code> will be the only column marked as the primary key.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For further information on using the OLE DB .NET Data Provider
<ul>
<li>
<p>Microsoft .NET Documentation</p>
</li>
<li>
<p>Microsoft .NET Framework Class Library</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1017396"></a>
<div id="OLEDB219" class="sect1">
<h2 class="sect1">Using OraOLEDB with Visual Basic<a id="sthref215"></a></h2>
<p>The following simple example illustrates how to use Oracle Provider for OLE DB with ADO in Visual Basic 6.0 to connect to an Oracle Database and execute PL/SQL stored procedures and functions.</p>
<div id="OLEDB220" class="sect2"><a id="sthref216"></a>
<h3 class="sect2">Setting Up the Oracle Database</h3>
<p>This example assumes that the Oracle Database has the demonstration table <code>EMP</code> under the user account <code>scott</code>. The <code>scott</code> account is included in the Oracle starter database. If the account does not exist on your database, create the account before running the sample program. If your database does not contain the <code>emp</code> table, then you can use the <code><a id="sthref217"></a>demobld.sql</code> script to create the demonstration tables.</p>
<p>This example also uses <code><span class="codeinlineitalic">exampledb</span></code> as the database network alias when connecting to the Oracle Database. You must change this network alias to match your system.</p>
<dl>
<dd><a id="OLEDB257"></a><a id="sthref218"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Build the Sample Tables:</dt>
<dd>
<ol>
<li>
<p>Start SQL*Plus.</p>
</li>
<li>
<p>Connect as username <code>scott</code> with the password <code>tiger</code>.</p>
</li>
<li>
<p>Run the <code><a id="sthref219"></a>demobld.sql</code> script:</p>
<pre>SQL&gt; @<span class="italic">ORACLE_BASE\ORACLE_HOME</span>\sqlplus\demo\demobld.sql;
</pre></li>
</ol>
<p>After the <code>emp</code> table has been created in the <code>scott</code> account, you need to create the PL/SQL package that contains the stored procedure and function that are run in the Visual Basic example.</p>
</dd>
<dd><a id="OLEDB258"></a><a id="sthref220"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create the PL/SQL package:</dt>
<dd>
<ol>
<li>
<p>Connect as username <code>scott</code> with the password <code>tiger</code>.</p>
</li>
<li>
<p>Create the PL/SQL packages shown in <a href="#i1016901">&#34;PL/SQL Package&#34;</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When creating PL/SQL packages the <code>/</code> character is used as a terminator and must be added on a separate line following each <code>CREATE</code> <code>PACKAGE</code>...<code>END</code> block.</div>
</li>
</ol>
</dd>
</dl>
</div>
<!-- class="sect2" -->
<div id="OLEDB221" class="sect2"><a id="sthref221"></a>
<h3 class="sect2">Setting Up the Visual Basic Project</h3>
<p>After the Oracle Database setup is completed, you can create the Visual Basic 6.0 project.</p>
<ol>
<li>
<p>Start Visual Basic 6.0 and create a new project.</p>
</li>
<li>
<p>Make sure that the Microsoft ActiveX Data Objects 2.1 Library and Microsoft ActiveX Data Objects Recordset 2.1 Library are included as Project References.</p>
<img width="449" height="357" src="img/vbprjref.gif" alt="Description of vbprjref.gif follows"/><br/>
<a id="sthref222" href="img_text/vbprjref.htm">Description of the illustration vbprjref.gif</a><br/>
<br/></li>
<li>
<p>Add two command buttons to the form. One of the buttons will run the code to execute the PL/SQL procedure <code>GetEmpRecords</code>. The other will run the code to execute the PL/SQL function <code>GetDept</code>.</p>
<img width="248" height="240" src="img/oledbvb1.gif" alt="Description of oledbvb1.gif follows"/><br/>
<a id="sthref223" href="img_text/oledbvb1.htm">Description of the illustration oledbvb1.gif</a><br/>
<br/></li>
<li>
<p>Add the following code to the <code>Click</code> subroutine of the button that will run the code to execute the PL/SQL procedure <code>GetEmpRecords</code>.</p>
<pre>Dim Oracon As ADODB.Connection
Dim recset As New ADODB.Recordset
Dim cmd As New ADODB.Command
Dim param1 As New ADODB.Parameter
Dim param2 As New ADODB.Parameter
Dim objErr As ADODB.Error
Dim Message, Title, Default, EmpNoValue

Message = &#34;Enter an employee number (5000 - 9000)&#34;
Title = &#34;Choose an Employee&#34;
Default = &#34;7654&#34;

On Error GoTo err_test

EmpNoValue = InputBox(Message, Title, Default)
If EmpNoValue = &#34;&#34; Then Exit Sub
If EmpNoValue &lt; 5000 Or EmpNoValue &gt; 9000 Then EmpNoValue = 7654

Set Oracon = CreateObject(&#34;ADODB.Connection&#34;)
Oracon.ConnectionString = &#34;Provider=OraOLEDB.Oracle;&#34; &amp; _
                          &#34;Data Source=exampledb;&#34; &amp; _
                          &#34;User ID=scott;&#34; &amp; _
                          &#34;Password=tiger;&#34;

Oracon.Open
Set cmd.ActiveConnection = Oracon
Set param1 = cmd.CreateParameter(&#34;param1&#34;, adSmallInt, adParamInput, ,
                                 EmpNoValue)
cmd.Parameters.Append param1
Set param2 = cmd.CreateParameter(&#34;param2&#34;, adSmallInt, adParamOutput)
cmd.Parameters.Append param2

&#39; Enable PLSQLRSet property
Cmd.Properties (&#34;PLSQLRSet&#34;) = TRUE  

cmd.CommandText = &#34;{CALL Employees.GetDept(?, ?)}&#34;
Set recset = cmd.Execute

&#39; Disable PLSQLRSet property
Cmd.Properties (&#34;PLSQLRSet&#34;) = FALSE 

MsgBox &#34;Number: &#34; &amp; EmpNoValue &amp; &#34;  Dept: &#34; &amp; recset.Fields(&#34;deptno&#34;).Value

Exit Sub

err_test:
    MsgBox Error$
    For Each objErr In Oracon.Errors
        MsgBox objErr.Description
    Next
    Oracon.Errors.Clear
    Resume Next
</pre></li>
<li>
<p>Add the following code to the <code>Click</code> subroutine of the button that will run the code to execute the PL/SQL function <code>GetDept</code>.</p>
<pre>Dim Oracon As ADODB.Connection
Dim recset As New ADODB.Recordset
Dim cmd As New ADODB.Command
Dim param1 As New ADODB.Parameter
Dim param2 As New ADODB.Parameter
Dim objErr As ADODB.Error
 
Dim Message, Title, Default, DeptValue
Message = &#34;Enter a department number (10, 20, or 30)&#34;
Title = &#34;Choose a Department&#34;
Default = &#34;30&#34;

On Error GoTo err_test
DeptValue = InputBox(Message, Title, Default)
If DeptValue = &#34;&#34; Then Exit Sub
If DeptValue &lt; 10 Or DeptValue &gt; 30 Then DeptValue = 30

Set Oracon = CreateObject(&#34;ADODB.Connection&#34;)
Oracon.ConnectionString = &#34;Provider=OraOLEDB.Oracle;&#34; &amp; _
                          &#34;Data Source=exampledb;&#34; &amp; _
                          &#34;User ID=scott;&#34; &amp; _
                          &#34;Password=tiger;&#34;  
Oracon.Open
Set cmd = New ADODB.Command
Set cmd.ActiveConnection = Oracon
Set param1 = cmd.CreateParameter(&#34;param1&#34;, adSmallInt, adParamInput, ,
                                DeptValue)
cmd.Parameters.Append param1
Set param2 = cmd.CreateParameter(&#34;param2&#34;, adSmallInt, adParamOutput)
cmd.Parameters.Append param2

&#39; Enable PLSQLRSet property
Cmd.Properties (&#34;PLSQLRSet&#34;) = TRUE  

cmd.CommandText = &#34;{CALL Employees.GetEmpRecords(?, ?)}&#34;
Set recset = cmd.Execute

&#39; Disable PLSQLRSet property
Cmd.Properties (&#34;PLSQLRSet&#34;) = FALSE 

Do While Not recset.EOF
   MsgBox &#34;Number: &#34; &amp; recset.Fields(&#34;empno&#34;).Value &amp; &#34;  Name: &#34; &amp;
   recset.Fields(&#34;ename&#34;).Value &amp; &#34;  Dept: &#34; &amp; recset.Fields(&#34;deptno&#34;).Value
   recset.MoveNext
Loop

Exit Sub

err_test:
    MsgBox Error$
    For Each objErr In Oracon.Errors
        MsgBox objErr.Description
    Next
    Oracon.Errors.Clear
    Resume Next
</pre></li>
<li>
<p>Run the project and check the results. For example, if you choose the Get Employee Records by Dept button, then you would see a dialog box requesting that you enter a department number.</p>
<img width="363" height="145" src="img/oledbvb2.gif" alt="Description of oledbvb2.gif follows"/><br/>
<a id="sthref224" href="img_text/oledbvb2.htm">Description of the illustration oledbvb2.gif</a><br/>
<br/>
<p>After you have entered a department number and clicked <span class="bold">OK</span>, another dialog box displays employee names and numbers from that department.</p>
<img width="216" height="100" src="img/oledbvb3.gif" alt="Description of oledbvb3.gif follows"/><br/>
<a id="sthref225" href="img_text/oledbvb3.htm">Description of the illustration oledbvb3.gif</a><br/>
<br/></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5817">
<tr>
<td class="cellalignment5824">
<table class="cellalignment5822">
<tr>
<td class="cellalignment5821"><a href="intro.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5821"><a href="appxtype.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5826">
<table class="cellalignment5820">
<tr>
<td class="cellalignment5821"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5821"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5821"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5821"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5821"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5821"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>