<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-107468"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/TimesTen%20Support%20for%20Pro%2AC%2FC%2B%2B"></a><title>TimesTen Support for Pro*C/C++</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1033"/>
<meta name="dcterms.created" content="2014-12-10T16:46:47Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database C Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E21637-09"/>
<meta name="dcterms.isVersionOf" content="TTCDV"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="oci.htm" title="Previous" type="text/html"/>
<link rel="Next" href="xla_event.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21637-09.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/15</span> <!-- End Header -->
<div id="TTCDV222" class="chapter"><a id="CIHCJHGD"></a>
<h1 class="chapter"><span class="secnum">4</span> TimesTen Support for Pro*C/C++</h1>
<p>TimesTen and TimesTen Cache support the Oracle Pro*C/C++ Precompiler for C and C++ applications. You can use the precompiler with embedded SQL and PL/SQL applications that access the TimesTen database.</p>
<p>This chapter provides an overview and TimesTen-specific information regarding Pro*C/C++, especially emphasizing differences between using Pro*C/C++ with TimesTen versus with Oracle Database. For complete information about Pro*C/C++, you can refer to <a class="olink LNPCC" href="../LNPCC/toc.htm"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a> in the Oracle Database library.</p>
<p>Also note that <a href="writing_app.htm#BABJJEEB">Chapter 2, &#34;Working with TimesTen Databases in ODBC&#34;</a>, contains information that may be of general interest regarding TimesTen features.</p>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#CIHFEBJF">Overview of the Oracle Pro*C/C++ Precompiler</a></p>
</li>
<li>
<p><a href="#CIHFEIED">Overview of TimesTen support for Pro*C/C++</a></p>
</li>
<li>
<p><a href="#CIHDBDBD">Getting started with TimesTen Pro*C/C++</a></p>
</li>
<li>
<p><a href="#CIHIEBDH">Additional features of TimesTen Pro*C/C++</a></p>
</li>
<li>
<p><a href="#CIHJGECC">TimesTen Pro*C/C++ Precompiler options</a></p>
</li>
</ul>
<a id="CIHFEBJF"></a>
<div id="TTCDV223" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Over<a id="sthref223"></a>view of the Oracle Pro*C/C++ Precompiler</h2>
<p>The Oracle Pro*C/C++ Precompiler enables you to embed SQL statements or PL/SQL blocks directly into C or C++ code. Further, you can use your C or C++ program host variables in your embedded SQL or PL/SQL.</p>
<p>You use a precompilation step to convert the Pro*C/C++ source file into a C or C++ source file. The precompiler accepts the Pro*C/C++ file as input, translates embedded SQL statements into standard Oracle Database runtime library calls, and generates a modified source code file that you can then compile and link. Pro*C/C++ code is linked against the Oracle Database precompiler <code dir="ltr">SQLLIB</code> library, which is shipped with TimesTen as part of the Oracle Instant Client.</p>
</div>
<!-- class="sect1" -->
<a id="CIHFEIED"></a>
<div id="TTCDV224" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Over<a id="sthref224"></a>view of TimesTen support for Pro*C/C++</h2>
<p>TimesTen support for the Oracle Pro*C/C++ Precompiler depends on TimesTen OCI. TimesTen OCI depends on the Oracle client library and the TimesTen ODBC libraries. See <a href="oci.htm#BABJFFHB">Figure 3-1</a> to see where OCI and Pro*C/C++ fit in the TimesTen architecture.</p>
<p>This chapter contains information specific to using the Oracle Pro*C/C++ Precompiler with TimesTen. The syntax and usage of the Oracle Pro*C/C++ Precompiler with TimesTen is essentially the same as with Oracle Database.</p>
<p>The rest of this section includes the following topics.</p>
<ul>
<li>
<p><a href="#CIHHBGEI">TimesTen OCI support</a></p>
</li>
<li>
<p><a href="#CIHFABEB">Embedded SQL support and restrictions</a></p>
</li>
<li>
<p><a href="#CIHFEDDI">Semantic checking restrictions</a></p>
</li>
<li>
<p><a href="#CIHHBIHG">Embedded PL/SQL restrictions</a></p>
</li>
<li>
<p><a href="#CIHIGEGE">Transaction restrictions</a></p>
</li>
<li>
<p><a href="#CIHECIAA">Connection restrictions</a></p>
</li>
<li>
<p><a href="#CIHCJAFH">Summary of unsupported or restricted executable commands and clauses</a></p>
</li>
<li>
<p><a href="#CIHGICGG">The ttSrcScan utility</a></p>
</li>
</ul>
<a id="CIHHBGEI"></a>
<div id="TTCDV225" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">TimesTen OCI support</h3>
<p>Because TimesTen support of the Oracle Pro*C/C++ Precompiler depends on TimesTen OCI support, restrictions for TimesTen OCI apply to Pro*C/C++ applications.</p>
<p>In addition, TimesTen does not support OCI calls that are related to functionality that does not exist in TimesTen.</p>
<p>For more information about TimesTen OCI support, see <a href="oci.htm#BABCABGH">Chapter 3, &#34;TimesTen Support for OCI.&#34;</a> Much of the information there may apply to Pro*C/C++ applications as well.</p>
</div>
<!-- class="sect2" -->
<a id="CIHFABEB"></a>
<div id="TTCDV226" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Em<a id="sthref225"></a><a id="sthref226"></a><a id="sthref227"></a>bedded SQL support and restrictions</h3>
<p>The TimesTen Pro*C/C++ Precompiler does not support embedded SQL for functionality that TimesTen and TimesTen Cache do not support. See <a href="oci.htm#BABDDCGG">&#34;TimesTen restrictions and differences&#34;</a>.</p>
<p>TimesTen provides the following support for <code dir="ltr">SQLLIB</code> functions:</p>
<ul>
<li>
<p><code dir="ltr">SQLErrorGetText</code> (<code dir="ltr">sqlglmt</code>) is supported.</p>
</li>
<li>
<p><code dir="ltr">SQLRowidGet()</code> is supported following only <code dir="ltr">SELECT FOR UPDATE</code> statements.</p>
</li>
</ul>
<p>In addition, TimesTen support for the Oracle Pro*C/C++ Precompiler has the following restrictions:</p>
<ul>
<li>
<p><code dir="ltr">REGISTER CONNECT</code> is not supported.</p>
</li>
<li>
<p>Stored Java subprograms are not supported.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHFEDDI"></a>
<div id="TTCDV227" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Se<a id="sthref228"></a>mantic checking restrictions</h3>
<p>TimesTen support for the Oracle Pro*C/C++ Precompiler does not provide semantic checking during precompilation. A <code dir="ltr">SQLCHECK</code> precompiler option setting that specifies semantic checking is permissible but has no effect.</p>
<p>It is important to be aware, however, that a setting of <code dir="ltr">SEMANTICS</code> results in a database connection even though precompilation semantic checking is not performed. Therefore, a setting of <code dir="ltr">SEMANTICS</code> requires the following during precompilation:</p>
<ul>
<li>
<p>The database must be running.</p>
</li>
<li>
<p>The <code dir="ltr">USERID</code> precompiler option must be set, either on the command line or in the <code dir="ltr">pcscfg.cfg</code> configuration file. You must provide the user name and password for an existing TimesTen user, and a TNS name that points to the database. In the following example, you are prompted for the password:</p>
<pre dir="ltr">USERID=user1@my_tnsname
</pre>
<p>Alternatively, you can enter <code dir="ltr">USERID=user1/mypassword@my_tnsname</code>, but for security reasons it is not advisable to specify a password on a command line or in a configuration file.</p>
</li>
</ul>
<p>See <a href="#CIHFGJBD">&#34;Connecting to a TimesTen database from Pro*C/C++&#34;</a> for information about usage and syntax for TNS names.</p>
<p>See the next section, <a href="#CIHHBIHG">&#34;Embedded PL/SQL restrictions&#34;</a>, for related information about Pro*C/C++ programs that use PL/SQL.</p>
</div>
<!-- class="sect2" -->
<a id="CIHHBIHG"></a>
<div id="TTCDV228" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Em<a id="sthref229"></a>bedded PL/SQL restrictions</h3>
<p>In TimesTen, if a Pro*C/C++ application contains PL/SQL blocks, then Pro*C/C++ acts as though the <code dir="ltr">SQLCHECK</code> setting is <code dir="ltr">SEMANTICS</code>. It is important to be aware that this results in a database connection even though precompilation semantic checking is not performed. Therefore, using PL/SQL in a Pro*C/C++ application requires the following during precompilation:</p>
<ul>
<li>
<p>The database must be running.</p>
</li>
<li>
<p>The <code dir="ltr">USERID</code> precompiler option must be set, specifying an existing TimesTen user. See the preceding section, <a href="#CIHFEDDI">&#34;Semantic checking restrictions&#34;</a>, for details about setting this option.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHIGEGE"></a>
<div id="TTCDV229" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tran<a id="sthref230"></a>saction restrictions</h3>
<p>Regarding transactions, TimesTen support for the Oracle Pro*C/C++ Precompiler does not provide the following:</p>
<ul>
<li>
<p><code dir="ltr">SAVEPOINT</code> SQL statement</p>
</li>
<li>
<p><code dir="ltr">SET TRANSACTION</code> SQL statement</p>
<p>You can still have transactions with commit and rollback, just not the <code dir="ltr">SET TRANSACTION</code> SQL statement.</p>
</li>
<li>
<p>Fetch across commits</p>
</li>
<li>
<p>Distributed transactions</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHECIAA"></a>
<div id="TTCDV230" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Con<a id="sthref231"></a>nection restrictions</h3>
<p>Regarding connections, TimesTen support for the Oracle <a id="sthref232"></a>Pro*C/C++ Precompiler does not provide the following:</p>
<ul>
<li>
<p><code dir="ltr">ALTER AUTHORIZATION</code> clause</p>
</li>
<li>
<p>Automatic connections to the database</p>
</li>
<li>
<p>Making connections to the database with <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> privilege, given that these privileges do not exist in TimesTen</p>
</li>
<li>
<p>Implicit connections (dblinks) to a TimesTen or Oracle Database</p>
</li>
</ul>
<p>For information about supported connection syntax, see <a href="#CIHFGJBD">&#34;Connecting to a TimesTen database from Pro*C/C++&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CIHCJAFH"></a>
<div id="TTCDV231" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Sum<a id="sthref233"></a>mary of unsupported or restricted executable commands and clauses</h3>
<p>Given restrictions including those noted in the preceding sections, this section summarizes the Pro*C/C++ <code dir="ltr">EXEC</code> SQL executable commands, categories of commands, and command clauses that TimesTen does not support or supports only partially:</p>
<ul>
<li>
<p><code dir="ltr">ALTER AUTHORIZATION</code></p>
</li>
<li>
<p><code dir="ltr">CACHE FREE ALL</code></p>
</li>
<li>
<p><code dir="ltr">CALL</code></p>
<p>This is supported only for calling PL/SQL. To call TimesTen built-in procedures, use dynamic SQL statements.</p>
</li>
<li>
<p>Any &#34;<code dir="ltr">COLLECTION...</code>&#34; command</p>
</li>
<li>
<p><code dir="ltr">COMMIT FORCE</code> &#39;some text&#39;</p>
</li>
<li>
<p><code dir="ltr">COMMIT WORK COMMENT</code> &#39;some text&#39; <code dir="ltr">RELEASE</code></p>
<p>The <code dir="ltr">COMMENT</code> clause is not supported.</p>
</li>
<li>
<p><code dir="ltr">CONNECT BY</code></p>
</li>
<li>
<p><code dir="ltr">CONTEXT OBJECT OPTION GET</code></p>
</li>
<li>
<p><code dir="ltr">CONTEXT OBJECT OPTION SET</code></p>
</li>
<li>
<p><code dir="ltr">DECLARE CURSOR</code></p>
<p>The <code dir="ltr">WITH HOLD</code> clause is not supported.</p>
</li>
<li>
<p><code dir="ltr">DECLARE TABLE</code></p>
<p>Only Oracle Database data types are supported.</p>
</li>
<li>
<p><code dir="ltr">DECLARE TYPE</code></p>
</li>
<li>
<p><code dir="ltr">EXPLAIN PLAN</code></p>
</li>
<li>
<p><code dir="ltr">IN SYSDBA MODE</code></p>
</li>
<li>
<p><code dir="ltr">IN SYSOPER MODE</code></p>
</li>
<li>
<p><code dir="ltr">LOCK TABLE</code></p>
</li>
<li>
<p>Any &#34;<code dir="ltr">OBJECT...</code>&#34; command</p>
</li>
<li>
<p><code dir="ltr">PARTITION</code></p>
</li>
<li>
<p><code dir="ltr">REGISTER CONNECT</code></p>
</li>
<li>
<p><code dir="ltr">RETURN</code></p>
</li>
<li>
<p><code dir="ltr">RETURNING</code></p>
</li>
<li>
<p><code dir="ltr">SAVEPOINT</code></p>
</li>
<li>
<p><code dir="ltr">SET DESCRIPTOR</code></p>
<p>You cannot set <code dir="ltr">CHARACTER_SET_NAME</code>.</p>
</li>
<li>
<p><code dir="ltr">SET TRANSACTION</code></p>
</li>
<li>
<p><code dir="ltr">START WITH</code></p>
</li>
<li>
<p><code dir="ltr">TO SAVEPOINT</code></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHGICGG"></a>
<div id="TTCDV232" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">The t<a id="sthref234"></a>tSrcScan utility</h3>
<p>If you have an existing Pro*C/C++ program and want to see whether it uses Pro*C/C++ features that TimesTen does not support, you can use the <code dir="ltr">ttSrcScan</code> command line utility to scan your program for unsupported embedded SQL functions and types. This is a standalone utility that can be run without TimesTen or Oracle Database being installed and runs on any platform supported by TimesTen. It reads source code files as input and creates HTML and text files as output. If the utility finds unsupported items, they are logged and alternatives are suggested. You can find the <code dir="ltr">ttSrcScan</code> executable in the <code dir="ltr">quickstart/sample_util</code> directory in your TimesTen installation.</p>
<p>Specify an input file or directory for the program to be scanned and an output directory for the <code dir="ltr">ttSrcScan</code> reports. Other options are available as well. See the README file in the <code dir="ltr">sample_util</code> directory for information.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHDBDBD"></a>
<div id="TTCDV233" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Get<a id="sthref235"></a>ting started with TimesTen Pro*C/C++</h2>
<p>This section covers the following topics for getting started with a Pro*C/C++ application for TimesTen:</p>
<ul>
<li>
<p><a href="#CIHDDDDG">Environment and configuration for TimesTen Pro*C/C++</a></p>
</li>
<li>
<p><a href="#CIHFHIGI">Building a Pro*C/C++ application</a></p>
</li>
<li>
<p><a href="#CIHFGJBD">Connecting to a TimesTen database from Pro*C/C++</a></p>
</li>
<li>
<p><a href="#CIHBBFIA">Error reporting and handling</a></p>
</li>
<li>
<p><a href="#CIHBIDBA">Pro*C/C++ demo programs</a></p>
</li>
</ul>
<a id="CIHDDDDG"></a>
<div id="TTCDV562" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Environment and configuration for TimesTen Pro*C/C++</h3>
<p>The Pro*C/C++ system configuration file <code dir="ltr">pcscfg.cfg</code> contains the precompiler options for precompilation of your Pro*C/C++ source code. In TimesTen, you must use the version of this file that TimesTen provides. This typically happens automatically if you ensure appropriate configuration for TimesTen through the TimesTen <code dir="ltr">ttenv</code> script. See <a class="olink TTINS178" href="../TTINS/install.htm#TTINS178">&#34;Environment variables&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Installation Guide</span> for information about <code dir="ltr">ttenv</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To ensure proper generation of OCI and Pro*C/C++ programs to be run on TimesTen, do not set <code dir="ltr">ORACLE_HOME</code> for OCI and Pro*C/C++ compilations (or unset it if it was set previously).</div>
</div>
<!-- class="sect2" -->
<a id="CIHFHIGI"></a>
<div id="TTCDV234" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Buil<a id="sthref236"></a><a id="sthref237"></a><a id="sthref238"></a>ding a Pro*C/C++ application</h3>
<p>Before building a Pro*C/C++ application, you must set up your environment:</p>
<ol>
<li>
<p>You can use the TimesTen OCI and Pro*C/C++ Makefiles provided with the Quick Start demos to implement appropriate environment settings. These are in the following locations (assuming the standard Quick Start location):</p>
<pre dir="ltr"><span class="italic">install_dir</span>/quickstart/sample_code/oci/
<span class="italic">install_dir</span>/quickstart/sample_code/proc/
</pre></li>
<li>
<p>Confirm <code dir="ltr">LD_LIBRARY_PATH</code> or <code dir="ltr">PATH</code> is set so that the Oracle Instant Client directory precedes the Oracle Database libraries in the path. The path is set properly if you use the <code dir="ltr"><span class="codeinlineitalic">install_dir</span></code><code dir="ltr">/bin/ttenv</code> script or <code dir="ltr">quickstart/ttquickstartenv</code> script. See <a class="olink TTINS178" href="../TTINS/install.htm#TTINS178">&#34;Environment variables&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Installation Guide</span> for information about environment variables and <code dir="ltr">ttenv</code>.</p>
</li>
</ol>
<p>Then use steps such as the following to build a Pro*C/C++ application. The steps shown here present a basic example for a UNIX system and assume the program has no other includes (<code dir="ltr">#include</code>) or links to other libraries. The designation <code dir="ltr"><span class="codeinlineitalic">instant_client</span></code> represents the directory where Oracle Instant Client is installed.</p>
<p>See the Quick Start Pro*C/C++ Makefile in the <code dir="ltr">quickstart/sample_code/proc</code> directory for complete, platform-specific examples.</p>
<ol>
<li>
<p>Pre<a id="sthref239"></a>compile the Pro*C/C++ source file by using the <code dir="ltr">proc</code> command from your system prompt. For example:</p>
<pre dir="ltr">% proc iname=sample.pc
</pre>
<p>The <code dir="ltr">proc</code> utility takes a <code dir="ltr">.pc</code> source file as input and produces a <code dir="ltr">.c</code> file.</p>
</li>
<li>
<p>Compile the resulting C code file. On Linux platforms, enter a command similar to the following:</p>
<pre dir="ltr">% gcc -c sample.c -I(<span class="codeinlineitalic">instant_client</span>)/sdk/
</pre></li>
<li>
<p>Link the resulting object modules with modules in <code dir="ltr">SQLLIB</code>. For example:</p>
<pre dir="ltr">% gcc -o sample sample.o -L(<span class="codeinlineitalic">instant_client</span>)/lib -lclntsh
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHFGJBD"></a>
<div id="TTCDV235" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Con<a id="sthref240"></a><a id="sthref241"></a>necting to a TimesTen database from Pro*C/C++</h3>
<p>This section provides information on connecting to TimesTen from a Pro*C/C++ application. TimesTen Pro*C/C++ and OCI use the Oracle Instant Client to connect to the TimesTen database. Refer to <a href="oci.htm#BABIBEJD">&#34;Connecting to a TimesTen database from OCI&#34;</a> for additional configuration steps to use the <code dir="ltr">tnsnames</code> naming method or easy connect naming method to connect to the database.</p>
<p>The following topics are covered here:</p>
<ul>
<li>
<p><a href="#CIHEFGAD">Connection syntax and parameters</a></p>
</li>
<li>
<p><a href="#CIHJGHEB">Using tnsnames or easy connect</a></p>
</li>
<li>
<p><a href="#CIHFAECD">Specifying the Oracle Database password in Pro*C/C++ for TimesTen Cache</a></p>
</li>
<li>
<p><a href="#CIHDEHED">Connecting as an externally identified user in Pro*C/C++</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
A TimesTen connection cannot be inherited from a parent process. If a process opens a database connection before creating (forking) a child process, the child must not use the connection. In Pro*C/C++, to avoid having a child process inadvertently inherit a connection from its parent, use <code dir="ltr">EXEC SQL COMMIT RELEASE</code> in the parent before creating the child.</div>
<a id="CIHEFGAD"></a>
<div id="TTCDV236" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Connection syntax and parameters</h4>
<p>TimesTen supports the following connection syntax:</p>
<pre dir="ltr">EXEC SQL CONNECT{:<span class="italic">user</span> IDENTIFIED BY :<span class="italic">pwd</span> | :<span class="italic">user_string</span>}
  [[AT{<span class="italic">dbname </span>|:<span class="italic">host_variable</span>}]USING :<span class="italic">connect_string</span>];
</pre>
<p>The parameters are described in <a href="#CIHBBIDC">Table 4-1</a>.</p>
<div id="TTCDV237" class="tblhruleformal">
<p class="titleintable"><a id="sthref242"></a><a id="CIHBBIDC"></a>Table 4-1 Connection parameters</p>
<table class="cellalignment4366" title="Connection parameters" summary="CONNECT parameters" dir="ltr">
<thead>
<tr class="cellalignment4360">
<th class="cellalignment4367" id="r1c1-t4">Parameter</th>
<th class="cellalignment4367" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr"><span class="codeinlineitalic">user</span></code></p>
</td>
<td class="cellalignment4368" headers="r2c1-t4 r1c2-t4">
<p>User name</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr"><span class="codeinlineitalic">pwd</span></code></p>
</td>
<td class="cellalignment4368" headers="r3c1-t4 r1c2-t4">
<p>Password</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr"><span class="codeinlineitalic">user_string</span></code></p>
</td>
<td class="cellalignment4368" headers="r4c1-t4 r1c2-t4">
<p>Alternative to separate <code dir="ltr"><span class="codeinlineitalic">user</span></code> and <code dir="ltr"><span class="codeinlineitalic">pwd</span></code> entries</p>
<p>This is a user name and password separated by a slash, such as <code dir="ltr">user1/pwd1</code>. After an &#34;<code dir="ltr">@</code>&#34; sign, you can also have a database identifier, instead of using <code dir="ltr"><span class="codeinlineitalic">dbname</span></code>, or a TNS name or easy connect string, instead of using <code dir="ltr"><span class="codeinlineitalic">connect_string</span></code>. See examples in the next section, <a href="#CIHJGHEB">&#34;Using tnsnames or easy connect&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr"><span class="codeinlineitalic">dbname</span></code></p>
</td>
<td class="cellalignment4368" headers="r5c1-t4 r1c2-t4">
<p>Database identifier declared in a previous <code dir="ltr">DECLARE DATABASE</code> statement</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r6c1-t4" headers="r1c1-t4">
<p><code dir="ltr"><span class="codeinlineitalic">host_variable</span></code></p>
</td>
<td class="cellalignment4368" headers="r6c1-t4 r1c2-t4">
<p>Variable whose value is a database identifier</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r7c1-t4" headers="r1c1-t4">
<p><code dir="ltr"><span class="codeinlineitalic">connect_string</span></code></p>
</td>
<td class="cellalignment4368" headers="r7c1-t4 r1c2-t4">
<p>Valid TNS name or easy connect string for a TimesTen database</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect3" -->
<a id="CIHJGHEB"></a>
<div id="TTCDV238" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Us<a id="sthref243"></a><a id="sthref244"></a><a id="sthref245"></a><a id="sthref246"></a>ing tnsnames or easy connect</h4>
<p>To connect to TimesTen from a Pro*C/C++ application, you must configure a TNS name or easy connect string for a TimesTen database. Perform the <code dir="ltr">tnsnames</code> or easy connect steps described under <a href="oci.htm#BABIBEJD">&#34;Connecting to a TimesTen database from OCI&#34;</a>.</p>
<p>From Pro*C/C++, you can use a host variable to specify the user name, password, and a TNS name. For example:</p>
<pre dir="ltr">EXEC SQL CONNECT :dbstring
</pre>
<p>Where <code dir="ltr">dbstring</code> is set to &#34;<code dir="ltr">user1/pwd1@my_tnsname</code>&#34;.</p>
<p>Alternatively, the host variable could specify the user name, password, and an easy connect string. For example, <code dir="ltr">dbstring</code> could be set to &#34;<code dir="ltr">user1/pwd1@localhost/ttclient:timesten_client</code>&#34;.</p>
<p>Or, if the <code dir="ltr">TWO_TASK</code> or <code dir="ltr">LOCAL</code> environment variable, as applicable for your operating system, is set to &#34;<code dir="ltr">my_tnsname</code>&#34; or &#34;<code dir="ltr">localhost/ttclient:timesten_client</code>&#34;, you could connect as in the following example:</p>
<pre dir="ltr">EXEC SQL CONNECT :user1 IDENTIFIED BY :pwd1
</pre></div>
<!-- class="sect3" -->
<a id="CIHFAECD"></a>
<div id="TTCDV239" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Spec<a id="sthref247"></a><a id="sthref248"></a>ifying the Oracle Database password in Pro*C/C++ for TimesTen Cache</h4>
<p>To use TimesTen Cache, there must be a cache user in the TimesTen database with the same name as an Oracle Database user who can select from and update the cached Oracle Database tables. This Oracle Database user, for example, can be the cache administration user or a schema user. The password of the TimesTen cache user can be different from the password of the Oracle Database user with the same name. See <a class="olink TTCAC167" href="../TTCAC/prereqs.htm#TTCAC167">&#34;Setting Up a Caching Infrastructure&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span> for details.</p>
<p>For use of Pro*C/C++ with TimesTen Cache, TimesTen allows you to pass the Oracle Database user&#39;s password through Pro*C/C++ by appending it to the password field in an <code dir="ltr">EXEC SQL CONNECT</code> call when you log in to TimesTen. Use the attribute <code dir="ltr">OraclePWD</code> in the connect string, such as in the following example:</p>
<pre dir="ltr">text *cacheuser = (text *)&#34;cacheuser1&#34;;
text *cachepwds = (text *)&#34;ttpwd;OraclePWD=orclpwd&#34;;
text *dbname = (text *)&#34;tt_tnsname&#34;;
....
EXEC SQL CONNECT :cacheuser IDENTIFIED BY :cachepwds AT :dbname
</pre>
<p>You must always specify <code dir="ltr">OraclePWD</code>, even if the Oracle Database user&#39;s password is the same as the TimesTen user&#39;s password. Furthermore, in the circumstance of specifying an Oracle Database password for TimesTen Cache, you must use a form of <code dir="ltr">EXEC SQL CONNECT</code> that specifies the password as a separate host variable. In this example, <code dir="ltr">cacheuser1</code> is the name of the TimesTen cache user as well as the name of the Oracle Database user who can access the cached Oracle Database tables, <code dir="ltr">ttpwd</code> is the password of the TimesTen cache user, <code dir="ltr">orclpwd</code> is the password of the Oracle Database user, and <code dir="ltr">tt_tnsname</code> is the TNS name of the TimesTen database being connected to. The Oracle database is specified through the TimesTen <code dir="ltr">OracleNetServiceName</code> general connection attribute in the <code dir="ltr">sys.odbc.ini</code> or user <code dir="ltr">odbc.ini</code> file.</p>
<p>Alternatively, instead of using the <code dir="ltr">AT</code> clause with a TNS name, you could use the <code dir="ltr">TWO_TASK</code> or <code dir="ltr">LOCAL</code> environment variable, as discussed in <a href="oci.htm#BABIBEJD">&#34;Connecting to a TimesTen database from OCI&#34;</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDEHED"></a>
<div id="TTCDV511" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Con<a id="sthref249"></a><a id="sthref250"></a><a id="sthref251"></a><a id="sthref252"></a>necting as an externally identified user in Pro*C/C++</h4>
<p>You can connect through Pro*C/C++ as an externally identified user (external user) by specifying the user name in brackets, such as &#34;<code dir="ltr">[myadmin]</code>&#34;, and the password as an empty string, &#34;&#34;.</p>
<p>In particular, this is useful in connecting as the instance administrator, which in TimesTen is always an external user.</p>
<p>Externally identified users can be used for direct mode or for client/server connections to a database on the local host, but not for client/server connections to a database on a remote host.</p>
<p>Consider the following example.</p>
<pre dir="ltr">text *instanceadmin = (text *)&#34;[myadmin]&#34;;
text *instanceadminpwd = (text *)&#34;&#34;;
text *dbname = (text *)&#34;tt_tnsname&#34;;
....
EXEC SQL CONNECT :instanceadmin IDENTIFIED BY :instanceadminpwd AT :dbname
</pre>
<p>This functionality uses OCI proxy syntax. You can refer to the discussion of client access through a proxy in <a class="olink LNOCI13341" href="../LNOCI/oci02bas.htm#LNOCI13341"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHBBFIA"></a>
<div id="TTCDV240" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Er<a id="sthref253"></a><a id="sthref254"></a>ror reporting and handling</h3>
<p>Be aware of the following regarding error conditions and error reporting:</p>
<ul>
<li>
<p>Errors under TimesTen Pro*C/C++ applications return Oracle Database error codes. TimesTen attempts to report the same error code as Oracle Database would under similar conditions. The error messages may come from either the TimesTen catalog or the Oracle Database catalog. Some error messages may indicate the accompanying TimesTen error code if appropriate. Pro*C/C++ applications that rely on parsing error codes should be checked.</p>
</li>
<li>
<p>TimesTen supports the <code dir="ltr">WHENEVER SQLERROR</code> directive, to go to an error handler if an error occurs, and the <code dir="ltr">WHENEVER NOT FOUND</code> directive, to go to a handling section if a &#34;no data found&#34; condition occurs. TimesTen does <span class="italic">not</span> support the <code dir="ltr">WHENEVER SQLWARNING</code> directive.</p>
<p>Examples:</p>
<pre dir="ltr">EXEC SQL WHENEVER NOT FOUND GOTO close_cursor;
...
EXEC SQL WHENEVER SQLERROR GOTO error_handler;
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHBIDBA"></a>
<div id="TTCDV241" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Pro*C/C++ de<a id="sthref255"></a>mo programs</h3>
<p>TimesTen ships Pro*C/C++ demo programs. They are in the <code dir="ltr">quickstart/sample_code/proc</code> directory. The README file in the directory explains how to compile and run the demos.</p>
<p>Refer to the Quick Start welcome page at <code dir="ltr"><span class="codeinlineitalic">install_dir</span></code><code dir="ltr">/quickstart.html</code> for information.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHIEBDH"></a>
<div id="TTCDV537" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Additional features of TimesTen Pro*C/C++</h2>
<p>This section covers additional features you can use with Pro*C/C++ in TimesTen:</p>
<ul>
<li>
<p><a href="#CIHJEBJF">Associative array bindings in TimesTen Pro*C/C++</a></p>
</li>
<li>
<p><a href="#CIHGCAFJ">LOBs in TimesTen Pro*C/C++</a></p>
</li>
</ul>
<a id="CIHJEBJF"></a>
<div id="TTCDV538" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">As<a id="sthref256"></a><a id="sthref257"></a><a id="sthref258"></a>sociative array bindings in TimesTen Pro*C/C++</h3>
<p>As discussed in <a href="oci.htm#BABGGIFF">&#34;Associative array bindings in TimesTen OCI&#34;</a>, associative arrays, formerly known as index-by tables or PL/SQL tables, are supported as <code dir="ltr">IN</code>, <code dir="ltr">OUT</code>, or <code dir="ltr">IN OUT</code> bind parameters in TimesTen PL/SQL. See that section for additional information and limitations.</p>
<p>You can pass associative arrays between PL/SQL blocks and Pro*C/C++ applications as well as OCI applications. They can be indexed by a PL/SQL variable of type <code dir="ltr">BINARY_INTEGER</code> or <code dir="ltr">PLS_INTEGER</code>.</p>
<p>Normally, the entire host array is passed to PL/SQL, but you can use the Pro*C/C++ <code dir="ltr">ARRAYLEN</code> statement to specify a smaller array dimension.</p>
<p>For more information, refer to &#34;PL/SQL Tables&#34;, &#34;Host Arrays&#34;, and &#34;ARRAYLEN Statement&#34; under &#34;Embedded PL/SQL&#34; in <a class="olink LNPCC" href="../LNPCC/toc.htm"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a>.</p>
<div id="TTCDV539" class="example">
<p class="titleinexample"><a id="sthref259"></a>Example 4-1 Binding to an associative array from Pro*C/C++</p>
<p>This code excerpt shows the array <code dir="ltr">salary[]</code> being bound from Pro*C/C++ into the associative array <code dir="ltr">num_tab</code> in PL/SQL.</p>
<pre dir="ltr">...
float salary[100];
/* populate the host array */
EXEC SQL EXECUTE
  DECLARE
    TYPE NumTabTyp IS TABLE OF REAL
                   INDEX BY BINARY_INTEGER;
    median_salary REAL;
    n BINARY_INTEGER;
...
  FUNCTION median (num_tab NumTabTyp, n INTEGER)
    RETURN REAL IS
  BEGIN
    -- compute median
  END;
  BEGIN
    n := 100;
    median_salary := median(:salary, n);
    ...
  END;
END-EXEC;
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHGCAFJ"></a>
<div id="TTCDV540" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">LO<a id="sthref260"></a>Bs in TimesTen Pro*C/C++</h3>
<p>TimesTen supports LOBs (large objects). This includes CLOBs (character LOBs), NCLOBs (national character LOBs), and BLOBs (binary LOBs).</p>
<p>See <a href="writing_app.htm#BABDBEGH">&#34;Working with LOBs&#34;</a>. That section is ODBC-oriented but also provides a general overview of LOBs, differences between TimesTen and Oracle Database LOBs, and LOB programming interfaces. Also see <a href="oci.htm#BABIIJDH">&#34;LOBs in TimesTen OCI&#34;</a> for information about LOB locators, temporary LOBs, using the simple data interface or LOB locator interface in OCI, and additional OCI LOB features.</p>
<p>This section focuses on key Pro*C/C++ LOB features and TimesTen-specific support and restrictions.</p>
<p>See <a class="olink TTSQL481" href="../TTSQL/types.htm#TTSQL481">&#34;LOB data types&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for additional information about LOBs in TimesTen.</p>
<p>For complete information about LOBs and how to use them in Pro*C/C++, refer to <a class="olink LNPCC016" href="../LNPCC/pc_16lob.htm#LNPCC016">&#34;LOBs&#34;</a> in <span class="italic">Pro*C/C++ Programmer&#39;s Guide</span>, keeping in mind that TimesTen does not support BFILEs, SecureFiles, array reads and writes for LOBs, or callback functions for LOBs. In particular, see &#34;How to Use LOBs in Your Program&#34; within that chapter.</p>
<p>The following topics are covered for Pro*C/C++:</p>
<ul>
<li>
<p><a href="#CIHDFDHF">Using the LOB simple data interface in Pro*C/C++</a></p>
</li>
<li>
<p><a href="#CIHDEGDI">Using the LOB locator interface in Pro*C/C++</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Important:</p>
As indicated in the OCI chapter, in TimesTen a LOB used in an application does not remain valid past the end of the transaction.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
The LOB piecewise data interface is not applicable to OCI or Pro*C/C++ applications in TimesTen. (You can, however, manipulate LOB data in pieces through features of the LOB locator interface.)</div>
<a id="CIHDFDHF"></a>
<div id="TTCDV541" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using the LOB simple data interface in Pro*C/C++</h4>
<p>The simple data interface enables applications to manipulate LOB data similarly to how they would manipulate other types of scalar data, such as by using <code dir="ltr">EXEC SQL INSERT</code> and <code dir="ltr">EXEC SQL SELECT</code>. The application can use a LOB type that is compatible with the corresponding variable type.</p>
<p>An application can use the <code dir="ltr">EMPTY_BLOB()</code> or <code dir="ltr">EMPTY_CLOB()</code> function, as appropriate, to initialize a persistent LOB. This is similar to using <code dir="ltr">ALLOCATE</code> in the LOB locator interface, discussed next. Consider the following tables:</p>
<pre dir="ltr">EXEC SQL CREATE TABLE lob_table ( a_blob BLOB, a_clob CLOB );
...
EXEC SQL INSERT INTO lob_table (a_blob, a_clob) 
                VALUES (EMPTY_BLOB(), EMPTY_CLOB());
...
EXEC SQL CREATE TABLE data_table
         ( name VARCHAR2(30), length NUMBER(10), bincol BLOB, charcol CLOB );
</pre>
<p>The following selects LOB data from <code dir="ltr">data_table</code> into <code dir="ltr">myblob</code> and <code dir="ltr">myclob</code>, then inserts the LOB data into <code dir="ltr">lob_table</code>.</p>
<pre dir="ltr">...
OCIBlobLocator *myblob;
OCIClobLocator *myclob;
...
EXEC SQL SELECT bincol, charcol INTO :myblob, :myclob FROM data_table 
                WHERE name = :key;
...
// Put data into lob_table.
...
EXEC SQL INSERT INTO lob_table (a_blob, a_clob) VALUES (:myblob, :myclob);
</pre>
<p>To use an NCLOB, declare the variable as follows:</p>
<pre dir="ltr">OCIClobLocator CHARACTER SET IS NCHAR_CS *mynclob;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The simple data interface, through OCI or Pro*C/C++, limits bind sizes to 64 KB.</div>
</div>
<!-- class="sect3" -->
<a id="CIHDEGDI"></a>
<div id="TTCDV542" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using the LOB locator interface in Pro*C/C++</h4>
<p>You can use the Pro*C/C++ LOB locator interface to work with either LOBs from the database or temporary LOBs, either piece-by-piece or in whole chunks.</p>
<p>Refer to <a class="olink LNPCC03017" href="../LNPCC/pc_16lob.htm#LNPCC03017">&#34;LOB Statements&#34;</a> in <span class="italic">Pro*C/C++ Programmer&#39;s Guide</span> for detailed information about Pro*C/C++ statements for LOBs, noting that TimesTen does not support features specifically intended for BFILEs, SecureFiles, array reads and writes for LOBs, or callback functions for LOBs.</p>
<p>Refer to the <code dir="ltr">lobdemo1.pc</code> example in <a class="olink LNPCC016" href="../LNPCC/pc_16lob.htm#LNPCC016">&#34;LOBs&#34;</a> in <span class="italic">Pro*C/C++ Programmer&#39;s Guide</span> for an end-to-end example.</p>
<p>Also see <a href="oci.htm#BABJJGDJ">&#34;Using the LOB locator interface in OCI&#34;</a> for related information and usage notes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If Pro*C/C++ syntax does not provide enough functionality to fully specify what you want to accomplish for any operation, you can use the corresponding OCI function as an alternative.</div>
<div id="TTCDV543" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref261"></a>
<h5 class="sect4">Create a temporary LOB in Pro*C/C++</h5>
<p>A Pro*C/C++ application can create a temporary LOB by using the <code dir="ltr">CREATE TEMPORARY</code> embedded SQL feature, after first using the <code dir="ltr">ALLOCATE</code> feature to allocate the locator. Use <code dir="ltr">FREE</code> to free the allocation for the locator and <code dir="ltr">FREE TEMPORARY</code> to free the temporary LOB itself. This is shown below.</p>
<p>Also see <a href="oci.htm#BABCHGII">&#34;Create a temporary LOB in OCI&#34;</a>.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
In TimesTen, creation of a temporary LOB results in creation of a database transaction if one is not already in progress. To avoid error conditions, you must execute a commit or rollback to close the transaction.</div>
<pre dir="ltr">OCIClobLocator *tempclob;
EXEC SQL ALLOCATE :tempclob;
EXEC SQL LOB CREATE TEMPORARY :tempclob;
...
// (Manipulate LOB as desired.)
...
EXEC SQL FREE TEMPORARY :tempclob;
EXEC SQL FREE :tempclob;
</pre>
<p>Alternatively, if you want to specify the LOB character set (here <code dir="ltr">NCHAR</code>), you can use the corresponding OCI function:</p>
<pre dir="ltr">status = OCILobCreateTemporary(svc, err, tempclob, OCI_DEFAULT, SQLCS_NCHAR,
         OCI_TEMP_CLOB, TRUE, OCI_DURATION_TRANSACTION); 
</pre></div>
<!-- class="sect4" -->
<a id="CIHCIBCH"></a>
<div id="TTCDV544" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Access the locator of a persistent LOB in Pro*C/C++</h5>
<p>An application typically accesses a LOB from the database by using a SQL statement to obtain a LOB locator, then passing the locator to an appropriate API function.</p>
<p>Also see <a href="oci.htm#BABBHGGE">&#34;Access the locator of a persistent LOB in OCI&#34;</a>.</p>
<p>The following excerpts are from the previously mentioned <code dir="ltr">lobdemo1.pc</code> example in <a class="olink LNPCC016" href="../LNPCC/pc_16lob.htm#LNPCC016">&#34;LOBs&#34;</a> in <span class="italic">Pro*C/C++ Programmer&#39;s Guide</span>. The example uses a CLOB <code dir="ltr">license_txt</code> and table <code dir="ltr">license_table</code> whose columns are social security number, name, and text summarizing driving offenses (a <code dir="ltr">CLOB</code> column).</p>
<pre dir="ltr">OCIClobLocator *license_txt;
...
EXEC SQL ALLOCATE :license_txt;
...
EXEC SQL SELECT name, txt_summary INTO :name, :license_txt FROM license_table
                WHERE sss = :sss;
</pre></div>
<!-- class="sect4" -->
<a id="CIHGJCCI"></a>
<div id="TTCDV545" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Read and write LOB data using the Pro*C/C++ LOB locator interface</h5>
<p>A Pro*C/C++ application can use <code dir="ltr">LOB OPEN</code> and <code dir="ltr">LOB CLOSE</code> to open and close a LOB, <code dir="ltr">LOB READ</code> to read LOB data, <code dir="ltr">LOB WRITE</code> or <code dir="ltr">LOB WRITE APPEND</code> to write or append LOB data, <code dir="ltr">LOB DESCRIBE</code> to obtain information about a LOB, and various other Pro*C/C++ features to perform a variety of other actions. All the Pro*C/C++ LOB locator interface features are covered in detail in <a class="olink LNPCC016" href="../LNPCC/pc_16lob.htm#LNPCC016">&#34;LOBs&#34;</a> in <span class="italic">Pro*C/C++ Programmer&#39;s Guide</span>.</p>
<p>To write data, use <code dir="ltr">LOB WRITE ONE</code> to write the data in a single chunk. TimesTen does not support <code dir="ltr">LOB WRITE FIRST</code>, <code dir="ltr">LOB WRITE NEXT</code>, or <code dir="ltr">LOB WRITE LAST</code> (features of the piecewise data interface).</p>
<p>Also see <a href="oci.htm#BABEJDFC">&#34;Read and write LOB data using the OCI LOB locator interface&#34;</a>.</p>
<p>Here is an example of an <code dir="ltr">EXEC SQL LOB READ</code> statement:</p>
<pre dir="ltr">EXEC SQL LOB READ :amt FROM :blob INTO :buffer;
</pre>
<p>Refer to &#34;Read a File, WRITE a BLOB Example&#34; in <a class="olink LNPCC016" href="../LNPCC/pc_16lob.htm#LNPCC016">&#34;LOBs&#34;</a> in <span class="italic">Pro*C/C++ Programmer&#39;s Guide</span> for additional information.</p>
<p>Here is an example of an <code dir="ltr">EXEC SQL LOB WRITE</code> statement (writing the LOB data in one chunk):</p>
<pre dir="ltr">EXEC SQL LOB WRITE ONE :amt FROM :buffer INTO :blob;
</pre>
<p>Refer to &#34;READ a BLOB, Write a File Example&#34; in <a class="olink LNPCC016" href="../LNPCC/pc_16lob.htm#LNPCC016">&#34;LOBs&#34;</a> in <span class="italic">Pro*C/C++ Programmer&#39;s Guide</span> for additional information.</p>
<p>Here is an example of an <code dir="ltr">EXEC SQL LOB WRITE APPEND</code> statement:</p>
<pre dir="ltr">EXEC SQL LOB WRITE APPEND :amt FROM :writebuf INTO :blob;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Opening a LOB is similar conceptually, but not technically, to opening a file. Opening a LOB is more like a hint regarding resources to be required.
<p>Be aware that a LOB being accessed by <code dir="ltr">OCILobRead()</code>, <code dir="ltr">OCILobWrite()</code>, or equivalent functionality is opened automatically as necessary.</p>
</div>
<div id="TTCDV546" class="example">
<p class="titleinexample"><a id="sthref262"></a>Example 4-2 Write a LOB using Pro*C/C++ LOB locator interface</p>
<p>The following excerpt is from the previously mentioned <code dir="ltr">lobdemo1.pc</code> example in <a class="olink LNPCC016" href="../LNPCC/pc_16lob.htm#LNPCC016">&#34;LOBs&#34;</a> in <span class="italic">Pro*C/C++ Programmer&#39;s Guide</span>.</p>
<pre dir="ltr">...
OCIClobLocator *a_clob;
char *charbuf;
ub4 ClobLen, WriteAmt;
int CharLen = strlen(charbuf);
int NewCharbufLen = CharLen + DATELENGTH + 4;
varchar *NewCharbuf;
NewCharbuf = (varchar *)malloc(2 + NewCharbufLen);
NewCharbuf-&gt;arr[0] = &#39;\n&#39;;
NewCharbuf-&gt;arr[1] = &#39;\0&#39;;
strcat((char *)NewCharbuf-&gt;arr, charbuf);
NewCharbuf-&gt;arr[CharLen + 1] = &#39;\0&#39;;
strcat((char *)NewCharbuf-&gt;arr, curdate);
NewCharbuf-&gt;len = NewCharbufLen;
EXEC SQL LOB DESCRIBE :a_clob GET LENGTH INTO :ClobLen;
WriteAmt = NewCharbufLen;
EXEC SQL LOB WRITE ONE :WriteAmt FROM :NewCharbuf WITH LENGTH :NewCharbufLen 
                       INTO :a_clob;
...
</pre></div>
<!-- class="example" -->
<div id="TTCDV559" class="example">
<p class="titleinexample"><a id="sthref263"></a>Example 4-3 Write and append to a LOB using Pro*C/C++ LOB locator interface</p>
<p>This example, like the preceding one, uses <code dir="ltr">LOB WRITE ONE</code>. Then it also uses <code dir="ltr">LOB WRITE APPEND</code> to append additional data. It writes or appends to the BLOB in 1 K chunks up to <code dir="ltr">MAX_CHUNKS</code>.</p>
<pre dir="ltr">...
 EXEC SQL select b into :blob from t where pk = 1 for update;
 EXEC SQL LOB OPEN :blob READ WRITE;
 
 // Write/append to the BLOB
 for (i = 0; i &lt; MAX_CHUNKS; i++) {
   if (i==0) { // FIRST CHUNK
     /*
     Write the first piece
     */
     EXEC SQL LOB WRITE ONE :amt FROM :writebuf INTO :blob;
 
   }
   else { // All Other Chunks
     /*
     At this point, APPEND all the next pieces
     */
     EXEC SQL LOB WRITE APPEND :amt FROM :writebuf INTO :blob ;
   }
   ...
 }
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHJGECC"></a>
<div id="TTCDV242" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">TimesTen Pro*C/C++ Precompiler options</h2>
<p>This section discusses Pro*C/C++ Precompiler option support by TimesTen.</p>
<div id="TTCDV243" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref264"></a>
<h3 class="sect2">Pre<a id="sthref265"></a>compiler option support</h3>
<p><a href="#BABIHDJG">Table 4-2</a> describes TimesTen <a id="sthref266"></a>Pro*C/C++ Precompiler option support.</p>
<div id="TTCDV244" class="tblhruleformal">
<p class="titleintable"><a id="sthref267"></a><a id="BABIHDJG"></a>Table 4-2 TimesTen Pro*C/C++ Precompiler option support</p>
<table class="cellalignment4366" title="TimesTen Pro*C/C++ Precompiler option support" summary="precompiler option support" dir="ltr">
<thead>
<tr class="cellalignment4360">
<th class="cellalignment4367" id="r1c1-t11">Option</th>
<th class="cellalignment4367" id="r1c2-t11">Notes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">AUTO_CONNECT</code></p>
</td>
<td class="cellalignment4368" headers="r2c1-t11 r1c2-t11">
<p>Supported value: <code dir="ltr">NO</code> (default)</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">CHAR_MAP</code></p>
</td>
<td class="cellalignment4368" headers="r3c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r4c1-t11" headers="r1c1-t11">
<p><code dir="ltr">CINCR</code></p>
</td>
<td class="cellalignment4368" headers="r4c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Setting has no effect because TimesTen supports only <code dir="ltr">CPOOL=NO</code>.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r5c1-t11" headers="r1c1-t11">
<p><code dir="ltr">CLOSE_ON_COMMIT</code></p>
</td>
<td class="cellalignment4368" headers="r5c1-t11 r1c2-t11">
<p>Supported value: <code dir="ltr">YES</code></p>
<p>The Oracle Database default value of <code dir="ltr">NO</code> is overridden by TimesTen.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r6c1-t11" headers="r1c1-t11">
<p><code dir="ltr">CMAX</code></p>
</td>
<td class="cellalignment4368" headers="r6c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Setting has no effect because TimesTen supports only <code dir="ltr">CPOOL=NO</code>.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r7c1-t11" headers="r1c1-t11">
<p><code dir="ltr">CMIN</code></p>
</td>
<td class="cellalignment4368" headers="r7c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Setting has no effect because TimesTen supports only <code dir="ltr">CPOOL=NO</code>.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r8c1-t11" headers="r1c1-t11">
<p><code dir="ltr">CNOWAIT</code></p>
</td>
<td class="cellalignment4368" headers="r8c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Setting has no effect because TimesTen supports only <code dir="ltr">CPOOL=NO</code>.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r9c1-t11" headers="r1c1-t11">
<p><code dir="ltr">CODE</code></p>
</td>
<td class="cellalignment4368" headers="r9c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r10c1-t11" headers="r1c1-t11">
<p><code dir="ltr">COMP_CHARSET</code></p>
</td>
<td class="cellalignment4368" headers="r10c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r11c1-t11" headers="r1c1-t11">
<p><code dir="ltr">CONFIG</code></p>
</td>
<td class="cellalignment4368" headers="r11c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r12c1-t11" headers="r1c1-t11">
<p><code dir="ltr">CPOOL</code></p>
</td>
<td class="cellalignment4368" headers="r12c1-t11 r1c2-t11">
<p>Supported value: <code dir="ltr">NO</code> (default)</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r13c1-t11" headers="r1c1-t11">
<p><code dir="ltr">CPP_SUFFIX</code></p>
</td>
<td class="cellalignment4368" headers="r13c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r14c1-t11" headers="r1c1-t11">
<p><code dir="ltr">CTIMEOUT</code></p>
</td>
<td class="cellalignment4368" headers="r14c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Setting has no effect because TimesTen supports only <code dir="ltr">CPOOL=NO</code>.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r15c1-t11" headers="r1c1-t11">
<p><code dir="ltr">DB2_ARRAY</code></p>
</td>
<td class="cellalignment4368" headers="r15c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r16c1-t11" headers="r1c1-t11">
<p><code dir="ltr">DBMS</code></p>
</td>
<td class="cellalignment4368" headers="r16c1-t11 r1c2-t11">
<p>Supported value: <code dir="ltr">NATIVE</code> (default)</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r17c1-t11" headers="r1c1-t11">
<p><code dir="ltr">DEF_SQLCODE</code></p>
</td>
<td class="cellalignment4368" headers="r17c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r18c1-t11" headers="r1c1-t11">
<p><code dir="ltr">DEFINE</code></p>
</td>
<td class="cellalignment4368" headers="r18c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r19c1-t11" headers="r1c1-t11">
<p><code dir="ltr">DURATION</code></p>
</td>
<td class="cellalignment4368" headers="r19c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Setting has no effect because TimesTen does not support objects.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r20c1-t11" headers="r1c1-t11">
<p><code dir="ltr">DYNAMIC</code></p>
</td>
<td class="cellalignment4368" headers="r20c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r21c1-t11" headers="r1c1-t11">
<p><code dir="ltr">ERRORS</code></p>
</td>
<td class="cellalignment4368" headers="r21c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r22c1-t11" headers="r1c1-t11">
<p><code dir="ltr">ERRTYPE</code></p>
</td>
<td class="cellalignment4368" headers="r22c1-t11 r1c2-t11">
<p>Not supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r23c1-t11" headers="r1c1-t11">
<p><code dir="ltr">EVENTS</code></p>
</td>
<td class="cellalignment4368" headers="r23c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Both values allowed, but TimesTen OCI does not support Advanced Queuing.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r24c1-t11" headers="r1c1-t11">
<p><code dir="ltr">FIPS</code></p>
</td>
<td class="cellalignment4368" headers="r24c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r25c1-t11" headers="r1c1-t11">
<p><code dir="ltr">HEADER</code></p>
</td>
<td class="cellalignment4368" headers="r25c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r26c1-t11" headers="r1c1-t11">
<p><code dir="ltr">HOLD_CURSOR</code></p>
</td>
<td class="cellalignment4368" headers="r26c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r27c1-t11" headers="r1c1-t11">
<p><code dir="ltr">IMPLICIT_SVPT</code></p>
</td>
<td class="cellalignment4368" headers="r27c1-t11 r1c2-t11">
<p>Supported value: <code dir="ltr">NO</code> (default)</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r28c1-t11" headers="r1c1-t11">
<p><code dir="ltr">INAME</code></p>
</td>
<td class="cellalignment4368" headers="r28c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r29c1-t11" headers="r1c1-t11">
<p><code dir="ltr">INCLUDE</code></p>
</td>
<td class="cellalignment4368" headers="r29c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r30c1-t11" headers="r1c1-t11">
<p><code dir="ltr">INTYPE</code></p>
</td>
<td class="cellalignment4368" headers="r30c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r31c1-t11" headers="r1c1-t11">
<p><code dir="ltr">LINES</code></p>
</td>
<td class="cellalignment4368" headers="r31c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r32c1-t11" headers="r1c1-t11">
<p><code dir="ltr">LNAME</code></p>
</td>
<td class="cellalignment4368" headers="r32c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r33c1-t11" headers="r1c1-t11">
<p><code dir="ltr">LTYPE</code></p>
</td>
<td class="cellalignment4368" headers="r33c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r34c1-t11" headers="r1c1-t11">
<p><code dir="ltr">MAX_ROW_INSERT</code></p>
</td>
<td class="cellalignment4368" headers="r34c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r35c1-t11" headers="r1c1-t11">
<p><code dir="ltr">MAXLITERAL</code></p>
</td>
<td class="cellalignment4368" headers="r35c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r36c1-t11" headers="r1c1-t11">
<p><code dir="ltr">MAXOPENCURSORS</code></p>
</td>
<td class="cellalignment4368" headers="r36c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r37c1-t11" headers="r1c1-t11">
<p><code dir="ltr">MODE</code></p>
</td>
<td class="cellalignment4368" headers="r37c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r38c1-t11" headers="r1c1-t11">
<p><code dir="ltr">NATIVE_TYPES</code></p>
</td>
<td class="cellalignment4368" headers="r38c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r39c1-t11" headers="r1c1-t11">
<p><code dir="ltr">NLS_CHAR</code></p>
</td>
<td class="cellalignment4368" headers="r39c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r40c1-t11" headers="r1c1-t11">
<p><code dir="ltr">NLS_LOCAL</code></p>
</td>
<td class="cellalignment4368" headers="r40c1-t11 r1c2-t11">
<p>Supported value: <code dir="ltr">NO</code> (default)</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r41c1-t11" headers="r1c1-t11">
<p><code dir="ltr">OBJECTS</code></p>
</td>
<td class="cellalignment4368" headers="r41c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Setting has no effect because TimesTen does not support objects.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r42c1-t11" headers="r1c1-t11">
<p><code dir="ltr">ONAME</code></p>
</td>
<td class="cellalignment4368" headers="r42c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r43c1-t11" headers="r1c1-t11">
<p><code dir="ltr">ORACA</code></p>
</td>
<td class="cellalignment4368" headers="r43c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r44c1-t11" headers="r1c1-t11">
<p><code dir="ltr">OUTLINE</code></p>
</td>
<td class="cellalignment4368" headers="r44c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>All values are allowed, but TimesTen does not support Oracle Database optimization.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r45c1-t11" headers="r1c1-t11">
<p><code dir="ltr">OUTLNPREFIX</code></p>
</td>
<td class="cellalignment4368" headers="r45c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Both values are allowed, but TimesTen does not support Oracle Database optimization.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r46c1-t11" headers="r1c1-t11">
<p><code dir="ltr">PAGELEN</code></p>
</td>
<td class="cellalignment4368" headers="r46c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r47c1-t11" headers="r1c1-t11">
<p><code dir="ltr">PARSE</code></p>
</td>
<td class="cellalignment4368" headers="r47c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r48c1-t11" headers="r1c1-t11">
<p><code dir="ltr">PREFETCH</code></p>
</td>
<td class="cellalignment4368" headers="r48c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r49c1-t11" headers="r1c1-t11">
<p><code dir="ltr">RELEASE_CURSOR</code></p>
</td>
<td class="cellalignment4368" headers="r49c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r50c1-t11" headers="r1c1-t11">
<p><code dir="ltr">RUNOUTLINE</code></p>
</td>
<td class="cellalignment4368" headers="r50c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Both values (<code dir="ltr">yes</code>|<code dir="ltr">no</code>) are allowed but ignored.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r51c1-t11" headers="r1c1-t11">
<p><code dir="ltr">SELECT_ERROR</code></p>
</td>
<td class="cellalignment4368" headers="r51c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r52c1-t11" headers="r1c1-t11">
<p><code dir="ltr">SQLCHECK</code></p>
</td>
<td class="cellalignment4368" headers="r52c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Any of the <code dir="ltr">SQLCHECK</code> settings is allowed, but TimesTen does not support semantic checking during precompilation.</p>
<p>Whenever a Pro*C/C++ application uses PL/SQL, Pro*C/C++ acts as though the <code dir="ltr">SQLCHECK</code> setting is <code dir="ltr">SEMANTICS</code>.</p>
<p><span class="bold">Important</span>: A setting of <code dir="ltr">SEMANTICS</code> (or <code dir="ltr">FULL</code>, which is synonymous) always results in a connection to the database, even though precompilation semantic checking is not performed.</p>
<p>See <a href="#CIHFEDDI">&#34;Semantic checking restrictions&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r53c1-t11" headers="r1c1-t11">
<p><code dir="ltr">STMT_CACHE</code></p>
</td>
<td class="cellalignment4368" headers="r53c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r54c1-t11" headers="r1c1-t11">
<p><code dir="ltr">SYS_INCLUDE</code></p>
</td>
<td class="cellalignment4368" headers="r54c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r55c1-t11" headers="r1c1-t11">
<p><code dir="ltr">THREADS</code></p>
</td>
<td class="cellalignment4368" headers="r55c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r56c1-t11" headers="r1c1-t11">
<p><code dir="ltr">TYPE_CODE</code></p>
</td>
<td class="cellalignment4368" headers="r56c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r57c1-t11" headers="r1c1-t11">
<p><code dir="ltr">UNSAFE_NULL</code></p>
</td>
<td class="cellalignment4368" headers="r57c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r58c1-t11" headers="r1c1-t11">
<p><code dir="ltr">USERID</code></p>
</td>
<td class="cellalignment4368" headers="r58c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r59c1-t11" headers="r1c1-t11">
<p><code dir="ltr">UTF16_CHARSET</code></p>
</td>
<td class="cellalignment4368" headers="r59c1-t11 r1c2-t11">
<p>Supported value: <code dir="ltr">NCHAR_CHARSET</code></p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r60c1-t11" headers="r1c1-t11">
<p><code dir="ltr">VARCHAR</code></p>
</td>
<td class="cellalignment4368" headers="r60c1-t11 r1c2-t11">
<p>Supported</p>
</td>
</tr>
<tr class="cellalignment4360">
<td class="cellalignment4368" id="r61c1-t11" headers="r1c1-t11">
<p><code dir="ltr">VERSION</code></p>
</td>
<td class="cellalignment4368" headers="r61c1-t11 r1c2-t11">
<p>Not applicable</p>
<p>Setting has no effect because TimesTen does not support objects.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
TimesTen does not support the default value for <code dir="ltr">CLOSE_ON_COMMIT</code>. TimesTen supports only <code dir="ltr">CLOSE_ON_COMMIT=YES</code>.</div>
</div>
<!-- class="sect2" -->
<div id="TTCDV245" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref268"></a>
<h3 class="sect2">Set<a id="sthref269"></a>ting precompiler options</h3>
<p>You can set precompiler options in the following ways.</p>
<ul>
<li>
<p>At compile time, either in the configuration file <code dir="ltr">pcscfg.cfg</code> or on the Pro*C/C++ command line</p>
<p>A setting on the command line takes precedence over a setting in the configuration file.</p>
</li>
<li>
<p>At runtime through the <code dir="ltr">EXEC ORACLE OPTION</code> command</p>
<p>A runtime setting takes precedence over a compile-time setting.</p>
</li>
</ul>
<p>For example, the following shows portions of the configuration file that ships with TimesTen.</p>
<pre dir="ltr">ltype=short
parse=full
close_on_commit=yes
...
</pre>
<p>The following command line would override the <code dir="ltr">ltype=short</code> setting from the configuration file:</p>
<pre dir="ltr">% proc ltype=long ... iname=sample.pc
</pre>
<p>The following runtime command would override the <code dir="ltr">ltype=long</code> setting from the command line:</p>
<pre dir="ltr">EXEC ORACLE OPTION LTYPE=NONE;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4359">
<tr>
<td class="cellalignment4368">
<table class="cellalignment4364">
<tr>
<td class="cellalignment4363"><a href="oci.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4363"><a href="xla_event.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4370">
<table class="cellalignment4362">
<tr>
<td class="cellalignment4363"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4363"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4363"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4363"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4363"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4363"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>