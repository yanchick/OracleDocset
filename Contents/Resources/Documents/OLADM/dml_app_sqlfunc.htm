<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79274"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/OLAP_TABLE%20SQL%20Functions"></a><title>OLAP_TABLE SQL Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1079"/>
<meta name="dcterms.created" content="2016-04-19T12:44:11Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP DML Reference"/>
<meta name="dcterms.identifier" content="E17673-12"/>
<meta name="dcterms.isVersionOf" content="OLADM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="dml_commands_2.htm" title="Previous" type="text/html"/>
<link rel="Next" href="dml_app_dbms_aw.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17673-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/19</span> <!-- End Header -->
<div id="OLADM930" class="appendix"><a id="CIHBDHCE"></a>
<h1 class="appendix"><span class="secnum">A</span> OLAP_TABLE SQL Functions</h1>
<p>This appendix contains reference documentation for the following SQL functions that you can use to extract multidimensional data from an analytic workspace and present it in the two-dimensional format of a relational table:</p>
<ul>
<li>
<p><a href="#CIHIFEAD">Creating Relational Views Using OLAP_TABLE</a></p>
</li>
<li>
<p><a href="#CHDHDDDI">Using OLAP DML Expressions in SELECT FROM OLAP_TABLE Statements</a></p>
</li>
<li>
<p><a href="#g1004021">OLAP_TABLE</a></p>
</li>
<li>
<p><a href="#CIHJHDCH">OLAP_CONDITION</a></p>
</li>
<li>
<p><a href="#BGBGDDDF">OLAP_EXPRESSION</a></p>
</li>
<li>
<p><a href="#BHBDCEJH">OLAP_EXPRESSION_BOOL</a></p>
</li>
<li>
<p><a href="#CIAHHEDB">OLAP_EXPRESSION_DATE</a></p>
</li>
<li>
<p><a href="#BCEEBEIH">OLAP_EXPRESSION_TEXT</a></p>
</li>
</ul>
<a id="CIHIFEAD"></a>
<div id="OLADM931" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating Relational Views Using OLAP_TABLE</h2>
<p><code dir="ltr">OLAP_TABLE</code> is a SQL function that returns a table of objects that can be joined to relational tables and views, and to other tables of objects populated by <code dir="ltr">OLAP_TABLE</code>. Within a SQL statement, you can specify an <code dir="ltr">OLAP_TABLE</code> function call wherever you would provide the name of a table or view</p>
<p><code dir="ltr">OLAP_TABLE</code> <a id="sthref5325"></a><a id="sthref5326"></a>uses a <span class="bold">limit map</span> to map dimensions and measures defined in an analytic workspace to columns in a logical table. The limit map combines with the <code dir="ltr">WHERE</code> clause of a SQL <code dir="ltr">SELECT</code> statement to generate a series of OLAP DML <a href="dml_commands_2.htm#i78802">LIMIT command</a>s that are executed in the analytic workspace.</p>
<p><code dir="ltr">OLAP_TABLE</code> can use a limit map with a predefined logical table, or it can use the information in a limit map to dynamically generate a logical table at run time.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The discussion of the <a href="#CIHCGCBF"><span class="italic">limit_map</span></a> parameter of <a href="#g1004021">OLAP_TABLE</a>, <a href="#CHDIBAFB">&#34;Creating Logical Tables for Use by OLAP_TABLE&#34;</a>, <a href="#CHDBIHFI">&#34;Required OLAP DML Objects&#34;</a>, <a href="#CHDIBAFB">&#34;Creating Logical Tables for Use by OLAP_TABLE&#34;</a>, <a href="#CHDIBAFB">&#34;Creating Logical Tables for Use by OLAP_TABLE&#34;</a>, <a href="#CHDIBAFB">&#34;Creating Logical Tables for Use by OLAP_TABLE&#34;</a></div>
<a id="CHDBIHFI"></a>
<div id="OLADM932" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Required OLAP DML Objects</h3>
<p>Several objects must be predefined within the analytic workspace to support the mapping of dimension hierarchies in the limit map:</p>
<ul>
<li>
<p>a <span class="bold">parent relation</span>, which identifies the parent of each dimension member within a hierarchy. See <a href="dml_basics.htm#BABGGIEH">&#34;Parentrel Relation&#34;</a> for more information.</p>
</li>
<li>
<p>a <span class="bold">hierarchy dimension</span>, which lists the hierarchies of a dimension. See <a href="dml_basics.htm#BABGAAEH">&#34;Hierlist Dimension&#34;</a> for more information.</p>
</li>
<li>
<p>an <span class="bold">inhierarchy</span> variable or valueset, which specifies which dimension members belong to each level of a hierarchy. See <a href="dml_basics.htm#BABIJDJF">&#34;Inhier Valueset or Variable&#34;</a> for more information.</p>
</li>
<li>
<p>a <span class="bold">grouping ID</span> variable, which identifies the depth within a hierarchy of each dimension member. See <a href="dml_basics.htm#BABCGJHG">&#34;Gidrel Relation&#34;</a> for more information.</p>
</li>
<li>
<p>a <span class="bold">family relation</span>, which provides the full parentage of each dimension member in a hierarchy. See <a href="dml_basics.htm#BABECBEE">&#34;Familyrel Relation&#34;</a> for more information.</p>
</li>
<li>
<p>a <span class="bold">level dimension</span>, which lists the levels of a dimension. See <a href="dml_basics.htm#BABDJGCB">&#34;Levellist Dimension&#34;</a> for more information.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDIBAFB"></a>
<div id="OLADM933" class="sect2">
<h3 class="sect2">Creating Logical Tables for Use by OLAP_TABLE</h3>
<p>The logical table populated by <code dir="ltr">OLAP_TABLE</code> is actually a table type whose rows are user-defined object types, also known as <span class="bold"><a id="sthref5327"></a>Abstract Data Types</span> or <span class="bold">ADTs</span>.</p>
<p>A <a id="sthref5328"></a>user-defined object type is composed of attributes, which are equivalent to the columns of a table. The basic syntax for defining a row is as follows.</p>
<pre dir="ltr">CREATE TYPE <span class="italic">object_name</span> AS OBJECT (
   <span class="italic">attribute1</span>      <span class="italic">datatype</span>,
   <span class="italic">attribute2</span>      <span class="italic">datatype</span>,
   <span class="italic">attribute</span>n      <span class="italic">datatype</span>);
</pre>
<p>A <a id="sthref5329"></a>table type is a collection of object types; this collection is equivalent to the rows of a table. The basic syntax for creating a table type is as follows.</p>
<pre dir="ltr">CREATE TYPE <span class="italic">table_name</span> AS TABLE OF <span class="italic">object_name</span>;
</pre>
<p><code dir="ltr">OLAP_TABLE</code> can use a limit map with a predefined logical table, or it can use the information in a limit map to dynamically generate a logical table at run time.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDEIDBG">&#34;Using OLAP_TABLE With Predefined ADTs&#34;</a></p>
</li>
<li>
<p><a href="#CIHGDBCB">&#34;Using OLAP_TABLE With Automatic ADTs&#34;</a></p>
</li>
<li>
<p><a class="olink ADOBJ" href="../ADOBJ/toc.htm"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for information about object types</p>
</li>
<li>
<p><a class="olink SQLRF01506" href="../SQLRF/statements_8001.htm#SQLRF01506">CREATE TYPE</a> in <span class="italic">Oracle Database SQL Language Reference</span></p>
</li>
</ul>
</div>
<a id="CHDEIDBG"></a>
<div id="OLADM934" class="sect3">
<h4 class="sect3">Using OLAP_TABLE With Predefined ADTs</h4>
<p><a id="sthref5330"></a>You <a id="sthref5331"></a><a id="sthref5332"></a>can <a id="sthref5333"></a>predefine the table of objects or generate it dynamically. <a id="sthref5334"></a>When you create the table type in advance, it is available in the database for use by any invocation of <code dir="ltr">OLAP_TABLE</code>. Queries that use predefined objects typically perform better than queries that dynamically generate the objects.</p>
<p><a href="#CHDHJDBA">Example A-1, &#34;Template for Creating a View Using Predefined ADTs&#34;</a><a id="sthref5335"></a> shows how to create a view of an analytic workspace using predefined ADTs.</p>
<div id="OLADM2951" class="example">
<p class="titleinexample"><a id="CHDHJDBA"></a>Example A-1 Template for Creating a View Using Predefined ADTs</p>
<pre dir="ltr">SET ECHO ON
SET SERVEROUT ON

DROP TYPE <span class="italic">table_obj</span>;
DROP TYPE <span class="italic">row_obj</span>;

CREATE TYPE <span class="italic">row_obj</span> AS OBJECT (
   <span class="italic">         column_first</span>     <span class="italic">datatype</span>,
   <span class="italic">         column_next</span>      <span class="italic">datatype</span>,
   <span class="italic">         column_</span>n      <span class="italic">   datatype</span>);
/   
CREATE TYPE <span class="italic">table_obj</span> AS TABLE OF <span class="italic">row_obj</span>;
/
CREATE OR REPLACE VIEW <span class="italic">view_name</span> AS
   SELECT <span class="italic">column_first</span>, <span class="italic">column_next</span>, <span class="italic">column_</span>n
      FROM TABLE(OLAP_TABLE(
         &#39;<span class="italic">analytic_workspace</span>&#39;, 
         &#39;<span class="italic">table_obj</span>&#39;, 
         &#39;<span class="italic">olap_command</span>&#39;,
         &#39;<span class="italic">limit_map</span>&#39;));
/
COMMIT;
/ 
GRANT SELECT ON <span class="italic">view_name</span> TO PUBLIC;        
</pre></div>
<!-- class="example" -->
<p><a href="#CHDFJHHA">Example A-2, &#34;Sample View of the TIME Dimension Using Predefined ADTs&#34;</a> uses <code dir="ltr">OLAP_TABLE</code> with a predefined table type to create a relational view of the <code dir="ltr">TIME</code> dimension in an analytic workspace named <code dir="ltr">MYAW</code> in the <code dir="ltr">MYAW_AW</code> schema.</p>
<p>The first parameter in the <code dir="ltr">OLAP_TABLE</code> call is the name of the analytic workspace. The second is the name of the predefined table type. The fourth is the limit map that specifies how to map the workspace dimension to the columns of the predefined table type. The third parameter is not specified</p>
<div id="OLADM2952" class="example">
<p class="titleinexample"><a id="CHDFJHHA"></a>Example A-2 Sample View of the TIME Dimension Using Predefined ADTs</p>
<pre dir="ltr">CREATE TYPE time_cal_row AS OBJECT (
            time_id           varchar2(32),
            cal_short_label   varchar2(32),
            cal_end_date      date,
            cal_timespan      number(6));

CREATE TYPE time_cal_table AS TABLE OF time_cal_row;

CREATE OR REPLACE VIEW time_cal_view AS
   SELECT time_id, cal_short_label, cal_end_date, cal_timespan
      FROM TABLE(OLAP_TABLE(
         &#39;myaw_aw.myaw duration session&#39;,
         &#39;time_cal_table&#39;,
          &#39;&#39;,
         &#39;DIMENSION time_id from time with
            HIERARCHY time_parentrel
               INHIERARCHY time_inhier
            ATTRIBUTE cal_short_label from time_short_description
            ATTRIBUTE cal_end_date    from time_end_date
            ATTRIBUTE cal_timespan    from time_time_span&#39;));
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHGDBCB"></a>
<div id="OLADM935" class="sect3">
<h4 class="sect3">Using OLAP_TABLE With Automatic ADTs</h4>
<p>If you <a id="sthref5336"></a>do not supply the name of a table type as an argument, <code dir="ltr">OLAP_TABLE</code> uses information in the limit map to generate the logical table automatically. In this case, the table type is only available at run time within the context of the calling SQL <code dir="ltr">SELECT</code> statement.</p>
<p><a href="#CIHICBCD">Example A-3, &#34;Template for Creating a View Using Automatic ADTs&#34;</a> shows how to create a view of an analytic workspace using automatic ADTs.</p>
<div id="OLADM2953" class="example">
<p class="titleinexample"><a id="CIHICBCD"></a>Example A-3 Template for Creating a View Using Automatic ADTs</p>
<pre dir="ltr">SET ECHO ON
SET SERVEROUT ON

CREATE OR REPLACE VIEW <span class="italic">view_name</span> AS
   SELECT <span class="italic">column_first</span>, <span class="italic">column_next</span>, <span class="italic">column_</span>n
      FROM TABLE(OLAP_TABLE(
         &#39;<span class="italic">analytic_workspace</span>&#39;,
         &#39;&#39;, 
         &#39;<span class="italic">olap_command</span>&#39;,
         &#39;<span class="italic">limit_map</span>&#39;));
/
COMMIT;
/ 
GRANT SELECT ON <span class="italic">view_name</span> TO PUBLIC;        
</pre></div>
<!-- class="example" -->
<p><a href="#CIHDHDDB">Example A-4, &#34;View of the TIME Dimension Using Automatic ADTs&#34;</a> creates the same view produced by <a href="#CHDFJHHA">Example A-2, &#34;Sample View of the TIME Dimension Using Predefined ADTs&#34;</a>, but it automatically generates the ADTs instead of using a predefined table type. It uses <code dir="ltr">AS</code> clauses in the limit map to specify the data types of the target columns.</p>
<div id="OLADM2954" class="example">
<p class="titleinexample"><a id="CIHDHDDB"></a>Example A-4 View of the TIME Dimension Using Automatic ADTs</p>
<pre dir="ltr">CREATE OR REPLACE VIEW time_cal_view AS
   SELECT time_id, cal_short_label, cal_end_date, cal_timespan
      FROM TABLE(OLAP_TABLE(
        &#39;myaw_aw.myaw duration session&#39;,
        null,
        null,
        &#39;DIMENSION time_id AS varchar2(32) FROM time WITH
           HIERARCHY time_parentrel
              INHIERARCHY time_inhier
           ATTRIBUTE cal_short_label AS VARCHAR2(32) from time_short_description
           ATTRIBUTE cal_end_date AS DATE            from time_end_date
           ATTRIBUTE cal_timespan AS NUMBER(6)       from time_time_span&#39;));

</pre></div>
<!-- class="example" -->
<p>When automatically generating ADTs, <code dir="ltr">OLAP_TABLE</code> uses default relational data types for the target columns unless you override them with <code dir="ltr">AS</code> clauses in the limit map. The default data type conversions used by <code dir="ltr">OLAP_TABLE</code> are described in <a href="#CIAFCIEA">Table A-2, &#34;Default Data Type Conversions&#34;</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDDACJH"></a>
<div id="OLADM936" class="sect2">
<h3 class="sect2">Adding Calculated Columns to the Relational View</h3>
<p><code dir="ltr">OLAP_TABLE</code> uses a limit map to present the multidimensional data from an analytic workspace in tabular form. The limit map specifies the columns of the logical table. You can add a calculated column to your relational view by specifying the <code dir="ltr">OLAP_EXPRESSION</code> function or a related Boolean, text, or date function in the select list of the query. When you specify one of these functions in the select list, <code dir="ltr">OLAP_TABLE</code> generates additional columns for the results of the function.</p>
<p>Before you use one of these expressions, you must specify a <code dir="ltr"><a id="sthref5337"></a>ROW2CELL</code> clause in the limit map used by <code dir="ltr">OLAP_TABLE</code> to identifies the <code dir="ltr">RAW</code> column that <code dir="ltr">OLAP_TABLE</code> populates with information used by the OLAP single-row functions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDECIBH">&#34;Using OLAP DML Expressions as Single-Row Functions&#34;</a> and <a href="#CIHGCEGC">&#34;<span class="bold">ROW2CELL Clause</span>&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHDDDI"></a>
<div id="OLADM937" class="sect1">
<h2 class="sect1">Using OLAP DML Expressions in SELECT FROM OLAP_TABLE Statements</h2>
<p>You can use OLAP DML commands within your SELECT FROM OLAP_TABLE statements as described in:</p>
<ul>
<li>
<p><a href="#CHDECIBH">&#34;Using OLAP DML Expressions as Single-Row Functions&#34;</a></p>
</li>
<li>
<p><a href="#CHDEBBGF">&#34;Modifying an Analytic Workspace From Within a SELECT FROM OLAP_TABLE Statement&#34;</a></p>
</li>
</ul>
<a id="CHDECIBH"></a>
<div id="OLADM938" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using OLAP DML Expressions as Single-Row Functions</h3>
<p>SQL functions are typically single-row<a id="sthref5338"></a> functions that return a single result row for every row of a queried table or view. Oracle supports several predefined SQL <a id="sthref5339"></a>single-row functions, for example <code dir="ltr">COS</code>, <code dir="ltr">LOG</code>, and <code dir="ltr">ROUND</code>, which return numeric data, and <code dir="ltr">UPPER</code> and <code dir="ltr">LOWER</code>, which return character data.</p>
<p>Within the context of a <code dir="ltr">SELECT FROM OLAP_TABLE</code> statement, there are four SQL functions that you can use to wrap OLAP DML functions so that the OLAP DML function acts as a single-row function. There are four functions that return the results of expressions of different OLAP DML data types: <a href="#BGBGDDDF">OLAP_EXPRESSION</a> for Oracle OLAP numeric expressions, <a href="#BHBDCEJH">OLAP_EXPRESSION_BOOL</a> for Oracle OLAP Boolean expressions, <a href="#CIAHHEDB">OLAP_EXPRESSION_DATE</a> for Oracle OLAP datetime expressions, and <a href="#BCEEBEIH">OLAP_EXPRESSION_TEXT</a> for Oracle OLAP text expressions. One argument of each of these SQL functions is an OLAP DML function.</p>
<p>You can specify the OLAP_EXPRESSION function and its variants in the same way you specify other Oracle single-row functions, notably in the select list, <code dir="ltr">WHERE</code>, and <code dir="ltr">ORDER BY</code> clauses.</p>
</div>
<!-- class="sect2" -->
<a id="CHDEBBGF"></a>
<div id="OLADM939" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Modifying an Analytic Workspace From Within a SELECT FROM OLAP_TABLE Statement</h3>
<p>There are several mechanisms for modifying an analytic workspace on the fly during the execution of <code dir="ltr">OLAP_TABLE</code>.</p>
<p>You can use the <code dir="ltr">OLAP_CONDITION</code> SQL function modifies an analytic workspace within the context of a <code dir="ltr">SELECT FROM OLAP_TABLE</code> statement. You can specify <code dir="ltr">OLAP_CONDITION</code> like other Oracle functions, typically in the <code dir="ltr">WHERE</code> clause. Using the <code dir="ltr">OLAP_CONDITION</code>, you can set an option, execute a <code dir="ltr">LIMIT</code> command, execute an OLAP model or forecast, or run a program. The changes made to the workspace can be transitory or they can persist in your session upon completion of the query.</p>
<p>In addition to <code dir="ltr">OLAP_CONDITION</code>, you can use syntax supported by the <code dir="ltr">OLAP_TABLE</code> function itself: The <code dir="ltr">PREDMLCMD</code> and <code dir="ltr">POSTDMLCMD</code> clauses in the limit map, and the <span class="italic">olap_command</span> parameter. <code dir="ltr">OLAP_CONDITION</code> has the advantage of portability, because it is not embedded within <code dir="ltr">OLAP_TABLE</code>, and versatility, because it can be applied at different entry points.</p>
<p><code dir="ltr">OLAP_TABLE</code> saves the status of dimensions in the limit map before executing the <code dir="ltr">LIMIT</code> commands that generate the result set for the query. After the data is fetched, <code dir="ltr">OLAP_TABLE</code> restores the status of the dimensions. You can specify a <code dir="ltr">PREDMLCMD</code> clause in the limit map to cause an OLAP DML command to execute before the dimension status is saved. Modifications resulting from the <code dir="ltr">PREDMLCMD</code> clause remain in the workspace after execution of <code dir="ltr">OLAP_TABLE</code>, unless reversed with a <code dir="ltr">POSTDMLCMD</code> clause. For more information, see <a href="#CIHCGCBF"><span class="italic">limit_map</span></a>.</p>
<p>The <span class="italic">olap_command</span> parameter of <code dir="ltr">OLAP_TABLE</code> specifies an OLAP DML command that executes immediately before the result set is fetched. In some circumstances, the <span class="italic">olap_command</span> parameter may contain an OLAP DML <a href="dml_commands_1.htm#g1037946">FETCH</a> command, which itself manages the fetch. Limits set by the <span class="italic">olap_command</span> parameter are only in effect during the execution of <code dir="ltr">OLAP_TABLE</code>. For more information, see <a href="#CIHFFIBI"><span class="italic">olap_command</span></a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<div class="refentry"><a id="g1004021"></a>
<div id="OLADM940" class="refsect1"><a id="i82152"></a>
<h2 class="refsect1">OLAP_TABLE</h2>
<p><a id="ABC996846"></a><code dir="ltr">OLAP_TABLE</code> is a SQL function that extracts multidimensional data from an analytic workspace and presents it in the two-dimensional format of a relational table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHIFEAD">&#34;Creating Relational Views Using OLAP_TABLE&#34;</a> and <a href="#CHDHDDDI">&#34;Using OLAP DML Expressions in SELECT FROM OLAP_TABLE Statements&#34;</a></div>
<p>The <code dir="ltr">OLAP_TABLE</code> function returns multidimensional data in an analytic workspace as a logical table.</p>
<p>The order in which <code dir="ltr">OLAP_TABLE</code> processes information specified in its input parameters is described in <a href="#CIHIHFHJ">&#34;Order of Processing in OLAP_TABLE&#34;</a>.</p>
<p><code dir="ltr">OLAP_TABLE</code> is the fundamental mechanism in the database for querying an analytic workspace. Within a SQL statement, you can specify an <code dir="ltr">OLAP_TABLE</code> function call wherever you would provide the name of a table or view.</p>
<p><code dir="ltr">OLAP_TABLE</code> returns a table of objects that can be joined to relational tables and views, and to other tables of objects populated by <code dir="ltr">OLAP_TABLE</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL Worksheet.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5340"></a>Returns</p>
<p>A table type whose rows are objects (ADTs) that identify the selected workspace data. See <a href="#CIHIFEAD">&#34;Creating Relational Views Using OLAP_TABLE&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5341"></a>Syntax</p>
<pre dir="ltr">OLAP_TABLE(
        analytic_workspace    IN   VARCHAR2,
        table_object          IN   VARCHAR2,
        olap_command          IN   VARCHAR2,
        limit_map1            IN   VARCHAR2,
        limit_map2            IN   VARCHAR2,
              .
              .
              .
        limit_map8            IN   VARCHAR2)
     RETURN TYPE;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5342"></a>Parameters</p>
<dl>
<dt><span class="italic">analytic_workspace</span></dt>
<dd id="CHDDGCDD">
<p><a id="sthref5343"></a>Provides the name of the analytic workspace where the source data is stored. It also specifies how long the analytic workspace is attached to your OLAP session, which opens on your first call to <code dir="ltr">OLAP_TABLE</code>.</p>
<p>This parameter is always required by <code dir="ltr">OLAP_TABLE</code>.</p>
<p>The syntax of this parameter is:</p>
<pre dir="ltr">&#39;[<span class="italic">owner.</span>]<span class="italic">aw_name</span> DURATION QUERY | SESSION&#39;
</pre>
<p>For example:</p>
<pre dir="ltr">&#39;olapuser.xademo DURATION SESSION&#39;
</pre>
<ul>
<li>
<p><span class="bolditalic">owner</span></p>
<p>Specify <span class="italic">owner</span> whenever you are creating views to be accessed by other users. Otherwise, you can omit the <span class="italic">owner</span> if you own the analytic workspace. It is required only when you are logged in under a different user name than the owner.</p>
</li>
<li>
<p><span class="bold">QUERY</span></p>
<p>Attaches an analytic workspace for the duration of a single query. Use <code dir="ltr">QUERY</code> only when you must see updates to the analytic workspace made in other sessions.</p>
</li>
<li>
<p><span class="bold">SESSION</span></p>
<p>Attaches an analytic workspace and keeps it attached after the query. It provides better performance than <code dir="ltr">QUERY</code> because it keeps the OLAP session open. This performance difference is significant when the function is called without either a <span class="italic">table_object</span> parameter or <code dir="ltr">AS</code> clauses in the limit map; in this case, the <code dir="ltr">OLAP_TABLE</code> function must determine the appropriate table definition. See <a href="#CIHGDBCB">&#34;Using OLAP_TABLE With Automatic ADTs&#34;</a>.</p>
</li>
</ul>
</dd>
<dd><a id="CIHHHHCC"></a></dd>
<dt><span class="italic">table_object</span></dt>
<dd>
<p><a id="sthref5344"></a><a id="sthref5345"></a>The name of a predefined table of objects, as described in <a href="#CHDEIDBG">&#34;Using OLAP_TABLE With Predefined ADTs&#34;</a>.</p>
<p>This parameter is optional. Omit this parameter when you are using automatic ADTs.</p>
<p>The syntax of this parameter is:</p>
<pre dir="ltr">&#39;<span class="italic">table_name</span>&#39;
</pre>
<p>For example:</p>
<pre dir="ltr">&#39;product_dim_tbl&#39;
</pre>
<p>When you specify the <span class="italic">table_name</span> parameter, the column data types for the returned data are predefined. In this case you cannot use <code dir="ltr">AS</code> clauses in the limit map.</p>
<p>When you omit the <span class="italic">table_name</span> parameter, the column data types for the returned data are generated at run time. You can either provide the target data types with <code dir="ltr">AS</code> clauses in the limit map, or you can use the default data types described in <a href="#CIAFCIEA">Table A-2, &#34;Default Data Type Conversions&#34;</a>. See <a href="#CIHGDBCB">&#34;Using OLAP_TABLE With Automatic ADTs&#34;</a>.</p>
</dd>
<dd><a id="CIHFFIBI"></a></dd>
<dt><span class="italic">olap_command</span></dt>
<dd>
<p>A single OLAP DML command. To execute multiple commands, create a program in your analytic workspace and call the program in this parameter. The power and flexibility of this parameter comes from its ability to process virtually any data manipulation commands available in the OLAP DML.</p>
<p>The order in which <code dir="ltr">OLAP_TABLE</code> processes the <span class="italic">olap_command</span> parameter is specified in <a href="#CIHIHFHJ">&#34;Order of Processing in OLAP_TABLE&#34;</a>.</p>
<p>The syntax of this parameter is:</p>
<pre dir="ltr">&#39;<span class="italic">olap_command</span>&#39;
</pre>
<p>There are two distinct ways of using the <span class="italic">olap_command</span> parameter:</p>
<ul>
<li>
<p>To make changes in the workspace session immediately before the data is fetched (after all the limits have been applied) as described in <a href="#CIHJADBF">&#34;Using FETCH in the olap_command Parameter&#34;</a>.</p>
</li>
<li>
<p>To specify the source data directly instead of using a limit map as described in <a href="#CIHICDGB">&#34;Using olap_command with a Limit Map&#34;</a>.</p>
</li>
</ul>
</dd>
<dd><a id="CIHCGCBF"></a></dd>
<dt><span class="italic">limit_map</span></dt>
<dd>
<p>Maps workspace objects to relational columns and identifies the role of each one. See <a href="#CIHIFEAD">&#34;Creating Relational Views Using OLAP_TABLE&#34;</a>.</p>
<p>The limit map can also specify special instructions to be executed by <code dir="ltr">OLAP_TABLE</code>. For example: It can cause an OLAP DML command to execute before or after the limit map is processed; it can specify a <code dir="ltr">ROW2CELL</code> column for the <code dir="ltr">OLAP_CONDITION</code> and <code dir="ltr">OLAP_EXPRESSION</code> functions. (See <a href="#CIHJHDCH">&#34;OLAP_CONDITION&#34;</a> and <a href="#BGBGDDDF">&#34;OLAP_EXPRESSION&#34;</a>.)</p>
<p>The order in which <code dir="ltr">OLAP_TABLE</code> processes information in the limit map is specified in <a href="#CIHIHFHJ">&#34;Order of Processing in OLAP_TABLE&#34;</a>.</p>
<p>The limit map parameter is generally a required parameter. It can only be omitted when you specify a <code dir="ltr">FETCH</code> command in the <span class="italic">olap_command</span> parameter. See the discussion of <a href="#CIHFFIBI"><span class="italic">olap_command</span></a>.</p>
<p>You can supply the entire text of the limit map as a parameter to <code dir="ltr">OLAP_TABLE</code>, or you can store all or part of the limit map in a text variable in the analytic workspace and reference it using ampersand substitution. For example, the following <code dir="ltr">OLAP_TABLE</code> query uses a limit map stored in a variable called <code dir="ltr">limitmapvar</code> in the <code dir="ltr">MYAW</code> analytic workspace of the <code dir="ltr">MYAW_AW</code> schema.</p>
<pre dir="ltr">SELECT * FROM TABLE(OLAP_TABLE(
          &#39;myaw_aw.myaw DURATION SESSION&#39;,
          &#39;&#39;,
          &#39;&#39;,
          &#39;&amp;(myaw_aw.myaw!limitmapvar)&#39;);
</pre>
<p>If you supply the limit map as text within the call to <code dir="ltr">OLAP_TABLE</code>, then it has a maximum length of 4,000 characters, which is imposed by PL/SQL. If you store the limit map in the analytic workspace, then the limit map has no maximum length.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Several analytic workspace objects must be predefined within the workspace to support the mapping of dimension hierarchies in the limit map. For more information, see <a href="#CHDBIHFI">&#34;Required OLAP DML Objects&#34;</a>.</div>
<p><a id="sthref5346"></a>The syntax of the limit map has numerous clauses, primarily for defining dimension hierarchies. Pay close attention to the presence or absence of commas, because syntax errors prevents your limit map from being parsed.</p>
<pre dir="ltr">&#39;[MEASURE <span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM {<span class="italic">measure</span> | AW_EXPR <span class="italic">expression</span>}]
           .
           .
 DIMENSION [<span class="italic">column </span>[AS <span class="italic">datatype</span>] FROM] <span class="italic">dimension</span> 
    [WITH
       [HIERARCHY [<span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM] <span class="italic">parent_relation</span>
          [<span class="italic">(hierarchy_dimension</span> &#39;&#39;<span class="italic">hierarchy_name</span>&#39;&#39;)]
          [INHIERARCHY <span class="italic">inhierarchy_obj</span>]
          [GID <span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM <span class="italic">gid_relation</span>]
          [PARENTGID <span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM <span class="italic">gid_relation</span>]
          [FAMILYREL <span class="italic">column1</span> [AS <span class="italic">datatype</span>],  
                     <span class="italic">column2</span> [AS <span class="italic">datatype</span>],
                      ... <span class="italic">column</span>n [AS <span class="italic">datatype</span>]
                     FROM {<span class="italic">expression1, expression2, ... expression</span>n | 
                           <span class="italic">family_relation</span> USING <span class="italic">level_dimension </span>}
                     [LABEL <span class="italic">label_variable</span>]]
          [HATTRIBUTE <span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM <span class="italic">hier_attribute_variable]</span> 
           .
           .
       ]
       [ATTRIBUTE <span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM <span class="italic">attribute_variable</span>]
           .
           .
    ]
 [ROW2CELL <span class="italic">column</span>] 
 [LOOP  <span class="italic">loop-clause</span>]
 [PREDMLCMD <span class="italic">olap_command</span>]
 [POSTDMLCMD <span class="italic">olap_command</span>]&#39;
</pre>
<p>Where:</p>
<p><span class="italic">column</span> is the name of a column in the target table.</p>
<p><span class="italic">datatype</span> is the data type of <span class="italic">column</span>.</p>
<p><span class="italic">measure</span> is a variable, formula, or relation in the analytic workspace.</p>
<p><span class="italic">expression</span> is a formula or qualified data reference for objects in the analytic workspace.</p>
<p><span class="italic">dimension</span> is a dimension in the analytic workspace.</p>
<p><span class="italic">parent_relation</span> is a self-relation in the analytic workspace that defines the hierarchies for <span class="italic">dimension</span>. See <a href="dml_basics.htm#BABGGIEH">&#34;Parentrel Relation&#34;</a> for more information.</p>
<p><span class="italic">hierarchy_dimension</span> is a dimension in the analytic workspace that contains the names of the hierarchies for <span class="italic">dimension</span>. See <a href="dml_basics.htm#BABGAAEH">&#34;Hierlist Dimension&#34;</a> for more information</p>
<p><span class="italic">hierarchy_name</span> is a member of <span class="italic">hierarchy_dimension</span>.</p>
<p><span class="italic">inhierarchy_obj</span> is a variable or valueset in the analytic workspace that identifies which dimension members are in each level of the hierarchy. See <a href="dml_basics.htm#BABIJDJF">&#34;Inhier Valueset or Variable&#34;</a> for more information</p>
<p><span class="italic">gid_relation</span> is a relation in the analytic workspace that contains the grouping ID of each dimension member in the hierarchy. See <a href="dml_basics.htm#BABCGJHG">&#34;Gidrel Relation&#34;</a> for more information</p>
<p><span class="italic">family_relation</span> is a self-relation that provides the full parentage of each dimension member in the hierarchy. See <a href="dml_basics.htm#BABECBEE">&#34;Familyrel Relation&#34;</a> for more information</p>
<p><span class="italic">level_dimension</span> is a dimension in the analytic workspace that contains the names of the levels for the hierarchy. See <a href="dml_basics.htm#BABDJGCB">&#34;Levellist Dimension&#34;</a> for more information</p>
<p><span class="italic">label_variable</span> is a variable in the analytic workspace that contains descriptive text values for <span class="italic">dimension</span>.</p>
<p><span class="italic">hier_attribute_variable</span> is a variable in the analytic workspace that contains attribute values for <span class="italic">hierarchy_name</span>.</p>
<p><span class="italic">attribute_variable</span> is a variable in the analytic workspace that contains attribute values for <span class="italic">dimension</span>.</p>
<p><span class="italic">loop_clause</span> specifies how Oracle OLAP determines how it loops through data values and what rows to create in the relational table. When you exclude a LOOP clause, Oracle OLAP loops through all of the data values that are identified by the dimensions in the DIMENSION clauses in the limit map.</p>
<p>For the complete syntax of the LOOP clause see <a href="#CIHJHCFC">&#34;<span class="bold">LOOP Clause</span>&#34;</a>.</p>
<p><span class="italic">olap_command</span> is an OLAP DML command.</p>
<p>Detailed syntax for each of the clauses of the <span class="italic">limit-map</span> parameter follows.</p>
<ul>
<li id="CIHFHAGF">
<p><span class="bold">MEASURE Clause</span></p>
<p>The <code dir="ltr">MEASURE</code> clause maps a variable, formula, or relation in the analytic workspace to a column in the target table. You can list any number of <code dir="ltr">MEASURE</code> clauses. This clause is optional when, for example, you want to create a dimension view.</p>
<p>The <code dir="ltr">AS</code> subclause specifies the data type of the target column. You can specify an <code dir="ltr">AS</code> subclause when the table of objects has not been predefined. See <a href="#CIHGDBCB">&#34;Using OLAP_TABLE With Automatic ADTs&#34;</a>.</p>
<p>In the <code dir="ltr">FROM</code> subclause, you can either specify the name of a variable, formula, or relation or an OLAP expression that evaluates to one of these objects. For example:</p>
<pre dir="ltr">AW_EXPR analytic_cube_sales - analytic_cube_cost
<span class="italic">or</span>
AW_EXPR LOGDIF(analytic_cube_sales, 1, time, LEVELREL time.lvlrel)
</pre></li>
<li id="CIHECIBG">
<p><span class="bold">DIMENSION Clause</span></p>
<p>The <code dir="ltr">DIMENSION</code> clause identifies a dimension or conjoint in the analytic workspace that dimensions one or more measures or attributes, or provides the dimension members for one or more hierarchies in the limit map.</p>
<p>The <span class="italic">column</span> subclause is optional when you do not want the dimension members themselves to be represented in the table. In this case, include a dimension attribute that can be used for data selection.</p>
<p>For a description of the <code dir="ltr">AS</code> subclause, see <a href="#CIHFHAGF">&#34;<span class="bold">MEASURE Clause</span>&#34;</a>.</p>
<p>Every limit map should have at least one <code dir="ltr">DIMENSION</code> clause. If the limit map contains <code dir="ltr">MEASURE</code> clauses, then it should also contain a single <code dir="ltr">DIMENSION</code> clause for each dimension of the measures, unless a dimension is being limited to a single value. If the measures are dimensioned by a composite, then you must identify each dimension in the composite with a <code dir="ltr">DIMENSION</code> clause. For the best performance when fetching a large result set, identify the composite in a <code dir="ltr">LOOP</code> clause. See <a href="#CIHJHCFC">&#34;<span class="bold">LOOP Clause</span>&#34;</a>.</p>
<p>A dimension can be named in only one <code dir="ltr">DIMENSION</code> clause. Subclauses of the <code dir="ltr">DIMENSION</code> clause identify the dimension hierarchies and attributes.</p>
<ul>
<li>
<p><span class="bold">WITH Subclause for Dimension Hierarchies and Attributes</span></p>
<p>The <code dir="ltr">WITH</code> subclause introduces a <code dir="ltr">HIERARCHY</code> or <code dir="ltr">ATTRIBUTE</code> subclause. If you do not specify hierarchies or attributes, then omit the <code dir="ltr">WITH</code> keyword. If you specify both hierarchies and attributes, then precede them with a single <code dir="ltr">WITH</code> keyword.</p>
</li>
<li id="CIHIABAB">
<p><span class="bold">WITH HIERARCHY Subclause</span></p>
<p>The <code dir="ltr">HIERARCHY</code> subclause identifies the parent self-relation in the analytic workspace that defines the hierarchies for the dimension. See <a href="dml_basics.htm#BABGGIEH">&#34;Parentrel Relation&#34;</a> for more information,</p>
<p>The <code dir="ltr">HIERARCHY</code> subclause is optional when the dimension does not have a hierarchy, or when the status of the dimension has been limited to a single level of the hierarchy. When a dimension has multiple hierarchies, specify a <code dir="ltr">HIERARCHY</code> subclause for each one and specify a <span class="italic">hierarchy_dimension</span> phrase. The <span class="italic">hierarchy_dimension</span> identifies a dimension in the analytic workspace which holds the names of the hierarchies for this dimension. See <a href="dml_basics.htm#BABGAAEH">&#34;Hierlist Dimension&#34;</a> for more information.</p>
<p><span class="italic">hierarchy_name</span> is a member of <span class="italic">hierarchy_dimension</span>. The hierarchy dimension is limited to <span class="italic">hierarchy_name</span> for all workspace objects that are referenced in subsequent subclauses for this hierarchy (that is, <code dir="ltr">INHIERARCHY</code>, <code dir="ltr">GID</code>, <code dir="ltr">PARENTGID</code>, <code dir="ltr">FAMILYREL</code>, and <code dir="ltr">HATTRIBUTE</code>).</p>
<p>For a description of the column subclause, see <a href="#CIHECIBG">&#34;<span class="bold">DIMENSION Clause</span> &#34;</a>.</p>
<p><a href="#CHDCFCGC">Table A-1</a> lists the keywords in the <code dir="ltr">HIERARCHY</code> subclause.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref5347"></a><a id="CHDCFCGC"></a>Table A-1 Keywords of the HIERARCHY Subclause</p>
<table class="cellalignment3618" title="Keywords of the HIERARCHY Subclause" summary="This table lists the keywords of the Hierarchy subclause." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t8">Keyword</th>
<th class="cellalignment3616" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">INHIERARCHY</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t8 r1c2-t8">
<p>The <code dir="ltr">INHIERARCHY</code> subclause identifies a boolean variable or a valueset in the analytic workspace that identifies the dimension members in each level of the hierarchy. See <a href="dml_basics.htm#BABIJDJF">&#34;Inhier Valueset or Variable&#34;</a> for more information.</p>
<p>It is good practice to include an <code dir="ltr">INHIERARCHY</code> subclause, because <code dir="ltr">OLAP_TABLE</code> saves the status of all dimensions with <code dir="ltr">INHIERARCHY</code> subclauses during the processing of the limit map. It is required when there are members of the dimension that are omitted from the hierarchy.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">GID</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t8 r1c2-t8">
<p>The <code dir="ltr">GID</code> subclause maps an integer variable in the analytic workspace, which contains the grouping ID for each dimension member, to a column in the target table. The grouping ID variable is populated by the OLAP DML <a href="dml_commands_1.htm#i78871">GROUPINGID command</a>. See <a href="dml_basics.htm#BABCGJHG">&#34;Gidrel Relation&#34;</a> for more information.</p>
<p>The <code dir="ltr">GID</code> subclause is required for Java applications that use the OLAP API.</p>
<p>For a description of the <code dir="ltr">AS</code> subclause, see <a href="#CIHFHAGF">&#34;<span class="bold">MEASURE Clause</span>&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t8" headers="r1c1-t8">
<p><code dir="ltr">PARENTGID</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t8 r1c2-t8">
<p>The <code dir="ltr">PARENTGID</code> subclause calculates the grouping IDs for the parent relation using the GID variable in the analytic workspace. The parent GIDs are not stored in an analytic workspace object. Instead, you specify the same GID variable for the PARENTGID clause that you used in the GID clause. The PARENTGID clause is recommended for Java applications that use the OLAP API.</p>
<p>For a description of the <code dir="ltr">AS</code> subclause, see <a href="#CIHFHAGF">&#34;<span class="bold">MEASURE Clause</span>&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t8" headers="r1c1-t8">
<p><code dir="ltr">FAMILYREL</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t8 r1c2-t8">
<p>The <code dir="ltr">FAMILYREL</code> subclause is used primarily to map a family relation in the analytic workspace to multiple columns in the target table. See <a href="dml_basics.htm#BABECBEE">&#34;Familyrel Relation&#34;</a> for more information. You can use multiple <code dir="ltr">FAMILYREL</code> clauses for each hierarchy.</p>
<p>List the columns in the order of <span class="italic">level_dimension</span> which is a dimension in the analytic workspace that holds the names of all the levels for the dimension. See <a href="dml_basics.htm#BABDJGCB">&#34;Levellist Dimension&#34;</a> for more information.</p>
<p>If you do not want a particular level included, then specify null for the target column. For a description of the <code dir="ltr">AS</code> subclause, see <a href="#CIHFHAGF">&#34;<span class="bold">MEASURE Clause</span>&#34;</a>.</p>
<p>The <code dir="ltr">LABEL</code> keyword identifies a text attribute that provides more meaningful names for the dimension members.</p>
<p>The tabular data resulting from a <code dir="ltr">FAMILYREL</code> clause is in <span class="bold">rollup form</span>, in which each level of the hierarchy is represented in a separate column, and the full parentage of each dimension member is identified within the row. See <a href="#i82078">Example A-7, &#34;Script for a Rollup View of Products Using OLAP_TABLE&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t8" headers="r1c1-t8">
<p><code dir="ltr">HATTRIBUTE</code></p>
</td>
<td class="cellalignment3617" headers="r6c1-t8 r1c2-t8">
<p>The <code dir="ltr">HATTRIBUTE</code> subclause maps a hierarchy-specific attribute variable, dimensioned by <span class="italic">hierarchy_dimension</span> in the analytic workspace, to a column in the target table.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></li>
<li>
<p><span class="bold">WITH ATTRIBUTE Subclause</span></p>
<p>The <code dir="ltr">ATTRIBUTE</code> subclause maps an attribute variable in the analytic workspace to a column in the target table.</p>
<p>If <span class="italic">attribute_variable</span> has multiple dimensions, then values are mapped for all members of <span class="italic">dimension</span>, but only for the first member in the current status of additional dimensions. For example, if your attributes have a language dimension, then you must set the status of that dimension to a particular language. You can set the status of dimensions in a <code dir="ltr">PREDMLCMD</code> clause.</p>
</li>
</ul>
</li>
<li id="CIHGCEGC">
<p><span class="bold">ROW2CELL Clause</span></p>
<p>The <code dir="ltr">ROW2CELL</code> clause<a id="sthref5348"></a><a id="sthref5349"></a> creates a <code dir="ltr">RAW</code> column, between 16 and 32 characters wide, in the target table and populates it with information that is used by the OLAP expression functions. The <code dir="ltr">OLAP_CONDITION</code> function also uses the <code dir="ltr">ROW2CELL</code> column. Specify a <code dir="ltr">ROW2CELL</code> column when creating a view to be used by these functions. See <a href="#CHDHDDDI">&#34;Using OLAP DML Expressions in SELECT FROM OLAP_TABLE Statements&#34;</a> and <a href="#CHDDACJH">&#34;Adding Calculated Columns to the Relational View&#34;</a>.</p>
</li>
<li id="CIHJHCFC">
<p><span class="bold">LOOP Clause</span></p>
<p>The <code dir="ltr">LOOP</code> clause specifies how Oracle OLAP loops through the data when retrieving values. When you omit a LOOP clause in a limit map, Oracle OLAP uses the DIMENSION clauses in that limit map to determine the values to loop over. Oracle OLAP loops over only those tuples that identify measure cells that do not contain NA or null. When you include a LOOP clause, you specify one of the following types of subclauses: the <span class="italic">optimized_subclause</span> or the <span class="italic">union_subclause</span>.</p>
<p>The <span class="bolditalic">optimized_subclause</span> specifies that Oracle OLAP automatically create the <span class="italic">union_subclause</span> by which it loops through the data. The <span class="italic">union_subclause</span> created never includes any DENSE phrases. Consequently, when you specify the <span class="italic">optimized_subclause</span>, Oracle OLAP loops over only those tuples that identify measure cells that do not contain NA or null. The <span class="italic">optimized_subclause</span> has the following syntax.</p>
<p class="synopsis">OPTIMIZED [MEASURES]</p>
<p>where the optional MEASURES keyword specifies that after identifying the tuples to loop through, Oracle OLAP remove any values that are dimension values that are not dimensions of the objects identified in the MEASURES clauses of the limit map.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
You can use the<a href="dml_properties.htm#BCFFGCAG">$LOOP_AGGMAP</a>, <a href="dml_properties.htm#BABHHFCB">$LOOP_DENSE</a>, and <a href="dml_properties.htm#BABJIJAF">$LOOP_VAR</a> properties, to specify more information as to how OLAP_TABLE loops over a formula.</div>
<p>The <span class="bolditalic">union_subclause</span> specifies exactly how Oracle OLAP determines which base dimensions it uses to identify what data values to loop through. For a successful union to occur, the objects that are referenced in this subclause must have the same base dimensions. The <span class="italic">union_subclause</span> has the following syntax.</p>
<p class="synopsis">[<span class="italic">ignore_phrase</span>] [<span class="italic">dense_phrase</span>] UNION ({<span class="italic">aggmap_phrase</span> | <span class="italic">list_phrase</span> }...)]</p>
<p>where:</p>
<p><span class="bolditalic">aggmap_phrase</span> specifies how Oracle OLAP loops through the values of an aggregated variable. It has the following syntax.</p>
<p class="synopsis">AGGMAP (<span class="italic">ignore_phrase</span>] [<span class="italic">dense_phrase</span>] <span class="italic">aggmap</span> {<span class="italic">variable</span> | <span class="italic">dimension_list</span>})</p>
<p><span class="bolditalic">list_phrase</span> specifies how Oracle OLAP loops through the values of a composite, partition template, or dimension. It has the following syntax.</p>
<p class="synopsis">LIST ([<span class="italic">ignore_phrase</span>] [<span class="italic">dense_phrase</span>] <span class="italic">dimension_list</span>)</p>
<ul>
<li>
<p><span class="bolditalic">ignore_phrase</span> specifies the dimension values that you do not want Oracle OLAP to loop over. It has the following syntax.</p>
<p class="synopsis">IGNORE (<span class="italic">ignore_list</span> )</p>
<p>For <span class="italic">ignore_list</span> you can specify one or more of the following separated by commas.</p>
<pre dir="ltr">  <span class="italic">dimension_name</span>
  <span class="italic">valueset_name</span>
  COMPLEMENT (<span class="italic">valueset_name</span>)
</pre>
<p>Within a single <span class="italic">ignore_list</span> you cannot specify a dimension in multiple ways. In other words, you cannot specify both a dimension and a valueset for that same dimension; you cannot specify two valuesets for the same dimension.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The result of specifying IGNORE <span class="italic">valueset-name</span> is similar to specifying LIMIT REMOVE <span class="italic">valueset-name</span> (see <a href="dml_commands_2.htm#i78802">LIMIT command</a>).</div>
</li>
<li>
<p><span class="bolditalic">dense_phrase</span> specifies values that Oracle OLAP loops over even when the measure cells identified by those values contain NA or null. Specifying a dimension in a DENSE phrase is similar to requesting a relational outer join. Typically, you include dimension values in a DENSE phrase to perform time-series processing (for example, to lag over time). A DENSE phrase has the following syntax.</p>
<p class="synopsis">DENSE (<span class="italic">dense_list</span> )</p>
<p>For <span class="italic">dense_list</span> you can specify one or more of the following separated by commas.</p>
<pre dir="ltr">  <span class="italic">dimension_name</span>
  <span class="italic">valueset_name</span>
  COMPLEMENT (<span class="italic">valueset_name</span>)
</pre>
<p>Within a single <span class="italic">dense_list</span> you cannot specify a dimension in multiple ways. In other words, you cannot specify both a dimension and a valueset for that same dimension; you cannot specify two valuesets for the same dimension.</p>
<p>However, you can have one valueset for a dimension in the outer <code dir="ltr">DENSE</code> phrase and another valueset for the same dimension in an inner <code dir="ltr">DENSE</code> phrase. If a dimension or a valueset of a dimension is specified in both an inner and outer <code dir="ltr">DENSE</code> phrase, Oracle OLAP loops densely over the union of the dense regions. If the dimension, itself, appears in either place, Oracle OLAP loops densely over the whole dimension.</p>
</li>
<li>
<p><span class="bolditalic">aggmap</span> is the name of an aggmap object. When you specify only the name of an aggmap object, Oracle OLAP uses the values in the PRECOMPUTE phrases of the aggmap to identify the values to loop</p>
</li>
<li>
<p><span class="bolditalic">variable</span> is the name of the variable aggregated by <span class="italic">aggmap_name</span>.</p>
</li>
<li>
<p><span class="bolditalic">dimension_list</span> is a list of one or more composites, partition templates, or dimensions.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">PREDMLCMD Clause</span></p>
<p>The <code dir="ltr">PREDMLCMD</code> clause <a id="sthref5350"></a>specifies an OLAP DML command that is executed before the data is fetched from the analytic workspace into the target table. It can be used, for example, to execute an OLAP model or forecast whose results will be fetched into the table. The results of the command are in effect during execution of the limit map, and continue into your session after execution of <code dir="ltr">OLAP_TABLE</code> is complete. See <a href="#CIHIHFHJ">&#34;Order of Processing in OLAP_TABLE&#34;</a>.</p>
</li>
<li>
<p><span class="bold">POSTDMLCMD Clause</span></p>
<p>The <code dir="ltr">POSTDMLCMD</code> clauses specifies an OLAP DML command that is executed after the data is fetched from the analytic workspace into the target table. It can be used, for example, to delete objects or data that were created by commands in the <code dir="ltr">PREDMLCMD</code> clause, or to restore the dimension status that was changed in a <code dir="ltr">PREDMLCMD</code> clause. See <a href="#CIHIHFHJ">&#34;Order of Processing in OLAP_TABLE&#34;</a> .</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5351"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2955"></a>Limit Maps</p>
<p><code dir="ltr">OLAP_TABLE</code> <a id="sthref5352"></a><a id="sthref5353"></a>uses a <span class="bold">limit map</span> to map dimensions and measures defined in an analytic workspace to columns in a logical table. The limit map combines with the <code dir="ltr">WHERE</code> clause of a SQL <code dir="ltr">SELECT</code> statement to generate a series of OLAP DML <a href="dml_commands_2.htm#i78802">LIMIT command</a>s that are executed in the analytic workspace.</p>
<p><code dir="ltr">OLAP_TABLE</code> can use a limit map with a predefined logical table, or it can use the information in a limit map to dynamically generate a logical table at run time.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The discussion of the <a href="#CIHCGCBF"><span class="italic">limit_map</span></a> parameter.</div>
<p class="subhead2"><a id="OLADM2956"></a>Logical Tables</p>
<p>The logical table populated by <code dir="ltr">OLAP_TABLE</code> is actually a table type whose rows are user-defined object types, also known as <span class="bold"><a id="sthref5354"></a>Abstract Data Types</span> or <span class="bold">ADTs</span>.</p>
<p>A <a id="sthref5355"></a>user-defined object type is composed of attributes, which are equivalent to the columns of a table. The basic syntax for defining a row is as follows.</p>
<pre dir="ltr">CREATE TYPE <span class="italic">object_name</span> AS OBJECT (
   <span class="italic">attribute1</span>      <span class="italic">datatype</span>,
   <span class="italic">attribute2</span>      <span class="italic">datatype</span>,
   <span class="italic">attribute</span>n      <span class="italic">datatype</span>);
</pre>
<p>A <a id="sthref5356"></a>table type is a collection of object types; this collection is equivalent to the rows of a table. The basic syntax for creating a table type is as follows.</p>
<pre dir="ltr">CREATE TYPE <span class="italic">table_name</span> AS TABLE OF <span class="italic">object_name</span>;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADOBJ" href="../ADOBJ/toc.htm">Oracle Database Object-Relational Developer&#39;s Guide</a> for information about object types</p>
</li>
<li>
<p><a class="olink SQLRF01506" href="../SQLRF/statements_8001.htm#SQLRF01506">CREATE TYPE</a> in <span class="italic">Oracle Database SQL Language Reference</span></p>
</li>
</ul>
</div>
<p class="subhead2"><a id="OLADM2957"></a>Using OLAP_TABLE With Predefined ADTs</p>
<p><a id="sthref5357"></a>You <a id="sthref5358"></a><a id="sthref5359"></a>can <a id="sthref5360"></a>predefine the table of objects or generate it dynamically. <a id="sthref5361"></a>When you create the table type in advance, it is available in the database for use by any invocation of <code dir="ltr">OLAP_TABLE</code>. Queries that use predefined objects typically perform better than queries that dynamically generate the objects. See <a href="#CHDEIDBG">&#34;Using OLAP_TABLE With Predefined ADTs&#34;</a>.</p>
<p class="subhead2"><a id="OLADM2958"></a>Using OLAP_TABLE With Automatic ADTs</p>
<p>If you <a id="sthref5362"></a>do not supply the name of a table type as an argument, <code dir="ltr">OLAP_TABLE</code> uses information in the limit map to generate the logical table automatically. In this case, the table type is only available at run time within the context of the calling SQL <code dir="ltr">SELECT</code> statement. See <a href="#CIHGDBCB">&#34;Using OLAP_TABLE With Automatic ADTs&#34;</a>.</p>
<p>When automatically generating ADTs, <code dir="ltr">OLAP_TABLE</code> uses default relational data types for the target columns unless you override them with <code dir="ltr">AS</code> clauses in the limit map. The default data type conversions used by <code dir="ltr">OLAP_TABLE</code> are described in <a href="#CIAFCIEA">Table A-2</a>.</p>
<div id="OLADM2959" class="tblformal">
<p class="titleintable"><a id="sthref5363"></a><a id="CIAFCIEA"></a>Table A-2 <a id="sthref5364"></a><a id="sthref5365"></a>Default Data Type Conversions</p>
<table class="cellalignment3618" title="Default Data Type Conversions" summary="OLAP_TABLE default data type conversions" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t13">Analytic Workspace Data Type</th>
<th class="cellalignment3616" id="r1c2-t13">SQL Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">ID</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t13 r1c2-t13">
<p><code dir="ltr">CHAR(8)</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t13" headers="r1c1-t13">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t13 r1c2-t13">
<p><code dir="ltr">VARCHAR2(4000)</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t13" headers="r1c1-t13">
<p><code dir="ltr">TEXT</code><code dir="ltr"><span class="codeinlineitalic">(n)</span></code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t13 r1c2-t13">
<p><code dir="ltr">VARCHAR2</code><code dir="ltr"><span class="codeinlineitalic">(n)</span></code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t13" headers="r1c1-t13">
<p><code dir="ltr">NTEXT</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t13 r1c2-t13">
<p><code dir="ltr">NVARCHAR2(4000)</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t13" headers="r1c1-t13">
<p><code dir="ltr">NTEXT</code><code dir="ltr"><span class="codeinlineitalic">(n)</span></code></p>
</td>
<td class="cellalignment3617" headers="r6c1-t13 r1c2-t13">
<p><code dir="ltr">NVARCHAR2</code><code dir="ltr"><span class="codeinlineitalic">(n)</span></code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t13" headers="r1c1-t13">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment3617" headers="r7c1-t13 r1c2-t13">
<p><code dir="ltr">NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t13" headers="r1c1-t13">
<p><code dir="ltr">NUMBER</code><code dir="ltr"><span class="codeinlineitalic">(p,s)</span></code></p>
</td>
<td class="cellalignment3617" headers="r8c1-t13 r1c2-t13">
<p><code dir="ltr">NUMBER</code><code dir="ltr"><span class="codeinlineitalic">(p,s)</span></code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t13" headers="r1c1-t13">
<p><code dir="ltr">LONGINTEGER</code></p>
</td>
<td class="cellalignment3617" headers="r9c1-t13 r1c2-t13">
<p><code dir="ltr">NUMBER(19)</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r10c1-t13" headers="r1c1-t13">
<p><code dir="ltr">INTEGER</code></p>
</td>
<td class="cellalignment3617" headers="r10c1-t13 r1c2-t13">
<p><code dir="ltr">NUMBER(10)</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r11c1-t13" headers="r1c1-t13">
<p><code dir="ltr">SHORTINTEGER</code></p>
</td>
<td class="cellalignment3617" headers="r11c1-t13 r1c2-t13">
<p><code dir="ltr">NUMBER(5)</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r12c1-t13" headers="r1c1-t13">
<p><code dir="ltr">INTEGER WIDTH 1</code></p>
</td>
<td class="cellalignment3617" headers="r12c1-t13 r1c2-t13">
<p><code dir="ltr">NUMBER(3)</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r13c1-t13" headers="r1c1-t13">
<p><code dir="ltr">BOOLEAN</code></p>
</td>
<td class="cellalignment3617" headers="r13c1-t13 r1c2-t13">
<p><code dir="ltr">NUMBER(1)</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r14c1-t13" headers="r1c1-t13">
<p><code dir="ltr">DECIMAL</code></p>
</td>
<td class="cellalignment3617" headers="r14c1-t13 r1c2-t13">
<p><code dir="ltr">BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r15c1-t13" headers="r1c1-t13">
<p><code dir="ltr">SHORTDECIMAL</code></p>
</td>
<td class="cellalignment3617" headers="r15c1-t13 r1c2-t13">
<p><code dir="ltr">BINARY_FLOAT</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r16c1-t13" headers="r1c1-t13">
<p><code dir="ltr">DATE</code></p>
</td>
<td class="cellalignment3617" headers="r16c1-t13 r1c2-t13">
<p><code dir="ltr">DATE</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r17c1-t13" headers="r1c1-t13">
<p><code dir="ltr">DAY</code>, <code dir="ltr">WEEK</code>, <code dir="ltr">MONTH</code>, <code dir="ltr">QUARTER</code>, <code dir="ltr">YEAR</code></p>
</td>
<td class="cellalignment3617" headers="r17c1-t13 r1c2-t13">
<p><code dir="ltr">DATE</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r18c1-t13" headers="r1c1-t13">
<p><code dir="ltr">DATETIME</code></p>
</td>
<td class="cellalignment3617" headers="r18c1-t13 r1c2-t13">
<p><code dir="ltr">TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r19c1-t13" headers="r1c1-t13">
<p><code dir="ltr">COMPOSITE</code></p>
</td>
<td class="cellalignment3617" headers="r19c1-t13 r1c2-t13">
<p><code dir="ltr">VARCHAR2(4000)</code></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r20c1-t13" headers="r1c1-t13">
<p>Other</p>
</td>
<td class="cellalignment3617" headers="r20c1-t13 r1c2-t13">
<p><code dir="ltr">VARCHAR2(4000)</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="CIHICDGB"></a><a id="OLADM2960"></a>Using olap_command with a Limit Map</p>
<p><a id="sthref5366"></a><a id="sthref5367"></a>You may want your application to modify the analytic workspace on the fly during the execution of <code dir="ltr">OLAP_TABLE</code>.</p>
<p>A common use of the <span class="italic">olap_command</span> parameter is to limit one or more dimensions. If you limit any of the dimensions that have <code dir="ltr">INHIERARCHY</code> clauses in the limit map, then the status of those dimensions is changed only during execution of this call to <code dir="ltr">OLAP_TABLE</code>; the limits do not affect the rest of your OLAP session. However, other commands (for example, commands that limit dimensions <span class="italic">not</span> referenced with <code dir="ltr">INHIERARCHY</code> clauses) can affect your session.</p>
<p>If you want a limit on a dimension in the limit map to stay in effect for the rest of your session, and not just during the command, specify it in the <code dir="ltr">PREDMLCMD</code> clause of the limit map or specify <a id="sthref5368"></a>an <code dir="ltr">OLAP_CONDITION</code> function in the <code dir="ltr">SQL SELECT</code> statement.</p>
<p>The following is an example of a <code dir="ltr">LIMIT</code> command in the <span class="italic">olap_command</span> parameter.</p>
<pre dir="ltr">&#39;LIMIT product TO product_member_levelrel &#39;&#39;L2&#39;&#39;&#39;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHJHDCH">&#34;OLAP_CONDITION&#34;</a></div>
<p class="subhead2"><a id="CIHJADBF"></a><a id="OLADM2961"></a>Using FETCH in the olap_command Parameter</p>
<p><a id="sthref5369"></a>If you specify an OLAP DML <a href="dml_commands_1.htm#g1037946">FETCH</a> command in the <span class="italic">olap_command</span><a id="sthref5370"></a> parameter, <code dir="ltr">OLAP_TABLE</code> uses it, instead of the instructions in the limit map, to fetch the source data for the table object. Because of this usage, the <span class="italic">olap_command</span> parameter is sometimes referred to as the <span class="bold"><a id="sthref5371"></a>data map</span>. In general, do not specify a limit map if you specify a <code dir="ltr">FETCH</code> command.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Normally, use the <code dir="ltr">FETCH</code> command with <code dir="ltr">OLAP_TABLE</code> only if you are upgrading an Express application that used the <code dir="ltr">FETCH</code> command for SNAPI. If you are upgrading, note that the full syntax is the same in Oracle as in Express 6.3. You can use the same <code dir="ltr">FETCH</code> commands in <code dir="ltr">OLAP_TABLE</code> that you used previously in SNAPI. For the syntax of the <code dir="ltr">FETCH</code> command, see <a href="dml_commands_1.htm#g1037946">&#34;FETCH&#34;</a>.</div>
<p><code dir="ltr">FETCH</code> specifies explicitly how analytic workspace data is mapped to a table object. The basic syntax is:</p>
<pre dir="ltr">FETCH <span class="italic">expression</span>...
</pre>
<p>Enter one expression for each target column, listing the expressions in the same order they appear in the row definition. Separate expressions with spaces or commas.You must enter the entire statement on one line, without line breaks or continuation marks of any type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHJADBF">&#34;Using FETCH in the olap_command Parameter&#34;</a></div>
<p class="subhead2"><a id="CIHIHFHJ"></a><a id="OLADM2962"></a>Order of Processing in OLAP_TABLE</p>
<p>The <a id="sthref5372"></a>following list identifies the order in which the <code dir="ltr">OLAP_TABLE</code> function processes instructions in the limit map that can change the status of dimensions in the analytic workspace.</p>
<ol>
<li id="CIAECJAA">
<p>Execute any OLAP DML command specified in the <code dir="ltr">PREDMLCMD</code> parameter of the limit map.</p>
</li>
<li id="CIAJBFFG">
<p>Save the current status of all dimensions in the limit map so that it can be restored later (<code dir="ltr">PUSH</code> status).</p>
</li>
<li id="CIAHDEIJ">
<p>Keep in status only those dimension members specified by <code dir="ltr">INHIERARCHY</code> subclauses in the limit map (<code dir="ltr">LIMIT KEEP</code>).</p>
</li>
<li id="CIAEHGAJ">
<p>Within the status set during step <a href="#CIAHDEIJ">3</a>, keep only those dimension members that satisfy the <code dir="ltr">WHERE</code> clause of the SQL <code dir="ltr">SELECT</code> statement containing the <code dir="ltr">OLAP_TABLE</code> function (<code dir="ltr">LIMIT KEEP</code>).</p>
</li>
<li id="CIABCEHE">
<p>Execute any OLAP DML command specified in the <span class="italic">olap_command</span> parameter of the <code dir="ltr">OLAP_TABLE</code> function. (If <span class="italic">olap_command</span> includes a <code dir="ltr">FETCH</code>, fetch the data.)</p>
</li>
<li>
<p>Fetch the data (unless an OLAP DML <code dir="ltr">FETCH</code> command was specified in the <span class="italic">olap_command</span> parameter).</p>
</li>
<li>
<p>Restore the status of all dimensions in the limit map (<code dir="ltr">POP</code> status).</p>
</li>
<li id="CIAGIIEA">
<p>Execute any OLAP DML command specified in the <code dir="ltr">POSTDMLCMD</code> parameter of the limit map.</p>
</li>
</ol>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i79406"></a>Examples</p>
<p>Because different applications have different requirements, several different formats are commonly used for fetching data into SQL from an analytic workspace. <a id="sthref5373"></a>The examples in this section show how to create views using a variety of different formats.</p>
<p>Although these examples are shown as views, the <code dir="ltr">SELECT</code> statements can be extracted from them and used directly to fetch data from an analytic workspace into an application.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The examples in this section use predefined ADTs. You could modify them to use automatic ADTs. See <a href="#CIHGDBCB">&#34;Using OLAP_TABLE With Automatic ADTs&#34;</a>.</div>
<div id="OLADM2963" class="example">
<p class="titleinexample"><a id="i81531"></a>Example A-5 Script for an Embedded Total Dimension View Using OLAP_TABLE</p>
<p><a id="sthref5374"></a><a id="sthref5375"></a>This example shows the PL/SQL script used to create an embedded total view of the <code dir="ltr">TIME</code> dimension in an analytic workspace named MYAW. This view is similar to the view in <a href="#CHDFJHHA">Example A-2, &#34;Sample View of the TIME Dimension Using Predefined ADTs&#34;</a>, but it specifies both a Calendar and a Fiscal hierarchy, and it includes <code dir="ltr">HATTRIBUTE</code> subclauses for hierarchy-specific End Date attributes.</p>
<p>The <code dir="ltr">INHIERARCHY</code> subclause identifies a valueset in the analytic workspace that lists all the dimension members in each hierarchy of a dimension. <code dir="ltr">OLAP_TABLE</code> saves the status of all dimensions in the limit map that have <code dir="ltr">INHIERARCHY</code> subclauses during the processing of the limit map. See <a href="#CIHIHFHJ">&#34;Order of Processing in OLAP_TABLE&#34;</a>.</p>
<pre dir="ltr">CREATE TYPE awtime_row AS OBJECT (
             awtime_id               VARCHAR2(12),
             awtime_short_label      VARCHAR2(12),
             awtime_cal_end_date     DATE,
             awtime_fis_end_date     DATE);
/
CREATE TYPE awtime_table AS TABLE OF awtime_row;
/
CREATE OR REPLACE VIEW awtime_view AS
   SELECT awtime_id, awtime_short_label, 
          awtime_cal_end_date, awtime_fis_end_date
      FROM TABLE(OLAP_TABLE(
         &#39;myaw DURATION SESSION&#39;,
         &#39;awtime_table&#39;, 
         &#39;&#39;,
         &#39;DIMENSION awtime_id FROM time WITH 
             HIERARCHY time_parentrel 
                (time_hierlist &#39;&#39;CALENDAR&#39;&#39;)
                INHIERARCHY time_inhier
                HATTRIBUTE awtime_cal_end_date  FROM time_cal_end_date
             HIERARCHY time_parentrel 
                (time_hierlist &#39;&#39;FISCAL&#39;&#39;)
                INHIERARCHY time_inhier
                HATTRIBUTE awtime_fis_end_date  FROM time_fis_end_date
          ATTRIBUTE awtime_short_label  FROM time_short_description&#39;));
/
SQL&gt;SELECT * FROM awtime_view;

AWTIME_ID  AWTIME_SHORT_LABEL  AWTIME_CAL_END_DATE  AWTIME_FIS_END_DATE
---------  ------------------  -------------------  -------------------  
19         Jan-98              31-JAN-98            31-JAN-98
20         Feb-98              28-FEB-98            28-FEB-98
21         Mar-98              31-MAR-98            31-MAR-98
22         Apr-98              30-APR-98            30-APR-98
23         May-98              31-MAY-98            31-MAY-98
24         Jun-98              30-JUN-98            30-JUN-98
.                                                            
.                                                            
.                                                            
.                                                            
98         Q1-03               31-MAR-03            30-SEP-03
99         Q2-03               30-JUN-03            31-DEC-03
1          1998                31-DEC-98            30-JUN-99
102        2003                31-DEC-03            30-JUN-04
119        2004                31-DEC-04            30-JUN-05
2          1999                31-DEC-99            30-JUN-00
3          2000                31-DEC-00            30-JUN-01
4          2001                31-DEC-01            30-JUN-02
85         2002                31-DEC-02            30-JUN-03
</pre>
<p>Note that you must be sure to verify that you have created the views correctly by issuing <code dir="ltr">SELECT</code> statements against them. Only at that time do any errors in the call to <code dir="ltr">OLAP_TABLE</code> appear.</p>
</div>
<!-- class="example" -->
<div id="OLADM2964" class="example">
<p class="titleinexample"><a id="i81942"></a>Example A-6 Creating a View of an Embedded Total Measure Using OLAP_TABLE</p>
<p><a id="sthref5376"></a>In <a id="sthref5377"></a>a star schema, a separate measure view is needed with columns that can be joined to each of the dimension views. This example shows the PL/SQL script used to create a measure view with a column populated by a <code dir="ltr">ROW2CELL</code> clause to support custom measures. For information on ROW2CELL, <a href="#CIHGCEGC">&#34;<span class="bold">ROW2CELL Clause</span>&#34;</a>.</p>
<pre dir="ltr">CREATE TYPE awunits_row AS OBJECT (
             awtime                  VARCHAR2(12),
             awcustomer              VARCHAR2(30),
             awproduct               VARCHAR2(30),
             awchannel               VARCHAR2(30),
             awunits                 NUMBER(16),
             r2c                     RAW(32));
/
CREATE TYPE awunits_table AS TABLE OF awunits_row;
/
CREATE OR REPLACE VIEW awunits_view AS
   SELECT awunits,
          awtime, awcustomer, awproduct, awchannel, r2c 
      FROM TABLE(OLAP_TABLE(
         &#39;myaw DURATION SESSION&#39;, 
         &#39;awunits_table&#39;, 
         &#39;&#39;,
         &#39;MEASURE awunits FROM units_cube_units
          DIMENSION awtime FROM time WITH
             HIERARCHY time_parentrel
          DIMENSION awcustomer FROM customer WITH 
             HIERARCHY customer_parentrel
                       (customer_hierlist &#39;&#39;MARKET_ROLLUP&#39;&#39;)
                INHIERARCHY customer_inhier
          DIMENSION awproduct FROM product WITH
             HIERARCHY product_parentrel
          DIMENSION channel WITH
             HIERARCHY channel_parentrel
             ATTRIBUTE  awchannel FROM channel_short_description
          ROW2CELL r2c&#39;))
      WHERE awunits IS NOT NULL;

SQL&gt;SELECT awchannel, awunits FROM awunits_view 
     WHERE    awproduct = &#39;1&#39;
     AND      awcustomer = &#39;7&#39;
     AND      awtime = &#39;4&#39;;

AWCHANNEL            AWUNITS
---------            -------
All Channels         415392
Direct Sales         43783 
Catalog              315737
Internet             55872 
</pre></div>
<!-- class="example" -->
<div id="OLADM2965" class="example">
<p class="titleinexample"><a id="i82078"></a>Example A-7 Script for a Rollup View of Products Using OLAP_TABLE</p>
<p><a id="sthref5378"></a>Rollup form uses a column for each hierarchy level to show the full parentage of each dimension member. The only difference between the syntax for rollup form and the syntax for embedded total form is the addition of a <code dir="ltr">FAMILYREL</code> clause in the definition of each dimension in the limit map. For information on <code dir="ltr">FAMILYREL</code>, see <a href="#CIHIABAB">&#34;<span class="bold">WITH HIERARCHY Subclause</span>&#34;</a>.</p>
<p>This example shows the PL/SQL script used to create a rollup view of the <code dir="ltr">PRODUCT</code> dimension. It shows a dimension view to highlight the differences in the syntax of the limit map from the one used for the embedded total form, as shown in <a href="#i81531">Example A-5, &#34;Script for an Embedded Total Dimension View Using OLAP_TABLE&#34;</a>. Note that the target columns for these levels are listed in the <code dir="ltr">FAMILYREL</code> clause from most aggregate (<code dir="ltr">CLASS</code>) to least aggregate (<code dir="ltr">ITEM</code>), which is the order they are listed in the level list dimension. The family relation returns four columns. The most aggregate level (all products) is omitted from the view by mapping it to null.</p>
<p><a href="#i84331">Example A-8, &#34;Script Using QDRs in the FAMILYREL Clause of OLAP_TABLE&#34;</a> shows the alternate syntax for the <code dir="ltr">FAMILYREL</code> clause, which uses QDRs to identify exactly which columns are mapped from the family relation.</p>
<p>The limit maps in <a href="#i82078">Example A-7</a> and <a href="#i84331">Example A-8</a> generate identical views.</p>
<pre dir="ltr">CREATE TYPE awproduct_row AS OBJECT (  
            class       VARCHAR2(50),
            family      VARCHAR2(50),
            item        VARCHAR2(50));
/
CREATE TYPE awproduct_table AS TABLE OF awproduct_row;
/
CREATE OR REPLACE VIEW awproduct_view AS
   SELECT class, family, item
      FROM TABLE(OLAP_TABLE(
         &#39;myaw DURATION QUERY&#39;,
         &#39;awproduct_table&#39;, 
         &#39;&#39;,
         &#39;DIMENSION product WITH 
            HIERARCHY product_parentrel
               FAMILYREL null, class, family, item
                  FROM product_familyrel USING product_levellist
                  LABEL product_short_description&#39;)); 

SQL&gt; SELECT * FROM awproduct_view 
              ORDER BY class, family, item;

CLASS            FAMILY             ITEM
--------------   ----------------   ------------------------
Hardware          CD-ROM             Envoy External 6X CD-ROM  
Hardware          CD-ROM             Envoy External 8X CD-ROM  
Hardware          CD-ROM             External 6X CD-ROM  
Hardware          CD-ROM             External 8X CD-ROM  
Hardware          CD-ROM             Internal 6X CD-ROM  
Hardware          CD-ROM             Internal 8X CD-ROM  
Hardware          CD-ROM             
Hardware          Desktop PCs        Sentinel Financial  
Hardware          Desktop PCs        Sentinel Multimedia  
.
.
.
Software/Other   Operating Systems  UNIX/Windows 1-user pack  
Software/Other   Operating Systems  UNIX/Windows 5-user pack  
Software/Other   Operating Systems     
Software/Other
</pre></div>
<!-- class="example" -->
<div id="OLADM2966" class="example">
<p class="titleinexample"><a id="i84331"></a>Example A-8 Script Using QDRs in the FAMILYREL Clause of OLAP_TABLE</p>
<pre dir="ltr">CREATE OR REPLACE TYPE awproduct_row AS OBJECT (
             class       VARCHAR2(50),
             family      VARCHAR2(50),
             item        VARCHAR2(50));
/
CREATE TYPE awproduct_table AS TABLE OF awproduct_row;
/
CREATE OR REPLACE VIEW awproduct_view AS
   SELECT class, family, item
      FROM TABLE(OLAP_TABLE(
         &#39;myaw DURATION QUERY&#39;,
         &#39;awproduct_table&#39;, 
         &#39;&#39;,
         &#39;DIMENSION product WITH 
            HIERARCHY product_parentrel
               FAMILYREL class, family, item FROM
                  product_familyrel(product_levellist &#39;&#39;CLASS&#39;&#39;),
                  product_familyrel(product_levellist &#39;&#39;FAMILY&#39;&#39;),
                  product_familyrel(product_levellist &#39;&#39;ITEM&#39;&#39;)
                  LABEL product_short_description&#39;)); 

SQL&gt; SELECT * FROM awproduct_view 
              ORDER BY by class, family, item;

CLASS            FAMILY             ITEM
--------------   ----------------   ------------------------  
Hardware          CD-ROM             Envoy External 6X CD-ROM  
Hardware          CD-ROM             Envoy External 8X CD-ROM  
Hardware          CD-ROM             External 6X CD-ROM  
Hardware          CD-ROM             External 8X CD-ROM  
Hardware          CD-ROM             Internal 6X CD-ROM  
Hardware          CD-ROM             Internal 8X CD-ROM  
Hardware          CD-ROM             
Hardware          Desktop PCs        Sentinel Financial  
Hardware          Desktop PCs        Sentinel Multimedia  
.                                                 
.                                                 
.                                                 
Software/Other   Operating Systems  UNIX/Windows 1-user pack  
Software/Other   Operating Systems  UNIX/Windows 5-user pack  
Software/Other   Operating Systems     
Software/Other
</pre></div>
<!-- class="example" -->
<div id="OLADM2967" class="example">
<p class="titleinexample"><a id="CIAEAGIH"></a>Example A-9 Script Using FETCH with OLAP_TABLE</p>
<p><a id="sthref5379"></a><a id="sthref5380"></a>Oracle Express Server applications that are being revised for use with Oracle Database can use an OLAP DML <a href="dml_commands_1.htm#g1037946">FETCH</a> command instead of a limit map to map workspace objects to relational columns.</p>
<p>The <code dir="ltr">FETCH</code> command is supplied in the third parameter of <code dir="ltr">OLAP_TABLE</code>, which specifies a single OLAP DML command. See <a href="#CIHFFIBI"><span class="italic">olap_command</span></a>.</p>
<p>The script that follows fetches data from two variables (<code dir="ltr">SALES</code> and <code dir="ltr">COST</code>) in an analytic workspace named <code dir="ltr">MYAW</code>, and calculates two custom measures (<code dir="ltr">COST_PRIOR_PERIOD</code> and <code dir="ltr">PROFIT</code>). This example also shows the use of <code dir="ltr">OLAP_TABLE</code> directly by an application, without creating a view.</p>
<p>Note that the <code dir="ltr">FETCH</code> statement in the following example is formatted with indentation for readability. In reality, the entire <code dir="ltr">FETCH</code> statement must be entered on one line, without line breaks or continuation characters</p>
<pre dir="ltr">CREATE TYPE measure_row AS OBJECT (
             time                       VARCHAR2(20),
             geography                  VARCHAR2(30),
             product                    VARCHAR2(30),
             channel                    VARCHAR2(30),
             sales                      NUMBER(16),
             cost                       NUMBER(16),
             cost_prior_period          NUMBER(16),
             profit                     NUMBER(16));
/   
CREATE TYPE measure_table AS TABLE OF measure_row;
/
SELECT time, geography, product, channel, 
       sales, cost, cost_prior_period, profit
          FROM TABLE(OLAP_TABLE(
             &#39;xademo DURATION SESSION&#39;, 
             &#39;measure_table&#39;, 
             &#39;FETCH time, geography, product, channel, analytic_cube_f.sales, 
                    analytic_cube_f.costs, 
                    LAG(analytic_cube_f.costs, 1, time, LEVELREL time_member_levelrel),
                    analytic_cube_f.sales - analytic_cube_f.costs&#39;,
             &#39;&#39;))
          WHERE channel =    &#39;STANDARD_2.TOTALCHANNEL&#39; AND
                product =    &#39;L1.TOTALPROD&#39; AND
                geography =  &#39;L1.WORLD&#39;
          ORDER BY time;
</pre>
<p>This SQL <code dir="ltr">SELECT</code> statement returns the following result set:<a id="sthref5381"></a></p>
<pre dir="ltr">TIME      GEOGRAPHY PRODUCT      CHANNEL                 SALES       COST    COST_PRIOR_PERIOD    PROFIT
--------- --------- ------------ ----------------------- --------- --------- ------------------ --------
L1.1996   L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL 118247112   2490243                   115756869
L1.1997   L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  46412113   1078031          2490243   45334082
L2.Q1.96  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  26084848    560379                    25524469
L2.Q1.97  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  26501765    615399           560379   25886367
L2.Q2.96  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  30468054    649004           615399   29819049
L2.Q2.97  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  19910347    462632           649004   19447715
L2.Q3.96  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  27781702    582693           462632   27199009
L2.Q4.96  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  33912508    698166           582693   33214342
L3.APR96  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL   8859808    188851                     8670957
                                              .
                                              .
                                              .
27 rows selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHJHDCH"></a>
<div id="OLADM941" class="refsect1">
<h2 class="refsect1">OLAP_CONDITION</h2>
<p><a id="ABC1700185"></a><code dir="ltr">OLAP_CONDITION</code> is a SQL <a id="ABC1697210"></a>function that dynamically executes an OLAP DML command during a query of an analytic workspace.<a id="sthref5382"></a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li><a href="#g1004021">OLAP_TABLE</a> and <a href="#CHDEBBGF">&#34;Modifying an Analytic Workspace From Within a SELECT FROM OLAP_TABLE Statement&#34;</a></li>
</ul>
</div>
<p>The <code dir="ltr">OLAP_CONDITION</code> function executes an OLAP DML command at one of three entry points in the limit map used in a call to <code dir="ltr">OLAP_TABLE</code> as described in <a href="#CHDFHEID">&#34;Entry Points for OLAP_CONDITION in the OLAP_TABLE Limit Map&#34;</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL Worksheet.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5383"></a>Returns</p>
<p>The number <code dir="ltr">1</code> to indicate a successful invocation of <code dir="ltr">OLAP_CONDITION</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5384"></a>Syntax</p>
<pre dir="ltr">OLAP_CONDITION(
          r2c          IN   RAW(32),
          expression   IN   VARCHAR2,
          event        IN   NUMBER DEFAULT 1);
      RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5385"></a>Parameters</p>
<dl>
<dt><span class="italic">r2c</span></dt>
<dd>
<p>The name of a column specified by a <code dir="ltr">ROW2CELL</code> <a id="sthref5386"></a>clause in the limit map. This parameter is used by <code dir="ltr">OLAP_CONDITION</code> to identify a particular invocation of <code dir="ltr">OLAP_TABLE</code>.</p>
<p>The <code dir="ltr">ROW2CELL</code> column is used in the processing of the single-row functions. (See <a href="#BGBGDDDF">&#34;OLAP_EXPRESSION&#34;</a>) <code dir="ltr">OLAP_CONDITION</code> simply uses it as an identifier.</p>
<p>For information on creating a <code dir="ltr">ROW2CELL</code> column, see <a href="#CIHGCEGC">&#34;<span class="bold">ROW2CELL Clause</span>&#34;</a>.</p>
</dd>
<dt><span class="italic">expression</span></dt>
<dd>
<p>A single OLAP DML command to be executed within the context of the <code dir="ltr">OLAP_TABLE</code> function identified by the <span class="italic">r2c</span> parameter</p>
</dd>
<dt><span class="italic">event</span></dt>
<dd>
<p>The event during <code dir="ltr">OLAP_TABLE</code> processing that triggers the execution of the OLAP DML command specified by the <span class="italic">expression</span> parameter. This parameter can have the value 0, 1, or 2, as described in <a href="#CIHFDFAG">Table A-3</a></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CIHJHHFF"></a>Usage Notes</p>
<p class="subhead2"><a id="CHDFHEID"></a><a id="OLADM2968"></a>Entry Points for OLAP_CONDITION in the OLAP_TABLE Limit Map</p>
<p>Parameters of <code dir="ltr">OLAP_CONDITION</code> identify an invocation of <code dir="ltr">OLAP_TABLE</code>, specify an entry point in the limit map, and provide the OLAP DML command to be executed at that entry point.</p>
<p>The target limit map must include a <code dir="ltr"><a id="sthref5387"></a>ROW2CELL</code> column. <code dir="ltr">OLAP_CONDITION</code> uses this column to identify an instance of <code dir="ltr">OLAP_TABLE</code>. Within that instance <code dir="ltr">OLAP_CONDITION</code> executes the OLAP DML command at one of three possible entry points. The entry point that you specify determines whether the condition affects the data returned by the query and whether the condition remains in effect upon completion of the query.</p>
<p><code dir="ltr">OLAP_CONDITION</code> can be triggered at any of the following points:</p>
<ul>
<li>
<p>Before the status of the dimensions in the limit map is saved (which occurs before the result set is calculated).</p>
</li>
<li>
<p>After the result set has been calculated and before it is fetched. (Default)</p>
</li>
<li>
<p>After the result set has been fetched and the status of the dimensions in the limit map has been restored.</p>
</li>
</ul>
<p>The entry points for <code dir="ltr">OLAP_CONDITION</code> are described in <a href="#CIHFDFAG">Table A-3</a>. Refer to <a href="#CIHIHFHJ">&#34;Order of Processing in OLAP_TABLE&#34;</a> to determine where each entry point occurs.</p>
<div id="OLADM2969" class="tblformal">
<p class="titleintable"><a id="sthref5388"></a><a id="CIHFDFAG"></a>Table A-3 Entry Points for OLAP_CONDITION in the OLAP_TABLE Limit Map</p>
<table class="cellalignment3618" title="Entry Points for OLAP_CONDITION in the OLAP_TABLE Limit Map " summary="The entry points in the OLAP_TABLE limit map used by the OLAP_CONDITION function" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t20">Entry Point</th>
<th class="cellalignment3616" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t20" headers="r1c1-t20">
<p>0</p>
</td>
<td class="cellalignment3617" headers="r2c1-t20 r1c2-t20">
<p>Execute the OLAP DML command after the <code dir="ltr">PREDMLCMD</code> clause of the limit map is processed and before the status of the dimensions in the limit map is saved.</p>
<p>The entry point is between steps <a href="#CIAECJAA">1</a> and <a href="#CIAJBFFG">2</a> in <a href="#CIHIHFHJ">&#34;Order of Processing in OLAP_TABLE&#34;</a>.</p>
<p>If <code dir="ltr">OLAP_CONDITION</code> limits any of the dimensions in the limit map, the limits remain in the workspace after the execution of <code dir="ltr">OLAP_TABLE</code> (unless a command in the <code dir="ltr">POSTDMLCMD</code> clause of the limit map changes the status).</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t20" headers="r1c1-t20">
<p>1</p>
</td>
<td class="cellalignment3617" headers="r3c1-t20 r1c2-t20">
<p>Execute the OLAP DML command after the conditions of the <code dir="ltr">WHERE</code> clause are satisfied and before the data is fetched. (Default.)</p>
<p>The entry point is between steps <a href="#CIAEHGAJ">4</a> and <a href="#CIABCEHE">5</a> in <a href="#CIHIHFHJ">&#34;Order of Processing in OLAP_TABLE&#34;</a>.</p>
<p>If an OLAP DML command (other than <code dir="ltr">FETCH</code>) is specified in the <span class="italic">olap_command</span> parameter of <code dir="ltr">OLAP_TABLE</code>, it is executed after <code dir="ltr">OLAP_CONDITION</code> and before the data is fetched. (The use of a <code dir="ltr">FETCH</code> command in the <span class="italic">olap_command</span> parameter, or in <code dir="ltr">OLAP_CONDITION</code> itself, is not generally recommended. See <a href="#CIHJADBF">&#34;Using FETCH in the olap_command Parameter&#34;</a>.)</p>
<p>If <code dir="ltr">OLAP_CONDITION</code> limits any of the dimensions in the limit map, the limits remain in effect for the duration of the query only.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t20" headers="r1c1-t20">
<p>2</p>
</td>
<td class="cellalignment3617" headers="r4c1-t20 r1c2-t20">
<p>Execute the OLAP DML command after the data is fetched and the status of dimensions in the limit map has been restored.</p>
<p>The entry point is after step <a href="#CIAGIIEA">8</a> in <a href="#CIHIHFHJ">&#34;Order of Processing in OLAP_TABLE&#34;</a>.</p>
<p>If <code dir="ltr">OLAP_CONDITION</code> limits any dimensions, the <a id="sthref5389"></a>limits remain in the <a id="sthref5390"></a>analytic workspace after the query completes.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CIHIDIHF"></a>Examples</p>
<p>Several sample queries using <code dir="ltr">OLAP_CONDITION</code> are shown in <a href="#CIHGDABH">Example A-11, &#34;Queries of UNIT_COST_PRICE_VIEW Using OLAP_CONDITION&#34;</a>. These examples use the <code dir="ltr">PRICE_CUBE</code> in an analytic workspace named<code dir="ltr">MYAW</code>. The cube has a time dimension, a product dimension, and measures for unit cost and unit price.</p>
<p>The examples are based on a view called <code dir="ltr">unit_cost_price_view</code>. The SQL for creating this view is shown in <a href="#CIHGHICF">Example A-10, &#34;View of PRICE_CUBE&#34;</a>. For information about creating views of analytic workspaces, see <a href="#CIHIFEAD">&#34;Creating Relational Views Using OLAP_TABLE&#34;</a>.</p>
<div id="OLADM2970" class="example">
<p class="titleinexample"><a id="CIHGHICF"></a>Example A-10 View of PRICE_CUBE</p>
<pre dir="ltr">-- Create the logical row
SQL&gt;CREATE TYPE unit_cost_price_row AS OBJECT (
            aw_unit_cost          NUMBER,
            aw_unit_price         NUMBER,
            aw_product            VARCHAR2(50),
            aw_product_gid        NUMBER(10),
            aw_time               VARCHAR2(20),
            aw_time_gid           NUMBER(10),
            r2c                   RAW(32));

-- Create the logical table
SQL&gt;CREATE TYPE unit_cost_price_table AS TABLE OF unit_cost_price_row;

-- Create the view
SQL&gt;CREATE OR REPLACE VIEW unit_cost_price_view AS
    SELECT aw_unit_cost, aw_unit_price, aw_product, aw_product_gid,
           aw_time, aw_time_gid, r2c 
      FROM TABLE(OLAP_TABLE(
         &#39;myaw DURATION SESSION&#39;,
         &#39;unit_cost_price_table&#39;, 
         &#39;&#39;,
         &#39;MEASURE aw_unit_cost  FROM price_cube_unit_cost
          MEASURE aw_unit_price FROM price_cube_unit_price
          DIMENSION product WITH 
             HIERARCHY product_parentrel
                INHIERARCHY product_inhier
                GID aw_product_gid FROM product_gid
             ATTRIBUTE aw_product FROM product_short_description
          DIMENSION time WITH 
             HIERARCHY time_parentrel
                INHIERARCHY time_inhier
                GID aw_time_gid FROM time_gid
             ATTRIBUTE aw_time FROM time_short_description
          ROW2CELL r2c&#39;));

-- query the view
SQL&gt;SELECT * FROM unit_cost_price_view 
             WHERE aw_product = &#39;Hardware&#39;
             AND aw_time in (&#39;2000&#39;, &#39;2001&#39;, &#39;2002&#39;, &#39;2003&#39;)
             ORDER BY aw_time;

AW_UNIT_COST AW_UNIT_PRICE AW_PRODUCT AW_PRODUCT_GID AW_TIME AW_TIME_GID R2C
------------ ------------- ---------- -------------- ------- ----------- -----
   211680.12    224713.71  Hardware                3 2000             3  00...
   195591.60    207513.16  Hardware                3 2001             3  00...
   184413.05    194773.78  Hardware                3 2002             3  00...
    73457.31     77275.06  Hardware                3 2003             3  00...
</pre></div>
<!-- class="example" -->
<div id="OLADM2971" class="example">
<p class="titleinexample"><a id="CIHGDABH"></a>Example A-11 Queries of UNIT_COST_PRICE_VIEW Using OLAP_CONDITION</p>
<p>The queries in this example use <code dir="ltr">OLAP_CONDITION</code> to modify the query of <code dir="ltr">UNIT_COST_PRICE_VIEW</code> in <a href="#CIHGHICF">Example A-10, &#34;View of PRICE_CUBE&#34;</a>. In each query, <code dir="ltr">OLAP_CONDITION</code> uses a different entry point to limit the <code dir="ltr">TIME</code> dimension to the year 2000.</p>
<p>In the first query, <code dir="ltr">OLAP_CONDIITON</code> uses entry point 0. The limited data is returned by <code dir="ltr">OLAP_TABLE</code>, and the limit remains in effect in the analytic workspace.</p>
<pre dir="ltr">SQL&gt;SELECT * FROM unit_cost_price_view 
             WHERE aw_product = &#39;Hardware&#39;
             AND aw_time in (&#39;2000&#39;, &#39;2001&#39;, &#39;2002&#39;, &#39;2003&#39;)
             AND OLAP_CONDITION(r2c, 
                       &#39;limit time to time_short_description eq &#39;&#39;2000&#39;&#39;&#39;, 0)=1
             ORDER BY aw_time;

AW_UNIT_COST AW_UNIT_PRICE AW_PRODUCT AW_PRODUCT_GID AW_TIME AW_TIME_GID R2C
------------ ------------- ---------- -------------- ------- ----------- -----
   211680.12    224713.71  Hardware                3 2000             3  00...

--Check status in the analytic workspace
SQL&gt;exec dbms_aw.execute(&#39;rpr time_short_description&#39;);

TIME     TIME_SHORT_DESCRIPTION 
----     ----------------------
  3      2000 

-- Reset status
SQL&gt;exec dbms_aw.execute(&#39;allstat&#39;);
</pre>
<p>In the next query, <code dir="ltr">OLAP_CONDIITON</code> uses entry point 1. The limited data is returned by <code dir="ltr">OLAP_TABLE</code>, but the limit does not remain in effect in the analytic workspace.</p>
<p>Note that the third parameter is not required in this case, because entry point 1 is the default.</p>
<pre dir="ltr">SQL&gt;SELECT * FROM unit_cost_price_view 
             WHERE aw_product = &#39;Hardware&#39;
             AND aw_time in (&#39;2000&#39;, &#39;2001&#39;, &#39;2002&#39;, &#39;2003&#39;)
             AND OLAP_CONDITION(r2c, 
                       &#39;limit time to time_short_description eq &#39;&#39;2000&#39;&#39;&#39;, 1)=1
             ORDER BY aw_time;

AW_UNIT_COST AW_UNIT_PRICE AW_PRODUCT AW_PRODUCT_GID AW_TIME AW_TIME_GID R2C
------------ ------------- ---------- -------------- ------- ----------- -----
   211680.12    224713.71  Hardware                3 2000             3  00...

--Check status in the analytic workspace
SQL&gt;exec dbms_aw.execute(&#39;rpr time_short_description&#39;);

TIME     TIME_SHORT_DESCRIPTION 
----     ----------------------
 19      Jan-98 
 20      Feb-98 
 21      Mar-98 
 22      Apr-98 
.        
.        
.        
  1      1998 
  2      1999 
  3      2000 
  4      2001 
 85      2002 
102      2003 
119      2004 

-- Reset status
SQL&gt;exec dbms_aw.execute(&#39;allstat&#39;);
</pre>
<p>In the final query, <code dir="ltr">OLAP_CONDIITON</code> uses entry point 2. The limit does not affect the data returned by <code dir="ltr">OLAP_TABLE</code>, but the limit remains in effect in the analytic workspace.</p>
<pre dir="ltr">SQL&gt;SELECT * FROM unit_cost_price_view 
             WHERE aw_product = &#39;Hardware&#39;
             AND aw_time in (&#39;2000&#39;, &#39;2001&#39;, &#39;2002&#39;, &#39;2003&#39;)
             AND OLAP_CONDITION(r2c, 
                       &#39;limit time to time_short_description eq &#39;&#39;2000&#39;&#39;&#39;, 2)=1
             ORDER BY aw_time;

AW_UNIT_COST AW_UNIT_PRICE AW_PRODUCT AW_PRODUCT_GID AW_TIME AW_TIME_GID R2C
------------ ------------- ---------- -------------- ------- ----------- -----
   211680.12    224713.71  Hardware                3 2000             3  00...
   195591.60    207513.16  Hardware                3 2001             3  00...
   184413.05    194773.78  Hardware                3 2002             3  00...
    73457.31     77275.06  Hardware                3 2003             3  00...

--Check status in the analytic workspace
SQL&gt;exec dbms_aw.execute(&#39;rpr time_short_description&#39;);

TIME     TIME_SHORT_DESCRIPTION 
----     ----------------------
  3      2000 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGBGDDDF"></a>
<div id="OLADM942" class="refsect1">
<h2 class="refsect1">OLAP_EXPRESSION</h2>
<p><a id="sthref5391"></a><a id="sthref5392"></a><a id="ABC1703943"></a><a id="ABC1703972"></a><code dir="ltr">OLAP_EXPRESSION</code> is a SQL function that dynamically executes an OLAP DML boolean expression within the context of an <code dir="ltr">OLAP_TABLE</code> function. In addition to returning a custom measure, you can use this function in the <code dir="ltr">WHERE</code> and <code dir="ltr">ORDER BY</code> clauses to modify the result set of the query of the analytic workspace.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDHDDDI">&#34;Using OLAP DML Expressions in SELECT FROM OLAP_TABLE Statements&#34;</a> and <a href="#CHDDACJH">&#34;Adding Calculated Columns to the Relational View&#34;</a></div>
<p><code dir="ltr">OLAP_EXPRESSION_TEXT</code> returns character data. To return text, boolean, or date data, use <a href="#BCEEBEIH">OLAP_EXPRESSION_TEXT</a>, <a href="#BHBDCEJH">OLAP_EXPRESSION_BOOL</a>, or <a href="#CIAHHEDB">OLAP_EXPRESSION_DATE</a> SQL functions.</p>
<p>Before you use this function, you must specify a <code dir="ltr"><a id="sthref5393"></a>ROW2CELL</code> clause in the limit map used by <code dir="ltr">OLAP_TABLE</code>. <code dir="ltr">ROW2CELL</code> identifies a <code dir="ltr">RAW</code> column that <code dir="ltr">OLAP_TABLE</code> populates with information used by the OLAP single-row functions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL Worksheet.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5394"></a>Returns</p>
<p>An evaluation of <span class="italic">numeric_expression</span> for each row of the table object returned by the <code dir="ltr">OLAP_TABLE</code> function.</p>
<p><code dir="ltr">OLAP_EXPRESSION</code> returns numeric data. To return text, boolean, or date data, <a id="sthref5395"></a>use the <code dir="ltr">OLAP_EXPRESSION_TEXT</code>, <code dir="ltr">OLAP_EXPRESSION_BOOL</code>, or <code dir="ltr">OLAP_EXPRESSION_DATE</code> functions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5396"></a>Syntax</p>
<pre dir="ltr">OLAP_EXPRESSION(
          r2c                  IN   RAW(32),
          numeric_expression   IN   VARCHAR2)
      RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5397"></a>Parameters</p>
<dl>
<dt><span class="italic">r2c</span></dt>
<dd>
<p>The name of a column specified by a <code dir="ltr">ROW2CELL</code> clause in the limit map.<a id="sthref5398"></a> See <a href="#CIHGCEGC">&#34;<span class="bold">ROW2CELL Clause</span>&#34;</a> of OLAP_TABLE.</p>
</dd>
<dt><span class="italic">numeric_expression</span></dt>
<dd>
<p>An OLAP DML expression that returns a numeric result.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_expression.htm#i1012610">&#34;Numeric Expressions&#34;</a>, <a href="dml_functions_1.htm#CJAGEFHJ">Chapter 7, &#34;OLAP DML Functions: A - K&#34;</a>, <a href="dml_functions_2.htm#CHDBBGJA">Chapter 8, &#34;OLAP DML Functions: L - Z&#34;</a>, and <a href="dml_app_dbms_aw.htm#CHDIJEGA">&#34;Guidelines for Using Quotation Marks in OLAP DML Commands&#34;</a></div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5399"></a>Examples</p>
<p>The <a id="ABC1969636"></a>following script was used to create the view <code dir="ltr">unit_cost_price_view</code>, which is used in <a href="#CHDHDGAA">Example A-12, &#34;OLAP_EXPRESSION: Time Series Function in a WHERE Clause&#34;</a> and <a href="#CHDFFBHI">Example A-13, &#34;OLAP_EXPRESSION: Numeric Calculation in an ORDER BY CLause&#34;</a> to illustrate the use of <code dir="ltr">OLAP_EXPRESSION</code>. For information about creating views of analytic workspaces, see <a href="#CIHIFEAD">&#34;Creating Relational Views Using OLAP_TABLE&#34;</a>.</p>
<p class="subhead2"><a id="CHDCJFDB"></a><a id="OLADM2972"></a>Sample View: MYAW.UNIT_COST_PRICE_VIEW</p>
<pre dir="ltr">-- Create the logical row
CREATE TYPE unit_cost_price_row AS OBJECT (
            aw_unit_cost          NUMBER,
            aw_unit_price         NUMBER,
            aw_product            VARCHAR2(50),
            aw_time               VARCHAR2(20),
            r2c                   RAW(32));
/
-- Create the logical table
CREATE TYPE unit_cost_price_table AS TABLE OF unit_cost_price_row;
/
-- Create the view
CREATE OR REPLACE VIEW unit_cost_price_view AS
    SELECT aw_unit_cost, aw_unit_price, aw_product, aw_time, r2c
      FROM TABLE(OLAP_TABLE(
         &#39;myaw DURATION SESSION&#39;,
         &#39;unit_cost_price_table&#39;, 
         &#39;&#39;,
         &#39;MEASURE aw_unit_cost  FROM price_cube_unit_cost
          MEASURE aw_unit_price FROM price_cube_unit_price
          DIMENSION product WITH 
             HIERARCHY product_parentrel
                INHIERARCHY product_inhier
             ATTRIBUTE aw_product FROM product_short_description
          DIMENSION time WITH 
             HIERARCHY time_parentrel
                INHIERARCHY time_inhier
             ATTRIBUTE aw_time FROM time_short_description
          ROW2CELL r2c&#39;));
/
</pre>
<p>The following query shows some aggregate data in the view.</p>
<pre dir="ltr">SQL&gt;SELECT * FROM unit_cost_price_view 
             WHERE aw_product = &#39;Hardware&#39;
             AND aw_time in (&#39;2000&#39;, &#39;2001&#39;, &#39;2002&#39;, &#39;2003&#39;)
             ORDER BY aw_time;

AW_UNIT_COST    AW_UNIT_PRICE    AW_PRODUCT    AW_TIME    R2C
------------    -------------    ----------    -------    -----
   211680.12        224713.71      Hardware       2000    00...
   195591.60        207513.16      Hardware       2001    00...
   184413.05        194773.78      Hardware       2002    00...
    73457.31         77275.06      Hardware       2003    00...
</pre>
<div id="OLADM2973" class="example">
<p class="titleinexample"><a id="CHDHDGAA"></a>Example A-12 OLAP_EXPRESSION: Time Series Function in a WHERE Clause</p>
<p>This example uses the view described in <a href="#CHDCJFDB">&#34;Sample View: MYAW.UNIT_COST_PRICE_VIEW&#34;</a>.</p>
<p>The following <code dir="ltr">SELECT</code> statement calculates an expression with an alias of <code dir="ltr">PERIODAGO</code>, and limits the result set to calculated values greater than 50,000. The calculation uses the <code dir="ltr">LAG</code> function to return the value of the previous time period.</p>
<pre dir="ltr">SQL&gt;SELECT aw_time time, aw_unit_cost unit_cost, 
            OLAP_EXPRESSION(r2c, 
                           &#39;LAG(price_cube_unit_cost, 1, time, 
                                LEVELREL time_levelrel)&#39;) periodago
        FROM unit_cost_price_view
        WHERE aw_product = &#39;Hardware&#39;
        AND OLAP_EXPRESSION(r2c,
                           &#39;LAG(price_cube_unit_cost, 1, time, 
                                LEVELREL time_levelrel)&#39;) &gt; 50000;
</pre>
<p>This <code dir="ltr">SELECT</code> statement produces these results.</p>
<pre dir="ltr">TIME                  UNIT_COST  PERIODAGO
-------------------- ---------- ----------
2003                   73457.31  184413.05
2004                              73457.31
1999                   231095.4  162526.92
2000                  211680.12   231095.4
2001                   195591.6  211680.12
2002                  184413.05   195591.6
Q2-99                  57587.34   57856.76
Q3-99                  59464.25   57587.34
Q4-99                  56187.05   59464.25
Q1-00                  53982.32   56187.05
Q2-00                  53629.74   53982.32
Q3-00                  53010.65   53629.74
Q4-00                  51057.41   53010.65
Q1-01                  49691.22   51057.41
</pre></div>
<!-- class="example" -->
<div id="OLADM2974" class="example">
<p class="titleinexample"><a id="CHDFFBHI"></a>Example A-13 OLAP_EXPRESSION: Numeric Calculation in an ORDER BY CLause</p>
<p>This example uses the view described in <a href="#CHDCJFDB">&#34;Sample View: MYAW.UNIT_COST_PRICE_VIEW&#34;</a>.</p>
<p>This example subtracts costs from price, and gives this expression an alias of <code dir="ltr">MARKUP</code>. The rows are ordered by markup from highest to lowest.</p>
<pre dir="ltr">SQL&gt;SELECT aw_time time, aw_unit_cost unit_cost, aw_unit_price unit_price, 
            OLAP_EXPRESSION(r2c, 
                      &#39;PRICE_CUBE_UNIT_PRICE - PRICE_CUBE_UNIT_COST&#39;) markup
     FROM unit_cost_price_view 
     WHERE aw_product = &#39;Hardware&#39; 
     AND aw_time in (&#39;1998&#39;, &#39;1999&#39;, &#39;2000&#39;, &#39;2001&#39;)
     ORDER BY OLAP_EXPRESSION(r2c, 
                      &#39;PRICE_CUBE_UNIT_PRICE - PRICE_CUBE_UNIT_COST&#39;) DESC;
</pre>
<p>This <code dir="ltr">SELECT</code> statement produces these <a id="sthref5400"></a>results.<a id="sthref5401"></a></p>
<pre dir="ltr">TIME                  UNIT_COST   UNIT_PRICE  MARKUP
-------------------- ----------  ----------  ---------
1999                  231095.40   245412.91   14317.51
2000                  211680.12   224713.71   13033.59
2001                  195591.60   207513.16   11921.56
1998                  162526.92   173094.41   10567.49
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BHBDCEJH"></a>
<div id="OLADM943" class="refsect1">
<h2 class="refsect1">OLAP_EXPRESSION_BOOL</h2>
<p><a id="sthref5402"></a><a id="sthref5403"></a><code dir="ltr">OLAP_EXPRESSION_BOOL</code> is a SQL function that dynamically executes an OLAP DML boolean expression within the context of an <code dir="ltr">OLAP_TABLE</code> function. In addition to returning a custom measure, you can use this function in the <code dir="ltr">WHERE</code> and <code dir="ltr">ORDER BY</code> clauses to modify the result set of the query of the analytic workspace.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDHDDDI">&#34;Using OLAP DML Expressions in SELECT FROM OLAP_TABLE Statements&#34;</a> and <a href="#CHDDACJH">&#34;Adding Calculated Columns to the Relational View&#34;</a></div>
<p><code dir="ltr">OLAP_EXPRESSION_TEXT</code> returns character data. To return numeric, text, or date data, use <a href="#BGBGDDDF">OLAP_EXPRESSION</a>, <a href="#BCEEBEIH">OLAP_EXPRESSION_TEXT</a>, or <a href="#CIAHHEDB">OLAP_EXPRESSION_DATE</a> SQL functions.</p>
<p>Before you use this function, you must specify a <code dir="ltr"><a id="sthref5404"></a>ROW2CELL</code> clause in the limit map used by <code dir="ltr">OLAP_TABLE</code>. <code dir="ltr">ROW2CELL</code> identifies a <code dir="ltr">RAW</code> column that <code dir="ltr">OLAP_TABLE</code> populates with information used by the OLAP single-row functions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL Worksheet.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5405"></a>Returns</p>
<p>An evaluation of <span class="italic">boolean_expression</span> for each row of the table object returned by the <code dir="ltr">OLAP_TABLE</code> function.</p>
<p><code dir="ltr">OLAP_EXPRESSION_BOOL</code> returns boolean data in the form 0 for false and 1 for true. To return numeric, date, or text data, use the <code dir="ltr">OLAP_EXPRESSION</code>, <code dir="ltr">OLAP_EXPRESSION_DATE</code>, or <code dir="ltr">OLAP_EXPRESSION_TEXT</code> functions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5406"></a>Syntax</p>
<pre dir="ltr">OLAP_EXPRESSION_BOOL(
          r2c                  IN   RAW(32),
          boolean_expression   IN   VARCHAR2)
      RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5407"></a>Parameters</p>
<dl>
<dt><span class="italic">r2c</span></dt>
<dd>
<p>The name of a column specified by a <code dir="ltr">ROW2CELL</code> clause in the limit map.<a id="sthref5408"></a> See <a href="#CIHGCEGC">&#34;<span class="bold">ROW2CELL Clause</span>&#34;</a> of OLAP_TABLE</p>
</dd>
<dt><span class="italic">boolean_expression</span></dt>
<dd>
<p>An OLAP DML expression that returns a Boolean result.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_expression.htm#i1010516">&#34;Boolean Expressions&#34;</a>, <a href="dml_functions_1.htm#CJAGEFHJ">Chapter 7, &#34;OLAP DML Functions: A - K&#34;</a>, <a href="dml_functions_2.htm#CHDBBGJA">Chapter 8, &#34;OLAP DML Functions: L - Z&#34;</a>, and <a href="dml_app_dbms_aw.htm#CHDIJEGA">&#34;Guidelines for Using Quotation Marks in OLAP DML Commands&#34;</a></div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BHBHIEBI"></a>Examples</p>
<p>The following script was used to create the view <code dir="ltr">awunits_view</code>, which is used in <a href="#BHBDFIHH">Example A-14</a> to illustrate the use of <code dir="ltr">OLAP_EXPRESSION_BOOL</code>.</p>
<p class="subhead2"><a id="BHBBCDCH"></a><a id="OLADM2975"></a>Sample View: MYAW_AW.AWUNITS_VIEW</p>
<pre dir="ltr">-- Create the logical row
CREATE TYPE awunits_row AS OBJECT (
             awtime                  VARCHAR2(12),
             awcustomer              VARCHAR2(30),
             awproduct               VARCHAR2(30),
             awchannel               VARCHAR2(30),
             awunits                 NUMBER(16),
             r2c                     RAW(32));
/
-- Create the logical table
CREATE TYPE awunits_table AS TABLE OF awunits_row;
/
-- Create the view
CREATE OR REPLACE VIEW awunits_view AS
   SELECT awunits,
          awtime, awcustomer, awproduct, awchannel, r2c 
      FROM TABLE(OLAP_TABLE(
         &#39;myaw_aw.myawaw DURATION SESSION&#39;, 
         &#39;awunits_table&#39;, 
         &#39;&#39;,
         &#39;MEASURE awunits FROM units_cube_aw_units_aw
          DIMENSION awtime FROM time_aw WITH
             HIERARCHY time_aw_parentrel
          DIMENSION awcustomer FROM customer_aw WITH 
             HIERARCHY customer_aw_parentrel
                       (customer_aw_hierlist &#39;&#39;MARKET_ROLLUP_AW&#39;&#39;)
                INHIERARCHY customer_aw_inhier
          DIMENSION awproduct FROM product_aw WITH
             HIERARCHY product_aw_parentrel
          DIMENSION channel_aw WITH
             HIERARCHY channel_aw_parentrel
             ATTRIBUTE  awchannel FROM channel_aw_short_description
          ROW2CELL r2c&#39;))
      WHERE awunits IS NOT NULL;
/
</pre>
<p>The following query shows some aggregate data in the view. For all products in all markets during the year 2001, it shows the number of units sold through each channel.</p>
<pre dir="ltr">SQL&gt; SELECT awchannel, awunits FROM awunits_view 
     WHERE    awproduct = &#39;1&#39;
     AND      awcustomer = &#39;7&#39;
     AND      awtime = &#39;4&#39;;
     
AWCHANNEL            AWUNITS
---------            -------  
All Channels         415392  
Direct Sales         43783  
Catalog              315737  
Internet             55872  
</pre>
<p>The following statements show the descriptions of the Product, Customer, and Time dimension members used in the query.</p>
<pre dir="ltr">SQL&gt;execute dbms_aw.execute(&#39;limit product_aw to &#39;&#39;1&#39;&#39;&#39;);
SQL&gt;execute dbms_aw.execute(&#39;rpr product_aw_short_description&#39;);
 
PRODUCT_AW                 PRODUCT_AW_SHORT_DESCRIPTION
--------------- --------------------------------------------------
1               Total Product

SQL&gt;execute dbms_aw.execute(&#39;limit customer_aw to &#39;&#39;7&#39;&#39;&#39;);
SQL&gt;execute dbms_aw.execute(&#39;rpr customer_aw_short_description&#39;);
 
CUSTOMER_AW               CUSTOMER_AW_SHORT_DESCRIPTION
--------------- --------------------------------------------------
7               Total Market
 
SQL&gt;execute dbms_aw.execute(&#39;limit time_aw to &#39;&#39;4&#39;&#39;&#39;);
SQL&gt;execute dbms_aw.execute(&#39;rpr time_aw_short_description&#39;);
 
TIME_AW                     TIME_AW_SHORT_DESCRIPTION
--------------- --------------------------------------------------
4               2001
</pre>
<div id="OLADM2976" class="example">
<p class="titleinexample"><a id="BHBDFIHH"></a>Example A-14 OLAP_EXPRESSION_BOOL Function in a SELECT List</p>
<p>This example uses the view described in <a href="#BHBBCDCH">&#34;Sample View: MYAW_AW.AWUNITS_VIEW&#34;</a>. The following <code dir="ltr">SELECT</code> statement calculates an expression with an alias of <code dir="ltr">lowest_units</code>, which indicates whether or not the number of units of each product was less than 500.</p>
<pre dir="ltr">SQL&gt;SELECT awproduct products,
       olap_expression_bool(r2c, &#39;units_cube_aw_units_aw le 500&#39;) lowest_units
          FROM awunits_view
               WHERE     awproduct &gt; 39
               AND       awproduct &lt; 46 
               AND       awcustomer = &#39;7&#39;
               AND       awchannel = &#39;Internet&#39;
               AND       awtime = &#39;4&#39;;

PRODUCTS        LOWEST_UNITS
--------------- ------------
40              0
41              1
42              1
43              1
44              1
45              0
</pre>
<p>This query shows that products 41-44 all had less than 500 units. These products are the documentation sets in German, French, Spanish, and Italian. The selected products are shown as follows.</p>
<pre dir="ltr">SQL&gt;execute dbms_aw.execute
           (&#39;limit product_aw to product_aw gt 39 and product_aw lt 46&#39;);
SQL&gt;execute dbms_aw.execute(&#39;rpr product_aw_short_description&#39;);
 
PRODUCT_AW                 PRODUCT_AW_SHORT_DESCRIPTION
--------------- --------------------------------------------------
40              O/S Documentation Set - English
41              O/S Documentation Set - German
42              O/S Documentation Set - French
43              O/S Documentation Set - Spanish
44              O/S Documentation Set - Italian
45              O/S Documentation Set - Kanji
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIAHHEDB"></a>
<div id="OLADM944" class="refsect1">
<h2 class="refsect1">OLAP_EXPRESSION_DATE</h2>
<p><a id="ABC1097603"></a><a id="ABC1097605"></a><code dir="ltr">OLAP_EXPRESSION_DATE</code> is a SQL function that dynamically executes an OLAP DML datetime expression within the context of an <code dir="ltr">OLAP_TABLE</code> function. In addition to returning a custom measure, you can use this function in the <code dir="ltr">WHERE</code> and <code dir="ltr">ORDER BY</code> clauses to modify the result set of the query of the analytic workspace.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDHDDDI">&#34;Using OLAP DML Expressions in SELECT FROM OLAP_TABLE Statements&#34;</a> and <a href="#CHDDACJH">&#34;Adding Calculated Columns to the Relational View&#34;</a></div>
<p><code dir="ltr">OLAP_EXPRESSION_TEXT</code> returns character data. To return numeric, boolean, or text data, use <a href="#BGBGDDDF">OLAP_EXPRESSION</a>, <a href="#BHBDCEJH">OLAP_EXPRESSION_BOOL</a>, or <a href="#BCEEBEIH">OLAP_EXPRESSION_TEXT</a> SQL functions.</p>
<p>Before you use this function, you must specify a <code dir="ltr"><a id="sthref5409"></a>ROW2CELL</code> clause in the limit map used by <code dir="ltr">OLAP_TABLE</code>. <code dir="ltr">ROW2CELL</code> identifies a <code dir="ltr">RAW</code> column that <code dir="ltr">OLAP_TABLE</code> populates with information used by the OLAP single-row functions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL Worksheet.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5410"></a>Returns</p>
<p>An evaluation of <span class="italic">date_expression</span> for each row of the table object returned by the <code dir="ltr">OLAP_TABLE</code> function.</p>
<p><code dir="ltr">OLAP_EXPRESSION_DATE</code> returns date data. To return numeric, boolean, or text data, use the <code dir="ltr">OLAP_EXPRESSION</code>, <code dir="ltr">OLAP_EXPRESSION_BOOL</code>, or <code dir="ltr">OLAP_EXPRESSION_TEXT</code> functions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5411"></a>Syntax</p>
<pre dir="ltr">OLAP_EXPRESSION_DATE(
          r2c               IN   RAW(32),
          date_expression   IN   VARCHAR2)
      RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5412"></a>Parameters</p>
<dl>
<dt><span class="italic">r2c</span></dt>
<dd>
<p>The name of a column specified by a <code dir="ltr">ROW2CELL</code> clause in the limit map.<a id="sthref5413"></a> See <a href="#CIHGCEGC">&#34;<span class="bold">ROW2CELL Clause</span>&#34;</a> of OLAP_TABLE</p>
</dd>
<dt><span class="italic">date_expression</span></dt>
<dd>
<p>An OLAP DML expression that returns an OLAP DML datetime result.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_expression.htm#BABFFDGC">&#34;Datetime and Interval Expressions&#34;</a>, <a href="dml_functions_1.htm#CJAGEFHJ">Chapter 7, &#34;OLAP DML Functions: A - K&#34;</a>, <a href="dml_functions_2.htm#CHDBBGJA">Chapter 8, &#34;OLAP DML Functions: L - Z&#34;</a>, and <a href="dml_app_dbms_aw.htm#CHDIJEGA">&#34;Guidelines for Using Quotation Marks in OLAP DML Commands&#34;</a></div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5414"></a>Examples</p>
<p><a id="sthref5415"></a>Refer <a id="sthref5416"></a>to the examples in <a href="#BGBGDDDF">OLAP_EXPRESSION</a> and <a href="#BHBDCEJH">OLAP_EXPRESSION_BOOL</a> for examples of OLAP single-row functions.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BCEEBEIH"></a>
<div id="OLADM945" class="refsect1">
<h2 class="refsect1">OLAP_EXPRESSION_TEXT</h2>
<p><a id="ABC1713415"></a><a id="sthref5417"></a><code dir="ltr">OLAP_EXPRESSION_TEXT</code> is a SQL function that dynamically executes an OLAP DML text expression within the context of an <code dir="ltr">OLAP_TABLE</code> function. In addition to returning a custom measure, you can use this function in the <code dir="ltr">WHERE</code> and <code dir="ltr">ORDER BY</code> clauses to modify the result set of the query of the analytic workspace.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDHDDDI">&#34;Using OLAP DML Expressions in SELECT FROM OLAP_TABLE Statements&#34;</a> and <a href="#CHDDACJH">&#34;Adding Calculated Columns to the Relational View&#34;</a></div>
<p><code dir="ltr">OLAP_EXPRESSION_TEXT</code> returns character data. To return numeric, boolean, or date data, use <a href="#BGBGDDDF">OLAP_EXPRESSION</a>, <a href="#BHBDCEJH">OLAP_EXPRESSION_BOOL</a>, or <a href="#CIAHHEDB">OLAP_EXPRESSION_DATE</a> SQL functions.</p>
<p>Before you use this function, you must specify a <code dir="ltr"><a id="sthref5418"></a>ROW2CELL</code> clause in the limit map used by <code dir="ltr">OLAP_TABLE</code>. <code dir="ltr">ROW2CELL</code> identifies a <code dir="ltr">RAW</code> column that <code dir="ltr">OLAP_TABLE</code> populates with information used by the OLAP single-row functions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL Worksheet.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5419"></a>Returns</p>
<p>An evaluation of <span class="italic">text_expression</span> for each row of the table object returned by the <code dir="ltr">OLAP_TABLE</code> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5420"></a>Syntax</p>
<pre dir="ltr">OLAP_EXPRESSION_TEXT(
          r2c               IN   RAW(32),
          text_expression   IN   VARCHAR2)
      RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5421"></a>Parameters</p>
<dl>
<dt><span class="italic">r2c</span></dt>
<dd>
<p>The name of a column specified by a <code dir="ltr">ROW2CELL</code> clause in the limit map.<a id="sthref5422"></a> See <a href="#CIHGCEGC">&#34;<span class="bold">ROW2CELL Clause</span>&#34;</a> of OLAP_TABLE</p>
</dd>
<dt><span class="italic">text_expression</span></dt>
<dd>
<p>An OLAP DML expression that returns a text result.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_expression.htm#i1010546">&#34;Text Expressions&#34;</a>, <a href="dml_functions_1.htm#CJAGEFHJ">Chapter 7, &#34;OLAP DML Functions: A - K&#34;</a>, <a href="dml_functions_2.htm#CHDBBGJA">Chapter 8, &#34;OLAP DML Functions: L - Z&#34;</a>, and <a href="dml_app_dbms_aw.htm#CHDIJEGA">&#34;Guidelines for Using Quotation Marks in OLAP DML Commands&#34;</a></div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5423"></a>Example</p>
<p><a id="sthref5424"></a>Refer<a id="sthref5425"></a> to the examples in <a href="#BGBGDDDF">OLAP_EXPRESSION</a> and <a href="#BHBDCEJH">OLAP_EXPRESSION_BOOL</a> for examples of OLAP single-row functions.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3608">
<tr>
<td class="cellalignment3617">
<table class="cellalignment3613">
<tr>
<td class="cellalignment3612"><a href="dml_commands_2.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3612"><a href="dml_app_dbms_aw.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3620">
<table class="cellalignment3611">
<tr>
<td class="cellalignment3612"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3612"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3612"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3612"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3612"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3612"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>