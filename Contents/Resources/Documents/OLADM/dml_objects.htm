<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79281"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Formulas%2C%20Models%2C%20Aggregations%2C%20and%20Allocations"></a><title>Formulas, Models, Aggregations, and Allocations</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1079"/>
<meta name="dcterms.created" content="2016-04-19T12:43:16Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP DML Reference"/>
<meta name="dcterms.identifier" content="E17673-12"/>
<meta name="dcterms.isVersionOf" content="OLADM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="dml_expression.htm" title="Previous" type="text/html"/>
<link rel="Next" href="dml_properties.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17673-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/19</span> <!-- End Header -->
<div id="OLADM226" class="chapter"><a id="BABDBIGI"></a>
<h1 class="chapter"><span class="secnum">3</span> Formulas, Models, Aggregations, and Allocations</h1>
<p>Calculation objects are OLAP DML objects that contain OLAP DML statements that specify analysis to be performed. Calculation objects include: formulas, models, aggregation specifications, allocation specifications, and programs.</p>
<p>This chapter contains information on the following</p>
<ul>
<li>
<p><a href="#BABIIBDB">Creating Calculation Objects</a></p>
</li>
<li>
<p><a href="#i1019576">OLAP DML Formulas</a></p>
</li>
<li>
<p><a href="#BEIDHDFI">OLAP DML Model Objects</a></p>
</li>
<li>
<p><a href="#BABEJFHJ">OLAP DML Aggregation Objects</a></p>
</li>
<li>
<p><a href="#i1035122">OLAP DML Allocation Objects</a></p>
</li>
</ul>
<p>For information on creating OLAP DML programs, see <a href="dml_program.htm#CFHFFAFB">Chapter 6, &#34;OLAP DML Programs&#34;</a>.</p>
<a id="BABIIBDB"></a>
<div id="OLADM227" class="sect1">
<h2 class="sect1">Creating Calculation Objects</h2>
<p>The general process of creating a calculation specification object is the following two step process:</p>
<ol>
<li>
<p>Define the calculation object using the appropriate DEFINE statement.</p>
</li>
<li>
<p>Add the calculation specification to the object definition. You can add the calculation specification to the definition of a calculation object in the following ways:</p>
<ul>
<li>
<p>At the command line level of the OLAP Worksheet, in an input file, or as an argument to a PL/SQL function. In this case, ensure that the object is the current object (issue a CONSIDER statement, if necessary), and, then, issue the appropriate statement that includes the specification as a multiline text argument. To code the specification as a multiline text, you can use a JOINLINES function where each of the text arguments of JOINLINES is a statement that specifies the desired processing, and where the final statement is <code dir="ltr">END</code>.</p>
</li>
<li>
<p>In an Edit Window of the OLAP Worksheet. In this case, at the command line level of the OLAP Worksheet, issue an EDIT statement with the appropriate keyword. An EDIT statement opens an Edit Window for the specified object. You can then type each statement as an individual line in the Edit Window. Saving the specification and closing the Edit Window when you are finished.</p>
</li>
</ul>
</li>
</ol>
<p><a href="#CIHCJECB">Table 3-1</a> outlines the OLAP DML statements that you use to create each type of calculation specification.</p>
<div id="OLADM1101" class="tblformal">
<p class="titleintable"><a id="sthref303"></a><a id="CIHCJECB"></a>Table 3-1 Commands for Defining calculation objects</p>
<table class="cellalignment3618" title="Commands for Defining calculation objects" summary="This table provides overview informationa bout the OLAP DML statements that you use to create calculation specifications. For each specification type, it identifies the DEFINE statement for that type, the OLAP DML command you can use to code the specification, and the statement that you can use in the OLAP Worksheet to open an Edit Window to code the specification." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t2">Calculations</th>
<th class="cellalignment3616" id="r1c2-t2">Definition Statement</th>
<th class="cellalignment3616" id="r1c3-t2">Specification Statement</th>
<th class="cellalignment3616" id="r1c4-t2">For More Information</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t2" headers="r1c1-t2">
<p>Formula</p>
</td>
<td class="cellalignment3617" headers="r2c1-t2 r1c2-t2">
<p>DEFINE FORMULA</p>
</td>
<td class="cellalignment3617" headers="r2c1-t2 r1c3-t2">
<p>EQ</p>
</td>
<td class="cellalignment3617" headers="r2c1-t2 r1c4-t2">
<p><a href="#i1019576">&#34;OLAP DML Formulas&#34;</a></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t2" headers="r1c1-t2">
<p>Model</p>
</td>
<td class="cellalignment3617" headers="r3c1-t2 r1c2-t2">
<p>DEFINE MODEL</p>
</td>
<td class="cellalignment3617" headers="r3c1-t2 r1c3-t2">
<p>MODEL</p>
</td>
<td class="cellalignment3617" headers="r3c1-t2 r1c4-t2">
<p><a href="#BEIDHDFI">&#34;OLAP DML Model Objects&#34;</a></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t2" headers="r1c1-t2">
<p>Aggregation</p>
</td>
<td class="cellalignment3617" headers="r4c1-t2 r1c2-t2">
<p>DEFINE AGGMAP</p>
</td>
<td class="cellalignment3617" headers="r4c1-t2 r1c3-t2">
<p>AGGMAP</p>
</td>
<td class="cellalignment3617" headers="r4c1-t2 r1c4-t2">
<p><a href="#BABEJFHJ">&#34;OLAP DML Aggregation Objects&#34;</a></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t2" headers="r1c1-t2">
<p>Allocation</p>
</td>
<td class="cellalignment3617" headers="r5c1-t2 r1c2-t2">
<p>DEFINE AGGMAP</p>
</td>
<td class="cellalignment3617" headers="r5c1-t2 r1c3-t2">
<p>ALLOCMAP</p>
</td>
<td class="cellalignment3617" headers="r5c1-t2 r1c4-t2">
<p><a href="#i1035122">&#34;OLAP DML Allocation Objects&#34;</a></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t2" headers="r1c1-t2">
<p>Program</p>
</td>
<td class="cellalignment3617" headers="r6c1-t2 r1c2-t2">
<p>DEFINE PROGRAM</p>
</td>
<td class="cellalignment3617" headers="r6c1-t2 r1c3-t2">
<p>PROGRAM</p>
</td>
<td class="cellalignment3617" headers="r6c1-t2 r1c4-t2">
<p><a href="dml_program.htm#CFHFFAFB">Chapter 6, &#34;OLAP DML Programs&#34;</a></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="i1019576"></a>
<div id="OLADM228" class="sect1">
<h2 class="sect1">OLAP DML Formulas</h2>
<p>You can save an expression in a formula. Frequently, you define a formula for ease of use and to save storage space. Once you have defined a formula for an expression, you can use the name of the formula to represent the expression. Oracle OLAP does not store the data for a formula in a variable; instead it calculates the data at run time each time the data is requested.</p>
<p>Before you create a formula, decide whether you want to specify the expression when you first define the formula object or whether you want to specify the expression for the formula after you define the formula object:</p>
<ul>
<li>
<p>To specify the expression when you first define the formula object:</p>
<ol>
<li>
<p>Issue a DEFINE FORMULA statement to define the formula object. Include the expression in the definition. Do not specify values for the <code dir="ltr">datatype</code> or <code dir="ltr">dimensions</code> arguments.</p>
</li>
<li>
<p>(Optional) Issue a COMPILE statement to compile the formula.</p>
</li>
<li>
<p>When you want the formula to be a permanent part of the analytic workspace, save the formula using an UPDATE statement followed by COMMIT.</p>
</li>
</ol>
</li>
<li>
<p>To specify the expression for the formula after you define the formula object:</p>
<ol>
<li>
<p>Issue a DEFINE FORMULA statement to define the formula object. Specify values for the <code dir="ltr">datatype</code> or <code dir="ltr">dimensions</code> arguments, but do not specify a value for the expression itself.</p>
</li>
<li>
<p>Issue a CONSIDER statement to make the formula the current definition and then issue an EQ statement to specify the expression for the formula.</p>
</li>
<li>
<p>(Optional) Issue a COMPILE statement to compile the formula.</p>
</li>
<li>
<p>When you want the formula to be a permanent part of the analytic workspace, save the formula using an UPDATE statement followed by COMMIT.</p>
</li>
</ol>
</li>
</ul>
<p>For example, you can define a formula to calculate dollar sales, as follows.</p>
<pre dir="ltr">DEFINE dollar.sales FORMULA units * price
</pre>
<p>You can use <a href="dml_commands_2.htm#CCHCFEDC">TRACE</a> to help you debug a forumula.</p>
</div>
<!-- class="sect1" -->
<a id="BEIDHDFI"></a>
<div id="OLADM229" class="sect1">
<h2 class="sect1">OLAP DML Model Objects</h2>
<p>This topic provides information about creating and executing OLAP DML models. It includes the following subtopics:</p>
<ul>
<li>
<p><a href="#BEIJGGJA">What is an OLAP DML Model?</a></p>
</li>
<li>
<p><a href="#BEIHGJDC">Creating Models</a></p>
</li>
<li>
<p><a href="#BEIJAACH">Compiling Models</a></p>
</li>
<li>
<p><a href="#BEIDEBCA">Running a Model</a></p>
</li>
<li>
<p><a href="#BEIDACBJ">Debugging a Model</a></p>
</li>
</ul>
<a id="BEIJGGJA"></a>
<div id="OLADM230" class="sect2">
<h3 class="sect2">What is an OLAP DML Model?</h3>
<p>An OLAP DML <span class="bold">model</span> is a set of interrelated equations that can assign results either to a variable or to a dimension value. For example, in a financial model, you can assign values to specific line items, such as <code dir="ltr">gross.margin</code> or <code dir="ltr">net.income</code>.</p>
<pre dir="ltr">gross.margin = revenue - cogs
</pre>
<pre dir="ltr"></pre>
<p><a id="sthref304"></a><a id="sthref305"></a>When an assignment statement assigns data to a dimension value or refers to a dimension value in its calculations, then it is called a dimension-based equation. A dimension-based equation does not refer to the dimension itself, but only to the values of the dimension. Therefore, when the model contains any dimension-based equations, then you must specify the name of each of these dimensions in a <code dir="ltr">DIMENSION</code> statement at the beginning of the model.</p>
<p><a id="sthref306"></a><a id="sthref307"></a>When a model contains any dimension-based equations, then you must supply the name of a <span class="bold">solution variable</span> when you run the model. The solution variable is both a source of data and the assignment target of model equations. It holds the input data used in dimension-based equations, and the calculated results are stored in designated values of the solution variable. For example, when you run a financial model based on the <code dir="ltr">line</code> dimension, you might specify <code dir="ltr">actual</code> as the solution variable.</p>
<p>Dimension-based equations provide flexibility in financial modeling. Because you do not need to specify the modeling variable until you solve a model, you can run the same model with the <code dir="ltr">actual</code> variable, the <code dir="ltr">budget</code> variable, or any other variable that is dimensioned by <code dir="ltr">line</code>.</p>
<p>Models can be quite complex. You can:</p>
<ul>
<li>
<p>Include one model within another model as discussed in <a href="#BEIGEBCH">&#34;Nesting Models&#34;</a></p>
</li>
<li>
<p>Use data from different time periods as discussed in <a href="#BEIDFJBE">&#34;Using Data from Past and Future Time Periods&#34;</a></p>
</li>
<li>
<p>Solve simultaneous equations as discussed in <a href="#BEICDGHE">&#34;Solving Simultaneous Equations&#34;</a></p>
</li>
<li>
<p>Create models for different scenarios as described in <a href="#BEIFEAJF">&#34;Modeling for Multiple Scenarios&#34;</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BEIHGJDC"></a>
<div id="OLADM231" class="sect2">
<h3 class="sect2">Creating Models</h3>
<p>To create an OLAP DML model, take the following steps:</p>
<ol>
<li>
<p>Issue a <a href="dml_commands_1.htm#i78508">DEFINE MODEL</a> command to define the program object.</p>
</li>
<li>
<p>Issue a <a href="dml_commands_2.htm#i1004861">MODEL</a> command which adds a specification to the model to specify the processing that you want performed.</p>
</li>
<li>
<p>Compile the model as described in <a href="#BEIJAACH">&#34;Compiling Models&#34;</a>.</p>
</li>
<li>
<p>(Optional) If necessary, change the settings of model options listed in <a href="dml_options.htm#CHDEDGJG">&#34;Model Options&#34;</a>.</p>
</li>
<li>
<p>Execute the model as described in <a href="#BEIDEBCA">&#34;Running a Model&#34;</a>.</p>
</li>
<li>
<p>Debug the model as described in <a href="#BEIDACBJ">&#34;Debugging a Model&#34;</a>.</p>
</li>
<li>
<p>When you want the model to be a permanent part of the analytic workspace, save the model using an UPDATE command followed by COMMIT.</p>
</li>
</ol>
<p>For an example of creating a model, see <a href="dml_commands_2.htm#CHDBGACB">Example 10-57, &#34;Creating a Model&#34;</a>.</p>
<a id="BEIGEBCH"></a>
<div id="OLADM232" class="sect3">
<h4 class="sect3">Nesting Models</h4>
<p>You can include one model within another model by using an <a href="dml_commands_2.htm#i78931">INCLUDE</a> statement within a <a href="dml_commands_2.htm#i1004861">MODEL</a> command. The MODEL command that contains the INCLUDE statement is referred to as the <span class="bold">parent model</span>. The included model is referred to as the <span class="bold">base model</span>. You can nest models by placing an INCLUDE statement in a base model. For example, model <code dir="ltr">myModel1</code> can include model <code dir="ltr">myModel2</code>, and model <code dir="ltr">myModel2</code> can include model <code dir="ltr">myModel3</code>. The nested models form a hierarchy. In this example, <code dir="ltr">myModel1</code> is at the top of the hierarchy, and <code dir="ltr">myModel3</code> is at the root.</p>
<p>When a model contains an INCLUDE statement, then it cannot contain any DIMENSION statements. A parent model inherits its dimensions, if any, from the DIMENSION statements in the root model of the included hierarchy. In the example just given, models <code dir="ltr">myModel1</code> and <code dir="ltr">myModel2</code> both inherit their dimensions from the DIMENSION statements in model <code dir="ltr">myModel3</code>.</p>
<p>The INCLUDE statement enables you to create modular models. When certain equations are common to several models, then you can place these equations in a separate model and include that model in other models as needed.</p>
<p>The INCLUDE statement also facilitates what-if analyses. An experimental model can draw equations from a base model and selectively replace them with new equations. To support what-if analysis, you can use equations in a model to mask previous equations. The previous equations can come from the same model or from included models. A masked equation is not executed or shown in the <a href="dml_commands_2.htm#i1004377">MODEL.COMPRPT</a> report for a model</p>
</div>
<!-- class="sect3" -->
<a id="BEIHBBHH"></a>
<div id="OLADM233" class="sect3">
<h4 class="sect3">Dimension Status and Model Equations</h4>
<p>When a model contains an assignment statement to assign data to a dimension value, then the dimension is limited temporarily to that value, performs the calculation, and restores the initial status of the dimension.</p>
<p>For example, a model might have the following statements.</p>
<pre dir="ltr">DIMENSION line
gross.margin = revenue - cogs
</pre>
<pre dir="ltr"></pre>
<p>If you specify <code dir="ltr">actual</code> as the solution variable when you run the model, then the following code is constructed and executed.</p>
<pre dir="ltr">PUSH line
LIMIT line TO gross.margin
actual = actual(line revenue) - actual(line cogs)
POP line
</pre>
<pre dir="ltr"></pre>
<p>The fact that using a solution variable in a model causes this behind-the-scenes code construction allows you perform complex calculations with simple model equations. For example, line item data might be stored in the <code dir="ltr">actual</code> variable, which is dimensioned by <code dir="ltr">line</code>. However, detail line item data might be stored in a variable named <code dir="ltr">detail.data</code>, with a dimension named <code dir="ltr">detail.line</code>.</p>
<p>When your analytic workspace contains a relation between <code dir="ltr">line</code> and <code dir="ltr">detail.line</code>, which specifies the line item to which each detail item pertains, then you might write model equations such as the following ones.</p>
<pre dir="ltr">revenue = total(detail.data line)
expenses = total(detail.data line)
</pre>
<p>The relation between <code dir="ltr">detail.line</code> and <code dir="ltr">line</code> is used automatically to aggregate the detail data into the appropriate line items. The code that is constructed when the model is run ensures that the appropriate total is assigned to each value of the <code dir="ltr">line</code> dimension. For example, while the equation for the <code dir="ltr">revenue</code> item is calculated, <code dir="ltr">line</code> is temporarily limited to <code dir="ltr">revenue</code>, and the <code dir="ltr">TOTAL</code> function returns the total of detail items for the <code dir="ltr">revenue</code> value of <code dir="ltr">line</code>.</p>
</div>
<!-- class="sect3" -->
<a id="BEIDFJBE"></a>
<div id="OLADM234" class="sect3">
<h4 class="sect3">Using Data from Past and Future Time Periods</h4>
<p><a id="sthref308"></a><a id="sthref309"></a>Several OLAP DML functions make it easy for you to use data from past or future time periods. For example, the <code dir="ltr">LAG</code> function returns data from a specified previous time period, and the <code dir="ltr">LEAD</code> function returns data from a specified future period.</p>
<p>When you run a model that uses past or future data in its calculations, you must ensure that your solution variable contains the necessary past or future data. For example, a model might contain an assignment statement that bases an estimate of the <code dir="ltr">revenue</code> line item for the current month on the <code dir="ltr">revenue</code> line item for the previous month.</p>
<pre dir="ltr">DIMENSION line month
...
revenue = LAG(revenue, 1, month) * 1.05
</pre>
<pre dir="ltr"></pre>
<p>When the <code dir="ltr">month</code> dimension is limited to <code dir="ltr">Apr2004</code> to <code dir="ltr">Jun2004</code> when you run the model, then you must ensure that the solution variable contains <code dir="ltr">revenue</code> data for <code dir="ltr">Mar96</code>.</p>
<p>When your model contains a <code dir="ltr">LEAD</code> function, then your solution variable must contain the necessary future data. For example, when you want to calculate data for the months of April through June of 2004, and when the model retrieves data from one month in the future, then the solution variable must contain data for July 2004 when you run the model.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM235" class="sect3"><a id="sthref310"></a>
<h4 class="sect3">Handling NA Values in Models</h4>
<p>Oracle OLAP observes the NASKIP2 option when it evaluates equations in a model. NASKIP2 controls how <code dir="ltr">NA</code> values are handled when <code dir="ltr">+</code> (plus) and <code dir="ltr">-</code> (minus) operations are performed. The setting of NASKIP2 is important when the solution variable contains <code dir="ltr">NA</code> values.</p>
<p>The results of a calculation may be <code dir="ltr">NA</code> not only when the solution variable contains an <code dir="ltr">NA</code> value that is used as input, but also when the target of a simultaneous equation is <code dir="ltr">NA</code>. Values in the solution variable are used as the initial values of the targets in the first iteration over a simultaneous block. Therefore, when the solution variable contains <code dir="ltr">NA</code> as the initial value of a target, an <code dir="ltr">NA</code> result may be produced in the first iteration, and the <code dir="ltr">NA</code> result may be perpetuated through subsequent iterations.</p>
<p>To avoid obtaining <code dir="ltr">NA</code> for the results, you can ensure that the solution variable does not contain <code dir="ltr">NA</code> values or you can set NASKIP2 to <code dir="ltr">YES</code> before running the model.</p>
</div>
<!-- class="sect3" -->
<a id="BEICDGHE"></a>
<div id="OLADM236" class="sect3">
<h4 class="sect3">Solving Simultaneous Equations</h4>
<p><a id="sthref311"></a>An iterative method is used to solve the equations in a simultaneous block. In each iteration, a value is calculated for each equation. The new value is compared to the value from the previous iteration. When the comparison falls within a specified tolerance, then the equation is considered to have converged to a solution. When the comparison exceeds a specified limit, then the equation is considered to have diverged.</p>
<p>When all the equations in the block converge, then the block is considered solved. When any equation diverges or fails to converge within a specified number of iterations, then the solution of the block (and the model) fails and an error occurs.</p>
<p>You can exercise control over the solution of simultaneous equations with the OLAP DML options described in <a href="dml_options.htm#CHDEDGJG">&#34;Model Options&#34;</a>. For example, using these options, you can specify the solution method to use, the factors to use in testing for convergence and divergence, the maximum number of iterations to perform, and the action to take when the assignment statement diverges or fails to converge.</p>
</div>
<!-- class="sect3" -->
<a id="BEIFEAJF"></a>
<div id="OLADM237" class="sect3">
<h4 class="sect3">Modeling for Multiple Scenarios</h4>
<p><a id="sthref312"></a><a id="sthref313"></a><a id="sthref314"></a>Instead of calculating a single set of figures for a month and division, you might want to calculate several sets of figures, each based on different assumptions.</p>
<p>You can define a <span class="bold">scenario</span> model that calculates and stores forecast or budget figures based on different sets of input figures. For example, you might want to calculate profit based on optimistic, pessimistic, and best-guess figures.</p>
<p>To build a scenario model:</p>
<ol>
<li>
<p>Define a scenario dimension.</p>
</li>
<li>
<p>Define a solution variable dimensioned by the scenario dimension.</p>
</li>
<li>
<p>Enter input data into the solution variable.</p>
</li>
<li>
<p>Write a model to calculate results based on the input data.</p>
</li>
</ol>
<p>For an example of building a scenario model see, <a href="dml_commands_2.htm#CHDGFCII">Example 10-58, &#34;Building a Scenario Model&#34;</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEIJAACH"></a>
<div id="OLADM238" class="sect2">
<h3 class="sect2">Compiling Models</h3>
<p><a id="sthref315"></a><a id="sthref316"></a>When you finish writing the statements in a model, you can use the <a href="dml_commands_1.htm#i79154">COMPILE</a> command to compile the model. During compilation, COMPILE checks for format errors, so you can use COMPILE to help debug your code before running a model. When you do not use COMPILE before you run the model, then the model is compiled automatically before it is solved.You can use the OBJ function with the ISCOMPILED choice to test whether a model is compiled.</p>
<pre dir="ltr">SHOW OBJ(ISCOMPILED &#39;myModel&#39;)
</pre>
<p>When you compile a model, either by using a COMPILE statement or by running the model, the model compiler checks for problems that are unique to models. You receive an error message when any of the following occurs:</p>
<ul>
<li>
<p>The model contains any statements other than DIMENSION, INCLUDE, and assignment (SET) statements.</p>
</li>
<li>
<p>The model contains both a DIMENSION statement and an INCLUDE statement.</p>
</li>
<li>
<p>A DIMENSION or INCLUDE statement is placed after the first equation in the model.</p>
</li>
<li>
<p>The dimension values in a single dimension-based equation refer to two or more different dimensions.</p>
</li>
<li>
<p>An equation refers to a name that the compiler cannot identify as an object in any attached analytic workspace. When this error occurs, it may be because an equation refers to the value of a dimension, but you have neglected to include the dimension in a DIMENSION statement. In addition, a DIMENSION statement may appear to be missing when you are compiling a model that includes another model and the other model fails to compile. When a root model (the innermost model in a hierarchy of included models) fails to compile, the parent model cannot inherit any DIMENSION commands from the root model. In this case the compiler may report an error in the parent model when the source of the error is actually in the root model. See <a href="dml_commands_2.htm#i78931">INCLUDE</a> for additional information.</p>
</li>
</ul>
<div id="OLADM239" class="sect3"><a id="sthref317"></a>
<h4 class="sect3">Resolving Names in Equations</h4>
<p>The model compiler examines each name in an equation to determine the analytic workspace object to which the name refers. Because you can use a variable and a dimension value in the same way in a model equation (basing calculations on it or assigning results to it), a name might be the name of a variable or it might be a value of any dimension listed in a DIMENSION statement.</p>
<p>To resolve each name reference, the compiler searches through the dimensions listed in explicit or inherited DIMENSION statements, in the order they are listed, to determine whether the name matches a dimension value of a listed dimension. The search concludes as soon as a match is found.</p>
<p>Therefore, when two or more listed dimensions have a dimension value with the same name, the compiler assumes that the value belongs to the dimension named earliest in a DIMENSION statement.</p>
<p>Similarly, the model compiler might misinterpret the dimension to which a literal <code dir="ltr">INTEGER</code> value belongs. For example, the model compiler assumes that the literal value <code dir="ltr">&#39;200&#39;</code> belongs to the first dimension that contains either a value at position 200 or the literal dimension value 200.</p>
<p>To avoid an incorrect identification, you can specify the desired dimension and enclose the value in parentheses and single quotes. See <a href="dml_commands_2.htm#i1027570">&#34;Formatting Ambiguous Dimension Values&#34;</a>.</p>
<p>When the compiler finds that a name is not a value of any dimension specified in a DIMENSION statement, it assumes that the name is the name of an analytic workspace variable. When a variable with that name is not defined in any attached analytic workspace, an error occurs.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM240" class="sect3"><a id="sthref318"></a>
<h4 class="sect3">Code for Looping Over Dimensions</h4>
<p>The model compiler determines the dimensions over which the statements loop. When an equation assigns results to a variable, the compiler constructs code that loops over the dimensions (or bases of a composite) of the variable.</p>
<p>When you run a model that contains dimension-based equations, the solution variable that you specify can be dimensioned by more dimensions than are listed in DIMENSION statements.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM241" class="sect3"><a id="sthref319"></a>
<h4 class="sect3">Evaluating Program Arguments</h4>
<p>When you specify the value of a model dimension as an argument to a user-defined program, the compiler recognizes a dependence introduced by this argument.</p>
<p>For example, an equation might use a program named <code dir="ltr">weight</code> that tests for certain conditions and then weights and returns the <code dir="ltr">Taxes</code> line item based on those conditions. In this example, a model equation might look like the following one.</p>
<pre dir="ltr">Net.Income = Opr.Income - weight(Taxes)
</pre>
<pre dir="ltr"></pre>
<p>The compiler correctly recognizes that <code dir="ltr">Net.Income</code> depends on <code dir="ltr">Opr.Income</code> and <code dir="ltr">Taxes</code>. However, when the <code dir="ltr">weight</code> program refers to any dimension values or variables that are not specified as program arguments, the compiler does not detect any hidden dependencies introduced by these calculations.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM242" class="sect3"><a id="i1016753"></a>
<h4 class="sect3">Dependencies Between Equations</h4>
<p>The model compiler analyzes dependencies between the equations in the model. A dependence exists when the expression on the right-hand side of the equal sign in one equation refers to the assignment target of another equation. When an equation indirectly depends on itself as the result of the dependencies among equations, a cyclic dependence exists between the equations.</p>
<p>The model compiler structures the model into blocks and orders the equations within blocks and the blocks themselves to reflect dependencies. When you run the model, it is solved one block at a time. The model compiler can produce three types of solution blocks:</p>
<a id="i1016007"></a>
<ul>
<li>
<p><span class="bold">Simple Solution Blocks</span>&mdash;Simple blocks include equations that are independent of each other and equations that have dependencies on each other that are non-cyclic.</p>
<p>For example, when a block contains equations that solve for values <code dir="ltr">A</code>, <code dir="ltr">B</code>, and <code dir="ltr">C</code>, a non-cyclic dependence can be illustrated as <code dir="ltr">A&gt;B&gt;C</code>. The arrows indicate that <code dir="ltr">A</code> depends on <code dir="ltr">B</code>, and <code dir="ltr">B</code> depends on <code dir="ltr">C</code>.</p>
</li>
<li id="i1016017">
<p><span class="bold">Step Solution Blocks</span>&mdash;Step blocks include equations that have a cyclic dependence that is a one-way dimensional dependence. A dimensional dependence occurs when the data for the current dimension value depends on data from previous or later dimension values. The dimensional dependence is one-way when the data depends on previous values only or later values only, but not both. For more information on one-way dimensional dependence, see <a href="#CACGJAAJ">&#34;Ensuring One-Way Dimensional Dependence&#34;</a>.</p>
<p>Dimensional dependence typically occurs over a time dimension. For example, it is common for a line item value to depend on the value of the same line item or a different line item in a previous time period. When a block contains equations that solve for values <code dir="ltr">A</code> and <code dir="ltr">B</code>, a one<span class="italic">-</span>way dimensional dependence can be illustrated as&nbsp;<code dir="ltr">A&gt;B&gt;LAG(A)</code>. The arrows indicate that <code dir="ltr">A</code> depends on <code dir="ltr">B</code>, and <code dir="ltr">B</code> depends on the value of <code dir="ltr">A</code> from a previous time period.</p>
</li>
<li id="i1016033">
<p><span class="bold">Simultaneous Solution Blocks</span>&mdash;Simultaneous blocks include equations that have a cyclic dependence that is other than one-way dimensional. The cyclic dependence may involve no dimensional qualifiers at all, or it may be a <span class="italic">two-way dimensional</span> dependence. For more information on two-way dimensional dependence, see <a href="#BABDHHCC">&#34;Structures for Which the Model Compiler Assumes Two-Way Dimensional Dependence&#34;</a>.</p>
<p>When a model contains a block of simultaneous equations, COMPILE gives you a warning message. In this case, you may want to check the settings of the options that control simultaneous solutions before you run the model. <a href="dml_options.htm#CHDEDGJG">&#34;Model Options&#34;</a> lists these options.</p>
<p>An example of a cyclic dependence that does not depend on any dimensional qualifiers can be illustrated as <code dir="ltr">A&gt;B&gt;C&gt;A</code>. The arrows indicate that <code dir="ltr">A</code> depends on <code dir="ltr">B</code>, <code dir="ltr">B</code>&nbsp;depends on <code dir="ltr">C</code>, and <code dir="ltr">C</code> depends on <code dir="ltr">A</code>.</p>
<p>An example of a cyclic dependence that is a two<span class="italic">-</span>way dimensional dependence can be illustrated as <code dir="ltr">A&gt;LEAD(B)&gt;LAG(A)</code>. The arrows indicate that <code dir="ltr">A</code> depends on the value of <code dir="ltr">B</code> from a future period, while <code dir="ltr">B</code> depends on the value of <code dir="ltr">A</code> from a previous period.</p>
</li>
</ul>
<p><a id="OLADM1102"></a><span class="subhead3">Order of Simultaneous Equations&nbsp;</span>The solution of a simultaneous block of equations is sensitive to the order of the equations. In general, rely on the model compiler to determine the optimal order for the equations. In some cases, however, you may be able to encourage convergence by placing the equations in a particular order.</p>
<p>To force the compiler to leave the simultaneous equations in each block in the order in which you place them, set the MODINPUTORDER option to <code dir="ltr">YES</code> before compiling the model. (MODINPUTORDER has no effect on the order of equations in simple blocks or step blocks.)</p>
<p class="subhead2"><a id="BABDHHCC"></a><a id="OLADM1103"></a>Structures for Which the Model Compiler Assumes Two-Way Dimensional Dependence</p>
<p>When dependence is introduced through any of the following structures, the model compiler assumes that two<span class="italic">-</span>way dimensional dependence occurs:</p>
<ul>
<li>
<p>A two-way dimensional dependence can occur when you use an aggregation function, such as AVERAGE, TOTAL, ANY, or COUNT.</p>
<pre dir="ltr">Opr.Income = Gross.Margin -
   (TOTAL(Marketing + Selling + R.D))
Marketing = LAG(Opr.Income, 1, month)
</pre></li>
</ul>
<pre dir="ltr"></pre>
<ul>
<li>
<p>A two-way dimensional dependence can occur when you use a time-series function that requires a time<span class="italic">-</span>period argument, such as CUMSUM, LAG, or LEAD (except for the specific functions and conditions described in <a href="#CACGJAAJ">&#34;Ensuring One-Way Dimensional Dependence&#34;</a>).</p>
</li>
<li>
<p>A two-way dimensional dependence also can occur when you use a financial function, such as DEPRSL or NPV.</p>
<p>A cyclic dependence across a time dimension that you introduce through a loan or depreciation function may cause unexpected results. The loan functions include FINTSCHED, FPMTSCHED, VINTSCHED, and VPMTSCHED. The depreciation functions include DEPRDECL, DEPRDECLSW, DEPRSL, and DEPRSOYD.</p>
</li>
</ul>
<p class="subhead2"><a id="CACGJAAJ"></a><a id="OLADM1104"></a>Ensuring One-Way Dimensional Dependence</p>
<p>When dependence between equations is introduced through any of the following structures, a one-way dimensional dependence occurs:</p>
<ul>
<li>
<p>A one-way dimensional dependence occurs when you use a LAG or LEAD function and when the argument for the number of time periods is coded as an explicit number (either as a value or a constant) or as the result of ABS. (Otherwise, there may be a two<span class="italic">-</span>way dependence, involving both previous and future dimension values, and the compiler assumes that a simultaneous solution is required.) The following example illustrates this use of LAG.</p>
<pre dir="ltr">Opr.Income = Gross.Margin - (Marketing + Selling + R.D)
Marketing = LAG(Opr.Income, 1, month)
</pre></li>
<li>
<p>A one-way dimensional dependence occurs when you use a MOVINGAVERAGE, MOVINGMAX, MOVINGMIN, or MOVINGTOTAL function, when the start and stop arguments are non-zero numbers, and when both the start and top arguments are positive or both are negative. Otherwise, two-way dimensional dependence is assumed.</p>
<pre dir="ltr">Opr.Income = Gross.Margin - (Marketing + Selling + R.D)
Marketing = MOVINGAVERAGE(Opr.Income, -4, -1, 1, month)
</pre></li>
</ul>
</div>
<!-- class="sect3" -->
<div id="OLADM243" class="sect3"><a id="sthref320"></a>
<h4 class="sect3">Obtaining Analysis Results</h4>
<p>After compiling a model, you can use the following tools to obtain information about the results of the analysis performed by the compiler:</p>
<ul>
<li>
<p>The MODEL.COMPRPT program produces a report that shows how model equations are grouped into blocks. For step blocks and for simultaneous blocks with a cross<span class="italic">-</span>dimensional dependence, the report lists the dimensions involved in the dependence.</p>
</li>
<li>
<p>The MODEL.DEPRT program produces a report that lists the variables and dimension values on which each model equation depends. When a dependence is dimensional, the report gives the name of the dimension.</p>
</li>
<li>
<p>The INFO function lets you obtain specific items of information about the structure of the model.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="OLADM244" class="sect3"><a id="sthref321"></a>
<h4 class="sect3">Checking for Additional Problems</h4>
<p>The compiler does not analyze the contents of any programs or formulas that are used in model equations. Therefore, you must check the programs and formulas yourself to make sure they do <span class="italic">not</span> do any of the following:</p>
<ul>
<li>
<p>Refer to the value of any variable used in the model.</p>
</li>
<li>
<p>Refer to the solution variable.</p>
</li>
<li>
<p>Limit any of the dimensions used in the model.</p>
</li>
<li>
<p>Invoke other models.</p>
</li>
</ul>
<p>When a model or program violates any of these restrictions, the results of the model may be incorrect.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_options.htm#i78646">MODTRACE</a>, <a href="dml_commands_2.htm#CCHCFEDC">TRACE</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEIDEBCA"></a>
<div id="OLADM245" class="sect2">
<h3 class="sect2">Running a Model</h3>
<p><a id="sthref322"></a>When you run a model, keep these points in mind:</p>
<ul>
<li>
<p>Before you run a model, the input data must be available in the solution variable.</p>
</li>
<li>
<p>Before running a model that contains a block of simultaneous equations, you might want to check or modify the values of some OLAP DML options that control the solution of simultaneous blocks. These options are described briefly in <a href="dml_options.htm#CHDEDGJG">&#34;Model Options&#34;</a>.</p>
</li>
<li>
<p>When your model contains any dimension-based equations, then you must provide a numeric solution variable that serves both as a source of data and as the assignment target for equation results. The solution variable is usually dimensioned by all of the dimensions on which model equations are based and also by the other dimensions of the solution variable on which you are not basing equations.</p>
</li>
<li>
<p>When you run a model, a loop is performed automatically over the values in the current status list of each of the dimensions of the solution variable on which you have not based equations.</p>
</li>
<li>
<p>When a model equation bases its calculations on data from previous time periods, then the solution variable must contain data for these previous periods. When it does not, or when the first value of the dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR is in status, then the results of the calculation are <code dir="ltr">NA</code>.</p>
</li>
</ul>
<div id="OLADM246" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref323"></a>
<h4 class="sect3">Syntax for Running a Model</h4>
<p>To run or solve a model, use the following syntax.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="italic">model-name&nbsp;</span>[<span class="italic">solution-variable</span>]&nbsp;[NOWARN]</p>
<p>where:</p>
<ul>
<li>
<p><span class="syntaxinlineitalic">model-name</span> is the name of the model.</p>
</li>
<li>
<p><span class="syntaxinlineitalic">solution-variable</span> is the name of a numeric variable that serves as both the source and the target of data in a model that contains dimension-based equations. The solution variable is usually dimensioned by all the dimensions on which model equations are based (as specified in explicit or included DIMENSION commands). The <span class="italic">solution-variable</span> argument is required when the model contains any dimension-based equations. When all the model equations are based only on variables, a solution variable is not needed and an error occurs when you supply this argument. See <a href="#BEIBGFJF">&#34;Dimensions of Solution Variables&#34;</a> for more information on dimensions of solution variables.</p>
</li>
<li>
<p><span class="syntaxinline">NOWARN</span> is an optional argument that specifies that you do not want to be warned when the model contains a block of simultaneous equations.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BEIBGFJF"></a>
<div id="OLADM247" class="sect3">
<h4 class="sect3">Dimensions of Solution Variables</h4>
<p>In a model with dimension-based equations, the solution variable is usually dimensioned by the dimensions on which model equations are based. Or, when a solution variable is dimensioned by a composite, the model equations can be based on base dimensions of the composite. The dimensions on which model equations are based are listed in explicit or inherited DIMENSION statements.</p>
<p class="subhead2"><a id="OLADM1105"></a>Special Cases of Solution Variables</p>
<p>The following special cases regarding the dimensions of the solution variable can occur:</p>
<ul>
<li>
<p>The solution variable can have dimensions that are not listed in DIMENSION commands. Oracle OLAP automatically loops over the values in the status of the extra dimensions. For example, the model might contain a DIMENSION statement that lists the <code dir="ltr">line</code> and <code dir="ltr">month</code> dimensions, but you might specify a solution variable dimensioned by <code dir="ltr">line</code>, <code dir="ltr">month</code>, and <code dir="ltr">division</code>. Oracle OLAP automatically loops over the <code dir="ltr">division</code> dimension when you run the model. The solution variable can also be dimensioned by a composite that has one or more base dimensions that are not listed in DIMENSION commands. See <a href="#BABDAJJD">&#34;Solution Variables Dimensioned by a Composite&#34;</a></p>
</li>
<li>
<p>When the solution variable has dimensions that are not listed in DIMENSION commands <span class="italic">and</span> when any of these other dimensions are the dimension of a step or simultaneous block, an error occurs.</p>
</li>
<li>
<p>Oracle OLAP loops over the values in the status of all the dimensions listed in DIMENSION commands, regardless of whether the solution variable is dimensioned by them. Therefore, Oracle OLAP does extra, unnecessary work when the solution variable is not dimensioned by all the listed dimensions. Oracle OLAP warns you of this situation before it starts solving the model.</p>
</li>
<li>
<p>The inclusion of an unneeded dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR in a DIMENSION statement causes incorrect results when you use a loan, depreciation, or aggregation function in a model equation. The incorrect results occur because any component of a model equation that refers to the values of a model dimension behaves <span class="italic">as if</span> that component has all the dimensions of the model.</p>
</li>
</ul>
<p class="subhead2"><a id="BABDAJJD"></a><a id="OLADM1106"></a>Solution Variables Dimensioned by a Composite</p>
<p>When a solution variable contains a composite in its dimension list, Oracle OLAP observes the sparsity of the composite whenever possible. As it solves the model, Oracle OLAP confines its loop over the composite to the values that exist in the composite. It observes the current status of the composite&#39;s base dimensions as it loops.</p>
<p>However, for proper solution of the model, Oracle OLAP must treat the following base dimensions of the composite as regular dimensions:</p>
<ul>
<li>
<p>A base dimension that is listed in a DIMENSION statement.</p>
</li>
<li>
<p>A base dimension that is implicated in a model equation created using SET (for example, an equation that assigns data to a variable dimensioned by the base dimension).</p>
</li>
<li>
<p>A base dimension that is also a base dimension of a different composite that is specified in the ACROSS phrase of an equation. (See <a href="dml_commands_2.htm#CIHCEHEH">SET</a> for more information on assignment statements and the use of ACROSS phrase.)</p>
</li>
</ul>
<p>When a base dimension of a solution variable&#39;s composite falls in any of the preceding three categories, Oracle OLAP treats that dimension as a regular dimension and loops over all the values that are in the current status.</p>
<p>When the solution variable&#39;s composite has other base dimensions that do not fall in the special three categories, Oracle OLAP creates a temporary composite of these extra base dimensions. The values of the temporary composite are the combinations that existed in the original composite. Oracle OLAP loops over the temporary composite as it solves the model.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEIDACBJ"></a>
<div id="OLADM248" class="sect2">
<h3 class="sect2">Debugging a Model</h3>
<p>The <a id="sthref324"></a><a id="sthref325"></a>following tools are available for debugging models:</p>
<ul>
<li>
<p>To see the order in which the equations in a model are solved, you can set the MODTRACE option to <code dir="ltr">YES</code> before you run the model.When you set MODTRACE to <code dir="ltr">YES</code>, you can use a DBGOUTFILE statement to send debugging information to a file. The file produced by DBGOUTFILE interweaves each line of your model with its corresponding output.</p>
</li>
<li>
<p>You can use the MODEL.COMPRPT, MODEL.DEPRT, and MODEL.XEQRPT programs and the INFO function to obtain information about the structure of a compiled model and the solution status of a model you have run.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABEJFHJ"></a>
<div id="OLADM249" class="sect1">
<h2 class="sect1">OLAP DML Aggregation Objects</h2>
<p>This topic provides information about aggregating data using the OLAP DML.It includes the following subtopics:</p>
<ul>
<li>
<p><a href="#BEHDBFJH">What is an OLAP DML Aggregation?</a></p>
</li>
<li>
<p><a href="#BEHGGHCH">Aggregating Data Using the OLAP DML</a></p>
</li>
<li>
<p><a href="#BEHHFHIG">Compiling Aggregation Specifications</a></p>
</li>
<li>
<p><a href="#i1021434">Executing the Aggregation</a></p>
</li>
<li>
<p><a href="#i1037377">Creating Custom Aggregates</a></p>
</li>
</ul>
<a id="BEHDBFJH"></a>
<div id="OLADM250" class="sect2">
<h3 class="sect2">What is an OLAP DML Aggregation?</h3>
<p><a id="sthref326"></a>Historically, aggregating data was summing detail data to provide subtotals and totals. However, using OLAP DML aggmap objects you can specify more complex aggregation calculations:</p>
<ul>
<li>
<p>The summary data dimensioned by a hierarchical dimension can be calculated using many different types of methods (for example, first, last, average, or weighted average). For an example of this type of aggregation, see <a href="dml_commands_1.htm#CHDEHECG">Example 9-18, &#34;Aggregating Up a Hierarchy&#34;</a>.</p>
</li>
<li>
<p>The summary data dimensioned by a nonhierarchical dimension can be calculated using a model. Using a model to calculate summary data is useful for calculating values for dimensions, such as line items, that do not have a hierarchical structure. Instead, you create a model to calculate the values of individual line items from one or more other line items or workspace objects. For an example of this type of aggregation, see <a href="dml_commands_1.htm#CHDEEHBB">Example 9-17, &#34;Solving a Model in an Aggregation&#34;</a>.</p>
</li>
<li>
<p>The detail data used to calculate the summary data can be in the variable that contains the summary data or in one or more other variables. The variable that contains the summary data does not have to have the same dimensions as the variables that contain the detail data. For an examples of this type of aggregation, see <a href="dml_commands_1.htm#CHDBHJHD">Example 9-15, &#34;Aggregating into a Different Variable&#34;</a> and <a href="dml_commands_1.htm#BCFIGIJJ">Example 9-32, &#34;Capstone Aggregation&#34;</a>.</p>
</li>
<li>
<p>The data can be aggregated as a database maintenance procedure, in response to user requests for summarized data, or you can combine these approaches. See <a href="#i1021434">&#34;Executing the Aggregation&#34;</a> for more information.</p>
</li>
<li>
<p>Data that is aggregated in response to user requests can be calculated each time it is requested or stored or cached in the analytic workspace for future queries.</p>
</li>
<li>
<p>The specification for the aggregation can be permanent or temporary as described in <a href="#i1037377">&#34;Creating Custom Aggregates&#34;</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BEHGGHCH"></a>
<div id="OLADM251" class="sect2">
<h3 class="sect2">Aggregating Data Using the OLAP DML</h3>
<p>To aggregate data using the OLAP DML, take the following steps:</p>
<ol>
<li>
<p>Decide if you want to aggregate all of the data as a database maintenance procedure using the AGGREGATE command or on-the-fly at run time using the AGGREGATE function or the $AGGMAP property, or if you want to combine these approaches and precalculate some values and calculate others at run time. For a discussion of the various approaches, see <a href="#i1021434">&#34;Executing the Aggregation&#34;</a>.</p>
</li>
<li>
<p>Issue a DEFINE AGGMAP statement to define the aggmap object as type AGGMAP.</p>
</li>
<li>
<p>Write the aggregation specification as described in <a href="dml_commands_1.htm#i1032719">AGGMAP</a>.</p>
</li>
<li>
<p>When aggregating a partitioned variable, run PARTITIONCHECK to check that the aggregation specification created in the previous step is compatible with the variable&#39;s partitioning. If it is not, either rewrite the aggregation specification or repartition the variable using CHGDFN.</p>
</li>
<li>
<p>When some or all of the data is to be aggregated using the AGGREGATE function:</p>
<ol>
<li>
<p>Compile the aggmap object as described in <a href="#BEHHFHIG">&#34;Compiling Aggregation Specifications&#34;</a>.</p>
</li>
<li>
<p>Add the triggering property, object, or event. For example, add a formula that has the AGGREGATE function as its expression and add $NATRIGGER property to the variable to trigger the execution of that formula in response to a run-time request for data.</p>
</li>
</ol>
</li>
<li>
<p>When you want the aggmap object to be a permanent part of the analytic workspace, save the aggmap object using an UPDATE statement followed by COMMIT.</p>
</li>
<li>
<p>For data that is to be calculated using the AGGREGATE command:</p>
<ol>
<li>
<p>(Optional) Use the DBMS_CUBE_LOG.ENABLE procedure to log the aggregation operation.</p>
</li>
<li>
<p>Use the AGGREGATE command, followed by UPDATE and COMMIT to precalculate the data and store it in the analytic workspace.</p>
</li>
</ol>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEHHFHIG"></a>
<div id="OLADM252" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Compiling Aggregation Specifications</h3>
<p>Compiling the aggmap object is important for aggregation performed at run-time using the AGGREGATE function. Unless the compiled version of the aggmap has been saved, the aggmap is recompiled by each session that uses it.</p>
<p>There are two ways you can compile an aggmap objects:</p>
<ul>
<li>
<p>Issue a COMPILE statement. <a id="sthref327"></a><a id="sthref328"></a><a id="sthref329"></a><a id="sthref330"></a></p>
<p>A COMPILE statement is the only way to compile an aggmap object that is used by an AGGREGATE function. Explicitly compiling an aggmap is also useful for finding syntax errors in the aggmap before attempting to use it to generate data. The following statement compiles the <code dir="ltr">sales.agg</code> aggmap.</p>
<pre dir="ltr">COMPILE gpct.aggmap
</pre></li>
<li>
<p>When you aggregate the data using an AGGREGATE command, include the FUNCDATA phrase in the statement.</p>
<p>When you use the FUNCDATA phrase in an AGGREGATE command, Oracle OLAP compiles the aggmap before it aggregates the data. For example, this statement compiles and precalculates the aggregate data.</p>
<pre dir="ltr">AGGREGATE sales USING gpct.aggmap FUNCDATA
</pre>
<div class="infobox-note">
<p class="notep1">Important:</p>
When some data is calculated on the fly, then you must compile and save the aggmap <span class="italic">after</span> executing the AGGREGATE command.</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1021434"></a>
<div id="OLADM253" class="sect2">
<h3 class="sect2">Executing the Aggregation</h3>
<p>The OLAP DML provides two ways to aggregate data:</p>
<ul>
<li>
<p><a id="sthref331"></a>As a data maintenance procedure using the AGGREGATE command. To use this method of aggregating data within an aggregation specification, identify data that you want to aggregate in this manner using the PRECOMPUTE statement or PRECOMPUTE clause of the RELATION statement.</p>
</li>
<li>
<p><a id="sthref332"></a><a id="sthref333"></a>At run-time when needed using the AGGREGATE function or adding an $AGGMAP property to the variable.</p>
</li>
</ul>
<p>You can choose whatever method seems appropriate: by level, individual member, member attribute, time range, data value, or other criteria. You can also combine these approaches and precalculate some values and calculate others at run time. In this case, frequently, you use the same aggmap with the AGGREGATE command and the AGGREGATE function. However, in some cases you might use different aggmaps.</p>
<p>One step that you can take to achieve overall good performance is to balance the amount of the data that you aggregate and store in an analytic workspace with the amount of data that you specify for calculation on the fly. You can use a PRECOMPUTE statement or clause within your aggregation specification to ask Oracle OLAP to use special functionality called the <a id="sthref334"></a>Aggregate Advisor to automatically determine what values to aggregate as a data maintenance procedure using the AGGREGATE command, or to explicitly identify the values yourself.</p>
</div>
<!-- class="sect2" -->
<a id="i1037377"></a>
<div id="OLADM254" class="sect2">
<h3 class="sect2">Creating Custom Aggregates</h3>
<p>The definitions for most aggregations persist from one session to another. However, you might need to create session-only aggregates at run time for forecasting or what-if analysis, or just because you want to view the data in an unforeseen way. Adding session-only aggregates is sometimes called creating custom aggregates. You can create non-persistent aggregated data without permanently changing the specification for the aggregation in the following ways:</p>
<ul>
<li>
<p>Using a MAINTAIN ADD SESSION statement, define temporary dimension members and include an aggregation specification as part of the definition of these members. The aggregation specification can either be a model or an aggmap. For an example of using this method to create a temporary aggregation, see <a href="dml_commands_2.htm#CHDBDHJA">Example 10-42, &#34;Creating Calculated Dimension Members with Aggregated Values&#34;</a> .</p>
</li>
<li>
<p>Create a model that specifies the aggregation. Use an AGGMAP ADD statement to add the model to an aggmap at run time. After a session, Oracle OLAP automatically removes any models that you have added to an aggmap in this manner. See <a href="dml_commands_1.htm#i1025748">AGGMAP ADD or REMOVE model</a> for more information.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1035122"></a>
<div id="OLADM255" class="sect1">
<h2 class="sect1">OLAP DML Allocation Objects</h2>
<p><a id="sthref335"></a>Allocating data involves creating lower-level data from summary data. This topic provides an overview of how to allocate data using OLAP DML statements. It includes the following subtopics:</p>
<ul>
<li>
<p><a href="#CEGDFHAH">Introduction to Allocating Data Using the OLAP DML</a></p>
</li>
<li>
<p><a href="#CEGDIBAB">Features of Allocation in Oracle OLAP</a></p>
</li>
<li>
<p><a href="#BABCJFHG">Allocating Data</a></p>
</li>
<li>
<p><a href="#CEGDDBGG">Handling NA Values When Allocating Data</a></p>
</li>
</ul>
<a id="CEGDFHAH"></a>
<div id="OLADM256" class="sect2">
<h3 class="sect2">Introduction to Allocating Data Using the OLAP DML</h3>
<p>You can specify data allocation in an ALLOCMAP type aggmap object. To implement the allocation, execute an ALLOCATE command for the ALLOCMAP aggmap. The target is a variable that is dimensioned by one or more hierarchical dimensions. The source data is specified by dimension values at a higher level in a hierarchical dimension than the values that specify the target cells.</p>
<p>ALLOCATE uses an aggmap to specify the dimensions and the values of the hierarchies to use in the allocation, the method of operation to use for a dimension, and other aspects of the allocation.</p>
<p>Some allocation operations are based on existing data. The object containing that data is the basis object for the allocation. In those operations, ALLOCATE distributes the data from the source based on the values of the basis object.</p>
<p>ALLOCATE has operations that are the inverse of the operations of the AGGREGATE command. The allocation operation methods range from simple allocations, such as copying the source data to the cells of the target variable, to very complex allocations, such as a proportional distribution of data from a source that is a formula, with the amount distributed being based on another formula, with multiple variables as targets, and with an aggmap that specifies different methods of allocation for different dimensions.</p>
</div>
<!-- class="sect2" -->
<a id="CEGDIBAB"></a>
<div id="OLADM257" class="sect2">
<h3 class="sect2">Features of Allocation in Oracle OLAP</h3>
<p>The Oracle OLAP allocation system is very flexible and has many features, including the following:</p>
<ul>
<li>
<p>The source, basis, and target objects can be the same variable or they can be different objects.</p>
</li>
<li>
<p>The source and basis objects can be formulas, so you can perform computations on existing data and use the result as the source or basis of the allocation.</p>
</li>
<li>
<p>You can specify the method of operation of the allocation for a dimension. The operations range from simple to very complex.</p>
</li>
<li>
<p>You can specify whether the allocated value is added to or replaces the existing value of the target cell.</p>
</li>
<li>
<p>You can specify an amount to add to or multiply by the allocated value before the result is assigned to the target cell.</p>
</li>
<li>
<p>You can lock individual values in a dimension hierarchy so that the data of the target cells for those dimension values is not changed by the allocation. When you lock a dimension value, then the allocation system normalizes the source data, which subtracts the locked data from the source before the allocation. You can choose to not normalize the source data.</p>
</li>
<li>
<p>You can specify minimum, maximum, floor, or ceiling values for certain operations.</p>
</li>
<li>
<p>You can copy the allocated data to a second variable so that you can have a record of individual allocations to a cell that is the target of multiple allocations.</p>
</li>
<li>
<p>You can specify ways of handling allocations when the basis has a null value.</p>
</li>
<li>
<p>You can use the same aggmap in different ALLOCATE commands to use the same set of dimension hierarchy values, operations, and arguments with different source, basis, or target objects.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABCJFHG"></a>
<div id="OLADM258" class="sect2">
<h3 class="sect2">Allocating Data</h3>
<p>To allocate data using an aggmap object, use the following OLAP DML statements in the order indicated:</p>
<ol>
<li>
<p>Issue a DEFINE AGGMAP statement to define the aggmap object.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When using the OLAP Worksheet, at the command line level, immediately after the DEFINE AGGMAP statement, enter an &#34;empty&#34; allocation specification by coding an ALLOCMAP statement. For example:
<pre dir="ltr">DEFINE myaggmap AGGMAP
ALLOCMAP &#39;END&#39;
</pre></div>
</li>
<li>
<p>Add a specification to the aggmap object that specifies the allocation that you want performed. See <a href="dml_commands_1.htm#i78780">ALLOCMAP</a> for more information.</p>
</li>
<li>
<p>When you want the aggmap object to be a permanent part of the analytic workspace, save the aggmap object using an UPDATE statement followed by COMMIT.</p>
</li>
<li>
<p>(Optional) Use the DBMS_CUBE_LOG.ENABLE procedure to log the allocation operation.</p>
</li>
<li>
<p>(Optional) Redesign the allocation error log by setting the ALLOCERRLOGFORMAT and ALLOCERRLOGHEADER options to nondefault values.</p>
</li>
<li>
<p>(Optional) Set the $ALLOCMAP property on one or more variables to specify that the aggmap is the default allocation specification for the variables.</p>
</li>
<li>
<p>(Recommended, but optional) Limit the variable to the target cells (that is, the cells into which you want to allocate data).</p>
</li>
<li>
<p>Issue an ALLOCATE statement to allocate the data.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CEGDDBGG"></a>
<div id="OLADM259" class="sect2">
<h3 class="sect2">Handling NA Values When Allocating Data</h3>
<p>Sometimes you want to overwrite existing data when allocating values to a target variable and at other times you want to write allocated values to target cells that have an <code dir="ltr">NA</code> basis before the allocation. For example, when you create a product in your product dimension, then no basis exists for the new product in your budget variable. You want to allocate advertising costs for the entire product line, including the new product.</p>
<p>You can handle <code dir="ltr">NA</code> values using formulas and hierarchical operators in a RELATION statement in the following ways:</p>
<ul>
<li>
<p>Handling NA data with formulas&mdash;The preferred method for handling the <code dir="ltr">NA</code> values is to construct a basis that only describes the desired target cells. You can refine your choice of basis values by deriving the basis from a formula. The following statements define a formula that equates the values of the new product to twice the value of an existing product. You could use such a formula as the basis for allocating advertising costs to the new product.</p>
<pre dir="ltr">DEFINE formula_basis FORMULA DECIMAL &lt;product&gt;
EQ IF product EQ &#39;NEWPRODUCT&#39; -
   THEN 2 * product.budget(product &#39;EXISTINGPRODUCT&#39;) -
   ELSE product.budget
</pre></li>
<li>
<p>Handling NA data with hierarchical operators&mdash;To allocate data to target cells that currently have <code dir="ltr">NA</code> values, use a hierarchical operator in a RELATION statement in the allocation specification. The hierarchical operators use the hierarchy of the dimension rather than existing data as the allocation basis. A danger in using hierarchical operators is the possibility of densely populating your detail level data, which can result in a much larger analytic workspace and require much more time to aggregate the data.</p>
<p>To continue the example of allocating the advertising cost for the new product, you could use the hierarchical last operator HLAST to specify allocating the cost to the new (and presumably the last) product in the product dimension hierarchy.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3608">
<tr>
<td class="cellalignment3617">
<table class="cellalignment3613">
<tr>
<td class="cellalignment3612"><a href="dml_expression.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3612"><a href="dml_properties.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3620">
<table class="cellalignment3611">
<tr>
<td class="cellalignment3612"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3612"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3612"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3612"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3612"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3612"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>