<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79272"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_AW%20PL%2FSQL%20Package"></a><title>&nbsp;&nbsp;DBMS_AW PL/SQL Package</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1079"/>
<meta name="dcterms.created" content="2016-04-19T12:44:12Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP DML Reference"/>
<meta name="dcterms.identifier" content="E17673-12"/>
<meta name="dcterms.isVersionOf" content="OLADM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="dml_app_sqlfunc.htm" title="Previous" type="text/html"/>
<link rel="Next" href="dml_app_sessioninit.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17673-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">16/19</span> <!-- End Header -->
<div id="OLADM946" class="appendix"><a id="sthref5426"></a>
<h1 class="appendix"><span class="secnum">B</span> &nbsp;&nbsp;DBMS_AW PL/SQL Package</h1>
<p><a id="ABC2634262"></a>The DBMS_AW PL/SQL package provides procedures and functions for <a id="ABC2625341"></a>interacting <a id="ABC2625343"></a>with analytic workspaces.</p>
<p>This appendix contains the following topics:</p>
<ul>
<li>
<p><a href="#BABJCFAE">Managing Analytic Workspaces</a></p>
</li>
<li>
<p><a href="#BABEDJCD">Embedding OLAP DML in SQL Statements</a></p>
</li>
<li>
<p><a href="#BABGGHHI">Using the Sparsity Advisor</a></p>
</li>
<li>
<p><a href="#BABBEFGI">Using the Aggregate Advisor</a></p>
</li>
<li>
<p><a href="#BABHGFJE">Summary of DBMS_AW Subprograms</a></p>
</li>
<li>
<p>One reference topic for each DBMS_AW subprogram</p>
</li>
</ul>
<a id="BABJCFAE"></a>
<div id="OLADM947" class="sect1">
<h2 class="sect1">Managing Analytic Workspaces</h2>
<p>To interact with Oracle OLAP, you must attach an analytic workspace to your session. When you have DBMS_AW PL/SQL package installed you can perform this task from within SQL*Plus. For example, you can use the following command to attach an analytic workspace with read-only access.</p>
<pre dir="ltr">EXECUTE dbms_aw.aw_attach (&#39;<span class="codeinlineitalic">awname</span>&#39;);
</pre>
<p>Each analytic workspace is associated with a list of analytic workspaces. The read-only workspace <code dir="ltr">EXPRESS.AW</code>, which contains the OLAP engine code, is always attached last in the list. When you create a workspace, it is attached first in the list by default.</p>
<p>You can reposition an analytic workspace within the list by using keywords such as <code dir="ltr">FIRST</code> and <code dir="ltr">LAST</code>. For example, the following commands show how to move an analytic workspace called <code dir="ltr">MYAW.TEST2</code> from the second position to the first position on the list.</p>
<pre dir="ltr"><span class="bold">EXECUTE dbms_aw.execute (&#39;AW LIST&#39;);</span>

TEST1 R/O UNCHANGED GLOBAL.TEST1 
TEST2 R/O UNCHANGED GLOBAL.TEST2 
EXPRESS R/O UNCHANGED SYS.EXPRESS 

<span class="bold">EXECUTE dbms_aw.aw_attach (&#39;test2&#39;, FALSE, FALSE, &#39;FIRST&#39;);</span>
<span class="bold">EXECUTE dbms_aw.execute (&#39;AW LIST&#39;);</span>

TEST2 R/O UNCHANGED GLOBAL.TEST2 
TEST1 R/O UNCHANGED GLOBAL.TEST1 
EXPRESS R/O UNCHANGED SYS.EXPRESS 
</pre>
<p>From within SQL*Plus, you can rename workspaces and make copies of workspaces. If you have an analytic workspace attached with read/write access, you can update the workspace and save your changes in the permanent database table where the workspace is stored. You must do a SQL <code dir="ltr">COMMIT</code> to save the workspace changes within the database.</p>
<p>The following commands make a copy of the objects and data in workspace <code dir="ltr">test2</code> in a new workspace called <code dir="ltr">test3</code>, update <code dir="ltr">test3</code>, and commit the changes to the database.</p>
<pre dir="ltr"><span class="bold">EXECUTE dbms_aw.aw_copy(&#39;test2&#39;, &#39;test3&#39;);</span>
<span class="bold">EXECUTE dbms_aw.aw_update(&#39;test3&#39;);</span>
<span class="bold">COMMIT;</span>
</pre></div>
<!-- class="sect1" -->
<a id="BABEDJCD"></a>
<div id="OLADM951" class="sect1">
<h2 class="sect1">Embedding OLAP DML in SQL Statements</h2>
<p><a id="sthref5427"></a>With the <code dir="ltr">DBMS_AW</code> package you can perform the full range of OLAP processing within analytic workspaces. You can import data from legacy workspaces, relational tables, or flat files. You can define OLAP objects and perform complex calculations.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use the <code dir="ltr">DBMS_AW</code> package to create analytic workspaces from scratch, you may not be able to use OLAP utilities, such as Analytic Workspace Manager and the <code dir="ltr">DBMS_AW</code> Aggregate Advisor, which require analytic workspaces of a particular structure.</div>
<div id="OLADM952" class="sect2"><a id="sthref5428"></a>
<h3 class="sect2">Methods for Executing OLAP DML Commands</h3>
<p>The <code dir="ltr">DBMS_AW</code> package provides several procedures for executing ad hoc OLAP DML commands. Using the <code dir="ltr">EXECUTE</code> or <code dir="ltr">INTERP_SILENT</code> procedures or the <code dir="ltr">INTERP</code> or <code dir="ltr">INTERCLOB</code> functions, you can execute a single OLAP DML command or a series of commands separated by semicolons.</p>
<p>Which procedures you use depends on how you want to direct output and on the size of the input and output buffers. For example, the <code dir="ltr">EXECUTE</code> procedure directs output to a printer buffer, the <code dir="ltr">INTERP_SILENT</code> procedure suppresses output, and the <code dir="ltr">INTERP</code> function returns the session log.</p>
<p>The <code dir="ltr">DBMS_AW</code> package also provides functions for evaluating OLAP expressions. The <code dir="ltr">EVAL_TEXT</code> function returns the result of a text expression, and <code dir="ltr">EVAL_NUMBER</code> returns the result of a numeric expression.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not confuse the <code dir="ltr">DBMS_AW</code> functions <code dir="ltr">EVAL_NUMBER</code> and <code dir="ltr">EVAL_TEXT</code> with the SQL function <code dir="ltr">OLAP_EXPRESSION</code>. S<a id="sthref5429"></a>ee <a href="dml_app_sqlfunc.htm#BGBGDDDF">&#34;OLAP_EXPRESSION&#34;</a> for more information.</div>
</div>
<!-- class="sect2" -->
<a id="CHDIJEGA"></a>
<div id="OLADM953" class="sect2">
<h3 class="sect2">Guidelines for Using Quotation Marks in OLAP DML Commands</h3>
<p><a id="sthref5430"></a><a id="sthref5431"></a>The SQL processor evaluates the embedded OLAP DML commands, either in whole or in part, before sending them to Oracle OLAP for processing. Follow these guidelines when formatting the OLAP DML commands in the <code dir="ltr">olap-commands</code> parameter of <code dir="ltr">DBMS_AW</code> procedures:</p>
<ul>
<li>
<p>Wherever you would normally use a single quote (<code dir="ltr">&#39;</code>) in an OLAP DML command, use two single quotes (<code dir="ltr">&#39;&#39;</code>). The SQL processor strips one of the single quotes before it sends the OLAP DML command to Oracle OLAP.</p>
</li>
<li>
<p>In the OLAP DML, a double quote (<code dir="ltr">&#34;</code>) indicates the beginning of a comment.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGGHHI"></a>
<div id="OLADM954" class="sect1">
<h2 class="sect1">Using the Sparsity Advisor</h2>
<p><a id="ABC2607182"></a>Data can be stored in several different forms in an analytic workspace, depending on whether it is dense, sparse, or very sparse. The Sparsity Advisor is a group of subprograms in <code dir="ltr">DBMS_AW</code> that you can use to analyze the relational source data and get recommendations for storing it in an analytic workspace.</p>
<div id="OLADM955" class="sect2"><a id="sthref5432"></a>
<h3 class="sect2">Data Storage Options in Analytic Workspaces</h3>
<p>Analytic workspaces analyze and manipulate data in a multidimensional format that allocates one cell for each combination of dimension members. The cell can contain a data value, or it can contain an <code dir="ltr">NA</code> (null). Regardless of its content, the cell size is defined by the data type, for example, every cell in a <code dir="ltr">DECIMAL</code> variable is 8 bytes.</p>
<p>Variables can be either dense (they contain 30% or more cells with data values) or sparse (less than 30% data values). Most variables are sparse and many are extremely sparse.</p>
<p><a id="sthref5433"></a><a id="sthref5434"></a>Although data can also be stored in the multidimensional format used for analysis, other methods are available for storing sparse variables that make more efficient use of disk space and improve performance. Sparse data can be stored in a variable defined with a <span class="bold">composite</span> dimension. A composite has as its members the dimension-value combinations (called <span class="bold">tuples</span>) for which there is data. When a data value is added to a variable dimensioned by a composite, that action triggers the creation of a composite tuple. A composite is an index into one or more sparse data variables, and is used to store sparse data in a compact form. Very sparse data can be stored in a variable defined with a <span class="bold">compressed composite</span>, which uses a different algorithm for data storage from regular composites.</p>
</div>
<!-- class="sect2" -->
<div id="OLADM956" class="sect2"><a id="sthref5435"></a>
<h3 class="sect2">Selecting the Best Data Storage Method</h3>
<p>In contrast to dimensional data, relational data is stored in tables in a very compact format, with rows only for actual data values. When designing an analytic workspace, you may have difficulty manually identifying sparsity in the source data and determining the best storage method. The Sparsity Advisor analyzes the source data in relational tables and recommends a storage method. The recommendations may include the definition of a composite and partitioning of the data variable.</p>
<p>The Sparsity Advisor consists of these procedures and functions:</p>
<br/>
<a href="#CHDGAHHF">SPARSITY_ADVICE_TABLE Procedure</a><br/>
<a href="#CHDGEEDC">ADD_DIMENSION_SOURCE Procedure</a><br/>
<a href="#CHDDBBFF">ADVISE_SPARSITY Procedure</a><br/>
<a href="#CHDHGJHJ">ADVISE_DIMENSIONALITY Function</a><br/>
<a href="#CHDFEGGC">ADVISE_DIMENSIONALITY Procedure</a><br/>
<p>The Sparsity Advisor also provides a public table type for storing information about the dimensions of the facts being analyzed. Three objects are used to define the table type:</p>
<br/>
<code dir="ltr"><a id="sthref5436"></a>DBMS_AW$_COLUMNLIST_T</code><br/>
<code dir="ltr"><a id="sthref5437"></a>DBMS_AW$_DIMENSION_SOURCE_T</code><br/>
<code dir="ltr"><a id="sthref5438"></a>DBMS_AW$_DIMENSION_SOURCES_T</code><br/>
<p>The following SQL <code dir="ltr">DESCRIBE</code> statements show the object definitions.</p>
<pre dir="ltr"><span class="bold">DESCRIBE dbms_aw$_columnlist_t</span>
dbms_aw$_columnlist_t TABLE OF VARCHAR2(100)
 
<span class="bold">DESCRIBE dbms_aw$_dimension_source_t</span>
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 DIMNAME                                            VARCHAR2(100)
 COLUMNNAME                                         VARCHAR2(100)
 SOURCEVALUE                                        VARCHAR2(32767)
 DIMTYPE                                            NUMBER(3)
 HIERCOLS                                           DBMS_AW$_COLUMNLIST_T
 PARTBY                                             NUMBER(9)

<span class="bold">DESCRIBE dbms_aw$_dimension_sources_t</span>
dbms_aw$_dimension_sources_t TABLE OF DBMS_AW$_DIMENSION_SOURCE_T
</pre></div>
<!-- class="sect2" -->
<div id="OLADM957" class="sect2"><a id="sthref5439"></a>
<h3 class="sect2">Using the Sparsity Advisor</h3>
<p>Take these steps to use the Sparsity Advisor:</p>
<ol>
<li>
<p>Call <code dir="ltr">SPARSITY_ADVICE_TABLE</code> to create a table for storing the evaluation of the Sparsity Advisor.</p>
</li>
<li>
<p>Call <code dir="ltr">ADD_DIMENSION_SOURCE</code> for each dimension related by one or more columns to the fact table being evaluated.</p>
<p>The information that you provide about these dimensions is stored in a <code dir="ltr">DBMS_AW$_DIMENSION_SOURCES_T</code> variable.</p>
</li>
<li>
<p>Call <code dir="ltr">ADVISE_SPARSITY</code> to evaluate the fact table.</p>
<p>Its recommendations are stored in the table created by <code dir="ltr">SPARSITY_ADVICE_TABLE</code>. You can use these recommendations to make your own judgements about defining variables in your analytic workspace, or you can continue with the following step.</p>
</li>
<li>
<p>Call the <code dir="ltr">ADVISE_DIMENSIONALITY</code> procedure to get the OLAP DML object definitions for the recommended composite, partitioning, and variable definitions.</p>
<p><span class="bolditalic">or</span></p>
<p>Use the <code dir="ltr">ADVISE_DIMENSIONALITY</code> function to get the OLAP DML object definition for the recommended composite and the dimension order for the variable definitions for a specific partition.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div id="OLADM2977" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref5440"></a>
<h3 class="sect2">Example: Evaluating Sparsity in the GLOBAL Schema</h3>
<p><a href="#BABIEEEH">Example B-1, &#34;Sparsity Advisor Script for GLOBAL&#34;</a> provides a SQL script for evaluating the sparsity of the <code dir="ltr">UNITS_HISTORY_FACT</code> table in the <code dir="ltr">GLOBAL</code> schema. In the <code dir="ltr">GLOBAL</code> analytic workspace, <code dir="ltr">UNITS_HISTORY_FACT</code> defines the Units Cube and is the source for the <code dir="ltr">UNITS</code> variable. <code dir="ltr">UNITS_HISTORY_FACT</code> is a fact table with a primary key composed of foreign keys from four dimension tables. A fifth column contains the facts for Unit Sales.</p>
<p>The <code dir="ltr">CHANNEL_DIM</code> and <code dir="ltr">CUSTOMER_DIM</code> tables contain all of the information for the Channel and Customer dimensions in a basic star configuration. Three tables in a snowflake configuration provide data for the Time dimension: <code dir="ltr">MONTH_DIM</code>, <code dir="ltr">QUARTER_DIM</code>, and <code dir="ltr">YEAR_DIM</code>. The <code dir="ltr">PRODUCT_CHILD_PARENT</code> table is a parent-child table and defines the Product dimension.</p>
<div id="OLADM2978" class="example">
<p class="titleinexample"><a id="BABIEEEH"></a>Example B-1 Sparsity Advisor Script for GLOBAL</p>
<pre dir="ltr">CONNECT global/global
SET ECHO ON
SET LINESIZE 300
SET PAGESIZE 300
SET SERVEROUT ON FORMAT WRAPPED
 
-- Define and initialize an advice table named AW_SPARSITY_ADVICE
BEGIN
     dbms_aw.sparsity_advice_table();
EXCEPTION
     WHEN OTHERS THEN NULL;
END;
/
 
TRUNCATE TABLE aw_sparsity_advice;
 
DECLARE
     dimsources dbms_aw$_dimension_sources_t;
     dimlist VARCHAR2(500);
     sparsedim VARCHAR2(500);
     defs CLOB;
BEGIN
-- Provide information about all dimensions in the cube
     dbms_aw.add_dimension_source(&#39;channel&#39;, &#39;channel_id&#39;, dimsources, 
         &#39;channel_dim&#39;, dbms_aw.hier_levels,
          dbms_aw$_columnlist_t(&#39;channel_id&#39;, &#39;total_channel_id&#39;));
     dbms_aw.add_dimension_source(&#39;product&#39;, &#39;item_id&#39;, dimsources, 
          &#39;product_child_parent&#39;, dbms_aw.hier_parentchild, 
           dbms_aw$_columnlist_t(&#39;product_id&#39;, &#39;parent_id&#39;));
     dbms_aw.add_dimension_source(&#39;customer&#39;, &#39;ship_to_id&#39;, dimsources,
         &#39;customer_dim&#39;, dbms_aw.hier_levels,
          dbms_aw$_columnlist_t(&#39;ship_to_id&#39;, &#39;warehouse_id&#39;, &#39;region_id&#39;,
               &#39;total_customer_id&#39;));
     dbms_aw.add_dimension_source(&#39;time&#39;, &#39;month_id&#39;, dimsources,
           &#39;SELECT m.month_id, q.quarter_id, y.year_id
                FROM time_month_dim m, time_quarter_dim q, time_year_dim y
                WHERE m.parent=q.quarter_id AND q.parent=y.year_id&#39;,
            dbms_aw.hier_levels, 
            dbms_aw$_columnlist_t(&#39;month_id&#39;, &#39;quarter_id&#39;, &#39;year_id&#39;));
 
-- Analyze fact table and provide advice without partitioning
     dbms_aw.advise_sparsity(&#39;units_history_fact&#39;, &#39;units_cube&#39;, 
          dimsources, dbms_aw.advice_default, dbms_aw.partby_none);
 
COMMIT;
 
-- Generate OLAP DML for composite and variable definitions
dimlist := dbms_aw.advise_dimensionality(&#39;units_cube&#39;, sparsedim, 
           &#39;units_cube_composite&#39;);
dbms_output.put_line(&#39;Dimension list:  &#39; || dimlist);
dbms_output.put_line(&#39;Sparse dimension:  &#39; || sparsedim);
dbms_aw.advise_dimensionality(defs, &#39;units_cube&#39;);
dbms_output.put_line(&#39;Definitions:  &#39;);
dbms_aw.printlog(defs);
 
END;
/
</pre></div>
<!-- class="example" -->
<div id="OLADM2979" class="sect3"><a id="sthref5441"></a>
<h4 class="sect3">Advice from Sample Program</h4>
<p>The script in <a href="#BABIEEEH">Example B-1, &#34;Sparsity Advisor Script for GLOBAL&#34;</a> generates the following information.</p>
<pre dir="ltr">Dimension list:  &lt;channel units_cube_composite&lt;product customer time&gt;&gt;
Sparse dimension:  DEFINE units_cube_composite COMPOSITE &lt;product customer time&gt;
Definitions:
DEFINE units_cube.cp COMPOSITE &lt;product customer time&gt;
DEFINE units_cube NUMBER VARIABLE &lt;channel units_cube.cp&lt;product customer time&gt;&gt;
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="sect3" -->
<div id="OLADM2980" class="sect3"><a id="sthref5442"></a>
<h4 class="sect3">Information Stored in AW_SPARSITY_ADVICE Table</h4>
<p><a id="sthref5443"></a>This SQL <code dir="ltr">SELECT</code> statement shows some columns from the <code dir="ltr">AW_SPARSITY_ADVICE</code> table, which is the basis for the recommended OLAP DML object definitions.</p>
<pre dir="ltr">SELECT fact, dimension, dimcolumn, membercount nmem, leafcount nleaf, 
     advice, density
     FROM aw_sparsity_advice
     WHERE cubename=&#39;units_cube&#39;;
 
</pre>
<p>This query returns the following result set:</p>
<pre dir="ltr">FACT                 DIMENSION    DIMCOLUMN     NMEM  NLEAF ADVICE        DENSITY
-------------------- ------------ ------------ ----- ------ ------------ --------
units_history_fact   channel      channel_id       3      3 DENSE          .46182
units_history_fact   product      item_id         48     36 SPARSE         .94827
units_history_fact   customer     ship_to_id      61     61 SPARSE         .97031
units_history_fact   time         month_id        96     79 SPARSE         .97664
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABBEFGI"></a>
<div id="OLADM961" class="sect1">
<h2 class="sect1">Using the Aggregate Advisor</h2>
<p>The <a id="ABC2608071"></a>management <a id="sthref5444"></a>of aggregate data within analytic workspaces can have significant performance implications. To determine an optimal set of dimension member combinations to preaggregate, you can use the <code dir="ltr">ADVISE_REL</code> and <code dir="ltr">ADVISE_CUBE</code> procedures in the <code dir="ltr">DBMS_AW</code> package. These procedures are known together as the <span class="bold"><a id="ABC2608091"></a>Aggregate Advisor.</span></p>
<p>Based on a percentage that you specify, <code dir="ltr">ADVISE_REL</code> suggests a set of dimension members to preaggregate. The <code dir="ltr">ADVISE_CUBE</code> procedure suggests a set of members for each dimension of a cube.</p>
<div id="OLADM962" class="sect2"><a id="sthref5445"></a>
<h3 class="sect2">Aggregation Facilities within the Workspace</h3>
<p>Instructions for storing aggregate data are specified in an analytic workspace object called an aggmap. The OLAP DML <code dir="ltr">AGGREGATE</code> command uses the aggmap to preaggregate the data. Any data that is not preaggregated is aggregated dynamically by the <code dir="ltr">AGGREGATE</code> function when the data is queried.</p>
<p>Choosing a balance between static and dynamic aggregation depends on many factors including disk space, available memory, and the nature and frequency of the queries that run against the data. After weighing these factors, you may arrive at a percentage of the data to preaggregate.</p>
<p>Once you have determined the percentage of the data to preaggregate, you can use the Aggregate Advisor. These procedures analyze the distribution of dimension members within hierarchies and identify an optimal set of dimension members to preaggregate.</p>
</div>
<!-- class="sect2" -->
<div id="OLADM2981" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref5446"></a>
<h3 class="sect2">Example: Using the ADVISE_REL Procedure</h3>
<p>Based on a precompute percentage that you specify, the <code dir="ltr">ADVISE_REL</code> procedure analyzes a family relation, which represents a dimension with all its hierarchical relationships, and returns a list of dimension members. <a id="sthref5447"></a></p>
<p><code dir="ltr">ADVISE_CUBE</code> applies similar heuristics to each dimension in an aggmap for a cube.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CEGFHDII">&#34;ADVISE_REL Procedure&#34;</a></p>
</li>
<li>
<p><a href="#CEGJCHHA">ADVISE_CUBE Procedure</a></p>
</li>
</ul>
</div>
<p><a href="#CEGJADGH">Example B-2</a> uses the following sample Customer dimension to illustrate the <code dir="ltr">ADVISE_REL</code> procedure.</p>
<p class="subhead2"><a id="CEGEDHDG"></a><a id="OLADM2982"></a>Sample Dimension: Customer in the Global Analytic Workspace</p>
<p>The Customer dimension in <code dir="ltr">GLOBAL_AW.GLOBAL</code> has two hierarchies: <code dir="ltr">SHIPMENTS_ROLLUP</code> with four levels, and <code dir="ltr">MARKET_ROLLUP</code> with three levels. The dimension has 106 members. This number includes all members at each level and all level names.</p>
<p>The members of the Customer dimension are integer keys whose text values are defined in long and short descriptions.</p>
<p>The following OLAP DML commands show information about the representation of the Customer dimension, which is in database standard form.</p>
<pre dir="ltr"><span class="bold">SET serveroutput ON</span>
---- Number of members of Customer dimension
<span class="bold">EXECUTE dbms_aw.execute(&#39;SHOW STATLEN(customer)&#39;)</span>
106

---- Hierarchies in Customer dimension;
<span class="bold">EXECUTE dbms_aw.execute(&#39;REPORT W 40 customer_hierlist&#39;);</span>
CUSTOMER_HIERLIST
----------------------------------------
MARKET_ROLLUP
SHIPMENTS_ROLLUP

---- Levels in Customer dimension
<span class="bold">EXECUTE dbms_aw.execute(&#39;REPORT W 40 customer_levellist&#39;);</span>

CUSTOMER_LEVELLIST
----------------------------------------
TOTAL_CUSTOMER
REGION
WAREHOUSE
TOTAL_MARKET
MARKET_SEGMENT
ACCOUNT
SHIP_TO
---- Levels in each hierarchy from leaf to highest
<span class="bold">EXECUTE dbms_aw.execute(&#39;REPORT W 20 customer_hier_levels&#39;);</span>
 
CUSTOMER_HIERL
IST            CUSTOMER_HIER_LEVELS
-------------- --------------------
SHIPMENTS      SHIP_TO
               WAREHOUSE
               REGION
               TOTAL_CUSTOMER
MARKET_SEGMENT SHIP_TO
               ACCOUNT
               MARKET_SEGMENT
               TOTAL_MARKET

---- Parent relation showing parent-child relationships in the Customer dimension
---- Only show the last 20 members
<span class="bold">EXECUTE dbms_aw.execute(&#39;LIMIT customer TO LAST 20&#39;);</span>
<span class="bold">EXECUTE dbms_aw.execute(&#39;REPORT W 10 DOWN customer W 20 customer_parentrel&#39;);</span>

           -----------CUSTOMER_PARENTREL------------
           ------------CUSTOMER_HIERLIST------------
CUSTOMER      MARKET_ROLLUP       SHIPMENTS_ROLLUP
---------- -------------------- --------------------
103        44                   21
104        45                   21
105        45                   21
106        45                   21
7          NA                   NA
1          NA                   NA
8          NA                   1
9          NA                   1
10         NA                   1
11         NA                   8
12         NA                   10
13         NA                   9
14         NA                   9
15         NA                   8
16         NA                   9
17         NA                   8
18         NA                   8
19         NA                   9
20         NA                   9
21         NA                   10

---- Show text descriptions for the same twenty dimension members 
<span class="bold">EXECUTE dbms_aw.execute(&#39;REPORT W 15 DOWN customer W 35 ACROSS customer_hierlist: &lt;customer_short_description&gt;&#39;);</span>
ALL_LANGUAGES: AMERICAN_AMERICA
                ---------------------------CUSTOMER_HIERLIST---------------------------
                -----------MARKET_ROLLUP----------- ---------SHIPMENTS_ROLLUP----------
CUSTOMER            CUSTOMER_SHORT_DESCRIPTION          CUSTOMER_SHORT_DESCRIPTION
--------------- ----------------------------------- -----------------------------------
103             US Marine Svcs Washington           US Marine Svcs Washington
104             Warren Systems New York             Warren Systems New York
105             Warren Systems Philladelphia        Warren Systems Philladelphia
106             Warren Systems Boston               Warren Systems Boston
7               Total Market                        NA
1               NA                                  All Customers
8               NA                                  Asia Pacific
9               NA                                  Europe
10              NA                                  North America
11              NA                                  Australia
12              NA                                  Canada
13              NA                                  France
14              NA                                  Germany
15              NA                                  Hong Kong
16              NA                                  Italy
17              NA                                  Japan
18              NA                                  Singapore
19              NA                                  Spain
20              NA                                  United Kingdom
21              NA                                  United States
</pre>
<div id="OLADM2983" class="example">
<p class="titleinexample"><a id="CEGJADGH"></a>Example B-2 ADVISE_REL: Suggested Preaggregation of the Customer Dimension</p>
<p>This example uses the <code dir="ltr">GLOBAL</code> Customer dimension described in <a href="#CEGEDHDG">Sample Dimension: Customer in the Global Analytic Workspace</a>.</p>
<p>The following PL/SQL statements assume that you want to preaggregate 25% of the Customer dimension. <code dir="ltr">ADVISE_REL</code> returns the suggested set of members in a valueset.</p>
<pre dir="ltr">SET serveroutput ON
EXECUTE dbms_aw.execute(&#39;AW ATTACH global_aw.global&#39;);
EXECUTE dbms_aw.execute(&#39;DEFINE customer_preagg VALUESET customer&#39;);
EXECUTE dbms_aw.advise_rel(&#39;customer_parentrel&#39;, &#39;customer_preagg&#39;, 25);
EXECUTE dbms_aw.execute(&#39;SHOW VALUES(customer_preagg)&#39;);
31
2
4
5
6
7
1
8
9
20
21
</pre></div>
<!-- class="example" -->
<p>The returned Customer members with their <a id="sthref5448"></a>text <a id="sthref5449"></a>descriptions, related levels, and related hierarchies, are shown as follows.</p>
<div class="inftblinformal">
<table class="cellalignment3615" title="Customer Dimension Members Returned by DBMS_AW.ADVISE_REL" summary="DBMS_AW.ADVISE_REL example illustrating preaggregation of a Customer dimension" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t5">Customer Member</th>
<th class="cellalignment3616" id="r1c2-t5">Description</th>
<th class="cellalignment3616" id="r1c3-t5">Hierarchy</th>
<th class="cellalignment3616" id="r1c4-t5">Level</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t5" headers="r1c1-t5"><code dir="ltr">31</code></td>
<td class="cellalignment3617" headers="r2c1-t5 r1c2-t5"><code dir="ltr">Kosh Enterprises</code></td>
<td class="cellalignment3617" headers="r2c1-t5 r1c3-t5"><code dir="ltr">MARKET_ROLLUP</code></td>
<td class="cellalignment3617" headers="r2c1-t5 r1c4-t5"><code dir="ltr">ACCOUNT</code></td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t5" headers="r1c1-t5"><code dir="ltr">2</code></td>
<td class="cellalignment3617" headers="r3c1-t5 r1c2-t5"><code dir="ltr">Consulting</code></td>
<td class="cellalignment3617" headers="r3c1-t5 r1c3-t5"><code dir="ltr">MARKET_ROLLUP</code></td>
<td class="cellalignment3617" headers="r3c1-t5 r1c4-t5"><code dir="ltr">MARKET_SEGMENT</code></td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t5" headers="r1c1-t5"><code dir="ltr">4</code></td>
<td class="cellalignment3617" headers="r4c1-t5 r1c2-t5"><code dir="ltr">Government</code></td>
<td class="cellalignment3617" headers="r4c1-t5 r1c3-t5"><code dir="ltr">MARKET_ROLLUP</code></td>
<td class="cellalignment3617" headers="r4c1-t5 r1c4-t5"><code dir="ltr">MARKET_SEGMENT</code></td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t5" headers="r1c1-t5"><code dir="ltr">5</code></td>
<td class="cellalignment3617" headers="r5c1-t5 r1c2-t5"><code dir="ltr">Manufacturing</code></td>
<td class="cellalignment3617" headers="r5c1-t5 r1c3-t5"><code dir="ltr">MARKET_ROLLUP</code></td>
<td class="cellalignment3617" headers="r5c1-t5 r1c4-t5"><code dir="ltr">MARKET_SEGMENT</code></td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t5" headers="r1c1-t5"><code dir="ltr">6</code></td>
<td class="cellalignment3617" headers="r6c1-t5 r1c2-t5"><code dir="ltr">Reseller</code></td>
<td class="cellalignment3617" headers="r6c1-t5 r1c3-t5"><code dir="ltr">MARKET_ROLLUP</code></td>
<td class="cellalignment3617" headers="r6c1-t5 r1c4-t5"><code dir="ltr">MARKET_SEGMENT</code></td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t5" headers="r1c1-t5"><code dir="ltr">7</code></td>
<td class="cellalignment3617" headers="r7c1-t5 r1c2-t5"><code dir="ltr">TOTAL_MARKET</code></td>
<td class="cellalignment3617" headers="r7c1-t5 r1c3-t5"><code dir="ltr">MARKET_ROLLUP</code></td>
<td class="cellalignment3617" headers="r7c1-t5 r1c4-t5"><code dir="ltr">TOTAL_MARKET</code></td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t5" headers="r1c1-t5"><code dir="ltr">1</code></td>
<td class="cellalignment3617" headers="r8c1-t5 r1c2-t5"><code dir="ltr">TOTAL_CUSTOMER</code></td>
<td class="cellalignment3617" headers="r8c1-t5 r1c3-t5"><code dir="ltr">SHIPMENTS_ROLLUP</code></td>
<td class="cellalignment3617" headers="r8c1-t5 r1c4-t5"><code dir="ltr">TOTAL_CUSTOMER</code></td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t5" headers="r1c1-t5"><code dir="ltr">8</code></td>
<td class="cellalignment3617" headers="r9c1-t5 r1c2-t5"><code dir="ltr">Asia Pacific</code></td>
<td class="cellalignment3617" headers="r9c1-t5 r1c3-t5"><code dir="ltr">SHIPMENTS_ROLLUP</code></td>
<td class="cellalignment3617" headers="r9c1-t5 r1c4-t5"><code dir="ltr">REGION</code></td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r10c1-t5" headers="r1c1-t5"><code dir="ltr">9</code></td>
<td class="cellalignment3617" headers="r10c1-t5 r1c2-t5"><code dir="ltr">Europe</code></td>
<td class="cellalignment3617" headers="r10c1-t5 r1c3-t5"><code dir="ltr">SHIPMENTS_ROLLUP</code></td>
<td class="cellalignment3617" headers="r10c1-t5 r1c4-t5"><code dir="ltr">REGION</code></td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r11c1-t5" headers="r1c1-t5"><code dir="ltr">20</code></td>
<td class="cellalignment3617" headers="r11c1-t5 r1c2-t5"><code dir="ltr">United Kingdom</code></td>
<td class="cellalignment3617" headers="r11c1-t5 r1c3-t5"><code dir="ltr">SHIPMENTS_ROLLUP</code></td>
<td class="cellalignment3617" headers="r11c1-t5 r1c4-t5"><code dir="ltr">WAREHOUSE</code></td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r12c1-t5" headers="r1c1-t5"><code dir="ltr">21</code></td>
<td class="cellalignment3617" headers="r12c1-t5 r1c2-t5"><code dir="ltr">United States</code></td>
<td class="cellalignment3617" headers="r12c1-t5 r1c3-t5"><code dir="ltr">SHIPMENTS_ROLLUP</code></td>
<td class="cellalignment3617" headers="r12c1-t5 r1c4-t5"><code dir="ltr">WAREHOUSE</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<div class="refentry"><a id="BABHGFJE"></a>
<div id="OLADM964" class="refsect1"><a id="CEGIHFCF"></a>
<h2 class="refsect1">Summary of DBMS_AW Subprograms</h2>
<p>The following table describes the subprograms provided in <code dir="ltr">DBMS_AW</code>.</p>
<div id="OLADM2984" class="tblformal">
<p class="titleintable"><a id="sthref5450"></a><a id="sthref5451"></a>Table B-1 DBMS_AW Subprograms</p>
<table class="cellalignment3618" title="DBMS_AW Subprograms" summary="List of procedures in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t6">Subprogram</th>
<th class="cellalignment3616" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t6" headers="r1c1-t6">
<p><a href="#CHDGEEDC">ADD_DIMENSION_SOURCE Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r2c1-t6 r1c2-t6">
<p>Populates a table type named <code dir="ltr">DBMS_AW$_DIMENSION_SOURCES_T</code> with information provided in its parameters about the dimensions of the cube.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t6" headers="r1c1-t6">
<p><a href="#CEGJCHHA">ADVISE_CUBE Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r3c1-t6 r1c2-t6">
<p>Suggests how to preaggregate a cube, based on a specified percentage of the cube&#39;s data.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t6" headers="r1c1-t6">
<p><a href="#CHDHGJHJ">ADVISE_DIMENSIONALITY Function</a></p>
</td>
<td class="cellalignment3617" headers="r4c1-t6 r1c2-t6">
<p>Returns a recommended composite definition for the cube and a recommended dimension order.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t6" headers="r1c1-t6">
<p><a href="#CHDFEGGC">ADVISE_DIMENSIONALITY Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r5c1-t6 r1c2-t6">
<p>Generates the OLAP DML commands for defining the recommended composite and measures in a cube.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t6" headers="r1c1-t6">
<p><a href="#BABFBHBI">ADVISE_PARTITIONING_DIMENSION Function</a></p>
</td>
<td class="cellalignment3617" headers="r6c1-t6 r1c2-t6">
<p>Identifies the dimension that the Sparsity Advisor partitioned over.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t6" headers="r1c1-t6">
<p><a href="#BABHBAJD">ADVISE_PARTITIONING_LEVEL Function</a></p>
</td>
<td class="cellalignment3617" headers="r7c1-t6 r1c2-t6">
<p>Returns the level used by the Sparsity Advisor for partitioning over a dimension.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t6" headers="r1c1-t6">
<p><a href="#CEGFHDII">ADVISE_REL Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r8c1-t6 r1c2-t6">
<p>Suggests how to preaggregate a dimension, based on a specified percentage of the dimension&#39;s members.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t6" headers="r1c1-t6">
<p><a href="#CHDDBBFF">ADVISE_SPARSITY Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r9c1-t6 r1c2-t6">
<p>Analyzes a fact table for sparsity and populates a table with the results of its analysis.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r10c1-t6" headers="r1c1-t6">
<p><a href="#BABHJFIG">AW_ATTACH Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r10c1-t6 r1c2-t6">
<p>Attaches an analytic workspace to a session.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r11c1-t6" headers="r1c1-t6">
<p><a href="#BABGGEFF">AW_COPY Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r11c1-t6 r1c2-t6">
<p>Creates a new analytic workspace and populates it with the object definitions and data from another analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r12c1-t6" headers="r1c1-t6">
<p><a href="#BABGAHEG">AW_CREATE Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r12c1-t6 r1c2-t6">
<p>Creates a new, empty analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r13c1-t6" headers="r1c1-t6">
<p><a href="#BABHCHAF">AW_DELETE Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r13c1-t6 r1c2-t6">
<p>Deletes an analytic workspace</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r14c1-t6" headers="r1c1-t6">
<p><a href="#BABHEFAA">AW_DETACH Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r14c1-t6 r1c2-t6">
<p>Detaches an analytic workspace from a session.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r15c1-t6" headers="r1c1-t6">
<p><a href="#BABEGJHC">AW_RENAME Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r15c1-t6 r1c2-t6">
<p>Changes the name of an analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r16c1-t6" headers="r1c1-t6">
<p><a href="#CHDBIADE">AW_TABLESPACE Function</a></p>
</td>
<td class="cellalignment3617" headers="r16c1-t6 r1c2-t6">
<p>Returns the name of the tablespace in which a particular analytic workspace is stored.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r17c1-t6" headers="r1c1-t6">
<p><a href="#BABIDHJB">AW_UPDATE Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r17c1-t6 r1c2-t6">
<p>Saves changes made to an analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r18c1-t6" headers="r1c1-t6">
<p><a href="#BABGACIC">CONVERT Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r18c1-t6 r1c2-t6">
<p>Converts an analytic workspace from 9<span class="italic">i</span> to 10<span class="italic">g</span> storage format.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r19c1-t6" headers="r1c1-t6">
<p><a href="#BABBJDGC">EVAL_NUMBER Function</a></p>
</td>
<td class="cellalignment3617" headers="r19c1-t6 r1c2-t6">
<p>Returns the result of a numeric expression in an analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r20c1-t6" headers="r1c1-t6">
<p><a href="#BABJGCIE">EVAL_TEXT Function</a></p>
</td>
<td class="cellalignment3617" headers="r20c1-t6 r1c2-t6">
<p>Returns the result of a text expression in an analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r21c1-t6" headers="r1c1-t6">
<p><a href="#i83227">EXECUTE Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r21c1-t6 r1c2-t6">
<p>Executes one or more OLAP DML commands. Input and output is limited to 4K. Typically used in an interactive session using an analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r22c1-t6" headers="r1c1-t6">
<p><a href="#i88858">GETLOG Function</a></p>
</td>
<td class="cellalignment3617" headers="r22c1-t6 r1c2-t6">
<p>Returns the session log from the last execution of the <code dir="ltr">INTERP</code> or <code dir="ltr">INTERPCLOB</code> functions.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r23c1-t6" headers="r1c1-t6">
<p><a href="#BABFBEEB">INFILE Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r23c1-t6 r1c2-t6">
<p>Executes the OLAP DML commands specified in a file.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r24c1-t6" headers="r1c1-t6">
<p><a href="#i80463">INTERP Function</a></p>
</td>
<td class="cellalignment3617" headers="r24c1-t6 r1c2-t6">
<p>Executes one or more OLAP DML commands. Input is limited to 4K and output to 4G. Typically used in applications when the 4K limit on output for the <code dir="ltr">EXECUTE</code> procedure is too restrictive.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r25c1-t6" headers="r1c1-t6">
<p><a href="#i80464">INTERPCLOB Function</a></p>
</td>
<td class="cellalignment3617" headers="r25c1-t6 r1c2-t6">
<p>Executes one or more OLAP DML commands. Input and output are limited to 4G. Typically used in applications when the 4K input limit of the <code dir="ltr">INTERP</code> function is too restrictive.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r26c1-t6" headers="r1c1-t6">
<p><a href="#i84899">INTERP_SILENT Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r26c1-t6 r1c2-t6">
<p>Executes one or more OLAP DML commands and suppresses the output. Input is limited to 4K and output to 4G.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r27c1-t6" headers="r1c1-t6">
<p><a href="#BABIDHBD">OLAP_ON Function</a></p>
</td>
<td class="cellalignment3617" headers="r27c1-t6 r1c2-t6">
<p>Returns a boolean indicating whether or not the OLAP option is installed in the database.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r28c1-t6" headers="r1c1-t6">
<p><a href="#CHDGIGFG">OLAP_RUNNING Function</a></p>
</td>
<td class="cellalignment3617" headers="r28c1-t6 r1c2-t6">
<p>Returns a boolean indicating whether or not the OLAP option has been initialized in the current session.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r29c1-t6" headers="r1c1-t6">
<p><a href="#i88953">PRINTLOG Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r29c1-t6 r1c2-t6">
<p>Prints a session log returned by the <code dir="ltr">INTERP</code>, <code dir="ltr">INTERCLOB</code>, or <code dir="ltr">GETLOG</code> functions.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r30c1-t6" headers="r1c1-t6">
<p><a href="#CHDEIFAF">RUN Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r30c1-t6 r1c2-t6">
<p>Executes one or more OLAP DML commands.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r31c1-t6" headers="r1c1-t6">
<p><a href="#BABEADFI">SHUTDOWN Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r31c1-t6 r1c2-t6">
<p>Shuts down the current OLAP session.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r32c1-t6" headers="r1c1-t6">
<p><a href="#CHDGAHHF">SPARSITY_ADVICE_TABLE Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r32c1-t6 r1c2-t6">
<p>Creates a table which the <code dir="ltr">ADVISE_SPARSITY</code> procedure uses to store the results of its analysis.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r33c1-t6" headers="r1c1-t6">
<p><a href="#BABDIICE">STARTUP Procedure</a></p>
</td>
<td class="cellalignment3617" headers="r33c1-t6 r1c2-t6">
<p>Starts an OLAP session without attaching a user-defined analytic workspace.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect1" -->
<a id="CHDGEEDC"></a>
<div id="OLADM965" class="refsect1">
<h2 class="refsect1">ADD_DIMENSION_SOURCE Procedure</h2>
<p>The <a id="sthref5452"></a><a id="sthref5453"></a><code dir="ltr">ADD_DIMENSION_SOURCE</code> procedure populates a table type named <code dir="ltr">DBMS_AW$_DIMENSION_SOURCES_T</code> with information about the dimensions of a cube. This information is analyzed by the <code dir="ltr">ADVISE_SPARSITY</code> procedure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABGGHHI">&#34;Using the Sparsity Advisor&#34;</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5454"></a>Syntax</p>
<pre dir="ltr">ADD_DIMENSION_SOURCE ( 
          dimname  IN      VARCHAR2,
          colname  IN      VARCHAR2,
          sources  IN OUT  dbms_aw$_dimension_sources_t,
          srcval   IN      VARCHAR2     DEFAULT NULL,
          dimtype  IN      NUMBER       DEFAULT NO_HIER,
          hiercols IN      columnlist_t DEFAULT NULL,
          partby   IN      NUMBER       DEFAULT PARTBY_DEFAULT);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5455"></a>Parameters</p>
<div id="OLADM2985" class="tblformal">
<p class="titleintable"><a id="sthref5456"></a><a id="sthref5457"></a>Table B-2 ADD_DIMENSION_SOURCE Procedure Parameters</p>
<table class="cellalignment3618" title="ADD_DIMENSION_SOURCE Procedure Parameters" summary="Parameter descriptions for DBMS_AW.ADD_DIMENSION_SOURCE procedure" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t9">Parameter</th>
<th class="cellalignment3616" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">dimname</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t9 r1c2-t9">
<p>A name for the dimension. For clarity, use the logical name of the dimension in the analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">colname</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t9 r1c2-t9">
<p>The name of the column in the fact table that maps to the dimension members for <span class="italic">dimname</span>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">sources</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t9 r1c2-t9">
<p>The name of an object (such as a PL/SQL variable) defined with a data type of <code dir="ltr">DBMS_AW$_DIMENSION_SOURCES_T</code>, which are used to store the information provided by the other parameters.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t9" headers="r1c1-t9">
<p><code dir="ltr">srcval</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t9 r1c2-t9">
<p>The name of a dimension table, or a SQL statement that returns the columns that define the dimension. If this parameter is omitted, then <span class="italic">colname</span> is used.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t9" headers="r1c1-t9">
<p><code dir="ltr">dimtype</code></p>
</td>
<td class="cellalignment3617" headers="r6c1-t9 r1c2-t9">
<p>One of the following hierarchy types:</p>
<br/>
<code dir="ltr">DBMS_AW.HIER_LEVELS</code> Level-based hierarchy<br/>
<code dir="ltr">DBMS_AW.HIER_PARENTCHILD</code> Parent-child hierarchy<br/>
<code dir="ltr">DBMS_AW.MEASURE</code> Measure dimension<br/>
<code dir="ltr">DBMS_AW.NO_HIER</code> No hierarchy</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t9" headers="r1c1-t9">
<p><code dir="ltr">hiercols</code></p>
</td>
<td class="cellalignment3617" headers="r7c1-t9 r1c2-t9">
<p>The names of the columns that define a hierarchy.</p>
<p>For level-based hierarchies, list the base-level column first and the topmost-level column last. If the dimension has multiple hierarchies, choose the one you predict will be used the most frequently; only list the columns that define the levels of this one hierarchy.</p>
<p>For parent-child hierarchies, list the child column first, then the parent column.</p>
<p>For measure dimensions, list the columns in the fact table that becomes dimension members.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t9" headers="r1c1-t9">
<p><code dir="ltr">partby</code></p>
</td>
<td class="cellalignment3617" headers="r8c1-t9 r1c2-t9">
<p>A keyword that controls partitioning. Use one of the following values:</p>
<ul>
<li>
<p><code dir="ltr">DBMS_AW.PARTBY_DEFAULT</code> Allow the Sparsity Advisor to determine whether or not partitioning is appropriate for this dimension.</p>
</li>
<li>
<p><code dir="ltr">DBMS_AW.PARTBY_NONE</code> Do not allow partitioning on this dimension.</p>
</li>
<li>
<p><code dir="ltr">DBMS_AW.PARTBY_FORCE</code> Force partitioning on this dimension.</p>
<p><span class="bold">Important</span>: Do not force partitioning on multiple dimensions.</p>
</li>
<li>
<p>An integer value for the number of partitions you want created for this dimension.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5458"></a>Example</p>
<p>The following PL/SQL program fragment provides information about the <code dir="ltr">TIME</code> dimension for use by the Sparsity Advisor. The source data for the dimension is stored in a dimension table named <code dir="ltr">TIME_DIM</code>. Its primary key is named <code dir="ltr">MONTH_ID</code>, and the foreign key column in the fact table is also named <code dir="ltr">MONTH_ID</code>. The dimension hierarchy is level based as defined by the columns <code dir="ltr">MONTH_ID</code>, <code dir="ltr">QUARTER_ID</code>, and <code dir="ltr">YEAR_ID</code>.</p>
<p>The program declares a PL/SQL variable named <code dir="ltr">DIMSOURCES</code> with a table type of <code dir="ltr">DBMS_AW$_DIMENSION_SOURCES_T</code> to store the information.</p>
<pre dir="ltr">DECLARE
     dimsources dbms_aw$_dimension_sources_t;
BEGIN
     dbms_aw.add_dimension_source(&#39;time&#39;, &#39;month_id&#39;, dimsources, 
          &#39;time_dim&#39;, dbms_aw.hier_levels,
          dbms_aw$_columnlist_t(&#39;month_id&#39;, &#39;quarter_id&#39;, &#39;year_id&#39;));
                   .
                   .
                   .
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CEGJCHHA"></a>
<div id="OLADM966" class="refsect1">
<h2 class="refsect1">ADVISE_CUBE Procedure</h2>
<p>The <a id="sthref5459"></a><a id="sthref5460"></a><code dir="ltr">ADVISE_CUBE</code> <a id="sthref5461"></a>procedure helps you determine how to preaggregate a cube in an analytic workspace. When you specify a percentage of the cube&#39;s data to preaggregate, <code dir="ltr">ADVISE_CUBE</code> recommends a set of members to preaggregate from each of the cube&#39;s dimensions.</p>
<p>The <code dir="ltr">ADVISE_CUBE</code> procedure takes an aggmap and a precompute percentage as input. The aggmap must have a precompute clause in each of its <code dir="ltr">RELATION</code> statements. The precompute clause must consist of a valueset. Based on the precompute percentage that you specify, <code dir="ltr">ADVISE_CUBE</code> returns a set of dimension members in each valueset.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABBEFGI">&#34;Using the Aggregate Advisor&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5462"></a>Syntax</p>
<pre dir="ltr">ADVISE_CUBE ( 
          aggmap_name             IN   VARCHAR2,
          precompute_percentage   IN   INTEGER DEFAULT 20,
          compressed              IN   BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5463"></a>Parameters</p>
<div id="OLADM2986" class="tblformal">
<p class="titleintable"><a id="sthref5464"></a><a id="sthref5465"></a>Table B-3 ADVISE_CUBE Procedure Parameters</p>
<table class="cellalignment3618" title="ADVISE_CUBE Procedure Parameters" summary="Parameters of the ADVISE_CUBE procedure in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t12">Parameter</th>
<th class="cellalignment3616" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">aggmap_name</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t12 r1c2-t12">
<p>The name of an aggmap associated with the cube.</p>
<p>Each <code dir="ltr">RELATION</code> statement in the aggmap must have a precompute clause containing a valueset. <code dir="ltr">ADVISE_CUBE</code> returns a list of dimension members in each valueset. If the valueset is not empty, <code dir="ltr">ADVISE_CUBE</code> deletes its contents before adding new values.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">precompute_percentage</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t12 r1c2-t12">
<p>A percentage of the cube&#39;s data to preaggregate. The default is 20%.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t12" headers="r1c1-t12">
<p><code dir="ltr">compressed</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t12 r1c2-t12">
<p>Controls whether the advice is for a regular composite (<code dir="ltr">FALSE</code>) or a compressed composite (<code dir="ltr">TRUE</code>).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5466"></a>Example</p>
<p>This example illustrates the <code dir="ltr">ADVISE_CUBE</code> procedure with a cube called <code dir="ltr">UNITS</code> dimensioned by <code dir="ltr">PRODUCT</code> and <code dir="ltr">TIME</code>. <code dir="ltr">ADVISE_CUBE</code> returns the dimension combinations to include if you want to preaggregate 40% of the cube&#39;s data.</p>
<pre dir="ltr">SET SERVEROUTPUT ON
--- View valuesets
EXECUTE dbms_aw.execute(&#39;describe prodvals&#39;);
     DEFINE PRODVALS VALUESET PRODUCT
EXECUTE dbms_aw.execute(&#39;describe timevals&#39;);
     DEFINE TIMEVALS VALUESET TIME
--- View aggmap
EXECUTE dbms_aw.execute (&#39;describe units_agg&#39;);
     DEFINE UNITS_AGG AGGMAP
          RELATION product_parentrel PRECOMPUTE (prodvals)
          RELATION time_parentrel PRECOMPUTE (timevals)
EXECUTE dbms_aw.advise_cube (&#39;units_agg&#39;, 40);
 
---- The results are returned in the prodvals and timevals valuesets
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHGJHJ"></a>
<div id="OLADM967" class="refsect1">
<h2 class="refsect1">ADVISE_DIMENSIONALITY Function</h2>
<p>The <a id="sthref5467"></a><a id="sthref5468"></a><code dir="ltr">ADVISE_DIMENSIONALITY</code> function returns an OLAP DML definition of a composite dimension and the dimension order for variables in the cube, based on the sparsity recommendations generated by the <code dir="ltr">ADVISE_SPARSITY</code> procedure for a particular partition.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABGGHHI">&#34;Using the Sparsity Advisor&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5469"></a>Syntax</p>
<pre dir="ltr">ADVISE_DIMENSIONALITY ( 
          cubename   IN     VARCHAR2,
          sparsedfn  OUT    VARCHAR2
          sparsename IN     VARCHAR2 DEFAULT NULL,
          partnum    IN     NUMBER DEFAULT 1,
          advtable   IN     VARCHAR2 DEFAULT NULL)
     RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5470"></a>Parameters</p>
<div id="OLADM2987" class="tblformal">
<p class="titleintable"><a id="sthref5471"></a><a id="sthref5472"></a>Table B-4 ADVISE_DIMENSIONALITY Function Parameters</p>
<table class="cellalignment3618" title="ADVISE_DIMENSIONALITY Function Parameters" summary="Parameter descriptions for DBMS_AW.ADVISE_DIMENSIONALITY function" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t15">Parameter</th>
<th class="cellalignment3616" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">cubename</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t15 r1c2-t15">
<p>The same <span class="italic">cubename</span> value provided in the call to <code dir="ltr">ADVISE_SPARSITY</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t15" headers="r1c1-t15">
<p><code dir="ltr">sparsedfn</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t15 r1c2-t15">
<p>The name of an object (such as a PL/SQL variable) in which the definition of the composite dimension is stored.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t15" headers="r1c1-t15">
<p><code dir="ltr">sparsename</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t15 r1c2-t15">
<p>An object name for the composite. The default value is <code dir="ltr"><span class="codeinlineitalic">cubename</span></code><code dir="ltr">.cp</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t15" headers="r1c1-t15">
<p><code dir="ltr">partnum</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t15 r1c2-t15">
<p>The number of a partition. By default, you see only the definition of the first partition.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t15" headers="r1c1-t15">
<p><code dir="ltr">advtable</code></p>
</td>
<td class="cellalignment3617" headers="r6c1-t15 r1c2-t15">
<p>The name of a table created by the <code dir="ltr">SPARSITY_ADVICE_TABLE</code> procedure for storing the results of analysis.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5473"></a>Example</p>
<p>The following PL/SQL program fragment defines two variables to store the recommendations returned by the <code dir="ltr">ADVISE_DIMENSIONALITY</code> function. <code dir="ltr">SPARSEDIM</code> stores the definition of the recommended composite, and <code dir="ltr">DIMLIST</code> stores the recommended dimension order of the cube.</p>
<pre dir="ltr">DECLARE
     sparsedim VARCHAR2(500);
     dimlist VARCHAR2(500);
BEGIN
-- Calls to ADD_DIMENSION_SOURCE and ADVISE_SPARSITY omitted here
          .
          .
          .
dimlist := dbms_aw.advise_dimensionality(&#39;units_cube&#39;, sparsedim);
dbms_output.put_line(&#39;Sparse dimension:  &#39; || sparsedim);
dbms_output.put_line(&#39;Dimension list:  &#39; || dimlist);
END;
/
</pre>
<p>The program uses <code dir="ltr">DBMS_OUTPUT.PUT_LINE</code> to display the results of the analysis. The Sparsity Advisor recommends a composite dimension for the sparse dimensions, which are <code dir="ltr">PRODUCT</code>, <code dir="ltr">CUSTOMER</code>, and <code dir="ltr">TIME</code>. The recommended dimension order for <code dir="ltr">UNITS_CUBE</code> is <code dir="ltr">CHANNEL</code> followed by this composite.</p>
<pre dir="ltr">Sparse dimension:  DEFINE units_cube.cp COMPOSITE &lt;product customer time&gt;
Dimension list:  channel units_cube.cp&lt;product customer time&gt;
</pre>
<p>The next example uses the Sparsity Advisor to evaluate the <code dir="ltr">SALES</code> table in the Sales History sample schema. A <code dir="ltr">WHILE</code> loop displays the recommendations for all partitions.</p>
<pre dir="ltr">DECLARE
     dimlist VARCHAR2(500);
     sparsedim VARCHAR2(500);
     counter NUMBER(2) := 1;
     maxpart NUMBER(2);
BEGIN
-- Calls to ADD_DIMENSION_SOURCE and ADVISE_SPARSITY omitted here
          .
          .
          .
 
SELECT MAX(partnum) INTO maxpart FROM sh_sparsity_advice;
WHILE counter &lt;= maxpart LOOP
dimlist := dbms_aw.advise_dimensionality(&#39;sales_cube&#39;, sparsedim, 
   &#39;sales_cube_composite&#39;, counter, &#39;sh_sparsity_advice&#39;);
dbms_output.put_line(&#39;Dimension list:  &#39; || dimlist);
dbms_output.put_line(&#39;Sparse dimension:  &#39; || sparsedim);
counter := counter+1;
END LOOP;
dbms_aw.advise_dimensionality(defs,&#39;sales_cube&#39;, &#39;sales_cube_composite&#39;,
   &#39;DECIMAL&#39;, &#39;sh_sparsity_advice&#39;);
dbms_output.put_line(&#39;Definitions:  &#39;);
dbms_aw.printlog(defs);
END;
/
</pre>
<p>The Sparsity Advisor recommends 11 partitions; the first ten use the same composite. The last partition uses a different composite. (The <code dir="ltr">SH_SPARSITY_ADVICE</code> table shows that <code dir="ltr">TIME_ID</code> is dense in the last partition, whereas it is very sparse in the other partitions.)</p>
<pre dir="ltr">Dimension list:  sales_cube_composite&lt;time channel product promotion customer&gt;
Sparse dimension:  DEFINE sales_cube_composite COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
Dimension list:   sales_cube_composite&lt;time channel product promotion customer&gt;
Sparse dimension:  DEFINE sales_cube_composite COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
                   .
                   .
                   .
Dimension list:  time sales_cube_composite&lt;channel product promotion customer&gt;
Sparse dimension:  DEFINE sales_cube_composite COMPOSITE COMPRESSED &lt;channel product promotion customer&gt;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDFEGGC"></a>
<div id="OLADM968" class="refsect1">
<h2 class="refsect1">ADVISE_DIMENSIONALITY Procedure</h2>
<p>The <a id="sthref5474"></a><a id="sthref5475"></a><code dir="ltr">ADVISE_DIMENSIONALITY</code> procedure evaluates the information provided by the <code dir="ltr">ADVISE_SPARSITY</code> procedure and generates the OLAP DML commands for defining a composite and a variable in the analytic workspace.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABGGHHI">&#34;Using the Sparsity Advisor&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5476"></a>Syntax</p>
<pre dir="ltr">ADVISE_DIMENSIONALITY ( 
          output     OUT    CLOB,
          cubename   IN     VARCHAR2,
          sparsename IN     VARCHAR2 DEFAULT NULL,
          dtype      IN     VARCHAR2 DEFAULT &#39;NUMBER&#39;,
          advtable   IN     VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5477"></a>Parameters</p>
<div id="OLADM2988" class="tblformal">
<p class="titleintable"><a id="sthref5478"></a><a id="sthref5479"></a>Table B-5 ADVISE_DIMENSIONALITY Procedure Parameters</p>
<table class="cellalignment3618" title="ADVISE_DIMENSIONALITY Procedure Parameters" summary="Parameter descriptions for DBMS_AW.ADVISE_DIMENSIONALITY procedure" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t18">Parameter</th>
<th class="cellalignment3616" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t18" headers="r1c1-t18">
<p><code dir="ltr">output</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t18 r1c2-t18">
<p>The name of an object (such as a PL/SQL variable) in which the recommendations of the procedure is stored.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t18" headers="r1c1-t18">
<p><code dir="ltr">cubename</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t18 r1c2-t18">
<p>The same <span class="italic">cubename</span> value provided in the call to <code dir="ltr">ADVISE_SPARSITY</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t18" headers="r1c1-t18">
<p><code dir="ltr">sparsename</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t18 r1c2-t18">
<p>An object name for the sample composite. The default value is <code dir="ltr"><span class="codeinlineitalic">cubename</span></code><code dir="ltr">.cp</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t18" headers="r1c1-t18">
<p><code dir="ltr">dtype</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t18 r1c2-t18">
<p>The OLAP DML data type of the sample variable.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t18" headers="r1c1-t18">
<p><code dir="ltr">advtable</code></p>
</td>
<td class="cellalignment3617" headers="r6c1-t18 r1c2-t18">
<p>The name of the table created by the <code dir="ltr">SPARSITY_ADVICE_TABLE</code> procedure in which the results of the analysis are stored.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5480"></a>Example</p>
<p>The following PL/SQL program fragment defines a variable named <code dir="ltr">DEFS</code> to store the recommended definitions.</p>
<pre dir="ltr">DECLARE
     defs CLOB;
BEGIN
-- Calls to ADD_DIMENSION_SOURCE and ADVISE_SPARSITY omitted here
          .
          .
          .
dbms_aw.advise_dimensionality(defs, &#39;units_cube_measure_stored&#39;, 
     &#39;units_cube_composite&#39;, &#39;DECIMAL&#39;);
dbms_output.put_line(&#39;Definitions:  &#39;);
dbms_aw.printlog(defs);
END;
/
</pre>
<p>The program uses the <code dir="ltr">DBMS_OUTPUT.PUT_LINE</code> and <code dir="ltr">DBMS_AW.PRINTLOG</code> procedures to display the recommended object definitions.</p>
<pre dir="ltr">Definitions:
DEFINE units_cube.cp COMPOSITE &lt;product customer time&gt;
DEFINE units_cube NUMBER VARIABLE &lt;channel units_cube.cp&lt;product customer time&gt;&gt;
</pre>
<p>In contrast to the Global schema, which is small and dense, the Sales cube in the Sales History sample schema is large and very sparse, and the Sparsity Advisor recommends 11 partitions. The following excerpt shows some additional OLAP DML definitions for defining a partition template and moving the <code dir="ltr">TIME</code> dimension members to the various partitions.</p>
<pre dir="ltr">Definitions:
DEFINE sales_cube_composite_p1 COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
DEFINE sales_cube_composite_p2 COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
DEFINE sales_cube_composite_p3 COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
DEFINE sales_cube_composite_p4 COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
DEFINE sales_cube_composite_p5 COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
DEFINE sales_cube_composite_p6 COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
DEFINE sales_cube_composite_p7 COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
DEFINE sales_cube_composite_p8 COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
DEFINE sales_cube_composite_p9 COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
DEFINE sales_cube_composite_p10 COMPOSITE COMPRESSED &lt;time channel product promotion customer&gt;
DEFINE sales_cube_composite_p11 COMPOSITE &lt;channel product promotion customer&gt;
DEFINE sales_cube_pt PARTITION TEMPLATE &lt;time channel product promotion customer&gt; -
  PARTITION BY LIST (time) -
   (PARTITION p1 VALUES () &lt;sales_cube_composite_p1&lt;&gt;&gt; -
    PARTITION p2 VALUES () &lt;sales_cube_composite_p2&lt;&gt;&gt; -
    PARTITION p3 VALUES () &lt;sales_cube_composite_p3&lt;&gt;&gt; -
    PARTITION p4 VALUES () &lt;sales_cube_composite_p4&lt;&gt;&gt; -
    PARTITION p5 VALUES () &lt;sales_cube_composite_p5&lt;&gt;&gt; -
    PARTITION p6 VALUES () &lt;sales_cube_composite_p6&lt;&gt;&gt; -
    PARTITION p7 VALUES () &lt;sales_cube_composite_p7&lt;&gt;&gt; -
    PARTITION p8 VALUES () &lt;sales_cube_composite_p8&lt;&gt;&gt; -
    PARTITION p9 VALUES () &lt;sales_cube_composite_p9&lt;&gt;&gt; -
    PARTITION p10 VALUES () &lt;sales_cube_composite_p10&lt;&gt;&gt; -
    PARTITION p11 VALUES () &lt;time sales_cube_composite_p11&lt;&gt;&gt;)
MAINTAIN sales_cube_pt MOVE TO PARTITION p1 -
   &#39;06-JAN-98&#39;, &#39;07-JAN-98&#39;, &#39;14-JAN-98&#39;, &#39;21-JAN-98&#39;, -
   &#39;24-JAN-98&#39;, &#39;28-JAN-98&#39;, &#39;06-FEB-98&#39;, &#39;07-FEB-98&#39;, -
   &#39;08-FEB-98&#39;, &#39;16-FEB-98&#39;, &#39;21-FEB-98&#39;, &#39;08-MAR-98&#39;, -
   &#39;20-MAR-98&#39;, &#39;03-JAN-98&#39;, &#39;26-JAN-98&#39;, &#39;27-JAN-98&#39;
MAINTAIN sales_cube_pt MOVE TO PARTITION p1 -
   &#39;31-JAN-98&#39;, &#39;11-FEB-98&#39;, &#39;12-FEB-98&#39;, &#39;13-FEB-98&#39;, -
   &#39;15-FEB-98&#39;, &#39;17-FEB-98&#39;, &#39;14-MAR-98&#39;, &#39;18-MAR-98&#39;, -
   &#39;26-MAR-98&#39;, &#39;30-MAR-98&#39;, &#39;05-JAN-98&#39;, &#39;08-JAN-98&#39;, -
   &#39;10-JAN-98&#39;, &#39;16-JAN-98&#39;, &#39;23-JAN-98&#39;, &#39;01-FEB-98&#39;
MAINTAIN sales_cube_pt MOVE TO PARTITION p1 -
   &#39;14-FEB-98&#39;, &#39;28-FEB-98&#39;, &#39;05-MAR-98&#39;, &#39;07-MAR-98&#39;, -
   &#39;15-MAR-98&#39;, &#39;19-MAR-98&#39;, &#39;17-JAN-98&#39;, &#39;18-JAN-98&#39;, -
   &#39;22-JAN-98&#39;, &#39;25-JAN-98&#39;, &#39;03-FEB-98&#39;, &#39;10-FEB-98&#39;, -
   &#39;19-FEB-98&#39;, &#39;22-FEB-98&#39;, &#39;23-FEB-98&#39;, &#39;26-FEB-98&#39;
          .
          .
          .
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFBHBI"></a>
<div id="OLADM969" class="refsect1">
<h2 class="refsect1">ADVISE_PARTITIONING_DIMENSION Function</h2>
<p>The <code dir="ltr">ADVISE_PARTITIONING_DIMENSION</code> function identifies the dimension that the Sparsity Advisor partitioned over, if any. It returns <code dir="ltr">NULL</code> when the Sparsity Advisor did not partition the cube.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABGGHHI">&#34;Using the Sparsity Advisor&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5481"></a>Syntax</p>
<pre dir="ltr">ADVISE_PARTITIONING_DIMENSION (
          cubename   IN  VARCHAR2,
          sources    IN  dbms_aw$_dimension_sources_t,
          advtable   IN  VARCHAR2 DEFAULT NULL)
     RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5482"></a>Parameters</p>
<div id="OLADM2989" class="tblformal">
<p class="titleintable"><a id="sthref5483"></a><a id="sthref5484"></a>Table B-6 ADVISE_PARTITIONING_DIMENSION Function Parameters</p>
<table class="cellalignment3618" title="ADVISE_PARTITIONING_DIMENSION Function Parameters" summary="Parameter descriptions for DBMS_AW.ADVISE_PARTITIONING_DIMENSION function" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t21">Parameter</th>
<th class="cellalignment3616" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">cubename</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t21 r1c2-t21">
<p>The same <span class="italic">cubename</span> value provided in the call to <code dir="ltr">ADVISE_SPARSITY</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">sources</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t21 r1c2-t21">
<p>The name of an object (such as a PL/SQL variable) defined with a data type of <code dir="ltr">DBMS_AW$_DIMENSION_SOURCES_T</code>, which was populated by <code dir="ltr">ADD_DIMENSION_SOURCE</code> for use by <code dir="ltr">ADVISE_SPARSITY</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t21" headers="r1c1-t21">
<p><code dir="ltr">advtable</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t21 r1c2-t21">
<p>The name of a table created by the <code dir="ltr">SPARSITY_ADVICE_TABLE</code> procedure for storing the results of analysis.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5485"></a>Example</p>
<p>The following program fragment shows the <code dir="ltr">ADVISE_PARTITIONING_DIMENSION</code> function being used to query the results after using the Sparsity Advisor.</p>
<pre dir="ltr">DECLARE
     dimsources dbms_aw$_dimension_sources_t;
BEGIN
-- Calls to ADD_DIMENSION_SOURCE and ADVISE_SPARSITY omitted here
     .
     .
     .
dbms_output.put_line(&#39;Partitioning Dimension: &#39; || 
     dbms_aw.advise_partitioning_dimension(&#39;units_cube&#39;, dimsources,
    &#39;aw_sparsity_advice&#39;));
END;
/
</pre>
<p>The program uses <code dir="ltr">DBMS_OUTPUT</code> to display the partitioning dimension, which in this case is the <code dir="ltr">TIME</code> dimension.</p>
<pre dir="ltr">Partitioning Dimension: time
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHBAJD"></a>
<div id="OLADM970" class="refsect1">
<h2 class="refsect1">ADVISE_PARTITIONING_LEVEL Function</h2>
<p>The <code dir="ltr">ADVISE_PARTITIONING_LEVEL</code> function returns the level used by the Sparsity Advisor for partitioning over a dimension. It returns <code dir="ltr">NULL</code> if the Sparsity Advisor did not partition the cube, and raises an exception if the dimension hierarchy is not level-based.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABGGHHI">&#34;Using the Sparsity Advisor&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5486"></a>Syntax</p>
<pre dir="ltr">ADVISE_PARTITIONING_LEVEL (
          cubename   IN  VARCHAR2,
          sources    IN  dbms_aw$_dimension_sources_t,
          advtable   IN  VARCHAR2 DEFAULT NULL)
     RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5487"></a>Parameters</p>
<div id="OLADM2990" class="tblformal">
<p class="titleintable"><a id="sthref5488"></a><a id="sthref5489"></a>Table B-7 ADVISE_PARTITIONING_LEVEL Function Parameters</p>
<table class="cellalignment3618" title="ADVISE_PARTITIONING_LEVEL Function Parameters" summary="Parameter descriptions for DBMS_AW.ADVISE_PARTITIONING_LEVEL" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t24">Parameter</th>
<th class="cellalignment3616" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t24" headers="r1c1-t24">
<p><code dir="ltr">cubename</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t24 r1c2-t24">
<p>The same <span class="italic">cubename</span> value provided in the call to <code dir="ltr">ADVISE_SPARSITY</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t24" headers="r1c1-t24">
<p><code dir="ltr">sources</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t24 r1c2-t24">
<p>The name of an object (such as a PL/SQL variable) defined with a data type of <code dir="ltr">DBMS_AW$_DIMENSION_SOURCES_T</code>, which was populated by <code dir="ltr">ADD_DIMENSION_SOURCE</code> for use by <code dir="ltr">ADVISE_SPARSITY</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t24" headers="r1c1-t24">
<p><code dir="ltr">advtable</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t24 r1c2-t24">
<p>The name of a table created by the <code dir="ltr">SPARSITY_ADVICE_TABLE</code> procedure for storing the results of analysis.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5490"></a>Example</p>
<p>The following program fragment shows the <code dir="ltr">ADVISE_PARTITIONING_LEVEL</code> function being used to query the results after using the Sparsity Advisor.</p>
<pre dir="ltr">DECLARE
     dimsources dbms_aw$_dimension_sources_t;
BEGIN
-- Calls to ADD_DIMENSION_SOURCE and ADVISE_SPARSITY omitted here
     .
     .
     .
dbms_output.put_line(&#39;Partitioning Level: &#39; || 
     dbms_aw.advise_partitioning_level(&#39;units_cube&#39;, dimsources,
    &#39;aw_sparsity_advice&#39;));
END;
/
</pre>
<p>The program uses <code dir="ltr">DBMS_OUTPUT</code> to display the partitioning level, which in this case is <code dir="ltr">YEAR</code>.</p>
<pre dir="ltr">Partitioning Level: year
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CEGFHDII"></a>
<div id="OLADM971" class="refsect1">
<h2 class="refsect1">ADVISE_REL Procedure</h2>
<p>The <code dir="ltr">ADVISE_REL</code> <a id="sthref5491"></a><a id="sthref5492"></a>procedure helps you determine how to preaggregate a dimension in an analytic workspace. When you specify a percentage of the dimension to preaggregate, <code dir="ltr">ADVISE_REL</code> recommends a set of dimension members.</p>
<p>The <code dir="ltr">ADVISE_REL</code> procedure takes a family relation, a valueset, and a precompute percentage as input. The family relation is an object that specifies the hierarchical relationships between the members of a dimension. The valueset must be defined from the dimension to be analyzed. Based on the precompute percentage that you specify, <code dir="ltr">ADVISE_REL</code> returns a set of dimension members in the valueset.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABBEFGI">&#34;Using the Aggregate Advisor&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5493"></a>Syntax</p>
<pre dir="ltr">ADVISE_REL ( 
          family_relation_name    IN   VARCHAR2,
          valueset_name           IN   VARCHAR2,
          precompute_percentage   IN   INTEGER DEFAULT 20,
          compressed              IN   BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5494"></a>Parameters</p>
<div id="OLADM2991" class="tblformal">
<p class="titleintable"><a id="sthref5495"></a><a id="sthref5496"></a>Table B-8 ADVISE_REL Procedure Parameters</p>
<table class="cellalignment3618" title="ADVISE_REL Procedure Parameters" summary="Parameters of the ADVISE_REL procedure in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t27">Parameter</th>
<th class="cellalignment3616" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t27" headers="r1c1-t27">
<p><code dir="ltr">family_relation_name</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t27 r1c2-t27">
<p>The name of a family relation, which specifies a dimension and the hierarchical relationships between the dimension members.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t27" headers="r1c1-t27">
<p><code dir="ltr">valueset_name</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t27 r1c2-t27">
<p>The name of a valueset to contain the results of the procedure. The valueset must be defined from the dimension in the family relation. If the valueset is not empty, <code dir="ltr">ADVISE_REL</code> deletes its contents before adding new values.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t27" headers="r1c1-t27">
<p><code dir="ltr">precompute_percentage</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t27 r1c2-t27">
<p>A percentage of the dimension to preaggregate. The default is 20%.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t27" headers="r1c1-t27">
<p><code dir="ltr">compressed</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t27 r1c2-t27">
<p>Controls whether the advice is for a regular composite (<code dir="ltr">FALSE</code>) or a compressed composite (<code dir="ltr">TRUE</code>).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDBBFF"></a>
<div id="OLADM972" class="refsect1">
<h2 class="refsect1">ADVISE_SPARSITY Procedure</h2>
<p>The <a id="sthref5497"></a><a id="sthref5498"></a><code dir="ltr">ADVISE_SPARSITY</code> procedure analyzes a fact table for sparsity using information about its dimensions provided by the <code dir="ltr">ADD_DIMENSION_SOURCE</code> procedure. It populates a table created by the <a id="sthref5499"></a><code dir="ltr">SPARSITY_ADVICE_TABLE</code> procedure with the results of its analysis.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABGGHHI">&#34;Using the Sparsity Advisor&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5500"></a>Output Description</p>
<p><a href="#BABCCEGC">Table B-9</a> describes the information generated by <code dir="ltr">ADVISE_SPARSITY</code>.</p>
<div id="OLADM2992" class="tblformalwide">
<p class="titleintable"><a id="sthref5501"></a><a id="BABCCEGC"></a>Table B-9 Output Column Descriptions</p>
<table class="cellalignment3615" title="Output Column Descriptions" summary="Column descriptions for ADVISE_SPARSITY table in DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t30">Column</th>
<th class="cellalignment3616" id="r1c2-t30">Data Type</th>
<th class="cellalignment3616" id="r1c3-t30">NULL</th>
<th class="cellalignment3616" id="r1c4-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t30" headers="r1c1-t30">
<p><code dir="ltr">CUBENAME</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t30 r1c2-t30">
<p><code dir="ltr">VARCHAR2(100)</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t30 r1c3-t30">
<p><code dir="ltr">NOT NULL</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t30 r1c4-t30">
<p>The values of <span class="italic">cubename</span> in calls to <code dir="ltr">ADVISE_SPARSITY</code>, typically the name of the logical cube.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t30" headers="r1c1-t30">
<p><code dir="ltr">FACT</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t30 r1c2-t30">
<p><code dir="ltr">VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t30 r1c3-t30">
<p><code dir="ltr">NOT NULL</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t30 r1c4-t30">
<p>The values of <span class="italic">fact</span> in calls to <code dir="ltr">ADVISE_SPARSITY</code>; the name of the fact table that provides the source data for one or more analytic workspace variables.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t30" headers="r1c1-t30">
<p><code dir="ltr">DIMENSION</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t30 r1c2-t30">
<p><code dir="ltr">VARCHAR2(100)</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t30 r1c3-t30">
<p><code dir="ltr">NOT NULL</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t30 r1c4-t30">
<p>The logical names of the cube&#39;s dimensions; the dimensions described in calls to <code dir="ltr">ADVISE_DIMENSIONALITY</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t30" headers="r1c1-t30">
<p><code dir="ltr">DIMCOLUMN</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t30 r1c2-t30">
<p><code dir="ltr">VARCHAR2(100)</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t30 r1c3-t30">&nbsp;</td>
<td class="cellalignment3617" headers="r5c1-t30 r1c4-t30">
<p>The names of dimension columns in <span class="italic">fact</span> (the source fact table), which relate to a dimension table.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t30" headers="r1c1-t30">
<p><code dir="ltr">DIMSOURCE</code></p>
</td>
<td class="cellalignment3617" headers="r6c1-t30 r1c2-t30">
<p><code dir="ltr">VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment3617" headers="r6c1-t30 r1c3-t30">&nbsp;</td>
<td class="cellalignment3617" headers="r6c1-t30 r1c4-t30">
<p>The names of the dimension tables.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t30" headers="r1c1-t30">
<p><code dir="ltr">MEMBERCOUNT</code></p>
</td>
<td class="cellalignment3617" headers="r7c1-t30 r1c2-t30">
<p><code dir="ltr">NUMBER(12,0)</code></p>
</td>
<td class="cellalignment3617" headers="r7c1-t30 r1c3-t30">&nbsp;</td>
<td class="cellalignment3617" headers="r7c1-t30 r1c4-t30">
<p>The total number of dimension members at all levels.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t30" headers="r1c1-t30">
<p><code dir="ltr">LEAFCOUNT</code></p>
</td>
<td class="cellalignment3617" headers="r8c1-t30 r1c2-t30">
<p><code dir="ltr">NUMBER(12,0)</code></p>
</td>
<td class="cellalignment3617" headers="r8c1-t30 r1c3-t30">&nbsp;</td>
<td class="cellalignment3617" headers="r8c1-t30 r1c4-t30">
<p>The number of dimension members at the leaf (or least aggregate) level.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t30" headers="r1c1-t30">
<p><code dir="ltr">ADVICE</code></p>
</td>
<td class="cellalignment3617" headers="r9c1-t30 r1c2-t30">
<p><code dir="ltr">VARCHAR2(10)</code></p>
</td>
<td class="cellalignment3617" headers="r9c1-t30 r1c3-t30">
<p><code dir="ltr">NOT NULL</code></p>
</td>
<td class="cellalignment3617" headers="r9c1-t30 r1c4-t30">
<p>The sparsity evaluation of the dimension: <code dir="ltr">DENSE</code>, <code dir="ltr">SPARSE</code>, or <code dir="ltr">COMPRESSED</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r10c1-t30" headers="r1c1-t30">
<p><code dir="ltr">POSITION</code></p>
</td>
<td class="cellalignment3617" headers="r10c1-t30 r1c2-t30">
<p><code dir="ltr">NUMBER(4,0)</code></p>
</td>
<td class="cellalignment3617" headers="r10c1-t30 r1c3-t30">
<p><code dir="ltr">NOT NULL</code></p>
</td>
<td class="cellalignment3617" headers="r10c1-t30 r1c4-t30">
<p>The recommended order of the dimensions.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r11c1-t30" headers="r1c1-t30">
<p><code dir="ltr">DENSITY</code></p>
</td>
<td class="cellalignment3617" headers="r11c1-t30 r1c2-t30">
<p><code dir="ltr">NUMBER(11,8)</code></p>
</td>
<td class="cellalignment3617" headers="r11c1-t30 r1c3-t30">&nbsp;</td>
<td class="cellalignment3617" headers="r11c1-t30 r1c4-t30">
<p>A number that provides an indication of sparsity relative to the other dimensions. The larger the number, the more sparse the dimension.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r12c1-t30" headers="r1c1-t30">
<p><code dir="ltr">PARTNUM</code></p>
</td>
<td class="cellalignment3617" headers="r12c1-t30 r1c2-t30">
<p><code dir="ltr">NUMBER(6,0)</code></p>
</td>
<td class="cellalignment3617" headers="r12c1-t30 r1c3-t30">
<p><code dir="ltr">NOT NULL</code></p>
</td>
<td class="cellalignment3617" headers="r12c1-t30 r1c4-t30">
<p>The number of the partition described in the <code dir="ltr">PARTBY</code> and <code dir="ltr">PARTTOPS</code> columns. If partitioning is not recommended, then <code dir="ltr">1</code> is the maximum number of partitions.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r13c1-t30" headers="r1c1-t30">
<p><code dir="ltr">PARTBY</code></p>
</td>
<td class="cellalignment3617" headers="r13c1-t30 r1c2-t30">
<p><code dir="ltr">CLOB</code></p>
</td>
<td class="cellalignment3617" headers="r13c1-t30 r1c3-t30">&nbsp;</td>
<td class="cellalignment3617" headers="r13c1-t30 r1c4-t30">
<p>A list of all dimension members that should be stored in this partition. This list is truncated in SQL*Plus unless you significantly increase the size of the <code dir="ltr">LONG</code> setting.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r14c1-t30" headers="r1c1-t30">
<p><code dir="ltr">PARTTOPS</code></p>
</td>
<td class="cellalignment3617" headers="r14c1-t30 r1c2-t30">
<p><code dir="ltr">CLOB</code></p>
</td>
<td class="cellalignment3617" headers="r14c1-t30 r1c3-t30">&nbsp;</td>
<td class="cellalignment3617" headers="r14c1-t30 r1c4-t30">
<p>A list of top-level dimension members for this partition.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5502"></a>Syntax</p>
<pre dir="ltr">ADVISE_SPARSITY ( 
          fact       IN      VARCHAR2,
          cubename   IN      VARCHAR2,
          dimsources IN      dbms_aw$_dimension_sources_t,
          advmode    IN      BINARY_INTEGER DEFAULT ADVICE_DEFAULT,
          partby     IN      BINARY_INTEGER DEFAULT PARTBY_DEFAULT,
          advtable   IN      VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5503"></a>Parameters</p>
<div id="OLADM2993" class="tblformal">
<p class="titleintable"><a id="sthref5504"></a><a id="sthref5505"></a>Table B-10 ADVISE_SPARSITY Procedure Parameters</p>
<table class="cellalignment3618" title="ADVISE_SPARSITY Procedure Parameters" summary="Parameter descriptions for DBMS_AW.ADVISE_SPARSITY" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t31">Parameter</th>
<th class="cellalignment3616" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t31" headers="r1c1-t31">
<p><code dir="ltr">fact</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t31 r1c2-t31">
<p>The name of the source fact table.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t31" headers="r1c1-t31">
<p><code dir="ltr">cubename</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t31 r1c2-t31">
<p>A name for the facts being analyzed, such as the name of the logical cube in the analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t31" headers="r1c1-t31">
<p><code dir="ltr">dimsources</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t31 r1c2-t31">
<p>The name of the object type where the <code dir="ltr">ADD_DIMENSION_SOURCE</code> procedure has stored information about the cube&#39;s dimensions.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t31" headers="r1c1-t31">
<p><code dir="ltr">advmode</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t31 r1c2-t31">
<p>The level of advise you want to see. Select one of the following values:</p>
<br/>
<code dir="ltr">DBMS_AW.ADVICE_DEFAULT</code><br/>
<code dir="ltr">DBMS_AW.ADVICE_FAST</code><br/>
<code dir="ltr">DBMS_AW.ADVICE_FULL</code></td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t31" headers="r1c1-t31">
<p><code dir="ltr">partby</code></p>
</td>
<td class="cellalignment3617" headers="r6c1-t31 r1c2-t31">
<p>A keyword that controls partitioning. Use one of the following values:</p>
<ul>
<li>
<p><code dir="ltr">DBMS_AW.PARTBY_DEFAULT</code> Allow the Sparsity Advisor to determine whether or not partitioning is appropriate.</p>
</li>
<li>
<p><code dir="ltr">DBMS_AW.PARTBY_NONE</code> Do not allow partitioning.</p>
</li>
<li>
<p><code dir="ltr">DBMS_AW.PARTBY_FORCE</code> Force partitioning.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t31" headers="r1c1-t31">
<p><code dir="ltr">advtable</code></p>
</td>
<td class="cellalignment3617" headers="r7c1-t31 r1c2-t31">
<p>The name of a table created by the procedure for storing the results of analysis.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5506"></a>Example</p>
<p>The following PL/SQL program fragment analyzes the sparsity characteristics of the <code dir="ltr">UNITS_HISTORY_FACT</code> table.</p>
<pre dir="ltr">DECLARE
     dimsources dbms_aw$_dimension_sources_t;
BEGIN
-- Calls to ADD_DIMENSION_SOURCE for each dimension in the cube
                .
                .
                .
     dbms_aw.advise_sparsity(&#39;units_history_fact&#39;, &#39;units_cube&#39;, dimsources, 
          dbms_aw.advice_default);
 
END;
/
</pre>
<p>The following <code dir="ltr">SELECT</code> command displays the results of the analysis, which indicate that there is one denser dimension (<code dir="ltr">CHANNEL</code>) and three comparatively sparse dimensions (<code dir="ltr">PRODUCT</code>, <code dir="ltr">CUSTOMER</code>, and <code dir="ltr">TIME</code>).</p>
<pre dir="ltr">SELECT fact, dimension, dimcolumn, membercount nmem, leafcount nleaf, advice, density
     FROM aw_sparsity_advice
     WHERE cubename=&#39;units_cube&#39;;
 
FACT                 DIMENSION    DIMCOLUMN     NMEM  NLEAF ADVICE          DENSITY
-------------------- ------------ ------------ ----- ------ ------------ ----------
units_history_fact   channel      channel_id       3      3 DENSE         .86545382
units_history_fact   product      item_id         36     36 SPARSE        .98706809
units_history_fact   customer     ship_to_id      61     62 SPARSE        .99257713
units_history_fact   time         month_id        96     80 SPARSE        .99415964
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHJFIG"></a>
<div id="OLADM973" class="refsect1">
<h2 class="refsect1">AW_ATTACH Procedure</h2>
<p><a id="sthref5507"></a><a id="sthref5508"></a>The <code dir="ltr">AW_ATTACH</code> procedure attaches an analytic workspace to your SQL session so that you can access its contents. The analytic workspace remains attached until you explicitly detach it, or you end your session.</p>
<p><code dir="ltr">AW_ATTACH</code> can also be used to create an analytic workspace, but the <code dir="ltr">AW_CREATE</code> procedure is provided specifically for that purpose.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABJCFAE">&#34;Managing Analytic Workspaces&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5509"></a>Syntax</p>
<pre dir="ltr">AW_ATTACH ( 
          awname        IN VARCHAR2,
          forwrite      IN BOOLEAN DEFAULT FALSE,
          createaw      IN BOOLEAN DEFAULT FALSE,
          attargs       IN VARCHAR2 DEFAULT NULL,
          tablespace    IN VARCHAR2 DEFAULT NULL);
</pre>
<pre dir="ltr">AW_ATTACH ( 
          schema        IN VARCHAR2,
          awname        IN VARCHAR2,
          forwrite      IN BOOLEAN DEFAULT FALSE,
          createaw      IN BOOLEAN DEFAULT FALSE,
          attargs       IN VARCHAR2 DEFAULT NULL,
          tablespace    IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5510"></a>Parameters</p>
<div id="OLADM2994" class="tblformal">
<p class="titleintable"><a id="sthref5511"></a><a id="sthref5512"></a>Table B-11 AW_ATTACH Procedure Parameters</p>
<table class="cellalignment3618" title="AW_ATTACH Procedure Parameters" summary="DBMS_AW.AW_ATTACH procedure parameters" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t34">Parameter</th>
<th class="cellalignment3616" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t34" headers="r1c1-t34">
<p><code dir="ltr">schema</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t34 r1c2-t34">
<p>The schema that owns <span class="italic">awname</span>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t34" headers="r1c1-t34">
<p><code dir="ltr">awname</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t34 r1c2-t34">
<p>The name of an existing analytic workspace, unless <span class="italic">createaw</span> is specified as <code dir="ltr">TRUE</code>. See the description of <span class="italic">createaw</span>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t34" headers="r1c1-t34">
<p><code dir="ltr">forwrite</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t34 r1c2-t34">
<p><code dir="ltr">TRUE</code> attaches the analytic workspace in read/write mode, giving you exclusive access and full administrative rights to the analytic workspace. <code dir="ltr">FALSE</code> attaches the analytic workspace in read-only mode.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t34" headers="r1c1-t34">
<p><code dir="ltr">createaw</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t34 r1c2-t34">
<p><code dir="ltr">TRUE</code> creates an analytic workspace named <span class="italic">awname</span>. If <span class="italic">awname</span> already exists, then an error is generated. <code dir="ltr">FALSE</code> attaches an existing analytic workspace named <span class="italic">awname</span>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t34" headers="r1c1-t34">
<p><code dir="ltr">attargs</code></p>
</td>
<td class="cellalignment3617" headers="r6c1-t34 r1c2-t34">
<p>Keywords for attaching an analytic workspace, such as <code dir="ltr">FIRST</code> or <code dir="ltr">LAST</code>, as described in <a href="dml_commands_1.htm#i79092">AW command</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5513"></a>Example</p>
<p>The following commands create an analytic workspace named <code dir="ltr">GLOBAL_TRACKING</code> and copies the contents of <code dir="ltr">GLOBAL</code> into it. The workspace is stored in a table named <code dir="ltr">AW$GLOBAL_TRACKING</code>, which has three partitions and is stored in the user&#39;s default tablespace.</p>
<pre dir="ltr">EXECUTE dbms_aw.aw_attach(&#39;global&#39;);
EXECUTE dbms_aw.aw_copy(&#39;global&#39;, &#39;global_tracking&#39;, NULL, 3);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGGEFF"></a>
<div id="OLADM974" class="refsect1">
<h2 class="refsect1">AW_COPY Procedure</h2>
<p><a id="sthref5514"></a><a id="sthref5515"></a>The <code dir="ltr">AW_COPY</code> procedure copies the object definitions and data from one analytic workspace into a new analytic workspace.</p>
<p><code dir="ltr">AW_COPY</code> detaches the original workspace and attaches the new workspace first with read/write access.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABJCFAE">&#34;Managing Analytic Workspaces&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5516"></a>Syntax</p>
<pre dir="ltr">AW_COPY ( 
          oldname         IN VARCHAR2,
          newname         IN VARCHAR2,
          tablespace      IN VARCHAR2 DEFAULT NULL,
          partnum         IN NUMBER DEFAULT 8);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5517"></a>Parameters</p>
<div id="OLADM2995" class="tblformal">
<p class="titleintable"><a id="sthref5518"></a><a id="sthref5519"></a>Table B-12 AW_COPY Procedure Parameters</p>
<table class="cellalignment3618" title="AW_COPY Procedure Parameters" summary="DBMS_AW.AW_COPY procedure parameters" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t37">Parameter</th>
<th class="cellalignment3616" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t37" headers="r1c1-t37">
<p><code dir="ltr">oldname</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t37 r1c2-t37">
<p>The name of an existing analytic workspace that contains object definitions. The workspace cannot be empty.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t37" headers="r1c1-t37">
<p><code dir="ltr">newname</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t37 r1c2-t37">
<p>A name for the new analytic workspace that is a copy of <span class="italic">oldname</span>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t37" headers="r1c1-t37">
<p><code dir="ltr">tablespace</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t37 r1c2-t37">
<p>The name of a tablespace in which <span class="italic">newname</span> is stored. If this parameter is omitted, then the analytic workspace is created in the user&#39;s default tablespace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t37" headers="r1c1-t37">
<p><code dir="ltr">partnum</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t37 r1c2-t37">
<p>The number of partitions that are created for the <code dir="ltr">AW$</code><span class="italic">newname</span> table.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5520"></a>Example</p>
<p>The following commands create an analytic workspace named <code dir="ltr">GLOBAL_TRACKING</code> and copies the contents of <code dir="ltr">GLOBAL</code> into it. The workspace is stored in a table named <code dir="ltr">AW$GLOBAL_TRACKING</code>, which has three partitions and is stored in the user&#39;s default tablespace.</p>
<pre dir="ltr">EXECUTE dbms_aw.aw_attach(&#39;global&#39;);
EXECUTE dbms_aw.aw_copy(&#39;global&#39;, &#39;global_tracking&#39;, NULL, 3);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGAHEG"></a>
<div id="OLADM975" class="refsect1">
<h2 class="refsect1">AW_CREATE Procedure</h2>
<p><a id="sthref5521"></a><a id="sthref5522"></a>The <code dir="ltr">AW_CREATE</code> procedure creates a new, empty analytic workspace and makes it the current workspace in your session.</p>
<p>The current workspace is first in the list of attached workspaces.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5523"></a>Syntax</p>
<pre dir="ltr">AW_CREATE ( 
           awname        IN VARCHAR2 ,
           tablespace    IN VARCHAR2 DEFAULT NULL ,
           partnum       IN NUMBER DEFAULT 8 );
</pre>
<pre dir="ltr">AW_CREATE ( 
           schema        IN VARCHAR2 ,
           awname        IN VARCHAR2 ,
           tablespace    IN VARCHAR2 DEFAULT NULL); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5524"></a>Parameters</p>
<div id="OLADM2996" class="tblformal">
<p class="titleintable"><a id="sthref5525"></a><a id="sthref5526"></a>Table B-13 AW_CREATE Procedure Parameters</p>
<table class="cellalignment3618" title="AW_CREATE Procedure Parameters" summary="DBMS_AW.AW_CREATE procedure parameters" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t39">Parameter</th>
<th class="cellalignment3616" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t39" headers="r1c1-t39">
<p><code dir="ltr">schema</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t39 r1c2-t39">
<p>The schema that owns <span class="italic">awname</span>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t39" headers="r1c1-t39">
<p><code dir="ltr">awname</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t39 r1c2-t39">
<p>The name of a new analytic workspace. The name must comply with the naming requirements for a table in Oracle Database. This procedure creates a table named AW$<span class="italic">awname</span>, in which the analytic workspace is stored.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t39" headers="r1c1-t39">
<p><code dir="ltr">tablespace</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t39 r1c2-t39">
<p>The tablespace in which the analytic workspace is created. If you omit this parameter, the analytic workspace is created in your default tablespace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t39" headers="r1c1-t39">
<p><code dir="ltr">partnum</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t39 r1c2-t39">
<p>The number of partitions that are created for the <code dir="ltr">AW$</code><span class="italic">awname</span> table.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5527"></a>Example</p>
<p>The following command creates a new, empty analytic workspace named <code dir="ltr">GLOBAL_FINANCE</code>. The new analytic workspace is stored in a table named <code dir="ltr">AW$GLOBAL_FINANCE</code> with eight partitions in the user&#39;s default tablespace.</p>
<pre dir="ltr">EXECUTE dbms_aw.aw_create(&#39;global_finance&#39;);
</pre>
<p>The next command creates an analytic workspace named <code dir="ltr">DEMO</code> in the <code dir="ltr">GLOBAL</code> schema. <code dir="ltr">AW$DEMO</code> has two partitions and is stored in the <code dir="ltr">GLOBAL</code> tablespace.</p>
<pre dir="ltr">EXECUTE dbms_aw.aw_create(&#39;global.demo&#39;, &#39;global&#39;, 2);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHCHAF"></a>
<div id="OLADM976" class="refsect1">
<h2 class="refsect1">AW_DELETE Procedure</h2>
<p><a id="sthref5528"></a><a id="sthref5529"></a>The <code dir="ltr">AW_DELETE</code> procedure deletes an existing analytic workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5530"></a>Syntax</p>
<pre dir="ltr">AW_DELETE ( 
    awname        IN VARCHAR2);
</pre>
<pre dir="ltr">AW_DELETE ( 
    schema        IN VARCHAR2,
    awname        IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5531"></a>Parameters</p>
<div id="OLADM2997" class="tblformal">
<p class="titleintable"><a id="sthref5532"></a><a id="sthref5533"></a>Table B-14 AW_DELETE Procedure Parameters</p>
<table class="cellalignment3618" title="AW_DELETE Procedure Parameters" summary="DBMS_AW.AW_DELETE procedure parameters" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t40">Parameter</th>
<th class="cellalignment3616" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t40" headers="r1c1-t40">
<p><code dir="ltr">schema</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t40 r1c2-t40">
<p>The schema that owns <span class="italic">awname</span>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t40" headers="r1c1-t40">
<p><code dir="ltr">awname</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t40 r1c2-t40">
<p>The name of an existing analytic workspace that you want to delete along with all of its contents. You must be the owner of <span class="italic">awname</span> or have DBA rights to delete it, and it cannot currently be attached to your session. The AW$<span class="italic">awname</span> file is deleted from the database.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5534"></a>Example</p>
<p>The following command deletes the <code dir="ltr">SALES_DEMO</code> analytic workspace in the user&#39;s default schema.</p>
<pre dir="ltr">EXECUTE dbms_aw.aw_delete(&#39;sales_demo&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHEFAA"></a>
<div id="OLADM977" class="refsect1">
<h2 class="refsect1">AW_DETACH Procedure</h2>
<p><a id="sthref5535"></a><a id="sthref5536"></a>The <code dir="ltr">AW_DETACH</code> procedure detaches an analytic workspace from your session so that its contents are no longer accessible. All changes that you have made since the last update are discarded. Refer to <a href="#BABIDHJB">&#34;AW_UPDATE Procedure&#34;</a> for information about saving changes to an analytic workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5537"></a>Syntax</p>
<pre dir="ltr">AW_DETACH ( 
          awname        IN VARCHAR2);
</pre>
<pre dir="ltr">AW_DETACH ( 
          schema        IN VARCHAR2,
          awname        IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5538"></a>Parameters</p>
<div id="OLADM2998" class="tblformal">
<p class="titleintable"><a id="sthref5539"></a><a id="sthref5540"></a>Table B-15 AW_DETACH Procedure Parameters</p>
<table class="cellalignment3618" title="AW_DETACH Procedure Parameters" summary="DBMS_AW.AW_DETACH procedure parameters" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t41">Parameter</th>
<th class="cellalignment3616" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t41" headers="r1c1-t41">
<p><code dir="ltr">schema</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t41 r1c2-t41">
<p>The schema that owns <span class="italic">awname</span>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t41" headers="r1c1-t41">
<p><code dir="ltr">awname</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t41 r1c2-t41">
<p>The name of an attached analytic workspace that you want to detach from your session.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5541"></a>Example</p>
<p>The following command detaches the <code dir="ltr">GLOBAL_FINANCE</code> analytic workspace.</p>
<pre dir="ltr">EXECUTE dbms_aw.aw_detach(&#39;global_finance&#39;);
</pre>
<p>The next command detaches the <code dir="ltr">SALES_HISTORY</code> analytic workspace in the <code dir="ltr">SH_AW</code> schema.</p>
<pre dir="ltr">EXECUTE dbms_aw.aw_detach(&#39;sh_aw&#39;, &#39;sales_history&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEGJHC"></a>
<div id="OLADM978" class="refsect1">
<h2 class="refsect1">AW_RENAME Procedure</h2>
<p><a id="sthref5542"></a><a id="sthref5543"></a>The <code dir="ltr">AW_RENAME</code> procedure changes the name of an analytic workspace.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5544"></a>Syntax</p>
<pre dir="ltr">AW_RENAME ( 
          oldname       IN VARCHAR2,
          newname       IN VARCHAR2 );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5545"></a>Parameters</p>
<div id="OLADM2999" class="tblformal">
<p class="titleintable"><a id="sthref5546"></a><a id="sthref5547"></a>Table B-16 AW_RENAME Procedure Parameters</p>
<table class="cellalignment3618" title="AW_RENAME Procedure Parameters" summary="DBMS_AW.AW_RENAME procedure parameters" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t43">Parameter</th>
<th class="cellalignment3616" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t43" headers="r1c1-t43">
<p><code dir="ltr">oldname</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t43 r1c2-t43">
<p>The current name of the analytic workspace. The analytic workspace cannot be attached to any session.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t43" headers="r1c1-t43">
<p><code dir="ltr">newname</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t43 r1c2-t43">
<p>The new name of the analytic workspace.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5548"></a>Example</p>
<p>The following commands detach the <code dir="ltr">DEMO</code> analytic workspace and change its name to <code dir="ltr">SALES_DEMO</code>.</p>
<pre dir="ltr">EXECUTE dbms_aw.aw_detach(&#39;demo&#39;);
EXECUTE dbms_aw.aw_rename(&#39;demo&#39;, &#39;sales_demo&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBIADE"></a>
<div id="OLADM979" class="refsect1">
<h2 class="refsect1">AW_TABLESPACE Function</h2>
<p><a id="sthref5549"></a><a id="sthref5550"></a>The <code dir="ltr">AW_TABLESPACE</code> function returns the name of the tablespace in which a particular analytic workspace is stored.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5551"></a>Syntax</p>
<pre dir="ltr">AW_TABLESPACE ( 
          awname        IN VARCHAR2)
     RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<pre dir="ltr">AW_TABLESPACE ( 
          schema        IN VARCHAR2,
          awname        IN VARCHAR2)
     RETURN VARCHAR2;
</pre>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5552"></a>Returns</p>
<p>Name of a tablespace.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5553"></a>Parameters</p>
<div id="OLADM3000" class="tblformal">
<p class="titleintable"><a id="sthref5554"></a><a id="sthref5555"></a>Table B-17 AW_TABLESPACE Function Parameters</p>
<table class="cellalignment3618" title="AW_TABLESPACE Function Parameters" summary="Parameter descriptions for DBMS_AW.AW_TABLESPACE" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t45">Parameter</th>
<th class="cellalignment3616" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t45" headers="r1c1-t45">
<p><code dir="ltr">schema</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t45 r1c2-t45">
<p>The schema that owns <span class="italic">awname</span>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t45" headers="r1c1-t45">
<p><code dir="ltr">awname</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t45 r1c2-t45">
<p>The name of an analytic workspace.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5556"></a>Example</p>
<p>The following example shows the tablespace in which the <code dir="ltr">GLOBAL</code> analytic workspace is stored.</p>
<pre dir="ltr">SET serveroutput ON

EXECUTE dbms_output.put_line(&#39;Sales History is stored in tablespace &#39; || 
     dbms_aw.aw_tablespace(&#39;sh_aw&#39;, &#39;sales_history&#39;));
</pre>
<p>This command generates the following statement:</p>
<pre dir="ltr">Sales History is stored in tablespace SH_AW
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABIDHJB"></a>
<div id="OLADM980" class="refsect1">
<h2 class="refsect1">AW_UPDATE Procedure</h2>
<p><a id="sthref5557"></a><a id="sthref5558"></a>The <code dir="ltr">AW_UPDATE</code> procedure saves the changes made to an analytic workspace in its permanent database table. For the updated version of this table to be saved in the database, you must issue a SQL <code dir="ltr">COMMIT</code> statement before ending your session.</p>
<p>If you do not specify an analytic workspace to update, <code dir="ltr">AW_UPDATE</code> updates all the user-defined workspaces that are currently attached with read/write access.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABJCFAE">&#34;Managing Analytic Workspaces&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5559"></a>Syntax</p>
<pre dir="ltr">AW_UPDATE ( 
          awname     IN VARCHAR2 DEFAULT NULL);
</pre>
<pre dir="ltr">AW_UPDATE ( 
          schema     IN VARCHAR2 DEFAULT NULL,
          awname     IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5560"></a>Parameters</p>
<div id="OLADM3001" class="tblformal">
<p class="titleintable"><a id="sthref5561"></a><a id="sthref5562"></a>Table B-18 AW_UPDATE Procedure Parameters</p>
<table class="cellalignment3618" title="AW_UPDATE Procedure Parameters" summary="DBMS_AW.AW_UPDATE procedure parameters" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t48">Parameter</th>
<th class="cellalignment3616" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t48" headers="r1c1-t48">
<p><code dir="ltr">schema</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t48 r1c2-t48">
<p>The schema that owns <span class="italic">awname</span>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t48" headers="r1c1-t48">
<p><code dir="ltr">awname</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t48 r1c2-t48">
<p>Saves changes to <span class="italic">awname</span> by copying them to a table named <code dir="ltr">AW$</code><span class="italic">awname</span>. If this parameter is omitted, then changes are saved for all analytic workspaces attached in read/write mode.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5563"></a>Example</p>
<p>The following commands save changes to the <code dir="ltr">GLOBAL</code> analytic workspace from the temporary to the permanent tablespace, then commit the change to the database.</p>
<pre dir="ltr">EXECUTE dbms_aw.aw_update(&#39;global&#39;);
COMMIT;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGACIC"></a>
<div id="OLADM981" class="refsect1">
<h2 class="refsect1">CONVERT Procedure</h2>
<p><a id="sthref5564"></a><a id="sthref5565"></a>The <code dir="ltr">CONVERT</code> procedure converts an analytic workspace in 9<span class="italic">i</span> storage format to to 10<span class="italic">g</span> storage format. Note that you cannot execute this procedure from within the OLAP Worksheet; you must execute it in a SQL tool such as SQL*Plus.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Issuing the <code dir="ltr">dbms_aw.convert</code> procedure is only one small step in upgrading Oracle 9<span class="italic">i</span> analytic workspaces to Oracle 10<span class="italic">g</span> workspaces. For the complete procedure for upgrading Oracle 9<span class="italic">i</span> analytic workspaces, see <span class="italic">Oracle OLAP Application Developer&#39;s Guide, 10g Release 2 (10.2)</span>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink OLAUG" href="../OLAUG/toc.htm"><span class="italic">Oracle OLAP User&#39;s Guide</span></a> for information on converting an analytic workspace to Oracle 11<span class="italic">g</span> storage format</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5566"></a>Syntax</p>
<pre dir="ltr">CONVERT (
          original_aw      IN VARCHAR2);
</pre>
<pre dir="ltr">CONVERT ( 
          original_aw      IN VARCHAR2,
          converted_aw     IN VARCHAR2,
          tablespace       IN NUMBER DEFAULT);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5567"></a>Parameters</p>
<div id="OLADM3002" class="tblformal">
<p class="titleintable"><a id="sthref5568"></a><a id="sthref5569"></a>Table B-19 CONVERT Procedure Parameters</p>
<table class="cellalignment3618" title="CONVERT Procedure Parameters" summary="DBMS_AW.CONVERT procedure parameters" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t51">Parameter</th>
<th class="cellalignment3616" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t51" headers="r1c1-t51">
<p><code dir="ltr">original_aw</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t51 r1c2-t51">
<p>The analytic workspace you want to convert.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t51" headers="r1c1-t51">
<p><code dir="ltr">converted_aw</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t51 r1c2-t51">
<p>The converted analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t51" headers="r1c1-t51">
<p><code dir="ltr">tablespace</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t51 r1c2-t51">
<p>The name of a tablespace in which the converted workspace is stored. If this parameter is omitted, then the analytic workspace is created in the user&#39;s default tablespace.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5570"></a>Example</p>
<p>This example performs the conversion in a single step, using the analytic workspace as both the source and the target of the conversion.</p>
<pre dir="ltr">EXECUTE dbms_aw.convert(&#39;global&#39;);
</pre>
<p>The next example performs the conversion in several steps. The converted workspace must have the same name as the original workspace, because the fully qualified names of objects in the workspace include the workspace name.</p>
<pre dir="ltr">EXECUTE dbms_aw.rename(&#39;global&#39;, &#39;global_temp&#39;);
EXECUTE dbms_aw.convert(&#39;global_temp&#39;, &#39;global&#39;);
EXECUTE dbms_aw.delete(&#39;global_temp&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABBJDGC"></a>
<div id="OLADM982" class="refsect1">
<h2 class="refsect1">EVAL_NUMBER Function</h2>
<p><a id="sthref5571"></a><a id="sthref5572"></a>The <code dir="ltr">EVAL_NUMBER</code> function evaluates a numeric expression in an analytic workspace and returns the resulting number.</p>
<p>You can specify the <code dir="ltr">EVAL_NUMBER</code> function in a <code dir="ltr">SELECT</code> from <code dir="ltr">DUAL</code> statement to return a numeric constant defined in an analytic workspace. For more information, see <a class="olink SQLRF20036" href="../SQLRF/queries009.htm#SQLRF20036">&#34;Selecting from the DUAL Table&#34;</a> in <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5573"></a>Syntax</p>
<pre dir="ltr">EVAL_NUMBER ( 
          olap_numeric_expression     IN    VARCHAR2)
     RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5574"></a>Parameters</p>
<div id="OLADM3003" class="tblformal">
<p class="titleintable"><a id="sthref5575"></a><a id="sthref5576"></a>Table B-20 EVAL_NUMBER Function Parameters</p>
<table class="cellalignment3618" title="EVAL_NUMBER Function Parameters" summary="Parameters of the EVAL_NUMBER function in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t53">Parameter</th>
<th class="cellalignment3616" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t53" headers="r1c1-t53">
<p><code dir="ltr">olap_numeric_expression</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t53 r1c2-t53">
<p>An OLAP DML expression that evaluates to a number. Refer to <a href="dml_expression.htm#g1031411">Chapter 2, &#34;OLAP DML Expressions&#34;</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5577"></a>Example</p>
<p>The following example returns the value of the <code dir="ltr">DECIMALS</code> option in the current analytic workspace. The <code dir="ltr">DECIMALS</code> option controls the number of decimal places that are shown in numeric output. In this example, the value of <code dir="ltr">DECIMALS</code> is 2, which is the default.</p>
<pre dir="ltr">SET serveroutput ON
SELECT dbms_aw.eval_number(&#39;decimals&#39;) &#34;Decimals&#34; FROM dual;
 
  Decimals
----------
         2    
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJGCIE"></a>
<div id="OLADM983" class="refsect1">
<h2 class="refsect1">EVAL_TEXT Function</h2>
<p><a id="sthref5578"></a><a id="sthref5579"></a>The <code dir="ltr">EVAL_TEXT</code> function evaluates a text expression in an analytic workspace and returns the resulting character string.</p>
<p>You can specify the <code dir="ltr">EVAL_TEXT</code> function in a <code dir="ltr">SELECT</code> from <code dir="ltr">DUAL</code> statement to return a character constant defined in an analytic workspace. For more information, see <a class="olink SQLRF20036" href="../SQLRF/queries009.htm#SQLRF20036">&#34;Selecting from the DUAL Table&#34;</a> in <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5580"></a>Syntax</p>
<pre dir="ltr">EVAL_TEXT ( 
          olap_text_expression     IN    VARCHAR2)
    RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5581"></a>Parameters</p>
<div id="OLADM3004" class="tblformal">
<p class="titleintable"><a id="sthref5582"></a><a id="sthref5583"></a>Table B-21 EVAL_TEXT Function Parameters</p>
<table class="cellalignment3618" title="EVAL_TEXT Function Parameters" summary="Parameters of the EVAL_TEXT function in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t55">Parameter</th>
<th class="cellalignment3616" id="r1c2-t55">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t55" headers="r1c1-t55">
<p><code dir="ltr">olap_text_expression</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t55 r1c2-t55">
<p>An OLAP DML expression that evaluates to a character string. Refer to <a href="dml_expression.htm#g1031411">Chapter 2, &#34;OLAP DML Expressions&#34;</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5584"></a>Example</p>
<p>The following example returns the value of the <code dir="ltr">NLS_LANGUAGE</code> option, which specifies the current language of the session.</p>
<pre dir="ltr">SET serveroutput ON
SELECT dbms_aw.eval_text(&#39;nls_language&#39;) &#34;NLS Language&#34; FROM dual;
 
</pre>
<p>The value of <code dir="ltr">NLS_LANGUAGE</code> in this example is <code dir="ltr">AMERICAN</code>.</p>
<pre dir="ltr">NLS Language
---------------
AMERICAN 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i83227"></a>
<div id="OLADM984" class="refsect1">
<h2 class="refsect1">EXECUTE Procedure</h2>
<p><a id="sthref5585"></a><a id="sthref5586"></a>The <code dir="ltr">EXECUTE</code> procedure executes one or more OLAP DML commands and directs the output to a printer buffer. It is typically used to manipulate analytic workspace data within an interactive SQL session. In contrast to the <a href="#CHDEIFAF">RUN Procedure</a>, <code dir="ltr">EXECUTE</code> continues to process commands after it gets an error.</p>
<p><a id="sthref5587"></a><a id="sthref5588"></a>When you are using SQL*Plus, you can direct the printer buffer to the screen by issuing the following command:</p>
<pre dir="ltr">SET SERVEROUT ON
</pre>
<p>If you are using a different program, refer to its documentation for the equivalent setting.</p>
<p>Input and output is limited to 4K. For larger values, refer to the <code dir="ltr">INTERP</code> and <code dir="ltr">INTERPCLOB</code> functions in this package.</p>
<p><a id="sthref5589"></a>This procedure does not print the output of the DML commands when you have redirected the output by using the OLAP DML <code dir="ltr">OUTFILE</code> command.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5590"></a>Syntax</p>
<pre dir="ltr">EXECUTE ( 
          olap_commands     IN    VARCHAR2
          text              OUT   VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5591"></a>Parameters</p>
<div id="OLADM3005" class="tblformal">
<p class="titleintable"><a id="sthref5592"></a><a id="sthref5593"></a>Table B-22 EXECUTE Procedure Parameters</p>
<table class="cellalignment3618" title="EXECUTE Procedure Parameters" summary="Parameters of the EXECUTE procedure in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t57">Parameter</th>
<th class="cellalignment3616" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t57" headers="r1c1-t57">
<p><code dir="ltr">olap-commands</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t57 r1c2-t57">
<p>One or more OLAP DML commands separated by semicolons. See <a href="#CHDIJEGA">&#34;Guidelines for Using Quotation Marks in OLAP DML Commands&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t57" headers="r1c1-t57">
<p><code dir="ltr">text</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t57 r1c2-t57">
<p>Output from the OLAP engine in response to the OLAP commands.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5594"></a>Example</p>
<p>The following example attaches the <code dir="ltr">GLOBAL</code> analytic workspace and shows the object definition of <code dir="ltr">TIME</code>.</p>
<pre dir="ltr"><span class="bold">EXECUTE dbms_aw.aw_attach(&#39;global&#39;);</span>
<span class="bold">EXECUTE dbms_aw.execute(&#39;DESCRIBE time&#39;);</span>

DEFINE TIME DIMENSION TEXT 
</pre>
<p>The next example shows how <code dir="ltr">EXECUTE</code> continues to process commands after encountering an error:</p>
<pre dir="ltr"><span class="bold">EXECUTE dbms_aw.execute(&#39;SHOW DECIMALS&#39;);</span>
2
 
<span class="bold">EXECUTE dbms_aw.execute(&#39;CALL nothing; DECIMALS=0&#39;);</span>
BEGIN dbms_aw.execute(&#39;CALL nothing; DECIMALS=0&#39;); END;
 
*
ERROR at line 1:
ORA-34492: Analytic workspace object NOTHING does not exist. 
ORA-06512: at &#34;SYS.DBMS_AW&#34;, line 93 
ORA-06512: at &#34;SYS.DBMS_AW&#34;, line 122 
ORA-06512: at line 1 
 
<span class="bold">EXECUTE dbms_aw.execute(&#39;SHOW DECIMALS&#39;);</span>
0
</pre></div>
<!-- class="refsubsect" -->
<p>The next example show how <code dir="ltr">EXECUTE</code> continues to process commands after encountering an error:</p>
<pre dir="ltr">SQL&gt; execute dbms_aw.execute(&#39;call nothing; colwidth=20&#39;);
BEGIN dbms_aw.execute(&#39;call nothing; colwidth=20&#39;); END;
 
*
ERROR at line 1:
ORA-34492: Analytic workspace object NOTHING does not exist.
ORA-06512: at &#34;SYS.DBMS_AW&#34;, line 90
ORA-06512: at &#34;SYS.DBMS_AW&#34;, line 119
ORA-06512: at line 1
 
 
SQL&gt; execute dbms_aw.execute(&#39;show colwidth&#39;);
20
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="refsect1" -->
<a id="i88858"></a>
<div id="OLADM985" class="refsect1">
<h2 class="refsect1">GETLOG Function</h2>
<p>This function returns the session log from the last execution of the <code dir="ltr">INTERP</code> or <code dir="ltr">INTERPCLOB</code> functions in this package.<a id="sthref5595"></a><a id="sthref5596"></a><a id="sthref5597"></a><a id="sthref5598"></a></p>
<p>To print the session log returned by this function, use the <code dir="ltr">DBMS_AW.PRINTLOG</code> procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5599"></a>Syntax</p>
<pre dir="ltr">GETLOG()
          RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5600"></a>Returns</p>
<p>The session log from the latest call to <code dir="ltr">INTERP</code> or <code dir="ltr">INTERPCLOB</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5601"></a>Example</p>
<p>The following example shows the session log returned by a call to <code dir="ltr">INTERP</code>, then shows the identical session log returned by <code dir="ltr">GETLOG</code>.</p>
<pre dir="ltr"><span class="bold">EXECUTE dbms_aw.printlog(dbms_aw.interp(&#39;AW ATTACH global; REPORT units_cube&#39;));</span>

UNITS_CUBE 
--------------
TIME
CUSTOMER
PRODUCT
CHANNEL
 
<span class="bold">EXECUTE dbms_aw.printlog(dbms_aw.getlog());</span>

UNITS_CUBE
--------------
TIME
CUSTOMER
PRODUCT
CHANNEL
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFBEEB"></a>
<div id="OLADM986" class="refsect1">
<h2 class="refsect1">INFILE Procedure</h2>
<p><a id="sthref5602"></a><a id="sthref5603"></a>The <code dir="ltr">INFILE</code> procedure evaluates the OLAP DML commands in the specified file and executes them in the current analytic workspace.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5604"></a>Syntax</p>
<pre dir="ltr">INFILE ( 
          filename     IN   VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5605"></a>Parameters</p>
<div id="OLADM3006" class="tblformal">
<p class="titleintable"><a id="sthref5606"></a><a id="sthref5607"></a>Table B-23 INFILE Procedure Parameters</p>
<table class="cellalignment3618" title="INFILE Procedure Parameters" summary="Parameters of the DBMS_AW.INFILE procedure" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t60">Parameter</th>
<th class="cellalignment3616" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t60" headers="r1c1-t60">
<p><code dir="ltr">filename</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t60 r1c2-t60">
<p>The name of a file containing OLAP DML commands.</p>
<p>The file path must be specified in a current directory object for your OLAP session. Use the OLAP DML CDA command to identify or change the current directory object.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5608"></a>Example</p>
<p>The following example executes the OLAP DML commands in the <code dir="ltr">finances.inf</code> file. The location of the file is identified by the <code dir="ltr">WORK_DIR</code> database directory.</p>
<pre dir="ltr">EXECUTE dbms_aw.infile(&#39;work_dir/finances.inf&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i80463"></a>
<div id="OLADM987" class="refsect1">
<h2 class="refsect1">INTERP Function</h2>
<p><a id="sthref5609"></a><a id="sthref5610"></a>The <code dir="ltr">INTERP</code> function executes one or more OLAP DML commands and returns the session log in which the commands are executed. It is typically used in applications when the 4K limit on output for the <code dir="ltr">EXECUTE</code> procedure may be too restrictive.</p>
<p>Input to the <code dir="ltr">INTERP</code> function is limited to 4K. For larger input values, refer to the <code dir="ltr">INTERPCLOB</code> function of this package.</p>
<p>This function does not return the output of the DML commands when you have redirected the output by using the OLAP DML <code dir="ltr">OUTFILE</code> command.</p>
<p>You can use the <code dir="ltr">INTERP</code> function as an argument to the <code dir="ltr">PRINTLOG</code> procedure in this package to view the session log. See the example.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5611"></a>Syntax</p>
<pre dir="ltr">INTERP ( 
          olap-commands     IN   VARCHAR2)
     RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5612"></a>Parameters</p>
<div id="OLADM3007" class="tblformal">
<p class="titleintable"><a id="sthref5613"></a><a id="sthref5614"></a>Table B-24 INTERP Function Parameters</p>
<table class="cellalignment3618" title="INTERP Function Parameters" summary="Parameters of the INTERP function in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t62">Parameter</th>
<th class="cellalignment3616" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t62" headers="r1c1-t62">
<p><code dir="ltr">olap-commands</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t62 r1c2-t62">
<p>One or more OLAP DML commands separated by semi-colons. See <a href="#CHDIJEGA">&#34;Guidelines for Using Quotation Marks in OLAP DML Commands&#34;</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5615"></a>Returns</p>
<p>The log file for the Oracle OLAP session in which the OLAP DML commands were executed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5616"></a>Example</p>
<p>The following sample SQL*Plus session attaches the <code dir="ltr">GLOBAL</code> analytic workspace and lists the members of <code dir="ltr">UNITS_CUBE</code>.</p>
<pre dir="ltr"><span class="bold">SET serverout ON</span>
<span class="bold">EXECUTE dbms_aw.printlog(dbms_aw.interp(&#39;AW ATTACH global; REPORT units_cube&#39;));</span>

UNITS_CUBE
--------------
TIME
CUSTOMER
PRODUCT
CHANNEL
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i80464"></a>
<div id="OLADM988" class="refsect1">
<h2 class="refsect1">INTERPCLOB Function</h2>
<p><a id="sthref5617"></a><a id="sthref5618"></a>The <code dir="ltr">INTERPCLOB</code> function executes one or more OLAP DML commands and returns the session log in which the commands are executed. It is typically used in applications when the 4K limit on input for the <code dir="ltr">INTERP</code> function may be too restrictive.</p>
<p>This function does not return the output of the OLAP DML commands when you have redirected the output by using the OLAP DML <code dir="ltr">OUTFILE</code> command.</p>
<p>You can use the <code dir="ltr">INTERPCLOB</code> function as an argument to the <code dir="ltr">PRINTLOG</code> procedure in this package to view the session log. See the example.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5619"></a>Syntax</p>
<pre dir="ltr">INTERPCLOB ( 
          olap-commands     IN   CLOB)
     RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5620"></a>Parameters</p>
<div id="OLADM3008" class="tblformal">
<p class="titleintable"><a id="sthref5621"></a><a id="sthref5622"></a>Table B-25 INTERPCLOB Function Parameters</p>
<table class="cellalignment3618" title="INTERPCLOB Function Parameters" summary="Parameters of the INTERPCLOB function in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t63">Parameter</th>
<th class="cellalignment3616" id="r1c2-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t63" headers="r1c1-t63">
<p><code dir="ltr">olap-commands</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t63 r1c2-t63">
<p>One or more OLAP DML commands separated by semi-colons. See <a href="#CHDIJEGA">&#34;Guidelines for Using Quotation Marks in OLAP DML Commands&#34;</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5623"></a>Returns</p>
<p>The log for the Oracle OLAP session in which the OLAP DML commands were executed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5624"></a>Example</p>
<p>The following sample SQL*Plus session creates an analytic workspace named <code dir="ltr">ELECTRONICS</code>, imports its contents from an EIF file stored in the <code dir="ltr">dbs</code> directory object, and displays the contents of the analytic workspace.</p>
<pre dir="ltr"><span class="bold">SET serverout ON size 1000000</span>
<span class="bold">EXECUTE dbms_aw.printlog(dbms_aw.interpclob(&#39;AW ATTACH global; DESCRIBE&#39;));</span>

DEFINE GEN_OBJ_ROLES DIMENSION TEXT

DEFINE GEN_AW_OBJS VARIABLE TEXT &lt;GEN_OBJ_ROLES&gt;

DEFINE ALL_DIMENSIONS DIMENSION TEXT

DEFINE DIM_OBJ_LIST DIMENSION TEXT

DEFINE DIM_AW_OBJS VARIABLE TEXT &lt;ALL_DIMENSIONS DIM_OBJ_LIST&gt;
     .
     .
     .
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i84899"></a>
<div id="OLADM989" class="refsect1">
<h2 class="refsect1">INTERP_SILENT Procedure</h2>
<p><a id="sthref5625"></a><a id="sthref5626"></a>The <code dir="ltr">INTERP_SILENT</code> procedure executes one or more OLAP DML commands and suppresses all output from them. It does not suppress error messages from the OLAP command interpreter.</p>
<p>Input to the <code dir="ltr">INTERP_SILENT</code> function is limited to 4K. To display the output of the OLAP DML commands, use the <code dir="ltr">EXECUTE</code> procedure, or the <code dir="ltr">INTERP</code> or <code dir="ltr">INTERPCLOB</code> functions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5627"></a>Syntax</p>
<pre dir="ltr">INTERP_SILENT ( 
          olap-commands     IN   VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5628"></a>Parameters</p>
<div id="OLADM3009" class="tblformal">
<p class="titleintable"><a id="sthref5629"></a><a id="sthref5630"></a>Table B-26 INTERP_SILENT Function Parameters</p>
<table class="cellalignment3618" title="INTERP_SILENT Function Parameters" summary="Parameters of the INTERP_SILENT function in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t65">Parameter</th>
<th class="cellalignment3616" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t65" headers="r1c1-t65">
<p><code dir="ltr">olap-commands</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t65 r1c2-t65">
<p>One or more OLAP DML commands separated by semi-colons. See <a href="#CHDIJEGA">&#34;Guidelines for Using Quotation Marks in OLAP DML Commands&#34;</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5631"></a>Example</p>
<p>The following commands show the difference in message handling between <code dir="ltr">EXECUTE</code> and <code dir="ltr">INTERP_SILENT</code>. Both commands attach the <code dir="ltr">GLOBAL</code> analytic workspace in read-only mode. However, <code dir="ltr">EXECUTE</code> displays a warning message, while <code dir="ltr">INTERP_SILENT</code> does not.</p>
<pre dir="ltr"><span class="bold">EXECUTE dbms_aw.execute(&#39;AW ATTACH global&#39;);</span>
IMPORTANT: Analytic workspace GLOBAL is read-only. Therefore, you will not be able to use the UPDATE command to save changes to it.
 
<span class="bold">EXECUTE dbms_aw.interp_silent(&#39;AW ATTACH global&#39;);</span>
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABIDHBD"></a>
<div id="OLADM990" class="refsect1">
<h2 class="refsect1">OLAP_ON Function</h2>
<p><a id="sthref5632"></a><a id="sthref5633"></a>The <code dir="ltr">OLAP_ON</code> function returns a boolean indicating whether or not the OLAP option is installed in the database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5634"></a>Syntax</p>
<pre dir="ltr">OLAP_ON ( )
    RETURN BOOLEAN;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5635"></a>Returns</p>
<p>The value of the <code dir="ltr">OLAP</code> parameter in the <code dir="ltr">V$OPTION</code> table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5636"></a>Example</p>
<p>The following PL/SQL code tests the value returned by <code dir="ltr">OLAP_ON</code> and returns a status message.</p>
<pre dir="ltr">BEGIN
          IF dbms_aw.olap_on() = true
             THEN dbms_output.put_line(&#39;The OLAP option is installed&#39;);
          ELSE dbms_output.put_line(&#39;The OLAP option is not installed&#39;);
          END IF;
END;
/

The OLAP option is installed
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGIGFG"></a>
<div id="OLADM991" class="refsect1">
<h2 class="refsect1">OLAP_RUNNING Function</h2>
<p><a id="sthref5637"></a><a id="sthref5638"></a>The <code dir="ltr">OLAP_RUNNING</code> function returns a boolean indicating whether or not the OLAP option has been initialized in the current session. Initialization occurs when you execute an OLAP DML command (either directly or by using an OLAP PL/SQL or Java package), query an analytic workspace, or execute the <a href="#BABDIICE">STARTUP Procedure</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5639"></a>Syntax</p>
<pre dir="ltr">OLAP_RUNNING( )
    RETURN BOOLEAN;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5640"></a>Returns</p>
<p><code dir="ltr">TRUE</code> if OLAP has been initialized in the current session, or <code dir="ltr">FALSE</code> if it has not.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5641"></a>Example</p>
<p>The following PL/SQL script tests whether the OLAP environment has been initialized, and starts it if not.</p>
<pre dir="ltr">BEGIN
     IF dbms_aw.olap_running() THEN
          dbms_output.put_line(&#39;OLAP is already running&#39;);
     ELSE
          dbms_aw.startup;
     IF dbms_aw.olap_running() THEN
          dbms_output.put_line(&#39;OLAP started successfully&#39;);
     ELSE
          dbms_output.put_line(&#39;OLAP did not start. Is it installed?&#39;);
     END IF;
 END IF;
END;
/

OLAP started successfully
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i88953"></a>
<div id="OLADM992" class="refsect1">
<h2 class="refsect1">PRINTLOG Procedure</h2>
<p><a id="sthref5642"></a><a id="sthref5643"></a><a id="sthref5644"></a>This procedure sends a session log returned by the <code dir="ltr">INTERP</code>, <code dir="ltr">INTERPCLOB</code>, or <code dir="ltr">GETLOG</code> functions of this package to the print buffer, using the <code dir="ltr">DBMS_OUTPUT</code> package in PL/SQL.</p>
<p><a id="sthref5645"></a>When you are using SQL*Plus, you can direct the printer buffer to the screen by issuing the following command:</p>
<pre dir="ltr">SET SERVEROUT ON SIZE 1000000
</pre>
<p>The <code dir="ltr">SIZE</code> clause increases the buffer from its default size of 4K.</p>
<p>If you are using a different program, refer to its documentation for the equivalent setting.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5646"></a>Syntax</p>
<pre dir="ltr">PRINTLOG ( 
          session-log     IN   CLOB);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5647"></a>Parameters</p>
<div id="OLADM3010" class="tblformal">
<p class="titleintable"><a id="sthref5648"></a><a id="sthref5649"></a>Table B-27 PRINTLOG Procedure Parameters</p>
<table class="cellalignment3618" title="PRINTLOG Procedure Parameters" summary="Parameters of the PRINTLOG procedure in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t69">Parameter</th>
<th class="cellalignment3616" id="r1c2-t69">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t69" headers="r1c1-t69">
<p>session-log</p>
</td>
<td class="cellalignment3617" headers="r2c1-t69 r1c2-t69">
<p>The log of a session.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5650"></a>Example</p>
<p><a id="sthref5651"></a>The following example shows the session log returned by the <code dir="ltr">INTERP</code> function.</p>
<pre dir="ltr"><span class="bold">SET serverout ON size 1000000</span>

<span class="bold">EXECUTE dbms_aw.printlog(dbms_aw.interp(&#39;REPORT W 30 all_dimensions&#39;));</span>
 
ALL_DIMENSIONS
------------------------------
TIME.DIMENSION
CUSTOMER.DIMENSION
PRODUCT.DIMENSION
CHANNEL.DIMENSION
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDEIFAF"></a>
<div id="OLADM993" class="refsect1">
<h2 class="refsect1">RUN Procedure</h2>
<p><a id="sthref5652"></a><a id="sthref5653"></a>The <code dir="ltr">RUN</code> procedure executes one or more OLAP DML commands and directs the output to a printer buffer. It is typically used to manipulate analytic workspace data within an interactive SQL session. In contrast to the <a href="#i83227">EXECUTE Procedure</a>, <code dir="ltr">RUN</code> stops processing commands when it gets an error.</p>
<p><a id="sthref5654"></a><a id="sthref5655"></a>When you are using SQL*Plus, you can direct the printer buffer to the screen by issuing the following command:</p>
<pre dir="ltr">SET SERVEROUT ON
</pre>
<p>If you are using a different program, refer to its documentation for the equivalent setting.</p>
<p><a id="sthref5656"></a>This procedure does not print the output of the DML commands when you have redirected the output by using the OLAP DML <code dir="ltr">OUTFILE</code> command.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5657"></a>Syntax</p>
<pre dir="ltr">RUN ( 
          olap_commands     IN      STRING, 
          silent            IN      BOOLEAN DEFAULT FALSE);
RUN ( 
          olap_commands     IN      CLOB,   
          silent            IN      BOOLEAN DEFAULT FALSE);
RUN ( 
          olap_commands     IN      STRING, 
          output            OUT     STRING);
RUN ( 
          olap_commands     IN      STRING, 
          output            IN OUT  CLOB);
RUN ( 
          olap_commands     IN      CLOB,   
          output            OUT     STRING);
RUN ( 
          olap_commands     IN      CLOB,
          output            IN OUT  CLOB);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5658"></a>Parameters</p>
<div id="OLADM3011" class="tblformal">
<p class="titleintable"><a id="sthref5659"></a><a id="sthref5660"></a>Table B-28 EXECUTE Procedure Parameters</p>
<table class="cellalignment3618" title="EXECUTE Procedure Parameters" summary="Parameters of the EXECUTE procedure in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t71">Parameter</th>
<th class="cellalignment3616" id="r1c2-t71">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t71" headers="r1c1-t71">
<p><code dir="ltr">olap-commands</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t71 r1c2-t71">
<p>One or more OLAP DML commands separated by semicolons. See <a href="#CHDIJEGA">&#34;Guidelines for Using Quotation Marks in OLAP DML Commands&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t71" headers="r1c1-t71">
<p><code dir="ltr">silent</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t71 r1c2-t71">
<p>A boolean value that signals whether the output from the OLAP DML commands should be suppressed. (Error messages from the OLAP engine are never suppressed, regardless of this setting.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t71" headers="r1c1-t71">
<p><code dir="ltr">output</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t71 r1c2-t71">
<p>Output from the OLAP engine in response to the OLAP commands.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5661"></a>Example</p>
<p>The following sample SQL*Plus session attaches an analytic workspace named <code dir="ltr">XADEMO</code>, creates a formula named <code dir="ltr">COST_PP</code> in <code dir="ltr">XADEMO</code>, and displays the new formula definition.</p>
<pre dir="ltr"><span class="bold">EXECUTE dbms_aw.run(&#39;DESCRIBE time&#39;);</span>

DEFINE TIME DIMENSION TEXT                                                                                                                            
</pre>
<p>The next example shows how <code dir="ltr">RUN</code> stops executing commands after encountering an error.</p>
<pre dir="ltr"><span class="bold">EXECUTE dbms_aw.run(&#39;SHOW DECIMALS&#39;);</span>
0
 
<span class="bold">EXECUTE dbms_aw.run(&#39;CALL nothing; DECIMALS=4&#39;);</span>
BEGIN dbms_aw.run(&#39;CALL nothing; DECIMALS=4&#39;); END;
 
*
ERROR at line 1:
ORA-34492: Analytic workspace object NOTHING does not exist. 
ORA-06512: at &#34;SYS.DBMS_AW&#34;, line 58 
ORA-06512: at &#34;SYS.DBMS_AW&#34;, line 134 
ORA-06512: at line 1 
 
<span class="bold">EXECUTE dbms_aw.run(&#39;SHOW DECIMALS&#39;);</span>
0 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEADFI"></a>
<div id="OLADM994" class="refsect1">
<h2 class="refsect1">SHUTDOWN Procedure</h2>
<p><a id="sthref5662"></a><a id="sthref5663"></a>The <code dir="ltr">SHUTDOWN</code> <a id="sthref5664"></a>procedure terminates the current OLAP session.</p>
<p>By default, the <code dir="ltr">SHUTDOWN</code> procedure terminates the session only if there are no outstanding changes to any of the attached read/write workspaces. To terminate the session without updating the workspaces, specify the <code dir="ltr">force</code> parameter.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5665"></a>Syntax</p>
<pre dir="ltr">SHUTDOWN ( 
          force     IN    BOOLEAN  DEFAULT NO);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5666"></a>Parameters</p>
<div id="OLADM3012" class="tblformal">
<p class="titleintable"><a id="sthref5667"></a><a id="sthref5668"></a>Table B-29 SHUTDOWN Procedure Parameters</p>
<table class="cellalignment3618" title="SHUTDOWN Procedure Parameters" summary="Parameters of the SHUTDOWN procedure in the DBMS_AW package" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t73">Parameter</th>
<th class="cellalignment3616" id="r1c2-t73">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t73" headers="r1c1-t73">
<p><code dir="ltr">force</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t73 r1c2-t73">
<p>When <code dir="ltr">YES</code>, this parameter forces the OLAP session to shutdown even though one or more attached workspaces has not been updated. Default is <code dir="ltr">NO</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5669"></a>Example</p>
<p>The following commands save all changes to the <code dir="ltr">GLOBAL</code> analytic workspace and close the user&#39;s OLAP session.</p>
<pre dir="ltr">EXECUTE dbms_aw.aw_update(&#39;global_finance&#39;);
COMMIT;
EXECUTE dbms_aw.shutdown();
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGAHHF"></a>
<div id="OLADM995" class="refsect1">
<h2 class="refsect1">SPARSITY_ADVICE_TABLE Procedure</h2>
<p>The <a id="sthref5670"></a><a id="sthref5671"></a><code dir="ltr">SPARSITY_ADVICE_TABLE</code> procedure creates a table for storing the advice generated by the <code dir="ltr">ADVISE_SPARSITY</code> procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABGGHHI">&#34;Using the Sparsity Advisor&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5672"></a>Syntax</p>
<pre dir="ltr">SPARSITY_ADVICE_TABLE (
          tblname   IN    VARCHAR2 DEFAULT);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5673"></a>Parameters</p>
<div id="OLADM3013" class="tblformal">
<p class="titleintable"><a id="sthref5674"></a><a id="sthref5675"></a>Table B-30 SPARSITY_ADVICE_TABLE Procedure Parameters</p>
<table class="cellalignment3618" title="SPARSITY_ADVICE_TABLE Procedure Parameters" summary="Parameter descriptions for DBMS_AW.SPARSITY_ADVICE_TABLE" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t76">Parameter</th>
<th class="cellalignment3616" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t76" headers="r1c1-t76">
<p><code dir="ltr">tblname</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t76 r1c2-t76">
<p>The name of the table. The default name is <code dir="ltr">AW_SPARSITY_ADVICE</code>, which is created in your own schema. See <a href="#CHDDBBFF">ADVISE_SPARSITY Procedure</a> for a description of the columns in <span class="italic">tblname</span>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5676"></a>Example</p>
<p>The following example creates a table named <code dir="ltr">GLOBAL_SPARSITY_ADVICE</code>.</p>
<pre dir="ltr">EXECUTE dbms_aw.sparsity_advice_table(&#39;global_sparsity_advice&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDIICE"></a>
<div id="OLADM996" class="refsect1">
<h2 class="refsect1">STARTUP Procedure</h2>
<p><a id="sthref5677"></a><a id="sthref5678"></a>The<a id="sthref5679"></a> <code dir="ltr">STARTUP</code> procedure starts an OLAP session without attaching <a id="sthref5680"></a>any user-defined workspaces.</p>
<p><code dir="ltr">STARTUP</code> initializes the OLAP processing environment and attaches the read-only <code dir="ltr">EXPRESS</code> workspace, which contains the program code for the OLAP <a id="sthref5681"></a>engine<a id="sthref5682"></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this procedure from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL*Plus.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5683"></a>Syntax</p>
<pre dir="ltr">STARTUP ( );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5684"></a>Example</p>
<p>The following example starts an OLAP session.</p>
<pre dir="ltr">EXECUTE dbms_aw.startup();
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3608">
<tr>
<td class="cellalignment3617">
<table class="cellalignment3613">
<tr>
<td class="cellalignment3612"><a href="dml_app_sqlfunc.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3612"><a href="dml_app_sessioninit.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3620">
<table class="cellalignment3611">
<tr>
<td class="cellalignment3612"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3612"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3612"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3612"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3612"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3612"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>