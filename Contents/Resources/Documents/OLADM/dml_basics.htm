<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79275"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/OLAP%20DML%20Basic%20Concepts"></a><title>OLAP DML Basic Concepts</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1079"/>
<meta name="dcterms.created" content="2016-04-19T12:43:16Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP DML Reference"/>
<meta name="dcterms.identifier" content="E17673-12"/>
<meta name="dcterms.isVersionOf" content="OLADM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="changes.htm" title="Previous" type="text/html"/>
<link rel="Next" href="dml_expression.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17673-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">5/19</span> <!-- End Header -->
<div id="OLADM101" class="chapter"><a id="sthref9"></a>
<h1 class="chapter"><span class="secnum">1</span> OLAP DML Basic Concepts</h1>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABFDBDJ">What is the OLAP DML?</a></p>
</li>
<li>
<p><a href="#BABDFABE">Basic Syntactic Units of the OLAP DML</a></p>
</li>
<li>
<p><a href="#BABDDFJA">How to Execute OLAP DML Statements</a></p>
</li>
<li>
<p><a href="#BABHAHGH">Introduction to Analytic Workspaces</a></p>
</li>
<li>
<p><a href="#BABCCJGC">Introduction to Analytic Workspace Data Objects</a></p>
</li>
<li>
<p><a href="#BABHFFFI">OLAP DML Statements Apply to All of the Values of a Data Object</a></p>
</li>
</ul>
<a id="BABFDBDJ"></a>
<div id="OLADM102" class="sect1">
<h2 class="sect1">What is the OLAP DML?</h2>
<p>The OLAP DML is the original language for defining Oracle OLAP objects and manipulating Oracle OLAP data.</p>
<p>There are two major types of OLAP DML statements:</p>
<ul>
<li>
<p>OLAP DML statements that work against Oracle OLAP cubes and cube dimensions that have been previously defined in the Oracle data dictionary using the OLAP API. For an introduction to these statements, see <a href="#BABDDIBI">&#34;Cube-Aware OLAP DML Statements&#34;</a>.</p>
</li>
<li>
<p>OLAP DML statements that create and manipulate lower-level OLAP objects that are defined and stored in an analytic workspace. For an introduction to these statements, see <a href="#BABGIDBF">&#34;OLAP DML Statements that Work Directly on Analytic Workspace Objects&#34;</a>.</p>
</li>
</ul>
<a id="BABDDIBI"></a>
<div id="OLADM1043" class="sect2"><a id="BABIAIGI"></a>
<h3 class="sect2">Cube-Aware OLAP DML Statements</h3>
<p>OLAP cubes are first-class Oracle OLAP objects and are defined in the Oracle data dictionary. Some OLAP DML statements work against cubes and other first-class OLAP objects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink OLAUG" href="../OLAUG/toc.htm"><span class="italic">Oracle OLAP User&#39;s Guide</span></a> for information on OLAP cubes and other first-level OLAP objects.</div>
<p>The following OLAP DML programs work with previously-defined OLAP cubes and cube dimensions.</p>
<br/>
<a href="dml_commands_1.htm#BGEEHCEG">ADD_CUBE_MODEL</a><br/>
<a href="dml_commands_1.htm#BGEBHJGE">ADD_DIMENSION_MEMBER</a><br/>
<a href="dml_commands_1.htm#BGEDHJID">ADD_MODEL_DIMENSION</a><br/>
<a href="dml_commands_1.htm#BGEECJFD">CREATE_LOGICAL_MODEL</a><br/>
<a href="dml_commands_2.htm#CCHJBDCB">REMOVE_CUBE_MODEL</a><br/>
<a href="dml_commands_2.htm#CCHDJFHB">REMOVE_DIMENSION_MEMBER</a><br/>
<a href="dml_commands_2.htm#CCHFFHHA">REMOVE_MODEL_DIMENSION</a><br/>
<a href="dml_commands_2.htm#CCHIFGHD">SET_INCLUDED_MODEL</a><br/>
<a href="dml_commands_2.htm#CCHIEIFE">SET_PROPERTY</a><br/>
<a href="dml_commands_2.htm#CCHBIGEG">UPDATE_ATTRIBUTE_VALUE</a><br/>
<a href="dml_commands_2.htm#CCHEJECB">UPDATE_DIMENSION_MEMBER</a><br/>
<p>Typically, these programs take, as input, the Oracle data dictionary name of an OLAP cube or cube dimension. When the programs execute they not only make the necessary changes to the cube or cube dimension, they also make changes to all of the analytic workspace objects that underlie these cubes and cube dimensions.</p>
<p>Also, you can use the <a href="dml_functions_2.htm#CHDFAIFC">OBJORG</a> function in OLAP DML statements that are <span class="italic">not</span> cube-aware to specify the analytic workspace objects that underlie OLAP cubes and cube dimensions.</p>
</div>
<!-- class="sect2" -->
<a id="BABGIDBF"></a>
<div id="OLADM1044" class="sect2">
<h3 class="sect2">OLAP DML Statements that Work Directly on Analytic Workspace Objects</h3>
<p>Historically, OLAP DML statements did not work against first-level OLAP objects as defined in the OLAP data dictionary. Instead, OLAP DML statements create and manipulate lower-level OLAP objects that are defined and stored in an analytic workspace. This remains the case for most OLAP DML statements today.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Unless otherwise stated, statements and information provided in this manual applies to OLAP DML statements that are not cube-aware (that is, OLAP DML statements work directly on analytic workspace objects).</div>
<p>For OLAP DML statements that work directly on analytic workspace objects, if an object name is needed as input to the statement, the object name is the name of an object as defined in the analytic workspace, not as defined in the Oracle data dictionary.</p>
<p>You can use these OLAP DML statements to create programs that analyze analytic workspace data without using SQL, Java, the OLAP API, or the Oracle OLAP tools. You can use the OLAP DML to define the analytic workspaces and the objects that are stored in analytic workspaces. For example, you can:</p>
<ul>
<li>
<p>Create an analytic workspace as described in <a href="#BABIADFF">&#34;Defining a New Analytic Workspace&#34;</a>.</p>
</li>
<li>
<p>Define the multidimensional data objects in an analytic workspace using the <a href="dml_commands_1.htm#i78478">DEFINE</a> command.</p>
</li>
<li>
<p>Define calculation objects and programs that analyze the data as described in <a href="dml_objects.htm#BABDBIGI">Chapter 3, &#34;Formulas, Models, Aggregations, and Allocations&#34;</a>.</p>
</li>
<li>
<p>Populate and analyze the data in the multidimensional data objects.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDFABE"></a>
<div id="OLADM104" class="sect1">
<h2 class="sect1">Basic Syntactic Units of the OLAP DML</h2>
<p>The basic syntactic units of the OLAP DML are options, properties, commands, functions, and programs. All of these are sometimes collectively referred to as OLAP DML statements.</p>
<p class="subhead2"><a id="OLADM1045"></a>OLAP DML Options</p>
<p>An OLAP DML option is a special type of analytic workspace object that specifies the characteristic of some aspect of how Oracle OLAP calculates or formats data or what Oracle OLAP operations are activated. Some options are read-only, while others are read/write options for which you can specify values. Read/write options have default values.</p>
<p>You cannot define your own options as part of an analytic workspace. However, you can use any of the options that are defined as part of the Oracle OLAP DML. The options are documented as reference topics in <a href="dml_options.htm#CHDFCICB">Chapter 5, &#34;OLAP DML Options&#34;</a>.</p>
<p class="subhead2"><a id="OLADM1046"></a>OLAP DML Properties</p>
<p>A property is a named value that is associated with a definition of an analytic workspace object. You can name, create, and assign properties to an object using an OLAP DML PROPERTY command.</p>
<p>Properties that begin with a $ (dollar sign) are recognized by Oracle OLAP as system properties. You cannot create system properties; however, in some cases you can assign system properties to objects. These system properties are documented as reference topics in <a href="dml_properties.htm#BABIGDDG">Chapter 4, &#34;OLAP DML Properties&#34;</a>.</p>
<p class="subhead2"><a id="OLADM1047"></a>OLAP DML Functions</p>
<p>OLAP functions work in much the same way as commands in other programming languages. They initiate action and return a value. The one exception is the looping nature of OLAP DML functions as discussed in <a href="#BABHFFFI">&#34;OLAP DML Statements Apply to All of the Values of a Data Object&#34;</a>.</p>
<p>Most of the OLAP DML functions are standard text and calculation functions. Other OLAP DML functions return more complex information.Additionally, you can augment the functionality of the OLAP DML by writing an OLAP DML program for use as a function.</p>
<p>The built-in OLAP DML functions are documented as reference topics in <a href="dml_functions_1.htm#CJAGEFHJ">Chapter 7, &#34;OLAP DML Functions: A - K&#34;</a> and <a href="dml_functions_2.htm#CHDBBGJA">Chapter 8, &#34;OLAP DML Functions: L - Z&#34;</a>.</p>
<p class="subhead2"><a id="OLADM1048"></a>OLAP DML Commands</p>
<p>OLAP DML commands work in much the same way as commands in other programming languages&mdash;the one exception is the looping nature of OLAP DML commands as discussed in <a href="#BABHFFFI">&#34;OLAP DML Statements Apply to All of the Values of a Data Object&#34;</a>.</p>
<p>Many OLAP DML commands perform complex actions. Some of these commands are data definition commands like the AW command which you use to create an analytic workspace and the DEFINE command which you use to define objects within an analytic workspace. Other OLAP DML commands are data manipulation commands. Some commands are recognized by Oracle OLAP as events that can trigger the execution of OLAP DML programs. (See <a href="dml_program.htm#CHDBDIIH">&#34;Trigger Programs&#34;</a> for more information.) Additionally, you can augment the functionality of the OLAP DML by writing an OLAP DML program for use as a command.</p>
<p>The built-in OLAP DML commands are documented as reference topics in Chapter 8, <a href="dml_commands_1.htm#BGEEAEAB">Chapter 9, &#34;OLAP DML Commands: A-G&#34;</a> and <a href="dml_commands_2.htm#CCHCECAG">Chapter 10, &#34;OLAP DML Commands: H-Z&#34;</a>.</p>
<p class="subhead2"><a id="OLADM1049"></a>OLAP DML Programs</p>
<p>Several OLAP DML programs are provided as part of the OLAP DML. Some of these programs produce reports that you can print or see online. Other programs provided as part of the OLAP DML perform standard calculations of use to programmers and database administrators. For more information on the programs delivered with the OLAP DML, see <a href="dml_program.htm#CHDIEHDH">&#34;Programs Provided With the OLAP DML&#34;</a>.</p>
<p>You can also write your own OLAP DML programs to augment the functionality of the OLAP DML as described in <a href="dml_program.htm#CFHFFAFB">Chapter 6, &#34;OLAP DML Programs&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="BABDDFJA"></a>
<div id="OLADM105" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">How to Execute OLAP DML Statements</h2>
<p>The simplest way to execute OLAP DML statement is by using the OLAP Worksheet. The OLAP Worksheet is delivered as part of the Analytic Workspace Manager. To open the OLAP worksheet from within the Analytic Workspace Manager:</p>
<ol>
<li>
<p>Connect to an Oracle Database instance.</p>
</li>
<li>
<p>Select a Schema.</p>
</li>
<li>
<p>Select Tools, then OLAP Worksheet.</p>
</li>
</ol>
<p>You can also execute OLAP DML statements in SQL and Java:</p>
<ul>
<li>
<p>Using the PL/SQL <code dir="ltr">DBMS_AW</code> package you can execute OLAP DML statements as described in <a href="dml_app_dbms_aw.htm#BABEDJCD">&#34;Embedding OLAP DML in SQL Statements&#34;</a>.</p>
</li>
<li>
<p>Using <code dir="ltr">SPL_Executor</code> delivered as part of Oracle OLAP Java API you can embed OLAP DML statements within a Java program.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink OLAPI" href="../OLAPI/toc.htm"><span class="italic">Oracle OLAP Java API Reference</span></a></div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABHAHGH"></a>
<div id="OLADM107" class="sect1">
<h2 class="sect1">Introduction to Analytic Workspaces</h2>
<p>Conceptually, an analytic workspace is that portion of Oracle Database that is used by Oracle OLAP to perform OLAP analysis. Physically, an analytic workspace is stored in the database as LOBs in a table named <code dir="ltr">AW$</code><code dir="ltr"><span class="codeinlineitalic">workspacename</span></code>.</p>
<p>An analytic workspace also contains the following types of objects and the OLAP DML definitions for these objects:</p>
<ul>
<li>
<p>Multidimensional data objects that contain the data to analyze and the results of the analysis.</p>
</li>
<li>
<p>Calculation objects (that is, formulas, models, aggregations, and allocations) that contain OLAP DML statements that specify the analysis.</p>
</li>
<li>
<p>OLAP DML programs that perform complex analysis.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABCCJGC">&#34;Introduction to Analytic Workspace Data Objects&#34;</a>, <a href="dml_objects.htm#BABDBIGI">Chapter 3, &#34;Formulas, Models, Aggregations, and Allocations&#34;</a> and <a href="dml_program.htm#CFHFFAFB">Chapter 6, &#34;OLAP DML Programs&#34;</a></div>
<a id="BABIGHJI"></a>
<div id="OLADM108" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Privileges Needed to Create and Delete Analytic Workspaces</h3>
<p>Because an analytic workspace is physically stored as a table in an Oracle Database instance, you need SQL GRANT privileges to work with an analytic workspace. The privileges you need vary depending on whether the analytic workspace is in a schema that you own or in a schema that you do not own:</p>
<ul>
<li>
<p>When you are the owner of the schema, you only need SQL GRANT privileges when you want to create an analytic workspace or attach an analytic workspace. The privileges you must be granted to perform these tasks and the OLAP DML commands that relate to these tasks are outlined in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment3615" title="Privleges Needed to Create and Delete Analytic Workspaces When You are the Schema Owner" summary="Analytic workspace tasks and OLAP DML commands and GRANT privileges need to perform these tasks when the analytic workspace is in a schema that you own." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t6">Task</th>
<th class="cellalignment3616" id="r1c2-t6">OLAP DML Command</th>
<th class="cellalignment3616" id="r1c3-t6">SQL GRANT Privileges Needed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t6" headers="r1c1-t6">Create an analytic workspace</td>
<td class="cellalignment3617" headers="r2c1-t6 r1c2-t6"><a href="dml_commands_1.htm#i1016130">AW CREATE</a></td>
<td class="cellalignment3617" headers="r2c1-t6 r1c3-t6">CREATE TABLE</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t6" headers="r1c1-t6">Attach an analytic workspace AS OF</td>
<td class="cellalignment3617" headers="r3c1-t6 r1c2-t6"><a href="dml_commands_1.htm#i1016126">AW ATTACH</a> with ASOF keyword</td>
<td class="cellalignment3617" headers="r3c1-t6 r1c3-t6">FLASHBACK TABLE</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></li>
<li>
<p>When you are not the owner of the schema, you need SQL GRANT privileges to create an analytic workspace, to attach an analytic workspace in ASOF mode, to drop an analytic workspace, and to truncate an analytic workspace as shown in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment3615" title="Privleges Needed to Create and Delete Analytic Workspaces When You are not the Schema Owner" summary="Analytic workspace tasks and OLAP DML commands and GRANT privileges need to perform these tasks when the analytic workspace is in a schema that you do not own." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t7">Task</th>
<th class="cellalignment3616" id="r1c2-t7">OLAP DML Command</th>
<th class="cellalignment3616" id="r1c3-t7">SQL GRANT Privileges Needed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t7" headers="r1c1-t7">Create an analytic workspace</td>
<td class="cellalignment3617" headers="r2c1-t7 r1c2-t7"><a href="dml_commands_1.htm#i1016130">AW CREATE</a></td>
<td class="cellalignment3617" headers="r2c1-t7 r1c3-t7">CREATE ANY TABLE, SELECT ANY TABLE, UPDATE ANY TABLE</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t7" headers="r1c1-t7">Attach an analytic workspace AS OF</td>
<td class="cellalignment3617" headers="r3c1-t7 r1c2-t7"><a href="dml_commands_1.htm#i1016126">AW ATTACH</a> with ASOF keyword</td>
<td class="cellalignment3617" headers="r3c1-t7 r1c3-t7">FLASHBACK ANY TABLE</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t7" headers="r1c1-t7">Delete an analytic workspace</td>
<td class="cellalignment3617" headers="r4c1-t7 r1c2-t7"><a href="dml_commands_1.htm#i1016134">AW DELETE</a></td>
<td class="cellalignment3617" headers="r4c1-t7 r1c3-t7">DROP ANY TABLE</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t7" headers="r1c1-t7">Truncate an analytic workspace</td>
<td class="cellalignment3617" headers="r5c1-t7 r1c2-t7"><a href="dml_commands_1.htm#CACCAEBE">AW TRUNCATE</a></td>
<td class="cellalignment3617" headers="r5c1-t7 r1c3-t7">TRUNCATE ANY TABLE</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></li>
</ul>
<p>Note that Oracle Database does not turn on roles when you run a named PL/SQL procedure. In this case, the you must have the CREATE TABLE privilege directly.</p>
</div>
<!-- class="sect2" -->
<a id="BABIADFF"></a>
<div id="OLADM109" class="sect2">
<h3 class="sect2">Defining a New Analytic Workspace</h3>
<p>You can use the OLAP DML to create analytic workspaces. To create an analytic workspace, issue an AW command with the CREATE keyword, followed by an UPDATE statement and a COMMIT statement.</p>
</div>
<!-- class="sect2" -->
<div id="OLADM110" class="sect2"><a id="sthref10"></a>
<h3 class="sect2">Working with Previously-Defined Analytic Workspaces</h3>
<p>Before you can work with a previously-defined analytic workspace, you must first attach the analytic workspace by issuing an AW ATTACH statement. You can attach an analytic workspace in any of the following attachment modes:</p>
<ul>
<li>
<p><span class="bold">Read-only</span>: Users can make private changes to the data in the workspace to perform what-if analysis but cannot commit any of these changes. Any number of users can be attached in Read Only mode.</p>
</li>
<li>
<p><span class="bold">Read/write access mode</span>: Only one user can have an analytic workspace open in read/write at a time. The user has to commit either all or none of the changes made to the workspace.</p>
</li>
<li>
<p><span class="bold">Read/write exclusive access mode</span>: The read/write exclusive attach mode is not compatible with any other access modes. A user cannot attach an analytic workspace in read/write exclusive mode when another user has it attached in any mode. Only one user can have an analytic workspace open in read/write exclusive at a time. The user has to commit either all or none of the changes made to the workspace.</p>
</li>
<li>
<p><span class="bold">Multiwriter access mode</span>: An analytic workspace that is attached in multiwriter mode can be accessed simultaneously by several sessions. In multiwriter mode, users can simultaneously modify the same analytic workspace in a controlled manner by specifying the attachment mode (read-only or read/write) for individual variables, relations, valuesets, and dimensions.</p>
</li>
</ul>
<p>For more information on the various attachment modes, see the syntax and notes for the <a href="dml_commands_1.htm#i1016126">AW ATTACH</a> statement.</p>
</div>
<!-- class="sect2" -->
<a id="BABECAAG"></a>
<div id="OLADM111" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Viewing Information About an Analytic Workspace</h3>
<p><a href="#BABDFCEG">Table 1-1, &#34;Statements for Viewing Information About an Analytic Workspace&#34;</a> lists the OLAP DML statements that you can use to view information about an analytic workspace</p>
<div id="OLADM1050" class="tblformal">
<p class="titleintable"><a id="sthref11"></a><a id="BABDFCEG"></a>Table 1-1 Statements for Viewing Information About an Analytic Workspace</p>
<table class="cellalignment3618" title="Statements for Viewing Information About an Analytic Workspace" summary="This table lists the OLAP DML statements that you can use to manage analytic workspaces." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t8">Statement</th>
<th class="cellalignment3616" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t8" headers="r1c1-t8">
<p><a href="dml_functions_1.htm#i79097">AW function</a></p>
</td>
<td class="cellalignment3617" headers="r2c1-t8 r1c2-t8">
<p>Returns information about currently attached workspaces.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t8" headers="r1c1-t8">
<p><a href="dml_commands_1.htm#i79102">AWDESCRIBE</a> program</p>
</td>
<td class="cellalignment3617" headers="r3c1-t8 r1c2-t8">
<p>Sends information about the current analytic workspace to the current outfile.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t8" headers="r1c1-t8">
<p><a href="dml_functions_1.htm#i80575">EXISTS</a> function</p>
</td>
<td class="cellalignment3617" headers="r4c1-t8 r1c2-t8">
<p>Returns a value that indicates whether an object is defined in any attached workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t8" headers="r1c1-t8">
<p><a href="dml_commands_2.htm#i78827">LISTBY</a> program</p>
</td>
<td class="cellalignment3617" headers="r5c1-t8 r1c2-t8">
<p>Lists all objects in an analytic workspace that are dimensioned by or related to one or more specified dimensions or composites.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t8" headers="r1c1-t8">
<p><a href="dml_commands_2.htm#i78837">LISTNAMES</a> program</p>
</td>
<td class="cellalignment3617" headers="r6c1-t8 r1c2-t8">
<p>Lists the names of the objects in an analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t8" headers="r1c1-t8">
<p><a href="dml_functions_2.htm#g1054016">OBJ</a> function</p>
</td>
<td class="cellalignment3617" headers="r7c1-t8 r1c2-t8">
<p>Returns information about an analytic workspace object.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t8" headers="r1c1-t8">
<p><a href="dml_functions_2.htm#i79518">OBJLIST</a> function</p>
</td>
<td class="cellalignment3617" headers="r8c1-t8 r1c2-t8">
<p>Lists the objects that are in one or more workspaces that you specify.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t8" headers="r1c1-t8">
<p><a href="dml_commands_1.htm#i80436">DESCRIBE</a> command</p>
</td>
<td class="cellalignment3617" headers="r9c1-t8 r1c2-t8">
<p>Lists the simple definition of one or more workspace objects.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r10c1-t8" headers="r1c1-t8">
<p><a href="dml_commands_1.htm#i79541">FULLDSC</a> program</p>
</td>
<td class="cellalignment3617" headers="r10c1-t8 r1c2-t8">
<p>Lists the complete definition of one or more workspace objects, including the properties and triggers of the object(s).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCCJGC"></a>
<div id="OLADM1051" class="sect1">
<h2 class="sect1">Introduction to Analytic Workspace Data Objects</h2>
<p>A relational database typically stores data values in tables that represent third normal form data. In this type of implementation, the values of key columns of a relational database table are unique values of a single level of data. For example, at one level in the relational database you might have a table with a key column named City that contains the names of cities and at the next highest level in the database a table with a key column named state that contains the names of states, and so on and so on.</p>
<p>In an analytic workspace the objects that hold the data to analyze are arrays called variables. The keys into variables are stored in other objects which act as the dimensions of the variables. To support performant OLAP analysis, values from multiple levels are stored within a single dimension called a hierarchical dimension. For example, an analytic workspace might have a hierarchical dimension named geog that had as values the names of both cities and states.</p>
<p>The objects that store values that relate values of two or more dimensions are called relations. Thus the one-to-many relationship between values of different levels in a hierarchical dimension are stored in an analytic workspace. For example, the relationship between the city and state values in a hierarchical geog dimension would be stored in an analytic workspace relation typically called a parentrel relation. (See <a href="#BABGGIEH">&#34;Parentrel Relation&#34;</a> for more information.)</p>
<p>Additional analytic workspace objects are typically defined to keep additional information about the hierarchical dimension. Several important OLAP DML commands and functions (such as the LIMIT command) presume the existences of these objects in your analytic workspace as the name of these objects is one argument in the syntax of the statement.</p>
<p>The data objects that you define using the OLAP DML are multidimensional objects that are stored in an analytic workspace. When you use OLAP DML statements to perform operations against these multidimensional data objects, those operations apply all at once to entire set of values contained by these objects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABEEHIF">&#34;Types of Analytic Workspace Data Objects&#34;</a> and<a href="#BABFIHGA">&#34;Objects that Support the Use of Hierarchies&#34;</a>.</div>
<a id="BABEEHIF"></a>
<div id="OLADM113" class="sect2">
<h3 class="sect2">Types of Analytic Workspace Data Objects</h3>
<p>The OLAP DML supports the use of the following types of analytic workspace data objects:</p>
<dl>
<dd><a href="#BABEEFBI">Variables</a></dd>
<dd><a href="#BABBAGFI">Simple Dimensions</a></dd>
<dd><a href="#BABGDCBJ">Concat Dimensions</a></dd>
<dd><a href="#BABIHGIG">Composites</a></dd>
<dd><a href="#BABEJCCH">Partition Templates</a></dd>
<dd><a href="#BABJDDCE">Alias Dimensions</a></dd>
<dd><a href="#BABEFDBE">Relations</a></dd>
<dd><a href="#BABHDBGD">Valueset and Surrogate Objects</a></dd>
</dl>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
You can use the <a href="dml_functions_2.htm#CHDFAIFC">OBJORG</a> function to specify analytic workspace objects that underlie cubes and cube dimensions.</div>
<a id="BABEEFBI"></a>
<div id="OLADM114" class="sect3">
<h4 class="sect3">Variables</h4>
<p>The most important data object in an analytic workspace is the variable. A variable is an object that stores data. All of the data in a variable must have the same data type. Typically, you use variables to contain data values that quantify a particular aspect of your business For example, your business might have several categories of transactions (measured in dollars, units, percentages, and so on) and each category is stored in its own variable. For example, you might record sales data in dollars (a sales variable) and units (a units variable).</p>
<p>Because the OLAP DML is a multidimensional programming language, variables are multidimensional and correspond to what other OLAP languages sometimes call measures. Conceptually, you can think of a variable with two dimensions as a table, a variable with three dimensions as a cube, and so on. Physically, variables are stored as multidimensional arrays with the actual structure of the arrays determined by the object by which the variable is dimensioned.</p>
<p>The scope and permanence of a variable can vary. A permanent variable is a variable for which both the variable values and definitions are stored in an analytic workspace. Temporary variables have values only during the current session. When you update and commit the analytic workspace, only the definitions of temporary variables are saved. When you exit from the analytic workspace, the data values are discarded. You can also define variables in programs.</p>
<p>You can define scalar variables in programs, but most variables that you define using the OLAP DML are dimensioned variables. Dimensioned variables are arrays that hold multiple values. The indexes or dimensions of the variable provide the organization for the variable. The values of the dimension are similar to keys in a relational table, in that they uniquely identify a data value. For example, if you have a sales variable that is dimensioned by time, geography, and product dimensions, then each combination of the values of time, geography, and product identifies a value in sales. (Note that the indexes of variables are not actually the values of the dimension, but, instead, are the INTEGER positions of the values in the dimension.)</p>
<p>Variables can be dimensioned by either flat or hierarchical dimensions. A flat dimension exists when the values within a dimension are all at the same level; no value is the child or parent of another value. A hierarchical dimension exists when the values with a single dimension are in a one-to-many (parent-to-child) relationship with each other.</p>
<p>A hierarchical dimension is a means of organizing and structuring this type of data within a single dimension. You can then use it to dimension a variable that contains data for all the levels. Some dimensions have multiple hierarchies. You specify the parent-to-child relationships of the dimension values by creating a self-relation.You use a hierarchical dimension to define a variable that contains data of varying levels of aggregation within a single variable. Storing all of these values in a single variable affords a quicker response time for users who want to view the data, particularly when the variable is large.</p>
<p>Frequently, the cells in the variable that correspond to upper level values in the hierarchical dimension contain the sum or total of the values in the cells of the variable that correspond to the lower level dimension values. For example, in a sales variable that is defined with a hierarchical dimension representing time, the cells of the variable for each quarter might represent the total sales for the months in the quarter.</p>
<p>After you have defined a variable with hierarchical dimensions, you can add variable data to the lowest level of the hierarchy, and then calculate or aggregate the values for the higher levels of the hierarchy. Conversely, you can distribute or allocate data from higher levels to lower levels of the hierarchy.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="dml_commands_1.htm#i78533">DEFINE VARIABLE</a></div>
</div>
<!-- class="sect3" -->
<a id="BABDBCGG"></a>
<div id="OLADM115" class="sect3">
<h4 class="sect3">Objects that Can Dimension Variables</h4>
<p>How variable and relation data is actually structured and stored is dependent on what type of object you use to dimension the variable or relation and the order in which those objects appear in the definition of the variable or relation. Variables can be dimensioned by simple dimensions, concat dimensions, composites, partition templates, and alias dimensions. The object by which you choose to dimension a variable determines how the data of the variable is stored.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFIHGA">&#34;Objects that Support the Use of Hierarchies&#34;</a></div>
<p class="subhead2"><a id="BABBAGFI"></a><a id="OLADM1052"></a>Simple Dimensions</p>
<p>The members of a simple dimension are data values that all have the same data type. When a variable is dimensioned by a simple dimension, there is one cell in the variable for every member of the dimension. When there is a dimension member for which the variable has no data, Oracle OLAP stores an NA value in the variable for that empty value. If storing such NA values would result in a full page of NA values, then Oracle OLAP does not actually store the NA values.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="dml_commands_1.htm#i1010637">DEFINE DIMENSION (simple)</a></div>
<p class="subhead2"><a id="BABGDCBJ"></a><a id="OLADM1053"></a>Concat Dimensions</p>
<p>You define concat dimensions over previously-defined simple dimensions or conjoint dimensions. Consequently, the base dimensions of a concat dimension can be of different data types. You can represent a hierarchy with a concat dimension that has two or more simple flat dimensions among its base dimensions. You can use concat dimensions to easily map dimensions in an analytic workspace to columns in relational tables and thereby promote more efficient loading of data from the relational structures into the analytic workspace structures.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="dml_commands_1.htm#i1010642">DEFINE DIMENSION CONCAT</a></div>
<p class="subhead2"><a id="BABIHGIG"></a><a id="OLADM1054"></a>Composites</p>
<p><a id="sthref12"></a>You define composites over previously-defined dimensions. Conceptually, you can think of a composite consisting of two structures:</p>
<ul>
<li>
<p>The composite object itself. The composite contains the dimension-value combinations (that is, the composite tuples) that Oracle OLAP uses to determine the structure of any variables that are dimensioned by the composite.</p>
</li>
<li>
<p>An index between the composite values and its base dimension values.</p>
</li>
</ul>
<p>For a variable that is dimensioned by a composite, Oracle OLAP does not create a cell for every value in the base dimensions as it would if the variable was dimensioned by a simple dimension. Instead, it creates array elements (that is, variable cells) only for those dimension values that are stored in the tuples of the composite. Data for the variable is stored in order, cell by cell, for each tuple in the composite. From the perspective of data storage, each combination of base dimension values in a composite is treated like the value of a regular dimension. Consequently, when you define a variable with one regular dimension and one composite, the data for the variable is stored as though it was a two-dimensional variable. Using composites to reduce the number of elements created for a variable results in more efficient data storage.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="dml_commands_1.htm#i78493">DEFINE COMPOSITE</a></div>
<p class="subhead2"><a id="BABEJCCH"></a><a id="OLADM1055"></a>Partition Templates</p>
<p>You define a partition template over previously-defined dimensions or composites. A partition template is a specification for the partitions of a partitioned variable. A partitioned variable is stored as multiple rows in the relational table of LOBs that is the analytic workspace&mdash;each partition is a row in the table.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="dml_commands_1.htm#i1007745">DEFINE PARTITION TEMPLATE</a></div>
<p class="subhead2"><a id="BABJDDCE"></a><a id="OLADM1056"></a>Alias Dimensions</p>
<p>An alias dimension is an alias for a simple dimension. An alias dimension has the same type and values as its base dimension. Typically, you define an alias dimension when you want to dimension a variable by the same dimension twice.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="dml_commands_1.htm#i1010646">DEFINE DIMENSION ALIASOF</a></div>
</div>
<!-- class="sect3" -->
<a id="BABEFDBE"></a>
<div id="OLADM116" class="sect3">
<h4 class="sect3">Relations</h4>
<p>A relation is an object that establishes a correspondence between the values of a given dimension and the values of that same dimension or other dimensions in the analytic workspace. Relations are dimensioned arrays. Each cell in a relation holds the index of the value of a dimension. You can define relations between two or more dimensions, multiple relations between a set of dimensions, or a dimension with itself (a self-relation).</p>
<p>Most frequently, a relation is a self-relation for a hierarchical dimension. By creating a relation between values in a dimension that participate in a one-to-many (parent-to-child) relationship, you can organize your data by the child values and view aggregates of data by the parent values. For example, you can create a <code dir="ltr">geog.parent</code> relation for a <code dir="ltr">geography</code> dimension to define the relationships between the city and state values in <code dir="ltr">geography</code>. In this way you can organize the data by city and view the aggregates of data by state.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_commands_1.htm#i78518">DEFINE RELATION</a></div>
</div>
<!-- class="sect3" -->
<a id="BABHDBGD"></a>
<div id="OLADM117" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Valueset and Surrogate Objects</h4>
<p>The OLAP DML provides the following special data objects that you use not when you are defining your variables, but instead, when you are querying them,</p>
<p class="subhead2"><a id="OLADM1057"></a>Valueset Objects</p>
<p>A valueset is a list of dimension values for one or more previously-defined dimensions. You use a valueset to save dimension status lists across sessions.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="dml_commands_1.htm#i78528">DEFINE VALUESET</a></div>
<p class="subhead2"><a id="OLADM1058"></a>Surrogates</p>
<p>A dimension surrogate is an alternative set of values for a previously-defined dimension. You cannot dimension a variable by a surrogate, but you can use a surrogate rather than a dimension in a model, in a LIMIT command, in a qualified data reference, or in data loading with statements such as FILEREAD, FILEVIEW, SQL FETCH, and SQL IMPORT.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="dml_commands_1.htm#i78523">DEFINE SURROGATE</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABFIHGA"></a>
<div id="OLADM118" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Objects that Support the Use of Hierarchies</h3>
<p>Typically, variables are dimensioned by hierarchical objects. For example, you might have a sales variable that is dimensioned by geog, time, and product. The geog dimension might have two hierarchies (one for political divisions and another for sales regions) and each of these hierarchies could have several levels with the top level of the political geography hierarchy being All Country and the top level of the sales geography hierarchy being All Regions. <a href="#BABHCJJD">Example 1-1, &#34;Defining and Populating a Hierarchical Dimension Named geog&#34;</a> illustrates defining and populating this type of hierarchical geography dimension.</p>
<div id="OLADM1059" class="example">
<p class="titleinexample"><a id="BABHCJJD"></a>Example 1-1 Defining and Populating a Hierarchical Dimension Named geog</p>
<pre dir="ltr">DEFINE geog DIMENSION TEXT
LD A dimension with two hierarchies for geography
&#34;Populate the dimension with City, State, Region, and Country values 
MAINTAIN geog ADD &#39;Boston&#39; &#39;Springfield&#39; &#39;Hartford&#39; &#39;Mansfield&#39; &#39;Montreal&#39; &#39;Walla Walla&#39; &#39;Portland&#39; &#39;Oakland&#39; &#39;San Diego&#39; &#39;MA&#39; &#39;CT&#39; &#39;WA&#39; &#39;CA&#39; &#39;Quebec&#39; &#39;East&#39; &#39;West&#39; &#39;All Regions&#39; &#39;USA&#39; &#39;Canada&#39; &#39;All Country&#39;
 
&#34;Display the values in geog
 
REPORT geog
 
GEOG
--------------
Boston
Springfield
Hartford
Mansfield
Montreal
Walla Walla
Portland
Oakland
San Diego
MA
CT
WA
CA
Quebec
East
West
All Regions
USA
Canada
All Country
 
</pre></div>
<!-- class="example" -->
<p>Typically, after you define a hierarchical dimension, you define the following objects for that dimension:</p>
<ul>
<li>
<p>hierlist dimension that lists the names of the hierarchies for the dimension. See <a href="#BABHJIAB">&#34;Hierlist Dimension&#34;</a> for more information and an example.</p>
</li>
<li>
<p>parentrel relation that defines the hierarchies. A dimension is only a hierarchical dimension when it has a parentrel defined for it. See <a href="#BABDFEIF">&#34;Parentrel Relation&#34;</a> for more information and an example.</p>
</li>
<li>
<p>levellist relation that lists the names of all of the levels of all of the hierarchies. See <a href="#BABJDFHB">&#34;Levellist Dimension&#34;</a> for more information and an example.</p>
</li>
<li>
<p>hierlevels valueset that is the values of the levels of each hierarchy. See <a href="#BABHGHHB">&#34;Hierlevels Valueset&#34;</a> for more information and an example.</p>
</li>
<li>
<p>inhier valueset or variable that identifies the values of each hierarchy. See <a href="#BABCJDDG">&#34;Inhier Valueset or Variable&#34;</a> for more information and examples.</p>
</li>
<li>
<p>levelrel relation that relates each value of the hierarchical dimension to its level in the hierarchy. See <a href="#BABBDIAE">&#34;Levelrel Relation&#34;</a> for more information and an example.</p>
</li>
<li>
<p>familyrel relation that is each hierarchical dimension value and its related values. See <a href="#BABCBHAE">&#34;Familyrel Relation&#34;</a> for more information and an example.</p>
</li>
<li>
<p>gidrel relation that is the grouping ids of each value within each hierarchy. See <a href="#BABFDJGF">&#34;Gidrel Relation&#34;</a> for more information and an example.</p>
</li>
</ul>
<a id="BABGAAEH"></a>
<div id="OLADM119" class="sect3"><a id="BABHJIAB"></a>
<h4 class="sect3">Hierlist Dimension</h4>
<p>A hierlist dimension is a <code dir="ltr">TEXT</code> dimension in the analytic workspace that has as values the names of the hierarchies of a hierarchical dimension. For example, if the company has a different calendar and fiscal year, the time dimension for that company would have two hierarchies: one for calendar and another for year. The hierlist dimension that supported that time hierarchy would have two values: Calendar and Fiscal.</p>
<p>For consistency&#39;s sake, analytic workspaces include a hierlist dimension for every hierarchical dimension -- even when that hierarchical dimension has only one hierarchy.</p>
<p><a href="#BABDDIGC">Example 1-2, &#34;Defining and Populating a hierlist Dimension Named geog_hierlist&#34;</a> illustrates defining and populating this type of dimension.</p>
<div id="OLADM1060" class="example">
<p class="titleinexample"><a id="BABDDIGC"></a>Example 1-2 Defining and Populating a hierlist Dimension Named geog_hierlist</p>
<pre dir="ltr">DEFINE geog_hierlist DIMENSION TEXT
LD List of Hierarchies for geog dimension
&#34;Populate the geog_hierlist dimension
MAINTAIN geog_hierlist ADD &#39;Political_Geog&#39; &#39;Sales_Geog&#39;
&#34;Display the values of the geog_hierlist dimension
REPORT geog_hierlist
 
GEOG_HIERLIST
--------------
Political_Geog
Sales_Geog
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABGGIEH"></a>
<div id="OLADM120" class="sect3"><a id="BABDFEIF"></a>
<h4 class="sect3">Parentrel Relation</h4>
<p>A parentrel relation is a relation between the hierarchical dimension and itself (a self-relation) and the hierlist dimension. It identifies the parent of each dimension member within a hierarchy.</p>
<p><a href="#BABGJHHC">Example 1-3, &#34;Defining and Populating a parentrel Relation named geog_parentrel&#34;</a> illustrates defining and populating this type of relation.</p>
<div id="OLADM1061" class="example">
<p class="titleinexample"><a id="BABGJHHC"></a>Example 1-3 Defining and Populating a parentrel Relation named geog_parentrel</p>
<pre dir="ltr">&#34;Define the relation 
DEFINE geog_parentrel RELATION geog &lt;geog geog_hierlist&gt;
LD Self-relation for geog showing parents of each value
&#34;Populate each cell in the relation &#34;with the parent of the geog value
&#34;This example using assignment statement with QDRs to do that 
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Boston&#39;) = &#39;MA&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Hartford&#39;) = &#39;CT&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Springfield&#39;) = &#39;MA&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Mansfield&#39;) = &#39;CT&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog  &#39;Montreal&#39;) = &#39;Quebec&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Walla Walla&#39;) = &#39;WA&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Portland&#39;) = &#39;WA&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Oakland&#39;) = &#39;CA&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;San Diego&#39;) = &#39;CA&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;CT&#39;) = &#39;East&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;MA&#39;) = &#39;East&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;WA&#39;) = &#39;West&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;CA&#39;) = &#39;West&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Quebec&#39;) = &#39;East&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;East&#39;) = &#39;All Regions&#39;
geog_parentrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;West&#39;) = &#39;All Regions&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Boston&#39;) = &#39;MA&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Hartford&#39;) = &#39;CT&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Springfield&#39;) = &#39;MA&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Mansfield&#39;) = &#39;CT&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog  &#39;Montreal&#39;) = &#39;Quebec&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Walla Walla&#39;) = &#39;WA&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Portland&#39;) = &#39;WA&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Oakland&#39;) = &#39;CA&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;San Diego&#39;) = &#39;CA&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;CT&#39;) = &#39;USA&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;MA&#39;) = &#39;USA&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;WA&#39;) = &#39;USA&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39;  geog &#39;CA&#39;) = &#39;USA&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39;  geog &#39;Quebec&#39;) = &#39;Canada&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39;  geog &#39;USA&#39;) = &#39;All Country&#39;
geog_parentrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Canada&#39;) = &#39;All Country&#39;

&#34;Display the values of geog_parentrel
REPORT DOWN geog W 20 geog_parentrel
               -------------GEOG_PARENTREL--------------
               --------------GEOG_HIERLIST--------------
GEOG              Political_Geog         Sales_Geog
-------------- -------------------- --------------------
Boston         MA                   MA
Springfield    MA                   MA
Hartford       CT                   CT
Mansfield      CT                   CT
Montreal       Quebec               Quebec
Walla Walla    WA                   WA
Portland       WA                   WA
Oakland        CA                   CA
San Diego      CA                   CA
MA             USA                  East
CT             USA                  East
WA             USA                  West
CA             USA                  West
Quebec         Canada               East
East           NA                   All Regions
West           NA                   All Regions
All Regions    NA                   NA
USA            All Country          NA
Canada         All Country          NA
All Country    NA                   NA
 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABDJGCB"></a>
<div id="OLADM121" class="sect3"><a id="BABJDFHB"></a>
<h4 class="sect3">Levellist Dimension</h4>
<p>A levellist dimension is a TEXT dimension that has as values the names all of the levels of the hierarchies of a hierarchical dimension.</p>
<p><a href="#BABBIIEA">Example 1-4, &#34;Defining and Populating a levellist Dimension Named geog_levellist&#34;</a> illustrates defining and populating this type of dimension.</p>
<div id="OLADM1062" class="example">
<p class="titleinexample"><a id="BABBIIEA"></a>Example 1-4 Defining and Populating a levellist Dimension Named geog_levellist</p>
<pre dir="ltr">DEFINE geog_levellist DIMENSION TEXT
LD List of levels used by hierarchies of the geog dimension
&#34;Populate the geog_levellist dimension with the names of the levels of both the 
&#34;Political_Geog and Sales_Geog hierarchies
MAINTAIN geog_levellist ADD &#39;All Country&#39; &#39;Country&#39; &#39;All Regions&#39; &#39;Region&#39; MAINTAIN geog_levellist ADD &#39;State-Prov&#39; &#39;City&#39;
&#34;Display the values of the geog_levellist dimension
 
REPORT geog_levellist
 
GEOG_LEVELLIST
--------------
All Country
Country
All Regions
Region
State-Prov
City
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABIDDBC"></a>
<div id="OLADM122" class="sect3"><a id="BABHGHHB"></a>
<h4 class="sect3">Hierlevels Valueset</h4>
<p>A hierlevels valueset is those values of the hierlevels dimension (typically ordered from bottom to top) that are included in each hierarchy of the hierarchical dimension.</p>
<p><a href="#BABCCIGF">Example 1-5, &#34;Defining and Populating a hierlevels Valueset named geog_hierlevels&#34;</a> illustrates defining and populating this type of valueset.</p>
<div id="OLADM1063" class="example">
<p class="titleinexample"><a id="BABCCIGF"></a>Example 1-5 Defining and Populating a hierlevels Valueset named geog_hierlevels</p>
<pre dir="ltr">DEFINE geog_hierlevels VALUESET geog_levellist &lt;geog_hierlist&gt;
&#34;Using LIMIT populate the valueset with the appropriate values for each hierarchy
LIMIT geog_hierlevels TO ALL
LIMIT geog_hierlevels (geog_hierlist &#39;Political_Geog&#39;) TO &#39;City&#39; &#39;State-Prov&#39; &#39;Country&#39; &#39;All Country&#39;
LIMIT geog_hierlevels (geog_hierlist &#39;Sales_Geog&#39;) TO &#39;City&#39; &#39;State-Prov&#39; &#39;Region&#39; &#39;All Regions&#39;

&#34;Display the values in the valueset 
REPORT W 22 geog_hierlevels
 
GEOG_HIERLIST     GEOG_HIERLEVELS
-------------- ----------------------
Political_Geog City
               State-Prov
               Country
               All Country
Sales_Geog     City
               State-Prov
               Region
               All Regions
 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABIJDJF"></a>
<div id="OLADM123" class="sect3"><a id="BABCJDDG"></a>
<h4 class="sect3">Inhier Valueset or Variable</h4>
<p>An inhier valueset is those values of the inhier dimension that are in each hierarchy. <a href="#BABIEFEG">Example 1-6, &#34;Defining and Populating an inhier Valueset Named geog_inhier&#34;</a> illustrates defining and populating this type of valueset.</p>
<p>An inhier variable is a BOOLEAN variable that is dimensioned by the hierarchical dimension and the hierlist dimension. For each hierarchy, it has a TRUE value for each dimension value that is in that hierarchy. <a href="#BABGBCDG">Example 1-7, &#34;Defining and Populating an inhier Variable Named geog_inhiervar&#34;</a> illustrates defining and populating this type of valueset</p>
<div id="OLADM1064" class="example">
<p class="titleinexample"><a id="BABIEFEG"></a>Example 1-6 Defining and Populating an inhier Valueset Named geog_inhier</p>
<pre dir="ltr">&#34;Define the valueset
DEFINE geog_inhier VALUESET geog &lt;geog_hierlist&gt;
&#34;Using LIMIT commands, populate the valueset
LIMIT geog_inhier (geog_hierlist &#39;Political_Geog&#39;) REMOVE &#39;East&#39; &#39;West&#39; &#39;All Regions&#39;
LIMIT geog_inhier (geog_hierlist &#39;Sales_Geog&#39;) REMOVE &#39;Canada&#39; &#39;USA&#39; &#39;All Country&#39;
&#34;Display the values in the valueset
 
REPORT W 20 geog_inhier
 
GEOG_HIERLIST      GEOG_INHIER
-------------- --------------------
Political_Geog Boston
               Springfield
               Hartford
               Mansfield
               Montreal
               Walla Walla
               Portland
               Oakland
               San Diego
               MA
               CT
               WA
               CA
               Quebec
               USA
               Canada
               All Country
Sales_Geog     Boston
               Springfield
               Hartford
               Mansfield
               Montreal
               Walla Walla
               Portland
               Oakland
               San Diego
               MA
               CT
               WA
               CA
               Quebec
               East
               West
               All Regions
 
</pre></div>
<!-- class="example" -->
<div id="OLADM1065" class="example">
<p class="titleinexample"><a id="BABGBCDG"></a>Example 1-7 Defining and Populating an inhier Variable Named geog_inhiervar</p>
<pre dir="ltr">DEFINE geog_inhiervar VARIABLE BOOLEAN &lt;geog geog_hierlist&gt;

&#34;Using LIMIT commands and assignment statements, populate
&#34; the variable 
LIMIT geog_hierlist TO ALL
LIMIT geog_hierlist TO &#39;Political_Geog&#39;
LIMIT geog TO &#39;East&#39; &#39;West&#39; &#39;All Regions&#39;
geog_inhiervar = FALSE
LIMIT geog COMPLEMENT
geog_inhiervar = TRUE
LIMIT geog_hierlist TO ALL
LIMIT geog_hierlist TO &#39;Sales_Geog&#39;
LIMIT geog TO ALL
LIMIT geog TO &#39;Canada&#39; &#39;USA&#39; &#39;All Country&#39;
geog_inhiervar = FALSE
LIMIT geog COMPLEMENT
geog_inhiervar = TRUE
LIMIT geog TO ALL
LIMIT geog_hierlist TO ALL
 
&#34;Display the values of the variable 
REPORT DOWN geog geog_inhiervar
 
               ---GEOG_INHIERVAR----
               ----GEOG_HIERLIST----
               Political_
GEOG              Geog    Sales_Geog
-------------- ---------- ----------
Boston                yes        yes
Springfield           yes        yes
Hartford              yes        yes
Mansfield             yes        yes
Montreal              yes        yes
Walla Walla           yes        yes
Portland              yes        yes
Oakland               yes        yes
San Diego             yes        yes
MA                    yes        yes
CT                    yes        yes
WA                    yes        yes
CA                    yes        yes
Quebec                yes        yes
East                   no        yes
West                   no        yes
All Regions            no        yes
USA                   yes         no
Canada                yes         no
All Country           yes         no
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABHJAGG"></a>
<div id="OLADM124" class="sect3"><a id="BABBDIAE"></a>
<h4 class="sect3">Levelrel Relation</h4>
<p>A levelrel relation is a relation between the levellist and hierlist dimensions that records the level for each member of the hierarchical dimension</p>
<p><a href="#BABCJBFI">Example 1-8, &#34;Defining and Populating a levelrel Relation named geog_levelrel&#34;</a> illustrates defining and populating this type of relation.</p>
<div id="OLADM1066" class="example">
<p class="titleinexample"><a id="BABCJBFI"></a>Example 1-8 Defining and Populating a levelrel Relation named geog_levelrel</p>
<pre dir="ltr">&#34;Define the relation 
DEFINE geog_levelrel RELATION geog_levellist &lt;geog geog_hierlist&gt;
LD Level of each dimension member for geog

&#34;Populate the relation
&#34;This example uses assignment statements with QDRs to populate
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Boston&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Hartford&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Springfield&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Mansfield&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog  &#39;Montreal&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Walla Walla&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Portland&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Oakland&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;San Diego&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;CT&#39;) = &#39;State-Prov&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;MA&#39;) = &#39;State-Prov&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;WA&#39;) = &#39;State-Prov&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;CA&#39;) = &#39;State-Prov&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;Quebec&#39;) = &#39;State-Prov&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;East&#39;) = &#39;Region&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;West&#39;) = &#39;Region&#39;
geog_levelrel (geog_hierlist &#39;Sales_Geog&#39; geog &#39;All Regions&#39;) = &#39;All Regions&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Boston&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Hartford&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Springfield&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Mansfield&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog  &#39;Montreal&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Walla Walla&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Portland&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Oakland&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;San Diego&#39;) = &#39;City&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;CT&#39;) = &#39;State-Prov&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;MA&#39;) = &#39;State-Prov&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;WA&#39;) = &#39;State-Prov&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39;   geog &#39;CA&#39;) = &#39;State-Prov&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39;  geog &#39;Quebec&#39;) = &#39;State-Prov&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39;  geog &#39;USA&#39;) = &#39;Country&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;Canada&#39;) = &#39;Country&#39;
geog_levelrel (geog_hierlist &#39;Political_Geog&#39; geog &#39;All Country&#39;) = &#39;All Country&#39;

&#34;Display the values
REPORT DOWN geog W 20 geog_levelrel
 
               --------------GEOG_LEVELREL--------------
               --------------GEOG_HIERLIST--------------
GEOG              Political_Geog         Sales_Geog
-------------- -------------------- --------------------
Boston         City                 City
Springfield    City                 City
Hartford       City                 City
Mansfield      City                 City
Montreal       City                 City
Walla Walla    City                 City
Portland       City                 City
Oakland        City                 City
San Diego      City                 City
MA             State-Prov           State-Prov
CT             State-Prov           State-Prov
WA             State-Prov           State-Prov
CA             State-Prov           State-Prov
Quebec         State-Prov           State-Prov
East           NA                   Region
West           NA                   Region
All Regions    NA                   All Regions
USA            Country              NA
Canada         Country              NA
All Country    All Country          NA
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABECBEE"></a>
<div id="OLADM125" class="sect3"><a id="BABCBHAE"></a>
<h4 class="sect3">Familyrel Relation</h4>
<p>The familyrel relation is a relation between the hierarchical dimension and the levellist and hierlist dimensions that provides the full parentage of each dimension member in the hierarchy.</p>
<p><a href="#BABJGJID">Example 1-9, &#34;Defining and Populating a familyrel Relation named geog_familyrel&#34;</a> illustrates defining and populating this type of relation.</p>
<div id="OLADM1067" class="example">
<p class="titleinexample"><a id="BABJGJID"></a>Example 1-9 Defining and Populating a familyrel Relation named geog_familyrel</p>
<pre dir="ltr">&#34;Define the relation 
DEFINE geog_familyrel RELATION geog &lt;geog geog_levellist geog_hierlist&gt;
LD FEATURES Family/Ancestry structure for the geog dimension
 
&#34;Populate the relation using the HIERHEIGHT command 
HIERHEIGHT geog_parentrel INTO geog_familyrel USING geog_levelrel
 
&#34;Display the values of the familyrel relation
&#34;First the values for the Political_Geog hierarchy are displayed
&#34;Then the values for the Sales_Geog hierarchy
REPORT DOWN geog W 12 geog_familyrel
 
GEOG_HIERLIST: Political_Geog
               -------------------------------GEOG_FAMILYREL--------------------------------
               -------------------------------GEOG_LEVELLIST--------------------------------
GEOG            All Country  Country    All Regions     Region     State-Prov      City
-------------- ------------ ------------ ------------ ------------ ------------ ------------
Boston         All Country  USA          NA           NA           MA           Boston
Springfield    All Country  USA          NA           NA           MA           Springfield
Hartford       All Country  USA          NA           NA           CT           Hartford
Mansfield      All Country  USA          NA           NA           CT           Mansfield
Montreal       All Country  Canada       NA           NA           Quebec       Montreal
Walla Walla    All Country  USA          NA           NA           WA           Walla Walla
Portland       All Country  USA          NA           NA           WA           Portland
Oakland        All Country  USA          NA           NA           CA           Oakland
San Diego      All Country  USA          NA           NA           CA           San Diego
MA             All Country  USA          NA           NA           MA           NA
CT             All Country  USA          NA           NA           CT           NA
WA             All Country  USA          NA           NA           WA           NA
CA             All Country  USA          NA           NA           CA           NA
Quebec         All          Canada       NA           NA           Quebec       NA
               Countries
East           NA           NA           NA           NA           NA           NA
West           NA           NA           NA           NA           NA           NA
All Regions    NA           NA           NA           NA           NA           NA
USA            All Country  USA          NA           NA           NA           NA
Canada         All Country  Canada       NA           NA           NA           NA
All Country    All Country  NA           NA           NA           NA           NA
 
GEOG_HIERLIST: Sales_Geog
               -------------------------------GEOG_FAMILYREL--------------------------------
               -------------------------------GEOG_LEVELLIST--------------------------------
GEOG            All Country Country    All Regions     Region     State-Prov      City
-------------- ------------ ------------ ------------ ------------ ------------ ------------
Boston         NA           NA           All Regions  East         MA           Boston
Springfield    NA           NA           All Regions  East         MA           Springfield
Hartford       NA           NA           All Regions  East         CT           Hartford
Mansfield      NA           NA           All Regions  East         CT           Mansfield
Montreal       NA           NA           All Regions  East         Quebec       Montreal
Walla Walla    NA           NA           All Regions  West         WA           Walla Walla
Portland       NA           NA           All Regions  West         WA           Portland
Oakland        NA           NA           All Regions  West         CA           Oakland
San Diego      NA           NA           All Regions  West         CA           San Diego
MA             NA           NA           All Regions  East         MA           NA
CT             NA           NA           All Regions  East         CT           NA
WA             NA           NA           All Regions  West         WA           NA
CA             NA           NA           All Regions  West         CA           NA
Quebec         NA           NA           All Regions  East         Quebec       NA
East           NA           NA           All Regions  East         NA           NA
West           NA           NA           All Regions  West         NA           NA
All Regions    NA           NA           All Regions  NA           NA           NA
USA            NA           NA           NA           NA           NA           NA
Canada         NA           NA           NA           NA           NA           NA
All Country    NA           NA           NA           NA           NA           NA
 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABCGJHG"></a>
<div id="OLADM126" class="sect3"><a id="BABFDJGF"></a>
<h4 class="sect3">Gidrel Relation</h4>
<p>A gidrel relation is a relation between a NUMBER dimension, the hierarchical dimension, and the hierlist dimension that contains the grouping ID of each dimension member in each hierarchy of the hierarchical dimension. It also has a $GID_DEPTH property that identifies the depth within a hierarchy of each dimension member.</p>
<p><a href="#BABGADAH">Example 1-10, &#34;Defining and Populating a gidrel Relation named geog_gidrel&#34;</a> illustrates defining and populating this type of relation.</p>
<div id="OLADM1068" class="example">
<p class="titleinexample"><a id="BABGADAH"></a>Example 1-10 Defining and Populating a gidrel Relation named geog_gidrel</p>
<pre dir="ltr">&#34;Create a dimension that has values that are numbers
DEFINE gid_dimension DIMENSION NUMBER (38,0)&#34;Add values to that dimension 
&#34;This example uses MAINTAIN ADD to add a few numbers
MAINTAIN gid_dimension ADD 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
 
&#34;Define the gidrel relation
DEFINE geog_gidrel RELATION gid_dimension &lt;geog geog_hierlist&gt;
&#34;Display the complete definition of the geog_gidrel relation
&#34;Note that it has no properties
DEFINE GEOG_GIDREL RELATION GID_DIMENSION &lt;GEOG GEOG_HIERLIST&gt;
&#34;Populate the gidrel relation using the GROUPINGID command 
GROUPINGID geog_parentrel INTO geog_gidrel USING geog_levelrel INHIERARCHY geog_inhier
&#34;Display the values of the geog_gidrel relation
 
REPORT down geog w 20 geog_gidrel
 
               ---------------GEOG_GIDREL---------------
               --------------GEOG_HIERLIST--------------
GEOG              Political_Geog         Sales_Geog
-------------- -------------------- --------------------
Boston         0                    0
Springfield    0                    0
Hartford       0                    0
Mansfield      0                    0
Montreal       0                    0
Walla Walla    0                    0
Portland       0                    0
Oakland        0                    0
San Diego      0                    0
MA             1                    1
CT             1                    1
WA             1                    1
CA             1                    1
Quebec         1                    1
East           NA                   3
West           NA                   3
All Regions    NA                   7
USA            3                    NA
Canada         3                    NA
All Country    7                    NA
 
&#34;Display the complete definition of the geog_gidrel relation
&#34;Note that it now has a $GID_DEPTH property
DEFINE GEOG_GIDREL RELATION GID_DIMENSION &lt;GEOG GEOG_HIERLIST&gt;
PROPERTY &#39;$GID_DEPTH&#39; 4
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHFFFI"></a>
<div id="OLADM127" class="sect1">
<h2 class="sect1">OLAP DML Statements Apply to All of the Values of a Data Object</h2>
<p>The OLAP DML is a multidimensional language. Consequently, operations in the OLAP DML apply all at once to an entire set of values. Again, conceptually, you can think of these operations as applying to the values in all of the cells in a variable; or, physically, you can think of these operations as applying to all of the elements in the array that is the variable. Consequently, if you use the OLAP DML assignment statement (that is, <a href="dml_commands_2.htm#CIHCEHEH">SET</a> or =), then you do not need to code explicit loops to assign values to all of the elements in a variable. Instead, when you issue a statement against an object that has one or more dimensions, the statement loops over the values in status for each dimension of the object and performs the requested operation.</p>
<p>Assume, for example, that there is a dimension named <code dir="ltr">prodid</code> that has three values, <code dir="ltr">Prod01</code>, <code dir="ltr">Prod02</code>, and <code dir="ltr">Prod03</code>, and you have a variable named <code dir="ltr">quantity</code> that is dimensioned by prodid. As the following code snippet illustrates, if <code dir="ltr">Prod01</code>, <code dir="ltr">Prod02</code>, and <code dir="ltr">Prod03</code> are all in status, when you assign the value <code dir="ltr">3</code> to quantity, Oracle OLAP assigns the value <code dir="ltr">3</code> to <span class="italic">all</span> of the elements in quantity.</p>
<pre dir="ltr">quantity = 3
REPORT quantity
 
PRODID          QUANTITY
-------------- ----------
PROD01             3.00
PROD02             3.00
PROD03             3.00
 
</pre>
<p>Other OLAP DML statements (for example, REPORT, ROW, and FOR) also loop through all of the in status elements of a dimensioned object when they execute.</p>
<div id="OLADM128" class="sect2"><a id="sthref13"></a>
<h3 class="sect2">Changing the Default Looping Behavior of Statements</h3>
<p>By default, statements loop through the values of a dimensioned object using the order in which the dimensions of the object are listed in the definition of the object. Also, when a variable is dimensioned by a composite, most looping statements loop through the variable as though it was not dimensioned by a composite, but was, instead, dimensioned by the base dimensions of the composite.</p>
<p>The OLAP DML provides ways for you to change the default looping behavior or to explicitly request looping:</p>
<ul>
<li>
<p><span class="bold">ACROSS phrase</span>&mdash;Some looping command (such as assignment statements that you use to assign values) have an ACROSS phrase that you can use to specify non-default looping behavior. For detailed documentation of the ACROSS phrase, see the <a href="dml_commands_2.htm#CIHCEHEH">SET</a> (=) command.</p>
</li>
<li>
<p><span class="bold">ACROSS command</span>&mdash;When an OLAP DML statement is not a looping statement or does not include an ACROSS phrase, you can request looping behavior by coding the DML statement as an argument of the <a href="dml_commands_1.htm#i78720">ACROSS</a> command.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABICBHE"></a>
<div id="OLADM129" class="sect1">
<h2 class="sect1">How to Specify the Set of Data that OLAP DML Operations Work Against</h2>
<p><a id="sthref14"></a>For each defined dimension, Oracle OLAP uses lists called <span class="bold">status lists</span> to keep track of the dimension values that are accessible to the user.</p>
<div id="OLADM130" class="sect2"><a id="sthref15"></a>
<h3 class="sect2">About Status Lists</h3>
<p>Oracle OLAP uses two kinds of status lists: default status lists and current status lists. The values in the current status lists of the dimensions in an analytic workspace determine the set of data that is available to the OLAP DML at any given moment in time.</p>
<div id="OLADM131" class="sect3"><a id="sthref16"></a>
<h4 class="sect3">Default Status Lists</h4>
<p><a id="sthref17"></a>The <span class="bold">default status list</span> of a dimension is the list of all of the values of the dimension that have read permission, in the order in which the values are stored, when you first attach an analytic workspace. You can change the default status list of a dimension in the following ways:</p>
<ul>
<li>
<p>You can add, delete, move, merge, and rename values in a dimension by using the MAINTAIN command or adding dimension values in other ways (for example, using a SQL FETCH statement).</p>
</li>
<li>
<p>You can change the read permission of values that are associated with a dimension by using a PERMIT or PERMITRESET statement.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="OLADM132" class="sect3"><a id="sthref18"></a>
<h4 class="sect3">Current Status Lists</h4>
<p><a id="sthref19"></a>The <span class="bold">current status list</span> of a dimension is an ordered list of currently accessible values for the dimension. Values that are in the current status list of a dimension are said to be &#34;in status.&#34; When you first attach an analytic workspace, the default and current status lists of each dimension are the same.</p>
<p>The current status list of a dimension determines the accessibility of the data in the analytic workspace:</p>
<ul>
<li>
<p>For dimensions, only those dimension values that are in the current status list are visible and accessible to OLAP DML expressions.</p>
</li>
<li>
<p>For dimensioned objects like variables, only those data values that are indexed by dimension values in the current status list are visible and accessible to OLAP DML expressions. As a loop is performed through a dimensioned object, the order of the dimension values in the current status list is used to determine the order in which the values of the object are accessed.</p>
</li>
</ul>
<p>Note that a dimension and any surrogate for that dimension share the same status. Setting the status of a dimension surrogate sets the status of its dimension and setting the status of a dimension sets the status of any dimension surrogates for it. Throughout this documentation, references to dimensions apply equally to dimension surrogates, except where noted. Additionally, composites are not dimensions, and therefore they do not have any independent status. The values of a composite that are in status are determined by the status of the base dimensions of the composite.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Whether or not a dimension value is in status merely restricts the OLAP DML&#39;s view of the value during a given session; it does not permanently affect the values that are stored in the analytic workspace.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="OLADM133" class="sect2"><a id="sthref20"></a>
<h3 class="sect2">Changing the Current Status of a Dimension to Work with a Subset of Data</h3>
<p>Because the current status list of a dimension determines the accessibility of the data in the analytic workspace, the way to work with a subset of analytic workspace data is to change the current status lists of one or more dimensions.</p>
<p>You change the values and the order of the values in the current status list of a dimension using the <a href="dml_commands_2.htm#i78802">LIMIT command</a>. The LIMIT command is a very complex OLAP DML command that lets you specify what values you want in the current status list by specifying the values explicitly or implicitly using relations. At it simplest level, <a href="dml_commands_2.htm#CCHFGAHI">Example 10-20, &#34;Using LIMIT to Partially Populate Variables&#34;</a> illustrates how you can use the LIMIT command to change the current status list of a dimension so you can work with a subset of data.</p>
</div>
<!-- class="sect2" -->
<a id="BABECJAB"></a>
<div id="OLADM134" class="sect2">
<h3 class="sect2">Saving and Restoring Current Dimension Status</h3>
<p>There are several different ways that you can save the current status of a dimension. The scope of each way is different:</p>
<ul>
<li>
<p><span class="bold">Any session</span>&mdash;To save the current status for use in any session, create a named valueset with that status. Use a DEFINE VALUESET command to define the valueset. Use a LIMIT command to assign the values to the valueset.</p>
</li>
<li>
<p><span class="bold">Current session</span>&mdash;To save, access, or update the current status for use in the current session, use a named context. Use the CONTEXT command to define the context.</p>
</li>
<li>
<p><span class="bold">Current program</span>&mdash;To save the current status for use in the current program, then use the PUSHLEVEL and PUSH commands. You can restore the current status values using the POPLEVEL and POP commands.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABEEHBJ"></a>
<div id="OLADM135" class="sect2">
<h3 class="sect2">Using a Subset of Data Without Changing Status</h3>
<p>Sometimes you want to have an individual OLAP DML statement or expression work against a subset of data without actually changing the current status list of a dimension. To support this need, some OLAP DML statements allow you to specify the name of a previously-defined valueset object instead of the name of a dimension. Additionally, on-the-fly, you can specify a data subset without changing the current status list of dimensions using one of the following:</p>
<ul>
<li>
<p>The <a href="dml_functions_1.htm#BABEJJEA">CHGDIMS</a> function which, during the evaluation of expression, changes the dimensionality of an expression or changes the dimension status.</p>
</li>
<li>
<p>The <a href="dml_functions_2.htm#i78807">LIMIT function</a> which, during the evaluation of expression, returns the dimension or dimension surrogate values that result from a specified LIMIT command or a specified dimension status stack.</p>
</li>
<li>
<p>Use a qualified data reference (QDR) which is a way of limiting one or more dimensions of an expression to a single value when you want to specify a single value of a data object without changing the current status.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABICJGF"></a>
<div id="OLADM136" class="sect1">
<h2 class="sect1">Populating Multidimensional Hierarchical Data Objects</h2>
<p>Frequently you first populate the base values of your variables from relational tables or from flat files. You then calculate other values from these base values using OLAP DML calculation objects. For example, you might define aggregation objects to aggregate the values that are higher up the hierarchy.</p>
<p>You can also assign values to variables, relations, and dimension surrogates using assignment statements (see <a href="dml_commands_2.htm#CIHCEHEH">SET</a> and <a href="dml_commands_2.htm#CIHBHFFD">SET1</a>) and add values to dimensions using <a href="dml_commands_2.htm#i1017721">MAINTAIN</a> statements.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
<a href="dml_objects.htm#BABDBIGI">Chapter 3, &#34;Formulas, Models, Aggregations, and Allocations&#34;</a></div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3608">
<tr>
<td class="cellalignment3617">
<table class="cellalignment3613">
<tr>
<td class="cellalignment3612"><a href="changes.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3612"><a href="dml_expression.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3620">
<table class="cellalignment3611">
<tr>
<td class="cellalignment3612"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3612"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3612"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3612"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3612"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3612"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>