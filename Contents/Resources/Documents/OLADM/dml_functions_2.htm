<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-79280"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/OLAP%20DML%20Functions%3A%20L%20-%20Z"></a><title>OLAP DML Functions: L - Z</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1079"/>
<meta name="dcterms.created" content="2016-04-19T12:43:32Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP DML Reference"/>
<meta name="dcterms.identifier" content="E17673-12"/>
<meta name="dcterms.isVersionOf" content="OLADM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="dml_functions_1.htm" title="Previous" type="text/html"/>
<link rel="Next" href="dml_commands_1.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17673-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/19</span> <!-- End Header -->
<div id="OLADM576" class="chapter"><a id="CHDBBGJA"></a>
<h1 class="chapter"><span class="secnum">8</span> OLAP DML Functions: L - Z</h1>
<p>This chapter provides reference topics for the second set (in alphabetical order) of the OLAP DML functions. There is one topic for each of the OLAP DML functions that begins with the letters L-Z, beginning with <a href="#i79601">LAG</a>.</p>
<p>Alphabetical and categorical listings of the OLAP DML functions and reference topics for the remaining OLAP DML functions appear in <a href="dml_functions_1.htm#CJAGEFHJ">Chapter 7, &#34;OLAP DML Functions: A - K&#34;</a>.</p>
<p>For other OLAP DML reference topics, see <a href="dml_properties.htm#BABIGDDG">Chapter 4, &#34;OLAP DML Properties&#34;</a>, <a href="dml_options.htm#CHDFCICB">Chapter 5, &#34;OLAP DML Options&#34;</a>, <a href="dml_commands_1.htm#BGEEAEAB">Chapter 9, &#34;OLAP DML Commands: A-G&#34;</a>, and <a href="dml_commands_2.htm#CCHCECAG">Chapter 10, &#34;OLAP DML Commands: H-Z&#34;</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Many OLAP DML statements can be coded as a 3-character abbreviation that consists of the first letter of the statement plus the next two consonants.</div>
<div class="refentry"><a id="i79601"></a>
<div id="OLADM577" class="refsect1">
<h2 class="refsect1">LAG</h2>
<p><a id="sthref2281"></a><a id="sthref2282"></a><a id="sthref2283"></a>The LAG function returns the values of a dimensioned variable or expression at a specified offset of a dimension before the current value of that dimension. Typically, you use the LAG function to retrieve values for a previous time period.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2284"></a>Return Value</p>
<p>The data type of the <span class="italic">variable</span> argument or <code dir="ltr">NA</code> when you try to lag before the first period of a time dimension.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2285"></a>Syntax</p>
<p class="synopsis">LAG(<span class="italic">variable</span>&nbsp;<span class="italic">n</span>,&nbsp;<span class="italic">dimension</span>,&nbsp;[STATUS|<span class="underline">NOSTATUS</span>|<span class="italic">limit-clause</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2286"></a>Parameters</p>
<dl>
<dt><span class="italic">variable</span></dt>
<dd>
<p>A variable or expression that is dimensioned by <span class="italic">dimension.</span></p>
</dd>
<dt><span class="italic">n</span></dt>
<dd>
<p>The offset (that is, the number of dimension values) to lag. LAG uses this value to determine the number of values that LAG should go back in dimension to retrieve the value of variable.</p>
<p>Typically, <span class="italic">n</span> is a positive <code dir="ltr">INTEGER</code> that indicates the number of time periods (or dimension values) before the current one. When you specify a negative value for <span class="italic">n</span>, it indicates the number of time periods <span class="italic">after</span> the current o&nbsp;ne. In other words, using a negative value for <span class="italic">n</span> turns LAG into a LEAD function.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When using LAG in a model, see <a href="dml_objects.htm#CACGJAAJ">&#34;Ensuring One-Way Dimensional Dependence&#34;</a> for information on how to code a value for <code dir="ltr"><span class="codeinlineitalic">n</span></code> so that Oracle OLAP does not use simultaneous blocks when solving the model.</div>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The dimension along which the lag occurs. While this can be any dimension, it is typically a hierarchical time dimension of type TEXT that is limited to a single level (for example, the month or year level) or a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR.</p>
<p>When <span class="italic">variable</span> has a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR and you want LAG to use that dimension, you can omit the <span class="italic">dimension</span> argument.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Specifies that LAG should use the current status list (that is, only the dimension values currently in status in their current status order) when computing the lag.</p>
</dd>
<dt>NOSTATUS</dt>
<dd>
<p>(Default) Specifies that LAG should use the default status (that is, a list all the dimension values in their original order) when computing the lag.</p>
</dd>
<dt><span class="italic">limit-clause</span></dt>
<dd>
<p>Specifies that LAG should use the default status limited by <span class="italic">limit-clause</span> when computing the lag.</p>
<p>The syntax of <span class="italic">limit-clause</span> is the same syntax as any of the <span class="italic">limit-clause</span> arguments in the various forms of the LIMIT command (that is, the syntax of the LIMIT command after the <span class="italic">limit-type</span> argument such as &#34;TO&#34;). For the syntax of these arguments, see <a href="dml_commands_2.htm#i1019733">LIMIT (using values) command</a>, <a href="dml_commands_2.htm#i1019738">LIMIT using LEVELREL command</a>, <a href="dml_commands_2.htm#i1019742">LIMIT (using parent relation)</a>, <a href="dml_commands_2.htm#i1019747">LIMIT (using related dimension) command</a>, <a href="dml_commands_2.htm#i1019753">LIMIT NOCONVERT command</a>, and <a href="dml_commands_2.htm#i1019757">LIMIT command (using POSLIST)</a>.</p>
<p>To specify that LAG should use the current status limited by <span class="italic">limit-clause</span> when computing the lag, specify a LIMIT function for <span class="italic">limit-clause.</span></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2287"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1732"></a>Assigning Results to a Time-Series Variable</p>
<p>Use care when assigning the results of LAG back into the time-series variable. Results are assigned one cell at a time, so you can overwrite the whole array with the first value returned, instead of moving all the values over <span class="italic">n</span> positions. You can, however, use LAG to calculate a series of values based on the initial value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2288"></a>Examples</p>
<div id="OLADM1733" class="example">
<p class="titleinexample"><a id="sthref2289"></a>Example 8-1 Using LAG</p>
<p>Assume that you have the following definitions in your analytic workspace.</p>
<pre dir="ltr">DEFINE time DIMENSION TEXT
DEFINE timelevels DIMENSION TEXT
DEFINE timelevelrel RELATION timelevels &lt;time&gt;
DEFINE product DIMENSION TEXT
DEFINE district DIMENSION TEXT
DEFINE sales VARIABLE DECIMAL &lt;time product district&gt;
 
</pre>
<p>Assume also that those object have the values shown in the following reports.</p>
<pre dir="ltr">REPORT timelevelrel
 
TIME           TIMELEVELREL
-------------- ----------
AllYears       AllYears
2004           Years
2005           Years
2006           Years
Jan2005        Months
Feb2005        Months
Mar2005        Months
Apr2005        Months
...            ...
Oct2006        Months
Nov2006        Months
Dec2006        Months
 
</pre>
<pre dir="ltr">REPORT product
 
PRODUCT
--------------
TVs
DVDs
Computers
 
REPORT district
 
DISTRICT
--------------
All Districts
Mass
Conn
Boston
Springfield
Hartford
New Haven
 
</pre>
<p>Now assume that you issue the following LIMIT statements to limit product, district, and time.</p>
<pre dir="ltr">LIMIT product TO &#39;TVs&#39;
LIMIT district TO &#39;Hartford&#39;
LIMIT time TO &#39;Jan2006&#39; &#39;Feb2006&#39; &#39;Mar2006&#39; &#39;Apr2006&#39; &#39;May2006&#39; &#39;Jun2006&#39; &#39;Jul2006&#39; &#39;Aug2006&#39; &#39;Sep2006&#39; &#39;Oct2006&#39; &#39;Nov2006&#39; &#39;Dec2006&#39;
 
</pre>
<p>You can issue a REPORT statement with LAG to show the value of sales for months in both 2006 and for 2005.</p>
<pre dir="ltr">REPORT DOWN time HEADING &#39;Sales 2006&#39; sales HEADING &#39;Sales 2005&#39; LAG(sales, 12, time, RELATION timelevelrel) 
</pre>
<pre dir="ltr"> 
DISTRICT: Hartford
               -------PRODUCT-------
               ---------TVs---------
TIME           Sales 2006 Sales 2005
-------------- ---------- ----------
Jan2006          1,542.91   1,627.51
Feb2006          1,786.07   1,100.13
Mar2006          1,794.43   1,667.61
Apr2006          1,942.92   1,346.66
May2006          1,530.08   1,509.51
Jun2006          1,613.60   1,242.47
Jul2006          1,666.35   1,307.17
Aug2006          1,413.79   1,033.93
Sep2006          1,526.98   1,773.96
Oct2006          1,112.85   1,103.78
Nov2006          1,193.41   1,132.39
Dec2006          1,851.19   1,543.62
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1002503"></a>
<div id="OLADM578" class="refsect1">
<h2 class="refsect1">LAGABSPCT</h2>
<p><a id="sthref2290"></a><a id="sthref2291"></a>The LAGABSPCT function returns the percentage difference between the value of a dimensioned variable or expression at a specified offset of a dimension before the current value of that dimension and the current value of the dimensioned variable or expression.</p>
<p>Unlike the LAGPCT function, which always uses the sign of the previous period value in calculating the result, LAGABSPCT uses the absolute value of the previous period value and therefore provides the direction of the percentage difference.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i83656">&#34;Using LAGDIF and LAGABSPCT&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2292"></a>Return Value</p>
<p>DECIMAL value that corresponds to a percent difference or <code dir="ltr">NA</code> when you try to lag before the first period of a time dimension.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2293"></a>Syntax</p>
<p class="synopsis">LAGABSPCT(<span class="italic">variable</span>,&nbsp;<span class="italic">n</span>,&nbsp;<span class="italic">dimension</span>,&nbsp;[STATUS|<span class="underline">NOSTATUS</span>|<span class="italic">limit-clause</span>]&nbsp;)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2294"></a>Parameters</p>
<dl>
<dt><span class="italic">time-series</span></dt>
<dd>
<p>A variable or expression that is dimensioned by <span class="italic">dimension.</span></p>
</dd>
<dt><span class="italic">n</span></dt>
<dd>
<p>The offset (that is, the number of dimension values) to lag. LAGABSPCT uses this value to determine the number of values that LAGABSPCT should go back in dimension to retrieve the value of variable.</p>
<p>Typically, <span class="italic">n</span> is a positive <code dir="ltr">INTEGER</code> that indicates the number of time periods (or dimension values) before the current one. When you specify a negative value for <span class="italic">n</span>, it indicates the number of time periods after the current one. In this case, LAGABSPCT compares the current value of the time series with a subsequent value.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The dimension along which the lag occurs. While this can be any dimension, it is typically a hierarchical time dimension of type TEXT that is limited to a single level (for example, the month or year level) or a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR.</p>
<p>When <span class="italic">variable</span> has a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR and you want LAGABSPCT to use that dimension, you can omit the <span class="italic">dimension</span> argument.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Specifies that LAGABSPCT should use the current status list (that is, only the dimension values currently in status in their current status order) when computing the lag.</p>
</dd>
<dt>NOSTATUS</dt>
<dd>
<p>(Default) Specifies that LAGABSPCT should use the default status (that is, a list all the dimension values in their original order) when computing the lag.</p>
</dd>
<dt><span class="italic">limit-clause</span></dt>
<dd>
<p>Specifies that LAGABSPCT should use the default status limited by <span class="italic">limit-clause</span> when computing the lag.</p>
<p>The syntax of <span class="italic">limit-clause</span> is the same syntax as any of the <span class="italic">limit-clause</span> arguments in the various forms of the LIMIT command (that is, the syntax of the LIMIT command after the <span class="italic">limit-type</span> argument such as &#34;TO&#34;). For the syntax of these arguments, see <a href="dml_commands_2.htm#i1019733">LIMIT (using values) command</a>, <a href="dml_commands_2.htm#i1019738">LIMIT using LEVELREL command</a>, <a href="dml_commands_2.htm#i1019742">LIMIT (using parent relation)</a>, <a href="dml_commands_2.htm#i1019747">LIMIT (using related dimension) command</a>, <a href="dml_commands_2.htm#i1019753">LIMIT NOCONVERT command</a>, and <a href="dml_commands_2.htm#i1019757">LIMIT command (using POSLIST)</a>.</p>
<p>To specify that LAG should use the current status limited by <span class="italic">limit-clause</span> when computing the lag, specify a LIMIT function for <span class="italic">limit-clause.</span></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2295"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1734"></a>Formula Used by LAGABSPCT</p>
<p>To obtain its results, LAGABSPCT uses the following formula.</p>
<pre dir="ltr">(<span class="italic">currentvalue</span> - <span class="italic">previousvalue</span>) / ABS(<span class="italic">previousvalue</span>)
</pre>
<pre dir="ltr"></pre>
<p class="subhead2"><a id="OLADM1735"></a>When the Previous Value of the Time Series Used by LAGABSPCT is Zero</p>
<p>When the previous value of the time series used by LAGABSPCT is zero, the result LAGABSPCT returns is determined by the DIVIDEBYZERO option. When DIVIDEBYZERO is set to <code dir="ltr">NO</code>, an error occurs. When DIVIDEBYZERO is set to <code dir="ltr">YES</code>, LAGABSPCT returns <code dir="ltr">NA</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2296"></a>Examples</p>
<div id="OLADM1736" class="example">
<p class="titleinexample"><a id="CHDDGFDJ"></a><a id="i83656"></a>Example 8-2 Using LAGDIF and LAGABSPCT</p>
<p>Suppose you have a variable called <code dir="ltr">sales</code> that is dimensioned by a hierarchical dimension named <code dir="ltr">time</code>, and dimensions called <code dir="ltr">district</code> and <code dir="ltr">products</code>. Assume also that there is a dimension named <code dir="ltr">timelevels</code> that contains the names of the levels of the <code dir="ltr">time</code> dimension (that is, <code dir="ltr">Month</code> and <code dir="ltr">Year</code>) and a relation named <code dir="ltr">timelevelrel</code> that is dimensioned by <code dir="ltr">time</code> and that has values from <code dir="ltr">timelevels</code> (that is, the related dimension of <code dir="ltr">timelevelrel</code> is <code dir="ltr">timelevels</code>).</p>
<p>You want to compare sales for racquets in Dallas for the January, 2000 and the previous year. You can use the LAG function to display sales from the previous years. You can use the LAGABSPCT function to calculate the percentage difference between the two months and indicate the direction of the change. For example, when sales increase, the percentage difference LAGABSPCT returns is positive. When sales decrease, the percentage difference LAGABSPCT returns is negative.</p>
<p>You can also use the LAGPCT function to calculate the percentage difference between two years. You can multiply the values returned by LAGABSPCT by 100 to display them as percentage points.</p>
<p>The following statements</p>
<pre dir="ltr">ALLSTAT
LIMIT product TO &#39;Racquets&#39;
LIMIT district TO &#39;Dallas&#39;
LIMIT time TO &#39;Jan2000&#39;
REPORT DOWN time sales -
HEADING &#39;Last Jan&#39; LAG(sales, 12, time, time LEVELREL timelevelrel)-
HEADING &#39;Lagdif&#39; LAGDIF(sales, 12, time, time LEVELREL timelevelrel)-
HEADING &#39;Lagabspct&#39; rset &#39;%&#39; d 0 LAGABSPCT(sales, 12, time, -
                    time LEVELREL timelevelrel) * 100
</pre>
<p>produce this report.</p>
<pre dir="ltr">DISTRICT: Dallas
               ------------------PRODUCT------------------
               -----------------Racquets------------------
TIME           SALES      Last Jan   Lagdif     Lagabspct
-------------- ---------- ---------- ---------- ----------
Jan2000        125,879.86 118,686.75 7,193.11   6% 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79611"></a>
<div id="OLADM579" class="refsect1">
<h2 class="refsect1">LAGDIF</h2>
<p><a id="sthref2297"></a><a id="sthref2298"></a>The LAGDIF function returns the difference between the value of a dimensioned variable or expression at a specified offset of a dimension before the current value of that dimension and the current value of the dimensioned variable or expression.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i83656">&#34;Using LAGDIF and LAGABSPCT&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2299"></a>Return Value</p>
<p>DECIMAL or <code dir="ltr">NA</code> when you try to lag before the first period of a time dimension.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2300"></a>Syntax</p>
<p class="synopsis">LAGDIF(<span class="italic">variable</span>,&nbsp;<span class="italic">n</span>,&nbsp;<span class="italic">dimension</span>,&nbsp;[STATUS|NOSTATUS|<span class="italic">limit-clause</span>]&nbsp;)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2301"></a>Parameters</p>
<dl>
<dt><span class="italic">variable</span></dt>
<dd>
<p>A variable or expression that is dimensioned by <span class="italic">dimension.</span></p>
</dd>
<dt><span class="italic">n</span></dt>
<dd>
<p>The offset (that is, the number of dimension values) to lag. LAGDIF uses this value to determine the number of values that LAGDIF should go back in dimension to retrieve the value of variable. Typically, <span class="italic">n</span> is a positive <code dir="ltr">INTEGER</code> that indicates the number of time periods (or dimension values) before the current one. When you specify a negative value for <span class="italic">n</span>, it indicates the number of time periods after the current one. In this case, LAGDIF compares the current value of the time series with a subsequent value.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The dimension along which the lag occurs. While this can be any dimension, it is typically a hierarchical time dimension of type TEXT that is limited to a single level (for example, the month or year level) or a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR.</p>
<p>When variable has a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR and you want LAGDIF to use that dimension, you can omit the dimension argument.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Specifies that LAGDIF should use the current status list (that is, only the dimension values currently in status in their current status order) when computing the lag.</p>
</dd>
<dt>NOSTATUS</dt>
<dd>
<p>(Default) Specifies that LAGDIF should use the default status (that is, a list all the dimension values in their original order) when computing the lag.</p>
</dd>
<dt><span class="italic">limit-clause</span></dt>
<dd>
<p>Specifies that LAGDIF should use the default status limited by <span class="italic">limit-clause</span> when computing the lag.</p>
<p>The syntax of <span class="italic">limit-clause</span> is the same syntax as any of the <span class="italic">limit-clause</span> arguments in the various forms of the LIMIT command (that is, the syntax of the LIMIT command after the <span class="italic">limit-type</span> argument such as &#34;TO&#34;). For the syntax of these arguments, see <a href="dml_commands_2.htm#i1019733">LIMIT (using values) command</a>, <a href="dml_commands_2.htm#i1019738">LIMIT using LEVELREL command</a>, <a href="dml_commands_2.htm#i1019742">LIMIT (using parent relation)</a>, <a href="dml_commands_2.htm#i1019747">LIMIT (using related dimension) command</a>, <a href="dml_commands_2.htm#i1019753">LIMIT NOCONVERT command</a>, and <a href="dml_commands_2.htm#i1019757">LIMIT command (using POSLIST)</a>.</p>
<p>To specify that LAG should use the current status limited by <span class="italic">limit-clause</span> when computing the lag, specify a LIMIT function for <span class="italic">limit-clause.</span></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2302"></a>Examples</p>
<p>For an example of using LAGDIF, see <a href="#CHDDGFDJ">Example 8-2, &#34;Using LAGDIF and LAGABSPCT&#34;</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79616"></a>
<div id="OLADM580" class="refsect1">
<h2 class="refsect1">LAGPCT</h2>
<p><a id="sthref2303"></a><a id="sthref2304"></a>The LAGPCT function returns the percentage difference between the value of a dimensioned variable or expression at a specified offset of a dimension before the current value of that dimension and the current value of the dimensioned variable or expression.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i83698">&#34;Using LAGPCT&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2305"></a>Return Value</p>
<p>DECIMAL or <code dir="ltr">NA</code> when you try to lag before the first period of a dimension of a time dimension.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2306"></a>Syntax</p>
<p class="synopsis">LAGPCT(<span class="italic">variable</span>,&nbsp;<span class="italic">n</span>,&nbsp;[<span class="italic">dimension</span>],&nbsp;[STATUS|<span class="underline">NOSTATUS</span>|<span class="italic">limit-clause</span>]&nbsp;)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2307"></a>Parameters</p>
<dl>
<dt><span class="italic">variable</span></dt>
<dd>
<p>A variable or expression that is dimensioned by <span class="italic">dimension.</span></p>
</dd>
<dt><span class="italic">n</span></dt>
<dd>
<p>The offset (that is, the number of dimension values) to lag. LAGPCT uses this value to determine the number of values that LAGPCT should go back in dimension to retrieve the value of variable. Typically, <span class="italic">n</span> is a positive <code dir="ltr">INTEGER</code> that indicates the number of time periods (or dimension values) before the current one. When you specify a negative value for <span class="italic">n</span>, it indicates the number of time periods after the current one. In this case, LAGPCT compares the current value of the time series with a subsequent value.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The dimension along which the lag occurs. While this can be any dimension, it is typically a hierarchical time dimension of type TEXT that is limited to a single level (for example, the month or year level) or a dimension with a type of DAY, WEEK, MONTH, QUARTER or YEAR.</p>
<p>When <span class="italic">variable</span> has a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR and you want LAGPCT to use that dimension, you can omit the dimension argument.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Specifies that LAGPCT should use the current status list (that is, only the dimension values currently in status in their current status order) when computing the lag.</p>
</dd>
<dt>NOSTATUS</dt>
<dd>
<p>(Default) Specifies that LAGPCT should use the default status (that is, a list all the dimension values in their original order) when computing the lag.</p>
</dd>
<dt><span class="italic">limit-clause</span></dt>
<dd>
<p>Specifies that LAGPCT should use the default status limited by <span class="italic">limit-clause</span> when computing the lag.</p>
<p>The syntax of <span class="italic">limit-clause</span> is the same syntax as any of the <span class="italic">limit-clause</span> arguments in the various forms of the LIMIT command (that is, the syntax of the LIMIT command after the <span class="italic">limit-type</span> argument such as &#34;TO&#34;). For the syntax of these arguments, see <a href="dml_commands_2.htm#i1019733">LIMIT (using values) command</a>, <a href="dml_commands_2.htm#i1019738">LIMIT using LEVELREL command</a>, <a href="dml_commands_2.htm#i1019742">LIMIT (using parent relation)</a>, <a href="dml_commands_2.htm#i1019747">LIMIT (using related dimension) command</a>, <a href="dml_commands_2.htm#i1019753">LIMIT NOCONVERT command</a>, and <a href="dml_commands_2.htm#i1019757">LIMIT command (using POSLIST)</a>.</p>
<p>To specify that LAG should use the current status limited by <span class="italic">limit-clause</span> when computing the lag, specify a LIMIT function for <span class="italic">limit-clause.</span></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2308"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1737"></a>Formula Used by LAGPCT</p>
<p>To obtain its results, LAGPCT uses the following formula.</p>
<pre dir="ltr">(<span class="italic">currentvalue</span> - <span class="italic">previousvalue</span>) / <span class="italic">previousvalue</span>
</pre>
<p class="subhead2"><a id="OLADM1738"></a>When the Previous Value of the Time Series Used by LAGPCT is Zero</p>
<p>When the previous value of the time series used by LAGPCT is zero, the result LAGPCT returns is determined by the DIVIDEBYZERO option. When DIVIDEBYZERO is set to <code dir="ltr">NO</code>, an error occurs. When DIVIDEBYZERO is set to <code dir="ltr">YES</code>, LAGPCT returns <code dir="ltr">NA</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2309"></a>Examples</p>
<div id="OLADM1739" class="example">
<p class="titleinexample"><a id="i83698"></a>Example 8-3 Using LAGPCT</p>
<p>Suppose you have a variable called <code dir="ltr">sales</code> that is dimensioned by a hierarchical dimension named <code dir="ltr">time</code>, and dimensions called <code dir="ltr">district</code> and <code dir="ltr">products</code>. Assume also that there is a dimension named <code dir="ltr">timelevels</code> that contains the names of the levels of the <code dir="ltr">time</code> dimension (that is, <code dir="ltr">Month</code> and <code dir="ltr">Year</code>) and a relation named <code dir="ltr">timelevelrel</code> that is dimensioned by <code dir="ltr">time</code> and that has values from <code dir="ltr">timelevels</code> (that is, the related dimension of <code dir="ltr">timelevelrel</code> is <code dir="ltr">timelevels</code>).</p>
<p>You can compare racquet sales in Dallas for 2000 with sales for 1999 by using the LAG function to show 199 values. You can use the LAGPCT function to calculate the percentage difference between the two. You can multiply the value LAGPCT returns by 100 and include a percent sign to display the difference as percentage points.</p>
<pre dir="ltr">ALLSTAT
LIMIT product TO &#39;Racquets&#39;
LIMIT district TO &#39;Dallas&#39;
LIMIT TIME TO &#39;2000&#39;
REPORT DOWN time sales HEADING &#39;Last Year&#39; -
LAG(sales, 1, time, time LEVELREL timelevelrel)-
HEADING &#39;LAGPCT (Decimal Format)&#39; -
LAGPCT(sales, 1, time LEVELREL timelevelrel) -
HEADING &#39;LAGPCT (Percent Format)&#39; rset &#39;%&#39; -
LAGPCT(sales, 1, time LEVELREL timelevelrel) * 100
</pre>
<p>produce this report.</p>
<pre dir="ltr">DISTRICT: Dallas
               ------------------PRODUCT------------------
               -----------------racquets------------------
                                     LAGPCT     LAGPCT
                                     (Decimal   (Percent
TIME           SALES      Last Year  Format)    Format)
-------------- ---------- ---------- ---------- ----------
2000           93,000,003 89,000,891 0.04       4.49%
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79621"></a>
<div id="OLADM581" class="refsect1">
<h2 class="refsect1">LARGEST</h2>
<p><a id="sthref2310"></a><a id="sthref2311"></a>The LARGEST function returns the largest value of an expression. You can use this function to compare numeric values or date values.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2312"></a>Return Value</p>
<p>The data type of the expression. It can be INTEGER, LONGINT, DECIMAL, or DATE.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2313"></a>Syntax</p>
<p class="synopsis">LARGEST(<span class="italic">expression&nbsp;</span>[CACHE] [<span class="italic">dimension</span>...])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2314"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The expression whose largest value is to be returned.</p>
</dd>
<dt>CACHE</dt>
<dd>
<p>Specifies slightly different internal behavior. Specify this keyword only when the original performance is extremely slow.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The name of a dimension of the result; or, the name of a relation between one dimension of <span class="italic">expression</span> and another dimension that you want as a dimension of the result.</p>
<p>By default, LARGEST returns a single value. When you indicate one or more dimensions for the result, LARGEST tests for values along the dimensions that are specified and returns an array of values. Each dimension must be either a dimension of <span class="italic">expression</span> or related to one of its dimensions.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you specify a dimension that is not an actual dimension of expression, but, instead, is dimension that is related to a dimension of expression and when there are multiple relations between the two dimensions, Oracle OLAP uses the default relation between the dimensions to perform the calculation. (See the <a href="dml_commands_2.htm#CACBJGDI">RELATION command</a> for more information on default relations.) When you do not want Oracle OLAP to use this default relation, specify the related dimension by specifying the name of a specify relation.</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2315"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1740"></a>NA Values and LARGEST</p>
<p>LARGEST is affected by the NASKIP option in the same manner as other aggregate functions. When NASKIP is set to <code dir="ltr">YES</code> (the default), LARGEST ignores <code dir="ltr">NA</code> values and returns the largest value or values that are not <code dir="ltr">NA</code>. When NASKIP is set to <code dir="ltr">NO</code>, LARGEST returns <code dir="ltr">NA</code> when any value of the expression is <code dir="ltr">NA</code>. When all the values of the expression are <code dir="ltr">NA</code>, LARGEST returns <code dir="ltr">NA</code> for either setting of NASKIP.</p>
<p class="subhead2"><a id="OLADM1741"></a>Using LARGEST With an Expression Dimensioned by a DWMQY Dimension</p>
<p>When <span class="italic">expression</span> is dimensioned by a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR, you can specify any other DAY, WEEK, MONTH, QUARTER, or YEAR dimension as a related <span class="italic">dimension.</span> Oracle OLAP uses the implicit relation between the dimensions. To control the mapping of one DAY, WEEK, MONTH, QUARTER, or YEAR dimension to another (for example, from weeks to months), you can define an explicit relation between the two dimensions and specify the name of the relation as the <span class="italic">dimension</span> argument to the LARGEST function.</p>
<p>For each time period in the related dimension, Oracle OLAP finds the largest data value in any source time period that ends in the target time period. This method is used regardless of which dimension has the more aggregate periods.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2316"></a>Examples</p>
<div id="OLADM1742" class="example">
<p class="titleinexample"><a id="sthref2317"></a>Example 8-4 Finding the Largest Monthly Sales</p>
<p>This example uses the LARGEST function to find the largest monthly sportswear sales for each district during the first half of 1996. To see the largest sales figure for each district, specify <code dir="ltr">district</code> as the dimension of the results.</p>
<pre dir="ltr">LIMIT product TO &#39;Sportswear&#39;
LIMIT month TO &#39;Jan96&#39; TO &#39;Jun96&#39;
REPORT HEADING &#39;Largest Sales&#39; LARGEST(sales district)
</pre>
<p>The preceding statements produce the following output.</p>
<pre dir="ltr">                Largest
DISTRICT         Sales
-------------- ----------
Boston          79,630.20
Atlanta        177,967.49
Chicago        112,792.78
Dallas         175,716.31
Denver          97,236.88
Seattle         60,322.88
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79626"></a>
<div id="OLADM582" class="refsect1">
<h2 class="refsect1">LAST_DAY</h2>
<p><a id="sthref2318"></a>The LAST_DAY function returns the last day of the month in which a particular date falls.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2319"></a>Return Value</p>
<p>DATETIME</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2320"></a>Syntax</p>
<p class="synopsis">LAST_DAY(<span class="italic">datetime-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2321"></a>Parameters</p>
<dl>
<dt><span class="italic">datetime-expression</span></dt>
<dd>
<p>An expression that has the DATETIME data type.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2322"></a>Examples</p>
<div id="OLADM1743" class="example">
<p class="titleinexample"><a id="sthref2323"></a>Example 8-5 Calculating Remaining Days in a Month</p>
<p>The following statement calculates how many days remain between today&#39;s date and the end of the month.</p>
<pre dir="ltr">SHOW JOINCHARS(&#39;Days left: &#39; LAST_DAY(SYSDATE) - SYSDATE)
</pre>
<p>When today&#39;s date is September 8, 2000, then this statement returns the following.</p>
<pre dir="ltr">Days left: 22
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79641"></a>
<div id="OLADM583" class="refsect1">
<h2 class="refsect1">LEAD</h2>
<p><a id="sthref2324"></a><a id="sthref2325"></a>The LEAD function returns the values of a dimensioned variable or expression at a specified offset of a dimension after the current value of that dimension. Typically, you use the LEAD function to retrieve values for a future time period.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2326"></a>Return Value</p>
<p>The data type of the <span class="italic">variable</span> argument or <code dir="ltr">NA</code> when you try to retrieve a value from beyond the last period defined for the time dimension.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2327"></a>Syntax</p>
<p class="synopsis">LEAD(<span class="italic">variable</span>,&nbsp;<span class="italic">n</span>,&nbsp;[<span class="italic">time-dimension</span>],&nbsp;[[STATUS|<span class="underline">NOSTATUS</span>|<span class="italic">limit-clause</span>]&nbsp;)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2328"></a>Parameters</p>
<dl>
<dt><span class="italic">variable</span></dt>
<dd>
<p>A variable or expression that is dimensioned by <span class="italic">dimension.</span></p>
</dd>
<dt><span class="italic">n</span></dt>
<dd>
<p>The offset (that is, the number of dimension values) to lead. LEAD uses this value to determine the number of values that LEAD should go ahead in dimension to retrieve the value of variable. To count the values, LEAD uses the default status, unless you use the STATUS keyword or the <span class="italic">limit-clause</span> argument to specify a different dimension status.</p>
<p>Normally, <span class="italic">n</span> is a positive <code dir="ltr">INTEGER</code> that indicates the number of time periods (or dimension values) after the current one. When you specify a negative value for <span class="italic">n</span>, it indicates the number of time periods before the current one. In effect, using a negative value for <span class="italic">n</span> turns LEAD into a LAG function.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When using LEAD in a model, see <a href="dml_objects.htm#CACGJAAJ">&#34;Ensuring One-Way Dimensional Dependence&#34;</a> for information on how to code a value for <code dir="ltr"><span class="codeinlineitalic">n</span></code> so that Oracle OLAP does not use simultaneous blocks when solving the model.</div>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The dimension along which the lead occurs. While this can be any dimension, it is typically a hierarchical time dimension of type TEXT that is limited to a single level (for example, the month or year level) or a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR.</p>
<p>When variable has a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR and you want LEAD to use that dimension, you can omit the <span class="italic">dimension</span> argument.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Specifies that LEAD should use the current status list (that is, only the dimension values currently in status in their current status order) when computing the lead.</p>
</dd>
<dt>NOSTATUS</dt>
<dd>
<p>Specifies that LEAD should use the default status (that is, a list all the dimension values in their original order) when computing the lead.</p>
</dd>
<dt><span class="italic">limit-clause</span></dt>
<dd>
<p>Specifies that LEAD should use the default status limited by <span class="italic">limit-clause</span> when computing the lead.</p>
<p>The syntax of <span class="italic">limit-clause</span> is the same syntax as any of the <span class="italic">limit-clause</span> arguments in the various forms of the LIMIT command (that is, the syntax of the LIMIT command after the <span class="italic">limit-type</span> argument such as &#34;TO&#34;). For the syntax of these arguments, see <a href="dml_commands_2.htm#i1019733">LIMIT (using values) command</a>, <a href="dml_commands_2.htm#i1019738">LIMIT using LEVELREL command</a>, <a href="dml_commands_2.htm#i1019742">LIMIT (using parent relation)</a>, <a href="dml_commands_2.htm#i1019747">LIMIT (using related dimension) command</a>, <a href="dml_commands_2.htm#i1019753">LIMIT NOCONVERT command</a>, and <a href="dml_commands_2.htm#i1019757">LIMIT command (using POSLIST)</a>.</p>
<p>To specify that LAG should use the current status limited by <span class="italic">limit-clause</span> when computing the lag, specify a LIMIT function for <span class="italic">limit-clause.</span></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2329"></a>Examples</p>
<div id="OLADM1744" class="example">
<p class="titleinexample"><a id="sthref2330"></a>Example 8-6 Using LEAD</p>
<p>Assume that you have a <code dir="ltr">sales</code> variable that is dimensioned by three dimensions of the TEXT type (named <code dir="ltr">product</code>, <code dir="ltr">district</code>, and <code dir="ltr">time</code>). The <code dir="ltr">time</code> dimension is a hierarchical dimension with the following values.</p>
<pre dir="ltr">1999
2000
Jan1999
Feb1999
...
Dec1999
Jan2000
Feb2000
...
Dec2000
</pre>
<p>Also, assume that there is a dimension named <code dir="ltr">timelevels</code> that contains the names of the levels of the <code dir="ltr">time</code> dimension (that is, <code dir="ltr">Month</code> and <code dir="ltr">Year</code>) and a relation named <code dir="ltr">timelevelrel</code> that is dimensioned by <code dir="ltr">time</code> and that has values from <code dir="ltr">timelevels</code> (that is, the related dimension of <code dir="ltr">timelevelrel</code> is <code dir="ltr">timelevels</code>). A report of <code dir="ltr">timelevelrel</code> shows these relationships.</p>
<pre dir="ltr">TIME           TIMELEVELREL
-------------- ------------
1999           Year
2000           Year
Jan1999        Month
Feb1999        Month
...            ...
Dec1999        Month
Jan2000        Month
Feb2000        Month
...            ...
Dec2000        Month
</pre>
<p>Suppose you want to compare racquet sales in Dallas for the first two months of 1999 with sales for the corresponding months of 2000. You can use the LEAD function to produce the values from 2000 in the same report with the 1999 values. The following statements</p>
<pre dir="ltr">LIMIT product TO &#39;Racquets&#39;
LIMIT district TO &#39;Dallas&#39;
LIMIT time TO &#39;JAN1999&#39; &#39;FEB1999&#39;
REPORT DOWN time sales HEADING &#39;Following Year&#39; LEAD(sales, 12, time, time LEVELREL timelevelrel)
</pre>
<p>produce this report.</p>
<pre dir="ltr">DISTRICT: DALLAS
               -------PRODUCT-------
               ------RACQUETS-------
TIME           SALES      Following Year
-------------- ---------- ---------------------
Jan2000        118,686.75 125,879.86
Feb2000        142,305.99 150,833.64
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1006187"></a>
<div id="OLADM584" class="refsect1">
<h2 class="refsect1">LEAST</h2>
<p><a id="sthref2331"></a><a id="sthref2332"></a>The LEAST function returns the smallest expression in a list of expressions. All expressions after the first are implicitly converted to the data type of the first expression before the comparison.</p>
<p>To retrieve the largest expression in a list of expressions, use <a href="dml_functions_1.htm#i1005351">GREATEST</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2333"></a>Return Value</p>
<p>The data type of the first expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2334"></a>Syntax</p>
<p class="synopsis">LEAST (<span class="italic">expr</span> [, <span class="italic">expr]</span>...)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2335"></a>Parameters</p>
<dl>
<dt><span class="italic">expr</span></dt>
<dd>
<p>An expression.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2336"></a>Examples</p>
<div id="OLADM1745" class="example">
<p class="titleinexample"><a id="sthref2337"></a>Example 8-7 Finding the Text Expression that is First Alphabetically</p>
<p>The following statement returns the string that is first in alphabetic sequence.</p>
<pre dir="ltr">SHOW LEAST(&#39;Harry&#39;,&#39;Harriot&#39;,&#39;Harold&#39;)
Harold 
</pre></div>
<!-- class="example" -->
<div id="OLADM1746" class="example">
<p class="titleinexample"><a id="sthref2338"></a>Example 8-8 Finding the Smallest Numerical Expressions</p>
<p>The following statement selects the number with the smallest value.</p>
<pre dir="ltr">SHOW LEAST (5, 3, 18)
3
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDEDDC"></a>
<div id="OLADM585" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">LENGTH functions</h2>
<p>The LENGTH<a id="sthref2339"></a><a id="sthref2340"></a><a id="sthref2341"></a><a id="sthref2342"></a><a id="sthref2343"></a><a id="sthref2344"></a> functions return the length of a text expression including trailing blanks. LENGTH calculates length using characters as defined by the input character set. LENGTHB uses bytes instead of characters. LENGTHC uses Unicode complete characters.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2345"></a>Return Value</p>
<p>NUMBER or NA if the expression is an empty string or NA</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2346"></a>Syntax</p>
<p class="synopsis">{ LENGTH | LENGTHB | LENGTHC}(<span class="italic">char</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2347"></a>Parameters</p>
<dl>
<dt><span class="italic">char</span></dt>
<dd>
<p>A text expression.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78807"></a>
<div id="OLADM586" class="refsect1">
<h2 class="refsect1">LIMIT function</h2>
<p><a id="sthref2348"></a><a id="sthref2349"></a><a id="sthref2350"></a>The LIMIT function returns the dimension or dimension surrogate values that result from a specified LIMIT command or a specified dimension status stack. A dimension and any surrogate for that dimension share the same status. The LIMIT function does not change the status of a dimension or a valueset.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also::</p>
<a href="dml_commands_2.htm#i78802">LIMIT command</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2351"></a>Return Value</p>
<p>The return value varies depending on the use of the function and whether or not you specify the INTEGER keyword:</p>
<ul>
<li>
<p>When the LIMIT function is an argument to an OLAP DML statement (including a user-defined command or function) that expects a valueset, it returns a valueset.</p>
</li>
<li>
<p>When the LIMIT function returns an empty valueset, it returns it as a valueset with null status.</p>
</li>
<li>
<p>In all other cases, the LIMIT function returns either a TEXT value or an INTEGER value depending on whether or not you include the INTEGER keyword. When it returns a TEXT value that represents empty status, it returns it as <code dir="ltr">NA</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2352"></a>Syntax</p>
<p>The syntax of the LIMIT function varies depending on whether you want to retrieve the values of the dimension or dimension surrogate values that result from a specified LIMIT command or the values of a specified dimension status stack.</p>
<p class="subhead2"><a id="OLADM1747"></a>Syntax for Retrieving Values From a LIMIT Command</p>
<p class="synopsis">LIMIT([INTEGER]&nbsp;{<span class="italic">dimension</span> | <span class="italic">valueset</span> | <span class="italic">LIMIT_function</span>}&nbsp;[<span class="italic">concat-component</span>] <span class="italic">limit-type</span> -</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span class="italic">limit-clause</span>]&nbsp;[IFNONE&nbsp;<span class="italic">label</span>])</p>
<p class="subhead2"><a id="OLADM1748"></a>Syntax for Retrieving Values From a Dimension Status Stack</p>
<p class="synopsis">LIMIT([INTEGER]&nbsp;<span class="italic">dimension</span>&nbsp;&nbsp;STATDEPTH <span class="italic">stack-position</span>]&nbsp;[IFNONE&nbsp;<span class="italic">label</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2353"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>See the <a href="dml_commands_2.htm#i78802">LIMIT command</a> for a complete description of this argument.</p>
</dd>
<dt><span class="italic">valueset</span></dt>
<dd>
<p>See the <a href="dml_commands_2.htm#i78802">LIMIT command</a> for a complete description of this argument.</p>
</dd>
<dt><span class="italic">LIMIT_function</span></dt>
<dd>
<p>Another LIMIT function.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you nest LIMIT functions inside each other in this manner, the first argument of the innermost LIMIT function must be the a dimension or a valueset. See also <a href="#CHDEAFCF">&#34;Nesting the LIMIT Function&#34;</a>.</div>
</dd>
<dt><span class="italic">concat-component</span></dt>
<dd>
<p>See the <a href="dml_commands_2.htm#i78802">LIMIT command</a> for a complete description of this argument.</p>
</dd>
<dt><span class="italic">limit-type</span></dt>
<dd>
<p>See the <a href="dml_commands_2.htm#i78802">LIMIT command</a> for a complete description of this argument.</p>
</dd>
<dt><span class="italic">limit-clause</span></dt>
<dd>
<p>Specifies the values to use for the limit. There are several types of limit clauses&mdash; for example, a limit clause you can use to specifying the limit using values (including using a valueset) and a limit clause you can use to specify the limit using a related dimension. Each of these types of limit clauses has a very complex syntax. Because the syntax is complex, the syntax for the various types of limit clauses are documented separately as part of the following topics:</p>
<dl>
<dd><a href="dml_commands_2.htm#i1019733">LIMIT (using values) command</a></dd>
<dd><a href="dml_commands_2.htm#i1019738">LIMIT using LEVELREL command</a></dd>
<dd><a href="dml_commands_2.htm#i1019747">LIMIT (using related dimension) command</a></dd>
<dd><a href="dml_commands_2.htm#i1019742">LIMIT (using parent relation)</a></dd>
<dd><a href="dml_commands_2.htm#i1019753">LIMIT NOCONVERT command</a></dd>
<dd><a href="dml_commands_2.htm#i1019757">LIMIT command (using POSLIST)</a></dd>
</dl>
<p>In the syntax of each of these LIMIT command topics, the <span class="italic">limit-clause</span> is that portion of the syntax following the <span class="italic">limit-type</span> argument.</p>
</dd>
<dt>INTEGER</dt>
<dd>
<p>When you use the INTEGER keyword, the function returns the position numbers of the values in the default dimension status rather than the names. When you use INTEGER with a valueset, the function returns the position numbers of the values in the default dimension status, not in the valueset.</p>
</dd>
<dt>STATDEPTH</dt>
<dd>
<p>Specifies that Oracle OLAP retrieve the status list values for the status list stack for the specified dimension.</p>
</dd>
<dt><span class="italic">stack-position</span></dt>
<dd>
<p>An INTEGER value that specifies the position in the status list stack from which to retrieve the values. Keep the following in mind when specifying a value:</p>
<ul>
<li>
<p>Values from <code dir="ltr">0</code> to <code dir="ltr">1-STATDEPTH(</code><code dir="ltr"><span class="codeinlineitalic">dimension</span></code><code dir="ltr">)</code> retrieve stacked values from the top (current status) to the bottom (oldest status.)</p>
</li>
<li>
<p>Values from <code dir="ltr">1</code> to <code dir="ltr">STATDEPTH(</code><code dir="ltr"><span class="codeinlineitalic">dimension</span></code>) retrieve stacked values from the bottom of the stack (that is, the oldest status) to the top of the stack (that is, the current status).</p>
</li>
</ul>
<p>See the <a href="#BJECDIIC">STATDEPTH</a> function for more information about status list stacks.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2354"></a>Usage Notes</p>
<p class="subhead2"><a id="CHDEAFCF"></a><a id="OLADM1749"></a>Nesting the LIMIT Function</p>
<p>Use the following syntax to return the result of several LIMIT commands for the same dimension by nesting the LIMIT function.</p>
<p class="synopsis">LIMIT&nbsp;(LIMIT&nbsp;(LIMIT&nbsp;(<span class="italic">lim-exp1</span>)&nbsp;<span class="italic">lim-exp2</span>)&nbsp;<span class="italic">lim-exp3</span>)</p>
<p>Use this nested construction to find the status of a series of LIMIT commands. For example, the following are some LIMIT commands.</p>
<pre dir="ltr">LIMIT product TO division &#39;Camping&#39;
LIMIT product KEEP -
   EVERY(sales GT 50000, product)
LIMIT product KEEP FIRST 1
</pre>
<p>To see the status of the preceding LIMIT commands, you execute the following statement.</p>
<pre dir="ltr">REPORT LIMIT(LIMIT(LIMIT(product TO -
   division &#39;Camping&#39;) KEEP EVERY -
   (sales GT 50000, product))KEEP FIRST 1)
</pre>
<p class="subhead2"><a id="OLADM1750"></a>Limiting with a Component of a Concat Dimension</p>
<p>You can limit a concat dimension to the current status of one of its component dimensions as in the following statement.</p>
<pre dir="ltr">LIMIT(reg.dist.ccdim TO district)
</pre>
<p>You can also limit a concat dimension to a set of the values of one of its component dimensions as in the following statement.</p>
<pre dir="ltr">LIMIT(reg.dist.ccdim TO district &#39;Boston&#39; &#39;Chicago&#39; &#39;Seattle&#39;)
</pre>
<p class="subhead2"><a id="OLADM1751"></a>Returning Multidimensional Results</p>
<p>The LIMIT function returns multidimensional results when evaluating multidimensional expressions. In the following example, the <code dir="ltr">sales</code> variable has three dimensions: <code dir="ltr">product</code>, <code dir="ltr">district</code>, and <code dir="ltr">month</code>.</p>
<pre dir="ltr">LIMIT product TO ALL
LIMIT district TO &#39;Boston&#39;
LIMIT month TO &#39;Jan95&#39; &#39;Feb95&#39; &#39;Mar95&#39;
</pre>
<p>A <code dir="ltr">REPORT sales</code> statement produces the following output.</p>
<pre dir="ltr">DISTRICT: BOSTON
          -------------SALES--------------
          -------------MONTH--------------
PRODUCT     Jan95      Feb95      Mar95
--------- ---------- ---------- ----------
Tents      32,153.52  32,536.30  43,062.75
Canoes     66,013.92  76,083.84  91,748.16
Racquets   52,420.86  56,837.88  58,838.04
Sportswear 53,194.70  58,913.40  62,797.80
Footwear   91,406.82  86,827.32 100,199.46
</pre>
<p>Suppose you want a list of products whose sales exceed $90,000 for the status shown in the preceding report. The LIMIT function evaluates the product sales in each month and district combination and produces a list that is dimensioned by the months and districts in status.</p>
<p>A <code dir="ltr">REPORT&nbsp;limit&nbsp;(product&nbsp;TO&nbsp;sales&nbsp;GT&nbsp;90000)</code> statement produces the following output.</p>
<pre dir="ltr">          ---LIMIT (PRODUCT TO SALES GT---
          -------------90000)-------------
          -------------MONTH--------------
DISTRICT    Jan95      Feb95      Mar95
--------- ---------- ---------- ----------
Boston    Footwear   NA         Canoes
                                Footwear
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2355"></a>Examples</p>
<div id="OLADM1752" class="example">
<p class="titleinexample"><a id="sthref2356"></a>Example 8-9 Returning Multidimensional Results</p>
<p>This example prints a report of the products whose sales were greater than $50,000 in the first two months of 1995 in Boston and Atlanta. Notice that the LIMIT function returns multidimensional results.</p>
<p>These statements</p>
<pre dir="ltr">LIMIT month TO &#39;Jan95&#39; &#39;Feb95&#39;
LIMIT district TO &#39;Boston&#39; &#39;Atlanta&#39;
LIMIT product TO ALL
REPORT LIMIT (product TO sales GT 50000)
</pre>
<p>produce this report.</p>
<pre dir="ltr">               --LIMIT (PRODUCT TO--
               ---SALES GT 50000)---
               --------MONTH--------
DISTRICT         JAn95      Feb95
-------------- ---------- ----------
Boston         Canoes     Canoes
               Racquets   Racquets
               Sportswear Sportswear
               Footwear   Footwear
Atlanta        Racquets   Canoes
               Sportswear Racquets
               Footwear   Sportswear
                          Footwear
</pre></div>
<!-- class="example" -->
<div id="OLADM1753" class="example">
<p class="titleinexample"><a id="sthref2357"></a>Example 8-10 LIMIT Command with the LIMIT Function</p>
<p>The following example shows the LIMIT function being used as an argument to the LIMIT command. The result of the LIMIT function is converted to a valueset.</p>
<pre dir="ltr">ALLSTAT
LIMIT month TO LIMIT (LIMIT (month TO LAST 10) KEEP FIRST 3)
</pre>
<p>After the preceding LIMIT statement, a <code dir="ltr">STATUS month</code> statement produces this output.</p>
<pre dir="ltr">The current status of MONTH is:
MAR97 TO MAY97 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1022322"></a>
<div id="OLADM587" class="refsect1">
<h2 class="refsect1">LIMITMAPINFO</h2>
<p><a id="sthref2358"></a>The LIMITMAPINFO function returns the analytic workspace expression that a specified limit map uses to map data into a specified column of a relational table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2359"></a>Return Value</p>
<p>A TEXT expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2360"></a>Syntax</p>
<p class="synopsis">LIMITMAPINFO ([<span class="italic">aw</span>], <span class="italic">limit-map</span>, <span class="italic">column-name</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2361"></a>Parameters</p>
<dl>
<dt><span class="italic">aw</span></dt>
<dd>
<p>The name of the analytic workspace that contains the analytic workspace object.</p>
</dd>
<dt><span class="italic">limit-map</span></dt>
<dd>
<p>The limit map as a text expression.</p>
</dd>
<dt><span class="italic">column-name</span></dt>
<dd>
<p>The name of the column of a relational table as it appears in <span class="syntaxinlineitalic">limit-map</span>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2362"></a>Examples</p>
<div id="OLADM1754" class="example">
<p class="titleinexample"><a id="sthref2363"></a>Example 8-11 Retrieving the Name of a Dimension</p>
<p>Assume that you have an analytic workspace named <code dir="ltr">myaw</code> that contains a text variable named <code dir="ltr">mylimitmap</code> that is a limit map that maps some analytic workspace data to a relational table with a column named <code dir="ltr">et_product</code>.</p>
<pre dir="ltr">MEASURE sales FROM aw_f.sales
DIMENSION et_chan FROM aw_channel WITH
HIERARCHY aw_channel.parent
GID gid_chan FROM aw_channel.gid
DIMENSION et_prod FROM aw_product WITH
HIERARCHY aw_product.parent
GID gid_prod FROM aw_prod.gid
DIMENSION et_geog FROM aw_geography WITH
HIERARCHY aw_geography.parent
GID gid_geog FROM aw_geog.gid
DIMENSION et_time FROM aw_time WITH
HIERARCHY time.parent
GID gid_time FROM aw_time.gid
</pre>
<p>To retrieve the name of the analytic workspace object from which data for the <code dir="ltr">et_prod</code> column is retrieved, you issue the following OLAP DML statement.</p>
<pre dir="ltr">show LIMITMAPINFO (&#39;myaw&#39;, mylimitmap, &#39;et_prod&#39;)  
</pre>
<p>The following value displays because the <code dir="ltr">et_prod</code> column is mapped to the <code dir="ltr">aw_product</code> dimension.</p>
<pre dir="ltr">aw_product  
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHGDGGB"></a>
<div id="OLADM588" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">LNNVL</h2>
<p>The LNNVL function provides a concise way to evaluate a condition when one or both operands of the condition may be null. LNNVL can be used anywhere a scalar expression can appear, even in contexts where the <code dir="ltr">IS [NOT] NULL</code>, <code dir="ltr">AND</code>, or <code dir="ltr">OR</code> conditions are not valid but would otherwise be required to account for potential nulls.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2364"></a>Return Values</p>
<p><code dir="ltr">TRUE</code> if the condition is false or unknown and <code dir="ltr">FALSE</code> if the condition is true.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2365"></a>Syntax</p>
<p>LNNVL(<span class="italic">condition</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2366"></a>Parameters</p>
<dl>
<dt><span class="italic">condition</span></dt>
<dd>
<p>An expression constructed using any scalar values. Note that you cannot specify an expression that contains AND, OR, or BETWEEN.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2367"></a>Examples</p>
<div id="OLADM1755" class="example">
<p class="titleinexample"><a id="sthref2368"></a>Example 8-12 Evaluating Expressions Using LNNVL</p>
<pre dir="ltr">SHOW LNNVL(&#39;apples&#39; EQ &#39;oranges&#39;)
yes

SHOW LNNVL(7 LT 11)
no

SHOW LNNVL(&#39;vegetables&#39; EQ NA)
yes
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHCGFAB"></a>
<div id="OLADM589" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">LOCALTIMESTAMP</h2>
<p>The <a id="sthref2369"></a>LOCALTIMESTAMP function returns the current date and time in the session time zone as a value of data type <code dir="ltr">TIMESTAMP</code>.</p>
<p>When you want to retrieve the current date and time in the session time zone as a <code dir="ltr">TIMESTAMP_TZ</code> value, use the <a href="dml_functions_1.htm#CACGAAGD">CURRENT_TIMESTAMP</a> function.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2370"></a>Return Values</p>
<p><code dir="ltr">TIMESTAMP</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2371"></a>Syntax</p>
<p class="synopsis">LOCALTIMESTAMP [ (<span class="italic">timestamp-precision</span>) ]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2372"></a>ARGUMENTS</p>
<dl>
<dt><span class="italic">timestamp-precision</span></dt>
<dd>
<p>Specifies the fractional second precision of the time value returned</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2373"></a>Examples</p>
<div id="OLADM1756" class="example">
<p class="titleinexample"><a id="sthref2374"></a>Example 8-13 Retrieving the Local Timestamp</p>
<pre dir="ltr">SHOW LOCALTIMESTAMP
13-FEB-07 12.11.33.454834 PM
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78857"></a>
<div id="OLADM590" class="refsect1">
<h2 class="refsect1">LOG function</h2>
<p><a id="sthref2375"></a><a id="sthref2376"></a><a id="sthref2377"></a>The LOG function computes the logarithm of an expression.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not confuse the LOG function with the function of the same name which creates a log file.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2378"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2379"></a>Syntax</p>
<p class="synopsis">LOG([<span class="italic">base</span>,] <span class="italic">expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2380"></a>Parameters</p>
<dl>
<dt><span class="italic">base</span></dt>
<dd>
<p>The base by which to compute the logarithm. When you do not specify a value, the function computes the natural logarithm of the expression by using <span class="italic">e</span> for the base where <span class="italic">e</span> equals <code dir="ltr">2.718281828459</code>.</p>
</dd>
<dt><span class="italic">expression</span></dt>
<dd>
<p>A numeric expression which is greater than zero. When the value is equal to or less than zero, LOG returns an <code dir="ltr">NA</code> value.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2381"></a>Examples</p>
<div id="OLADM1757" class="example">
<p class="titleinexample"><a id="sthref2382"></a>Example 8-14 Calculating a Natural Logarithm</p>
<p>In this example the LOG function is used to calculate the natural logarithm of the expression <code dir="ltr">4,000 +</code> <code dir="ltr">6,000</code>. The statements</p>
<pre dir="ltr">DECIMALS = 5
SHOW LOG(4000 + 6000)
</pre>
<p>produce the following result.</p>
<pre dir="ltr">9.21034
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78847"></a>
<div id="OLADM591" class="refsect1">
<h2 class="refsect1">LOG10</h2>
<p><a id="sthref2383"></a><a id="sthref2384"></a>The LOG10 function computes the logarithm base <code dir="ltr">10</code> of an expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2385"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2386"></a>Syntax</p>
<p class="synopsis">LOG10(<span class="italic">expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2387"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The value of <span class="italic">expression</span> must be greater than zero. When the value is equal to or less than <code dir="ltr">0</code> (zero), LOG10 returns an <code dir="ltr">NA</code> value.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2388"></a>Examples</p>
<div id="OLADM1758" class="example">
<p class="titleinexample"><a id="sthref2389"></a>Example 8-15 Calculating a Base 10 Logarithm</p>
<p>This example uses the LOG10 function to calculate the base 10 logarithm of 1,000. The statement</p>
<pre dir="ltr">SHOW LOG10(1000)
</pre>
<p>produces the following result.</p>
<pre dir="ltr">3.00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78862"></a>
<div id="OLADM592" class="refsect1">
<h2 class="refsect1">LOWCASE</h2>
<p><a id="sthref2390"></a><a id="sthref2391"></a>The LOWCASE function converts all alphabetic characters in a text expression into lowercase.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2392"></a>Return Value</p>
<p>TEXT or NTEXT</p>
<p>When the expression is TEXT, the return value is TEXT. When the expression is NTEXT, the return value is NTEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2393"></a>Syntax</p>
<p class="synopsis">LOWCASE(<span class="italic">text-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2394"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The text expression whose characters are to be converted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2395"></a>Examples</p>
<div id="OLADM1759" class="example">
<p class="titleinexample"><a id="sthref2396"></a>Example 8-16 Converting Part of an Expression to Lowercase</p>
<p>Suppose you get some new data to add to a mailing list. In the existing mailing list, people&#39;s names have only the first letter capitalized. In the new data, however, the whole name is capitalized. You can use LOWCASE to make the new data correspond to the current data with a statement similar to the following.</p>
<pre dir="ltr">lastname = JOINCHARS(EXTCHARS(lastname, 1, 1), -
           LOWCASE(EXTCHARS(lastname, 2, NUMCHARS(lastname)))) 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHIBHH"></a>
<div id="OLADM711" class="refsect1">
<h2 class="refsect1">LOWER</h2>
<p><a id="sthref2397"></a>The LOWER function converts all alphabetic characters in a text expression into lowercase.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2398"></a>Return Value</p>
<p>The data type of <span class="italic">text-expression</span>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The LOWER function in <a class="olink SQLRF00662" href="../SQLRF/functions106.htm#SQLRF00662"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2399"></a>Syntax</p>
<p class="synopsis">LOWER(<span class="italic">text-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2400"></a>Parameters<a id="sthref2401"></a></p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The text expression whose characters are to be converted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1012499"></a>
<div id="OLADM593" class="refsect1">
<h2 class="refsect1">LPAD</h2>
<p><a id="sthref2402"></a><a id="sthref2403"></a><a id="sthref2404"></a>The LPAD function returns an expression, left-padded to a specified length with the specified characters; or, when the expression to be padded is longer than the length specified after padding, only that portion of the expression that fits into the specified length.</p>
<p>To right-pad a text expression, use RPAD.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2405"></a>Return Value</p>
<p>TEXT or NTEXT based on the data type of the expression you want to pad (<span class="italic">text-exp</span>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2406"></a>Syntax</p>
<p class="synopsis">LPAD (<span class="italic">text-exp</span> , <span class="italic">length</span> [, <span class="italic">pad-exp</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2407"></a>Parameters</p>
<dl>
<dt><span class="italic">text-exp</span></dt>
<dd>
<p>A text expression to pad.</p>
</dd>
<dt><span class="italic">length</span></dt>
<dd>
<p>The total length of the return value as it is displayed on your screen. In most character sets, this is also the number of characters in the return value. However, in some multibyte character sets, the display length of a character string can differ from the number of characters in the string.</p>
<p>When you specify a value for <span class="italic">length</span> that is shorter than the length of <span class="italic">text-exp</span>, then this function returns only that portion of the expression that fits into the specified length.</p>
</dd>
<dt><span class="italic">pad-exp</span></dt>
<dd>
<p>A text expression that specifies the padding characters. The default value of <span class="italic">pad-exp</span> is a single blank.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2408"></a>Examples</p>
<div id="OLADM1760" class="example">
<p class="titleinexample"><a id="sthref2409"></a>Example 8-17 Left-Padding a String</p>
<p>The following example left-pads a string with the characters &#34;*&#34; and &#34;.&#34;.</p>
<pre dir="ltr">SHOW LPAD(&#39;Page 1&#39;,15,&#39;*.&#39;) 
*.*.*.*.*Page 1
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1012542"></a>
<div id="OLADM594" class="refsect1">
<h2 class="refsect1">LTRIM</h2>
<p><a id="sthref2410"></a><a id="sthref2411"></a><a id="sthref2412"></a>The LTRIM function removes characters from the left of a text expression, with all the leftmost characters that appear in another text expression removed. The function begins scanning the base text expression from its first character and removes all characters that appear in the trim expression until reaching a character that is not in the trim expression and then returns the result.</p>
<p>To trailing characters, use RTRIM. To trim both leading or trailing characters, use TRIM.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2413"></a>Return Value</p>
<p>TEXT or NTEXT based on the data type of the first argument.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2414"></a>Syntax</p>
<p class="synopsis">LTRIM (<span class="italic">text-exp</span> [, <span class="italic">trim-exp</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2415"></a>Parameters</p>
<dl>
<dt><span class="italic">text-exp</span></dt>
<dd>
<p>A text expression that you want trimmed.</p>
</dd>
<dt><span class="italic">trim-exp</span></dt>
<dd>
<p>A text expression that is the characters to trim. The default value of <span class="italic">trim-exp</span> is a single blank.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2416"></a>Examples</p>
<div id="OLADM1761" class="example">
<p class="titleinexample"><a id="sthref2417"></a>Example 8-18 Trimming Left-Most Characters</p>
<p>The following example trims all of the left-most x&#39;s and y&#39;s from a string.</p>
<pre dir="ltr">SHOW LTRIM(&#39;xyxxxyLast Word&#39;,&#39;xy&#39;) 
Last Word
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78877"></a>
<div id="OLADM595" class="refsect1">
<h2 class="refsect1">MAKEDATE</h2>
<p><a id="sthref2418"></a>The MAKEDATE function returns the DATE value that corresponds to specified <code dir="ltr">INTEGER</code> values for a year, month, and day.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2419"></a>Return Value</p>
<p>DATE or text</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2420"></a>Syntax</p>
<p class="synopsis">MAKEDATE(<span class="italic">year&nbsp;month&nbsp;day</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2421"></a>Parameters</p>
<dl>
<dt><span class="italic">year</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> expression that represents the year of the test date. For any year, you can specify the year as a four-digit number in the range 1000 to 9999. For years in the range 1950 to 2049 (the default) or some other range (as set through the YRABSTART option), you have the alternative of specifying a two-digit number that represents the last two digits of the year (96 represents 1996, for example).</p>
</dd>
<dt><span class="italic">month</span></dt>
<dd>
<p>Any <code dir="ltr">INTEGER</code> expression, normally in the range 1 to 12. When you specify an <code dir="ltr">INTEGER</code> less than 1 or greater than 12, MAKEDATE returns a date in a year before or after the year specified by the <code dir="ltr">INTEGER</code> expression for <span class="italic">year.</span></p>
<p>For example, if the arguments to MAKEDATE are (<code dir="ltr">97</code> <code dir="ltr">14</code> <code dir="ltr">21</code>), MAKEDATE returns the date <code dir="ltr">February&nbsp;21,&nbsp;1998</code> because, in effect, February 1998 is the fourteenth month of 1997.</p>
</dd>
<dt><span class="italic">day</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> expression in the range 1 to 31.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2422"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1762"></a>Format of the Result Returned by MAKEDATE</p>
<p>When you display the result returned by MAKEDATE, the date is formatted according to the date template in the DATEFORMAT option. When the day of the week or the name of the month is used in the date template, the day names specified in the DAYNAMES option and the month names specified in the MONTHNAMES option are used. You can use the result returned by MAKEDATE anywhere that a DATE value is expected.</p>
<p class="subhead2"><a id="OLADM1763"></a>Invalid Dates</p>
<p>When the arguments to MAKEDATE do not represent a valid date between January&nbsp;1,&nbsp;1000, and December&nbsp;31,&nbsp;9999, MAKEDATE returns an <code dir="ltr">NA</code> value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2423"></a>Examples</p>
<div id="OLADM1764" class="example">
<p class="titleinexample"><a id="sthref2424"></a>Example 8-19 Converting Integers to a Date</p>
<p>The following statements specify the date format and send the output to the current outfile.</p>
<pre dir="ltr">DATEFORMAT = &#39;&lt;mtextl&gt; &lt;d&gt;, &lt;yyyy&gt;&#39;
SHOW MAKEDATE(97 11 14)
</pre>
<p>These statements produce the following output.</p>
<pre dir="ltr">November 14, 1997
</pre></div>
<!-- class="example" -->
<div id="OLADM1765" class="example">
<p class="titleinexample"><a id="sthref2425"></a>Example 8-20 Calculating a Date Using YYOR, MMOF, and DDOF Functions</p>
<p>The following statement calculates the date one year from today, and sends the output to the current outfile. The TODAY function returns today&#39;s date. The INTEGER functions YYOF, MMOF, and DDOF return the INTEGER values that correspond to the year, month, and day of today&#39;s date.</p>
<pre dir="ltr">SHOW MAKEDATE(YYOF(TODAY) + 1 MMOF(TODAY) DDOF(TODAY))
</pre>
<p>When today&#39;s date is January 15, 1995, this statement produces the following output.</p>
<pre dir="ltr">January 15, 1996
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78882"></a>
<div id="OLADM596" class="refsect1">
<h2 class="refsect1">MAX</h2>
<p><a id="sthref2426"></a><a id="sthref2427"></a><a id="sthref2428"></a>The MAX function calculates the larger value of two expressions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2429"></a>Return Value</p>
<p>DECIMAL. The results of MAX are dimensioned by the union of the dimensions of the two expressions</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2430"></a>Syntax</p>
<p class="synopsis">MAX(<span class="italic">expression1</span>,&nbsp;<span class="italic">expression2</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2431"></a>Parameters</p>
<dl>
<dt><span class="italic">expression1</span></dt>
<dd>
<p>One expression to be compared.</p>
</dd>
<dt><span class="italic">expression2</span></dt>
<dd>
<p>The other expression to be compared.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2432"></a>Examples</p>
<div id="OLADM1766" class="example">
<p class="titleinexample"><a id="sthref2433"></a>Example 8-21 Calculating Whether Actual or Budget Values Are Larger</p>
<p>Suppose, for each of the first six months of 1996, you want to find whether the <code dir="ltr">actual</code> value or the <code dir="ltr">budget</code> value is larger for the line item Cost of Goods Sold (Cogs) in the <code dir="ltr">Sporting</code> division.</p>
<pre dir="ltr">LIMIT line TO &#39;Cogs&#39;
LIMIT division TO &#39;Sporting&#39;
LIMIT month TO &#39;Jan96&#39; TO &#39;Jun96&#39;
REPORT DOWN month actual budget MAX(actual budget)
</pre>
<p>The preceding statements produce the following output.</p>
<pre dir="ltr">DIVISION: SPORTING
               --------------LINE--------------
               --------------COGS--------------
                                        MAX    
                                      (ACTUAL  
MONTH            ACTUAL     BUDGET    BUDGET)  
-------------- ---------- ---------- ----------
Jan96          287,557.87 279,773.01 287,557.87
Feb96          315,298.82 323,981.56 323,981.56
Mar96          326,184.87 302,177.88 326,184.87
Apr96          394,544.27 386,100.82 394,544.27
May96          449,862.25 433,997.89 449,862.25
Jun96          457,347.55 448,042.45 457,347.55
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1063584"></a>
<div id="OLADM597" class="refsect1">
<h2 class="refsect1">MAXBYTES</h2>
<p><a id="sthref2434"></a>The MAXBYTES function counts the number of bytes in the longest line of a multiline text expression. The result returned by MAXBYTES has the same dimensions as the specified expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2435"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2436"></a>Syntax</p>
<p class="synopsis">MAXBYTES(<span class="italic">text-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2437"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The <code dir="ltr">TEXT</code> expression whose bytes for each line are to be counted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2438"></a>Examples</p>
<div id="OLADM1767" class="example">
<p class="titleinexample"><a id="sthref2439"></a>Example 8-22 Finding the Length of the Longest Line Using Bytes</p>
<p>You would like to know the length of the longest line in a text variable called <code dir="ltr">mytext</code>. The following example shows the value of the variable and the result returned by MAXBYTES.</p>
<p>The statement</p>
<pre dir="ltr">SHOW mytext
</pre>
<p>produces the following output.</p>
<pre dir="ltr">This is a multiline text variable. 
The longest line is this one in the middle.
The third line is short.
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW MAXBYTES(mytext)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">43 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78571"></a>
<div id="OLADM598" class="refsect1">
<h2 class="refsect1">MAXCHARS</h2>
<p><a id="sthref2440"></a>The MAXCHARS function counts the number of characters in the longest line of a multiline text expression. The result returned by MAXCHARS has the same dimensions as the specified expression.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you are using a multibyte character set, you can use the MAXBYTES function instead of the MAXCHARS function.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2441"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2442"></a>Syntax</p>
<p class="synopsis">MAXCHARS(<span class="italic">text-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2443"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The text expression whose characters for each line are to be counted. MAXCHARS accepts either a TEXT or NTEXT argument. It does not perform an automatic conversion to either data type. It returns the information that is correct for the data type of the specified argument.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2444"></a>Examples</p>
<div id="OLADM1768" class="example">
<p class="titleinexample"><a id="sthref2445"></a>Example 8-23 Finding the Length of the Longest Line Using Characters</p>
<p>You would like to know the length of the longest line in a text variable called <code dir="ltr">mytext</code>. The following example shows the value of the variable and the result returned by MAXCHARS.</p>
<p>The statement</p>
<pre dir="ltr">SHOW mytext
</pre>
<p>produces the following output.</p>
<pre dir="ltr">This is a multiline text variable. 
The longest line is this one in the middle.
The third line is short.
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW MAXCHARS(mytext)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">43 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78581"></a>
<div id="OLADM599" class="refsect1">
<h2 class="refsect1">MEDIAN</h2>
<p><a id="sthref2446"></a><a id="sthref2447"></a>The MEDIAN function calculates the median of the values of an expression. The <span class="italic">median</span> is the middle number in a given sequence of numbers.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2448"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2449"></a>Syntax</p>
<p class="synopsis">MEDIAN(<span class="italic">expression&nbsp;</span>[CACHE] [<span class="italic">dimension</span>...])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2450"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The expression whose median value is to be calculated.</p>
</dd>
<dt>CACHE</dt>
<dd>
<p>Specifies slightly different internal behavior. Specify this keyword only when the original performance is extremely slow.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The name of a dimension of the result; or, the name of a relation between one dimension of <span class="italic">expression</span> and another dimension that you want as a dimension of the result.</p>
<p>By default, MEDIAN returns a single value. When you indicate one or more dimensions for the result, MEDIAN calculates values along the dimensions that are specified and returns an array of values. Each dimension must be either a dimension of <span class="italic">expression</span> or related to one of its dimensions.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you specify a dimension that is not an actual dimension of expression, but, instead, is dimension that is related to a dimension of expression and when there are multiple relations between the two dimensions, Oracle OLAP uses the default relation between the dimensions to perform the calculation. (See the <a href="dml_commands_2.htm#CACBJGDI">RELATION command</a> for more information on default relations.) When you do not want Oracle OLAP to use this default relation, specify the related dimension by specifying the name of a specify relation.</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2451"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1769"></a>NA Values and MEDIAN</p>
<p>MEDIAN is affected by the NASKIP option in the same manner as other aggregate functions. When NASKIP is set to <code dir="ltr">YES</code> (the default), MEDIAN ignores <code dir="ltr">NA</code> values and returns the median of the values that are not <code dir="ltr">NA</code>. When NASKIP is set to <code dir="ltr">NO</code>, MEDIAN returns <code dir="ltr">NA</code> when any value of the expression is <code dir="ltr">NA</code>. When all the values of the expression are <code dir="ltr">NA</code>, MEDIAN returns <code dir="ltr">NA</code> for either setting of NASKIP.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2452"></a>Examples</p>
<div id="OLADM1770" class="example">
<p class="titleinexample"><a id="sthref2453"></a>Example 8-24 Calculating Median Monthly Sales</p>
<p>This example shows how to calculate the median monthly sales of sportswear for each sales district.</p>
<pre dir="ltr">LIMIT product TO &#39;Sportswear&#39;
REPORT W 12 HEADING &#39;Median Sales&#39; MEDIAN(sales district)
</pre>
<p>The preceding statements produce the following output.</p>
<pre dir="ltr">DISTRICT          Median Sales
----------------- ------------
Boston               67,923.05
Atlanta             152,186.52
Chicago              94,372.06
Dallas              160,854.60
Denver               86,745.40
Seattle              53,950.28
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78586"></a>
<div id="OLADM600" class="refsect1">
<h2 class="refsect1">MIN</h2>
<p><a id="sthref2454"></a><a id="sthref2455"></a><a id="sthref2456"></a>The MIN function calculates the smaller value of two expressions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2457"></a>Return Value</p>
<p>DECIMAL. The results of MIN are dimensioned by the union of the dimensions of the two expressions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2458"></a>Syntax</p>
<p class="synopsis">MIN(<span class="italic">expression1</span>,&nbsp;<span class="italic">expression2</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2459"></a>Parameters</p>
<dl>
<dt><span class="italic">expression1</span></dt>
<dd>
<p>One expression to be compared.</p>
</dd>
<dt><span class="italic">expression2</span></dt>
<dd>
<p>The other expression to be compared.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2460"></a>Examples</p>
<div id="OLADM1771" class="example">
<p class="titleinexample"><a id="sthref2461"></a>Example 8-25 Calculating Whether Actual or Budget Values Are Smaller</p>
<p>Suppose, for each of the first six months of 1996, you want to find whether the <code dir="ltr">actual</code> value or the <code dir="ltr">budget</code> value is smaller for the line item Cost of Goods Sold (<code dir="ltr">Cogs</code>) in the <code dir="ltr">Sporting</code> division.</p>
<pre dir="ltr">LIMIT line TO &#39;Cogs&#39;
LIMIT division TO &#39;Sporting&#39;
LIMIT month TO &#39;Jan96&#39; TO &#39;Jun96&#39;
REPORT DOWN month actual budget MIN(actual budget)
</pre>
<p>The preceding statements produce the following output.</p>
<pre dir="ltr">DIVISION: SPORTING
               --------------LINE--------------
               --------------COGS--------------
                                        MIN    
                                      (ACTUAL  
MONTH            ACTUAL     BUDGET    BUDGET)  
-------------- ---------- ---------- ----------
Jan96          287,557.87 279,773.01 279,773.01
Feb96          315,298.82 323,981.56 315,298.82
Mar96          326,184.87 302,177.88 302,177.88
Apr96          394,544.27 386,100.82 386,100.82
May96          449,862.25 433,997.89 433,997.89
Jun96          457,347.55 448,042.45 448,042.45
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78591"></a>
<div id="OLADM601" class="refsect1">
<h2 class="refsect1">MMOF</h2>
<p><a id="sthref2462"></a>The MMOF function returns an <code dir="ltr">INTEGER</code> in the range of 1 to 12, giving the month in which a specified date falls. The result returned by MMOF has the same dimensions as the specified DATE expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2463"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2464"></a>Syntax</p>
<p class="synopsis">MMOF(<span class="italic">date-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2465"></a>Parameters</p>
<dl>
<dt><span class="italic">date-expression</span></dt>
<dd>
<p>An expression that has the DATE data type, or a text expression that specifies a date. The values of the text expression are converted automatically to DATE values, using the current setting of the DATEORDER option to resolve any ambiguity.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2466"></a>Examples</p>
<div id="OLADM1772" class="example">
<p class="titleinexample"><a id="sthref2467"></a>Example 8-26 Finding the Current Month</p>
<p>The following statement determines the month in which today&#39;s date falls.</p>
<pre dir="ltr">SHOW MMOF(TODAY)
</pre>
<p>When today&#39;s date is January&nbsp;15,&nbsp;1996, this statement produces the following output.</p>
<pre dir="ltr">1
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78601"></a>
<div id="OLADM602" class="refsect1">
<h2 class="refsect1">MODE</h2>
<p><a id="sthref2468"></a>The MODE function returns the mode (the most frequently occurring value) of a numeric expression. When there are no duplicate values in the data, then MODE returns <code dir="ltr">NA</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2469"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2470"></a>Syntax</p>
<p class="synopsis">MODE(<span class="italic">expression&nbsp;</span>[CACHE} [<span class="italic">dimensions</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2471"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The numeric expression whose mode is to be calculated.</p>
</dd>
<dt>CACHE</dt>
<dd>
<p>Specifies slightly different internal behavior. Specify this keyword only when the original performance is extremely slow.</p>
</dd>
<dt><span class="italic">dimensions</span></dt>
<dd>
<p>The dimensions of the result. When you do not specify any dimensions, MODE calculates the mode over all the dimensions of <span class="italic">expression</span> and it returns a single value. When you specify one or more dimensions (but fewer than all of the dimensions of <span class="italic">expression</span>) in the <span class="italic">dimension</span> argument, then MODE calculates the mode for each value of the dimensions that you specified and returns an array of values. Each dimension must be a dimension of <span class="italic">expression</span>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2472"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1773"></a>The Effect of NASKIP on MODE</p>
<p>MODE is not affected by the NASKIP option.</p>
<p class="subhead2"><a id="OLADM1774"></a>More Than One Set of Duplicate Values</p>
<p>When multiple values qualify as having the greatest number of occurrences in the expression, then MODE sorts the values and returns the lowest one. For example, for the data series {4,5,2,3,7,4,6,2,1}, the mode for the series is 2 even though 2 and 4 both occur twice.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2473"></a>Examples</p>
<div id="OLADM1775" class="example">
<p class="titleinexample"><a id="sthref2474"></a>Example 8-27 Reporting the Mode</p>
<p>These examples use the following <code dir="ltr">geography</code> and <code dir="ltr">items</code> dimensions and <code dir="ltr">sales2</code> variable.</p>
<pre dir="ltr">DEFINE geography DIMENSION TEXT 
MAINTAIN geography ADD &#39;g1&#39; &#39;g2&#39; &#39;g3&#39;
DEFINE items DIMENSION TEXT
MAINTAIN items ADD &#39;Item1&#39; &#39;Item2&#39; &#39;Item3&#39; &#39;Item4&#39; &#39;Item5&#39;
DEFINE sales2 DECIMAL &lt;geography items&gt;
</pre>
<p>Assume the <code dir="ltr">sales2</code> variable has the following data values.</p>
<pre dir="ltr">               -------------SALES2-------------
               -----------GEOGRAPHY------------
ITEMS              G1         G2         G3
-------------- ---------- ---------- ----------
Item1               30.00      15.00      12.00
Item2               10.00      20.00      18.00
Item3               15.00      20.00      24.00
Item4               30.00      25.00      25.00
Item5                  NA       7.00      21.00
</pre>
<ul>
<li>
<p>This statement reports the mode that is calculated over the <code dir="ltr">geography</code> dimension.</p>
<pre dir="ltr">REPORT W 22 MODE(sales2, geography)
</pre>
<p>The preceding statement produces the following output.</p>
<pre dir="ltr">                    MODE(SALES2,
GEOGRAPHY            GEOGRAPHY)
-------------- ----------------------
g1                              30.00
g2                              20.00
g3                                 NA
</pre></li>
<li>
<p>This statement reports the mode that is calculated over the <code dir="ltr">items</code> dimension.</p>
<pre dir="ltr">REPORT W 18 MODE(sales2, items)
</pre>
<p>The preceding statement produces the following output.</p>
<pre dir="ltr">                  MODE(SALES2,
ITEMS                ITEMS)
-------------- ------------------
Item1                          NA
Item2                          NA
Item3                          NA
Item4                       25.00
ITEM5                          NA
</pre></li>
<li>
<p>This statement reports the mode that is calculated over all of the dimensions of the <code dir="ltr">sales2</code> variable.</p>
<pre dir="ltr">REPORT MODE(sales2)
</pre>
<p>The preceding statement produces the following output.</p>
<pre dir="ltr">Mode
----
15
</pre></li>
</ul>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDABCG"></a>
<div id="OLADM603" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">MODULO</h2>
<p>The <a id="sthref2475"></a><a id="sthref2476"></a>MODULO function, like the SQL <code dir="ltr">MOD</code> function, returns the remainder after a number is divided by another; or the number if the divisor is <span class="italic">0</span> (zero).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2477"></a>Return Values</p>
<p>Numeric.</p>
<p>Oracle determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2478"></a>Syntax</p>
<p class="synopsis">MOD(<span class="italic">dividend</span>, <span class="italic">divisor</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2479"></a>Parameters</p>
<dl>
<dt><span class="italic">dividend</span></dt>
<dd>
<p>A numeric expression (or an expression that Oracle OLAP can implicitly convert to a numeric expression) that is the number you want to divide.</p>
</dd>
<dt><span class="italic">divisor</span></dt>
<dd>
<p>A numeric expression (or an expression that Oracle OLAP can implicitly convert to a numeric expression) that is the divisor.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2480"></a>Examples</p>
<div id="OLADM1776" class="example">
<p class="titleinexample"><a id="sthref2481"></a>Example 8-28 Using MODULO to Find the Remainder After Division</p>
<pre dir="ltr">SHOW MODULO(13,7)
6.00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CFAEIHHB"></a>
<div id="OLADM604" class="refsect1">
<h2 class="refsect1">MONTHS_BETWEEN</h2>
<p><a id="sthref2482"></a>The MONTHS_BETWEEN function calculates the number of months between two dates. When the two dates have the same day component or are both the last day of the month, then the return value is a whole number. Otherwise, the return value includes a fraction that considers the difference in the days based on a 31-day month. The return value is positive when the first date is later than the second date, and negative when the first date is earlier than the second date.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2483"></a>Return Value</p>
<p>NUMBER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2484"></a>Syntax</p>
<p class="synopsis">MONTHS_BETWEEN(<span class="italic">datetime_expression1</span>,&nbsp;<span class="italic">datetime_expression2</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2485"></a>Parameters</p>
<dl>
<dt><span class="italic">datetime-expression1</span></dt>
<dd>
<p>One expression that has the <code dir="ltr">DATETIME</code> data type, or a text expression that specifies a date.</p>
</dd>
<dt><span class="italic">datetime-expression2</span></dt>
<dd>
<p>A second expression that has the <code dir="ltr">DATETIME</code> data type, or a text expression that specifies a date.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2486"></a>Examples</p>
<div id="OLADM1777" class="example">
<p class="titleinexample"><a id="sthref2487"></a>Example 8-29 Calculating the Number of Months Between Dates</p>
<p>The following statement calculates the number of months between March 26, 2004, and July 6, 2001.</p>
<pre dir="ltr">SHOW months_between(&#39;06Jul2005&#39; &#39;17Jul2003&#39;)
23.65
</pre></div>
<!-- class="example" -->
<div id="OLADM1778" class="example">
<p class="titleinexample"><a id="sthref2488"></a>Example 8-30 Last Days</p>
<p>The return value is a whole number when both dates are the last day of the month.</p>
<pre dir="ltr">SHOW months_between(&#39;29Feb2000&#39;, &#39;30Sep2000&#39;)
-7.00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CFAJBAJH"></a>
<div id="OLADM605" class="refsect1">
<h2 class="refsect1">MOVINGAVERAGE</h2>
<p><a id="sthref2489"></a>The MOVINGAVERAGE function (abbreviated MVAVG) computes a series of averages for the values of a dimensioned variable or expression over a specified dimension. For each dimension value in status, MOVINGAVERAGE computes the average of the data in the range specified, relative to the current dimension value.</p>
<p>When the data being averaged has only one dimension, MOVINGAVERAGE produces a single series of averages, one for each dimension value in status. When the data has dimensions other than the one being averaged over, MOVINGAVERAGE produces a separate series of averages for each combination of values in the status list of the other dimensions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2490"></a>Return Value</p>
<p>DECIMAL when the data type of <span class="italic">expression</span> is DECIMAL or SHORT; otherwise, NUMBER.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2491"></a>Syntax</p>
<p class="synopsis">MOVINGAVERAGE(<span class="italic">expression</span>,&nbsp;<span class="italic">start</span>,&nbsp;<span class="italic">stop</span>,&nbsp;<span class="italic">step</span>, -</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span class="italic">dimension</span>&nbsp;[STATUS|<span class="italic">limit-clause</span>]])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2492"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>A numeric variable or calculation whose values you want to average; for example, <code dir="ltr">units</code> or <code dir="ltr">sales-expense</code>.</p>
</dd>
<dt><span class="italic">start</span></dt>
<dt><span class="italic">stop</span></dt>
<dd>
<p>Integer values that specify the range of values over which you want to average. The value of start specifies the beginning of the range. The value of <span class="italic">stop</span> specifies the end of the range. Specify the values of start and stop relative to the current value of <span class="italic">dimension</span>. To specify a negative position for start or <span class="italic">stop</span> precede the value with a comma. Thus, you specify zero (<code dir="ltr">0</code>) for the current dimension value, and <code dir="ltr">-1</code> for the value preceding the current value. (See also <a href="#CHDGBJBD">&#34;How the Moving Functions Handle Out-of-Range and NA Values&#34;</a>.)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
By default this function uses the default status list when identifying the range of values to average. You can specify either the STATUS or <span class="italic">limit-clause</span> phrase to change this behavior.</div>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you want to range to the end of status, for convenience and to document your intent, specify the value of <span class="italic">stop</span> as <a href="#g1054016">OBJ</a> function with the DIMMAX keyword</div>
</dd>
<dt><span class="italic">step</span></dt>
<dd>
<p>A positive whole number that specifies whether to average over every value in the range, every other value, every third value, and so on. A value of <code dir="ltr">1</code> for <span class="italic">step</span> means average over every value. A value of <code dir="ltr">2</code> means average over the first value, the third value, the fifth value, and so on. For example, when the current month is <code dir="ltr">Jun96</code> and the <span class="italic">start</span> and <span class="italic">stop</span> values are <code dir="ltr">-3</code> and <code dir="ltr">3</code>, a <span class="italic">step</span> value of <code dir="ltr">2</code> means average over <code dir="ltr">Mar96</code>, <code dir="ltr">May96</code>, <code dir="ltr">Jul96</code>, and <code dir="ltr">Sep96</code>.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The dimension over which the moving average is calculated. The data type of <span class="italic">dimension</span> can be of any type, but typically, is a time dimension.</p>
<p>When <span class="italic">expression</span> has a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR and you want the function to use that dimension, you can omit the <span class="italic">dimension</span> argument.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Specifies that MOVINGAVERAGE should use the current status list (that is, only the dimension values currently in status in their current status order) when calculating the moving average.</p>
</dd>
<dt><span class="italic">limit-clause</span></dt>
<dd>
<p>Specifies that MOVINGAVERAGE uses the values specified by a <a href="#i78807">LIMIT function</a> or those specified with the same syntax as any of the <span class="italic">limit-clause</span> arguments in the various forms of the LIMIT command (that is, the syntax of the LIMIT command after the <span class="italic">limit-type</span> argument such as &#34;TO&#34;). For the syntax of these arguments, see <a href="dml_commands_2.htm#i1019733">LIMIT (using values) command</a>, <a href="dml_commands_2.htm#i1019738">LIMIT using LEVELREL command</a>, <a href="dml_commands_2.htm#i1019742">LIMIT (using parent relation)</a>, <a href="dml_commands_2.htm#i1019747">LIMIT (using related dimension) command</a>, <a href="dml_commands_2.htm#i1019753">LIMIT NOCONVERT command</a>, and <a href="dml_commands_2.htm#i1019757">LIMIT command (using POSLIST)</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2493"></a>Usage Notes</p>
<p class="subhead2"><a id="CHDGBJBD"></a><a id="OLADM1779"></a>How the Moving Functions Handle Out-of-Range and NA Values</p>
<p>As a moving function loops through the values, at each step in the loop, if the in-loop dimension position is <code dir="ltr">NA</code> or out of range, then the function considers <span class="italic">expression</span> as an <code dir="ltr">NA</code> value. The function treats these <code dir="ltr">NA</code> values in the manner specified by the setting of the <a href="dml_options.htm#i79250">NASKIP</a> option (by default, as <code dir="ltr">NA</code>) so, typically, the function ignores out-of-range (<code dir="ltr">NA</code>) values and does not evaluate the expression for that step in the loop.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2494"></a>Examples</p>
<div id="OLADM1780" class="example">
<p class="titleinexample"><a id="i1004810"></a>Example 8-31 Calculating a Moving Average</p>
<p>Suppose you have a variable called <code dir="ltr">sales</code> that is dimensioned by a hierarchical dimension named <code dir="ltr">time</code>, a dimension named <code dir="ltr">product</code>, a dimension named <code dir="ltr">timelevelnames</code> that contains the names of the levels of <code dir="ltr">time</code> (for example, <code dir="ltr">Quarter</code> and <code dir="ltr">Year</code>), and a relation named <code dir="ltr">time.levelrels</code> that relates the values of <code dir="ltr">time</code> to the values of <code dir="ltr">timelevelnames</code>. Assume also that using the following statements you limit <code dir="ltr">product</code> to <code dir="ltr">Womens - Trousers</code> and time to quarters from <code dir="ltr">Q4-1999</code> to present.</p>
<pre dir="ltr">LIMIT product TO &#39;Womens - Trousers&#39;
LIMIT timelevelnames TO &#39;Quarter&#39;
LIMIT time TO time.levelrels
LIMIT time REMOVE &#39;Q1-1999&#39; &#39;Q2-1999&#39; &#39;Q3-1999&#39;
</pre>
<p>After you have limited <code dir="ltr">product</code> and <code dir="ltr"><span class="codeinlinebold">sales</span></code>, you issue the following report statement.</p>
<pre dir="ltr">REPORT DOWN time sales -
HEADING &#39;Running Yearly\nTotal&#39; MOVINGTOTAL(sales, -4, 0, 1, time, -
     LEVELREL time.levelrels) -
HEADING &#39;Minimum\nQuarter&#39; MOVINGMIN(sales, -4, 0, 1, time, -
     LEVELREL time.levelrels) -
HEADING &#39;Maximum\nQuarter&#39; MOVINGMAX(sales, -4, 0, 1, time, -
     LEVELREL time.levelrels) -
HEADING &#39;Average\nQuarter&#39; MOVINGAVERAGE(sales, -4, 0, 1, time, -
     LEVELREL time.levelrels)
</pre>
<p>The following report was created by the preceding statement.</p>
<pre dir="ltr">               -----------------------PRODUCT------------------------
               ------------------Womens - Trousers-------------------
                          Running
                          Yearly     Minimum    Maximum    Average
TIME           SALES      Total      Quarter    Quarter    Quarter
-------------- ---------- ---------- ---------- ---------- ----------
Q4-1999         416            1,386        233        480     346.50
Q1-2000         465            1,851        233        480     370.20
Q2-2000         351            1,969        257        480     393.80
Q3-2000         403            2,115        351        480     423.00
Q4-2000         281            1,916        281        465     383.20
Q1-2001         419            1,919        281        465     383.80
Q2-2001         349            1,803        281        419     360.60
Q3-2001         467            1,919        281        467     383.80
Q4-2001         484            2,000        281        484     400.00
Q1-2002         362            2,081        349        484     416.20
Q2-2002         237            1,899        237        484     379.80
Q3-2002         497            2,047        237        497     409.40
Q4-2002         390            1,970        237        497     394.00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79215"></a>
<div id="OLADM606" class="refsect1">
<h2 class="refsect1">MOVINGMAX</h2>
<p><a id="sthref2495"></a><a id="sthref2496"></a><a id="sthref2497"></a><a id="sthref2498"></a>The MOVINGMAX function (abbreviated MVMAX) returns a series of maximum values of a dimensioned variable or expression over a specified dimension. For each dimension value in status, MOVINGMAX searches the data for the maximum value in the range specified, relative to the current dimension value.</p>
<p>When the variable or expression has only the specified dimension, MOVINGMAX produces a single series of maximum values, one for each dimension value in the status. When the variable or expression has dimensions other than the one specified, MOVINGMAX produces a separate series of maximum values for each combination of values in the status list of the other dimensions</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2499"></a>Return Value</p>
<p>DECIMAL when the data type of <span class="italic">expression</span> is DECIMAL or SHORT; otherwise, NUMBER.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2500"></a>Syntax</p>
<p class="synopsis">MOVINGMAX(<span class="italic">expression</span>,&nbsp;<span class="italic">start</span>,&nbsp;<span class="italic">stop</span>,&nbsp;<span class="italic">step</span>,&nbsp;[<span class="italic">dimension&nbsp;</span>[STATUS|<span class="italic">limit-clause</span>]])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2501"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>A numeric variable or calculation from whose values you want to find the maximum values; for example, <code dir="ltr">units</code> or <code dir="ltr">sales-expense</code>.</p>
</dd>
<dt><span class="italic">start</span></dt>
<dt><span class="italic">stop</span></dt>
<dd>
<p>Integer values that specify the range of values over which you want to find the maximum values. The value of start specifies the beginning of the range. The value of <span class="italic">stop</span> specifies the end of the range. Specify the values of start and stop relative to the current value of <span class="italic">dimension</span>. To specify a negative position for start or <span class="italic">stop</span> precede the value with a comma. Thus, you specify zero (<code dir="ltr">0</code>) for the current dimension value, and <code dir="ltr">-1</code> for the value preceding the current value. (See also <a href="#CHDGBJBD">&#34;How the Moving Functions Handle Out-of-Range and NA Values&#34;</a>.)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
By default this function uses the default status list when identifying the range of values to average. You can specify either the STATUS or <span class="italic">limit-clause</span> phrase to change this behavior.</div>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you want to range to the end of status, for convenience and to document your intent, specify the value of <span class="italic">stop</span> as <a href="#g1054016">OBJ</a> function with the DIMMAX keyword</div>
</dd>
<dt><span class="italic">step</span></dt>
<dd>
<p>A positive whole number that specifies whether to search every value in the range, every other value, every third value, and so on. A value of <code dir="ltr">1</code> for step means search every value. A value of <code dir="ltr">2</code> means check the first value, the third value, the fifth value, and so on. For example, when the current month is <code dir="ltr">Jun96</code> and the <span class="italic">start</span> and <span class="italic">stop</span> values are <code dir="ltr">-3</code> and <code dir="ltr">3</code>, a <span class="italic">step</span> value of <code dir="ltr">2</code> means search the months <code dir="ltr">Mar96</code>, <code dir="ltr">May96</code>, <code dir="ltr">Jul96</code>, and <code dir="ltr">Sep96</code> and return the maximum value that occurs in one of those four months.</p>
</dd>
<dt>dimension</dt>
<dd>
<p>The dimension over which the moving maximum is calculated. While this can be any dimension, it is typically a hierarchical time dimension of type TEXT that is limited to a single level (for example, the month or year level) or a dimension with a type of DAY, WEEK, MONTH, Quarter, or YEAR.</p>
<p>When <span class="italic">expression</span> has a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR and you want MOVINGMAX to use that dimension, you can omit the dimension argument.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Specifies that MOVINGMAX uses the values specified by a <a href="#i78807">LIMIT function</a> or those specified with the same syntax as any of the <span class="italic">limit-clause</span> arguments in the various forms of the LIMIT command (that is, the syntax of the LIMIT command after the <span class="italic">limit-type</span> argument such as &#34;TO&#34;). For the syntax of these arguments, see <a href="dml_commands_2.htm#i1019733">LIMIT (using values) command</a>, <a href="dml_commands_2.htm#i1019738">LIMIT using LEVELREL command</a>, <a href="dml_commands_2.htm#i1019742">LIMIT (using parent relation)</a>, <a href="dml_commands_2.htm#i1019747">LIMIT (using related dimension) command</a>, <a href="dml_commands_2.htm#i1019753">LIMIT NOCONVERT command</a>, and <a href="dml_commands_2.htm#i1019757">LIMIT command (using POSLIST)</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2502"></a>Examples</p>
<p>For an example of calculating maximum sales, see <a href="#i1004810">Example 8-31, &#34;Calculating a Moving Average&#34;</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79220"></a>
<div id="OLADM607" class="refsect1">
<h2 class="refsect1">MOVINGMIN</h2>
<p><a id="sthref2503"></a><a id="sthref2504"></a><a id="sthref2505"></a><a id="sthref2506"></a>The MOVINGMIN function (abbreviated MVMIN) returns a series of minimum values for the values of a dimensioned variable or expression over a specified dimension. For each dimension value in status, MOVINGMIN searches the data for the minimum value in the range specified, relative to the current dimension value.</p>
<p>When the variable or expression has only the specified dimension, MOVINGMIN produces a single series of minimum values, one for each dimension value in the status. When the variable or expression has dimensions other than the one specified, MOVINGMIN produces a separate series of minimum values for each combination of values in the status list of the other dimensions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2507"></a>Return Value</p>
<p>DECIMAL when the data type of <span class="italic">expression</span> is DECIMAL or SHORT; otherwise, NUMBER.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2508"></a>Syntax</p>
<p class="synopsis">MOVINGMIN(<span class="italic">expression</span>,&nbsp;<span class="italic">start</span>,&nbsp;<span class="italic">stop</span>,&nbsp;<span class="italic">step</span>,&nbsp;[<span class="italic">dimension&nbsp;</span>[STATUS|<span class="italic">limit-clause</span>]])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2509"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>A numeric variable or calculation from whose values you want to find the minimum values; for example, UNITS or SALES-EXPENSE.</p>
</dd>
<dt><span class="italic">start</span></dt>
<dt><span class="italic">stop</span></dt>
<dd>
<p>Integer values that specify the range of values over which you want to find minimum values. The value of start specifies the beginning of the range. The value of <span class="italic">stop</span> specifies the end of the range. Specify the values of start and stop relative to the current value of <span class="italic">dimension</span>. To specify a negative position for start or <span class="italic">stop</span> precede the value with a comma. Thus, you specify zero (<code dir="ltr">0</code>) for the current dimension value, and <code dir="ltr">-1</code> for the value preceding the current value. (See also <a href="#CHDGBJBD">&#34;How the Moving Functions Handle Out-of-Range and NA Values&#34;</a>.)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
By default this function uses the default status list when identifying the range of values to average. You can specify either the STATUS or <span class="italic">limit-clause</span> phrase to change this behavior.</div>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you want to range to the end of status, for convenience and to document your intent, specify the value of <span class="italic">stop</span> as <a href="#g1054016">OBJ</a> function with the DIMMAX keyword</div>
</dd>
<dt><span class="italic">step</span></dt>
<dd>
<p>A positive whole number that specifies whether to search every value in the range, or every other value, or every third value, and so on. A value of <code dir="ltr">1</code> for step means search every value. A value of <code dir="ltr">2</code> means check the first value, the third value, the fifth value, and so on. For example, when the current month is <code dir="ltr">Jun96</code> and the <span class="italic">start</span> and <span class="italic">stop</span> values are <code dir="ltr">-3</code> and <code dir="ltr">3</code>, a <span class="italic">step</span> value of <code dir="ltr">2</code> means search the months <code dir="ltr">Mar96</code>, <code dir="ltr">May96</code>, <code dir="ltr">Jul96</code> and <code dir="ltr">Sep96</code> and return the minimum value that occurs in one of those four months.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The dimension over which the moving minimum is calculated. While this can be any dimension, it is typically a hierarchical time dimension of type TEXT that is limited to a single level (for example, the month or year level) or a dimension with a type of DAY, WEEK, MONTH, Quarter, or YEAR.</p>
<p>When <span class="italic">expression</span> has a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR and you want MOVINGMIN to use that dimension, you can omit the <span class="italic">dimension</span> argument.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Specifies that MOVINGMIN should use the current status list (that is, only the dimension values currently in status in their current status order) when calculating the moving minimum.</p>
</dd>
<dt><span class="italic">limit-clause</span></dt>
<dd>
<p>Specifies that MOVINGMIN uses the values specified by a <a href="#i78807">LIMIT function</a> or those specified with the same syntax as any of the <span class="italic">limit-clause</span> arguments in the various forms of the LIMIT command (that is, the syntax of the LIMIT command after the <span class="italic">limit-type</span> argument such as &#34;TO&#34;). For the syntax of these arguments, see <a href="dml_commands_2.htm#i1019733">LIMIT (using values) command</a>, <a href="dml_commands_2.htm#i1019738">LIMIT using LEVELREL command</a>, <a href="dml_commands_2.htm#i1019742">LIMIT (using parent relation)</a>, <a href="dml_commands_2.htm#i1019747">LIMIT (using related dimension) command</a>, <a href="dml_commands_2.htm#i1019753">LIMIT NOCONVERT command</a>, and <a href="dml_commands_2.htm#i1019757">LIMIT command (using POSLIST)</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2510"></a>Examples</p>
<p>For an example of calculating minimum sales, see <a href="#i1004810">Example 8-31, &#34;Calculating a Moving Average&#34;</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79225"></a>
<div id="OLADM608" class="refsect1">
<h2 class="refsect1">MOVINGTOTAL</h2>
<p><a id="sthref2511"></a><a id="sthref2512"></a><a id="sthref2513"></a><a id="sthref2514"></a>The MOVINGTOTAL function (abbreviated MVTOT) computes a series of totals for the values of a dimensioned variable or expression over a specified dimension. For each dimension value in status, MOVINGTOTAL computes the total of the data in the range specified, relative to the current dimension value.</p>
<p>When the variable or expression has only the specified dimension, MOVINGTOTAL produces a single series of totals, one for each dimension value in the status. When the variable or expression has dimensions other than the one specified, MOVINGTOTAL produces a separate series of totals for each combination of values in the status list of the other dimensions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2515"></a>Return Value</p>
<p>DECIMAL when the data type of <span class="italic">expression</span> is DECIMAL or SHORT; otherwise, NUMBER.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2516"></a>Syntax</p>
<p class="synopsis">MOVINGTOTAL(<span class="italic">expression</span>,&nbsp;<span class="italic">start</span>,&nbsp;<span class="italic">stop</span>,&nbsp;<span class="italic">step</span>,&nbsp;[<span class="italic">dimension&nbsp;</span>[STATUS|<span class="italic">limit-clause</span>]])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2517"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>A numeric variable or calculation whose values you want to total; for example, UNITS or SALES-EXPENSE.</p>
</dd>
<dt><span class="italic">start</span></dt>
<dt><span class="italic">stop</span></dt>
<dd>
<p>Integer values that specify the range of values over which you want to total. The value of start specifies the beginning of the range. The value of <span class="italic">stop</span> specifies the end of the range. Specify the values of start and stop relative to the current value of <span class="italic">dimension</span>. To specify a negative position for start or <span class="italic">stop</span> precede the value with a comma. Thus, you specify zero (<code dir="ltr">0</code>) for the current dimension value, and <code dir="ltr">-1</code> for the value preceding the current value. (See also <a href="#CHDGBJBD">&#34;How the Moving Functions Handle Out-of-Range and NA Values&#34;</a>.)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
By default this function uses the default status list when identifying the range of values to average. You can specify either the STATUS or <span class="italic">limit-clause</span> phrase to change this behavior.</div>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you want to range to the end of status, for convenience and to document your intent, specify the value of <span class="italic">stop</span> as <a href="#g1054016">OBJ</a> function with the DIMMAX keyword</div>
</dd>
<dt><span class="italic">step</span></dt>
<dd>
<p>A positive whole number that specifies whether to total over every value in the range, every other value, every third value, and so on. A value of <code dir="ltr">1</code> for <span class="italic">step</span> means total over every value. A value of <code dir="ltr">2</code> means total over the first value, the third value, the fifth value, and so on. When the current month is <code dir="ltr">Jun96</code> and the <span class="italic">start</span> and <span class="italic">stop</span> values are <code dir="ltr">-3</code> and <code dir="ltr">3</code>, a <span class="italic">step</span> value of <code dir="ltr">2</code> means total over <code dir="ltr">Mar96</code>, <code dir="ltr">May96</code>, <code dir="ltr">Jul96</code>, and <code dir="ltr">Sep96</code>.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The dimension over which the moving total is calculated. While this can be any dimension, it is typically a time dimension.</p>
<p>When <span class="italic">expression</span> has a dimension with a type of DAY, WEEK, MONTH, QUARTER, or YEAR and you want MOVINGTOTAL to use that dimension, you can omit the <span class="italic">dimension</span> argument.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Specifies that MOVINGTOTAL should use the current status list (that is, only the dimension values currently in status in their current status order) when calculating the moving total.</p>
</dd>
<dt><span class="italic">limit-clause</span></dt>
<dd>
<p>Specifies that MOVINGTOTAL uses the values specified by a <a href="#i78807">LIMIT function</a> or those specified with the same syntax as any of the <span class="italic">limit-clause</span> arguments in the various forms of the LIMIT command (that is, the syntax of the LIMIT command after the <span class="italic">limit-type</span> argument such as &#34;TO&#34;). For the syntax of these arguments, see <a href="dml_commands_2.htm#i1019733">LIMIT (using values) command</a>, <a href="dml_commands_2.htm#i1019738">LIMIT using LEVELREL command</a>, <a href="dml_commands_2.htm#i1019742">LIMIT (using parent relation)</a>, <a href="dml_commands_2.htm#i1019747">LIMIT (using related dimension) command</a>, <a href="dml_commands_2.htm#i1019753">LIMIT NOCONVERT command</a>, and <a href="dml_commands_2.htm#i1019757">LIMIT command (using POSLIST)</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2518"></a>Examples</p>
<p>For an example of calculating a moving total sales, see <a href="#i1004810">Example 8-31, &#34;Calculating a Moving Average&#34;</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBDHEC"></a>
<div id="OLADM609" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">NA2</h2>
<p>Used for debugging and testing variables defined with null tracking, the <a id="sthref2519"></a><a id="sthref2520"></a>NA2 function returns an NA value that takes the NA2 bit into consideration.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_commands_1.htm#BGECIBHD">&#34;NA2 Bits and Null Tracking&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2521"></a>Return Value</p>
<p>An NA value with the NA flag set to TRUE.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2522"></a>Syntax</p>
<p class="synopsis">NA2</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2523"></a>Examples</p>
<p>See <a href="dml_commands_1.htm#BGEEHAEJ">Example 9-104, &#34;Defining a Variable with Null Tracking&#34;</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79235"></a>
<div id="OLADM610" class="refsect1">
<h2 class="refsect1">NAFILL</h2>
<p><a id="sthref2524"></a><a id="sthref2525"></a>The NAFILL function returns the values of the source expression with any <code dir="ltr">NA</code> values replaced with the specified fill expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2526"></a>Return Value</p>
<p>The value returned is the same data type as <span class="italic">source-expression</span>. When the fill and source expressions do not have the same data type, Oracle OLAP converts the fill expression to the data type of the source expression when possible. Otherwise, an error is produced. When both the source and fill expressions equal <code dir="ltr">NA</code>, then NAFILL returns <code dir="ltr">NA</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2527"></a>Syntax</p>
<p class="synopsis">NAFILL(<span class="italic">source-expression&nbsp;fill-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2528"></a>Parameters</p>
<dl>
<dt><span class="italic">source-expression</span></dt>
<dd>
<p>The expression being evaluated. For values of <span class="italic">source-expression</span> that do not equal <code dir="ltr">NA</code>, NAFILL returns the corresponding values of <span class="italic">source-expression</span>. <span class="italic">Source-expression</span> determines the dimensions and data type of the result.</p>
</dd>
<dt><span class="italic">fill-expression</span></dt>
<dd>
<p>The expression to be substituted in the return value. <span class="italic">Fill-expression</span> must have the same data type as <span class="italic">source-expression</span>. <span class="italic">Fill-expression</span> is only evaluated for values of <span class="italic">source-expression</span> that equal <code dir="ltr">NA</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2529"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1781"></a>Functions in the Fill Expression</p>
<p>You can use any functions in the fill expression if they return the same data type as the source expression.</p>
<p class="subhead2"><a id="OLADM1782"></a>NATRIGGER Takes Precedence Over NAFILL</p>
<p>Oracle OLAP evaluates an $NATRIGGER property expression before applying the NAFILL function. When the $NATRIGGER expression is <code dir="ltr">NA</code>, then the NAFILL function has an effect.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2530"></a>Examples</p>
<div id="OLADM1783" class="example">
<p class="titleinexample"><a id="sthref2531"></a>Example 8-32 Filling NA Values with Zeros</p>
<p>Suppose you have <code dir="ltr">NA</code> values in the variable <code dir="ltr">sales</code> and you want to calculate an average that counts those values as zeros. Ordinarily, AVERAGE ignores <code dir="ltr">NA</code> values and does not count them in the number of values being averaged. You can use NAFILL inside the AVERAGE function to temporarily treat those values as zeros so the NA values count in calculating the average.</p>
<pre dir="ltr">REPORT AVERAGE(NAFILL(sales 0.0))
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCHAEF"></a>
<div id="OLADM611" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">NAFLAG</h2>
<p>Used for debugging and testing variables defined with null tracking, the function<a id="sthref2532"></a><a id="sthref2533"></a> identifies if a value is a NA2 value or a non-NA value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_commands_1.htm#BGECIBHD">&#34;NA2 Bits and Null Tracking&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2534"></a>Return Values</p>
<p>INTEGER</p>
<p><code dir="ltr">0</code> for a non-NA value, <code dir="ltr">2</code> if the NA value is an NA2 value, or <code dir="ltr">1</code> for all other NA values</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2535"></a>Syntax</p>
<p class="synopsis">NAFLAG (<span class="italic">expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2536"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>An OLAP DML expression.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2537"></a>Examples</p>
<p>See <a href="dml_commands_1.htm#BGEEHAEJ">Example 9-104, &#34;Defining a Variable with Null Tracking&#34;</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79260"></a>
<div id="OLADM612" class="refsect1">
<h2 class="refsect1">NEW_TIME</h2>
<p><a id="sthref2538"></a>The NEW_TIME function converts a date and time from one time zone to another.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2539"></a>Return Value</p>
<p>DATETIME</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2540"></a>Syntax</p>
<p class="synopsis">NEW_TIME(<span class="italic">datetime-exp&nbsp;this_zone&nbsp;new_zone</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2541"></a>Parameters</p>
<dl>
<dt><span class="italic">this_zone</span></dt>
<dd>
<p>A text expression that indicates the time zone from which you want to convert <span class="italic">datetime-exp</span>. It must be a valid time zone, as listed in the following table.</p>
</dd>
<dt><span class="italic">new_zone</span></dt>
<dd>
<p>A text expression that indicates the time zone into which you want to convert <span class="italic">datetime-exp</span>. It is the time zone of the return value. It must be a valid time zone, as listed in <a href="#i1013415">Table 8-1, &#34;Time Zones&#34;</a>.</p>
</dd>
</dl>
<div id="OLADM1784" class="tblformal">
<p class="titleintable"><a id="sthref2542"></a><a id="sthref2543"></a>Table 8-1 <a id="i1013415"></a><span class="bolditalic">Time Zones</span></p>
<table class="cellalignment3618" title="Time Zones" summary="This table outlines the keywords that you can specify for tne new_zone parameter of NEW_TIME." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t25">AST</th>
<th class="cellalignment3616" id="r1c2-t25">Atlantic Standard Time</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t25" headers="r1c1-t25">
<p>ADT</p>
</td>
<td class="cellalignment3617" headers="r2c1-t25 r1c2-t25">
<p>Atlantic Daylight Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t25" headers="r1c1-t25">
<p>BST</p>
</td>
<td class="cellalignment3617" headers="r3c1-t25 r1c2-t25">
<p>Bering Standard Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t25" headers="r1c1-t25">
<p>BDT</p>
</td>
<td class="cellalignment3617" headers="r4c1-t25 r1c2-t25">
<p>Bering Daylight Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t25" headers="r1c1-t25">
<p>CST</p>
</td>
<td class="cellalignment3617" headers="r5c1-t25 r1c2-t25">
<p>Central Standard Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t25" headers="r1c1-t25">
<p>CDT</p>
</td>
<td class="cellalignment3617" headers="r6c1-t25 r1c2-t25">
<p>Central Daylight Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t25" headers="r1c1-t25">
<p>EST</p>
</td>
<td class="cellalignment3617" headers="r7c1-t25 r1c2-t25">
<p>Eastern Standard Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t25" headers="r1c1-t25">
<p>EDT</p>
</td>
<td class="cellalignment3617" headers="r8c1-t25 r1c2-t25">
<p>Eastern Daylight Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t25" headers="r1c1-t25">
<p>GMT</p>
</td>
<td class="cellalignment3617" headers="r9c1-t25 r1c2-t25">
<p>Greenwich Mean Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r10c1-t25" headers="r1c1-t25">
<p>HST</p>
</td>
<td class="cellalignment3617" headers="r10c1-t25 r1c2-t25">
<p>Alaska-Hawaii Standard Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r11c1-t25" headers="r1c1-t25">
<p>HDT</p>
</td>
<td class="cellalignment3617" headers="r11c1-t25 r1c2-t25">
<p>Alaska-Hawaii Daylight Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r12c1-t25" headers="r1c1-t25">
<p>MST</p>
</td>
<td class="cellalignment3617" headers="r12c1-t25 r1c2-t25">
<p>Mountain Standard Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r13c1-t25" headers="r1c1-t25">
<p>MDT</p>
</td>
<td class="cellalignment3617" headers="r13c1-t25 r1c2-t25">
<p>Mountain Daylight Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r14c1-t25" headers="r1c1-t25">
<p>NST</p>
</td>
<td class="cellalignment3617" headers="r14c1-t25 r1c2-t25">
<p>Newfoundland Standard Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r15c1-t25" headers="r1c1-t25">
<p>PST</p>
</td>
<td class="cellalignment3617" headers="r15c1-t25 r1c2-t25">
<p>Pacific Standard Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r16c1-t25" headers="r1c1-t25">
<p>PDT</p>
</td>
<td class="cellalignment3617" headers="r16c1-t25 r1c2-t25">
<p>Pacific Daylight Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r17c1-t25" headers="r1c1-t25">
<p>YST</p>
</td>
<td class="cellalignment3617" headers="r17c1-t25 r1c2-t25">
<p>Yukon Standard Time</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r18c1-t25" headers="r1c1-t25">
<p>YDT</p>
</td>
<td class="cellalignment3617" headers="r18c1-t25 r1c2-t25">
<p>Yukon Daylight Time</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2544"></a>Examples</p>
<div id="OLADM1785" class="example">
<p class="titleinexample"><a id="sthref2545"></a>Example 8-33 Using the Current Time of day</p>
<p>The SYSDATE function returns the current date and time to the NEW_TIME function.</p>
<pre dir="ltr">SHOW new_time(SYSDATE &#39;EST&#39; &#39;PST&#39;)
</pre>
<p>When the date and time in Eastern Standard Time are October 20, 2000, at 1:20 A.M., then the date in Pacific Standard Time, which is three hours earlier, is October&nbsp;19,&nbsp;2000. Because SYSDATE uses the format specified by NLS_DATE_FORMAT, which by default only shows the date, the time is not displayed.</p>
<pre dir="ltr">19-OCT-00
</pre></div>
<!-- class="example" -->
<div id="OLADM1786" class="example">
<p class="titleinexample"><a id="sthref2546"></a>Example 8-34 Specifying the Time of day</p>
<p>In the following example, the TO_DATE function converts a text string to a valid date and time. The TO_CHAR function includes a date format that temporarily overrides the date format specified by the NLS_DATE_FORMAT option.</p>
<pre dir="ltr">SHOW TO_CHAR(NEW_TIME(TO_DATE(&#39;11-27-00 22:15:00&#39;, &#39;MM-DD-YY HH24:MI:SS&#39;), -
   &#39;HST&#39; &#39;PST&#39;) &#39;MM-DD-YY HH24:MI:SS&#39;)
</pre>
<p>This statement converts November 27 at 10:15 P.M. (22:15:00) Alaska-Hawaii Standard Time to November 28 at 12:15 A.M. (00:15:00) Pacific Standard Time. The date format specified in the TO_CHAR function allows the time to be displayed along with the date.</p>
<pre dir="ltr">11-28-00 00:15:00
</pre>
<p>Alternatively, you can change the value of NLS_DATE_FORMAT.</p>
<pre dir="ltr">NLS_DATE_FORMAT = &#39;MM-DD-YY HH24:MI:SS&#39;
</pre>
<p>Then this statement produces the same result, without requiring the use of TO_CHAR.</p>
<pre dir="ltr">SHOW NEW_TIME(TO_DATE(&#39;11-27-00 22:15:00&#39;, &#39;MM-DD-YY HH24:MI:SS&#39;), -
   &#39;HST&#39; &#39;PST&#39;)
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79265"></a>
<div id="OLADM613" class="refsect1">
<h2 class="refsect1">NEXT_DAY</h2>
<p><a id="sthref2547"></a>The NEXT_DAY function returns the date of the first instance of a particular day of the week that follows the specified date.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2548"></a>Return Value</p>
<p>DATETIME</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2549"></a>Syntax</p>
<p class="synopsis">NEXT_DAY(<span class="italic">datetime-expression, weekday</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2550"></a>Parameters</p>
<dl>
<dt><span class="italic">datetime-expression</span></dt>
<dd>
<p>An expression that has the DATETIME data type.</p>
</dd>
<dt><span class="italic">weekday</span></dt>
<dd>
<p>A text expression that identifies a day of the week (for example, Monday). Valid names are controlled by the NLS_DATE_LANGUAGE option.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2551"></a>Examples</p>
<div id="OLADM1787" class="example">
<p class="titleinexample"><a id="sthref2552"></a>Example 8-35 Getting a Future Date</p>
<p>The following statement returns the date of the first Tuesday following today&#39;s date.</p>
<pre dir="ltr">SHOW NEXT_DAY(SYSDATE, &#39;Tues&#39;)
</pre>
<p>When today is Friday, September 8, 2000, then the following Tuesday is</p>
<pre dir="ltr">11-SEP-00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCAIEF"></a>
<div id="OLADM1788" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">NLS_CHARSET_ID</h2>
<p>The NLS_CHARSET_ID<a id="sthref2553"></a><a id="sthref2554"></a><a id="sthref2555"></a> function returns the character set identification number corresponding to a specified character set name.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDEAFHB">NLS_CHARSET_NAME</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2556"></a>Return Value</p>
<p>INTEGER when you specify a valid value for the name of the character set, a number; otherwise NA.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2557"></a>Syntax</p>
<p class="synopsis">NLS_CHARSET_ID (<span class="italic">charset_name</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2558"></a>Parameters</p>
<dl>
<dt>charset_name</dt>
<dd>
<p>A VARCHAR2 text expression that is a valid character set name or one of the following values:</p>
<ul>
<li>
<p>CHAR_CS which specifies that the function return the database character set identification number of the server.</p>
</li>
<li>
<p>NCHAR_CS which specifies that the function return the national character set id number of the server.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG" href="../NLSPG/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a> for a list of character set names</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDEAFHB"></a>
<div id="OLADM1789" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">NLS_CHARSET_NAME</h2>
<p>The NLS_CHARSET_NAME <a id="sthref2559"></a><a id="sthref2560"></a><a id="sthref2561"></a>function returns the name of the character set corresponding to a specified character set identification number.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCAIEF">NLS_CHARSET_ID</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2562"></a>Return Value</p>
<p>When the number is recognized as a valid character, VARCHAR2; otherwise, NA.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2563"></a>Syntax</p>
<p class="synopsis">NSL_CHARSET_NAME (<span class="italic">number-exp</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2564"></a>Parameters</p>
<dl>
<dt><span class="italic">number-exp</span></dt>
<dd>
<p>A number that is the character set ID.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG" href="../NLSPG/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a> for a list of character set identifiers</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCBJJC"></a>
<div id="OLADM614" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">NLSSORT</h2>
<p>The <a id="sthref2565"></a>NLSSORT function returns a string of bytes used to sort a text string. You can use this function to specify sorting and comparison operations based on a linguistic sort sequence rather than on the binary value of a string.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG" href="../NLSPG/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2566"></a>Return Value</p>
<p>RAW</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2567"></a>Syntax</p>
<p class="synopsis">NLSSORT(<span class="italic">char</span> [, &#39;NLS_SORT = <span class="italic">sort</span>[_ai |_ci]&#39; ])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2568"></a>Parameters</p>
<dl>
<dt><span class="italic">char</span></dt>
<dd>
<p>A text expression.</p>
</dd>
<dt><span class="italic">sort</span></dt>
<dd>
<p>An NLS language.</p>
</dd>
<dt>_ai</dt>
<dd>
<p>Specifies an accent-insensitive sort.</p>
</dd>
<dt>_ci</dt>
<dd>
<p>Specifies a case-insensitive sort.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2569"></a>Examples</p>
<div id="OLADM1790" class="example">
<p class="titleinexample"><a id="sthref2570"></a>Example 8-36 Determining the Bytes by Which Values Are Sorted Based on Linguistic Sort Sequence</p>
<p>Assume you want to know the bytes by which a single value is sorted in the German language without regard to case. To do this you can execute the following SHOW command.</p>
<pre dir="ltr">show  NLSSORT(&#39;Mary Ann&#39; , &#39;NLS_SORT = German_ai&#39; )
501464820114555500010101010201010100
</pre>
<p>To see this same data for all of the values in a text dimension named <code dir="ltr">myname</code> are sorted, you can execute the following statement.</p>
<pre dir="ltr">REPORT NLSSORT(MYname , &#39;NLS_SORT = German_ci&#39; )
 
MYNAME           NLSSORT(MYNAME , &#39;NLS_SORT = German_ci&#39;)
---------------- ----------------------------------------
Adelaid          1423284B143C23000101010101010100
Maryann          50146482145555000101010101010100
Mary Ann         501464820114555500010101010201010100
Donna            235A55551400010101010100
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79329"></a>
<div id="OLADM615" class="refsect1">
<h2 class="refsect1">NONE</h2>
<p><a id="sthref2571"></a>The NONE function returns <code dir="ltr">YES</code> when none of the values of a Boolean expression are <code dir="ltr">TRUE</code>. It returns <code dir="ltr">NO</code> when any value of the expression is <code dir="ltr">TRUE</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2572"></a>Return Value</p>
<p>BOOLEAN or <code dir="ltr">NA</code> if all the values of the expression are <code dir="ltr">NA</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2573"></a>Syntax</p>
<p class="synopsis">NONE(<span class="italic">boolean-expression&nbsp;</span>[CACHE] [<span class="italic">dimension</span>...])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2574"></a>Parameters</p>
<dl>
<dt><span class="italic">boolean-expression</span></dt>
<dd>
<p>The Boolean expression to be evaluated.</p>
</dd>
<dt>CACHE</dt>
<dd>
<p>Specifies slightly different internal behavior. Specify this keyword only when the original performance is extremely slow.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The name of a dimension of the result; or, the name of a relation between one dimension of <span class="italic">boolean-expression</span> and another dimension that you want as a dimension of the result.</p>
<p>By default, NONE returns a single <code dir="ltr">YES</code> or <code dir="ltr">NO</code> value. When you indicate one or more dimensions for the result, NONE tests for <code dir="ltr">TRUE</code> values along the dimensions that are specified and returns an array of values. Each dimension must be either a dimension of <span class="italic">boolean-expression</span> or related to one of its dimensions.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you specify a dimension that is not an actual dimension of boolean-expression, but, instead, is dimension that is related to a dimension of boolean-expression and when there are multiple relations between the two dimensions, Oracle OLAP uses the default relation between the dimensions to perform the calculation. (See the <a href="dml_commands_2.htm#CACBJGDI">RELATION command</a> for more information on default relations.) When you do not want Oracle OLAP to use this default relation, specify the related dimension by specifying the name of a specify relation.</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2575"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1791"></a>The Effect of NASKIP on NONE</p>
<p>NONE is affected by the NASKIP option. When NASKIP is set to <code dir="ltr">YES</code> (the default), and all of the values in the expression are <code dir="ltr">NA</code> NONE returns <code dir="ltr">NA</code>; if even one value is <span class="italic">not</span> <code dir="ltr">NA</code>, NONE ignores all of the <code dir="ltr">NA</code> values in the expression. When NASKIP is set to <code dir="ltr">NO</code>, NONE returns <code dir="ltr">NA</code> when any value of the expression is <code dir="ltr">NA</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2576"></a>Examples</p>
<div id="OLADM1792" class="example">
<p class="titleinexample"><a id="sthref2577"></a>Example 8-37 Testing for No True Values by District</p>
<p>Suppose you want to find out which districts had no months in which sales fell below $50,000. Use the NONE function to determine whether the Boolean expression (<code dir="ltr">SALES</code> <code dir="ltr">LT</code> <code dir="ltr">50000</code>) is <code dir="ltr">TRUE</code> for no months. To have the results dimensioned by district, specify <code dir="ltr">district</code> as the second argument to NONE.</p>
<pre dir="ltr">LIMIT product TO &#39;Sportswear&#39;
REPORT NONE(sales LT 50000, district)
</pre>
<p>The preceding statements produce the following output.</p>
<pre dir="ltr">               NONE(SALES
               LT 50000,
DISTRICT       DISTRICT)
-------------- ----------
Boston                 NO
Atlanta               YES
Chicago               YES
Dallas                YES
Denver                YES
Seattle                NO
</pre></div>
<!-- class="example" -->
<div id="OLADM1793" class="example">
<p class="titleinexample"><a id="sthref2578"></a>Example 8-38 Testing for No True Values by Region</p>
<p>You might also want to find out which regions had no months in which no districts had sportswear sales of less than $50,000. Because the <code dir="ltr">region</code> dimension is related to the <code dir="ltr">district</code> dimension, you can specify <code dir="ltr">region</code> instead of <code dir="ltr">district</code> as a dimension for the results of ANY.</p>
<pre dir="ltr">REPORT NONE(sales LT 50000, region)
</pre>
<p>The preceding statement produces the following output.</p>
<pre dir="ltr">               NONE(SALES
               LT 50000,
REGION          REGION)
-------------- ----------
East                   NO
Central               YES
West                   NO
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79334"></a>
<div id="OLADM616" class="refsect1">
<h2 class="refsect1">NORMAL</h2>
<p><a id="sthref2579"></a><a id="sthref2580"></a>The NORMAL function returns a random value from a normal distribution with a specified mean and standard deviation. The result returned by NORMAL is dimensioned by all the dimensions of the mean and standard deviation expressions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2581"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2582"></a>Syntax</p>
<p class="synopsis">NORMAL(<span class="italic">mean&nbsp;standard-deviation</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2583"></a>Parameters</p>
<dl>
<dt><span class="italic">mean</span></dt>
<dd>
<p>A numeric expression that represents the mean of a normal distribution. When <span class="italic">mean</span> is <code dir="ltr">NA</code>, NORMAL returns <code dir="ltr">NA</code>.</p>
</dd>
<dt><span class="italic">standard-deviation</span></dt>
<dd>
<p>A numeric expression that represents the standard deviation of a normal distribution. When <span class="italic">standard-deviation</span> is <code dir="ltr">NA</code>, NORMAL returns the mean.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2584"></a>Examples</p>
<div id="OLADM1794" class="example">
<p class="titleinexample"><a id="sthref2585"></a>Example 8-39 Showing Random Values</p>
<p>Each of the following examples shows a random number that might be returned from a normal distribution with a mean of 0 and a standard deviation of 1.</p>
<p>The first time you execute the following statement,</p>
<pre dir="ltr">SHOW NORMAL(0 1)
</pre>
<p>it might produce the following result.</p>
<pre dir="ltr">-0.75
</pre>
<p>However, when you execute the same statement again, it might produce the following result.</p>
<pre dir="ltr">0.87
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79344"></a>
<div id="OLADM617" class="refsect1">
<h2 class="refsect1">NPV</h2>
<p><a id="sthref2586"></a><a id="sthref2587"></a>The NPV function computes the net present value of a series of cash flow values.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2588"></a>Return Value</p>
<p>DECIMAL</p>
<p>The result returned by the NPV function is dimensioned by all the dimensions of <span class="italic">cashflows</span> except its time dimension. When <span class="italic">cashflows</span> is dimensioned only by the time dimension, NPV returns a single value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2589"></a>Syntax</p>
<p class="synopsis">NPV(<span class="italic">cashflows</span>,&nbsp;<span class="italic">discount-rate</span>,&nbsp;[<span class="italic">time-dimension])</span></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2590"></a>Parameters</p>
<dl>
<dt><span class="italic">cashflows</span></dt>
<dd>
<p>A numeric expression that is dimensioned by <span class="italic">time-dimension</span> and specifies the series of cash flow values.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
All cash flows are assumed to occur at the beginning of the time period with which they are associated. The cash flows are discounted back to the beginning of the earliest time period that appears in the current status of the time dimension. NPV ignores cash flows that corresponds to out-of-status dimension positions.</div>
</dd>
<dt><span class="italic">discount-rate</span></dt>
<dd>
<p>A numeric expression that specifies the interest rate for each period to be used to discount the cash flow values. It can either be a single value or an array of values with one or more non-time dimensions. Express the discount rate as a decimal quantity; for example, 8.25 percent as <code dir="ltr">.0825</code>.</p>
<p>NPV accepts any positive discount rate, and it also accepts a negative discount rate when the rate is greater than minus one (that is, rate <code dir="ltr">&gt;</code> <code dir="ltr">-1</code>). When you supply a negative rate, you must precede it with a comma.</p>
</dd>
<dt><span class="italic">time-dimension</span></dt>
<dd>
<p>A name that specifies the time dimension. When <span class="italic">cashflows</span> has a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR, NPV automatically uses that dimension, and you can omit the <span class="italic">time-dimension</span> argument.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2591"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1795"></a>NA Discount Rate</p>
<p>When the discount rate used to compute a result value equals <code dir="ltr">NA</code>, then that result value is <code dir="ltr">NA</code>.</p>
<p class="subhead2"><a id="OLADM1796"></a>Cash Flow Timing</p>
<p>Different assumptions about the intra-period timing of the cash flows, or the base time point for the present value calculations, can be accommodated by multiplying the result of the NPV function by the following quantity: one plus the discount rate, raised to an appropriate positive or negative power.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2592"></a>Examples</p>
<div id="OLADM1797" class="example">
<p class="titleinexample"><a id="sthref2593"></a>Example 8-40 Computing the Net Present Value</p>
<p>The following statements create a dimension called <code dir="ltr">project</code>, add values to it, and create a variable called <code dir="ltr">cflow</code>, which is dimensioned by <code dir="ltr">year</code> and <code dir="ltr">project</code>.</p>
<pre dir="ltr">DEFINE project DIMENSION TEXT
MAINTAIN project ADD &#39;a&#39; &#39;b&#39; &#39;c&#39; &#39;d&#39; &#39;e&#39;
DEFINE cflow VARIABLE DECIMAL &lt;project year&gt;
</pre>
<p>When you assign the following values to CFLOW,</p>
<pre dir="ltr">             ------------------------CFLOW----------------------
             -----------------------PROJECT---------------------
YEAR             a          b          c          d          e
------------ ---------- ---------- ---------- ---------- -------
Yr95           -200.00    -200.00    -300.00    -100.00  -200.00
Yr96            100.00     150.00     200.00      25.00    25.00
Yr97            100.00     400.00     200.00     100.00   200.00
</pre>
<p>then the following statement</p>
<pre dir="ltr">REPORT NPV(cflow, .08, year)
</pre>
<p>uses a discount rate of 8 percent to create the following report of the net present value of the <code dir="ltr">cflow</code> data.</p>
<pre dir="ltr">               NPV(CFLOW,
PROJECT        .08, YEAR)
-------------- ----------
a                  -21.67
b                  281.82
c                   56.65
d                    8.88
e                   -5.38
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1008018"></a>
<div id="OLADM618" class="refsect1">
<h2 class="refsect1">NULLIF</h2>
<p><a id="sthref2594"></a><a id="sthref2595"></a>The NULLIF function compares one expression with another and returns <code dir="ltr">NA</code> when the expressions are equal, or the base expression when they are not.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2596"></a>Return Value</p>
<p><code dir="ltr">NA</code> when the expressions are equal, or the base expression when they are not.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2597"></a>Syntax</p>
<p class="synopsis">NULLIF (<span class="italic">expr1</span> , <span class="italic">expr2</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2598"></a>Parameters</p>
<dl>
<dt><span class="italic">expr1</span></dt>
<dd>
<p>An expression. The base expression for the comparison.</p>
</dd>
<dt><span class="italic">expr2</span></dt>
<dd>
<p>An expression to compare to <span class="italic">expr1</span>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2599"></a>Examples</p>
<div id="OLADM1798" class="example">
<p class="titleinexample"><a id="sthref2600"></a>Example 8-41 Comparing Values Using NULLIF</p>
<pre dir="ltr">SHOW NULLIF(1, &#39;1&#39;)
NA
 
SHOW NULLIF(&#39;red&#39;, &#39;Red&#39;)
red
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1013094"></a>
<div id="OLADM619" class="refsect1">
<h2 class="refsect1">NUMBYTES</h2>
<p><a id="sthref2601"></a>The NUMBYTES function counts the number of bytes in a text expression. When the value is a multiline text value, NUMBYTES returns the total number of bytes in all the lines. The result returned by NUMBYTES has the same dimensions as the specified expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2602"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2603"></a>Syntax</p>
<p class="synopsis">NUMBYTES(<span class="italic">text-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2604"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The <code dir="ltr">TEXT</code> expression whose bytes are to be counted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2605"></a>Examples</p>
<div id="OLADM1799" class="example">
<p class="titleinexample"><a id="sthref2606"></a>Example 8-42 Counting the Bytes in the Longest Name</p>
<p>You would like to know the length of the names of your products so you can specify the appropriate width for the label column in a report. You can use the NUMBYTES function in combination with the LARGEST function to find the length of the longest label. Then use that value to set the column size. The following statements in a program find the longest name and use the byte count to format a report.</p>
<pre dir="ltr">firstcol = LARGEST(NUMBYTES(name.product))+1
LIMIT month TO FIRST 3
FOR product
   DO
     ROW WIDTH FIRSTCOL name.product WIDTH 6 ACROSS month - 
     FIRST 3: units
   DOEND
</pre>
<p>When the program is run, it produces the following output.</p>
<pre dir="ltr">3-Person Tents      200    203    269
Aluminum Canoes     347    400    482
Tennis Racquets     992  1,076  1,114
Warm-up Suits     1,096  1,214  1,294
Running Shoes     2,532  2,405  2,775 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79354"></a>
<div id="OLADM620" class="refsect1">
<h2 class="refsect1">NUMCHARS</h2>
<p><a id="sthref2607"></a>The NUMCHARS function counts the number of characters in a text expression. When the value is a multiline text value, NUMCHARS returns the total number of characters in all the lines. The result returned by NUMCHARS has the same dimensions as the specified expression.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you are using a multibyte character set, you can use the NULLIF function instead of the NUMCHARS function.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2608"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2609"></a>Syntax</p>
<p class="synopsis">NUMCHARS(<span class="italic">text-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2610"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The text expression whose characters are to be counted. NUMCHARS accepts either a TEXT or NTEXT argument. It does not perform an automatic conversion to either data type. It returns the information that is correct for the data type of the specified argument.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2611"></a>Examples</p>
<div id="OLADM1800" class="example">
<p class="titleinexample"><a id="sthref2612"></a>Example 8-43 Counting the Characters in the Longest Name</p>
<p>You would like to know the length of the names of your products so you can specify the appropriate width for the label column in a report. You can use the NUMCHARS function in combination with the LARGEST function to find the length of the longest label. Then use that value to set the column size. The following statements in a program find the longest name and use the character count to format a report.</p>
<pre dir="ltr">firstcol = LARGEST(NUMCHARS(name.product))+1
LIMIT month TO FIRST 3
FOR product
   DO
     ROW WIDTH FIRSTCOL name.product WIDTH 6 ACROSS month - 
     FIRST 3: units
   DOEND
</pre>
<p>When the program is run, it produces the following output.</p>
<pre dir="ltr">3-Person Tents      200    203    269
Aluminum Canoes     347    400    482
Tennis Racquets     992  1,076  1,114
Warm-up Suits     1,096  1,214  1,294
Running Shoes     2,532  2,405  2,775 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79359"></a>
<div id="OLADM621" class="refsect1">
<h2 class="refsect1">NUMLINES</h2>
<p><a id="sthref2613"></a>The NUMLINES function counts the number of lines in each value of a text expression. The result returned by NUMLINES has the same dimensions as the specified expression.</p>
<p>NUMLINES accepts either a TEXT or NTEXT argument. It does not perform an automatic conversion to either data type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2614"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2615"></a>Syntax</p>
<p class="synopsis">NUMLINES(<span class="italic">text-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2616"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The text expression whose lines are to be counted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2617"></a>Examples</p>
<div id="OLADM1801" class="example">
<p class="titleinexample"><a id="sthref2618"></a>Example 8-44 Counting the Number of Lines</p>
<p>In this example, you want to determine the number of lines in the multiline text variable LASTNAMES. The LASTNAMES variable has the following values.</p>
<pre dir="ltr">Adamson
Jones
Smith
Taylor
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW NUMLINES(lastnames)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">4 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGAABE"></a>
<div id="OLADM622" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">NUMTODSINTERVAL</h2>
<p><a id="sthref2619"></a>The NUMTODSINTERVAL function converts a number to a DSINTERVAL literal.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2620"></a>Syntax</p>
<p class="synopsis">NUMTODSINTERVAL (number, interval_unit)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2621"></a>Parameters</p>
<dl>
<dt><span class="italic">number</span></dt>
<dd>
<p>Any NUMBER value or an expression that can be implicitly converted to a NUMBER value.</p>
</dd>
<dt><span class="italic">interval_unit</span></dt>
<dd>
<p>A text value that specifies the unit of <span class="italic">number</span> and must resolve to one of the following string values: DAY, HOUR, MINUTE, or SECOND.</p>
<p><span class="italic">interval_unit</span> is case insensitive. Leading and trailing values within the parentheses are ignored. By default, the precision of the return is 9.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBHDBG"></a>
<div id="OLADM623" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">NUMTOYMINTERVAL</h2>
<p><a id="sthref2622"></a>The NUMTOYMNTERVAL function converts a number to a YMINTERVAL literal.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2623"></a>Syntax</p>
<p class="synopsis">NUMTOYMINTERVAL (number, interval_unit)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2624"></a>Parameters</p>
<dl>
<dt><span class="italic">number</span></dt>
<dd>
<p>Any NUMBER value or an expression that can be implicitly converted to a NUMBER value.</p>
</dd>
<dt><span class="italic">interval_unit</span></dt>
<dd>
<p>A text value that specifies the unit of <span class="italic">number</span> and must resolve to one of the following string values: YEAR or MONTH.</p>
<p><span class="italic">interval_unit</span> is case insensitive. Leading and trailing values within the parentheses are ignored. By default, the precision of the return is 9.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1008158"></a>
<div id="OLADM624" class="refsect1">
<h2 class="refsect1">NVL</h2>
<p><a id="sthref2625"></a><a id="sthref2626"></a>The NVL function replaces a <code dir="ltr">NA</code> value or an empty string with a string.</p>
<p>To evaluate a specified expression and replace a non-<code dir="ltr">NA</code> value or empty string with one value and a <code dir="ltr">NA</code> value with another, use NVL2.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2627"></a>Return Value</p>
<p>The specified replacement value when the value of the base expression is <code dir="ltr">NA</code>, or the base expression when the value of the base expression is not <code dir="ltr">NA</code>. The data type of the return value is always the same as the data type of the base expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2628"></a>Syntax</p>
<p class="synopsis">NVL (<span class="italic">exp</span> , <span class="italic">replacement-exp</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2629"></a>Parameters</p>
<dl>
<dt><span class="italic">expr</span></dt>
<dd>
<p>The expression to replace when it has a <code dir="ltr">NA</code> value or an empty string.</p>
</dd>
<dt><span class="italic">replacement-exp</span></dt>
<dd>
<p>The value with which you want to replace a <code dir="ltr">NA</code> value.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2630"></a>Examples</p>
<div id="OLADM1802" class="example">
<p class="titleinexample"><a id="sthref2631"></a>Example 8-45 Working with NVL</p>
<pre dir="ltr">SHOW NVL(&#39;First String&#39;, &#39;Second String&#39;)
First String
 
SHOW NVL(&#39;&#39;, &#39;Second String&#39;)
Second String
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1008091"></a>
<div id="OLADM625" class="refsect1">
<h2 class="refsect1">NVL2</h2>
<p><a id="sthref2632"></a><a id="sthref2633"></a>The NVL2 function returns one value when the value of a specified expression is not <code dir="ltr">NA</code> or an empty string, or another value when the value of the specified expression is an empty string or <code dir="ltr">NA</code>.</p>
<p>To replace a <code dir="ltr">NA</code> value or an empty string with a string, use NVL.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2634"></a>Return Value</p>
<p>The data type of the return value is always the data type of <span class="italic">expr2</span> (that is, the expression whose value is returned when the value of <span class="italic">expr1</span> is not <code dir="ltr">NA</code>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2635"></a>Syntax</p>
<p class="synopsis">NVL2 (<span class="italic">expr1</span> , <span class="italic">expr2</span> , <span class="italic">expr3</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2636"></a>Parameters</p>
<dl>
<dt><span class="italic">expr1</span></dt>
<dd>
<p>The expression whose value this function evaluates.</p>
</dd>
<dt><span class="italic">expr2</span></dt>
<dd>
<p>An expression whose value is returned when the value of <span class="italic">expr1</span> is not an empty string or <code dir="ltr">NA.</code></p>
</dd>
<dt><span class="italic">expr3</span></dt>
<dd>
<p>An expression whose value is returned when the value of <span class="italic">expr1</span> is <code dir="ltr">NA.</code></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2637"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1803"></a>Comparing Values of Different Data Types</p>
<p>When the data types of <span class="italic">expr2</span> and <span class="italic">expr3</span> are different, then the function converts <span class="italic">expr3</span> to the data type of <span class="italic">expr2</span> before comparing them.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2638"></a>Examples</p>
<div id="OLADM1804" class="example">
<p class="titleinexample"><a id="sthref2639"></a>Example 8-46 Working with NVL2</p>
<pre dir="ltr">SHOW NVL2(&#39;Which string?&#39;, &#39;First String&#39;, &#39;Second String&#39;)
First String
 
SHOW NVL2(&#39;&#39;, &#39;First String&#39;, &#39;Second String&#39;)
Second String
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1054016"></a>
<div id="OLADM626" class="refsect1">
<h2 class="refsect1">OBJ</h2>
<p><a id="sthref2640"></a><a id="sthref2641"></a><a id="sthref2642"></a><a id="sthref2643"></a>The OBJ function returns information about an analytic workspace object.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2644"></a>Return Value</p>
<p>The return value depends on the value specified for <span class="italic">choice</span>. Also, when <span class="italic">choice</span> is applicable to only a specific type of object, and you specify a different type of object for <span class="italic">object-name</span>, then OBJ returns <code dir="ltr">NA</code> unless otherwise noted.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2645"></a>Syntax</p>
<p class="synopsis">OBJ(<span class="italic">choice&nbsp;</span>[<span class="italic">object-name</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2646"></a>Parameters</p>
<dl>
<dt><span class="italic">object-name</span></dt>
<dd>
<p>A <code dir="ltr">TEXT</code> expression that is the name of the object that you want to retrieve information about.</p>
</dd>
<dt><span class="italic">choice</span></dt>
<dd>
<p>A keyword or keyword phrase which indicates the type of information you want. See <a href="#BAJICHIF">Table 8-2, &#34;Keywords for the choice argument of the OBJ Function&#34;</a> for the syntax, data type of the returned value and description of valid keywords.</p>
<div id="OLADM1805" class="tblformalwidemax">
<p class="titleintable"><a id="sthref2647"></a><a id="BAJICHIF"></a>Table 8-2 Keywords for the choice argument of the OBJ Function</p>
<table class="cellalignment3615" title="Keywords for the choice argument of the OBJ Function" summary="This table lists and describes the keywords that you can specify for the OBJ function." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t34">Keyword for choice</th>
<th class="cellalignment3616" id="r1c2-t34">Data Type</th>
<th class="cellalignment3616" id="r1c3-t34">Description of Returned Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t34" headers="r1c1-t34">
<p>ACQUIRED</p>
</td>
<td class="cellalignment3617" headers="r2c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r2c1-t34 r1c3-t34">
<p>Whether the specified object has been acquired for modification in multiwriter mode. For a partitioned variable, returns YES only when all of the partitions of that variable have been acquire.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t34" headers="r1c1-t34">
<p>ACQUIREDPARTITIONS</p>
</td>
<td class="cellalignment3617" headers="r3c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r3c1-t34 r1c3-t34">
<p>The names of the partitions of the variable specified by <span class="italic">object-name</span> that are acquired for modification in multiwriter mode.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t34" headers="r1c1-t34">
<p>AGGMAP</p>
</td>
<td class="cellalignment3617" headers="r4c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r4c1-t34 r1c3-t34">
<p>The specification of the specified aggmap.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t34" headers="r1c1-t34">
<p>AGGMAPLIST</p>
</td>
<td class="cellalignment3617" headers="r5c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r5c1-t34 r1c3-t34">
<p>The names of the aggmap objects in the specified <a id="sthref2648"></a><a id="sthref2649"></a>formula.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t34" headers="r1c1-t34">
<p>ALIASLIST</p>
</td>
<td class="cellalignment3617" headers="r6c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r6c1-t34 r1c3-t34">
<p>The names of the alias dimensions for the <a id="sthref2650"></a>specified dimension.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t34" headers="r1c1-t34">
<p>ALIASOF</p>
</td>
<td class="cellalignment3617" headers="r7c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r7c1-t34 r1c3-t34">
<p>The name of the base dimension for the specified alias dimension.<a id="sthref2651"></a></p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t34" headers="r1c1-t34">
<p>AW</p>
</td>
<td class="cellalignment3617" headers="r8c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r8c1-t34 r1c3-t34">
<p>The name of an attached workspace that contains the specified object. When the specified object is in only one attached workspace, AW returns the name of the workspace. When the specified object is in multiple attached workspaces, AW still returns only one workspace name. You must use the AWLIST keyword to get all the relevant workspace names. When the object is not in any attached workspace, AW returns <code dir="ltr">NA</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t34" headers="r1c1-t34">
<p>AWLIST</p>
</td>
<td class="cellalignment3617" headers="r9c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r9c1-t34 r1c3-t34">
<p>The names of the attached workspaces <a id="sthref2652"></a>that contain an object with the specified name. When you specify a qualified object name for the object, AWLIST returns only the relevant workspace name. When no workspace contains the specified object, AWLIST returns <code dir="ltr">NA</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r10c1-t34" headers="r1c1-t34">
<p>BTREE</p>
</td>
<td class="cellalignment3617" headers="r10c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r10c1-t34 r1c3-t34">
<p>Whether a BTREE index was defined for the specified conjoint dimension or composite.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r11c1-t34" headers="r1c1-t34">
<p>CACHEEMPTY</p>
</td>
<td class="cellalignment3617" headers="r11c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r11c1-t34 r1c3-t34">
<p>Whether a session cache <a id="sthref2653"></a>has been emptied of data for the specified variable. A cache can be emptied by using a CLEAR statement with the CACHE keyword. When <span class="italic">object-name</span> is not a variable or when it has no session cache, then CACHEEMPTY returns <code dir="ltr">NA</code>. (For more information on the session cache, see <a href="dml_options.htm#i1011029">&#34;What is an Oracle OLAP Session Cache?&#34;</a>.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r12c1-t34" headers="r1c1-t34">
<p>CACHECOUNT</p>
</td>
<td class="cellalignment3617" headers="r12c1-t34 r1c2-t34">
<p>LONG INTEGER</p>
</td>
<td class="cellalignment3617" headers="r12c1-t34 r1c3-t34">
<p>The number of non-<code dir="ltr">NA</code> cells in the session cache <a id="sthref2654"></a>for the specified variable. When <span class="italic">object-name</span> is not a variable or when it does not have a no session cache, then CACHECOUNT returns <code dir="ltr">NA</code>. (For more information on the session cache, see <a href="dml_options.htm#i1011029">&#34;What is an Oracle OLAP Session Cache?&#34;</a>.).)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r13c1-t34" headers="r1c1-t34">
<p>CHANGED</p>
</td>
<td class="cellalignment3617" headers="r13c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r13c1-t34 r1c3-t34">
<p>Whether the specified variable, relation, dimension, or valueset <a id="sthref2655"></a>has been modified since the last UPDATE.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r14c1-t34" headers="r1c1-t34">
<p>CLASS</p>
</td>
<td class="cellalignment3617" headers="r14c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r14c1-t34 r1c3-t34">
<p>The storage class of the specified <a id="sthref2656"></a>object. Possible return values are:</p>
<ul>
<li>
<p>TEMPORARY &mdash; An object whose values are not saved in the workspace; applicable to valuesets, variables, relations, and worksheets.</p>
</li>
<li>
<p>An empty string &mdash; A permanent object whose values, when modified, are stored in a new place in the workspace until you update and are then included in the update; applicable to all object types.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r15c1-t34" headers="r1c1-t34">
<p>DATA</p>
</td>
<td class="cellalignment3617" headers="r15c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r15c1-t34 r1c3-t34">
<p>The data type of the specified object. <a id="sthref2657"></a></p>
<ul>
<li>
<p>For dimensions, variables, and formulas, possible return values are <code dir="ltr">INTEGER</code>, <code dir="ltr">SHORTINTEGER</code>, <code dir="ltr">LONGINTEGER</code>, <code dir="ltr">DECIMAL</code>, <code dir="ltr">NUMBER</code>, <code dir="ltr">SHORT</code> (for SHORTDECIMAL), <code dir="ltr">BOOLEAN</code>, <code dir="ltr">ID</code>, <code dir="ltr">TEXT</code>, <code dir="ltr">NTEXT</code>, <code dir="ltr">DATE</code> or <code dir="ltr">DATETIME</code>.</p>
</li>
<li>
<p>For a relation, it returns the name of the related dimension.</p>
</li>
<li>
<p>For a concat dimension, conjoint dimension, composite, or partition template, it returns the names of the base dimensions of an object as a multiline text value.</p>
</li>
<li>
<p>For a program defined with a data type, it returns the name of the data type. For a program defined to return a value of a dimension, returns the name of the dimension.</p>
</li>
<li>
<p>For a valueset, it returns the name of the dimension for which the valueset was defined.</p>
</li>
<li>
<p>For other types of objects, it returns <code dir="ltr">NA</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r16c1-t34" headers="r1c1-t34">
<p>DEFINE</p>
</td>
<td class="cellalignment3617" headers="r16c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r16c1-t34 r1c3-t34">
<p>The description of the specified object. <a id="sthref2658"></a>The value is the same value that DESCRIBE would display for the object minus the words DEFINE and the name of the object.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r17c1-t34" headers="r1c1-t34">
<p>DFNCHANGED</p>
</td>
<td class="cellalignment3617" headers="r17c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r17c1-t34 r1c3-t34">
<p>Whether the definition of the specified object has changed since the last UPDATE.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r18c1-t34" headers="r1c1-t34">
<p>DFNDIMS</p>
</td>
<td class="cellalignment3617" headers="r18c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r18c1-t34 r1c3-t34">
<p>The names of the dimensions and composites <a id="sthref2659"></a>in the dimension list that is used to define the specified object. Note that:</p>
<ul>
<li>
<p>For an unnamed composite, it returns the form used in the object definition: <code dir="ltr">SPARSE&lt;dim1 dim2 ...&gt;</code>.</p>
</li>
<li>
<p>For a dimension surrogate, it returns the name of the dimension for which the surrogate was defined.</p>
</li>
<li>
<p>When no dimension list was used when the specified object was defined, it returns <code dir="ltr">NA</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r19c1-t34" headers="r1c1-t34">
<p>DIMMAX</p>
</td>
<td class="cellalignment3617" headers="r19c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r19c1-t34 r1c3-t34">
<p>The number of values in the<a id="sthref2660"></a> specified dimension. For other object types, it returns <code dir="ltr">0</code> (zero).</p>
<p>Note: When you use the DIMMAX choice with a dimension that has a read permission that restricts access to the dimension values, the result returned depends on whether the dimension has previously been loaded. Permissions are evaluated when an object is loaded. Generally, the first time you refer to an object in your session, Oracle OLAP loads the object and evaluates its permissions. However, the OBJ function does not load objects, because it is just providing information about them. When you use DIMMAX with a dimension that has not yet been loaded, the result reflects the entire number of values in the dimension, regardless of whether the dimension has read permissions. When a dimension with permissions has been loaded, then the DIMMAX choice reflects the permitted size. To ensure that the DIMMAX choice returns the permitted size, you can execute a LOAD statement before using the OBJ function.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r20c1-t34" headers="r1c1-t34">
<p>DIMS</p>
</td>
<td class="cellalignment3617" headers="r20c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r20c1-t34 r1c3-t34">
<p>The names of the dimensions of the<a id="sthref2661"></a><a id="sthref2662"></a> specified object. Specifically:</p>
<ul>
<li>
<p>For dimensions, simple, concat, or conjoint, it returns the name of the dimension itself. To find out the base dimensions of a concat or conjoint dimension, use the DATA keyword.</p>
</li>
<li>
<p>For composites, it returns the base dimensions of the composite.</p>
</li>
<li>
<p>For a dimension surrogate, it returns the name of the dimension for which the surrogate was defined.</p>
</li>
<li>
<p>For dimensioned objects, it returns the names of the dimensions of the object.</p>
</li>
<li>
<p>When an object has no dimensions, it returns <code dir="ltr">NA</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r21c1-t34" headers="r1c1-t34">
<p>DIMTYPE</p>
</td>
<td class="cellalignment3617" headers="r21c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r21c1-t34 r1c3-t34">
<p>The type of the specified<a id="sthref2663"></a> dimension. Specifically:</p>
<ul>
<li>
<p>For a concat dimension, it returns <code dir="ltr">CONCAT</code>.</p>
</li>
<li>
<p>For a conjoint dimension, it returns <code dir="ltr">CONJOINT</code>.</p>
</li>
<li>
<p>For a composite, it returns <code dir="ltr">COMPOSITE</code>.</p>
</li>
<li>
<p>For a simple dimension, it returns the data type of the dimension.</p>
</li>
<li>
<p>For a partition template object, it returns <code dir="ltr">PARTITION TEMPLATE</code>.</p>
</li>
<li>
<p>For all other objects, it returns <code dir="ltr">NA</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r22c1-t34" headers="r1c1-t34">
<p>DISKSIZE</p>
</td>
<td class="cellalignment3617" headers="r22c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r22c1-t34 r1c3-t34">
<p>The total number of pages used to store the specified <a id="sthref2664"></a>object.</p>
<p>Note: For a temporary object, OBJ(DISKSIZE) returns a value of 0 (zero), because the values of a temporary object are stored in temporary storage and not in the database file.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r23c1-t34" headers="r1c1-t34">
<p>FORMULA</p>
</td>
<td class="cellalignment3617" headers="r23c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r23c1-t34 r1c3-t34">
<p>The expression in the definition of the specified formula<a id="sthref2665"></a>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r24c1-t34" headers="r1c1-t34">
<p>HASAGGCOUNT</p>
</td>
<td class="cellalignment3617" headers="r24c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r24c1-t34 r1c3-t34">
<p>Whether an Aggcount object is associated with the specified variable<a id="sthref2666"></a><a id="sthref2667"></a>. (For more information on Aggcount variables, see <a href="dml_commands_1.htm#CIHFEAGE">&#34;Aggcount Variables&#34;</a>.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r25c1-t34" headers="r1c1-t34">
<p>HASCACHE</p>
</td>
<td class="cellalignment3617" headers="r25c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r25c1-t34 r1c3-t34">
<p>Whether a session cache that is local to the session has been established to store data for the specified variable<a id="sthref2668"></a><a id="sthref2669"></a>. (For more information on the session cache, see <a href="dml_options.htm#i1011029">&#34;What is an Oracle OLAP Session Cache?&#34;</a>.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r26c1-t34" headers="r1c1-t34">
<p>HASH</p>
</td>
<td class="cellalignment3617" headers="r26c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r26c1-t34 r1c3-t34">
<p>Whether a HASH index was defined for the specified conjoint dimension<a id="sthref2670"></a><a id="sthref2671"></a> or composite.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r27c1-t34" headers="r1c1-t34">
<p>HASHSIZE</p>
</td>
<td class="cellalignment3617" headers="r27c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r27c1-t34 r1c3-t34">
<p>The number of pages allocated for the specified hashed dimension&#39;s TBLSPACE (that is, the page space containing the anchors for the hash table&#39;s K/V node lists). Note that this does <span class="italic">not</span> include the number of pages used for the actual Key/Value nodes, which are allocated from the RANSPACE&#39;s page space (KVPAGES).</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r28c1-t34" headers="r1c1-t34">
<p>HASPROPERTY <span class="italic">prop-name</span></p>
</td>
<td class="cellalignment3617" headers="r28c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r28c1-t34 r1c3-t34">
<p>Whether the property specified by <span class="italic">prop-name</span> exists for the specified object. (Abbreviated HASPRP)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r29c1-t34" headers="r1c1-t34">
<p>HIDDEN</p>
</td>
<td class="cellalignment3617" headers="r29c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r29c1-t34 r1c3-t34">
<p>Whether the text of the specified program or model has been hidden. (For more information on hiding programs and models, see the <a href="dml_commands_2.htm#i78886">HIDE</a> and <a href="dml_commands_2.htm#BABEJDHB">UNHIDE</a> commands.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r30c1-t34" headers="r1c1-t34">
<p>INDEXSIZE</p>
</td>
<td class="cellalignment3617" headers="r30c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r30c1-t34 r1c3-t34">
<p>The total size of all inversions associated with the specified relation or conjoint dimension.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r31c1-t34" headers="r1c1-t34">
<p>INORDER</p>
</td>
<td class="cellalignment3617" headers="r31c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r31c1-t34 r1c3-t34">
<p>Whether the logical order of the values of the underlying dimensions of the specified object matches the physical order in the analytic workspace. INORDER returns <code dir="ltr">TRUE</code> when the logical order of the values of the dimension has <span class="italic">not</span> been specified using MAINTAIN with the keywords ADD FIRST, ADD AFTER, ADD BEFORE, or MOVE.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r32c1-t34" headers="r1c1-t34">
<p>ISBY [RECURSIVE] <span class="italic">dimname</span></p>
</td>
<td class="cellalignment3617" headers="r32c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r32c1-t34 r1c3-t34">
<p>When you supply <span class="italic">object-name</span>, whether the specified object is dimensioned by, related to, or a surrogate for the specified dimension (<span class="italic">dimname</span>). When you supply only <span class="italic">dimname</span>, whether an object is dimensioned by the dimension you specify in <span class="italic">dimname</span>; or when the object is an aggmap, whether the specified dimension is a dimension of any relations or models in the aggmap.</p>
<ul>
<li>
<p>RECURSIVE specifies that Oracle OLAP should search for <span class="italic">dimname</span> in the base dimensions of the specified object, at any level. the. See <a href="#i1024578">Example 8-49, &#34;OBJ With ISBY&#34;</a> .</p>
</li>
<li>
<p><span class="italic">dimname</span> is a text expression that is the name of a dimension. (Oracle OLAP automatically converts the name to uppercase.) When <span class="italic">dimname</span> is a composite, the value returned by ISBY indicates if an object was defined with the composite.</p>
</li>
</ul>
<p>Specify a value for <span class="italic">object-name</span> when the object is a dimension surrogate, variable, relation, or valueset name to learn if that object is dimensioned by or related to or a surrogate for the specified dimension. You can omit <span class="italic">object-name</span> when you are looping through the list of workspace objects to obtain information about multiple objects, or when you are using OBJ to limit the NAME dimension.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r33c1-t34" headers="r1c1-t34">
<p>ISCOMPILED</p>
</td>
<td class="cellalignment3617" headers="r33c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r33c1-t34 r1c3-t34">
<p>Whether the compilation status of the specified compilable object (such as a program, model, or formula). The value returned depends on the type of object and on whether a compilation error was found in that object. For example:</p>
<ul>
<li>
<p>For programs, returns <code dir="ltr">YES</code> when the program has been processed by the compiler since the last time it was modified. A return value of <code dir="ltr">YES</code> does not necessarily indicate that all lines of the program are compiled. See the <a href="dml_commands_1.htm#i79154">COMPILE</a> command for more information.</p>
</li>
<li>
<p>For formulas, returns <code dir="ltr">YES</code> only when the formula was compiled without finding a single error and when the formula can be saved. When the formula contains ampersand substitution, it cannot be saved. When the formula is empty, the ISCOMPILED choice returns <code dir="ltr">NO</code>.</p>
</li>
<li>
<p>For models, returns <code dir="ltr">YES</code> only when the model was compiled without a single error found or when the model is empty.</p>
</li>
<li>
<p>For programs, formulas, and models, returns <code dir="ltr">NO</code> when you delete an object that the program, formula, or model references.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r34c1-t34" headers="r1c1-t34">
<p>ISCOMPRESSED</p>
</td>
<td class="cellalignment3617" headers="r34c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r34c1-t34 r1c3-t34">
<p>Whether the specified object is a compressed composite.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r35c1-t34" headers="r1c1-t34">
<p>ISLATEST</p>
</td>
<td class="cellalignment3617" headers="r35c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r35c1-t34 r1c3-t34">
<p>Whether the specified object is the latest version of the object. This syntax is the equivalent of <code dir="ltr">OBJ(VERSION)EQ OBJ(LATESTVER)</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r36c1-t34" headers="r1c1-t34">
<p>ISSOLVED</p>
</td>
<td class="cellalignment3617" headers="r36c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r36c1-t34 r1c3-t34">
<p>When the specified object is a variable which is dimensioned by a compressed composite, whether the variable has been aggregated.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r37c1-t34" headers="r1c1-t34">
<p>KVSIZE</p>
</td>
<td class="cellalignment3617" headers="r37c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r37c1-t34 r1c3-t34">
<p>The number of pages currently allocated to hash and BTREE indexes.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r38c1-t34" headers="r1c1-t34">
<p>LATESTVER</p>
</td>
<td class="cellalignment3617" headers="r38c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r38c1-t34 r1c3-t34">
<p>The current state of the specified object, referring to the most recently committed version of the object. The returned value is either equal to or greater than the value returned by <code dir="ltr">OBJ(VERSION)</code>. When the value returned by LATESTVER is greater than that returned by <code dir="ltr">OBJ(VERSION)</code>, then another user has updated this object since the analytic workspace was attached in read-only or read/write mode, or, if the analytic workspace was attached in multiwriter mode, since the last synchronization.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r39c1-t34" headers="r1c1-t34">
<p>LD</p>
</td>
<td class="cellalignment3617" headers="r39c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r39c1-t34 r1c3-t34">
<p>The LD (long description) of the specified object.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r40c1-t34" headers="r1c1-t34">
<p>MODEL</p>
</td>
<td class="cellalignment3617" headers="r40c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r40c1-t34 r1c3-t34">
<p>The specification of the specified model.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r41c1-t34" headers="r1c1-t34">
<p>NACACHECOUNT</p>
</td>
<td class="cellalignment3617" headers="r41c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r41c1-t34 r1c3-t34">
<p>The total number of <code dir="ltr">NA</code> cached cells.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r42c1-t34" headers="r1c1-t34">
<p>NACACHEEMPTY</p>
</td>
<td class="cellalignment3617" headers="r42c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r42c1-t34 r1c3-t34">
<p>Whether the <code dir="ltr">NA</code> cache is empty.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r43c1-t34" headers="r1c1-t34">
<p>NAPAGES</p>
</td>
<td class="cellalignment3617" headers="r43c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r43c1-t34 r1c3-t34">
<p>The number of pages that contain only <code dir="ltr">NA</code> values and are <span class="italic">not</span> stored in the database.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r44c1-t34" headers="r1c1-t34">
<p>NOHASH</p>
</td>
<td class="cellalignment3617" headers="r44c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r44c1-t34 r1c3-t34">
<p>Whether the specified conjoint dimension uses the NOHASH index algorithm to load and access data.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r45c1-t34" headers="r1c1-t34">
<p>NUMCELLS</p>
</td>
<td class="cellalignment3617" headers="r45c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r45c1-t34 r1c3-t34">
<p>The total number of physical cells within the specified variable. Oracle OLAP determines this value by finding the Cartesian product of the <code dir="ltr">OBJ(DIMMAX)</code> values for the dimensions of the variable, taking composites into account.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r46c1-t34" headers="r1c1-t34">
<p>NUMDELS</p>
</td>
<td class="cellalignment3617" headers="r46c1-t34 r1c2-t34">
<p>DECIMAL</p>
</td>
<td class="cellalignment3617" headers="r46c1-t34 r1c3-t34">
<p>The number of deleted cells for the specified dimensioned object.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r47c1-t34" headers="r1c1-t34">
<p>NUMDFNDIMS</p>
</td>
<td class="cellalignment3617" headers="r47c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r47c1-t34 r1c3-t34">
<p>The number of dimensions or composites in the dimension list used to define the specified object. For this count, each composite counts as one, and the dimensions within the dimension list of the composite are not counted. An object defined with a dimension list could be a variable, relation, formula, valueset, concat or conjoint dimension, dimension surrogate, or composite. When no dimension list was used when defining the object (as for single-cell variables, programs, and so on.), it returns <code dir="ltr">0</code> (zero).</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r48c1-t34" headers="r1c1-t34">
<p>NUMDIMS</p>
</td>
<td class="cellalignment3617" headers="r48c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r48c1-t34 r1c3-t34">
<p>The number of dimensions of the specified dimensioned object; or the number of base dimensions of the specified composite. When the specified object is a dimension is a dimension or dimension surrogate, it returns <code dir="ltr">1</code>, and for all other objects, it returns <code dir="ltr">0</code> (zero).</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r49c1-t34" headers="r1c1-t34">
<p>NUMSEGS</p>
</td>
<td class="cellalignment3617" headers="r49c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r49c1-t34 r1c3-t34">
<p>The number of analytic workspace segments associated with the specified object when that object has multiple dimensions. (Note that Oracle OLAP uses segments internally to keep track of the physical storage of the object&#39;s values. Too many segments may slow the retrieval of information.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r50c1-t34" headers="r1c1-t34">
<p>NUMVALS</p>
</td>
<td class="cellalignment3617" headers="r50c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r50c1-t34 r1c3-t34">
<p>The number of values or cells in the specified object. For a compressed composite or a variable dimensioned by a compressed composite, returns an <code dir="ltr">INTEGER</code> value that is the number of logical values in the object (that is, the value that would be returned if the composite was a b-tree composite).</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r51c1-t34" headers="r1c1-t34">
<p>OWNSPACE</p>
</td>
<td class="cellalignment3617" headers="r51c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r51c1-t34 r1c3-t34">
<p>When the specified object is a conjoint dimension or a composite defined with a BTREE index algorithm, whether the object is using private page space to store BTREE nodes. When the specified object is a variable-width text dimension, a relation, or a variable-width text variable, whether the data for the object is stored in one or more private page spaces that are associated with that object.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r52c1-t34" headers="r1c1-t34">
<p>PARTBY</p>
</td>
<td class="cellalignment3617" headers="r52c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r52c1-t34 r1c3-t34">
<p>The names of the partition dimensions of the specified partitioned variable or <a id="sthref2672"></a><a id="sthref2673"></a>partition template object. The names are returned as a multiline text value (one line for each dimension).</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r53c1-t34" headers="r1c1-t34">
<p>PARTDIMS <span class="italic">partitions</span></p>
</td>
<td class="cellalignment3617" headers="r53c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r53c1-t34 r1c3-t34">
<p>The names of the dimensions of the <span class="italic">partitions</span> of the specified partition template or a partitioned variable. The value is returned as a multiline text value (one line for each dimension).</p>
<p><span class="italic">partitions</span> is a multiline text value (one line for each partition name) that specifies which partitions you&#39;re asking about. When you specify a partition name that is not a valid partition in <span class="italic">partitions</span>, an error occurs.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r54c1-t34" headers="r1c1-t34">
<p>PARTITION <span class="italic">partitions</span></p>
</td>
<td class="cellalignment3617" headers="r54c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r54c1-t34 r1c3-t34">
<p>For a partitioned variable or a partition template object, a textual description of the <span class="italic">partitions</span> of the specified partition template or a partitioned variable. When called on a partition template, the returned description is similar to the DEFINE PARTITION TEMPLATE statement. When called on a partitioned variable, the returned description is similar to the DEFINE VARIABLE statement.</p>
<p><span class="italic">partitions</span> is a multiline text value (one line for each partition name) that specifies which partitions you&#39;re asking about.When you specify a partition name that is not a valid partition in <span class="italic">partitions</span>, an error occurs.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r55c1-t34" headers="r1c1-t34">
<p>PARTMETH</p>
</td>
<td class="cellalignment3617" headers="r55c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r55c1-t34 r1c3-t34">
<p>The method (<code dir="ltr">RANGE</code> or <code dir="ltr">LIST</code>) by which the specified partition template<a id="sthref2674"></a><a id="sthref2675"></a><a id="sthref2676"></a> or a partitioned variable is partitioned.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r56c1-t34" headers="r1c1-t34">
<p>PARTNAMES</p>
</td>
<td class="cellalignment3617" headers="r56c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r56c1-t34 r1c3-t34">
<p>A multiline <code dir="ltr">TEXT</code> value containing the names of all the defined partitions of the specified partition temp<a id="sthref2677"></a><a id="sthref2678"></a>late. When <span class="italic">name</span> is the name of a partitioned variable, returns a multiline TEXT value containing the names of all the partitions of the variable.</p>
<p>Note: Not all of the partitions defined by a partition template necessarily exist in each partitioned variable. Calling <code dir="ltr">OBJ(PARTNAMES)</code>on a partitioned variable returns only those partitions that actually exist within the variable.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r57c1-t34" headers="r1c1-t34">
<p>PARTRANGE <span class="italic">partitions</span></p>
</td>
<td class="cellalignment3617" headers="r57c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r57c1-t34 r1c3-t34">
<p>The<a id="sthref2679"></a><a id="sthref2680"></a> values of the <code dir="ltr">LESS THAN</code> clause for each of the <span class="italic">partitions</span> for the specified RANGE partition template or RANGE partitioned variable.</p>
<p><span class="italic">partitions</span> is a multiline text value (one line for each partition name) that specifies which partitions you&#39;re asking about. When you specify a partition name that is not a valid partition in <span class="italic">partitions</span>, an error occurs.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r58c1-t34" headers="r1c1-t34">
<p>PERIOD</p>
</td>
<td class="cellalignment3617" headers="r58c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r58c1-t34 r1c3-t34">
<p>When the specified object is a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR, the type of the dimension plus an indication of multiple periods or phasing, if any.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r59c1-t34" headers="r1c1-t34">
<p>PHYSMAX</p>
</td>
<td class="cellalignment3617" headers="r59c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r59c1-t34 r1c3-t34">
<p>The maximum physical value for positions within the specified dimension or composite.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r60c1-t34" headers="r1c1-t34">
<p>PMTMAINTAIN</p>
</td>
<td class="cellalignment3617" headers="r60c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r60c1-t34 r1c3-t34">
<p>The permission condition for the maintain permission associated with the specified dimension. When there is no maintain permission for the dimension, it returns <code dir="ltr">NA</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r61c1-t34" headers="r1c1-t34">
<p>PMTPERMIT</p>
</td>
<td class="cellalignment3617" headers="r61c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r61c1-t34 r1c3-t34">
<p>The permission condition for the permit permission associated with the specified object. When there is no permit permission for the object, it returns <code dir="ltr">NA</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r62c1-t34" headers="r1c1-t34">
<p>PMTREAD</p>
</td>
<td class="cellalignment3617" headers="r62c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r62c1-t34 r1c3-t34">
<p>The permission condition for the read permission associated with the specified object. When there is no read permission for the object, it returns <code dir="ltr">NA</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r63c1-t34" headers="r1c1-t34">
<p>PMTWRITE</p>
</td>
<td class="cellalignment3617" headers="r63c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r63c1-t34 r1c3-t34">
<p>The permission condition for the write permission associated with the specified object. When there is no write permission for the object, it returns <code dir="ltr">NA</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r64c1-t34" headers="r1c1-t34">
<p>PRECISION</p>
</td>
<td class="cellalignment3617" headers="r64c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r64c1-t34 r1c3-t34">
<p>The precision of the specified <code dir="ltr">NUMBER</code> dimension or variable. The precision is the total number of digits. When the variable was defined without a precision specification, then OBJ returns <code dir="ltr">NA</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r65c1-t34" headers="r1c1-t34">
<p>PROGRAM</p>
</td>
<td class="cellalignment3617" headers="r65c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r65c1-t34 r1c3-t34">
<p>The text of the specified program.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r66c1-t34" headers="r1c1-t34">
<p>PROPCHANGED</p>
</td>
<td class="cellalignment3617" headers="r66c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r66c1-t34 r1c3-t34">
<p>Whether the properties of the specified object have changed since the last UPDATE.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r67c1-t34" headers="r1c1-t34">
<p>PROPERTY <span class="italic">prop-name</span></p>
</td>
<td class="cellalignment3617" headers="r67c1-t34 r1c2-t34">
<p>WORKSHEET</p>
</td>
<td class="cellalignment3617" headers="r67c1-t34 r1c3-t34">
<p>The value of the specified object&#39;s property as specified by <span class="italic">prop-name</span> which is a text expression that specifies the name of the property. The data type of the return value is determined at run time. When the named property does not exist, it returns <code dir="ltr">NA</code>. (Abbreviated PRP)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r68c1-t34" headers="r1c1-t34">
<p>PROPERTYLIST</p>
</td>
<td class="cellalignment3617" headers="r68c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r68c1-t34 r1c3-t34">
<p>The names of the properties associated with the specified object, one property on a line. The names are in uppercase letters and are stored in the collating sequence for ASCII characters. For objects without properties, it returns <code dir="ltr">NA</code>. (Abbreviated PRPLIST)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r69c1-t34" headers="r1c1-t34">
<p>PROPERTYTYPE <span class="italic">prop-name</span></p>
</td>
<td class="cellalignment3617" headers="r69c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r69c1-t34 r1c3-t34">
<p>The data type of object&#39;s property as specified by <span class="italic">prop-name</span> which is a text expression that specifies the name of the property. The type is derived from the expression used in the PROPERTY statement that created the property. Possible return values are <code dir="ltr">BOOLEAN</code>, <code dir="ltr">TEXT</code>, <code dir="ltr">ID</code>, <code dir="ltr">DATE</code>, <code dir="ltr">DATETIME</code>, <code dir="ltr">NUMBER</code>, <code dir="ltr">INTEGER</code>, <code dir="ltr">LONGINTEGER</code>, <code dir="ltr">DECIMAL</code>, and <code dir="ltr">SHORT</code>.When the named property does not exist or has a value of <code dir="ltr">NA</code>, it returns <code dir="ltr">NA</code>. (Abbreviated PRPTYPE)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r70c1-t34" headers="r1c1-t34">
<p>PUSHCOUNT</p>
</td>
<td class="cellalignment3617" headers="r70c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r70c1-t34 r1c3-t34">
<p>The number of times PUSH has executed for the specified executed (that is, the number of pushed values currently saved for the specified object).</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r71c1-t34" headers="r1c1-t34">
<p>REFERS [RECURSIVE] <span class="italic">text-expression</span></p>
</td>
<td class="cellalignment3617" headers="r71c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r71c1-t34 r1c3-t34">
<p>The words found in the specified compilable object (for example, a program) that match the ones you specify in <span class="italic">text-expression</span>. REFERS returns <code dir="ltr">NA</code> when it does not find any of the specified words, when the specified object is not a compilable object, or when the workspace does not contain any compilable objects. When you supply both arguments, REFERS searches only the specified object for the listed words. When you omit <span class="italic">object-name,</span> REFERS searches all the compilable objects in the current workspace.</p>
<ul>
<li>
<p><span class="italic">text-expression</span> is a multiline <code dir="ltr">TEXT</code> expression that is the words for which it should search. Each line in the text value is considered a separate word to be searched for. When, for <span class="italic">text-expression</span>, you specify a list of words that is the result of the OBJLIST function, you can produce a cross-reference for compilable objects in the current workspace.</p>
</li>
<li>
<p>RECURSIVE specifies that Oracle OLAP should search (following the calling tree) for the <span class="italic">text-expression</span> to retrieve a list of all of the occurrences of <span class="italic">text-expression</span>, at any level.</p>
</li>
</ul>
<p>Tip: The search is not case-sensitive; REFERS treats <code dir="ltr">TEXTVAR</code> and <code dir="ltr">Textvar</code> as the same word. REFERS ignores all text that is included in a comment or enclosed in single quotes.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r72c1-t34" headers="r1c1-t34">
<p>RELATION <span class="italic">relation-query</span></p>
</td>
<td class="cellalignment3617" headers="r72c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r72c1-t34 r1c3-t34">
<p>The default relation (as specified the RELATION command) for the specified object. The values that are returned vary depending on what you specify for <span class="italic">relation-query</span>. The syntax for <span class="italic">relation-query</span> is:</p>
<p><span class="syntaxinline">DEFINELIST | DIMLIST | ACTUAL</span> <span class="syntaxinlineitalic">rel-dimname</span> <span class="syntaxinline">| SPECIFIED</span> <span class="syntaxinlineitalic">rel-dimname</span></p>
<p>where:</p>
<ul>
<li>
<p>DEFINELIST specifies that the function return all of the names of the dimensions and their associated default relations. As shown in the following example, the names are returned and it associated default relation are returned one per line, alternating between dimension name and its associated default relation.</p>
<pre dir="ltr">                  dimname1
                  relname1
                  dimname2
                  relname2
</pre></li>
<li>
<p>DIMLIST specifies that the function return all of the names of the dimensions for which default relations have been specified. As shown in the following example, Oracle OLAP returns the values one dimension name per line.</p>
<pre dir="ltr">                  dimname1
                  dimname2
</pre></li>
<li>
<p>ACTUAL <span class="syntaxinlineitalic">dimname</span> specifies that the function return the relation that Oracle OLAP uses as the default relation between <span class="italic">object-name</span> and its related dimension specified by <span class="italic">rel-dimname</span>.</p>
</li>
<li>
<p>SPECIFIED <span class="syntaxinlineitalic">dimname</span> specifies that the function return the name of the relation specified in the RELATION command as the default relation between <span class="italic">object-name</span> and its related dimension specified by <span class="italic">rel-dimname</span> which is the value as actually entered in the RELATION command, even if an error occurred entering the data and there is no such relation in the analytic workspace.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r73c1-t34" headers="r1c1-t34">
<p>RSSIZE</p>
</td>
<td class="cellalignment3617" headers="r73c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r73c1-t34 r1c3-t34">
<p>The number of random subset pages used by main object.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r74c1-t34" headers="r1c1-t34">
<p>SCALE</p>
</td>
<td class="cellalignment3617" headers="r74c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r74c1-t34 r1c3-t34">
<p>The scale of a <code dir="ltr">NUMBER</code> dimension or variable. A positive scale indicates the number of digits to the right of the decimal point. A negative scale indicates the number of rounded digits to the left of the decimal point. When the variable was defined without a scale specification, then OBJ returns <code dir="ltr">NA</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r75c1-t34" headers="r1c1-t34">
<p>SEGWIDTH {<span class="italic">dim-name</span>|ALL}</p>
</td>
<td class="cellalignment3617" headers="r75c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r75c1-t34 r1c3-t34">
<p>The default or user-specified segment size of a variable that has multiple dimensions and that is associated with either a particular dimension or all dimensions. Each line begins with a segment-size (up to 11 digits) followed by the name of the associated dimension or composite. The dimension name is not included in the line when you specify a dimension and its dimensioned object. In that case only the segment value is returned. When the segment size is reported as zero, it means the default segment size is in effect, and therefore you may have to use CHGDFN to set an appropriate size for the variable&#39;s segments.</p>
<ul>
<li>
<p><span class="italic">dim-name</span> is a text expression that is the name of a dimension.</p>
</li>
<li>
<p>ALL specifies all dimensions.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r76c1-t34" headers="r1c1-t34">
<p>SESSION</p>
</td>
<td class="cellalignment3617" headers="r76c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r76c1-t34 r1c3-t34">
<p>Whether the specified object is a session object.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r77c1-t34" headers="r1c1-t34">
<p>SHAREMAP</p>
</td>
<td class="cellalignment3617" headers="r77c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r77c1-t34 r1c3-t34">
<p>When the specified object is dimensioned by a compound dimension, whether the compound dimension is shared with other objects.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r78c1-t34" headers="r1c1-t34">
<p>SPARSE</p>
</td>
<td class="cellalignment3617" headers="r78c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r78c1-t34 r1c3-t34">
<p>The composites used in the definition of the specified object.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r79c1-t34" headers="r1c1-t34">
<p>SURROGATELIST</p>
</td>
<td class="cellalignment3617" headers="r79c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r79c1-t34 r1c3-t34">
<p>The surrogates defined for the specified surrogate or dimension.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r80c1-t34" headers="r1c1-t34">
<p>TRIGGER [<span class="italic">triggering-event</span>}</p>
</td>
<td class="cellalignment3617" headers="r80c1-t34 r1c2-t34">
<p>TEXT (multiline)</p>
</td>
<td class="cellalignment3617" headers="r80c1-t34 r1c3-t34">
<p>TRIGGER without a <span class="italic">triggering-event</span> keyword returns all the <span class="italic">triggering-event</span> keywords and trigger programs names associated with the specified object; or <code dir="ltr">NA</code> when the object does not have any trigger programs associated with it. TRIGGER with a <span class="italic">triggering-event</span> keyword returns the names of the trigger programs associated with the specified object event.</p>
<p>Specify the <span class="italic">triggering-event</span> using one of the following keywords:</p>
<dl>
<dd>MAINTAIN</dd>
<dd>DELETE</dd>
<dd>PROPERTY</dd>
<dd>ASSIGN</dd>
<dd>BEFORE_UPDATE</dd>
<dd>AFTER_UPDATE</dd>
</dl>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r81c1-t34" headers="r1c1-t34">
<p>TYPE</p>
</td>
<td class="cellalignment3617" headers="r81c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r81c1-t34 r1c3-t34">
<p>The object type of the specified object.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r82c1-t34" headers="r1c1-t34">
<p>UNIQUE</p>
</td>
<td class="cellalignment3617" headers="r82c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r82c1-t34 r1c3-t34">
<p>Whether the specified concat dimension is unique. Returns <code dir="ltr">FALSE</code> for other dimensions, and <code dir="ltr">NA</code> for other object types (including Partition Templates).</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r83c1-t34" headers="r1c1-t34">
<p>UPDATED</p>
</td>
<td class="cellalignment3617" headers="r83c1-t34 r1c2-t34">
<p>BOOLEAN</p>
</td>
<td class="cellalignment3617" headers="r83c1-t34 r1c3-t34">
<p>When the analytic workspace is attached in multiwriter mode, whether the specified object been updated. For other attachment modes, returns <code dir="ltr">NA</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r84c1-t34" headers="r1c1-t34">
<p>VALCOUNT</p>
</td>
<td class="cellalignment3617" headers="r84c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r84c1-t34 r1c3-t34">
<p>The number of logical uncompressed values in the specified compressed composite. For all other dimensions the result is identical to DIMMAX.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r85c1-t34" headers="r1c1-t34">
<p>VALSIZE</p>
</td>
<td class="cellalignment3617" headers="r85c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r85c1-t34 r1c3-t34">
<p>The number of pages used to store the specified object&#39;s values. For text dimensions and variables defined without the WIDTH keyword, OBJ(VALSIZE) counts only those pages that contain the four-byte pointers to the text, not the storage for the text itself. For a temporary variable, OBJ(VALSIZE) returns a value of 0 (zero) because the values of a temporary variable are stored in temporary storage and not in the analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r86c1-t34" headers="r1c1-t34">
<p>VERSION</p>
</td>
<td class="cellalignment3617" headers="r86c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r86c1-t34 r1c3-t34">
<p>The current state of the attached version of the specified object. (Note that changes that are updated and committed increase this number.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r87c1-t34" headers="r1c1-t34">
<p>VNF</p>
</td>
<td class="cellalignment3617" headers="r87c1-t34 r1c2-t34">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r87c1-t34 r1c3-t34">
<p>When the specified object is a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR for which you have defined a VNF (value name format), the VNF of the dimension. For other types of objects, it returns <code dir="ltr">NA</code>.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r88c1-t34" headers="r1c1-t34">
<p>WIDTH</p>
</td>
<td class="cellalignment3617" headers="r88c1-t34 r1c2-t34">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r88c1-t34 r1c3-t34">
<p>The width, in bytes, of the storage area of each value of the specified object:</p>
<ul>
<li>
<p>For dimensioned INTEGER and BOOLEAN variables that you defined with a width, it returns <code dir="ltr">1</code>.</p>
</li>
<li>
<p>For dimensioned text variables and text dimensions that you defined with a width, it returns a value between <code dir="ltr">1</code> and <code dir="ltr">4000</code>, which identifies the defined width.</p>
</li>
<li>
<p>For all other objects, it returns <code dir="ltr">NA</code>.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwidemax" --></dd>
<dt><span class="italic">object-name</span></dt>
<dd>
<p>A text expression that contains the name of the object in which you are interested. The object can be in any attached workspace. When you specify <span class="italic">object-name</span> as a text literal, you must enclose it in single quotes. (Oracle OLAP automatically converts the name to uppercase.) When you specify the name of a program as the <span class="italic">object-name</span> and you omit the quotes, Oracle OLAP runs the program and uses its return value as the name of the object to be supplied as <span class="italic">object-name</span>.</p>
<p>You can omit <span class="italic">object-name</span> when you are using the OBJ function as part of a statement, such as the LIMIT command, that loops through the NAME dimension. In this case, the return value is dimensioned by the NAME dimension in the current workspace.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="g1052637"></a>Examples</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_commands_2.htm#CACIAADF">Example 10-95, &#34;Specifying a Default Relation Using the Relation Command&#34;</a> for examples of using the <a href="#g1054016">OBJ</a> function to retrieve default relation information</div>
<div id="OLADM1806" class="example">
<p class="titleinexample"><a id="i80646"></a>Example 8-47 Listing Dimensions</p>
<p>Suppose you want a list of all the dimensions in an analytic workspace. First, use a LIMIT command and the OBJ function to limit the status of the NAME dimension. Then use a STATUS statement to produce a list of dimensions. Because the values returned by <code dir="ltr">OBJ(TYPE)</code> are always in uppercase, you must use <code dir="ltr">&#39;DIMENSION&#39;</code> (not <code dir="ltr">&#39;dimension&#39;</code>) in the LIMIT statement to get a match. The statements</p>
<pre dir="ltr">LIMIT NAME TO OBJ(TYPE) EQ &#39;DIMENSION&#39;
STATUS NAME
</pre>
<p>produce the following output.</p>
<pre dir="ltr">The current status of NAME is:
PRODUCT, DISTRICT, DIVISION, LINE, REGION, MARKETLEVEL, MARKET,
MONTH, YEAR, QUARTER
</pre></div>
<!-- class="example" -->
<div id="OLADM1807" class="example">
<p class="titleinexample"><a id="sthref2681"></a>Example 8-48 Listing Relations</p>
<p>Suppose you want to see the definitions of all the relations in an analytic workspace. Use the LIMIT command and the OBJ function to select these names. Then use DESCRIBE to produce a list of their definitions. The statements</p>
<pre dir="ltr">LIMIT NAME TO OBJ(TYPE) EQ &#39;RELATION&#39;
DESCRIBE
</pre>
<p>produce the following output.</p>
<pre dir="ltr">DEFINE REGION.DISTRICT RELATION REGION &lt;DISTRICT&gt;
LD REGION for each DISTRICT
 
DEFINE DIVISION.PRODUCT RELATION DIVISION &lt;PRODUCT&gt;
LD DIVISION for each PRODUCT
 
DEFINE MLV.MARKET RELATION MARKETLEVEL &lt;MARKET&gt;
 
DEFINE MARKET.MARKET RELATION MARKET &lt;MARKET&gt;
LD Self-relation for the Market Dimension 
</pre></div>
<!-- class="example" -->
<div id="OLADM1808" class="example">
<p class="titleinexample"><a id="i1024578"></a>Example 8-49 OBJ With ISBY</p>
<p>For example, the following statement limits NAME to all the objects dimensioned by <code dir="ltr">month</code>.</p>
<pre dir="ltr">LIMIT NAME TO OBJ(ISBY &#39;month&#39;)
</pre>
<p>You can use ISBY to find out if a dimension is a base dimension of a concat or conjoint dimension or a composite. For example, assume that you had a conjoint dimension named <code dir="ltr">proddist</code> whose base dimensions were <code dir="ltr">product</code> and <code dir="ltr">district</code>. In this case, the following statement returns <code dir="ltr">YES</code>.</p>
<pre dir="ltr">SHOW OBJ(ISBY &#39;district&#39; &#39;proddist&#39;)
</pre>
<p>You can use ISBY to find out if a dimension is a dimension of a relation or a model used in an aggmap. For example, assume that you had an aggmap called <code dir="ltr">myaggmap</code> and you wanted to find out if a dimension named <code dir="ltr">mydimension</code> was used in any relations or models within <code dir="ltr">myaggmap</code>. In this case, you could issue the following statement.</p>
<pre dir="ltr">SHOW OBJ(ISBY &#39;mydimension&#39; &#39;myaggmap&#39;)
</pre>
<p>To determine whether a specified dimension is a base dimension at any level, you must use ISBY with the RECURSIVE keyword. For example, assume that you had a conjoint dimension named <code dir="ltr">proddist.mon</code> whose base dimensions were <code dir="ltr">proddist</code> and <code dir="ltr">month</code> and a variable <code dir="ltr">proddist.sales</code> dimensioned by <code dir="ltr">proddist</code>. In this case, each of the following statements would return <code dir="ltr">NO</code>.</p>
<pre dir="ltr">SHOW OBJ(ISBY &#39;district&#39; &#39;proddist.mon&#39;)
SHOW OBJ(ISBY &#39;district&#39; &#39;proddist.sales&#39;)
</pre>
<p>However, when you use ISBY with the RECURSIVE keyword, each of the following statements would return <code dir="ltr">YES</code>.</p>
<pre dir="ltr">SHOW OBJ(ISBY RECURSIVE &#39;district&#39; &#39;proddist.mon&#39;)
SHOW OBJ(ISBY RECURSIVE &#39;district&#39; &#39;proddist.sales&#39;)
</pre></div>
<!-- class="example" -->
<div id="OLADM1809" class="example">
<p class="titleinexample"><a id="sthref2682"></a>Example 8-50 Getting Information about a Variable</p>
<p>This example illustrates the use of several choices of the OBJ function to obtain information about the variable <code dir="ltr">sales</code>. The definition of <code dir="ltr">sales</code> is as follows.</p>
<pre dir="ltr">DEFINE sales VARIABLE DECIMAL &lt;month product district&gt;
LD Sales Revenue
</pre>
<ul>
<li>
<p>The statement</p>
<pre dir="ltr">SHOW OBJ(TYPE &#39;sales&#39;)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">VARIABLE
</pre></li>
<li>
<p>The statement</p>
<pre dir="ltr">SHOW OBJ(DATA &#39;sales&#39;)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">DECIMAL
</pre></li>
<li>
<p>The statement</p>
<pre dir="ltr">SHOW OBJ(DIMS &#39;sales&#39;)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">MONTH
PRODUCT
DISTRICT
</pre></li>
<li>
<p>The statement</p>
<pre dir="ltr">SHOW OBJ(ISBY &#39;product&#39; &#39;sales&#39;)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">YES
</pre></li>
<li>
<p>The statement</p>
<pre dir="ltr">SHOW OBJ(LD &#39;sales&#39;)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Sales Revenue
</pre></li>
</ul>
</div>
<!-- class="example" -->
<div id="OLADM1810" class="example">
<p class="titleinexample"><a id="sthref2683"></a>Example 8-51 Returning the Name of the Object or the Type of the Object</p>
<p>Suppose <code dir="ltr">textvar</code> is a variable whose value is <code dir="ltr">geog</code>, which is the name of a dimension. Whether you enclose the word <code dir="ltr">textvar</code> in quotation marks determines whether the following <code dir="ltr">OBJ</code> function calls return the word <code dir="ltr">VARIABLE</code> (the type of object <code dir="ltr">textvar</code> is) or <code dir="ltr">DIMENSION</code> (the type of object <code dir="ltr">geog</code> is).</p>
<pre dir="ltr">SHOW OBJ(TYPE &#39;textvar&#39;)
VARIABLE

SHOW OBJ(TYPE textvar)
DIMENSION
</pre></div>
<!-- class="example" -->
<div id="OLADM1811" class="example">
<p class="titleinexample"><a id="i80737"></a>Example 8-52 Using OBJ to Select Objects</p>
<p>This example uses OBJ and DESCRIBE to look at the definitions of all the relations in an analytic workspace. The Oracle OLAP statements</p>
<pre dir="ltr">LIMIT NAME TO OBJ(TYPE) EQ &#39;RELATION&#39;
DESCRIBE
</pre>
<p>produce the following output.</p>
<pre dir="ltr">DEFINE REGION.DISTRICT RELATION REGION &lt;DISTRICT&gt;
LD REGION for each DISTRICT
 
DEFINE DIVISION.PRODUCT RELATION DIVISION &lt;PRODUCT&gt;
LD DIVISION for each PRODUCT
 
DEFINE MLV.MARKET RELATION MARKETLEVEL &lt;MARKET&gt;
 
DEFINE MARKET.MARKET RELATION MARKET &lt;MARKET&gt;
LD Self-relation for the Market Dimension
</pre></div>
<!-- class="example" -->
<div id="OLADM1812" class="example">
<p class="titleinexample"><a id="sthref2684"></a>Example 8-53 Counting Compiled Objects</p>
<p>The following statements count how many compilable objects in your workspace are compiled and how many are not compiled. Each statement loops over the objects in the current workspace. The OBJ function returns <code dir="ltr">YES</code> for each object that is compiled, <code dir="ltr">NO</code> for each compilable object that is not compiled, and <code dir="ltr">NA</code> for objects that are not compilable. When NASKIP is <code dir="ltr">YES</code> (the default), the COUNT function in the first statement counts the number of <code dir="ltr">YES</code> values that are returned by OBJ, and in the second statement it counts the number of <code dir="ltr">NO</code> values that are returned.</p>
<pre dir="ltr">SHOW COUNT(OBJ(ISCOMPILED))
SHOW COUNT(NOT OBJ(ISCOMPILED))
</pre></div>
<!-- class="example" -->
<div id="OLADM1813" class="example">
<p class="titleinexample"><a id="sthref2685"></a>Example 8-54 OBJ with REFERS</p>
<p>The following statement searches the compilable objects in the current workspace for references to the objects in all the attached workspaces. The output lists the non-compilable objects in the current workspace too, but the return value for them is <code dir="ltr">NA</code>.</p>
<pre dir="ltr">REPORT OBJ(REFERS OBJLIST(AW(LIST)))
</pre>
<p>In the following example, <code dir="ltr">OBJ(REFERS)</code> tells you whether <code dir="ltr">var1</code>, <code dir="ltr">var2</code>, or <code dir="ltr">var3</code> appears in the <code dir="ltr">myprog</code> program. The return value of <code dir="ltr">OBJ(REFERS)</code> is a multiline text value that contains the references it finds. When only <code dir="ltr">var1</code> and <code dir="ltr">var3</code> appear in the program, then the return value contains those two names, each on a separate line. The statement</p>
<pre dir="ltr">SHOW OBJ(REFERS &#39;var1\nvar2\nvar3&#39; &#39;myprog&#39;)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">VAR1
VAR3
</pre>
<p>When you do not specify the name of a program or formula to be searched, OBJ(REFERS) returns a single-line or multiline text value for <span class="italic">each object</span> in the NAME dimension of the current workspace. For objects that are not programs or formulas, <code dir="ltr">NA</code> is returned. The statement</p>
<pre dir="ltr">REPORT OBJ(REFERS &#39;var1\nvar2\nvar3&#39;)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">               OBJ(REFERS
                 &#39;var1
                  var2
NAME           var3&#39; )
-------------- ----------
PRODUCT        NA
DISTRICT       NA
DIVISION       NA
LINE           NA
QUARTER        NA
REGION         NA
YEAR           NA
MONTH          NA
   ...
MYPROG         VAR1
               VAR3
VAR1           NA
VAR2           NA
VAR3           NA
</pre></div>
<!-- class="example" -->
<div id="OLADM1814" class="example">
<p class="titleinexample"><a id="sthref2686"></a>Example 8-55 OBJ with PROPERTY</p>
<p>In the following example, OBJ(PROPERTY) returns information about the <code dir="ltr">decplace</code> property of the <code dir="ltr">actual</code> variable. (See the <a href="dml_commands_2.htm#i79628">PROPERTY</a> command for more information.) The user created this property to store the number of decimal places and now wants to obtain that value to produce a report of the <code dir="ltr">actual</code> variable.</p>
<p>The statements</p>
<pre dir="ltr">CONSIDER actual
PROPERTY &#39;decplace&#39; 4
LIMIT month TO FIRST 1
LIMIT division TO &#39;Camping&#39;
REPORT ACROSS month W 20 DECIMAL OBJ(PROPERTY &#39;decplace&#39; -
&#39;actual&#39;) actual 
</pre>
<p>produce the following output.</p>
<pre dir="ltr">DIVISION: CAMPING
               -------ACTUAL-------
               -------MONTH--------
LINE                  JAN 95
-------------- --------------------
Revenue                533,362.8800
Cogs                   360,810.6600
Gross.Margin           172,552.2200
Marketing               37,369.5000
Selling                 89,007.3800
R.D                     24,307.5000
Opr.Income              21,867.8400
Taxes                   15,970.3900
Net.Income               5,897.4500
</pre></div>
<!-- class="example" -->
<div id="OLADM1815" class="example">
<p class="titleinexample"><a id="sthref2687"></a>Example 8-56 OBJ with SEGWIDTH</p>
<p>The following statements show how to change and display segment size values for all of a variable&#39;s dimensions.</p>
<pre dir="ltr">CHGDFN sales SEGWIDTH 150 5000 50
SHOW OBJ(SEGWIDTH ALL &#39;sales&#39;)
</pre>
<p>These statements produce the following output.</p>
<pre dir="ltr"> 150 MONTH
5000 PRODUCT
  50 DISTRICT
</pre>
<p>The following statement shows how to obtain the segment size value for a specific dimension.</p>
<pre dir="ltr">SHOW OBJ(SEGWIDTH &#39;product&#39; &#39;sales&#39;)
</pre>
<p>This statement produces the following output.</p>
<pre dir="ltr">5000
</pre>
<p>The following statement shows how to obtain a list of segment sizes for every multidimensional variable or relation associated with the dimension.</p>
<p>When <span class="italic">object-name</span> is not specified, you must use REPORT rather than SHOW to obtain a value for each object in the NAME dimension.</p>
<pre dir="ltr">REPORT OBJ(SEGWIDTH &#39;product&#39;)
</pre>
<p>This statement produces the following output.</p>
<pre dir="ltr">NAME           OBJ(SEGWIDTH &#39;product&#39;)
-------------- -----------------------
SALES          5000
SALES.FORECAST 5000
SALES.PLAN     5000
SHARE          5000
UNITS          5000
UNITS.M        0
   ...
</pre>
<p>The following statement shows how to produce a list of segment sizes for all dimensions in the current workspace.</p>
<pre dir="ltr">REPORT OBJ(SEGWIDTH ALL)
</pre>
<p>This statement produces the following output.</p>
<pre dir="ltr">NAME           OBJ(SEGWIDTH ALL)
-------------- -----------------
SALES          150 MONTH
               5000 PRODUCT
               50 DISTRICT
 
SALES.FORECAST 150 MONTH
               5000 PRODUCT
               50 DISTRICT
    ...
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79518"></a>
<div id="OLADM627" class="refsect1">
<h2 class="refsect1">OBJLIST</h2>
<p><a id="sthref2688"></a><a id="sthref2689"></a>The OBJLIST function provides a list of the objects that are contained in one or more workspaces that you specify. The list of workspace objects returned by OBJLIST has duplicates removed and it is sorted in ascending order. The specified workspaces must be currently attached when you use the function.</p>
<p>The result, a multiline TEXT value, can be used as an argument to the OBJ function with the REFERS keyword. This usage helps in producing a cross-reference list for compilable objects, such as programs and models, in the current workspace.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
OBJLIST always returns the names of all the objects in a given workspace, even when you have limited its NAME dimension.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2690"></a>Return Value</p>
<p>TEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2691"></a>Syntax</p>
<p class="synopsis">OBJLIST[(<span class="italic">text-expression</span>)]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2692"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>A text expression that contains a single name or several names of currently attached workspaces. Each workspace name must be on a separate line of a multiline TEXT value. When you do not supply this argument, OBJLIST uses the current workspace name. When <span class="italic">text-expression</span> includes the name of an analytic workspace that is not attached, OBJLIST does not return a value. Instead, it signals an error.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2693"></a>Examples</p>
<div id="OLADM1816" class="example">
<p class="titleinexample"><a id="sthref2694"></a>Example 8-57 Listing Objects in Three Workspaces</p>
<p>In the following example, OBJLIST returns a multiline TEXT value that includes all the objects in the three workspaces specified: <code dir="ltr">mycode</code>, <code dir="ltr">mydata</code>, and <code dir="ltr">mytools</code>. The statement</p>
<pre dir="ltr">SHOW OBJLIST(&#39;mycode\nmydata\nmytools&#39;)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">ACTUAL
ADDFIVE
ADVERTISING
BUDGET
CITYLIST
CITYREPINIT
CITYREPS
    ...
YEAR
</pre></div>
<!-- class="example" -->
<div id="OLADM1817" class="example">
<p class="titleinexample"><a id="sthref2695"></a>Example 8-58 Listing Referenced Objects</p>
<p>In the following example, OBJ(REFERS) returns a multiline TEXT value that contains every object from the <code dir="ltr">mycode</code>, <code dir="ltr">mydata</code>, and <code dir="ltr">mytools</code> workspaces that is referenced in the <code dir="ltr">myprog</code> program. The statement</p>
<pre dir="ltr">SHOW OBJ(REFERS OBJLIST(&#39;mycode\nmydata\nmytools&#39;) &#39;myprog&#39;)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">ACTUAL
BUDGET
 ...
YEAR
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDFAIFC"></a>
<div id="OLADM1818" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">OBJORG</h2>
<p>The OBJORG function<a id="sthref2696"></a><a id="sthref2697"></a><a id="sthref2698"></a><a id="sthref2699"></a> takes, as input, the name of an OLAP cube or cube dimension as defined in the Oracle data dictionary (sometimes called a &#34;logical OLAP object&#34;) and returns information about the lower-level, &#34;physical,&#34; analytic workspace objects by which that cube or cube dimension is implemented.</p>
<p>Use this function in OLAP DML statements that require an analytic workspace object name rather than an OLAP cube or cube dimension name.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_basics.htm#BABDDIBI">&#34;Cube-Aware OLAP DML Statements&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2700"></a>Return value</p>
<p>Analytic workspace object name or <code dir="ltr">TEXT</code>; or <code dir="ltr">NA</code> if an analytic workspace has the requested definition information, but the field is empty.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2701"></a>Syntax</p>
<p class="synopsis">OBJORG(<span class="italic">keyword</span> [OWNER <span class="italic">owner</span> ] <span class="italic">top-level-object-name</span> [ <span class="italic">sub-object-name</span> ] )</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2702"></a>Parameters</p>
<dl>
<dt><span class="italic">keyword</span></dt>
<dd>
<p>The valid keywords vary by the type of <span class="italic">top-level-object</span> or <span class="italic">sub-object</span> specified, as documented in:</p>
<ul>
<li>
<p><a href="#CHDIFHIG">Table 8-3, &#34;Keywords when the top-level-object is a Cube&#34;</a>.</p>
</li>
<li>
<p><a href="#CHDECIHG">Table 8-4, &#34;Keywords when the top-level-object is a Cube and the sub-object is a Measure&#34;</a>.</p>
</li>
<li>
<p><a href="#CHDGEDEG">Table 8-5, &#34;Keywords when the top-level-object is Cube and the sub-object is a Dimension Calculation Model&#34;</a>.</p>
</li>
<li>
<p><a href="#CHDFDGJJ">Table 8-6, &#34;Keywords when the top-level-object is a Cube Dimension&#34;</a>.</p>
</li>
<li>
<p><a href="#CHDDBBDJ">Table 8-7, &#34;Keywords when the top-level-object is a Cube Dimension and the sub-object is a Base Attribute&#34;</a>.</p>
</li>
<li>
<p><a href="#CHDIDCAJ">Table 8-8, &#34;Keywords when the top-level-object is a Cube Dimension and the sub-object is a Dimension Level&#34;</a>.</p>
</li>
<li>
<p><a href="#CHDDEDJA">Table 8-9, &#34;Keywords when the top-level-object is a Cube Dimension and the sub-object is a Dimension Calculation Model&#34;</a>.</p>
</li>
</ul>
<div id="OLADM1819" class="tblformal">
<p class="titleintable"><a id="sthref2703"></a><a id="CHDIFHIG"></a>Table 8-3 Keywords when the top-level-object is a Cube</p>
<table class="cellalignment3618" title="Keywords when the top-level-object is a Cube" summary="Valid values for keyword in OBJORG when the top-level-object is a Cube" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t38">Keyword</th>
<th class="cellalignment3616" id="r1c2-t38">Returns</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t38" headers="r1c1-t38">
<p><code dir="ltr">Aggmap</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t38 r1c2-t38">
<p>The aggmap for the cube. (Note: The function will never return NA when you specify this keyword.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t38" headers="r1c1-t38">
<p><code dir="ltr">Composite</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t38 r1c2-t38">
<p>When a composite is used for the cube, the name of the composite; or NA if the cube&#39;s sparsity type is DENSE, or if the cube is partitioned. (See also the keyword <code dir="ltr">PartitionComposite</code>.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t38" headers="r1c1-t38">
<p><code dir="ltr">CubeStorageType</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t38 r1c2-t38">
<p>(Property.) The DML data type used for all of the cube&#39;s measures; or NA if there is no such single data type (that is, if different measures have different data types).</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t38" headers="r1c1-t38">
<p><code dir="ltr">MeasureDim</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t38 r1c2-t38">
<p>When the value returned for the keyword <code dir="ltr">CubeStorageType</code> is not NA, the analytic workspace measure dimension used to refer to the cube&#39;s base measures; or NA when the value returned for the keyword <code dir="ltr">CubeStorageType</code> is NA.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t38" headers="r1c1-t38">
<p><code dir="ltr">PartitionCompositeVar</code></p>
</td>
<td class="cellalignment3617" headers="r6c1-t38 r1c2-t38">
<p>The text variable, dimensioned by <code dir="ltr">PartitionDim</code>, that holds the names of the composites for the cube&#39;s partitions; or NA if the cube&#39;s sparsity type is DENSE, or if the cube is not partitioned. (See also the <code dir="ltr">Composite</code> keyword.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t38" headers="r1c1-t38">
<p><code dir="ltr">PartitionDim</code></p>
</td>
<td class="cellalignment3617" headers="r7c1-t38 r1c2-t38">
<p>The analytic workspace dimension that contains the names of the partitions for the cube; or NA if the cube is not partitioned.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t38" headers="r1c1-t38">
<p><code dir="ltr">PartitionRel</code></p>
</td>
<td class="cellalignment3617" headers="r8c1-t38 r1c2-t38">
<p>The relation, dimensioned by <code dir="ltr">PartitionDim</code>, that relates each cube partition to its corresponding root dimension value; or NA if the cube is not partitioned.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t38" headers="r1c1-t38">
<p><code dir="ltr">PartitionTemplate</code></p>
</td>
<td class="cellalignment3617" headers="r9c1-t38 r1c2-t38">
<p>The partition template relating each cube partition to its corresponding analytic workspace dimension values; or NA if the cube is not partitioned.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r10c1-t38" headers="r1c1-t38">
<p><code dir="ltr">SharedMeasureVar</code></p>
</td>
<td class="cellalignment3617" headers="r10c1-t38 r1c2-t38">
<p>When the cube has a storage type, the variable (of that type) that stores all of the cube&#39;s measures; or NA when it does not.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r11c1-t38" headers="r1c1-t38">
<p><code dir="ltr">SparseType</code></p>
</td>
<td class="cellalignment3617" headers="r11c1-t38 r1c2-t38">
<p>(Property.) The cube sparsity type. Valid values are: COMPRESSED, SPARSE, DENSE, or SPARSE_GLOBAL. Corresponds to column SPARSE_TYPE in the USER_CUBES and ALL_CUBES views.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="OLADM1820" class="tblformal">
<p class="titleintable"><a id="sthref2704"></a><a id="CHDECIHG"></a>Table 8-4 Keywords when the top-level-object is a Cube and the sub-object is a Measure</p>
<table class="cellalignment3618" title="Keywords when the top-level-object is a Cube and the sub-object is a Measure" summary="Valid values for keyword in OBJORG when the top-level-object is a Cube and the sub-object is a Measure" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t39">Keyword</th>
<th class="cellalignment3616" id="r1c2-t39">Returns</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t39" headers="r1c1-t39">
<p><code dir="ltr">Measure</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t39 r1c2-t39">
<p>When the value returned when you specify the <code dir="ltr">CubeStorageType</code> keyword for a cube is NA, the variable that stores this measure; or when not NA, the formula extracting this measure from the cube&#39;s top level variable.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t39" headers="r1c1-t39">
<p><code dir="ltr">OverrideAggMap</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t39 r1c2-t39">
<p>The aggmap for the measure, if the measure has one; otherwise returns NA. (Note that when the measure has no aggmap, then the cube&#39;s aggmap is used.)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="OLADM1821" class="tblformal">
<p class="titleintable"><a id="sthref2705"></a><a id="CHDGEDEG"></a>Table 8-5 Keywords when the top-level-object is Cube and the sub-object is a Dimension Calculation Model</p>
<table class="cellalignment3618" title="Keywords when the top-level-object is Cube and the sub-object is a Dimension Calculation Model" summary="Valid values for keyword in OBJORG when the top-level-object is a Cube and the sub-object is Dimensionality" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t40">Keyword</th>
<th class="cellalignment3616" id="r1c2-t40">Returns</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t40" headers="r1c1-t40">
<p><code dir="ltr">AggFloorValueSet</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t40 r1c2-t40">
<p>If the cube&#39;s consistent solve specification specifies an aggregation at a specific level, the valueset consisting of all members of the dimension that belong to that level; otherwise, NA.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t40" headers="r1c1-t40">
<p><code dir="ltr">HierValueSet</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t40 r1c2-t40">
<p>The valueset containing the names of all hierarchies of the analytic workspace dimension over which the cube is aggregated. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t40" headers="r1c1-t40">
<p><code dir="ltr">OperVar</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t40 r1c2-t40">
<p>If at least one of the cube&#39;s measures has an <code dir="ltr">OverrideAggMap</code>, the variable, dimensioned by the cube&#39;s measure dimension, that contains the aggregation operator used for each measure for which an <code dir="ltr">OverrideAggMap</code> exists.; otherwise, NA.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t40" headers="r1c1-t40">
<p><code dir="ltr">PrecomputeValueSet</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t40 r1c2-t40">
<p>When the cube organization specifies a precompute condition, the valueset containing all members of the dimension that satisfy that condition; otherwise NA. (In particular, when the cube organization specifies a precompute percent, returns NA.)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="OLADM1822" class="tblformal">
<p class="titleintable"><a id="sthref2706"></a><a id="CHDFDGJJ"></a>Table 8-6 Keywords when the top-level-object is a Cube Dimension</p>
<table class="cellalignment3618" title="Keywords when the top-level-object is a Cube Dimension" summary="Valid values for keyword in OBJORG when the top-level-object is a Dimension" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t41">Keyword</th>
<th class="cellalignment3616" id="r1c2-t41">Returns</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t41" headers="r1c1-t41">
<p><code dir="ltr">AggRel</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t41 r1c2-t41">
<p>The relation, dimensioned by <code dir="ltr">Dim</code> and <code dir="ltr">HierDim</code>, that relates each dimension value (in each hierarchy) to its parent dimension value (in that hierarchy). (Note that when you specify this keyword, the function never returns NA, even if the dimension has no hierarchies.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t41" headers="r1c1-t41">
<p><code dir="ltr">AttributeCubeGIDRel</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t41 r1c2-t41">
<p>The relation, dimensioned by <code dir="ltr">Dim</code>, that relates each dimension value to its cube GID (including attribute columns) in <code dir="ltr">___AW_GID_DIMENSION</code>. <code dir="ltr">AttributeCubeGIDRel</code> is the same as <code dir="ltr">CubeGIDRel</code>, except it includes attribute columns. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t41" headers="r1c1-t41">
<p><code dir="ltr">CubeGIDRel</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t41 r1c2-t41">
<p>The relation, dimensioned by <code dir="ltr">Dim</code>, that relates each dimension value to its cube GID in <code dir="ltr">___AW_GID_DIMENSION</code>. When the dimension does not have a materialized view (MV), then <code dir="ltr">CubeGIDRel</code> is empty. The difference between a GID and a cube GID is that cube GIDs span all hierarchies. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t41" headers="r1c1-t41">
<p><code dir="ltr">Dim</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t41 r1c2-t41">
<p>The analytic workspace physical dimension corresponding to this logical dimension. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t41" headers="r1c1-t41">
<p><code dir="ltr">DimOrderVar</code></p>
</td>
<td class="cellalignment3617" headers="r6c1-t41 r1c2-t41">
<p>The variable, dimensioned by <code dir="ltr">Dim</code> and <code dir="ltr">___AW_ALL_LANGUAGES</code>, that contains integers (for each dimension value, in each language) used for sorting. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t41" headers="r1c1-t41">
<p><code dir="ltr">FamilyRel</code></p>
</td>
<td class="cellalignment3617" headers="r7c1-t41 r1c2-t41">
<p>The relation, dimensioned by <code dir="ltr">Dim</code>, <code dir="ltr">LevelDim</code>, and <code dir="ltr">HierDim</code>, that relates each dimension value (in each level, in each hierarchy) to the dimension value (at that level, in that hierarchy), if any, of which it is a descendant. <code dir="ltr">FamilyRel</code> is similar to <code dir="ltr">ParentRel</code>, but it allows you to specify a level rather than automatically choosing the next level up. <code dir="ltr">FamilyRel</code> is similar to <code dir="ltr">ValueFamilyRel</code>, but used for level hierarchies. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t41" headers="r1c1-t41">
<p><code dir="ltr">GIDRel</code></p>
</td>
<td class="cellalignment3617" headers="r8c1-t41 r1c2-t41">
<p>The relation, dimensioned by <code dir="ltr">Dim</code> and <code dir="ltr">HierDim</code>, that relates each dimension value (in each hierarchy) to its GID, if any, in <code dir="ltr">___AW_GID_DIMENSION</code>. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t41" headers="r1c1-t41">
<p><code dir="ltr">HierDim</code></p>
</td>
<td class="cellalignment3617" headers="r9c1-t41 r1c2-t41">
<p>The dimension containing all hierarchies for this dimension. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r10c1-t41" headers="r1c1-t41">
<p><code dir="ltr">HierLevelValueSet</code></p>
</td>
<td class="cellalignment3617" headers="r10c1-t41 r1c2-t41">
<p>The valueset, dimensioned by <code dir="ltr">HierDim</code>, that (for each hierarchy) contains all levels (from the <code dir="ltr">LevelDim</code>) that belong to that hierarchy. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r11c1-t41" headers="r1c1-t41">
<p><code dir="ltr">HierOrderVar</code></p>
</td>
<td class="cellalignment3617" headers="r11c1-t41 r1c2-t41">
<p>The variable, dimensioned by <code dir="ltr">Dim</code>, <code dir="ltr">HierDim</code>, and <code dir="ltr">___AW_ALL_LANGUAGES</code>, that contains integers (for each dimension value, in each hierarchy, in each language) used for sorting. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r12c1-t41" headers="r1c1-t41">
<p><code dir="ltr">InHierValueSet</code></p>
</td>
<td class="cellalignment3617" headers="r12c1-t41 r1c2-t41">
<p>The valueset, dimensioned by <code dir="ltr">HierDim</code>, that (for each hierarchy) contains all dimension values (contained in that hierarchy). (Note that when you specify this keyword, the function never returns NA, even if the dimension has no hierarchies.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r13c1-t41" headers="r1c1-t41">
<p><code dir="ltr">LevelDim</code></p>
</td>
<td class="cellalignment3617" headers="r13c1-t41 r1c2-t41">
<p>The dimension containing all levels for this dimension. (Note that when you specify this keyword, the function never returns NA, even if the dimension has no levels.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r14c1-t41" headers="r1c1-t41">
<p><code dir="ltr">LevelRel</code></p>
</td>
<td class="cellalignment3617" headers="r14c1-t41 r1c2-t41">
<p>The relation, dimensioned by the <code dir="ltr">Dim</code>, that relates each dimension value to a level in the <code dir="ltr">LevelList</code>. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r15c1-t41" headers="r1c1-t41">
<p><code dir="ltr">MemberDepthRel</code></p>
</td>
<td class="cellalignment3617" headers="r15c1-t41 r1c2-t41">
<p>The relation, dimensioned by <code dir="ltr">Dim</code> and <code dir="ltr">HierDim</code>, that relates each dimension value (in each hierarchy) to its depth (if any) in <code dir="ltr">___AW_DEPTH_DIMENSION</code>. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r16c1-t41" headers="r1c1-t41">
<p><code dir="ltr">MemberSourceRel</code></p>
</td>
<td class="cellalignment3617" headers="r16c1-t41 r1c2-t41">
<p>The relation, dimensioned by <code dir="ltr">Dim</code>, that relates each dimension value to an element of <code dir="ltr">___AW_MEMBER_SOURCES</code>. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r17c1-t41" headers="r1c1-t41">
<p><code dir="ltr">ParentRel</code></p>
</td>
<td class="cellalignment3617" headers="r17c1-t41 r1c2-t41">
<p>The relation, dimensioned by <code dir="ltr">Dim</code> and <code dir="ltr">HierDim</code>, that relates each dimension value (in each hierarchy) to its parent dimension value (in that hierarchy). (Note that when you specify this keyword, the function never returns NA, even if the dimension has no hierarchies.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r18c1-t41" headers="r1c1-t41">
<p><code dir="ltr">ValueFamilyRel</code></p>
</td>
<td class="cellalignment3617" headers="r18c1-t41 r1c2-t41">
<p>The relation, dimensioned by <code dir="ltr">Dim</code>, <code dir="ltr">___AW_GID_DIMENSION</code>, and <code dir="ltr">HierDim</code>, that relates each dimension value (for each GID, in each hierarchy) to the dimension value (with that GID, in that hierarchy), if any, of which it is a descendant. <code dir="ltr">ValueFamilyRel</code> is similar to <code dir="ltr">FamilyRel</code>, but used for value hierarchies. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="OLADM1823" class="tblformal">
<p class="titleintable"><a id="sthref2707"></a><a id="CHDDBBDJ"></a>Table 8-7 Keywords when the top-level-object is a Cube Dimension and the sub-object is a Base Attribute</p>
<table class="cellalignment3618" title="Keywords when the top-level-object is a Cube Dimension and the sub-object is a Base Attribute" summary="Valid values for keyword in OBJORG when the top-level-object is a Dimension and the sub-object is a Base Attribute" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t42">Keyword</th>
<th class="cellalignment3616" id="r1c2-t42">Returns</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t42" headers="r1c1-t42">
<p><code dir="ltr">Attribute</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t42 r1c2-t42">
<p>The value returned varies depending on whether or not the dimension is indexed.</p>
<ul>
<li>
<p>When the dimension is not indexed, the (physical) variable, dimensioned by <code dir="ltr">Dim</code> corresponding to the attribute&#39;s dimension and used to hold this (logical) attribute.</p>
</li>
<li>
<p>When the dimension is indexed, the (physical) relation, dimensioned by <code dir="ltr">Dim</code> corresponding to the attribute&#39;s dimension, that relates each dimension value to a corresponding value from <code dir="ltr">AttributeDim</code>.</p>
</li>
</ul>
<p>(Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t42" headers="r1c1-t42">
<p><code dir="ltr">AttributeDim</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t42 r1c2-t42">
<p>When the attribute is indexed, the dimension that stores all of the attributes values; otherwise NA.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t42" headers="r1c1-t42">
<p><code dir="ltr">HierUniqueKeyRel</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t42 r1c2-t42">
<p>When the attribute is a unique key attribute, the relation, dimensioned by <code dir="ltr">Dim</code> and <code dir="ltr">HierDim</code> corresponding to the attribute&#39;s dimension, that relates each analytic workspace dimension value (in each hierarchy) to a corresponding value from <code dir="ltr">AttributeDim</code>; otherwise, NA.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t42" headers="r1c1-t42">
<p><code dir="ltr">UniqueKeyRel</code></p>
</td>
<td class="cellalignment3617" headers="r5c1-t42 r1c2-t42">
<p>When the attribute is a unique key attribute (that is, indexed), the relation, dimensioned by <code dir="ltr">Dim</code>, that corresponds to the attribute&#39;s dimension, that relates each dimension value to a corresponding value from <code dir="ltr">AttributeDim</code>.; otherwise, NA.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="OLADM1824" class="tblformal">
<p class="titleintable"><a id="sthref2708"></a><a id="CHDIDCAJ"></a>Table 8-8 Keywords when the top-level-object is a Cube Dimension and the sub-object is a Dimension Level</p>
<table class="cellalignment3618" title="Keywords when the top-level-object is a Cube Dimension and the sub-object is a Dimension Level" summary="Valid values for keyword in OBJORG when the top-level-object is a Dimension and the sub-object is Dimension Level" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t43">Keyword</th>
<th class="cellalignment3616" id="r1c2-t43">Returns</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t43" headers="r1c1-t43">
<p><code dir="ltr">SurrogateDim</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t43 r1c2-t43">
<p>The surrogate for the owning dimension&#39;s <code dir="ltr">Dim</code> that contains only those dimension values contained in this dimension level. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="OLADM1825" class="tblformal">
<p class="titleintable"><a id="sthref2709"></a><a id="CHDDEDJA"></a>Table 8-9 Keywords when the top-level-object is a Cube Dimension and the sub-object is a Dimension Calculation Model</p>
<table class="cellalignment3618" title="Keywords when the top-level-object is a Cube Dimension and the sub-object is a Dimension Calculation Model" summary="Valid values for keyword in OBJORG when the top-level-object is a Dimension and the sub-object is Dimension Calculation Model" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t44">Keyword</th>
<th class="cellalignment3616" id="r1c2-t44">Returns</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t44" headers="r1c1-t44">
<p><code dir="ltr">Model</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t44 r1c2-t44">
<p>The model corresponding to this dimension&#39;s calculation model. (Note that when you specify this keyword, the function never returns NA.)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></dd>
<dt>OWNER <span class="italic">owner</span></dt>
<dd>
<p>The owner of the cube or cube dimension identified by <span class="italic">top-level-object</span>. If you do not include this clause, the function uses the current owner.</p>
</dd>
<dt><span class="italic">top-level-object</span></dt>
<dd>
<p>A text expression that specifies the name of the cube or the cube dimension for which information is requested.</p>
</dd>
<dt><span class="italic">sub-object</span></dt>
<dd>
<p>A text expression that specifies the name of the &#34;logical&#34; OLAP sub-object, if any, for which information is requested. Valid values vary depending on whether the <span class="italic">top-level-object</span> is a cube or a cube dimension:</p>
<ul>
<li>
<p>When <span class="italic">top-level-object</span> is a cube, you can specify the name of a measure or dimensionality</p>
</li>
<li>
<p>When <span class="italic">top-level-object</span> is a cube dimension, you can specify the name of a base attribute, hierarchy, dimension level, or dimension calculation model.</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2710"></a>Examples</p>
<p>Examples of using OBJORG with various keyword appear in several sample OLAP DML programs described within this manual:</p>
<ul>
<li>
<p>For examples of using OBJORG with the Dim keyword, see the following sample OLAP DML programs:</p>
<ul>
<li>
<p>ADD_L1_2 program in <a href="dml_commands_1.htm#BGEIGAJJ">Example 9-5, &#34;Adding Members to an OLAP Cube Dimension&#34;</a></p>
</li>
<li>
<p>REMOVE_L2_1 program in <a href="dml_commands_2.htm#CCHIGJDD">Example 10-98, &#34;Removing OLAP Cube Dimension Members From a Hierarchy&#34;</a></p>
</li>
<li>
<p>SETUP_PRE_MODEL and SETUP_POST_MODEL programs in <a href="dml_commands_2.htm#CCHGBEDG">Example 10-118, &#34;Creating Static and Dynamic Models for an OLAP Cube&#34;</a></p>
</li>
<li>
<p>ADD_L1_2_DATES program in <a href="dml_commands_2.htm#CCHDFBCB">Example 10-169, &#34;Updating the Attributes of an OLAP Cube Dimension&#34;</a></p>
</li>
</ul>
</li>
<li>
<p>For an example of using OBJORG with the Measure keyword, see the ADD_L1_2 program in <a href="dml_commands_1.htm#BGEIGAJJ">Example 9-5, &#34;Adding Members to an OLAP Cube Dimension&#34;</a>.</p>
</li>
<li>
<p>For an example of using OBJORG with the Parentrel keyword, see the REMOVE_L2-1 program in <a href="dml_commands_2.htm#CCHIGJDD">Example 10-98, &#34;Removing OLAP Cube Dimension Members From a Hierarchy&#34;</a>.</p>
</li>
<li>
<p>For examples of using OBJORG with the Attribute keyword, see the following sample programs:</p>
<ul>
<li>
<p>SETUP_POST_MODEL program in <a href="dml_commands_2.htm#CCHGBEDG">Example 10-118, &#34;Creating Static and Dynamic Models for an OLAP Cube&#34;</a></p>
</li>
<li>
<p>ADD_L1_2_DATES program in <a href="dml_commands_2.htm#CCHDFBCB">Example 10-169, &#34;Updating the Attributes of an OLAP Cube Dimension&#34;</a></p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79523"></a>
<div id="OLADM628" class="refsect1">
<h2 class="refsect1">OBSCURE</h2>
<p><a id="sthref2711"></a><a id="sthref2712"></a><a id="sthref2713"></a><a id="sthref2714"></a>The OBSCURE function provides two mechanisms for encoding a single-line text expression. Depending on the mechanism you use, OBSCURE can also restore the encoded value to its original form.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This function performs simple encoding. For information on using secure encryption and other security features in Oracle, see <a class="olink DBSEG" href="../DBSEG/toc.htm"><span class="italic">Oracle Database Security Guide</span></a>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2715"></a>Return Value</p>
<p>TEXT</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The return value of the OBSCURE function always has a text data type. However, unless you specify the TEXT keyword, the actual value returned by <code dir="ltr">OBSCURE(HASH)</code> and <code dir="ltr">OBSCURE(HIDE)</code> is binary. When you want to be able to manage these encoded values as text (for example, when you want to be able to store them in a text file), you must specify the TEXT keyword. See <a href="#i80793">Example 8-59, &#34;Generating Text Data&#34;</a>.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2716"></a>Syntax</p>
<p class="synopsis">OBSCURE({HASH|HIDE|UNHIDE}&nbsp;[TEXT]&nbsp;<span class="italic">seed-exp&nbsp;input-exp</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2717"></a>Parameters</p>
<dl>
<dt>HASH</dt>
<dd>
<p>Specifies that Oracle OLAP encodes the input text expression according to the seed expression that you specify. With the HASH keyword:</p>
<ul>
<li>
<p>Encoded values <span class="italic">cannot be restored</span> to their original form.</p>
</li>
<li>
<p>The same seed expression and input text always produce the <span class="italic">same</span> result.</p>
</li>
</ul>
</dd>
<dt>HIDE</dt>
<dd>
<p>Specifies that Oracle OLAP encodes the input text expression according to the seed expression that you specify. With the HIDE keyword:</p>
<ul>
<li>
<p>Encoded values <span class="italic">can be un-encoded</span> to their original form with UNHIDE.</p>
</li>
<li>
<p>The same seed expression and input text always produce <span class="italic">different</span> results.</p>
</li>
</ul>
<p>The HIDE keyword provides a mechanism for storing values in encoded form while actually comparing their <span class="italic">un-encoded</span> values.</p>
</dd>
<dt>UNHIDE</dt>
<dd>
<p>When specified with the original seed expression, decodes values encoded with the HIDE keyword to their original form. See <a href="#i80765">&#34;Decoding Text&#34;</a>.</p>
</dd>
<dt>TEXT</dt>
<dd>
<p>The TEXT keyword causes OBSCURE to convert binary data to text, such that the return value consists only of text data. When you do not specify the TEXT keyword, the output of OBSCURE is binary data. See <a href="#i80765">&#34;Decoding Text&#34;</a>, and <a href="#i80793">&#34;Generating Text Data&#34;</a>.</p>
</dd>
<dt><span class="italic">seed-exp</span></dt>
<dd>
<p>A single-line case-sensitive text expression that is used as a seed value when encoding of the input text expression.</p>
</dd>
<dt><span class="italic">input-exp</span></dt>
<dd>
<p>A single-line case-sensitive text expression to be encoded or decoded by OBSCURE.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2718"></a>Usage Notes</p>
<p class="subhead2"><a id="i80765"></a><a id="OLADM1826"></a>Decoding Text</p>
<p>When you have used OBSCURE(HIDE) with the TEXT keyword to encode a text expression, you must also specify the TEXT keyword with <code dir="ltr">OBSCURE(UNHIDE)</code> to decoded expression to its original value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2719"></a>Examples</p>
<div id="OLADM1827" class="example">
<p class="titleinexample"><a id="i80793"></a>Example 8-59 Generating Text Data</p>
<p>The following statements illustrate the use of the TEXT keyword.</p>
<pre dir="ltr">DEFINE encoded_text VARIABLE TEXT
DEFINE unencoded_text VARIABLE TEXT
 
unencoded_text = &#39;max&#39;
encoded_text = OBSCURE(HIDE TEXT &#39;XXXX&#39; unencoded_text)
SHOW encoded_text
</pre>
<p>This SHOW statement generates the following output.</p>
<pre dir="ltr">c5WF/XfABuY
</pre>
<p>The same statements without the TEXT keyword would produce binary output from the SHOW statement.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBIBDA"></a>
<div id="OLADM1828" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">ORA_HASH</h2>
<p>The ORA_HASH <a id="sthref2720"></a><a id="sthref2721"></a><a id="sthref2722"></a>function computes a hash value for a given expression. This function is useful for operations such as analyzing a subset of data and generating a random sample.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2723"></a>Return Value</p>
<p>NUMBER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2724"></a>Syntax</p>
<p class="synopsis">ORA_HASH (<span class="italic">expr</span> [, <span class="italic">max_bucket</span> [, <span class="italic">seed_value</span> ] ])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2725"></a>Parameters</p>
<dl>
<dt><span class="italic">expr</span></dt>
<dd>
<p>The data for which you want the function to compute a hash value. There are no restrictions on the type or length of data represented by <span class="italic">expr</span>.</p>
</dd>
<dt><span class="italic">max_bucket</span></dt>
<dd>
<p>The maximum bucket value returned by the function. You can specify any value between 0 and 4294967295. The default is 4294967295.</p>
</dd>
<dt><span class="italic">seed_value</span></dt>
<dd>
<p>A value between 0 and 4294967295. The default is 0. When you want to produce different has values for the same set of data, specify a value for this argument.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDECBAG"></a>
<div id="OLADM629" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">PARTITION</h2>
<p>The <a id="sthref2726"></a><a id="sthref2727"></a>PARTITION function returns the name of the partition in which a value is stored.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2728"></a>Return Value</p>
<p>Text</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2729"></a>Syntax</p>
<p class="synopsis">PARTITION (<span class="italic">partition_template_values</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2730"></a>Parameters</p>
<dl>
<dt><span class="italic">partition_template_values</span></dt>
<dd>
<p>An expression that represents one or more values of the partition template (for example, the name of a partition template or a QDR).</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2731"></a>Examples</p>
<div id="OLADM1829" class="example">
<p class="titleinexample"><a id="sthref2732"></a>Example 8-60 Retrieving the Name of a Partition</p>
<p>Assume that you have defined the following objects.</p>
<pre dir="ltr">DEFINE time DIMENSION TEXT
DEFINE product DIMENSION TEXT
DEFINE time_parentrel RELATION time &lt;time&gt;
DEFINE partition_sales_by_year PARTITION TEMPLATE &lt;time product&gt; -
PARTITION BY LIST (time)(PARTITION time_2003 VALUES -
(&#39;2003&#39;,&#39;Dec2003&#39;, &#39;Jan2003&#39;,&#39;31Dec2003&#39;,&#39;01Dec2003&#39;,&#39;31Jan2003&#39;,&#39;01Jan2003&#39;)-
&lt;time product&gt; PARTITION time_2002 VALUES -
(&#39;2002&#39;, &#39;Dec2002&#39;, &#39;Jan2002&#39;, &#39;31Dec2002&#39;, &#39;01Dec2002&#39;,&#39;31Jan2002&#39;,&#39;01Jan2002&#39;)-
 &lt;time product&gt;)
DEFINE sales DECIMAL &lt;partition_sales_by_year&lt;time product&gt;&gt;
</pre>
<p>Assume that these object have the values shown in the following report.</p>
<pre dir="ltr">REPORT DOWN PARTITION(partition_sales_by_year) time product sales
 
PARTITION(PART
ITION_SALES_BY
_YEAR)            TIME     PRODUCT     SALES
-------------- ---------- ---------- ----------
TIME_2003      2003       00001              NA
TIME_2003      Dec2003    00001              NA
TIME_2003      Jan2003    00001              NA
TIME_2003      31Dec2003  00001           14.78
TIME_2003      01Dec2003  00001           15.52
TIME_2003      31Jan2003  00001           13.61
TIME_2003      01Jan2003  00001           10.39
TIME_2003      2003       00002              NA
TIME_2003      Dec2003    00002              NA
TIME_2003      Jan2003    00002              NA
TIME_2003      31Dec2003  00002           16.05
TIME_2003      01Dec2003  00002           12.27
TIME_2003      31Jan2003  00002           10.83
TIME_2003      01Jan2003  00002           11.07
TIME_2002      2002       00001              NA
TIME_2002      Dec2002    00001              NA
TIME_2002      Jan2002    00001              NA
TIME_2002      31Dec2002  00001           18.80
TIME_2002      01Dec2002  00001           13.64
TIME_2002      31Jan2002  00001           12.41
TIME_2002      01Jan2002  00001           16.97
TIME_2002      2002       00002              NA
TIME_2002      Dec2002    00002              NA
TIME_2002      Jan2002    00002              NA
TIME_2002      31Dec2002  00002           17.47
TIME_2002      01Dec2002  00002           16.58
TIME_2002      31Jan2002  00002           18.94
TIME_2002      01Jan2002  00002           18.36
         
</pre>
<p>As shown in the following code, you can use the PARTITION function to retrieve the names of the partition in which a value is stored.</p>
<pre dir="ltr">SHOW partition_sales_by_year
&lt;2003, 00001&gt;

&#34; Use a QDR to identify the partition of a specific time value
SHOW PARTITION(partition_sales_by_year (time &#39;31Jan2002&#39;))
TIME_2002
 
REPORT DOWN time PARTITION(partition_sales_by_year)
 
               PARTITION(PARTITION_S
               ----ALES_BY_YEAR)----
               -------PRODUCT-------
TIME             00001      00002
-------------- ---------- ----------
2003           TIME_2003  TIME_2003
2002           TIME_2002  TIME_2002
Dec2003        TIME_2003  TIME_2003
Jan2003        TIME_2003  TIME_2003
Dec2002        TIME_2002  TIME_2002
Jan2002        TIME_2002  TIME_2002
31Dec2003      TIME_2003  TIME_2003
01Dec2003      TIME_2003  TIME_2003
31Jan2003      TIME_2003  TIME_2003
01Jan2003      TIME_2003  TIME_2003
31Dec2002      TIME_2002  TIME_2002
01Dec2002      TIME_2002  TIME_2002
31Jan2002      TIME_2002  TIME_2002
01Jan2002      TIME_2002  TIME_2002
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BAJFFIHC"></a>
<div id="OLADM630" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">PARTITIONCHECK</h2>
<p>The<a id="ABC1091847"></a> PARTITIONCHECK function identifies whether an aggmap object is compatible with the partitioning specified by a partition template object.</p>
<p><a id="sthref2733"></a><a id="sthref2734"></a>Aggregation can cross partitions; however, the data flow must always be in one direction. The data cannot go both in and out of the same partition; this processing causes Oracle OLAP to produce an error during the aggregation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2735"></a>Return Value</p>
<p><code dir="ltr">BOOLEAN</code>.</p>
<p>YE<code dir="ltr">S</code> when Oracle OLAP would not issue an error when aggregating a variable partitioned using the specified partition template using the specified aggmap; or <code dir="ltr">NO</code> when an error would occur.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2736"></a>Syntax</p>
<p class="synopsis">PARITITONCHECK (<span class="italic">aggmap</span> <span class="italic">parttition-template</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2737"></a>Parameters</p>
<dl>
<dt><span class="italic">aggmap</span></dt>
<dd>
<p>A text expression that is the name of an aggmap object.</p>
</dd>
<dt><span class="italic">partition-template</span></dt>
<dd>
<p>A text expression that is the name of the partition template object to check for compatibility with aggregation.<a id="sthref2738"></a></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79583"></a>
<div id="OLADM631" class="refsect1">
<h2 class="refsect1">PERCENTAGE</h2>
<p><a id="sthref2739"></a>The PERCENTAGE function computes the percent of total for each value in a numeric expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2740"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2741"></a>Syntax</p>
<p class="synopsis">PERCENTAGE(<span class="italic">expression&nbsp;</span>[CACHE] [BASEDON&nbsp;<span class="italic">dimension-list</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2742"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The numeric expression for which percent figures are to be computed.</p>
</dd>
<dt>CACHE</dt>
<dd>
<p>Specifies slightly different internal behavior. Specify this keyword only when the original performance is extremely slow.</p>
</dd>
<dt>BASEDON <span class="italic">dimension-list</span></dt>
<dd>
<p>An optional list of one or more of the dimensions of <span class="italic">expression</span> on which to base the percentage for each value. When you do not specify the dimensions, then PERCENTAGE bases the percentage on the total of all of the values of all of the dimensions of <span class="italic">expression</span>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2743"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1830"></a>The Effect of NASKIP on PERCENTAGE</p>
<p>PERCENTAGE is affected by the NASKIP option. When NASKIP is set to <code dir="ltr">YES</code> (the default), then PERCENTAGE ignores <code dir="ltr">NA</code> values. When NASKIP is set to <code dir="ltr">NO</code>, then PERCENTAGE returns <code dir="ltr">NA</code> for any cell in <span class="italic">expression</span> whose value is <code dir="ltr">NA</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2744"></a>Examples</p>
<div id="OLADM1831" class="example">
<p class="titleinexample"><a id="sthref2745"></a>Example 8-61 Calculating the Percentage</p>
<p>The following statements s limit the <code dir="ltr">month</code> and <code dir="ltr">district</code> dimensions, and report the data values, with subtotals, for the <code dir="ltr">units</code> variable.</p>
<pre dir="ltr">LIMIT month TO &#39;Jul96&#39; TO &#39;Sep96&#39;
LIMIT district TO &#39;Denver&#39;
REPORT SUBTOTALS W 8 units
</pre>
<p>The preceding statement produces the following output.</p>
<pre dir="ltr">DISTRICT: DENVER
               ----------UNITS-----------
               ----------MONTH-----------
PRODUCT         Jul96    Aug96    Sep96
-------------- -------- -------- --------
Tents               608      517      441
Canoes              467      363      411
Racquets          3,006    2,836    2,838
Sportswear        2,395    2,039    2,138
Footwear          1,581    1,532    1,667
-------------- -------- -------- --------
TOTAL DENVER      8,057    7,287    7,495
</pre>
<p>This statement reports the percentage that each <code dir="ltr">month</code> value represents of the total <code dir="ltr">month</code> values for each of the <code dir="ltr">product</code> values that are in status. The total of the values that PERCENTAGE returns for each <code dir="ltr">product</code> value is <code dir="ltr">1</code>.</p>
<pre dir="ltr">REPORT SUBTOTALS W 8 DOWN month PERCENTAGE(units BASEDON month)
</pre>
<pre dir="ltr">DISTRICT: DENVER
         -----------PERCENTAGE(UNITS BASEDON MONTH)------------
         -----------------------PRODUCT------------------------
MONTH      Tents      Canoes    Racquets  Sportswear  Footwear
-------- ---------- ---------- ---------- ---------- ----------
Jul96          0.39       0.38       0.35       0.36       0.33
Aug96          0.33       0.29       0.33       0.31       0.32
Sep96          0.28       0.33       0.33       0.33       0.35
-------- ---------- ---------- ---------- ---------- ----------
TOTAL          1.00       1.00       1.00       1.00       1.00
DENVER
</pre>
<p>This statement reports the percentage that each <code dir="ltr">product</code> value represents of the total <code dir="ltr">product</code> values for each of the <code dir="ltr">month</code> values that are in status.</p>
<pre dir="ltr">REPORT SUBTOTALS W 8 PERCENTAGE(units BASEDON product)
</pre>
<pre dir="ltr">DISTRICT: DENVER
               -PERCENTAGE(UNITS BASEDON-
               ---------PRODUCT)---------
               ----------MONTH-----------
PRODUCT         Jul96    Aug96    Sep96
-------------- -------- -------- --------
Tents              0.08     0.07     0.06
Canoes             0.06     0.05     0.05
Racquets           0.37     0.39     0.38
Sportswear         0.30     0.28     0.29
Footwear           0.20     0.21     0.22
-------------- -------- -------- --------
TOTAL DENVER       1.00     1.00     1.00
</pre>
<p>This statement reports the percentage based on all of the dimensions of the <code dir="ltr">units</code> variable. The total of all of the values that PERCENTAGE returns is <code dir="ltr">1</code>.</p>
<pre dir="ltr">REPORT SUBTOTALS W 8 PERCENTAGE(units)
</pre>
<pre dir="ltr">DISTRICT: DENVER
               ----PERCENTAGE(UNITS)-----
               ----------MONTH-----------
PRODUCT         Jul96    Aug96    Sep96
-------------- -------- -------- --------
Tents              0.03     0.02     0.02
Canoes             0.02     0.02     0.02
Racquets           0.13     0.12     0.12
Sportswear         0.10     0.09     0.09
Footwear           0.07     0.07     0.07
-------------- -------- -------- --------
TOTAL DENVER       0.35     0.32     0.33
</pre>
<p>The total for all of the values for both the <code dir="ltr">product</code> and <code dir="ltr">month</code> dimensions is <code dir="ltr">1.00</code>.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79643"></a>
<div id="OLADM632" class="refsect1">
<h2 class="refsect1">QUAL</h2>
<p><a id="sthref2746"></a><a id="sthref2747"></a><a id="sthref2748"></a><a id="sthref2749"></a><a id="sthref2750"></a><a id="sthref2751"></a>The QUAL function lets you explicitly specify a qualified data reference (QDR). Use QUAL in cases where the syntax of a QDR is ambiguous and could either be misinterpreted by Oracle OLAP or cause a syntax error.</p>
<p>QDRs provide a mechanism for limiting one or more dimensions of an expression to a single value. QDRs are useful when you want to temporarily reference a value that is not in the current status.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2752"></a>Return Value</p>
<p>The value that is returned has the same data type as the expression being qualified.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2753"></a>Syntax</p>
<p class="synopsis">QUAL(<span class="italic">expression</span>,&nbsp;<span class="italic">dimname1&nbsp;dimexp1&nbsp;</span>[,&nbsp;<span class="italic">dimnameN&nbsp;dimexpN</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2754"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The expression being qualified. Use QUAL to qualify complex expressions that contain computation, function calls, or ampersand substitution. You can also use QUAL when the expression is a simple variable name. However, QUAL is not required for simple expressions, and you can use the following standard QDR syntax.</p>
<p class="synopsis"><span class="italic">expression</span>(<span class="italic">dimname1&nbsp;dimexp1&nbsp;</span>[,&nbsp;<span class="italic">dimname2&nbsp;dimexp2&nbsp;</span>...])</p>
</dd>
<dt><span class="italic">dimname</span></dt>
<dd>
<p>The dimension to be limited. You can specify one or more of the dimensions of the expression. Each dimension must be paired with a <span class="italic">dimexp</span>. You can specify a dimension surrogate instead of the dimension.</p>
</dd>
<dt><span class="italic">dimexp</span></dt>
<dd>
<p>An expression that represents the value to which the dimension should be limited. The expression can be a value of the dimension, a text expression whose result is a value of the dimension, a numeric expression whose result is the logical position of a value of the dimension, or a relation of the dimension.</p>
<p>When the dimension being limited is a conjoint dimension, then <span class="italic">dimexp</span> must be enclosed in angle brackets and must include a value for each of its base dimensions.</p>
<p>When the dimension being limited is a concat dimension, then <span class="italic">dimname</span> and <span class="italic">dimexp</span> can be one combination listed in <a href="#g1033489">Table 8-10, &#34;Valid dimname and dimexp Combinations for Concat Dimensions&#34;</a>.</p>
<div id="OLADM1832" class="tblformal">
<p class="titleintable"><a id="sthref2755"></a><a id="g1033489"></a>Table 8-10 Valid dimname and dimexp Combinations for Concat Dimensions</p>
<table class="cellalignment3618" title="Valid dimname and dimexp Combinations for Concat Dimensions" summary="This table describes valid combinations for dimname and dimexp when the dimension being limited is a concat dimension." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t47"><span class="italic">dimname</span></th>
<th class="cellalignment3616" id="r1c2-t47"><span class="italic">dimexp</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t47" headers="r1c1-t47">
<p>The name of the concat dimension</p>
</td>
<td class="cellalignment3617" headers="r2c1-t47 r1c2-t47">
<p>A value of the concat dimension</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t47" headers="r1c1-t47">
<p>The name of the concat dimension</p>
</td>
<td class="cellalignment3617" headers="r3c1-t47 r1c2-t47">
<p>The name of a base dimension</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t47" headers="r1c1-t47">
<p>The name of a base dimension of the concat dimension</p>
</td>
<td class="cellalignment3617" headers="r4c1-t47 r1c2-t47">
<p>A value of the base dimension</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t47" headers="r1c1-t47">
<p>The name of a base dimension of the concat dimension</p>
</td>
<td class="cellalignment3617" headers="r5c1-t47 r1c2-t47">
<p>The name of the concat dimension</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2756"></a>Examples</p>
<div id="OLADM1833" class="example">
<p class="titleinexample"><a id="sthref2757"></a>Example 8-62 Using QUAL with MAX</p>
<p>The following example first shows how you might view your data by limiting its dimensions, and then how you might view it by using QUAL.</p>
<p>Assume that you issue the following OLAP DML statements to limit the view of the Cogs line data in the Sporting division to January 1996 through June 1996, and, then, report by month on the maximum value of actual costs or budgeted costs or MAX(actual,budget), actual costs, and budgeted costs for each month.</p>
<pre dir="ltr">LIMIT month TO &#39;Jan96&#39; TO &#39;Jun96&#39;
LIMIT line TO &#39;Cogs&#39;
LIMIT division TO &#39;Sporting&#39;
REPORT DOWN month W 11 MAX(actual,budget) W 11 actual W 11 budget
</pre>
<p>The preceding statements produce the following report.</p>
<pre dir="ltr">DIVISION: SPORTING
               ---------------LINE----------------
               ---------------COGS----------------
               MAX(ACTUAL,
MONTH            BUDGET)     ACTUAL      BUDGET
-------------- ----------- ----------- -----------
Jan96           287,557.87  287,557.87  279,773.01
Feb96           323,981.56  315,298.82  323,981.56
Mar96           326,184.87  326,184.87  302,177.88
Apr96           394,544.27  394,544.27  386,100.82
May96           449,862.25  449,862.25  433,997.89
Jun96           457,347.55  457,347.55  448,042.45
</pre>
<p>Now consider how you might view the same figures for <code dir="ltr">MAX(actual,budget)</code> without changing the status of <code dir="ltr">line</code> or <code dir="ltr">division</code>.</p>
<pre dir="ltr">ALLSTAT
LIMIT month TO &#39;Jan96&#39; TO &#39;Jun96&#39;
REPORT HEADING &#39;For Cogs in Sporting Division&#39; DOWN month -
   W 11 HEADING &#39;MAX(actual,budget)&#39;-
   QUAL(MAX(actual,budget), line &#39;Cogs&#39;, division &#39;Sporting&#39;)

For Cogs in
Sporting       MAX(actual,
Division         budget)
-------------- -----------
Jan96           287,557.87
Feb96           323,981.56
Mar96           326,184.87
Apr96           394,544.27
May96           449,862.25
Jun96           457,347.55
</pre>
<p>When you attempt to produce the same report with standard QDR syntax, Oracle OLAP signals an error.</p>
<pre dir="ltr">REPORT HEADING &#39;For Cogs in Sporting Division&#39; DOWN month -
   W 11 HEADING &#39;MAX(actual,budget)&#39;-
   MAX(actual,budget) (line cogs, division sporting)
</pre>
<p>The following error message is produced.</p>
<pre dir="ltr">ERROR: A right parenthesis or an operator is expected after LINE.
</pre></div>
<!-- class="example" -->
<div id="OLADM1834" class="example">
<p class="titleinexample"><a id="sthref2758"></a>Example 8-63 Using QUAL with a Concat Dimension</p>
<p>The following example shows two ways of limiting the values of a concat dimension in a QUAL function. The <code dir="ltr">reg.dist.ccdim</code> concat dimension has <code dir="ltr">region</code> and <code dir="ltr">district</code> as its base dimensions. The <code dir="ltr">rdsales</code> variable is dimensioned by <code dir="ltr">month</code>, <code dir="ltr">product</code>, and <code dir="ltr">reg.dist.ccdim</code>.</p>
<pre dir="ltr">LIMIT month TO &#39;Jan96&#39; TO &#39;Jun96&#39;
LIMIT product TO &#39;Tents&#39; &#39;Canoes&#39;
 
&#34; Limit the concat by specifying one of its component dimensions
REPORT W 30 QUAL(rdsales * 2, month &#39;Feb96&#39;, district &#39;Boston&#39;)
</pre>
<p>These statements produce the following report.</p>
<pre dir="ltr">                 QUAL(RDSALES * 2, MONTH
PRODUCT          &#39;Feb96&#39;, DISTRICT &#39;Boston&#39;)
-------------- ------------------------------
Tents                               69,283.18
Canoes                             164,475.36
 
&#34; Limit the concat by specifying one of its values
REPORT W 30 QUAL(rdsales * 2, month &#39;Mar96&#39;, reg.dist.ccdim  &#39;&lt;district: Boston&gt;&#39;)
 
                  QUAL(RDSALES * 2, MONTH
                  &#39;Mar96&#39;, REG.DIST.CCDIM
PRODUCT            &#39;&lt;district: Boston&gt;&#39;)
-------------- ------------------------------
TENTS                               91,484.42
CANOES                             195,244.56
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1051795"></a>
<div id="OLADM633" class="refsect1">
<h2 class="refsect1">RANDOM</h2>
<p><a id="sthref2759"></a><a id="sthref2760"></a><a id="sthref2761"></a>The RANDOM function produces a number that is randomly distributed between specified low and high boundaries. Randomly generated numbers are useful when building and duplicating tests of applications. They are especially useful for simulation and forecasting applications.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
To compute the number, RANDOM uses the values of the <a href="dml_options.htm#i79457">RANDOM.SEED.1 and RANDOM.SEED.2</a> options and then changes the values for the next time. When you create your own seeds, set the value of both options to odd numbers. This practice enhances the randomness of the numbers that are produced.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2762"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2763"></a>Syntax</p>
<p class="synopsis">RANDOM([<span class="italic">lowbound</span>]&nbsp;[<span class="italic">highbound</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2764"></a>Parameters</p>
<dl>
<dt><span class="italic">lowbound</span></dt>
<dd>
<p>A numeric expression that specifies the lower boundary for the random number series. The default is <code dir="ltr">0</code>. When <span class="italic">lowbound</span> is <code dir="ltr">NA</code>, the RANDOM function produces <code dir="ltr">NA</code>.</p>
</dd>
<dt><span class="italic">highbound</span></dt>
<dd>
<p>A numeric expression that specifies the upper boundary for the random number series. The default is <code dir="ltr">1</code>. When <span class="italic">highbound</span> is <code dir="ltr">NA</code>, the RANDOM function produces <code dir="ltr">NA</code></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2765"></a>Examples</p>
<div id="OLADM1835" class="example">
<p class="titleinexample"><a id="BABBBAJB"></a>Example 8-64 Producing Random Numbers</p>
<p>This example assigns random numbers between 100 and 200 to a variable called <code dir="ltr">test</code>, which is dimensioned by <code dir="ltr">product</code>.</p>
<pre dir="ltr">test = RANDOM(100 200)
REPORT test
</pre>
<p>These statements produce a report such as the following.</p>
<pre dir="ltr">PRODUCT           TEST
-------------- ----------
Tents              122.93
Canoes             176.69
Racquets           168.32
Sportswear         150.92
Footwear           187.46
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1007526"></a>
<div id="OLADM634" class="refsect1">
<h2 class="refsect1">RANK</h2>
<p><a id="sthref2766"></a>The RANK function computes the rank of values in a numeric expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2767"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2768"></a>Syntax</p>
<p class="synopsis">RANK(<span class="italic">expression&nbsp;method&nbsp;</span>[<span class="italic">attributes</span>] [BASEDON&nbsp;<span class="italic">dimension-list</span>])</p>
<p>where <span class="syntaxinlineitalic">attributes</span> is one or more of the following:</p>
<dl>
<dd><span class="syntaxinline">RESET</span></dd>
<dd><span class="syntaxinline">NAFIRST</span></dd>
<dd><span class="syntaxinline">NALAST</span></dd>
<dd><span class="syntaxinline">LIMITSAVE (</span><span class="syntaxinlineitalic">limit-expression</span><span class="syntaxinline">...)</span></dd>
<dd><span class="syntaxinline">TIEBREAKERS (</span><span class="syntaxinlineitalic">target-expression</span><span class="syntaxinline">...)</span></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2769"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The numeric expression for which rankings are to be computed.</p>
</dd>
<dt><span class="italic">method</span></dt>
<dd>
<p>The method to use in computing the rank of the values in <span class="italic">expression</span>. The <span class="italic">method</span> argument can be one of the following keywords. See also <a href="#i87160">&#34;Results of Method Values&#34;</a>.</p>
<div id="OLADM1836" class="tblformal">
<p class="titleintable"><a id="sthref2770"></a><a id="sthref2771"></a>Table 8-11 Methods for Computing RANK</p>
<table class="cellalignment3618" title="Methods for Computing RANK" summary="This table describes the keywords for the RANK function that specify the method to use when computing rank." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t49">Method</th>
<th class="cellalignment3616" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t49" headers="r1c1-t49">
<p>MIN</p>
</td>
<td class="cellalignment3617" headers="r2c1-t49 r1c2-t49">
<p>Identical values get the same minimum rank.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t49" headers="r1c1-t49">
<p>MAX</p>
</td>
<td class="cellalignment3617" headers="r3c1-t49 r1c2-t49">
<p>Identical values get the same maximum rank.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t49" headers="r1c1-t49">
<p>AVERAGE</p>
</td>
<td class="cellalignment3617" headers="r4c1-t49 r1c2-t49">
<p>Identical values get the same average rank.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t49" headers="r1c1-t49">
<p>PACKED</p>
</td>
<td class="cellalignment3617" headers="r5c1-t49 r1c2-t49">
<p>Identical values get the same rank but the results are packed into consecutive <code dir="ltr">INTEGER</code> values.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t49" headers="r1c1-t49">
<p>UNIQUE</p>
</td>
<td class="cellalignment3617" headers="r6c1-t49 r1c2-t49">
<p>All values get a unique rank; for identical values the rank is arbitrary.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t49" headers="r1c1-t49">
<p>PERCENTILE</p>
</td>
<td class="cellalignment3617" headers="r7c1-t49 r1c2-t49">
<p>Values are ranked from 1 to 100, based on the relative frequency of their occurrence in the expression.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t49" headers="r1c1-t49">
<p>DECILE</p>
</td>
<td class="cellalignment3617" headers="r8c1-t49 r1c2-t49">
<p>Values are ranked from 1 to 10, based on the relative frequency of their occurrence in the expression.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t49" headers="r1c1-t49">
<p>QUARTILE</p>
</td>
<td class="cellalignment3617" headers="r9c1-t49 r1c2-t49">
<p>Values are ranked from 1 to 4, based on the relative frequency of their occurrence in the expression.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></dd>
<dt>RESET</dt>
<dd>
<p>Changes how Oracle OLAP computes RANK within a looping statement (for example, an assignment statement):</p>
<ul>
<li>
<p>When you do <span class="italic">not</span> specify RESET, Oracle OLAP ranks the members of each group only once and, then caches those ranked values. As the looping statement continues to execute and RANK executes against same set of values, Oracle OLAP uses those cached values to return values for RANK.</p>
</li>
<li>
<p>When you include RESET, Oracle OLAP recomputes RANK each and every time it executes within the looping statement. This behavior <span class="italic">significantly</span> increases the time it takes for Oracle OLAP to execute the looping statement that contains RANK.</p>
</li>
</ul>
<p>Within a looping statement, the <span class="italic">only</span> time you use RANK with RESET is when you know that within any group the rankings of members within that group <span class="italic">will</span> change during the execution of the looping statement.</p>
</dd>
<dt>NAFIRST</dt>
<dd>
<p>Specifies that Oracle OLAP converts all NA values to the largest positive decimal number or <code dir="ltr">(10**308)</code> before ranking the values.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
An NA expression value produces an NA rank unless you specify either NAFIRST or NALIST.</div>
</dd>
<dt>NALAST</dt>
<dd>
<p>Specifies that Oracle OLAP converts all NA values to the largest negative decimal number or <code dir="ltr">-(10**308)</code> before ranking the values.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
An NA expression value produces an NA rank unless you specify either NAFIRST or NALIST.</div>
</dd>
<dt>LIMITSAVE</dt>
<dd>
<p>Specifies the status of the dimensions that Oracle OLAP uses when calculating RANK. By specifying LIMITSAVE within the RANK function, rather than specify CHGDIMS with LIMITSAVE, you insure that Oracle OLAP evaluates the status only once when RANK needs to calculate a new result.</p>
</dd>
<dt><span class="italic">limit-expression</span></dt>
<dd>
<p>The dimension values that Oracle OLAP uses to determine dimension status while executing RANK. For the <span class="italic">limit-expression</span> argument, you can specify any expression including a valueset, a LIMIT function, or a SORT function.</p>
</dd>
<dt>TIEBREAKERS</dt>
<dd>
<p>Specifies how Oracle OLAP sequences values of equal rank.</p>
</dd>
<dt><span class="italic">tiebreaker-expression</span></dt>
<dd>
<p>Any expression including a valueset, a LIMIT function, or a SORT function. Oracle OLAP executes the <span class="italic">tiebreaker-expressions</span> in the order in which they are specified. The status of the dimensions of each tiebreaker-expression is the current status of the dimensions or the status specified in the LIMITSAVE clause, if any.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you specify a valueset for <span class="italic">tiebreaker-expression</span>, Oracle OLAP returns the ranked items in -(STATRANK) order.</div>
</dd>
<dt>BASEDON <span class="italic">dimension-list</span></dt>
<dd>
<p>An optional list of one or more of the dimensions of <span class="italic">expression</span> to include in the ranking. When you do not specify the dimensions, then RANK bases the ranking on all of the dimensions of <span class="italic">expression</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When the current value of a BASEDON dimension is not in ranking status, Oracle OLAP returns a rank of <code dir="ltr">NA</code>.</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2772"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1837"></a>Monitoring the Behavior of RANK</p>
<p>The OLAP DML provides the RANK_CALLS, RANK_CELLS, and RANK_SORTS options that you can use to monitor the behavior of the RANK function.</p>
<p><a id="CACBHGFC"></a><a id="OLADM1838"></a><span class="subhead3">RANK_CALLS&nbsp;</span>The RANK_CALLS<a id="sthref2773"></a> option <a id="sthref2774"></a><a id="sthref2775"></a>is an <code dir="ltr">INTEGER</code>, read-only option that holds the number of calls that Oracle OLAP has made to the RANK function.</p>
<p><a id="CACJDCFJ"></a><a id="OLADM1839"></a><span class="subhead3">RANK_CELLS&nbsp;</span>The RANK_CELLS option<a id="sthref2776"></a> is an <code dir="ltr">INTEGER</code>, read-only option that <a id="sthref2777"></a>holds the number of values that Oracle OLAP has computed when executing the RANK function.</p>
<p><a id="CACIEDFA"></a><a id="OLADM1840"></a><span class="subhead3">RANK_SORTS&nbsp;</span> The <a id="sthref2778"></a>RANK_SORTS option is a read-only option that holds the <a id="sthref2779"></a>number of sorts that have been triggered by the execution of the RANK function</p>
<p class="subhead2"><a id="i87160"></a><a id="OLADM1841"></a>Results of Method Values</p>
<p>This note describes the results of the different methods of ranking values. The results are based on the <code dir="ltr">sales2</code> variable, which is described in <a href="#i87454">&#34;Ranking Values&#34;</a>, with the <code dir="ltr">geography</code> dimension limited to <code dir="ltr">G2</code> as the following statements demonstrate.</p>
<pre dir="ltr">LIMIT geography TO &#39;G2&#39;
SORT items D sales2
REPORT DOWN geography sales2
</pre>
<p>The preceding statements produce the following output.</p>
<pre dir="ltr">               ------------------------SALES2------------------------
               ------------------------ITEMS-------------------------
GEOGRAPHY        ITEM4      ITEM2      ITEM3      ITEM1      ITEM5
-------------- ---------- ---------- ---------- ---------- ----------
G2                  25.00      20.00      20.00      15.00       7.00
</pre>
<p><a href="#g1028628">Table 8-12, &#34;Results of Different Methods of Ranking&#34;</a> shows the results of the different methods of ranking that are produced by a statement of the form</p>
<pre dir="ltr">REPORT DOWN geography RANK(sales2 MIN BASEDON items)
</pre>
<p>with the different <span class="italic">method</span> keywords substituted for MIN.</p>
<div id="OLADM1842" class="tblruleformal">
<p class="titleintable"><a id="sthref2780"></a><a id="g1028628"></a>Table 8-12 Results of Different Methods of Ranking</p>
<table class="cellalignment3615" title="Results of Different Methods of Ranking " summary="This table illustrates the results of the different methods of ranking that are produced by the example statement." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t54">Methods</th>
<th class="cellalignment3616" id="r1c2-t54">(ITEM4, G2) = 25</th>
<th class="cellalignment3616" id="r1c3-t54">(ITEM2, G2) = 20</th>
<th class="cellalignment3616" id="r1c4-t54">(ITEM3, G2) = 20</th>
<th class="cellalignment3616" id="r1c5-t54">(ITEM1,G2) = 15</th>
<th class="cellalignment3616" id="r1c6-t54">(ITEM5,G2) = 7</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t54" headers="r1c1-t54">
<p>MIN</p>
</td>
<td class="cellalignment3617" headers="r2c1-t54 r1c2-t54">
<p>&nbsp;&nbsp;&nbsp;1</p>
</td>
<td class="cellalignment3617" headers="r2c1-t54 r1c3-t54">
<p>&nbsp;2</p>
</td>
<td class="cellalignment3617" headers="r2c1-t54 r1c4-t54">
<p>&nbsp;2</p>
</td>
<td class="cellalignment3617" headers="r2c1-t54 r1c5-t54">
<p>&nbsp;4</p>
</td>
<td class="cellalignment3617" headers="r2c1-t54 r1c6-t54">
<p>&nbsp;5</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t54" headers="r1c1-t54">
<p>MAX</p>
</td>
<td class="cellalignment3617" headers="r3c1-t54 r1c2-t54">
<p>&nbsp;&nbsp;&nbsp;1</p>
</td>
<td class="cellalignment3617" headers="r3c1-t54 r1c3-t54">
<p>&nbsp;3</p>
</td>
<td class="cellalignment3617" headers="r3c1-t54 r1c4-t54">
<p>&nbsp;3</p>
</td>
<td class="cellalignment3617" headers="r3c1-t54 r1c5-t54">
<p>&nbsp;4</p>
</td>
<td class="cellalignment3617" headers="r3c1-t54 r1c6-t54">
<p>&nbsp;5</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t54" headers="r1c1-t54">
<p>AVERAGE</p>
</td>
<td class="cellalignment3617" headers="r4c1-t54 r1c2-t54">
<p>&nbsp;&nbsp;&nbsp;1</p>
</td>
<td class="cellalignment3617" headers="r4c1-t54 r1c3-t54">
<p>&nbsp;2.5</p>
</td>
<td class="cellalignment3617" headers="r4c1-t54 r1c4-t54">
<p>&nbsp;2.5</p>
</td>
<td class="cellalignment3617" headers="r4c1-t54 r1c5-t54">
<p>&nbsp;4</p>
</td>
<td class="cellalignment3617" headers="r4c1-t54 r1c6-t54">
<p>&nbsp;5</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t54" headers="r1c1-t54">
<p>PACKED</p>
</td>
<td class="cellalignment3617" headers="r5c1-t54 r1c2-t54">
<p>&nbsp;&nbsp;&nbsp;1</p>
</td>
<td class="cellalignment3617" headers="r5c1-t54 r1c3-t54">
<p>&nbsp;2</p>
</td>
<td class="cellalignment3617" headers="r5c1-t54 r1c4-t54">
<p>&nbsp;2</p>
</td>
<td class="cellalignment3617" headers="r5c1-t54 r1c5-t54">
<p>&nbsp;3</p>
</td>
<td class="cellalignment3617" headers="r5c1-t54 r1c6-t54">
<p>&nbsp;4</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t54" headers="r1c1-t54">
<p>UNIQUE</p>
</td>
<td class="cellalignment3617" headers="r6c1-t54 r1c2-t54">
<p>&nbsp;&nbsp;&nbsp;1</p>
</td>
<td class="cellalignment3617" headers="r6c1-t54 r1c3-t54">
<p>&nbsp;2</p>
</td>
<td class="cellalignment3617" headers="r6c1-t54 r1c4-t54">
<p>&nbsp;3</p>
</td>
<td class="cellalignment3617" headers="r6c1-t54 r1c5-t54">
<p>&nbsp;4</p>
</td>
<td class="cellalignment3617" headers="r6c1-t54 r1c6-t54">
<p>&nbsp;5</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t54" headers="r1c1-t54">
<p>PERCENTILE</p>
</td>
<td class="cellalignment3617" headers="r7c1-t54 r1c2-t54">
<p>100</p>
</td>
<td class="cellalignment3617" headers="r7c1-t54 r1c3-t54">
<p>62</p>
</td>
<td class="cellalignment3617" headers="r7c1-t54 r1c4-t54">
<p>62</p>
</td>
<td class="cellalignment3617" headers="r7c1-t54 r1c5-t54">
<p>25</p>
</td>
<td class="cellalignment3617" headers="r7c1-t54 r1c6-t54">
<p>&nbsp;1</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t54" headers="r1c1-t54">
<p>DECILE</p>
</td>
<td class="cellalignment3617" headers="r8c1-t54 r1c2-t54">
<p>&nbsp;10</p>
</td>
<td class="cellalignment3617" headers="r8c1-t54 r1c3-t54">
<p>&nbsp;7</p>
</td>
<td class="cellalignment3617" headers="r8c1-t54 r1c4-t54">
<p>&nbsp;7</p>
</td>
<td class="cellalignment3617" headers="r8c1-t54 r1c5-t54">
<p>&nbsp;3</p>
</td>
<td class="cellalignment3617" headers="r8c1-t54 r1c6-t54">
<p>&nbsp;1</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t54" headers="r1c1-t54">
<p>QUARTILE</p>
</td>
<td class="cellalignment3617" headers="r9c1-t54 r1c2-t54">
<p>&nbsp;&nbsp;4</p>
</td>
<td class="cellalignment3617" headers="r9c1-t54 r1c3-t54">
<p>&nbsp;3</p>
</td>
<td class="cellalignment3617" headers="r9c1-t54 r1c4-t54">
<p>&nbsp;3</p>
</td>
<td class="cellalignment3617" headers="r9c1-t54 r1c5-t54">
<p>&nbsp;1</p>
</td>
<td class="cellalignment3617" headers="r9c1-t54 r1c6-t54">
<p>&nbsp;1</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<p>Note that the value that is returned by the UNIQUE method for <code dir="ltr">Item2</code> and <code dir="ltr">Item3</code> can be either <code dir="ltr">2</code> or <code dir="ltr">3</code>, because the RANK function randomly assigns a unique rank for identical values in the expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="g1049528"></a>Examples</p>
<div id="OLADM1843" class="example">
<p class="titleinexample"><a id="i87454"></a>Example 8-65 Ranking Values</p>
<p>Assume that your analytic workspace contains <code dir="ltr">geography</code> and <code dir="ltr">items</code> dimensions and <code dir="ltr">sales2</code> variable.</p>
<pre dir="ltr">DEFINE geography DIMENSION TEXT 
MAINTAIN geography ADD &#39;g1&#39; &#39;g2&#39; &#39;g3&#39;
DEFINE items DIMENSION TEXT
MAINTAIN items ADD &#39;Item1&#39; &#39;Item2&#39; &#39;Item3&#39; &#39;Item4&#39; &#39;Item5&#39;
DEFINE sales2 DECIMAL &lt;geography items&gt;
</pre>
<p>Assume the <code dir="ltr">sales2</code> variable has the following data values.</p>
<pre dir="ltr">               -------------SALES2-------------
               -----------GEOGRAPHY------------
ITEMS              g1         g2         g3
-------------- ---------- ---------- ----------
Item1               30.00      15.00      12.00
Item2               10.00      20.00      18.00
Item3               15.00      20.00      24.00
Item4               30.00      25.00      25.00
Item5                  NA       7.00      21.00
</pre>
<p>This statement reports the results of using the MIN method to rank the <code dir="ltr">sales2</code> values based on the <code dir="ltr">items</code> dimension.</p>
<pre dir="ltr">report rank(sales2 min basedon items)
</pre>
<p>The preceding statement produces the following output.</p>
<pre dir="ltr">               -RANK(SALES2 MIN BASEDON ITEMS)-
               -----------GEOGRAPHY------------
ITEMS              g1         g2         g3
-------------- ---------- ---------- ----------
Item1                1.00       4.00       5.00
Item2                4.00       2.00       4.00
Item3                3.00       2.00       2.00
Item4                1.00       1.00       1.00
Item5                  NA       5.00       3.00
</pre>
<p>This statement reports the results of using the MIN method to rank the <code dir="ltr">sales2</code> values based on the geography dimension.</p>
<pre dir="ltr">REPORT RANK(sales2 MIN BASEDON geography)
</pre>
<p>The preceding statement produces the following output.</p>
<pre dir="ltr">               ----RANK(SALES2 MIN BASEDON-----
               -----------GEOGRAPHY)-----------
               -----------GEOGRAPHY------------
ITEMS              g1         g2         g3
-------------- ---------- ---------- ----------
Item1                1.00       2.00       3.00
Item2                3.00       1.00       2.00
Item3                3.00       2.00       1.00
Item4                1.00       2.00       2.00
Item5                  NA       2.00       1.00
</pre>
<p>This statement reports the results of using the MIN method to rank the <code dir="ltr">sales2</code> values based on all of its dimensions.</p>
<pre dir="ltr">REPORT RANK(sales2, MIN)
</pre>
<p>The preceding statement produces the following output.</p>
<pre dir="ltr">               -------RANK(SALES2, MIN)--------
               -----------GEOGRAPHY------------
ITEMS              g1         g2         g3
-------------- ---------- ---------- ----------
Item1                1.00      10.00      12.00
Item2               13.00       7.00       9.00
Item3               10.00       7.00       5.00
Item4                1.00       3.00       3.00
Item5                  NA      14.00       6.00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGBJIA"></a>
<div id="OLADM1844" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">RAWTOHEX</h2>
<p>The RAWTOHEX <a id="sthref2781"></a><a id="sthref2782"></a><a id="sthref2783"></a>function converts a raw value to a character string of hexadecimal digits.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_expression.htm#BABHJEGH">&#34;RAW Data Type&#34;</a> and the <a href="dml_functions_1.htm#CHDDAHJE">HEXTORAW</a> function</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2784"></a>Returns</p>
<p>TEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2785"></a>Syntax</p>
<p class="synopsis">RAWTOHEX(<span class="italic">raw-exp</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2786"></a>Parameters</p>
<dl>
<dt><span class="italic">raw-exp</span></dt>
<dd>
<p>A raw expression.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79467"></a>
<div id="OLADM635" class="refsect1">
<h2 class="refsect1">RECNO</h2>
<p><a id="sthref2787"></a><a id="sthref2788"></a><a id="sthref2789"></a><a id="sthref2790"></a>The RECNO function reports the current record number of a file opened for reading. It returns <code dir="ltr">NA</code> when Oracle OLAP has reached the end of the file.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2791"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2792"></a>Syntax</p>
<p class="synopsis">RECNO(<span class="italic">fileunit</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2793"></a>Parameters</p>
<dl>
<dt><span class="italic">fileunit</span></dt>
<dd>
<p>A file unit number assigned to a file opened for reading in a previous call to the FILEOPEN function.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2794"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1845"></a>Opening Files</p>
<p>Before you can use the RECNO function, you must open the file for reading. When the file unit number is not associated with an open file or the file has been opened for writing, RECNO returns an error.</p>
<p class="subhead2"><a id="OLADM1846"></a>Using RECNO with FILEGET</p>
<p>RECNO is usually used with FILEREAD or FILENEXT, which read whole records. When you are reading data from a file with the FILEGET function, which can read partial records, RECNO returns the number of times you have read data from the file, not the number of actual records.</p>
<p class="subhead2"><a id="OLADM1847"></a>LINENUM Option</p>
<p>See also the <a href="dml_options.htm#i78817">LINENUM</a> option, which holds the current line number of output.</p>
<p class="subhead2"><a id="OLADM1848"></a>Records in Text Files</p>
<p>When the file is a text file, a record is delimited by a newline character. When the file is a binary file, you must set the file&#39;s LSIZE attribute to the record length with a FILESET statement. TEXT is the default file type.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2795"></a>Examples</p>
<div id="OLADM1849" class="example">
<p class="titleinexample"><a id="sthref2796"></a>Example 8-66 Using RECNO with FILEREAD</p>
<p>In the following example code, a FILEREAD statement maintains the INTEGER dimension, adding each record number associated with <code dir="ltr">filename.</code> The text associated with each record number becomes each value of the variable <code dir="ltr">textvar</code>.</p>
<pre dir="ltr">DEFINE dim1 INTEGER DIMENSION
DEFINE textvar TEXT &lt;dim1&gt;
x = FILEOPEN(&#39;filename&#39; R)
FILEREAD x APPEND dim1 = RECNO(x) W 8 TEXTVAR
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCIGIB"></a>
<div id="OLADM1850" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">REGEXP_COUNT</h2>
<p>The REGEXP_COUNT<a id="sthref2797"></a><a id="sthref2798"></a> function returns the number of times a pattern occurs in a source string. The function evaluates strings using characters as defined by the input character set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCGGJA">REGEXP_INSTR</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2799"></a>Return value</p>
<p>When a match is found, an INTEGER that indicates the number of occurrences of the pattern; otherwise 0.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2800"></a>Syntax</p>
<p class="synopsis">REGEXP_COUNT (<span class="italic">source_char</span>, <span class="italic">pattern</span> [, <span class="italic">position</span> [, <span class="italic">match_param</span>]])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2801"></a>Parameters</p>
<dl>
<dt><span class="italic">source_char</span></dt>
<dd>
<p>The text expression for which the function searches.</p>
</dd>
<dt><span class="italic">pattern</span></dt>
<dd>
<p>The text expression for which the function searches. It is usually a text literal and can contain up to 512 bytes. If the data type of <span class="italic">pattern</span> is different from the data type of <span class="italic">source_char</span>, then the function converts <span class="italic">pattern</span> to the data type of <span class="italic">source_char</span>.</p>
<p>Note that the function ignores subexpression parentheses in pattern. For example, the pattern &#39;(123(45))&#39; is equivalent to &#39;12345&#39;. Also, the function interprets a period as a wildcard character that matches any character.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
&#34;Oracle Regular Expression Support&#34; in <a class="olink SQLRF020" href="../SQLRF/ap_posix.htm#SQLRF020"><span class="italic">Oracle Database SQL Language Reference</span></a> for a listing of the operators that you can specify in <span class="italic">pattern</span></div>
</dd>
<dt><span class="italic">position</span></dt>
<dd>
<p>A positive INTEGER indicating the character of <span class="italic">source_char</span> where the function should begin the search. The default is 1, meaning that the function begins the search at the first character of <span class="italic">source_char</span>. After finding the first occurrence of pattern, the function searches for a second occurrence beginning with the first character following the first occurrence.</p>
</dd>
<dt><span class="italic">match_parameter</span></dt>
<dd>
<p>A text expression that lets you change the default matching behavior of the function. You can specify one or more of the values shown in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment3615" title="Values for the match parameter" summary="Values for match_parameter of REGEXP_SUBSTR" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t58">Value</th>
<th class="cellalignment3616" id="r1c2-t58">Specifies</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t58" headers="r1c1-t58"><code dir="ltr">c</code></td>
<td class="cellalignment3617" headers="r2c1-t58 r1c2-t58">Case-sensitive matching.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t58" headers="r1c1-t58"><code dir="ltr">i</code></td>
<td class="cellalignment3617" headers="r3c1-t58 r1c2-t58">Case-insensitive matching.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t58" headers="r1c1-t58"><code dir="ltr">m</code></td>
<td class="cellalignment3617" headers="r4c1-t58 r1c2-t58">Treat the source string as multiple lines. The function interprets <code dir="ltr">^</code> (caret) and <code dir="ltr">$</code> (dollar sign) as the start and end, respectively, of any line anywhere in the source string, rather than only at the start or end of the entire source string. By default, the function treats the source string as a single line.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t58" headers="r1c1-t58"><code dir="ltr">n</code></td>
<td class="cellalignment3617" headers="r5c1-t58 r1c2-t58">A newline character is among the characters matched by a period (the wildcard character). By default, it is not.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t58" headers="r1c1-t58"><code dir="ltr">x</code></td>
<td class="cellalignment3617" headers="r6c1-t58 r1c2-t58">Ignores whitespace characters.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>If you specify multiple contradictory values for this argument, then the function uses the last value. For example, if you specify &#39;ic&#39;, then the function uses case-sensitive matching. If you specify a character other than those shown above, then the function returns an error.</p>
<p>If you omit this optional argument, then the default case sensitivity is determined by the value of the NLS_SORT parameter; a period (.) does not match the newline character; and the source string is treated as a single line.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCGGJA"></a>
<div id="OLADM1851" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">REGEXP_INSTR</h2>
<p>The <a id="sthref2802"></a><a id="sthref2803"></a>REGEXP_INSTR function searches a string for a substring with a specified pattern and returns the position of that substring.</p>
<p>The function evaluates strings using characters as defined by the input character set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCIGIB">REGEXP_COUNT</a>, <a href="#CHDHDHBI">REGEXP_REPLACE</a>, and <a href="#CHDBCDHG">REGEXP_SUBSTR</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2804"></a>Return Value</p>
<p>When the pattern is found a NUMBER; otherwise 0.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2805"></a>Syntax</p>
<p class="synopsis">REGEXP_INSTR (<span class="italic">source_char</span>, <span class="italic">pattern</span>[, <span class="italic">position</span>[, <span class="italic">occurrence</span>[, <span class="italic">return_option</span>[, <span class="italic">match_parameter</span> ]]]])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2806"></a>Parameters</p>
<dl>
<dt><span class="italic">source_char</span></dt>
<dd>
<p>The text expression for which the function searches.</p>
</dd>
<dt><span class="italic">pattern</span></dt>
<dd>
<p>The text expression for which the function searches. It is usually a text literal and can contain up to 512 bytes. The function interprets a period as a wildcard character that matches any character.</p>
</dd>
<dt><span class="italic">position</span></dt>
<dd>
<p>A positive integer that indicates the character of <span class="italic">source_char</span> at which the function begins the search. The default value of <span class="italic">position</span> is <code dir="ltr">1</code>, which means that the function begins searching at the first character of <span class="italic">source_char</span>.</p>
</dd>
<dt><span class="italic">occurrence</span></dt>
<dd>
<p>A positive integer that indicates which occurrence of <span class="italic">pattern</span> the function should search for. The default value of <span class="italic">occurrence</span> is <code dir="ltr">1</code>, meaning that the function searches for the first occurrence of <span class="italic">pattern</span>.</p>
</dd>
<dt><span class="italic">return_option</span></dt>
<dd>
<p>Specify <code dir="ltr">0</code> (zero) when you want the function to return the position of the first matched character (default), or <code dir="ltr">1</code> when you want the function to return the position of the character following the match.</p>
</dd>
<dt><span class="italic">match_parameter</span></dt>
<dd>
<p>A text expression that lets you change the default matching behavior of the function. You can specify one or more of the values shown in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment3615" title="Values for the match parameter" summary="Values for match_parameter of REGEXP_SUBSTR" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t60">Value</th>
<th class="cellalignment3616" id="r1c2-t60">Specifies</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t60" headers="r1c1-t60"><code dir="ltr">c</code></td>
<td class="cellalignment3617" headers="r2c1-t60 r1c2-t60">Case-sensitive matching.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t60" headers="r1c1-t60"><code dir="ltr">i</code></td>
<td class="cellalignment3617" headers="r3c1-t60 r1c2-t60">Case-insensitive matching.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t60" headers="r1c1-t60"><code dir="ltr">m</code></td>
<td class="cellalignment3617" headers="r4c1-t60 r1c2-t60">Treat the source string as multiple lines. The function interprets <code dir="ltr">^</code> (caret) and <code dir="ltr">$</code> (dollar sign) as the start and end, respectively, of any line anywhere in the source string, rather than only at the start or end of the entire source string. By default, the function treats the source string as a single line.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t60" headers="r1c1-t60"><code dir="ltr">n</code></td>
<td class="cellalignment3617" headers="r5c1-t60 r1c2-t60">A newline character is among the characters matched by a period (the wildcard character). By default, it is not.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t60" headers="r1c1-t60"><code dir="ltr">x</code></td>
<td class="cellalignment3617" headers="r6c1-t60 r1c2-t60">Ignores whitespace characters.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2807"></a>Examples</p>
<p>The following statement</p>
<pre dir="ltr">REGEXP_INSTR(&#39;Mississippi&#39;, &#39;i&#39;, 1, 3) 
</pre>
<p>searches the string Mississippi for the third instance of the letter i, beginning the search at the first letter. It returns the value 8.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHDHBI"></a>
<div id="OLADM1852" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">REGEXP_REPLACE</h2>
<p>The <a id="sthref2808"></a><a id="sthref2809"></a>REGEXP_REPLACE function searches a string for a substring with a specified pattern and replaces that substring with another substring.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCIGIB">REGEXP_COUNT</a>, <a href="#CHDCGGJA">REGEXP_INSTR</a>, and <a href="#CHDBCDHG">REGEXP_SUBSTR</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2810"></a>Return Value</p>
<p><code dir="ltr">VARCHAR2</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2811"></a>Syntax</p>
<p class="synopsis">REGEXP_REPLACE(<span class="italic">source_char</span>, <span class="italic">pattern</span>[, <span class="italic">replace_string</span>[, <span class="italic">position</span>[, <span class="italic">occurrence</span>[, <span class="italic">match_parameter</span> ]]]])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2812"></a>Parameters</p>
<dl>
<dt><span class="italic">source_char</span></dt>
<dd>
<p>The text expression for which the function searches.</p>
</dd>
<dt><span class="italic">pattern</span></dt>
<dd>
<p>The text expression for which the function searches. It is usually a text literal and can contain up to 512 bytes. The function interprets a period as a wildcard character that matches any character.</p>
</dd>
<dt><span class="italic">replace_string</span></dt>
<dd>
<p>The text that replaces <span class="italic">pattern</span> in <span class="italic">source_char</span>.</p>
</dd>
<dt><span class="italic">position</span></dt>
<dd>
<p>A positive integer that indicates the character of <span class="italic">source_char</span> at which the function begins the search. The default value of <span class="italic">position</span> is <code dir="ltr">1</code>, which means that the function begins searching at the first character of <span class="italic">source_char</span>.</p>
</dd>
<dt><span class="italic">occurrence</span></dt>
<dd>
<p>A positive integer that indicates which occurrence of <span class="italic">pattern</span> the function should search for. The default values of <span class="italic">occurrence</span> is <code dir="ltr">1</code>, meaning that the function searches for the first occurrence of <span class="italic">pattern</span>.</p>
</dd>
<dt><span class="italic">match_parameter</span></dt>
<dd>
<p>A text expression that lets you change the default matching behavior of the function. You can specify one or more of the values shown in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment3615" title="Values for the match parameter" summary="Values for match_parameter of REGEXP_SUBSTR" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t62">Value</th>
<th class="cellalignment3616" id="r1c2-t62">Specifies</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t62" headers="r1c1-t62"><code dir="ltr">c</code></td>
<td class="cellalignment3617" headers="r2c1-t62 r1c2-t62">Case-sensitive matching.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t62" headers="r1c1-t62"><code dir="ltr">i</code></td>
<td class="cellalignment3617" headers="r3c1-t62 r1c2-t62">Case-insensitive matching.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t62" headers="r1c1-t62"><code dir="ltr">m</code></td>
<td class="cellalignment3617" headers="r4c1-t62 r1c2-t62">Treat the source string as multiple lines. The function interprets <code dir="ltr">^</code> (caret) and <code dir="ltr">$</code> (dollar sign) as the start and end, respectively, of any line anywhere in the source string, rather than only at the start or end of the entire source string. By default, the function treats the source string as a single line.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t62" headers="r1c1-t62"><code dir="ltr">n</code></td>
<td class="cellalignment3617" headers="r5c1-t62 r1c2-t62">A newline character is among the characters matched by a period (the wildcard character). By default, it is not.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t62" headers="r1c1-t62"><code dir="ltr">x</code></td>
<td class="cellalignment3617" headers="r6c1-t62 r1c2-t62">Ignores whitespace characters.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2813"></a>Example</p>
<p>The following statement</p>
<pre dir="ltr">REGEXP_REPLACE(&#39;500   Oracle     Parkway,    Redwood  Shores, CA&#39;, &#39;( ){2,}&#39;, &#39; &#39;)
</pre>
<p>eliminates extra spaces and returns the following string</p>
<pre dir="ltr">500 Oracle Parkway, Redwood Shores, CA
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBCDHG"></a>
<div id="OLADM1853" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">REGEXP_SUBSTR</h2>
<p>The<a id="sthref2814"></a> <a id="sthref2815"></a>REGEXP_SUBSTR function searches a string for a substring of a specified pattern and returns that substring.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCIGIB">REGEXP_COUNT</a>, <a href="#CHDCGGJA">REGEXP_INSTR</a>, and <a href="#CHDHDHBI">REGEXP_REPLACE</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2816"></a>Return Value</p>
<p><code dir="ltr">VARCHAR2</code> | <code dir="ltr">CLOB</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2817"></a>Syntax</p>
<p class="synopsis">REGEXP_SUBSTR(<span class="italic">source_char</span>, <span class="italic">pattern</span>[, <span class="italic">position</span>[, <span class="italic">occurrence</span>[, <span class="italic">match_parameter</span> ]]])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2818"></a>Parameters</p>
<dl>
<dt><span class="italic">source_char</span></dt>
<dd>
<p>The text expression for which the function searches.</p>
</dd>
<dt><span class="italic">pattern</span></dt>
<dd>
<p>The text expression for which the function searches. It is usually a text literal and can contain up to 512 bytes. The function interprets a period as a wildcard character that matches any character</p>
</dd>
<dt><span class="italic">position</span></dt>
<dd>
<p>A positive integer that indicates the character of <span class="italic">source_char</span> at which the function begins the search. The default value of <span class="italic">position</span> is <code dir="ltr">1</code>, which means that the function begins searching at the first character of <span class="italic">source_char</span>.</p>
</dd>
<dt><span class="italic">occurrence</span></dt>
<dd>
<p>A positive integer that indicates which occurrence of pattern the function should search for. The default value of occurrence is <code dir="ltr">1</code>, which means that the function searches for the first occurrence of <span class="italic">pattern</span>.</p>
</dd>
<dt><span class="italic">match_parameter</span></dt>
<dd>
<p>A text expression that lets you change the default matching behavior of the function. You can specify one or more of the values shown in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment3615" title="Values for the match parameter" summary="Values for match_parameter of REGEXP_SUBSTR" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t64">Value</th>
<th class="cellalignment3616" id="r1c2-t64">Specifies</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t64" headers="r1c1-t64"><code dir="ltr">c</code></td>
<td class="cellalignment3617" headers="r2c1-t64 r1c2-t64">Case-sensitive matching.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t64" headers="r1c1-t64"><code dir="ltr">i</code></td>
<td class="cellalignment3617" headers="r3c1-t64 r1c2-t64">Case-insensitive matching.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t64" headers="r1c1-t64"><code dir="ltr">m</code></td>
<td class="cellalignment3617" headers="r4c1-t64 r1c2-t64">Treat the source string as multiple lines. The function interprets <code dir="ltr">^</code> (caret) and <code dir="ltr">$</code> (dollar sign) as the start and end, respectively, of any line anywhere in the source string, rather than only at the start or end of the entire source string. By default, the function treats the source string as a single line.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t64" headers="r1c1-t64"><code dir="ltr">n</code></td>
<td class="cellalignment3617" headers="r5c1-t64 r1c2-t64">A newline character is among the characters matched by a period (the wildcard character). By default, it is not.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t64" headers="r1c1-t64"><code dir="ltr">x</code></td>
<td class="cellalignment3617" headers="r6c1-t64 r1c2-t64">Ignores whitespace characters.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2819"></a>Examples</p>
<div id="OLADM1854" class="example">
<p class="titleinexample"><a id="sthref2820"></a>Example 8-67 Using REGEXP_SUBSTRING to search for a case-insensitive substring</p>
<p>The following statement</p>
<pre dir="ltr">REGEXP_SUBSTR(&#39;7 W 96th St, New York, New York&#39;, &#39;new york&#39;, 10, 2, &#39;i&#39;) 
</pre>
<p>starts searching at the tenth character and matches the second instance of New York in a case-insensitive match.</p>
</div>
<!-- class="example" -->
<div id="OLADM1855" class="example">
<p class="titleinexample"><a id="sthref2821"></a>Example 8-68 Using REGEXP_SUBSTRING to return a substring from a string enclosed in single quotes</p>
<p>The following statement</p>
<pre dir="ltr">REGEXP_SUBSTR(&#39;parsley, sage, rosemary, thyme&#39;, &#39;,[^,]+,&#39;, 1) 
</pre>
<p>matches the first substring enclosed in single quotes (<code dir="ltr">&#39;</code>), and returns the value, sage,.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGHCBA"></a>
<div id="OLADM636" class="refsect1">
<h2 class="refsect1">REM</h2>
<p><a id="sthref2822"></a><a id="sthref2823"></a><a id="sthref2824"></a><a id="sthref2825"></a>The REM function returns the remainder after one numeric expression is divided by another.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2826"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2827"></a>Syntax</p>
<p class="synopsis">REM(<span class="italic">expression1&nbsp;expression2</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2828"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>REM returns the remainder of <span class="italic">expression1</span> divided by <span class="italic">expression2.</span></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2829"></a>Examples</p>
<div id="OLADM1856" class="example">
<p class="titleinexample"><a id="sthref2830"></a>Example 8-69 Calculating a Remainder</p>
<p>This example illustrates the use of REM to find the remainder after <code dir="ltr">14</code> is divided by&nbsp;<code dir="ltr">5</code>. The statement</p>
<pre dir="ltr">SHOW REM(14 5)
</pre>
<p>produces the following result.</p>
<pre dir="ltr">4.00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACCBGGH"></a>
<div id="OLADM637" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">REMAINDER</h2>
<p>The <a id="sthref2831"></a>REMAINDER function returns the remainder when one number is divided by another.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2832"></a>Return Values</p>
<p>Numeric. Oracle OLAP determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2833"></a>Syntax</p>
<p class="synopsis">REMAINDER (<span class="italic">diviidend</span>, <span class="italic">divisor</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2834"></a>Parameters</p>
<dl>
<dt><span class="italic">dividend</span></dt>
<dd>
<p>A numeric expression (or an expression that Oracle OLAP can implicitly convert to a numeric expression) that is the number you want to divide.</p>
</dd>
<dt><span class="italic">divisor</span></dt>
<dd>
<p>A numeric expression (or an expression that Oracle OLAP can implicitly convert to a numeric expression) that is the divisor.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2835"></a>Examples</p>
<div id="OLADM1857" class="example">
<p class="titleinexample"><a id="sthref2836"></a>Example 8-70 Finding the Remainder After Division</p>
<pre dir="ltr">SHOW REMAINDER(18,7)
-3.00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACCBHIJ"></a>
<div id="OLADM638" class="refsect1">
<h2 class="refsect1">REMBYTES</h2>
<p><a id="sthref2837"></a>The REMBYTES function removes one or more bytes from a text expression and returns the value that remains.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2838"></a>Return Value</p>
<p>TEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2839"></a>Syntax</p>
<p class="synopsis">REMBYTES(<span class="italic">text-expression&nbsp;start&nbsp;</span>[<span class="italic">length</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2840"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The <code dir="ltr">TEXT</code> expression from which REMBYTES removes bytes. When the characters to be removed from <span class="italic">text-expression</span> contain embedded line breaks, these breaks are also removed. Other line breaks are preserved. Removed line breaks are not counted toward the total number of characters removed.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you must use this function on NTEXT values, use the CONVERT or TO_CHAR function to convert the NTEXT value to TEXT.</div>
</dd>
<dt><span class="italic">start</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> that represents the character position at which to begin removing characters. The position of the first character in <span class="italic">text-expression</span> is <code dir="ltr">1</code>. When the value of <span class="italic">start</span> is greater than the length of <span class="italic">text-expression</span>, REMBYTES simply returns <span class="italic">text-expression</span>.</p>
</dd>
<dt><span class="italic">length</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> that represents the number of characters to be removed. When <span class="italic">length</span> is not specified, only the character at <span class="italic">start</span> is removed.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2841"></a>Examples</p>
<div id="OLADM1858" class="example">
<p class="titleinexample"><a id="sthref2842"></a>Example 8-71 Using REMBYTES to Remove a Substring</p>
<p>This example shows how to remove the substring <code dir="ltr">there</code> from the text value <code dir="ltr">hellotherejoe</code>.</p>
<p>The statement</p>
<pre dir="ltr">SHOW REMBYTES(&#39;hellotherejoe&#39;, 6, 5)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">hellojoe
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACIECAE"></a>
<div id="OLADM639" class="refsect1">
<h2 class="refsect1">REMCHARS</h2>
<p><a id="sthref2843"></a>The REMCHARS function removes one or more characters from a text expression and returns the value that remains.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you are using a multibyte character set, you can use the REMBYTES function instead of the REMCHARS function.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2844"></a>Return Value</p>
<p>TEXT or NTEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2845"></a>Syntax</p>
<p class="synopsis">REMCHARS(<span class="italic">text-expression&nbsp;start&nbsp;</span>[<span class="italic">length</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2846"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The expression from which REMCHARS removes characters. When the characters to remove from <span class="italic">text-expression</span> contain embedded line breaks, these breaks are also removed. Other line breaks are preserved. Removed line breaks are not counted toward the total number of characters removed.</p>
<p>When you specify a TEXT expression, the return value is TEXT. When you specify an NTEXT expression, the return value is NTEXT.</p>
</dd>
<dt><span class="italic">start</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> that represents the character position at which to begin removing characters. The position of the first character in <span class="italic">text-expression</span> is <code dir="ltr">1</code>. When the value of <span class="italic">start</span> is greater than the length of <span class="italic">text-expression</span>, REMCHARS simply returns <span class="italic">text-expression</span>.</p>
</dd>
<dt><span class="italic">length</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> that represents the number of characters to be removed. When <span class="italic">length</span> is not specified, only the character at <span class="italic">start</span> is removed.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2847"></a>Examples</p>
<div id="OLADM1859" class="example">
<p class="titleinexample"><a id="sthref2848"></a>Example 8-72 Using REMCHARS to Remove a Substring</p>
<p>This example shows how to remove the substring <code dir="ltr">there</code> from the text value <code dir="ltr">hellotherejoe</code>.</p>
<pre dir="ltr">SHOW REMCHARS(&#39;hellotherejoe&#39;, 6, 5)
</pre>
<pre dir="ltr">hellojoe
</pre></div>
<!-- class="example" -->
<div id="OLADM1860" class="example">
<p class="titleinexample"><a id="sthref2849"></a>Example 8-73 Removing a Single Character</p>
<p>This example shows how to remove the character <code dir="ltr">t</code> from the text value <code dir="ltr">hellotherejoe</code>.</p>
<pre dir="ltr">SHOW REMCHARS(&#39;hellotherejoe&#39;, 6)
</pre>
<pre dir="ltr">helloherejoe 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACFEFGG"></a>
<div id="OLADM640" class="refsect1">
<h2 class="refsect1">REMCOLS</h2>
<p><a id="sthref2850"></a>The REMCOLS function removes specified columns from every line of a multiline TEXT value. The function returns a multiline text value that includes only the remaining columns.</p>
<p>Columns refer to the character positions in each line of a multiline TEXT value. The first character in each line is in column one, the second is in column two, and so on.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2851"></a>Return Value</p>
<p>TEXT or NTEXT</p>
<p>REMCOLS always returns a TEXT value that has the same number of lines as <span class="italic">text-expression,</span> though some lines may be empty.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2852"></a>Syntax</p>
<p class="synopsis">REMCOLS(<span class="italic">text-expression&nbsp;start&nbsp;</span>[<span class="italic">length</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2853"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The text expression from which the specified columns should be removed. When <span class="italic">text-expression</span> is a multiline TEXT value, the characters in the specified columns are removed from each one of its lines.</p>
<p>When you specify a TEXT expression, the return value is TEXT. When you specify an NTEXT expression, the return value is NTEXT.</p>
</dd>
<dt><span class="italic">start</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code>, between 1 and 32,767, representing the column position at which to begin removing columns. The column position of the first character in each line of <span class="italic">text-expression</span> is <code dir="ltr">1</code>. When you specify a starting column that is to the right of the last character in a given line in <span class="italic">text expression,</span> the corresponding line in the return value is identical to the given line.</p>
</dd>
<dt><span class="italic">length</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> representing the number of columns to be removed. When you do not specify <span class="italic">length,</span> REMCOLS removes only the starting column. When you specify a length that exceeds the number of characters that follow the starting position in a given line in <span class="italic">text expression,</span> the corresponding line in the return value includes only the characters that precede the starting column.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2854"></a>Examples</p>
<div id="OLADM1861" class="example">
<p class="titleinexample"><a id="sthref2855"></a>Example 8-74 Removing Text Columns</p>
<p>In the following example, four columns are removed from each line of CITYLIST, starting from the second column.</p>
<pre dir="ltr">DEFINE citylist VARIABLE TEXT
CITYLIST = &#39;Boston\nHouston\nChicago\nDenver&#39;
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW citylist
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Boston
Houston
Chicago
Denver
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW REMCOLS(citylist 2 4)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Bn
Hon
Cgo
Dr 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACIHBHC"></a>
<div id="OLADM641" class="refsect1">
<h2 class="refsect1">REMLINES</h2>
<p><a id="sthref2856"></a>The REMLINES function removes one or more lines from a multiline TEXT expression and returns the value that remains.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2857"></a>Return Value</p>
<p>TEXT or NTEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2858"></a>Syntax</p>
<p class="synopsis">REMLINES(<span class="italic">text-expression&nbsp;start&nbsp;</span>[<span class="italic">length</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2859"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>A multiline text expression from whose values REMLINES removes one or more lines. When you specify a TEXT expression, the return value is TEXT. When you specify an NTEXT expression, the return value is NTEXT.</p>
</dd>
<dt><span class="italic">start</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> that represents the line number at which to begin removing lines. The position of the first line in <span class="italic">text-expression</span> is&nbsp;<code dir="ltr">1</code>.</p>
</dd>
<dt><span class="italic">length</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> that represents the number of lines to be extracted. When you do not specify <span class="italic">length,</span> only the line at <span class="italic">start</span> is removed.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2860"></a>Examples</p>
<div id="OLADM1862" class="example">
<p class="titleinexample"><a id="sthref2861"></a>Example 8-75 Removing Text Lines</p>
<p>This example shows how to remove the second line from a multiline text value in a variable called <code dir="ltr">mktglist</code> with the following values.</p>
<pre dir="ltr">Salespeople
Products
Services
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW REMLINES(mktglist, 2)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Salespeople
Services 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDEHDJJ"></a>
<div id="OLADM1863" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">REPLACE</h2>
<p>The <a id="sthref2862"></a><a id="sthref2863"></a><a id="sthref2864"></a>REPLACE function returns a specified character each time a specified string is replaced with another string; or removes all occurrences of a specified string.</p>
<p>REPLACE provides functionality related to that provided by the <a href="#CHDGDHJB">TRANSLATE</a> function. TRANSLATE provides single-character, one-to-one substitution. REPLACE lets you substitute one string for another as well as to remove character strings.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
REPLACE function in <a class="olink SQLRF00697" href="../SQLRF/functions167.htm#SQLRF00697"><span class="italic">Oracle Database SQL Language Reference</span></a> for more details</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2865"></a>Return Value</p>
<p>The same data type as <span class="syntaxinlineitalic">char</span>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2866"></a>Syntax</p>
<p class="synopsis">REPLACE ( <span class="italic">char</span>, s<span class="italic">earch_string</span> [, <span class="italic">replacement_string</span> ])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2867"></a>Parameters</p>
<dl>
<dt><span class="italic">char</span></dt>
<dd>
<p>A text expression that is the character that you want returned when a replacement is made.</p>
</dd>
<dt><span class="italic">search_string</span></dt>
<dd>
<p>A text expression that is the string you want to replace. When you specify NA, then the function returns <span class="italic">char</span>.</p>
</dd>
<dt><span class="italic">replacement_string</span></dt>
<dd>
<p>A text expression that is the string with which you want to replace <span class="italic">search_string</span>. When you do not specify a value for this argument or when you specify the value of <code dir="ltr">NA</code>, all occurrences of <span class="italic">search_string</span> are removed.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGFHJB"></a>
<div id="OLADM642" class="refsect1">
<h2 class="refsect1">REPLBYTES</h2>
<p><a id="sthref2868"></a>The REPLBYTES function replaces one or more bytes in a text expression.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you are using a single-byte character set, you can use the REPLCHARS function instead of the REPLBYTES function. Also, to change one or more occurrences of a specified string in a text value to another string, use the CHANGECHARS function</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2869"></a>Return Value</p>
<p>TEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2870"></a>Syntax</p>
<p class="synopsis">REPLBYTES(<span class="italic">text-expression&nbsp;replacement&nbsp;</span>[<span class="italic">start</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2871"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>A <code dir="ltr">TEXT</code> expression in which REPLBYTES replaces bytes. When the bytes to replace from <span class="italic">text-expression</span> contain embedded line breaks, these breaks are removed. Other line breaks are preserved. Removed line breaks are not counted toward the total number of bytes replaced. Line breaks in the replacement expression are retained in the output of REPLBYTES, but are likewise not counted.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you must use this function on <code dir="ltr">NTEXT</code> values, use the CONVERT or TO_CHAR function to convert the <code dir="ltr">NTEXT</code> value to <code dir="ltr">TEXT</code>.</div>
</dd>
<dt><span class="italic">replacement</span></dt>
<dd>
<p>A text expression that contains one or more bytes that replaces existing bytes in <span class="italic">text-expression.</span></p>
</dd>
<dt><span class="italic">start</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> that represents the byte position at which to begin replacing bytes. The position of the first byte in <span class="italic">text-expression</span> is 1. When you omit this argument, REPLBYTES starts with the first byte. REPLBYTES replaces as many bytes of <span class="italic">text-expression</span> as are required for the bytes specified by <span class="italic">replacement.</span> When the value of <span class="italic">start</span> is greater than the length of <span class="italic">text-expression</span>, REPLBYTES simply returns <span class="italic">text-expression</span>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2872"></a>Examples</p>
<div id="OLADM1864" class="example">
<p class="titleinexample"><a id="sthref2873"></a>Example 8-76 Replacing Text as Bytes</p>
<p>This example shows how to replace a portion of the text value <code dir="ltr">Hello&nbsp;there,&nbsp;Joe</code>.</p>
<p>The statement</p>
<pre dir="ltr">SHOW REPLBYTES(&#39;Hello there, Joe&#39;, &#39;Jane&#39;, 14)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Hello there, Jane
</pre></div>
<!-- class="example" -->
<div id="OLADM1865" class="example">
<p class="titleinexample"><a id="sthref2874"></a>Example 8-77 How REPLBYTES Handles Line Breaks</p>
<p>This example shows how REPLBYTES preserves but ignores line breaks.</p>
<pre dir="ltr">var1 = JOINLINES(&#39;Hello&#39; &#39;there&#39; &#39;Joe&#39;)
var2 = JOINLINES(&#39;Hi&#39; &#39;Jane&#39;)
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW REPLBYTES(var1 var2)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Hi
Janehere
Joe
</pre>
<p>REPLBYTES has replaced the first 6 bytes of <code dir="ltr">var1</code> (<code dir="ltr">Hellot</code> of <code dir="ltr">HellothereJoe</code>) with the 6 bytes of <code dir="ltr">var2</code> (<code dir="ltr">HiJane</code>). It has preserved the line breaks following <code dir="ltr">Hi</code> (from <code dir="ltr">var2</code>) and <code dir="ltr">there</code> (from <code dir="ltr">var1</code>).</p>
<p>To replace all 13 bytes in var1, you must specify 13 replacement bytes; for example, you can add 7 spaces after <code dir="ltr">Jane</code>.</p>
<pre dir="ltr">var2 = JOINLINES(&#39;Hi&#39; &#39;Jane       &#39;)
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW REPLBYTES(var1 var2)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Hi
Jane 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACCAFIH"></a>
<div id="OLADM643" class="refsect1">
<h2 class="refsect1">REPLCHARS</h2>
<p><a id="sthref2875"></a>The REPLCHARS function replaces one or more characters in a text expression.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you are using a multibyte character set, you can use the REPLBYTES function instead of the REPLCHARS function. Also, you can use the CHANGECHARS function to change one or more occurrences of a specified string in a text value to another string.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2876"></a>Return Value</p>
<p>TEXT or NTEXT</p>
<p>This function accepts TEXT values and NTEXT values as arguments. The data type of the return value depends on the data type of the values specified for the arguments:</p>
<ul>
<li>
<p>When all arguments are TEXT values, the return value is TEXT.</p>
</li>
<li>
<p>When all arguments are NTEXT values, the return value is NTEXT.</p>
</li>
<li>
<p>When the arguments include both TEXT and NTEXT values, the function converts all TEXT values to NTEXT before performing the function operation, and the return value is NTEXT.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2877"></a>Syntax</p>
<p class="synopsis">REPLCHARS(<span class="italic">text-expression&nbsp;characters&nbsp;</span>[<span class="italic">start</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2878"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The expression in which characters are to be replaced. When the characters to be replaced from <span class="italic">text-expression</span> contain embedded line breaks, these breaks are removed. Other line breaks are preserved. Removed line breaks are not counted toward the total number of characters replaced. Line breaks in the replacement expression are retained in the output of REPLCHARS, but are likewise not counted.</p>
</dd>
<dt><span class="italic">characters</span></dt>
<dd>
<p>A text expression that contains one or more characters that replaces existing characters in <span class="italic">text-expression.</span></p>
</dd>
<dt><span class="italic">start</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> that represents the character position at which to begin replacing characters. The position of the first character in <span class="italic">text-expression</span> is <code dir="ltr">1</code>. When you omit this argument, REPLCHARS starts with the first character. REPLCHARS replaces as many characters of <span class="italic">text-expression</span> as are required for the specified new <span class="italic">characters.</span> When the value of <span class="italic">start</span> is greater than the length of <span class="italic">text-expression</span>, REPLCHARS simply returns <span class="italic">text-expression</span>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2879"></a>Examples</p>
<div id="OLADM1866" class="example">
<p class="titleinexample"><a id="sthref2880"></a>Example 8-78 Replacing Text Characters</p>
<p>This example shows how to replace a portion of the text value <code dir="ltr">Hello&nbsp;there,&nbsp;Joe</code>.</p>
<p>The statement</p>
<pre dir="ltr">SHOW REPLCHARS(&#39;Hello there, Joe&#39;, &#39;Jane&#39;, 14)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Hello there, Jane
</pre></div>
<!-- class="example" -->
<div id="OLADM1867" class="example">
<p class="titleinexample"><a id="sthref2881"></a>Example 8-79 How REPLCHARS Handles Line Breaks</p>
<p>This example shows how REPLCHARS preserves but ignores line breaks.</p>
<pre dir="ltr">var1 = JOINLINES(&#39;Hello&#39; &#39;there&#39; &#39;Joe&#39;)
var2 = JOINLINES(&#39;Hi&#39; &#39;Jane&#39;)
</pre>
<p>The statement</p>
<pre dir="ltr">show REPLCHARS(var1 var2)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Hi
Janehere
Joe
</pre></div>
<!-- class="example" -->
<p>REPLCHARS has replaced the first 6 characters of <code dir="ltr">var1</code> (<code dir="ltr">Hellot</code> of <code dir="ltr">HellothereJoe</code>) with the 6 characters of <code dir="ltr">var2</code> (<code dir="ltr">HiJane</code>). It has preserved the line breaks following <code dir="ltr">Hi</code> (from <code dir="ltr">var2</code>) and <code dir="ltr">there</code> (from <code dir="ltr">var1</code>).</p>
<p>To replace all 13 characters in <code dir="ltr">var1</code>, you must specify 13 replacement characters; for example, you can add 7 spaces after <code dir="ltr">Jane</code>.</p>
<pre dir="ltr">var2 = JOINLINES(&#39;Hi&#39; &#39;Jane       &#39;)
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW REPLCHARS(var1 var2)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Hi
Jane 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACEJEFA"></a>
<div id="OLADM644" class="refsect1">
<h2 class="refsect1">REPLCOLS</h2>
<p><a id="sthref2882"></a>The REPLCOLS function replaces some or all of the character columns in one multiline TEXT value with the columns of another. The function returns a multiline TEXT value composed of the resulting lines.</p>
<p>Columns refer to the character positions in each line of a multiline TEXT value. The first character in each line is in column one, the second is in column two, and so on.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2883"></a>Return Value</p>
<p>TEXT or NTEXT</p>
<p>This function accepts TEXT values and NTEXT values as arguments. The data type of the return value depends on the data type of the values specified for the arguments:</p>
<ul>
<li>
<p>When all arguments are TEXT values, the return value is TEXT.</p>
</li>
<li>
<p>When all arguments are NTEXT values, the return value is NTEXT.</p>
</li>
<li>
<p>When the arguments include both TEXT and NTEXT values, the function converts all TEXT values to NTEXT before performing the function operation, and the return value is NTEXT.</p>
</li>
</ul>
<p>The number of lines in the return value is always the same as the number of lines in <span class="italic">text-expression.</span> When the <span class="italic">columns</span> text expression has fewer lines, REPLCOLS repeats its last line in each subsequent line of the return value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2884"></a>Syntax</p>
<p class="synopsis">REPLCOLS(<span class="italic">text-expression&nbsp;columns&nbsp;</span>[<span class="italic">start</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2885"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The text expression in which you want to replace one or more columns.</p>
</dd>
<dt><span class="italic">columns</span></dt>
<dd>
<p>A text expression containing one or more lines. This expression provides the columns to replace some or all of the columns in <span class="italic">text-expression.</span></p>
</dd>
<dt><span class="italic">start</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code>, between 1 and 32,767, representing the column position at which to begin replacing. The column position of the first character in each line of <span class="italic">text-expression</span> is&nbsp;1. When you do not specify <span class="italic">start,</span> replacement begins with Column&nbsp;1. When you specify a starting column that is to the right of the last character in a given line in <span class="italic">text-expression,</span> the corresponding line in the return value has spaces filling in the intervening columns. See <a href="#i87287">Example 8-80, &#34;Joining and Aligning Columns&#34;</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2886"></a>Examples</p>
<div id="OLADM1868" class="example">
<p class="titleinexample"><a id="i87287"></a>Example 8-80 Joining and Aligning Columns</p>
<p>In the following example, the <code dir="ltr">citylist</code> and <code dir="ltr">cityreps</code> lines are joined so that the values are aligned, one under the other. The replacement begins at Column&nbsp;11. When JOINCOLS were used instead of REPLCOLS, the <code dir="ltr">cityreps</code> list would be misaligned.</p>
<p>The statement</p>
<pre dir="ltr">SHOW citylist
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Boston
Houston
Chicago
Denver
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW cityreps
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Brady
Lopez
Alfonso
Cody
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW REPLCOLS(citylist cityreps 11)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Boston    Brady
Houston   Lopez
Chicago   Alfonso
Denver    Cody 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79552"></a>
<div id="OLADM645" class="refsect1">
<h2 class="refsect1">REPLLINES</h2>
<p><a id="sthref2887"></a>The REPLLINES function replaces one or more lines in a multiline TEXT expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2888"></a>Return Value</p>
<p>TEXT or NTEXT</p>
<p>This function accepts TEXT values and NTEXT values as arguments. The data type of the return value depends on the data type of the values specified for the arguments. When all arguments are TEXT values, the return value is TEXT. When all arguments are NTEXT values, the return value is NTEXT. When the arguments include both TEXT and NTEXT values, the function converts all TEXT values to NTEXT before performing the function operation, and the return value is NTEXT.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2889"></a>Syntax</p>
<p class="synopsis">REPLLINES(<span class="italic">text-expression&nbsp;lines&nbsp;</span>[<span class="italic">start</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2890"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>A multiline text expression in which you want to replace one or more lines.</p>
</dd>
<dt><span class="italic">lines</span></dt>
<dd>
<p>A text expression that contains one or more lines that replace the existing lines in <span class="italic">text-expression.</span></p>
</dd>
<dt><span class="italic">start</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> that represents the line number at which to begin replacing. The position of the first line in <span class="italic">text-expression</span> is <code dir="ltr">1</code>. When you omit this argument, REPLLINES starts with line <code dir="ltr">1</code>. REPLLINES replaces as many lines of <span class="italic">text-expression</span> as are required for the specified new <span class="italic">lines.</span></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2891"></a>Examples</p>
<div id="OLADM1869" class="example">
<p class="titleinexample"><a id="sthref2892"></a>Example 8-81 Replacing a Text Line</p>
<p>This example shows how to replace the second line in a multiline TEXT value in a variable called <code dir="ltr">mktglist</code>. Assume first that the statement <code dir="ltr">SHOW mktglist</code> produces the following output.</p>
<pre dir="ltr">Salespeople
Products
Services
</pre>
<p>By using REPLLINES, you can display a different value for &#34;Products&#34;.</p>
<pre dir="ltr">SHOW REPLLINES(mktglist, &#39;advertising&#39;, 2)
</pre>
<pre dir="ltr">Salespeople
Advertising
Services 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1034721"></a>
<div id="OLADM646" class="refsect1">
<h2 class="refsect1">RESERVED</h2>
<p><a id="sthref2893"></a><a id="sthref2894"></a>The RESERVED function can <a id="sthref2895"></a>provide a list of all the words that are reserved because they are known to the OLAP DML parser, or it can indicate if a word that you specify is known to the OLAP DML parser. Some other words are also reserved as discussed in <a href="#CIHJEIBE">&#34;Other Reserved Words&#34;</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2896"></a>Return Value</p>
<p>Either a multiline text expression or BOOLEAN, depending on whether or not you specify an argument to the function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2897"></a>Syntax</p>
<p class="synopsis">RESERVED&nbsp;[(<span class="italic">word-expression</span>)]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2898"></a>Parameters</p>
<dl>
<dt><span class="italic">word-expression</span></dt>
<dd>
<p>A text expression that represents a word that may or may not be reserved in the OLAP DML. When you specify <span class="italic">word-expression,</span> the RESERVED function returns a BOOLEAN value indicating if the word is reserved in OLAP DML. When you do not specify an argument, RESERVED returns a TEXT value consisting of all the reserved words in OLAP DML, with each word on a separate line.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2899"></a>Usage Notes</p>
<p class="subhead2"><a id="CIHJEIBE"></a><a id="OLADM1870"></a>Other Reserved Words</p>
<p>The RESERVED function only recognizes words known to the OLAP DML parser. The RESERVED function des not recognize the names of option objects and some other objects in the <code dir="ltr">EXPRESS</code> analytic workspace. The names of these objects are reserved in Oracle OLAP, but are ignored by the RESERVED function. To identify the names of these objects, issue the following statements.</p>
<pre dir="ltr">AW ATTACH EXPRESS
LISTNAMES 
</pre>
<p class="subhead2"><a id="OLADM1871"></a>NA is Reserved</p>
<p>When you specify <code dir="ltr">NA</code> for the argument, the RESERVED function returns <code dir="ltr">NO</code>. When you specify <code dir="ltr">NA</code>, the RESERVED function returns <code dir="ltr">YES</code>.</p>
<p class="subhead2"><a id="OLADM1872"></a>Case-Sensitivity</p>
<p>The list of reserved words returned by the RESERVED function contains some words in all uppercase and some in mixed case. Words all in uppercase are reserved in their entirety. Words in mixed case can be abbreviated to the uppercase portion. For such words, any subset of the word containing the uppercase portion is reserved. For example, one word in the list returned by RESERVED is <code dir="ltr">CODEVERsion</code>. The following are all reserved: <code dir="ltr">codever</code>, <code dir="ltr">codeversi</code>, <code dir="ltr">codeversio</code>, and <code dir="ltr">codeversion</code>. However, <code dir="ltr">codeve</code> is not reserved.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2900"></a>Examples</p>
<div id="OLADM1873" class="example">
<p class="titleinexample"><a id="sthref2901"></a>Example 8-82 Determining If a Word Is Reserved</p>
<p>The following example shows how you can use the RESERVED function to determine if a word is reserved in OLAP DML.</p>
<p>The function call</p>
<pre dir="ltr">SHOW RESERVED(&#39;update&#39;)
</pre>
<p>returns the following value</p>
<pre dir="ltr">YES
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79211"></a>
<div id="OLADM647" class="refsect1">
<h2 class="refsect1">ROUND</h2>
<p><a id="sthref2902"></a><a id="sthref2903"></a><a id="sthref2904"></a>Depending on the syntax you specify, the ROUND function performs a numeric operation or a date and time operation. Because the syntax for the ROUND function differs for each type of operation, there are two topics for the ROUND function:</p>
<ul>
<li>
<p><a href="#i80730">ROUND (datetime)</a></p>
</li>
<li>
<p><a href="#i81446">ROUND (number)</a></p>
</li>
</ul>
<div id="OLADM648" class="refsect2"><a id="i80730"></a>
<h3 class="refsect2">ROUND (datetime)</h3>
<p><a id="sthref2905"></a>The ROUND (datetime) function returns date rounded to the unit specified by the format model <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>. The value returned is always of data type <code dir="ltr">DATETIME</code>, even if you specify a different datetime data type for date.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2906"></a>Return Value</p>
<p>DATETIME</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2907"></a>Syntax</p>
<p class="synopsis">ROUND(<span class="italic">datetime_exp</span>, [<span class="italic">format</span> ])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2908"></a>Parameters</p>
<dl>
<dt><span class="italic">datetime-exp</span></dt>
<dd>
<p>A datetime expression that identifies a date and time number.</p>
</dd>
<dt><span class="italic">format</span></dt>
<dd>
<p>A text expression that specifies a format model shown in the following table. A format model indicates how the date and time number should be rounded.</p>
<p>If you omit this argument, then <code dir="ltr"><span class="codeinlineitalic">datetime-exp</span></code> is rounded to the nearest day.</p>
<p><a href="#CJAEFAIA">Table 8-13</a> lists the format models you can use with the <code dir="ltr">ROUND</code> and <code dir="ltr">TRUNC</code> date functions and the units to which they round and truncate dates. The default model, &#39;DD&#39;, returns the date rounded or truncated to the day with a time of midnight.</p>
<div id="OLADM1874" class="tblhruleformal">
<p class="titleintable"><a id="sthref2909"></a><a id="CJAEFAIA"></a>Table 8-13 Datetime Format Templates for the ROUND and TRUNC Date Functions</p>
<table class="cellalignment3615" title="Datetime Format Templates for the ROUND and TRUNC Date Functions " summary="This table is described in the preceding text." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t71">Format Model</th>
<th class="cellalignment3616" id="r1c2-t71">Rounding or Truncating Unit</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t71" headers="r1c1-t71">
<pre dir="ltr">CC
SCC
</pre></td>
<td class="cellalignment3617" headers="r2c1-t71 r1c2-t71">
<p>One greater than the first two digits of a four-digit year</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t71" headers="r1c1-t71">
<pre dir="ltr">SYYYY
YYYY
YEAR
SYEAR
YYY
YY
Y
</pre></td>
<td class="cellalignment3617" headers="r3c1-t71 r1c2-t71">
<p>Year (rounds up on July 1)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t71" headers="r1c1-t71">
<pre dir="ltr">IYYY
IY
IY
I
</pre></td>
<td class="cellalignment3617" headers="r4c1-t71 r1c2-t71">
<p>ISO Year</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t71" headers="r1c1-t71">
<pre dir="ltr">Q
</pre></td>
<td class="cellalignment3617" headers="r5c1-t71 r1c2-t71">
<p>Quarter (rounds up on the sixteenth day of the second month of the quarter)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t71" headers="r1c1-t71">
<pre dir="ltr">MONTH
MON
MM
RM
</pre></td>
<td class="cellalignment3617" headers="r6c1-t71 r1c2-t71">
<p>Month (rounds up on the sixteenth day)</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t71" headers="r1c1-t71">
<pre dir="ltr">WW
</pre></td>
<td class="cellalignment3617" headers="r7c1-t71 r1c2-t71">
<p>Same day of the week as the first day of the year</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t71" headers="r1c1-t71">
<pre dir="ltr">IW
</pre></td>
<td class="cellalignment3617" headers="r8c1-t71 r1c2-t71">
<p>Same day of the week as the first day of the ISO year</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t71" headers="r1c1-t71">
<pre dir="ltr">W
</pre></td>
<td class="cellalignment3617" headers="r9c1-t71 r1c2-t71">
<p>Same day of the week as the first day of the month</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r10c1-t71" headers="r1c1-t71">
<pre dir="ltr">DDD
DD
J
</pre></td>
<td class="cellalignment3617" headers="r10c1-t71 r1c2-t71">
<p>Day</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r11c1-t71" headers="r1c1-t71">
<pre dir="ltr">DAY
DY
D
</pre></td>
<td class="cellalignment3617" headers="r11c1-t71 r1c2-t71">
<p>Starting day of the week</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r12c1-t71" headers="r1c1-t71">
<pre dir="ltr">HH
HH12
HH24
</pre></td>
<td class="cellalignment3617" headers="r12c1-t71 r1c2-t71">
<p>Hour</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r13c1-t71" headers="r1c1-t71">
<pre dir="ltr">MI
</pre></td>
<td class="cellalignment3617" headers="r13c1-t71 r1c2-t71">
<p>Minute</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></dd>
</dl>
<p>The starting day of the week used by the format models DAY, DY, and D is specified implicitly by the initialization parameter <code dir="ltr">NLS_TERRITORY</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2910"></a>Examples</p>
<div id="OLADM1875" class="example">
<p class="titleinexample"><a id="sthref2911"></a>Example 8-83 Rounding to the Nearest Year</p>
<p>When the value of the NLS_DATE_FORMAT option is <code dir="ltr">DD-MON-YY</code>, then this statement:</p>
<pre dir="ltr">SHOW ROUND (TO_DATE(&#39;27-OCT-92&#39;),&#39;year&#39;)
</pre>
<p>returns this value:</p>
<pre dir="ltr">01-JAN-93
</pre></div>
<!-- class="example" -->
<div id="OLADM1876" class="example">
<p class="titleinexample"><a id="sthref2912"></a>Example 8-84 Rounding to Different Formats</p>
<p>Assume that you have a variable named <code dir="ltr">mydatetime</code> with the following definition and value defined in your analytic workspace.</p>
<pre dir="ltr">DEFINE MYDATETIME VARIABLE DATETIME
DATE_FORMAT = &#39;MON-RRRR-DD-HH24&#39;
mydatetime = CURRENT_TIMESTAMP
SHOW mydatetime
= &#39;AUG-2006-07-13&#39;
</pre>
<p>As the following SHOW statements illustrate, depending on what date format value you specify, the ROUND function returns different values for the <code dir="ltr">mydatetime</code> variable.</p>
<pre dir="ltr">SHOW ROUND(mydatetime, &#39;RRRR&#39;)
01-JAN-07
 
SHOW ROUND(mydatetime, &#39;MON&#39;)
01-AUG-06
 
SHOW ROUND(mydatetime, &#39;DD&#39;)
08-AUG-06
 
SHOW ROUND(mydatetime)
= &#39;AUG-2006-08-00&#39;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM649" class="refsect2"><a id="i81446"></a>
<h3 class="refsect2">ROUND (number)</h3>
<p><a id="sthref2913"></a>When a number is specified as an argument, the ROUND function returns the number rounded to the nearest multiple of a second number you specify or to the number of decimal places indicated by the second number.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2914"></a>Return Value</p>
<p>DECIMAL (when the round type is MULTIPLE)</p>
<p>NUMBER (when the round type is DECIMAL)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2915"></a>Syntax</p>
<p class="synopsis">ROUND(<span class="italic">number_exp&nbsp;roundvalue</span>)&nbsp;[<span class="underline">MULTIPLE</span>|DECIMAL]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2916"></a>Parameters</p>
<dl>
<dt><span class="italic">number_exp</span></dt>
<dd>
<p>An expression that identifies the number to round.</p>
</dd>
<dt><span class="italic">roundvalue</span></dt>
<dd>
<p>A value that specifies the basis for rounding.</p>
<p>When the round type is MULTIPLE:</p>
<ul>
<li>
<p><span class="italic">number_exp</span> is rounded to the nearest multiple of <span class="italic">roundvalue</span>.</p>
</li>
<li>
<p><span class="italic">roundvalue</span> can be an <code dir="ltr">INTEGER</code> or decimal number.</p>
</li>
</ul>
<p>&nbsp;</p>
<p>When the round type is DECIMAL:</p>
<ul>
<li>
<p><span class="italic">roundvalue</span> specifies the number of places to the right or left of the decimal point to which <span class="italic">number_exp</span> should be rounded. When <span class="italic">roundvalue</span> is positive, digits to the right of the decimal point are rounded. When it is negative, digits to the left of the decimal point are rounded.</p>
</li>
<li>
<p>When <span class="italic">roundvalue</span> is omitted, <span class="italic">number_exp</span> is rounded to <code dir="ltr">0</code> decimal places.</p>
</li>
<li>
<p><span class="italic">roundvalue</span> must be an <code dir="ltr">INTEGER</code>.</p>
</li>
</ul>
</dd>
<dt>MULTIPLE</dt>
<dd>
<p>(Default) Specifies that rounding is performed by rounding to the nearest multiple of <span class="italic">roundvalue</span>.</p>
</dd>
<dt>DECIMAL</dt>
<dd>
<p>Specifies that rounding is performed by rounding to the number of decimal places indicated by <span class="italic">roundvalue</span>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2917"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1877"></a>Using ROUND to Compare Expressions</p>
<p>A DECIMAL value might be stored in a slightly different form than shows up at the level of significant digits you are using. This small difference can cause unexpected results when you are comparing two expressions. The problem can occur even when you are comparing INTEGER expressions that involve calculations because many calculations are done only after converting INTEGER values to DECIMAL values. You do not generally see the difference in reports because reports usually show only two or three decimal places.</p>
<p>For example, when you compare two numbers with the EQ or NE operators, you probably want to ignore any difference caused by the least significant digits. When <code dir="ltr">expense</code> was stored as <code dir="ltr">100.00000001</code>, the least significant digit would not be ignored by the simple form of the comparison.</p>
<p>The statement</p>
<pre dir="ltr">SHOW expense EQ 100.00
</pre>
<p>produces the following result.</p>
<pre dir="ltr">NO
</pre>
<p>However, you can use ROUND to force EQ or NE to ignore the least significant digits.</p>
<pre dir="ltr">SHOW ROUND(expense, .01) EQ 100.00
</pre>
<p>This statement produces the following result.</p>
<pre dir="ltr">YES
</pre>
<p class="subhead2"><a id="OLADM1878"></a>Using ABS to Compare Expressions</p>
<p>When speed of calculation is important in your application, you may want to use the ABS function with LT to compare numbers, instead of using ROUND with EQ or NE.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2918"></a>Examples</p>
<div id="OLADM1879" class="example">
<p class="titleinexample"><a id="sthref2919"></a>Example 8-85 Rounding to Different Multiples</p>
<p>The following statements show the results of rounding the expression <code dir="ltr">2/3</code> to different multiples. The value of the DECIMALS setting is <code dir="ltr">2</code>.</p>
<p>The statement</p>
<pre dir="ltr">SHOW ROUND(2/3, .01)
</pre>
<p>produces the following result.</p>
<pre dir="ltr">0.67
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW ROUND(2/3, .1)
</pre>
<p>produces the following result.</p>
<pre dir="ltr">0.70
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW ROUND(2/3, .5)
</pre>
<p>produces the following result.</p>
<pre dir="ltr">0.50
</pre></div>
<!-- class="example" -->
<div id="OLADM1880" class="example">
<p class="titleinexample"><a id="sthref2920"></a>Example 8-86 Rounding to the Nearest Thousand</p>
<p>The following example shows <code dir="ltr">sales</code> rounded to the nearest thousand.</p>
<pre dir="ltr">LIMIT month TO FIRST 4
LIMIT district TO FIRST 1
REPORT ROUND(sales 1000)
</pre>
<p>These statements produce the following output.</p>
<pre dir="ltr">DISTRICT: BOSTON
               -------------ROUND(SALES 1000)-------------
               -------------------MONTH-------------------
PRODUCT          Jan95      Feb95      Mar95      Apr95
-------------- ---------- ---------- ---------- ----------
Tents           32,000.00  33,000.00  43,000.00  58,000.00
Canoes          66,000.00  76,000.00  92,000.00 126,000.00
Racquets        52,000.00  57,000.00  59,000.00  69,000.00
Sportswear      53,000.00  59,000.00  63,000.00  68,000.00
Footwear        91,000.00  87,000.00 100,000.00 108,000.00
</pre></div>
<!-- class="example" -->
<div id="OLADM1881" class="example">
<p class="titleinexample"><a id="sthref2921"></a>Example 8-87 Rounding to the Nearest Multiple of 12</p>
<p>To show <code dir="ltr">units</code> rounded to the nearest multiple of 12, use the following statements.</p>
<pre dir="ltr">LIMIT month TO FIRST 4
LIMIT district TO FIRST 1
REPORT DECIMAL 0 ROUND(units 12)
</pre>
<p>These statements produce the following output.</p>
<pre dir="ltr">DISTRICT: BOSTON
               --------------ROUND(UNITS 12)--------------
               -------------------MONTH-------------------
PRODUCT          Jan95      Feb95      Mar95      Apr95
-------------- ---------- ---------- ---------- ----------
Tents                 204        204        264        360
Canoes                348        396        480        660
Racquets              996      1,080      1,116      1,308
Sportswear          1,092      1,212      1,296      1,404
Footwear            2,532      2,400      2,772      2,976
</pre></div>
<!-- class="example" -->
<div id="OLADM1882" class="example">
<p class="titleinexample"><a id="sthref2922"></a>Example 8-88 Rounding to Decimal Places</p>
<p>The following statements show the results of rounding <code dir="ltr">15.193</code> to various decimal places.</p>
<p>The statement</p>
<pre dir="ltr">ROUND(15.193, 1)
</pre>
<p>produces the following result</p>
<pre dir="ltr">15.2
</pre>
<p>The statement</p>
<pre dir="ltr">ROUND(15.193, -1)
</pre>
<p>produces the following result</p>
<pre dir="ltr">20
 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i79221"></a>
<div id="OLADM650" class="refsect1">
<h2 class="refsect1">ROW function</h2>
<p><a id="sthref2923"></a><a id="sthref2924"></a><a id="sthref2925"></a><a id="sthref2926"></a>The ROW function returns a line of data in cells, one after another in a single row. It is identical to the ROW command, except that it returns a text value, instead of sending the text to the current outfile.</p>
<p>The ROW function, just like the ROW command, consists of a series of column descriptions that specify the data to be returned and, optionally, the way in which it is to be formatted. The ROW function lets you assign the returned value to a text variable, send it to your current outfile with the SHOW or REPORT command, or process it further as an argument to a character manipulation function.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_commands_2.htm#i79216">ROW command</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2927"></a>Return Value</p>
<p>TEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2928"></a>Syntax</p>
<p class="synopsis">ROW([<span class="italic">attribs</span>]&nbsp;[ACROSS&nbsp;<span class="italic">dimension&nbsp;</span>[<span class="italic">limit-clause</span>]:]&nbsp;{<span class="italic">exp1</span>|SKIP}&nbsp;-</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[[<span class="italic">attribs</span>]&nbsp;[ACROSS&nbsp;<span class="italic">dimension&nbsp;</span>[<span class="italic">limit-clause</span>]:]&nbsp;{<span class="italic">expn</span>|SKIP}])</p>
<p>See the <a href="dml_commands_2.htm#i79216">ROW command</a> for a complete description of the arguments.</p>
<p>The ROW function without any arguments returns a blank line.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2929"></a>Usage Notes</p>
<p>The notes for the ROW command also apply to the ROW function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2930"></a>Examples</p>
<div id="OLADM1883" class="example">
<p class="titleinexample"><a id="sthref2931"></a>Example 8-89 Assigning Output to a Text Variable</p>
<p>The following assignment statement assigns three lines of output to the text variable <code dir="ltr">textvar</code>.</p>
<pre dir="ltr">textvar = ROW(OVER &#39;-&#39; UNDER &#39;=&#39; &#39;This is a Row.&#39;)
SHOW textvar
</pre>
<p>These statements produce the following output.</p>
<pre dir="ltr">--------------
This is a Row.
==============
</pre></div>
<!-- class="example" -->
<div id="OLADM1884" class="example">
<p class="titleinexample"><a id="sthref2932"></a>Example 8-90 Producing Multiple Rows of Output</p>
<p>You can use the ROW function with JOINLINES in a program to loop over a group of dimension values and assign several rows of data to a text variable. Instead of using the SHOW command in the following program excerpt, you could use the contents of <code dir="ltr">textvar</code> for some other purpose.</p>
<pre dir="ltr">LIMIT month TO &#39;Jan95&#39; &#39;Feb95&#39;
LIMIT district TO &#39;Boston&#39; &#39;Atlanta&#39; &#39;Chicago&#39;
textvar = NA
textvar = ROW(W 8 SKIP ACROSS month: &lt;month SKIP&gt;)
textvar = JOINLINES(textvar ROW(W 8 SKIP ACROSS month: -
   CENTER &lt;&#39;Sales&#39; &#39;Plan&#39;&gt;))
FOR district
textvar = JOINLINES(textvar ROW(W 8  district ACROSS month: -
   &lt;sales sales.plan&gt;))
SHOW textvar
</pre>
<p>These statements produce the following output.</p>
<pre dir="ltr">OUTPUT:
         Jan95                 Feb95
          Sales       Plan      Sales       Plan
Boston   32,153.52  42,346.89  32,536.30  43,265.50
Atlanta  40,674.20  54,583.41  44,236.55  57,559.87
Chicago  29,098.94  36,834.37  29,010.20  37,667.66
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDEJCID"></a>
<div id="OLADM651" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">ROWIDTOCHAR</h2>
<p><a id="sthref2933"></a><a id="sthref2934"></a><a id="sthref2935"></a>The ROWIDTOCHAR function converts a value of the <code dir="ltr">ROWID</code> data type to a value of the TEXT data type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2936"></a>Return Value</p>
<p><code dir="ltr">TEXT</code></p>
<p>The result of this conversion is always in the national character set and is 18 characters long.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2937"></a>Syntax</p>
<p class="synopsis">ROWIDTOCHAR (<span class="italic">rowid</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2938"></a>Parameters</p>
<dl>
<dt><span class="italic">rowid</span></dt>
<dd>
<p>The value of type <code dir="ltr">ROWID</code> to convert.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2939"></a>Examples</p>
<div id="OLADM1885" class="example">
<p class="titleinexample"><a id="CHDHFHAJ"></a>Example 8-91 Converting ROWID Data to TEXT or NTEXT Data</p>
<p>Assume the following your analytic workspace has the following object definitions.</p>
<pre dir="ltr">DEFINE myrowid DIMENSION ROWID
DEFINE mytext VARIABLE TEXT
DEFINE myntext VARIABLE NTEXT
</pre>
<p>Now you populate <code dir="ltr">myrowid</code> which has a data type of ROWID using a MAINTAIN statement. Then you use the ROWIDTOCHAR function to populate <code dir="ltr">mytext</code> which has a data type of TEXT and ROWIDTONCHAR function to populate <code dir="ltr">myntext</code> which has a data type of NTEXT. Reports show that all of the variables are populated.</p>
<pre dir="ltr">MAINTAIN myrowid ADD CHARTOROWID(&#39;AAAFd1AAFAAAABSAA/&#39;)
mytext = ROWIDTOCHAR (myrowid)
myntext = ROWIDTONCHAR (myrowid)
 
MYROWID
------------------------------
AAAFd1AAFAAAABSAA/

MYTEXT
------------------------------
AAAFd1AAFAAAABSAA/
 
MYNTEXT
------------------------------
AAAFd1AAFAAAABSAA/
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHGJCJ"></a>
<div id="OLADM652" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">ROWIDTONCHAR</h2>
<p><a id="sthref2940"></a><a id="sthref2941"></a><a id="sthref2942"></a>The ROWIDTONCHAR function converts a value of the <code dir="ltr">ROWID</code> data type to a value of the <code dir="ltr">NCHAR</code> data type. The result of this conversion is always in the national character set and is 18 characters long.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2943"></a>Return Value</p>
<p><code dir="ltr">NCHAR</code></p>
<p>The result of this conversion is always in the national character set and is 18 characters long.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2944"></a>Syntax</p>
<p class="synopsis">ROWIDTONCHAR (<span class="italic">rowid</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2945"></a>Parameters</p>
<dl>
<dt><span class="italic">rowid</span></dt>
<dd>
<p>The value of type <code dir="ltr">ROWID</code> to convert.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2946"></a>Examples</p>
<p>See <a href="#CHDHFHAJ">Example 8-91, &#34;Converting ROWID Data to TEXT or NTEXT Data&#34;</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1004882"></a>
<div id="OLADM653" class="refsect1">
<h2 class="refsect1">RPAD</h2>
<p><a id="sthref2947"></a><a id="sthref2948"></a><a id="sthref2949"></a>The RPAD function returns an expression, right-padded to a specified length with the specified characters; or, when the expression to be padded is longer than the length specified after padding, only that portion of the expression that fits into the specified length.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2950"></a>Return Value</p>
<p>TEXT or NTEXT based on the data type of the expression you want to pad (<span class="italic">text-exp</span>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2951"></a>Syntax</p>
<p class="synopsis">RPAD (<span class="italic">text-exp</span> , <span class="italic">length</span> [, <span class="italic">pad-exp</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2952"></a>Parameters</p>
<dl>
<dt><span class="italic">text-exp</span></dt>
<dd>
<p>A text expression to pad.</p>
</dd>
<dt><span class="italic">length</span></dt>
<dd>
<p>The total length of the return value as it is displayed on your terminal screen. In most character sets, this is also the number of characters in the return value. However, in some multibyte character sets, the display length of a character string can differ from the number of characters in the string.</p>
<p>When you specify a value for <span class="italic">length</span> that is shorter than the length of <span class="italic">text-exp</span>, then this function truncates the expression to the specified length.</p>
</dd>
<dt><span class="italic">pad-exp</span></dt>
<dd>
<p>A text expression that specifies the padding characters. The default value of <span class="italic">pad-exp</span> is a single blank.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2953"></a>Examples</p>
<div id="OLADM1886" class="example">
<p class="titleinexample"><a id="sthref2954"></a>Example 8-92 Right-Padding a String</p>
<p>The following example right-pads a name with the letters &#34;ab&#34; until it is 12 characters long.</p>
<pre dir="ltr">SHOW RPAD(&#39;Morrison&#39;,12,&#39;ab&#39;)
Morrisonabab
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1004883"></a>
<div id="OLADM654" class="refsect1">
<h2 class="refsect1">RTRIM</h2>
<p><a id="sthref2955"></a><a id="sthref2956"></a><a id="sthref2957"></a>The RTRIM function removes characters from the right of a text expression, with all the rightmost characters that appear in another text expression removed. The function begins scanning the base text expression from its last character and removes all characters that appear in the trim expression until reaching a character that is not in the trim expression and then returns the result.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2958"></a>Return Value</p>
<p>TEXT or NTEXT based on the data type of the first argument.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2959"></a>Syntax</p>
<p class="synopsis">RTRIM (<span class="italic">text-exp</span> [, <span class="italic">trim-exp</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2960"></a>Parameters</p>
<dl>
<dt><span class="italic">text-exp</span></dt>
<dd>
<p>A text expression that you want trimmed.</p>
</dd>
<dt><span class="italic">trim-exp</span></dt>
<dd>
<p>A text expression that is the characters to trim. The default value of <span class="italic">trim-exp</span> is a single blank.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2961"></a>Examples</p>
<div id="OLADM1887" class="example">
<p class="titleinexample"><a id="sthref2962"></a>Example 8-93 Trimming Right-Most Characters</p>
<p>The following example trims all of the right-most x&#39;s and y&#39;s from a string.</p>
<pre dir="ltr">SHOW RTRIM(&#39;Last Wordxxyxy&#39;,&#39;xy&#39;) 
Last Word
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79226"></a>
<div id="OLADM655" class="refsect1">
<h2 class="refsect1">RUNTOTAL</h2>
<p><a id="sthref2963"></a><a id="sthref2964"></a><a id="sthref2965"></a><a id="sthref2966"></a><a id="sthref2967"></a>The RUNTOTAL function returns the running total of an expression. You can use the RUNTOTAL function in a ROW command, ROW function, or REPORT command to generate a running total of the value of an expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2968"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2969"></a>Syntax</p>
<p class="synopsis">RUNTOTAL(<span class="italic">n</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2970"></a>Parameters</p>
<dl>
<dt><span class="italic">n</span></dt>
<dd>
<p>One of the 32 subtotals (1 to 32) that Oracle OLAP accumulates for the current column of a report. RUNTOTAL returns the value of this subtotal for the specified column, but does not reset the value of the subtotal to zero.</p>
<p>The numbers by which the 32 subtotals are referenced (1 to 32) have no intrinsic significance; all the subtotals are the same until you reference them.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2971"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1888"></a>How RUNTOTAL Works</p>
<p>Unlike the SUBSTR function, RUNTOTAL does not reset the indicated subtotal to zero, nor does it add the value returned by RUNTOTAL to the indicated subtotal. However, the value returned by RUNTOTAL <span class="italic">is</span> added to the other 31 accumulating totals for the current column.</p>
<p class="subhead2"><a id="OLADM1889"></a>Accessing Data from Another Column</p>
<p>You can obtain a running total of an expression shown in another column of a report by adding that expression to RUNTOTAL. You can use the COALESCE function to refer to the values in the other column. For example, to show the sales for each month in the first data column of a row, and a cumulative total of sales in the second data column, you could use this statement.</p>
<pre dir="ltr">ROW month sales COLVAL(-1) + RUNTOTAL(1)
</pre>
<p class="subhead2"><a id="OLADM1890"></a>Resetting Subtotals</p>
<p>When you use a ROW statement to produce a report, you can use a ZEROTOTAL statement to reset any subtotal of any column to zero. Typically, use ZEROTOTAL at the beginning of a report program to make sure all totals begin at zero. A REPORT statement automatically resets all subtotals to zero before producing output.</p>
<p class="subhead2"><a id="OLADM1891"></a>NA Values and RUNTOTAL</p>
<p>RUNTOTAL ignores <code dir="ltr">NA</code> values unless all values are <code dir="ltr">NA</code>. When all values are <code dir="ltr">NA</code>, the total is <code dir="ltr">NA</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2972"></a>Examples</p>
<div id="OLADM1892" class="example">
<p class="titleinexample"><a id="sthref2973"></a>Example 8-94 Calculating a Running Total in a Report</p>
<p>In a report, suppose you want column 2 to contain a running total of the values in column 1.</p>
<p>Assume that you issue the following OLAP DML statements</p>
<pre dir="ltr">ZEROTOTAL ALL
ROW W 4 R 2 RUNTOTAL(1) + COLVAL(1)
ROW W 4 R 5 RUNTOTAL(1) + COLVAL(1)
ROW W 4 R 3 RUNTOTAL(1) + COLVAL(1)
</pre>
<p>These statements produce the following output.</p>
<pre dir="ltr">2     2.00
5     7.00
3    10.00
</pre></div>
<!-- class="example" -->
<div id="OLADM1893" class="example">
<p class="titleinexample"><a id="sthref2974"></a>Example 8-95 Calculating a Running Total over Two Districts</p>
<p>In this example, you want your report to contain the unit sales of tents for two districts for the first six months of 1996. Along with the monthly sales figures, you want to see a running total of tent sales for these two districts for the year to date. To produce this cumulative total, use the RUNTOTAL function.</p>
<pre dir="ltr">LIMIT product TO &#39;Tents&#39;
LIMIT month TO &#39;Jan96&#39; TO &#39;Jun96&#39;
LIMIT district TO &#39;Boston&#39; &#39;Chicago&#39;
REPORT ACROSS district: units -
   DECIMAL 0 TOTAL(units, month)+RUNTOTAL(1)
</pre>
<p>These statements produce the following output.</p>
<pre dir="ltr">PRODUCT: TENTS
               --------UNITS--------
               ------DISTRICT-------
                                     TOTAL(UNIT
                                         S,
                                     MONTH)+RUN
MONTH            Boston    Chicago    TOTAL(1)
-------------- ---------- ---------- ----------
Jan96                 307        189        496
Feb96                 209        190        895
Mar96                 277        257      1,429
Apr96                 372        318      2,119
May96                 525        433      3,077
Jun96                 576        466      4,119
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CDFFEBCJ"></a>
<div id="OLADM656" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SESSIONTIMEZONE</h2>
<p>The <a id="sthref2975"></a>SESSIONTIMEZONE function returns the time zone of the current session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2976"></a>Return Values</p>
<p>A time zone offset (a character type in the format <code dir="ltr">&#39;[+|]TZH:TZM&#39;</code>) or a time zone region name, depending on how the user specified the session time zone value in the most recent ALTER SESSION statement</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2977"></a>Syntax</p>
<p>SESSIONTIMEZONE</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2978"></a>Examples</p>
<div id="OLADM1894" class="example">
<p class="titleinexample"><a id="sthref2979"></a>Example 8-96 Retrieving the Session Time Zone</p>
<pre dir="ltr">SHOW SESSIONTIMEZONE
-05:00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CDFIHACD"></a>
<div id="OLADM657" class="refsect1">
<h2 class="refsect1">SIGN</h2>
<p><a id="i1010322"></a><a id="sthref2980"></a><a id="sthref2981"></a>The SIGN function returns a value that indicates when a specified number is less than, equal to, or greater than <code dir="ltr">0</code> (zero).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2982"></a>Return Value</p>
<p>INTEGER. SIGN returns <code dir="ltr">-1</code> when <code dir="ltr">n&lt;0</code>, <code dir="ltr">0</code> (zero) when <code dir="ltr">n=0</code>, or <code dir="ltr">1</code> when <code dir="ltr">n&gt;0</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2983"></a>Syntax</p>
<p class="synopsis">SIGN (<span class="italic">n</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2984"></a>Parameters</p>
<dl>
<dt><span class="italic">n</span></dt>
<dd>
<p>A numeric expression.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2985"></a>Examples</p>
<div id="OLADM1895" class="example">
<p class="titleinexample"><a id="sthref2986"></a>Example 8-97 Determining if the Result of a Numeric Expression is Greater or Less Than Zero</p>
<p>The following example indicates that the function&#39;s argument (<code dir="ltr">-15</code>) is less than&nbsp;<code dir="ltr">0</code>&nbsp;(zero).</p>
<pre dir="ltr">SHOW SIGN(-15) 
 -1
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79256"></a>
<div id="OLADM658" class="refsect1">
<h2 class="refsect1">SIN</h2>
<p><a id="sthref2987"></a><a id="sthref2988"></a>The SIN function calculates the sine of an angle expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2989"></a>Return Value</p>
<p>NUMBER</p>
<p>The result returned by SIN is a value with the same dimensions as the specified expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2990"></a>Syntax</p>
<p class="synopsis">SIN(<span class="italic">angle-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2991"></a>Parameters</p>
<dl>
<dt><span class="italic">angle-expression</span></dt>
<dd>
<p>A numeric expression that contains an angle value, which is specified in radians.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2992"></a>Examples</p>
<div id="OLADM1896" class="example">
<p class="titleinexample"><a id="sthref2993"></a>Example 8-98 Calculating the Sine of an Angle in Radians</p>
<p>This example calculates the sine of an angle of 1 radian. The statements</p>
<pre dir="ltr">DECIMALS = 5
SHOW SIN(1)
</pre>
<p>produce the following result.</p>
<pre dir="ltr">0.84147
</pre></div>
<!-- class="example" -->
<div id="OLADM1897" class="example">
<p class="titleinexample"><a id="sthref2994"></a>Example 8-99 Calculating the Sine of an Angle in Degrees</p>
<p>This example calculates the sine of an angle of 30 degrees. Because <code dir="ltr">1</code>&nbsp;degree&nbsp;=&nbsp;<code dir="ltr">2*(pi)/360</code> radians, <code dir="ltr">30</code> degrees is about <code dir="ltr">30*2*3.14159/360</code> radians. The OLAP DML statement</p>
<pre dir="ltr">SHOW SIN(30 * 2 * 3.14159 / 360)
</pre>
<p>produces the following result.</p>
<pre dir="ltr">0.50000
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79261"></a>
<div id="OLADM659" class="refsect1">
<h2 class="refsect1">SINH</h2>
<p><a id="sthref2995"></a><a id="sthref2996"></a><a id="sthref2997"></a>The SINH function calculates the hyperbolic sine of a number.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2998"></a>Return Value</p>
<p>NUMBER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2999"></a>Syntax</p>
<p class="synopsis">SINH(<span class="italic">expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3000"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>A numeric expression that contains an angle value, which is specified in radians.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3001"></a>Examples</p>
<div id="OLADM1898" class="example">
<p class="titleinexample"><a id="sthref3002"></a>Example 8-100 Calculating the Hyperbolic Sine of an Angle</p>
<p>This example calculates the hyperbolic sine of an angle of 1 radian. The statements</p>
<pre dir="ltr">DECIMALS = 5
SHOW SINH(1)
</pre>
<p>produce the following result.</p>
<pre dir="ltr">1.17520
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79271"></a>
<div id="OLADM660" class="refsect1">
<h2 class="refsect1">SMALLEST</h2>
<p><a id="sthref3003"></a><a id="sthref3004"></a>The SMALLEST function returns the smallest value of an expression. You can use this function to compare numeric values or date values.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3005"></a>Return Value</p>
<p>The data type of the expression. It can be INTEGER, LONGINT, DECIMAL, or DATE.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3006"></a>Syntax</p>
<p class="synopsis">SMALLEST(<span class="italic">expression&nbsp;</span>[CACHE] [<span class="italic">dimension</span>...])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3007"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The expression whose smallest value is to be returned.</p>
</dd>
<dt>CACHE</dt>
<dd>
<p>Specifies slightly different internal behavior. Specify this keyword only when the original performance is extremely slow.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The name of a dimension of the result; or, the name of a relation between one dimension of <span class="italic">expression</span> and another dimension that you want as a dimension of the result.</p>
<p>By default, SMALLEST returns a single value. When you indicate one or more dimensions for the result, SMALLEST tests for values along the dimensions that are specified and returns an array of values. Each dimension must be either a dimension of <span class="italic">expression</span> or related to one of its dimensions.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you specify a dimension that is not an actual dimension of expression, but, instead, is dimension that is related to a dimension of expression and when there are multiple relations between the two dimensions, Oracle OLAP uses the default relation between the dimensions to perform the calculation. (See the <a href="dml_commands_2.htm#CACBJGDI">RELATION command</a> for more information on default relations.) When you do not want Oracle OLAP to use this default relation, specify the related dimension by specifying the name of a specify relation.</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3008"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1899"></a>NA Values and SMALLEST</p>
<p>SMALLEST is affected by the NASKIP option in the same manner as other aggregate functions. When NASKIP is set to <code dir="ltr">YES</code> (the default), SMALLEST ignores <code dir="ltr">NA</code> values and returns the smallest value or values that are not <code dir="ltr">NA</code>. When NASKIP is set to <code dir="ltr">NO</code>, SMALLEST returns <code dir="ltr">NA</code> when any value of the expression is <code dir="ltr">NA</code>. When all the values of the expression are <code dir="ltr">NA</code>, SMALLEST returns <code dir="ltr">NA</code> for either setting of NASKIP.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3009"></a>Examples</p>
<div id="OLADM1900" class="example">
<p class="titleinexample"><a id="sthref3010"></a>Example 8-101 Finding the Month with the Least Amount of Sportswear Sales</p>
<p>This example uses the SMALLEST function to find the smallest monthly sportswear sales for three districts during the first half of 1996. To see the smallest sales figure for each district, specify <code dir="ltr">district</code> as the dimension of the results.</p>
<pre dir="ltr">LIMIT product TO &#39;Sportswear&#39;
LIMIT district TO FIRST 3
LIMIT month TO &#39;Jan96&#39; TO &#39;Jun96&#39;
REPORT HEADING &#39;Smallest Sales&#39; SMALLEST(sales district)
</pre>
<p>The preceding statements produce the following output.</p>
<pre dir="ltr">                Smallest
DISTRICT         Sales
-------------- ----------
Boston          57,079.10
Atlanta        129,616.08
Chicago         77,489.51
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79276"></a>
<div id="OLADM661" class="refsect1">
<h2 class="refsect1">SMOOTH</h2>
<p><a id="sthref3011"></a>The SMOOTH function computes a single or a double exponential smoothing of a numeric expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3012"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3013"></a>Syntax</p>
<p class="synopsis">SMOOTH(<span class="italic">expression&nbsp;</span>{SINGLE&nbsp;<span class="italic">alpha</span>|DOUBLE&nbsp;<span class="italic">alpha&nbsp;beta&nbsp;m</span>}&nbsp;[BASEDON&nbsp;<span class="italic">dimension-list</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3014"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The numeric expression whose values are to be smoothed.</p>
</dd>
<dt>SINGLE</dt>
<dt>DOUBLE</dt>
<dd>
<p>The method to use in the exponential smoothing of the values in <span class="italic">expression</span>. The SINGLE method specifies single exponential smoothing and requires an <span class="italic">alpha</span> argument. The DOUBLE method specifies double exponential smoothing (also known as Holt&#39;s linear exponential smoothing) and requires an <span class="italic">alpha</span> argument, a <span class="italic">beta</span> argument, and an <span class="italic">m</span> argument.</p>
</dd>
<dt><span class="italic">alpha</span></dt>
<dd>
<p>A number in the range from 0 to 1 that smooths the difference between the observed data forecast and the last forecast. The higher the value, the more weight the most recent forecast has, so smoothing decreases as the smoothing factor increases. A smoothing factor of 0 completely smooths the forecasts and always returns the first forecast, which is the first data observation. A smoothing factor of 1 produces no smoothing at all and returns the previous data observation. (See <a href="#i81658">&#34;Results of <span class="italic">alpha</span> Values&#34;</a>.)</p>
</dd>
<dt><span class="italic">beta</span></dt>
<dd>
<p>A number in the range from 0 to 1 that smooths the difference between the previous forecast and the current forecast. As with the <span class="italic">alpha</span> argument, smoothing decreases as the smoothing factor increases.</p>
</dd>
<dt><span class="italic">m</span></dt>
<dd>
<p>A positive <code dir="ltr">INTEGER</code> between 1 and the total number of periods of data in the data series. The <span class="italic">m</span> argument specifies the number of periods on which to base the forecasts.</p>
</dd>
<dt>BASEDON <span class="italic">dimension-list</span></dt>
<dd>
<p>An optional list of one or more of the dimensions of <span class="italic">expression</span> to include in the exponential smoothing. When you do not specify the dimensions, then SMOOTH bases the smoothing on all of the dimensions of <span class="italic">expression</span>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3015"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1901"></a>The Effect of NASKIP on SMOOTH</p>
<p>SMOOTH is affected by the NASKIP option. When NASKIP is set to <code dir="ltr">YES</code> (the default), then SMOOTH ignores <code dir="ltr">NA</code> values. When NASKIP is set to <code dir="ltr">NO</code>, then SMOOTH returns <code dir="ltr">NA</code> for every forecast after the <code dir="ltr">NA</code> value.</p>
<p class="subhead2"><a id="i81658"></a><a id="OLADM1902"></a>Results of <span class="italic">alpha</span> Values</p>
<p>This note illustrates the results of using different <span class="italic">alpha</span> values for single exponential smoothing. The results are based on the <code dir="ltr">sales</code> variable with the dimensions limited by the following statements.</p>
<pre dir="ltr">LIMIT month TO &#39;Jan96&#39; TO &#39;Dec96&#39;
LIMIT product TO &#39;Tents&#39;
LIMIT district TO &#39;Boston&#39;
REPORT DOWN month SMOOTH(sales, SINGLE, ALPHA, BASEDON month)
</pre>
<p>The following table shows the data values of the <code dir="ltr">sales</code> variable and also shows the results of the SMOOTH function in the preceding statement when the <span class="italic">alpha</span> argument variable has the different values shown in the table.</p>
<div class="inftblruleinformal">
<table class="cellalignment3615" title="Example of smoothing the sales variable with different values for alpha" summary="This table shows the data values of the sales variable and the results of the SMOOTH function when the alpha argument has different values." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t74">MONTH</th>
<th class="cellalignment3616" id="r1c2-t74">Sales of tents in Boston</th>
<th class="cellalignment3616" id="r1c3-t74">alpha = 0</th>
<th class="cellalignment3616" id="r1c4-t74">alpha = .1</th>
<th class="cellalignment3616" id="r1c5-t74">alpha = .5</th>
<th class="cellalignment3616" id="r1c6-t74">alpha = .9</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t74" headers="r1c1-t74">Jan96</td>
<td class="cellalignment3617" headers="r2c1-t74 r1c2-t74">50,808.96</td>
<td class="cellalignment3617" headers="r2c1-t74 r1c3-t74">NA</td>
<td class="cellalignment3617" headers="r2c1-t74 r1c4-t74">NA</td>
<td class="cellalignment3617" headers="r2c1-t74 r1c5-t74">NA</td>
<td class="cellalignment3617" headers="r2c1-t74 r1c6-t74">NA</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t74" headers="r1c1-t74">Feb96</td>
<td class="cellalignment3617" headers="r3c1-t74 r1c2-t74">34,641.59</td>
<td class="cellalignment3617" headers="r3c1-t74 r1c3-t74">50,808.96</td>
<td class="cellalignment3617" headers="r3c1-t74 r1c4-t74">50,808.96</td>
<td class="cellalignment3617" headers="r3c1-t74 r1c5-t74">50,808.96</td>
<td class="cellalignment3617" headers="r3c1-t74 r1c6-t74">50,808.96</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t74" headers="r1c1-t74">Mar96</td>
<td class="cellalignment3617" headers="r4c1-t74 r1c2-t74">45,742.21</td>
<td class="cellalignment3617" headers="r4c1-t74 r1c3-t74">50,808.96</td>
<td class="cellalignment3617" headers="r4c1-t74 r1c4-t74">49,192.22</td>
<td class="cellalignment3617" headers="r4c1-t74 r1c5-t74">42,725.28</td>
<td class="cellalignment3617" headers="r4c1-t74 r1c6-t74">36,258.33</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t74" headers="r1c1-t74">Apr96</td>
<td class="cellalignment3617" headers="r5c1-t74 r1c2-t74">61,436.19</td>
<td class="cellalignment3617" headers="r5c1-t74 r1c3-t74">50,808.96</td>
<td class="cellalignment3617" headers="r5c1-t74 r1c4-t74">48,847.22</td>
<td class="cellalignment3617" headers="r5c1-t74 r1c5-t74">44,233.74</td>
<td class="cellalignment3617" headers="r5c1-t74 r1c6-t74">44,793.82</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t74" headers="r1c1-t74">May96</td>
<td class="cellalignment3617" headers="r6c1-t74 r1c2-t74">86,699.67</td>
<td class="cellalignment3617" headers="r6c1-t74 r1c3-t74">50,808.96</td>
<td class="cellalignment3617" headers="r6c1-t74 r1c4-t74">50,106.12</td>
<td class="cellalignment3617" headers="r6c1-t74 r1c5-t74">52,834.97</td>
<td class="cellalignment3617" headers="r6c1-t74 r1c6-t74">59,771.95</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t74" headers="r1c1-t74">Jun96</td>
<td class="cellalignment3617" headers="r7c1-t74 r1c2-t74">95,120.83</td>
<td class="cellalignment3617" headers="r7c1-t74 r1c3-t74">50,808.96</td>
<td class="cellalignment3617" headers="r7c1-t74 r1c4-t74">53,765.47</td>
<td class="cellalignment3617" headers="r7c1-t74 r1c5-t74">69,767.32</td>
<td class="cellalignment3617" headers="r7c1-t74 r1c6-t74">84,006.90</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r8c1-t74" headers="r1c1-t74">Jul96</td>
<td class="cellalignment3617" headers="r8c1-t74 r1c2-t74">93,972.49</td>
<td class="cellalignment3617" headers="r8c1-t74 r1c3-t74">50,808.96</td>
<td class="cellalignment3617" headers="r8c1-t74 r1c4-t74">57,901.01</td>
<td class="cellalignment3617" headers="r8c1-t74 r1c5-t74">82,444.07</td>
<td class="cellalignment3617" headers="r8c1-t74 r1c6-t74">94,009.44</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r9c1-t74" headers="r1c1-t74">Aug96</td>
<td class="cellalignment3617" headers="r9c1-t74 r1c2-t74">94,738.05</td>
<td class="cellalignment3617" headers="r9c1-t74 r1c3-t74">50,808.96</td>
<td class="cellalignment3617" headers="r9c1-t74 r1c4-t74">61,508.16</td>
<td class="cellalignment3617" headers="r9c1-t74 r1c5-t74">88,208.28</td>
<td class="cellalignment3617" headers="r9c1-t74 r1c6-t74">93,976.18</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r10c1-t74" headers="r1c1-t74">Sep96</td>
<td class="cellalignment3617" headers="r10c1-t74 r1c2-t74">75,407.66</td>
<td class="cellalignment3617" headers="r10c1-t74 r1c3-t74">50,808.96</td>
<td class="cellalignment3617" headers="r10c1-t74 r1c4-t74">64,831.15</td>
<td class="cellalignment3617" headers="r10c1-t74 r1c5-t74">91,473.17</td>
<td class="cellalignment3617" headers="r10c1-t74 r1c6-t74">94,661.86</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r11c1-t74" headers="r1c1-t74">Oct96</td>
<td class="cellalignment3617" headers="r11c1-t74 r1c2-t74">70,622.91</td>
<td class="cellalignment3617" headers="r11c1-t74 r1c3-t74">50,808.96</td>
<td class="cellalignment3617" headers="r11c1-t74 r1c4-t74">65,888.80</td>
<td class="cellalignment3617" headers="r11c1-t74 r1c5-t74">83,440.41</td>
<td class="cellalignment3617" headers="r11c1-t74 r1c6-t74">77,333.08</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r12c1-t74" headers="r1c1-t74">Nov96</td>
<td class="cellalignment3617" headers="r12c1-t74 r1c2-t74">46,124.99</td>
<td class="cellalignment3617" headers="r12c1-t74 r1c3-t74">50,808.96</td>
<td class="cellalignment3617" headers="r12c1-t74 r1c4-t74">66,362.21</td>
<td class="cellalignment3617" headers="r12c1-t74 r1c5-t74">77,031.66</td>
<td class="cellalignment3617" headers="r12c1-t74 r1c6-t74">71,293.93</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r13c1-t74" headers="r1c1-t74">Dec96</td>
<td class="cellalignment3617" headers="r13c1-t74 r1c2-t74">36,938.27</td>
<td class="cellalignment3617" headers="r13c1-t74 r1c3-t74">50,808.96</td>
<td class="cellalignment3617" headers="r13c1-t74 r1c4-t74">64,338.49</td>
<td class="cellalignment3617" headers="r13c1-t74 r1c5-t74">61,578.33</td>
<td class="cellalignment3617" headers="r13c1-t74 r1c6-t74">48,641.88</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3016"></a>Examples</p>
<div id="OLADM1903" class="example">
<p class="titleinexample"><a id="sthref3017"></a>Example 8-102 Smoothing Values</p>
<p>These statements limit the dimensions of the <code dir="ltr">sales</code> variable, set the data column width for reports, and report the data values for <code dir="ltr">sales</code>.</p>
<pre dir="ltr">LIMIT month TO &#39;Jan96&#39; TO &#39;Dec96&#39;
LIMIT product TO &#39;Tents&#39;
LIMIT district TO &#39;Boston&#39;
COLWIDTH = 14

REPORT W 6 DOWN month sales
</pre>
<p>The preceding statements produce the following output.</p>
<pre dir="ltr">DISTRICT: Boston
       ----SALES-----
       ---PRODUCT----
MONTH      Tents
------ --------------
Jan96       50,808.96
Feb96       34,641.59
Mar96       45,742.21
Apr96       61,436.19
...
Nov96       46,124.99
Dec96       36,938.27
</pre>
<p>This statement reports the results of using the SMOOTH function on the <code dir="ltr">sales</code> variable with the SINGLE method, a data smoothing factor of <code dir="ltr">.5</code>, and based on the <code dir="ltr">month</code> dimension.</p>
<pre dir="ltr">REPORT W 6 DOWN month SMOOTH(sales, SINGLE, .5, BASEDON month)
</pre>
<p>The preceding statement produces the following output.</p>
<pre dir="ltr">DISTRICT: Boston
       SMOOTH(SALES,-
       -SINGLE, .5,--
       BASEDON MONTH)
       ---PRODUCT----
MONTH      Tents
------ --------------
Jan96              NA
Feb96       50,808.96
Mar96       42,725.28
Apr96       44,233.74
...
Nov96       77,031.66
Dec96       61,578.33
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CDFJDJEI"></a>
<div id="OLADM662" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SORT function</h2>
<p><a id="sthref3018"></a><a id="sthref3019"></a><a id="sthref3020"></a><a id="sthref3021"></a><a id="sthref3022"></a><a id="sthref3023"></a>The SORT function returns the dimension or dimension surrogate values that result from a specified SORT command.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_commands_2.htm#i79281">SORT command</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3024"></a>Return value</p>
<p>The return value varies depending on the use of the function:</p>
<ul>
<li>
<p>When the SORT function is an argument to an OLAP DML statement (including a user-defined command or function) that expects a valueset, it returns a valueset. When the SORT function returns an empty valueset, it returns it as a valueset with null status.</p>
</li>
<li>
<p>When you include the INTEGER keyword, the SORT function returns the position numbers of the values as INTEGERS.</p>
</li>
<li>
<p>In all other cases, the SORT function returns either a TEXT value. When it returns a TEXT value that represents empty status, it returns the value as <code dir="ltr">NA</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3025"></a>Syntax</p>
<p class="synopsis">SORT([INTEGER]<span class="italic">dimension&nbsp;</span>[<span class="italic">byhierarchy</span>] [<span class="italic">bycriterion</span>...])</p>
<p>where:</p>
<ul>
<li>
<p><span class="syntaxinlineitalic">byhierarchy</span> is an optional phrase that uses a parent relation to arrange the order of values in the current status list of a hierarchical dimension or its dimension surrogate, or to assign values to a valueset, based on family relationships within the hierarchy. You can include only one <span class="syntaxinlineitalic">byhierarchy</span> phrase in a SORT statement. It must be the first phrase in a SORT statement.</p>
<p><span class="syntaxinline">HIERARCHY</span> <span class="syntaxinlineitalic">parent-relation</span> <span class="syntaxinline">[INVERT] [DEPTH</span> <span class="syntaxinlineitalic">n</span><span class="syntaxinline">] [SORTORPHANS]</span></p>
</li>
<li>
<p><span class="syntaxinlineitalic">bycriterion</span> uses an explicit criterion to arrange the order of values in the current status list of a dimension or its dimension surrogate, or to assign values to a valueset. You can include as many <span class="syntaxinlineitalic">bycriterion</span> phrases as you want in a SORT statement.</p>
<p><span class="syntaxinline">{A|D} [NAFIRST]&nbsp;</span><span class="syntaxinlineitalic">criterion</span></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3026"></a>Parameters</p>
<p>See the <a href="dml_commands_2.htm#i79281">SORT command</a> for a complete description of all arguments except INTEGER.</p>
<dl>
<dt>INTEGER</dt>
<dd>
<p>When you use the INTEGER keyword, the function returns the position numbers of the values in the default dimension status rather than the names. When you use INTEGER with a valueset, the function returns the position numbers of the values in the default dimension status, not in the valueset.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79291"></a>
<div id="OLADM663" class="refsect1">
<h2 class="refsect1">SORTLINES</h2>
<p><a id="sthref3027"></a>The SORTLINES function sorts the lines in a multiline TEXT value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3028"></a>Return Value</p>
<p>TEXT or NTEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3029"></a>Syntax</p>
<p class="synopsis">SORTLINES(<span class="italic">text-expression&nbsp;</span>[<span class="underline">A</span>|D])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3030"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>A multiline text expression whose lines SORTLINES sorts. When you specify a TEXT expression, the return value is TEXT. When you specify an NTEXT expression, the return value is NTEXT.</p>
</dd>
<dt>A</dt>
<dt>D</dt>
<dd>
<p>Specifies whether the sorting order should be <span class="italic">ascending</span>, or alphabetical (<span class="bold">A</span>), or <span class="italic">descending</span>, or reverse alphabetical (<span class="bold">D</span>). The default is <span class="bold">A</span> (ascending). The sort order is controlled by the NLS_SORT option.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3031"></a>Examples</p>
<div id="OLADM1904" class="example">
<p class="titleinexample"><a id="sthref3032"></a>Example 8-103 Sorting Text Lines</p>
<p>This example shows how to sort the lines in a multiline text value in a variable called MKTREGIONS.</p>
<p>The statement</p>
<pre dir="ltr">SHOW mktregions
</pre>
<p>produces the following output.</p>
<pre dir="ltr">New York
Boston
Atlanta
San Francisco
</pre>
<p>The statement</p>
<pre dir="ltr">SHOW SORTLINES(mktregions)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Atlanta
Boston
New York
San Francisco 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBCBAD"></a>
<div id="OLADM1905" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SOUNDEX</h2>
<p>The SOUNDEX <a id="sthref3033"></a><a id="sthref3034"></a><a id="sthref3035"></a>function returns a character string containing the phonetic representation of a text expression. This function lets you compare words that are spelled differently, but sound alike in English.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The SOUNDEX function in <a class="olink SQLRF06109" href="../SQLRF/functions181.htm#SQLRF06109"><span class="italic">Oracle Database SQL Language Reference</span></a> for a discussion of how the phonetic representation is constructed</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3036"></a>Return Value</p>
<p>The same data type as <span class="italic">text_exp</span>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3037"></a>Syntax</p>
<p class="synopsis">SOUNDEX(<span class="italic">text_exp</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3038"></a>Parameters</p>
<dl>
<dt><span class="italic">text_exp</span></dt>
<dd>
<p>The expression for which you want a phonetic representation. It can be any of the text data types.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEBBEJG"></a>
<div id="OLADM664" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SQLFETCH</h2>
<p><a id="sthref3039"></a>The SQLFETCH function retrieves one or more rows of a column in a relational text.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3040"></a>Return value</p>
<p><code dir="ltr">TEXT</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3041"></a>Syntax</p>
<p class="synopsis">SQLFETCH (<span class="italic">cursorname</span> [COLUMN <span class="italic">column-number</span>} {STOPAFTER <span class="italic">number-of-rows</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3042"></a>Parameters</p>
<dl>
<dt><span class="italic">cursorname</span></dt>
<dd>
<p>A <code dir="ltr">TEXT</code> expression that is the name of the SQL cursor. The cursor must be opened and closed by the caller.</p>
</dd>
<dt><span class="italic">column-number</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> value that is the number of the column. (Default is 1.)</p>
</dd>
<dt><span class="italic">number-of-rows</span></dt>
<dd>
<p>The number of rows to read. (Default is all remaining rows).</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78619"></a>
<div id="OLADM665" class="refsect1">
<h2 class="refsect1">SQRT</h2>
<p><a id="sthref3043"></a><a id="sthref3044"></a><a id="sthref3045"></a>The SQRT function computes the square root of an expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3046"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3047"></a>Syntax</p>
<p class="synopsis">SQRT(<span class="italic">expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3048"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The numeric expression whose square root is to be computed.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3049"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1906"></a>Negative Expressions</p>
<p>When <span class="italic">expression</span> is negative and ROOTOFNEGATIVE is set to <code dir="ltr">NO</code>, an error occurs. When <span class="italic">expression</span> is negative and ROOTOFNEGATIVE is set to <code dir="ltr">YES</code>, SQRT returns the value <code dir="ltr">NA</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3050"></a>Examples</p>
<div id="OLADM1907" class="example">
<p class="titleinexample"><a id="sthref3051"></a>Example 8-104 Calculating a Square Root</p>
<p>This example calculates the square root of <code dir="ltr">144</code>. The statement</p>
<pre dir="ltr">SHOW SQRT(144)
</pre>
<p>produces the following result.</p>
<pre dir="ltr">12.00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78624"></a>
<div id="OLADM666" class="refsect1">
<h2 class="refsect1">STARTOF</h2>
<p><a id="sthref3052"></a>The STARTOF function returns the starting date of a time period in a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
You can only use this function with dimensions of type DAY, WEEK, MONTH, QUARTER, or YEAR.You can<span class="italic">not</span> use this function for time dimensions that are implemented as hierarchical dimensions of type TEXT.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3053"></a>Return Value</p>
<p>DATE or text</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3054"></a>Syntax</p>
<p class="synopsis">STARTOF(<span class="italic">dwmqy-dimension</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3055"></a>Parameters</p>
<dl>
<dt><span class="italic">dwmqy-dimension</span></dt>
<dd>
<p>A dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR. When you have explicitly defined your own relation between dimensions of this type, you can use the name of this time relation here.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3056"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1908"></a>How STARTOF Works</p>
<p>STARTOF returns the first date of the time period that is first in the current status list of the dimension.</p>
<p class="subhead2"><a id="OLADM1909"></a>Phased or Multiple Periods</p>
<p>STARTOF is particularly useful when the dimension has a phase that differs from the default or when the time periods are formed from multiple weeks or years. For example, when the dimension has four-week time periods, the STARTOF function identifies the starting date of a particular four-week period.</p>
<p class="subhead2"><a id="OLADM1910"></a>Format of the Result Returned by STARTOF</p>
<p>When you display the result returned by STARTOF, the date is formatted according to the date template in the DATEFORMAT option. When the day of the week or the name of the month is used in the date template, the day names specified in the DAYNAMES option and the month names specified in the MONTHNAMES option are used. You can use the result returned by STARTOF anywhere that a DATE value is expected.</p>
<p class="subhead2"><a id="OLADM1911"></a>Retrieving the Last Valid Date of a Time Period</p>
<p>The ENDOF function, which returns the last date of a time period.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3057"></a>Examples</p>
<div id="OLADM1912" class="example">
<p class="titleinexample"><a id="sthref3058"></a>Example 8-105 Finding the Fiscal Year Starting Date</p>
<p>The following statements define a year dimension (called FYEAR, for a fiscal year that ends in June), specify how the year is formatted, add dimension values for fiscal years 1996 through 1998, and produce a report of the starting date of each fiscal year.</p>
<pre dir="ltr">DEFINE fyear DIMENSION YEAR ENDING June
VNF &#39;FY&lt;ff&gt;&#39;
MAINTAIN fyear ADD &#39;30JUN96&#39; &#39;30JUN98&#39;
REPORT W 14 STARTOF(fyear)
</pre>
<p>These statements produce the following output.</p>
<pre dir="ltr">FYEAR          STARTOF(FYEAR)
---------      --------------
FY96           01JUL95
FY97           01JUL96
FY98           01JUL97
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78629"></a>
<div id="OLADM667" class="refsect1">
<h2 class="refsect1">STATALL</h2>
<p><a id="sthref3059"></a> <a id="sthref3060"></a><a id="sthref3061"></a><a id="sthref3062"></a><a id="sthref3063"></a><a id="sthref3064"></a>The STATALL function indicates whether default status is currently in effect for a given dimension. That is, STATALL returns <code dir="ltr">YES</code> when STATLIST would return ALL. Otherwise, STATALL returns <code dir="ltr">NO</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3065"></a>Return Value</p>
<p>BOOLEAN</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3066"></a>Syntax</p>
<p class="synopsis">STATALL(<span class="italic">dimension</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3067"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>A text expression whose value is the name of a dimension or dimension surrogate.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3068"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1913"></a>STATALL Compared to STATLIST</p>
<p>STATALL provides an alternative to running the STATLIST program to determine if the status of a specified dimension is ALL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3069"></a>Examples</p>
<div id="OLADM1914" class="example">
<p class="titleinexample"><a id="sthref3070"></a>Example 8-106 Using STATALL</p>
<p>With the following statement, you can see whether the status of the MONTH dimension is ALL.</p>
<pre dir="ltr">SHOW STATALL(month)
</pre>
<p>The return value is either <code dir="ltr">YES</code> or <code dir="ltr">NO</code>.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDIAEDI"></a>
<div id="OLADM1915" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">STATCURR</h2>
<p>The STATCURR <a id="sthref3071"></a><a id="sthref3072"></a><a id="sthref3073"></a>function returns the values of a specified status list for a dimension</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3074"></a>Return Value</p>
<p>The data type of the returned value varies depending on the data type of the dimension.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3075"></a>Syntax</p>
<p class="synopsis">STATCURR (<span class="italic">dimension</span>, <span class="italic">integer</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3076"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The name of the dimension for which the function searches for status lists.</p>
</dd>
<dt><span class="italic">integer</span></dt>
<dd>
<p>Specifies the position in the status list stack of the status list the function returns.</p>
<div class="inftblinformal">
<table class="cellalignment3615" title="Values for the integer parameter of STATCURR" summary="Valid values for the integer parameter of STATCURR" dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t78">Value</th>
<th class="cellalignment3616" id="r1c2-t78">Specifies</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t78" headers="r1c1-t78"><code dir="ltr">0</code></td>
<td class="cellalignment3617" headers="r2c1-t78 r1c2-t78">The current value of the dimension.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t78" headers="r1c1-t78"><code dir="ltr">-1</code></td>
<td class="cellalignment3617" headers="r3c1-t78 r1c2-t78">Returns the current value of status for the previous status list in the status list stack for the dimension.</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t78" headers="r1c1-t78"><code dir="ltr">1</code></td>
<td class="cellalignment3617" headers="r4c1-t78 r1c2-t78">Returns the current value of the status list on the bottom of the status list stack for the dimension.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJECDIIC"></a>
<div id="OLADM668" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">STATDEPTH</h2>
<p>The STATDEPTH <a id="sthref3077"></a><a id="sthref3078"></a><a id="sthref3079"></a>function returns the number of status lists that Oracle OLAP has saved for a specified dimension. The current status list of a dimension is at the top of the stack which means that it has a depth of <code dir="ltr">1</code> (one.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3080"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3081"></a>Syntax</p>
<p class="synopsis">STATDEPTH (<span class="italic">dimension</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3082"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The name of the dimension for which you want to retrieve information.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3083"></a>Usage Notes</p>
<p class="subhead2"><a id="BJEDADGF"></a><a id="OLADM1916"></a>What is a Status List Stack?</p>
<p>A status list stack for a dimension is a stack of the dimension statuses that Oracle OLAP uses to manage status when executing PUSH and POP statements. The depth of the list varies depending on what Oracle OLAP statements have executed:</p>
<ul>
<li>
<p>When you first attach an analytic workspace, the current status of each dimension is ALL and the status list stack for each dimension has a depth of one (that is, there is only one status list in the stack).</p>
</li>
<li>
<p>The depth of the status list stack for a dimension stays at one (for the current status list) no matter how often current status changes (that is, no matter how many LIMIT commands execute against it), except in the following situations:</p>
<ul>
<li>
<p>Oracle OLAP executes a PUSH statement for the dimension. After a PUSH statement executes, each time a LIMIT command executes for a pushed dimension, Oracle OLAP adds status list to the status list stack for that dimension. A POP statement for the dimension originally pushed, clears the status list stack for the dimension. The status list stack for the dimension, once again becomes one.</p>
</li>
<li>
<p>Oracle OLAP executes a statement (like CHGDIMS or TEMPSTAT) that temporarily changes the status of the dimension. In this case, Oracle OLAP adds a status list to the status list stack during the time the statement is in effect, and removes it immediately afterward. You can only access the status list from the status list stack while the temporary status is in effect.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEEIBGD"></a>
<div id="OLADM669" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">STATEQUAL</h2>
<p><a id="sthref3084"></a><a id="sthref3085"></a>The STATEQUAL function compares the status lists of a dimension.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3086"></a>Return Value</p>
<p>BOOLEAN</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3087"></a>Syntax</p>
<p class="synopsis">STATEQUAL (<span class="italic">statlist1</span>, <span class="italic">statlist2</span> [INORDER])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3088"></a>Parameters</p>
<dl>
<dt><span class="italic">statlist1</span></dt>
<dd>
<p>The status list of a dimension as specified using the name of the dimension, a valueset dimensioned by the dimension; or a LIMIT or SORT function for the dimension.</p>
</dd>
<dt><span class="italic">statlist2</span></dt>
<dd>
<p>The status list of the same dimension as that specified by <span class="italic">statlist1</span>. You can specify <span class="italic">statlist2</span> using the name of the dimension, a valueset dimensioned by the dimension; or a LIMIT or SORT function for the dimension.</p>
</dd>
<dt>INORDER</dt>
<dd>
<p>Specifies that the values must be in the same order.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78634"></a>
<div id="OLADM670" class="refsect1">
<h2 class="refsect1">STATFIRST</h2>
<p>&nbsp;<a id="sthref3089"></a><a id="sthref3090"></a><a id="sthref3091"></a><a id="sthref3092"></a>The STATFIRST function returns the first value in the current status list of a dimension or a dimension surrogate, or in a valueset.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3093"></a>Return Value</p>
<p>The data type returned by STATFIRST is either the data type of the dimension or dimension surrogate value or an <code dir="ltr">INTEGER</code> that indicates its position in the default status list of the dimension.The dimension value returned by STATFIRST is converted to a number or a text value, as appropriate to the context. See <a href="#BJEFGGCF">Example 8-107, &#34;Assigning value of STATFIRST to Variables of Different Types&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3094"></a>Syntax</p>
<p class="synopsis">STATFIRST(<span class="italic">dimension</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3095"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>A text expression whose value is the name of a dimension, a dimension surrogate, or a valueset.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3096"></a>Examples</p>
<div id="OLADM1917" class="example">
<p class="titleinexample"><a id="BJEFGGCF"></a>Example 8-107 Assigning value of STATFIRST to Variables of Different Types</p>
<p>The following statements</p>
<pre dir="ltr">DEFINE textvar TEXT
textvar = STATFIRST(month)
SHOW textvar
</pre>
<p>produce this output.</p>
<pre dir="ltr">Jun95
</pre>
<p>In contrast, these statements</p>
<pre dir="ltr">DEFINE intvar INTEGER
intvar = STATFIRST(month)
SHOW INTVAR
</pre>
<p>produce this output.</p>
<pre dir="ltr">6
</pre></div>
<!-- class="example" -->
<div id="OLADM1918" class="example">
<p class="titleinexample"><a id="sthref3097"></a>Example 8-108 STATFIRST with KEEP</p>
<p>The following line from a program uses STATFIRST to limit <code dir="ltr">month</code> to all values in the status up to a value that has been stored previously in a variable called <code dir="ltr">onemonth</code>. The keyword KEEP means the new status is always a subset of the old status.</p>
<pre dir="ltr">LIMIT month KEEP STATFIRST(month) TO onemonth
</pre>
<p>STATFIRST is used here, rather than a particular <code dir="ltr">month</code> value, so that the limit can work on any status list.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78639"></a>
<div id="OLADM671" class="refsect1">
<h2 class="refsect1">STATLAST</h2>
<p><a id="sthref3098"></a><a id="sthref3099"></a><a id="sthref3100"></a><a id="sthref3101"></a>The STATLAST function returns the last value in the current status list of a dimension or a dimension surrogate, or in a valueset.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3102"></a>Return Value</p>
<p>The data type returned by STATLAST is either the data type of the dimension or dimension surrogate value or an <code dir="ltr">INTEGER</code> that indicates its position in the default status list of the dimension. See <a href="#BJEHJHJB">&#34;Automatic Data Conversion of Returned Dimension Values&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3103"></a>Syntax</p>
<p class="synopsis">STATLAST(<span class="italic">dimension</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3104"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>A text expression whose value is the name of a dimension, a dimension surrogate, or a valueset.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3105"></a>Usage Notes</p>
<p class="subhead2"><a id="BJEHJHJB"></a><a id="OLADM1919"></a>Automatic Data Conversion of Returned Dimension Values</p>
<p>The dimension value returned by STATLAST is converted to a number or a text value, as appropriate to the context. Suppose, for example, that <code dir="ltr">jun95</code> is the sixth <code dir="ltr">month</code> value but the last value in the current status list. The value of <code dir="ltr">STATLAST(month)</code> can be assigned either to a text variable or a numeric variable.</p>
<p>The following statements produce a text output value.</p>
<pre dir="ltr">DEFINE textvar TEXT
TEXTVAR = statlast(MONTH)
SHOW textvar
</pre>
<pre dir="ltr">Jun95
</pre>
<p>In contrast, these statements produce a numeric output value.</p>
<pre dir="ltr">DEFINE intvar INTEGER
INTVAR = STATLAST(month)
SHOW INTVAR
</pre>
<pre dir="ltr">6
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3106"></a>Examples</p>
<div id="OLADM1920" class="example">
<p class="titleinexample"><a id="sthref3107"></a>Example 8-109 Setting Status with STATLAST</p>
<p>The following line from a program uses STATLAST to limit <code dir="ltr">month</code> to the values in the status, beginning with a month that has been stored previously in a variable called <code dir="ltr">onemonth</code>, and ending with the last value in the status.</p>
<pre dir="ltr">LIMIT month KEEP onemonth TO STATLAST(month)
</pre>
<p>STATLAST is used here, rather than a particular <code dir="ltr">month</code> value, so that the limit can work on any status list.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78644"></a>
<div id="OLADM672" class="refsect1">
<h2 class="refsect1">STATLEN</h2>
<p><a id="sthref3108"></a><a id="sthref3109"></a><a id="sthref3110"></a><a id="sthref3111"></a>The STATLEN function returns the number of values in the current status list of a dimension or a dimension surrogate, or in a valueset.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3112"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3113"></a>Syntax</p>
<p class="synopsis">STATLEN(<span class="italic">dimension</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3114"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>A text expression whose value is the name of a dimension, a dimension surrogate, or a valueset.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3115"></a>Examples</p>
<div id="OLADM1921" class="example">
<p class="titleinexample"><a id="sthref3116"></a>Example 8-110 Counting Months in Status</p>
<p>The following statement sends to the current outfile the number of months in the current status list of the <code dir="ltr">month</code> dimension.</p>
<pre dir="ltr">SHOW STATLEN(month) 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78649"></a>
<div id="OLADM673" class="refsect1">
<h2 class="refsect1">STATLIST</h2>
<p><a id="sthref3117"></a><a id="sthref3118"></a><a id="sthref3119"></a>The STATLIST function returns a list of all values in the current status list of a dimension or dimension surrogate, or in a valueset. You can format the list to a specified width. The STATLIST function is employed by the STATUS command, which summarizes the status of a dimension. Use STATLIST rather than STATUS when you want to control the width or placement of the display.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3120"></a>Return Value</p>
<p>STATLIST returns a list of TEXT values that contains either the dimension or dimension surrogate values themselves (for example, <code dir="ltr">Jan95</code>) or numbers (for example, <code dir="ltr">6</code>) that represent the positions of the values in the <span class="italic">default</span> status list.</p>
<p>The returned values are in the form <span class="syntaxinlineitalic">value</span> <span class="syntaxinline">TO</span> <span class="syntaxinlineitalic">value</span>, for example, <code dir="ltr">Jan9</code>6&nbsp;<code dir="ltr">TO</code>&nbsp;<code dir="ltr">Jun96</code>. When default status is in effect, it displays <code dir="ltr">ALL</code>. When the current status list or the valueset is empty, it displays <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3121"></a>Syntax</p>
<p class="synopsis">STATLIST(<span class="italic">dimension&nbsp;</span>[<span class="italic">keyword</span>]&nbsp;[<span class="italic">width</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3122"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>A text expression whose value is the name of a dimension, a dimension surrogate, or a valueset.</p>
</dd>
<dt><span class="italic">keyword</span></dt>
<dd>
<p>A keyword from <a href="#g1017606">Table 8-14, &#34;Keywords for STATLIST&#34;</a>. The keywords allow you to specify the form in which you want the values in the current status list to appear.</p>
<div id="OLADM1922" class="tblformal">
<p class="titleintable"><a id="sthref3123"></a><a id="g1017606"></a>Table 8-14 Keywords for STATLIST</p>
<table class="cellalignment3618" title="Keywords for STATLIST" summary="This table lists the keywords for STATLIST." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t79">Keyword</th>
<th class="cellalignment3616" id="r1c2-t79">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t79" headers="r1c1-t79">
<p>INTEGER</p>
</td>
<td class="cellalignment3617" headers="r2c1-t79 r1c2-t79">
<p>Specifies that STATLIST should return the list of values in the current status of a dimension in the form of the <code dir="ltr">INTEGER</code> positions of those values in the default status list of the dimension.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t79" headers="r1c1-t79">
<p>TEXT</p>
</td>
<td class="cellalignment3617" headers="r3c1-t79 r1c2-t79">
<p>(Default) Specifies that STATLIST should return the list of values in the current status of a dimension in the form of the value names of those values.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></dd>
<dt><span class="italic">width</span></dt>
<dd>
<p>An optional <code dir="ltr">INTEGER</code> expression that specifies the width of the list in characters. When no width is specified, STATLIST uses the current value of the LSIZE option. LSIZE has a default value of <code dir="ltr">80</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3124"></a>Examples</p>
<div id="OLADM1923" class="example">
<p class="titleinexample"><a id="sthref3125"></a>Example 8-111 Producing a Status List with ROW</p>
<p>This example lists months in which total sales exceed $3,000,000.</p>
<p>These statements</p>
<pre dir="ltr">LIMIT month TO TOTAL(sales, month) GE 3000000
ROW W 40 &#39;Months with total sales over $3,000,000: &#39;-
   W 40 STATLIST(month, 40)
</pre>
<p>produce the following output.</p>
<pre dir="ltr">Months with total sales over $3,000,000: Jun95 TO Sep95, May96 TO Sep96
</pre></div>
<!-- class="example" -->
<div id="OLADM1924" class="example">
<p class="titleinexample"><a id="sthref3126"></a>Example 8-112 Producing a Status List with SHOW</p>
<p>The following STATLIST statement formats dimension values to a 20-character width.</p>
<pre dir="ltr">LIMIT month TO &#39;Jan95&#39; &#39;Mar95&#39; &#39;May95&#39; &#39;Jul96&#39; &#39;Sep96&#39; &#39;Nov96&#39;
SHOW STATLIST(month 20)
</pre>
<p>These statements produce this output.</p>
<pre dir="ltr">Jan95, Mar95, May95,
Jul96, Sep96, Nov96
</pre>
<p>This statement lists dimension positions.</p>
<pre dir="ltr">SHOW STATLIST(month INTEGER 20)
</pre>
<p>This is the output.</p>
<pre dir="ltr">1, 3, 5, 19, 21, 23 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78654"></a>
<div id="OLADM674" class="refsect1">
<h2 class="refsect1">STATMAX</h2>
<p><a id="sthref3127"></a><a id="sthref3128"></a><a id="sthref3129"></a><a id="sthref3130"></a>The STATMAX function returns the latest value in the current status list of a dimension or a dimension surrogate, or in a valueset.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3131"></a>Return Value</p>
<p>The data type returned by STATMAX is either the data type of the dimension or dimension surrogate value or an <code dir="ltr">INTEGER</code> that indicates its position in the default status list of the dimension or surrogate. See <a href="#BJEGIEDB">&#34;Automatic Conversion of Values Returned by STATMAX&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3132"></a>Syntax</p>
<p class="synopsis">STATMAX(<span class="italic">dimension</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3133"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>A text expression whose value is the name of a dimension, dimension surrogate, or valueset.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3134"></a>Usage Notes</p>
<p class="subhead2"><a id="BJEGIEDB"></a><a id="OLADM1925"></a>Automatic Conversion of Values Returned by STATMAX</p>
<p>The value that STATMAX returns is converted to a number or a text value as appropriate to the context. For example, suppose that the status of <code dir="ltr">month</code> is limited to <code dir="ltr">Jun95</code> to <code dir="ltr">Dec95</code> and that <code dir="ltr">Dec95</code> is the twelfth month in the default status list. The value of <code dir="ltr">STATMAX(month)</code> can be assigned either to a text variable or a numeric variable.</p>
<p>The following statements</p>
<pre dir="ltr">DEFINE textvar TEXT
textvar = STATMAX(month)
SHOW textvar
</pre>
<p>produce this output.</p>
<pre dir="ltr">Dec95
</pre>
<p>In contrast, these statements</p>
<pre dir="ltr">DEFINE intvar INTEGER
intvar = STATMAX(month)
SHOW intvar
</pre>
<p>produce this output.</p>
<pre dir="ltr">12
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3135"></a>Examples</p>
<div id="OLADM1926" class="example">
<p class="titleinexample"><a id="sthref3136"></a>Example 8-113 STATMAX Used in a Title</p>
<p>The following statements from a program use STATMAX to determine the latest of the 10 months with the highest total sales.</p>
<pre dir="ltr">LIMIT month TO BOTTOM 10 BASEDON TOTAL(sales, month)
SHOW JOINCHARS(STATMAX(month) &#39; is the latest month -
  of the ten months with the lowest sales.&#39;)
SHOW JOINCHARS(&#39;the months range from &#39; STATMIN(month) &#39; to &#39;-  
  STATMAX(month)) 
</pre>
<p>These statements produce the following sales report.</p>
<pre dir="ltr">Dec96 is the latest month of the ten months with the lowest sales.
The months range from Jan95 to Dec96
</pre>
<p>When you used STATLAST instead of STATMAX, you could have produced a different value, because the LIMIT command arranged the <code dir="ltr">month</code> values by increasing sales rather than chronologically.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78659"></a>
<div id="OLADM675" class="refsect1">
<h2 class="refsect1">STATMIN</h2>
<p><a id="sthref3137"></a><a id="sthref3138"></a><a id="sthref3139"></a>The STATMIN function returns the earliest value in the current status list of a dimension or a dimension surrogate, or in a valueset.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3140"></a>Return Value</p>
<p>Either a dimension or surrogate value or an <code dir="ltr">INTEGER</code> that indicates the position of the value in the default status list of the dimension or surrogate. The return value varies depending on the <span class="italic">dimension</span> argument and the object receiving the return value. See <a href="#BJEDBIGH">&#34;Automatic Data Type Conversion of Values Returned by STATMIN&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3141"></a>Syntax</p>
<p class="synopsis">STATMIN(<span class="italic">dimension</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3142"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>A text expression whose value is the name of a dimension, dimension surrogate, or valueset.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3143"></a>Usage Notes</p>
<p class="subhead2"><a id="BJEDBIGH"></a><a id="OLADM1927"></a>Automatic Data Type Conversion of Values Returned by STATMIN</p>
<p>The dimension value that STATMIN returns is converted, if necessary, to a number or a text value. For example, suppose the status of <code dir="ltr">month</code> is limited to <code dir="ltr">Jun95</code> to <code dir="ltr">Dec95</code>, and <code dir="ltr">Jun95</code> is the sixth <code dir="ltr">month</code> value in the default status list. The value of <code dir="ltr">STATMIN(month)</code> can be assigned either to a text variable, a numeric variable, or DATE variable.</p>
<p>The following statements</p>
<pre dir="ltr">DEFINE textvar TEXT
textvar = STATMIN(month)
SHOW textvar
</pre>
<p>produce this output.</p>
<pre dir="ltr">Jun95
</pre>
<p>In contrast, these statements</p>
<pre dir="ltr">DEFINE intvar INTEGER
intvar = STATMIN(month)
SHOW intvar
</pre>
<p>produce this output.</p>
<pre dir="ltr">6
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3144"></a>Examples</p>
<div id="OLADM1928" class="example">
<p class="titleinexample"><a id="sthref3145"></a>Example 8-114 Using STATMIN in a Title</p>
<p>The following statements from a program use STATMIN to determine the earliest of the 10 months with the highest total sales.</p>
<pre dir="ltr">LIMIT month TO TOP 10 BASEDON TOTAL(sales, month)
SHOW JOINCHARS(STATMIN(month) &#39; is the earliest of the - 
  ten months with the highest sales.&#39;)
SHOW JOINCHARS( &#39;The months range from &#39; statmin(month) &#39; TO &#39;- 
  statmax(month) )
</pre>
<p>The preceding statements produce the following sales report.</p>
<pre dir="ltr">May95 is the earliest of the ten months with the highest sales.
The months range from May95 to Sep96
</pre></div>
<!-- class="example" -->
<div id="OLADM1929" class="example">
<p class="titleinexample"><a id="sthref3146"></a>Example 8-115 Comparing to STATFIRST</p>
<p>In the following example, you can see the difference between STATMIN and STATFIRST, which returns the first value in the current status list.</p>
<p>Assume that you issue the following statements.</p>
<pre dir="ltr">LIMIT month TO TOP 10 BASEDON TOTAL(sales, month)
REPORT WIDTH 20 TOTAL(sales, month)
</pre>
<p>When the proceeding statements execute, the following report is produced.</p>
<pre dir="ltr">MONTH          TOTAL(SALES, MONTH) 
-------------- --------------------
Jul96                  3,647,085.39
Jun96                  3,458,438.30
Jul95                  3,414,210.05
Aug96                  3,246,601.97
Jun95                  3,228,824.80
Sep96                  3,215,883.93
May96                  3,112,854.59
Aug95                  3,044,694.29
Sep95                  3,006,242.58
May95                  2,908,539.45
</pre>
<p>Notice that the <code dir="ltr">month</code> values in this report are arranged by decreasing sales rather than chronologically, and this is now the order in which they occur in the status list:</p>
<ul>
<li>
<p>STATMIN gives the <span class="italic">chronologically</span> first value in the status (though it is positionally last) as illustrated in the following statement and output.</p>
<pre dir="ltr">SHOW STATMIN(month)
May95
 
</pre></li>
<li>
<p>STATFIRST gives the value that is <span class="italic">positionally</span> first in the status (though it is chronologically eighth) as illustrated in the following statement and output.</p>
<pre dir="ltr">SHOW STATFIRST(month)
Jul96 
</pre></li>
</ul>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78664"></a>
<div id="OLADM676" class="refsect1">
<h2 class="refsect1">STATRANK</h2>
<p><a id="sthref3147"></a><a id="sthref3148"></a><a id="sthref3149"></a>The STATRANK function returns the position of a dimension or dimension surrogate value in the current status list or in a valueset.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3150"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3151"></a>Syntax</p>
<p class="synopsis">STATRANK(<span class="italic">dimension&nbsp;</span>[<span class="italic">value</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3152"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>A text expression whose value is the name of a dimension, dimension surrogate, or valueset.</p>
</dd>
<dt><span class="italic">value</span></dt>
<dd>
<p>The value you want to check, which is an appropriate data type for <span class="italic">dimension.</span> For example, <span class="italic">value</span> can be a text expression for an ID or TEXT dimension, an <code dir="ltr">INTEGER</code> for an INTEGER dimension, a date for a time dimension, or a combination of values enclosed by angle brackets for conjoint or concat dimensions. The value of a text expression must have the same capitalization as the actual dimension value. When you use a text expression, it must be a single-line value.</p>
<p>When you specify the value of a conjoint dimension, be sure to enclose the value in angle brackets, and separate the base dimension values with a comma and space. When you specify the value of a concat dimension, be sure to enclose the value in angle brackets, and separate the base dimension name from the value with a colon and space.</p>
<p>When you do not specify <span class="italic">value,</span> STATRANK returns the position of the current value. When you specify the name of a valid dimension value that is not in the current status list or in the valueset, STATRANK returns <code dir="ltr">NA</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3153"></a>Examples</p>
<div id="OLADM1930" class="example">
<p class="titleinexample"><a id="sthref3154"></a>Example 8-116 Using STATRANK to Identify Position Numbers</p>
<p>Suppose you want to produce a report of the top five months by total sales, displayed in order as a numbered list. You can use STATRANK to number each month. Assume that you have written a report program with the following definition and contents.</p>
<pre dir="ltr">DEFINE sales.rpt PROGRAM
PROGRAM
LIMIT month TO TOP 5 BASEDON TOTAL(sales, month)
SHOW &#39;Top five months by total sales:&#39;
for month
    ROW WIDTH 4 JOINCHARS(STATRANK(month) &#39;.&#39;) WIDTH 5 month
END
</pre>
<p>The report program produces the following output.</p>
<pre dir="ltr">Top five months by total sales:
1.   Jul96
2.   Jun96
3.   Jul95
4.   Aug96
5.   Jun95
</pre>
<p>After executing the <code dir="ltr">sales.rpt</code> program, you can use a SHOW statement with the STATRANK function to learn the position of a particular month within the top five months by total sales.</p>
<p>The following statement</p>
<pre dir="ltr">SHOW STATRANK(month Jun96)
</pre>
<p>produces this output.</p>
<pre dir="ltr">2
</pre></div>
<!-- class="example" -->
<div id="OLADM1931" class="example">
<p class="titleinexample"><a id="sthref3155"></a>Example 8-117 Using STATRANK When the Dimension Is a Conjoint Dimension</p>
<p>When the <span class="italic">dimension</span> that you specify is a conjoint dimension, then the entire <span class="italic">value</span> must be enclosed in single quotes.</p>
<p>For example, suppose the analytic workspace has a <code dir="ltr">region</code> dimension and a <code dir="ltr">product</code> dimension. The <code dir="ltr">region</code> dimension values include <code dir="ltr">East</code>, <code dir="ltr">Central</code>, and <code dir="ltr">West</code>. The <code dir="ltr">product</code> dimension values include <code dir="ltr">Tents</code>, <code dir="ltr">Canoes</code>, and <code dir="ltr">Racquets</code>.</p>
<p>The following statements define a conjoint dimension, and add values to it.</p>
<pre dir="ltr">DEFINE reg.prod DIMENSION &lt;region product&gt;
MAINTAIN reg.prod ADD &lt;&#39;East&#39;, &#39;Tents&#39;&gt; &lt;&#39;West&#39;, &#39;Canoes&#39;&gt;
</pre>
<p>To specify base positions, use a statement such as the following. Because the position of <code dir="ltr">East</code> in the <code dir="ltr">region</code> dimension is <code dir="ltr">1</code> and the position of <code dir="ltr">Tents</code> in the <code dir="ltr">product</code> dimension is <code dir="ltr">1</code>, the following statement returns the position of the corresponding <code dir="ltr">reg.prod</code> value.</p>
<pre dir="ltr">SHOW STATRANK(reg.prod &#39;&lt;1, 1&gt;&#39;)

1
</pre>
<p>To specify base text values, use a statement such as the following.</p>
<pre dir="ltr">SHOW STATRANK(reg.prod &#39;&lt;\&#39;East\&#39;, \&#39;Tents\&#39;&gt;&#39;)

1
</pre></div>
<!-- class="example" -->
<div id="OLADM1932" class="example">
<p class="titleinexample"><a id="sthref3156"></a>Example 8-118 Using STATRANK When the Dimension Is a Concat Dimension</p>
<p>When the <span class="italic">dimension</span> that you specify is a concat dimension, then the entire <span class="italic">value</span> must be enclosed in single quotes. The following statement defines a concat dimension named <code dir="ltr">reg.prod.ccdim</code> that has as its base dimensions <code dir="ltr">region</code> and <code dir="ltr">product</code>.</p>
<pre dir="ltr">DEFINE reg.prod.ccdim DIMENSION CONCAT(region product)
</pre>
<p>A report of <code dir="ltr">reg.prod.ccdim</code> returns the following.</p>
<pre dir="ltr">REG.PROD.CCDIM
----------------------
&lt;Region: East&gt;
&lt;Region: Central&gt;
&lt;Region: West&gt;
&lt;Product: Tents&gt;
&lt;Product: Canoes&gt;
&lt;Product: Racquets&gt;
</pre>
<p>To specify a base dimension position, use a statement such as the following. Because the position of <code dir="ltr">racquets</code> in the <code dir="ltr">product</code> dimension is <code dir="ltr">3</code>, the statement returns the position in <code dir="ltr">reg.prod.ccdim</code> of the <code dir="ltr">&lt;product:</code> <code dir="ltr">Racquets&gt;</code> value.</p>
<pre dir="ltr">SHOW STATRANK(reg.prod.ccdim &#39;&lt;product: 3&gt;&#39;)

6
</pre>
<p>To specify base dimension text values, use a statement such as the following.</p>
<pre dir="ltr">SHOW STATRANK(reg.prod.ccdim &#39;&lt;product: Tents&gt;&#39;)

4 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78674"></a>
<div id="OLADM677" class="refsect1">
<h2 class="refsect1">STATVAL</h2>
<p><a id="sthref3157"></a><a id="sthref3158"></a>The STATVAL function returns the dimension value that corresponds to a specified position in the current status list of a dimension or a dimension surrogate, or in a valueset.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3159"></a>Return Value</p>
<p>The data type returned by STATVAL is either the data type of the dimension or dimension surrogate value or an <code dir="ltr">INTEGER</code> that indicates its position in the default status list of the dimension. The dimension value that STATVAL returns is converted to a number or a text value, as appropriate to the context. To ensure that STATVAL returns an <code dir="ltr">INTEGER</code> value, specify the INTEGER keyword. See <a href="#BJEGCDDB">Example 8-120, &#34;Ensuring that STATVAL Returns an INTEGER&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3160"></a>Syntax</p>
<p class="synopsis">STATVAL(<span class="italic">dimension&nbsp;position&nbsp;</span>[INTEGER])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3161"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>A text expression whose value is the name of a dimension, a dimension surrogate, or a valueset.</p>
</dd>
<dt><span class="italic">position</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> expression that specifies the position in the current status list of a dimension or a valueset. When you specify a position that has no values, STATVAL returns <code dir="ltr">NA</code>.</p>
</dd>
<dt>INTEGER</dt>
<dd>
<p>Specifies that STATVAL must return an <code dir="ltr">INTEGER</code> that represents the position of the dimension value in the default status list.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3162"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1933"></a>STATVAL in a FOR Loop</p>
<p>In a FOR loop over a dimension, the status is limited to a single dimension value for each iteration of the loop. Therefore, STATVAL has a value only for position <code dir="ltr">1</code>. For other positions, STATVAL returns <code dir="ltr">NA</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3163"></a>Examples</p>
<div id="OLADM1934" class="example">
<p class="titleinexample"><a id="sthref3164"></a>Example 8-119 STAVAL with Qualified Data References</p>
<p>Suppose you want to know the sales figures for the month ranked fifth among the 10 months with the highest total sales. After limiting <code dir="ltr">month</code> to the <code dir="ltr">TOP</code> <code dir="ltr">10</code>, use STATVAL in a qualified data reference to produce sales figures for the month ranked fifth.</p>
<pre dir="ltr">LIMIT month TO TOP 10 BASEDON TOTAL(sales, month)
REPORT month
</pre>
<p>These statements produce the following report.</p>
<pre dir="ltr">MONTH
--------------
Jul96
Jun96
Jul95
Aug96
Jun95
Sep96
May96
Aug95
Sep95
MAY95
</pre>
<p>Using STATVAL in the following REPORT statement produces a different report.</p>
<pre dir="ltr">REPORT W 8 DOWN district HEADING -
   JOINCHARS(&#39;Sales: 5th of Top Ten - &#39; STATVAL(month 5)) -
   sales(month STATVAL(month 5))
</pre>
<p>This is the report produced by the preceding statement.</p>
<pre dir="ltr">         ------------Sales: 5th of Top Ten - Jun95-------------
         -----------------------PRODUCT------------------------
DISTRICT   Tents      Canoes    Racquets  Sportswear  Footwear
-------- ---------- ---------- ---------- ---------- ----------
Boston    88,996.35 147,412.44  90,840.60  75,206.30 144,162.66
Atlanta  110,765.24 106,327.17 109,695.31 155,652.78 146,364.99
Chicago   70,908.96 108,039.05 100,030.29 104,900.66 148,386.81
Dallas   128,692.56  71,899.23 176,452.58 164,823.10  32,421.25
Denver    91,717.46  99,099.20 140,961.37  99,951.60  70,149.77
Seattle  113,806.48 143,037.62  54,926.87  57,739.03  75,457.04
</pre>
<p>Notice that the qualified data reference in the following statement means &#34;sales for the fifth month in the <span class="italic">default</span> status of <code dir="ltr">month</code>.&#34;</p>
<pre dir="ltr">sales(month 5)
</pre>
<p>While the qualified data reference in the following statement means &#34;sales for the fifth month in the <span class="italic">current</span> status of <code dir="ltr">month</code>.&#34;</p>
<pre dir="ltr">sales(month STATVAL(month 5))
</pre>
<p>The following statements show the different values that are returned for a qualified data reference of <code dir="ltr">month</code> and for STATVAL with <code dir="ltr">month</code> as an argument.</p>
<pre dir="ltr">SHOW month(month 5)
SHOW STATVAL(month 5)
</pre>
<p>The preceding statements produce the following output.</p>
<pre dir="ltr">May95
Jun95 
</pre></div>
<!-- class="example" -->
<div id="OLADM1935" class="example">
<p class="titleinexample"><a id="BJEGCDDB"></a>Example 8-120 Ensuring that STATVAL Returns an INTEGER</p>
<p>Depending on the context, STATVAL may return an <code dir="ltr">INTEGER</code> value without your specifying the INTEGER keyword.</p>
<p>The following statements</p>
<pre dir="ltr">LIMIT month TO &#39;Jun95&#39; TO &#39;Dec95&#39;
SHOW STATVAL(month 3)
</pre>
<p>produce this output.</p>
<pre dir="ltr">Aug95
</pre>
<p>With the INTEGER keyword,</p>
<pre dir="ltr">SHOW STATVAL(month 3 INTEGER)
</pre>
<p>the following output is produced.</p>
<pre dir="ltr">8
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1024979"></a>
<div id="OLADM678" class="refsect1">
<h2 class="refsect1">STDDEV</h2>
<p><a id="sthref3165"></a><a id="sthref3166"></a>The STDDEV function calculates the standard deviation of the values of an expression.</p>
<p>When STDDEV is affected by the NASKIP option. When NASKIP is set to <code dir="ltr">YES</code> (the default), STDDEV ignores <code dir="ltr">NA</code> values and returns the standard deviation of the values that are not <code dir="ltr">NA</code>. When NASKIP is set to <code dir="ltr">NO</code>, STDDEV returns <code dir="ltr">NA</code> when any value in the calculation is <code dir="ltr">NA</code>. When all data values for a calculation are <code dir="ltr">NA</code>, STDDEV returns <code dir="ltr">NA</code> for either setting of NASKIP.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3167"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3168"></a>Syntax</p>
<p class="synopsis">STDDEV(<span class="italic">expression&nbsp;</span>[<span class="italic">dimensions</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3169"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The numeric expression whose standard deviation is to be calculated.</p>
</dd>
<dt><span class="italic">dimensions</span></dt>
<dd>
<p>The dimensions of the result. By default, STDDEV returns a single value. When you indicate one or more dimensions for the results, STDDEV calculates a standard deviation along the specified dimension(s) and returns an array of values. Each dimension must be either a dimension of <span class="italic">expression</span> or related to one of its dimensions. When it is a related dimension, you can specify the name of the relation instead of the dimension name which enables you to choose the relation to use when there are multiple relations between dimensions.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3170"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1936"></a>Using STDDEV With an Expression Dimensioned by a DWMQY Dimension</p>
<p>When <span class="italic">expression</span> is dimensioned by a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR, you can specify any other dimensions of type DAY, WEEK, MONTH, QUARTER, or YEAR as a related <span class="italic">dimension.</span> Oracle OLAP uses the implicit relation between the dimensions. To control the mapping of one dimensions of type DAY, WEEK, MONTH, QUARTER, or YEAR to another (for example, from weeks to months), you can define an explicit relation between the two dimensions and specify the name of the relation as the <span class="italic">dimension</span> argument to the STDDEV function.</p>
<p>For each time period in the related dimensions of type DAY, WEEK, MONTH, QUARTER, and YEAR, Oracle OLAP calculates the standard deviation of the data values of the source time periods that end in the target time period. This method is used regardless of which dimension has the more aggregate time periods. To control the way in which data is aggregated or allocated between the periods of two dimensions of type DAY, WEEK, MONTH, QUARTER, and YEAR, you can use the TCONVERT function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3171"></a>Examples</p>
<div id="OLADM1937" class="example">
<p class="titleinexample"><a id="sthref3172"></a>Example 8-121 Calculating the Standard Deviation of Monthly Sales</p>
<p>This example calculates the average number of tents sold during the first three months of 1996, along with the standard deviation from that average.</p>
<pre dir="ltr">LIMIT district TO ALL
LIMIT month TO &#39;Jan96&#39; TO &#39;Mar96&#39;
LIMIT product TO &#39;Tents&#39;
REPORT HEADING &#39;Average&#39; AVERAGE(units month) -
   HEADING &#39;Stddev&#39;STDDEV(units months)
</pre>
<p>These statements produce the following output.</p>
<pre dir="ltr">MONTH           Average     Stddev
-------------- ---------- ----------
Jan96              262.33      49.32
Feb96              247.83      57.37
Mar96              320.50      68.17
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1003395"></a>
<div id="OLADM679" class="refsect1">
<h2 class="refsect1">SUBSTR functions</h2>
<p><a id="sthref3173"></a><a id="sthref3174"></a><a id="sthref3175"></a><a id="sthref3176"></a><a id="sthref3177"></a><a id="sthref3178"></a>The SUBSTR functions (SUBSTR, SUBSTRB, and SUBSTRC) return a portion of a string, beginning at a specified position in the string.</p>
<p>The functions vary in how they calculate the length of the substring to return.</p>
<ul>
<li>
<p>SUBSTR calculates lengths using characters as defined by the input character set.</p>
</li>
<li>
<p>SUBSTRB calculates lengths using bytes.</p>
</li>
<li>
<p>SUBSTRC calculates lengths using Unicode complete characters.</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3179"></a>Return Value</p>
<p>The return value is the same data type as string.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3180"></a>Syntax</p>
<p class="synopsis">{SUBSTR | SUBSTRB | SUBSTRC }(<span class="italic">string</span>, <span class="italic">position</span> [, <span class="italic">substring_length</span> ])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3181"></a>Parameters</p>
<dl>
<dt><span class="italic">string</span></dt>
<dd>
<p>A text expression that is the base string from which the substring is created.</p>
</dd>
<dt><span class="italic">position</span></dt>
<dd>
<p>The position at which the first character of the returned string begins.</p>
</dd>
</dl>
<ul>
<li>
<p>When <span class="italic">position</span> is <code dir="ltr">0</code> (zero), then it is treated as <code dir="ltr">1</code>.</p>
</li>
<li>
<p>When <span class="italic">position</span> is positive, then the function counts from the beginning of <span class="italic">string</span> to find the first character.</p>
</li>
<li>
<p>When <span class="italic">position</span> is negative, then the function counts backward from the end of <span class="italic">string</span>.</p>
</li>
</ul>
<dl>
<dt><span class="italic">substring_length</span></dt>
<dd>
<p>The length of the returned string. SUBSTR calculates lengths using characters as defined by the input character set. SUBSTRB uses bytes instead of characters. SUBSTRC uses Unicode complete characters.</p>
<p>When you do not specify a value for this argument, then the function returns all characters to the end of <span class="italic">string</span>. If you specify a value that is less than <code dir="ltr">1</code> or a value that is greater than the number of characters in the string, then the function returns <code dir="ltr">NA</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3182"></a>Examples</p>
<div id="OLADM1938" class="example">
<p class="titleinexample"><a id="sthref3183"></a>Example 8-122 Retrieving a Character Substring</p>
<p>The following example returns the specified substrings of &#34;abcdefg&#34;.</p>
<pre dir="ltr">SHOW SUBSTR(&#39;abcdefg&#39;,3,4) 
cdef

SHOW SUBSTR(&#39;abcdefg&#39;,-5,4) 
cdef
</pre></div>
<!-- class="example" -->
<div id="OLADM1939" class="example">
<p class="titleinexample"><a id="sthref3184"></a>Example 8-123 Retrieving a Substring Using Bytes</p>
<p>Assume an AL32UTF8 database character set. For the string Fu&szlig;ball, the following statement returns a substring 4 bytes long, beginning with the second byte.</p>
<pre dir="ltr">SHOW SUBSTRB(&#39;Fu&szlig;ball&#39;,2,4)
u&szlig;b
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1007243"></a>
<div id="OLADM680" class="refsect1">
<h2 class="refsect1">SUBTOTAL</h2>
<p><a id="sthref3185"></a><a id="sthref3186"></a><a id="sthref3187"></a><a id="sthref3188"></a>The SUBTOTAL function returns the value of one subtotal accumulated in a report. You normally use the SUBTOTAL function in a ROW command to include a subtotal or grand total in the report. Because Oracle OLAP maintains 32 running totals for each column, you can include up to 32 levels of subtotals</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In a REPORT statement, use the GRANDTOTALS and SUBTOTALS keywords to include rows of grand totals and subtotals.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3189"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3190"></a>Syntax</p>
<p class="synopsis">SUBTOTAL(<span class="italic">n</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3191"></a>Parameters</p>
<dl>
<dt><span class="italic">n</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> value that indicates the level of a running total for each numeric column in a report. For example, a &#34;Total&#34; may be a level 1 subtotal and a &#34;Grand Total&#34; may be a level 2 subtotal. Because it is possible to have up to 32 levels of running totals in a column, <span class="italic">n</span> must be an <code dir="ltr">INTEGER</code> between 1 and 32. SUBTOTAL returns the value of this subtotal for the current column and then resets the value of subtotal <span class="italic">n</span> to zero.</p>
<p>The numbers by which the 32 subtotals are referenced (1 to 32) have no intrinsic significance; all the subtotals are the same until you reference them.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3192"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1940"></a>Resetting Subtotals Automatically</p>
<p>When you use the SUBTOTAL function in a ROW command to include a subtotal of the current column, the subtotal at that level is reset to zero.</p>
<p class="subhead2"><a id="OLADM1941"></a>Resetting Subtotals with ZEROTOTAL</p>
<p>When you use the ROW command to produce a report, you can use a ZEROTOTAL statement to reset any subtotal of any column to zero.Typically, use ZEROTOTAL this at the beginning of a report program to make sure all totals begin at zero.</p>
<p class="subhead2"><a id="OLADM1942"></a>NA Values and SUBTOTAL</p>
<p>SUBTOTAL ignores <code dir="ltr">NA</code> values. When all values are <code dir="ltr">NA</code>, SUBTOTAL returns zero.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3193"></a>Examples</p>
<div id="OLADM1943" class="example">
<p class="titleinexample"><a id="sthref3194"></a>Example 8-124 Calculating Subtotals and Grand Totals in a Report</p>
<p>In a sales report, suppose you want to show a subtotal for each region. You also want to see a grand total of all sales at the end of the report. You can use <code dir="ltr">SUBTOTAL(1)</code> to produce the subtotal for each region. This subtotal is reset to <code dir="ltr">0</code> each time you use it, so it provides a separate subtotal for each region. At the end of the report you can use <code dir="ltr">SUBTOTAL(2)</code> to produce the grand total. Because you have not yet used it in your report, it holds a total of the sales figures for all regions.</p>
<pre dir="ltr">LIMIT month TO FIRST 3
LIMIT region TO ALL
ZEROTOTAL ALL
FOR region
   DO 
   ROW region
   LIMIT DISTRICT TO region
   FOR district
      DO
      ROW INDENT 5 district ACROSS month: sales
      DOEND
   ROW INDENT 5 &#39;Total&#39; ACROSS month: OVER &#39;-&#39; SUBTOTAL(1)
   BLANK
   DOEND
ROW &#39;Grand Total&#39; ACROSS month: OVER &#39;=&#39; SUBTOTAL(2)
</pre>
<p>The program produces the following output.</p>
<pre dir="ltr">East
     Boston     32,153.52  32,536.30  43,062.75
     Atlanta    40,674.20  44,236.55  51,227.06
               ---------- ---------- ----------
     Total      72,827.72  76,772.85  94,289.81
Central
     Chicago    29,098.94  29,010.20  39,540.89
     Dallas     47,747.98  50,166.81  67,075.44
               ---------- ---------- ----------
     Total      76,846.92  79,177.01 106,616.33
West
     Denver     36,494.25  33,658.24  45,303.93
     Seattle    43,568.02  41,191.28  51,547.23
               ---------- ---------- ----------
     Total      80,062.27  74,849.52  96,851.16
 
               ========== ========== ==========
Grand Total    229,736.91 230,799.38 297,757.30
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACCICIE"></a>
<div id="OLADM681" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SYS_CONTEXT</h2>
<p>The <a id="sthref3195"></a>SYS_CONTEXT function returns the value of parameter associated with the context namespace.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information, see the SYS_CONTEXT function in <a class="olink SQLRF06117" href="../SQLRF/functions199.htm#SQLRF06117"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3196"></a>Return Values</p>
<p>VARCHAR2.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3197"></a>Syntax</p>
<p class="synopsis">SYS_CONTEXT(<span class="italic">namespace</span>, <span class="italic">parameter</span> [, l<span class="italic">ength</span> ])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3198"></a>Parameters</p>
<dl>
<dt><span class="italic">namespace</span></dt>
<dd>
<p>A text expression that specifies a namespace which is a valid SQL identifier. The context namespace must have been created, and the associated parameter and its value must also have been set using the <code dir="ltr">DBMS_SESSION.set_context</code> procedure.</p>
</dd>
<dt><span class="italic">parameter</span></dt>
<dd>
<p>A text expression that specifies an attribute associated with a namespace. This parameter and its value must have previously been set using the <code dir="ltr">DBMS_SESSION.set_context</code> procedure. The parameter is not case sensitive, but it cannot exceed 30 bytes in length.</p>
</dd>
<dt><span class="italic">length</span></dt>
<dd>
<p>A numeric expression that specifies the maximum size of the return value. The value that you specify must be a <code dir="ltr">NUMBER</code> (or a value that can be implicitly converted to <code dir="ltr">NUMBER</code>) and in the range of 1 to 4000 bytes,. If you specify an invalid value, then Oracle OLAP ignores it and uses the default value of 256 bytes.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3199"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1944"></a>USERENV Built-In Namespace</p>
<p>Oracle provides a built-in namespace called <code dir="ltr">USERENV</code>, which describes the current session.</p>
<p>For more information on the predefined parameters of namespace <code dir="ltr">USERENV</code>, see the SYS_CONTEXT function in <a class="olink SQLRF06117" href="../SQLRF/functions199.htm#SQLRF06117"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3200"></a>Examples</p>
<div id="OLADM1945" class="example">
<p class="titleinexample"><a id="sthref3201"></a>Example 8-125 Retrieving the Name of the User of the Session</p>
<p>The following hypothetical example retrieves the value <code dir="ltr">JOHNSMITH</code> which is the name of the user who logged onto the database.</p>
<pre dir="ltr">SHOW SYS_CONTEXT (&#39;USERENV&#39;, &#39;SESSION_USER&#39;)
JOHNSMITH
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78583"></a>
<div id="OLADM682" class="refsect1">
<h2 class="refsect1">SYSDATE</h2>
<p><a id="sthref3202"></a><a id="sthref3203"></a><a id="sthref3204"></a><a id="sthref3205"></a>The SYSDATE function returns the current date and time as a DATETIME value. The format of the date is controlled by the NLS_DATE_FORMAT option. The default DATETIME format (<code dir="ltr">DD-MM-RR</code>) does not display the time.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3206"></a>Return Value</p>
<p>DATETIME</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3207"></a>Syntax</p>
<p class="synopsis">SYSDATE</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3208"></a>Examples</p>
<div id="OLADM1946" class="example">
<p class="titleinexample"><a id="sthref3209"></a>Example 8-126 Displaying the Current Date</p>
<p>The following statement:</p>
<pre dir="ltr">SHOW SYSDATE
</pre>
<p>displays the current date:</p>
<pre dir="ltr">08-Sep-00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78588"></a>
<div id="OLADM683" class="refsect1">
<h2 class="refsect1">SYSINFO</h2>
<p><a id="sthref3210"></a><a id="sthref3211"></a><a id="sthref3212"></a><a id="sthref3213"></a><a id="sthref3214"></a>The SYSINFO function provides information about the Oracle user ID for the current session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3215"></a>Return Value</p>
<p>TEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3216"></a>Syntax</p>
<p class="synopsis">SYSINFO&nbsp;(<span class="italic">keyword</span>)</p>
<p>where <span class="syntaxinlineitalic">keyword</span> is one of the following:</p>
<dl>
<dd><span class="syntaxinline">USER</span></dd>
<dd><span class="syntaxinline">ROLES</span></dd>
<dd><span class="syntaxinline">PROFILES</span></dd>
<dd><span class="syntaxinline">HOSTNAME</span></dd>
<dd><span class="syntaxinline">OSUSER</span></dd>
<dd><span class="syntaxinline">INSTNAME</span></dd>
<dd><span class="syntaxinline">PID</span></dd>
<dd><span class="syntaxinline">PROGNAME</span></dd>
<dd><span class="syntaxinline">CHOSTNAME</span></dd>
<dd><span class="syntaxinline">COSUSER</span></dd>
<dd><span class="syntaxinline">TERMNAME</span></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3217"></a>Parameters</p>
<dl>
<dt>USER</dt>
<dd>
<p>Returns a TEXT value that indicates the user ID under which the Oracle Database session is running which is the same value that is returned by USERID.</p>
</dd>
<dt>ROLES</dt>
<dd>
<p>Returns a multiline TEXT value that lists the roles that apply to the user ID of the session.</p>
</dd>
<dt>PROFILES</dt>
<dd>
<p>Returns a multiline TEXT value that lists the profiles that apply to the user ID of the session.</p>
</dd>
<dt>OSUSER</dt>
<dd>
<p>Returns TEXT value that indicates the operating system user name under which the Oracle Database server is running.</p>
</dd>
<dt>INSTNAME</dt>
<dd>
<p>Returns a TEXT value that is the instance name of the Oracle Database server.</p>
</dd>
<dt>PID</dt>
<dd>
<p>Returns a TEXT value that is the operating system id number of your Oracle Database session.</p>
</dd>
<dt>HOSTNAME</dt>
<dd>
<p>Returns a TEXT value that is the host name of the Oracle Database server.</p>
</dd>
<dt>PROGNAME</dt>
<dd>
<p>Returns a TEXT value that identifies the client that is connecting to the database.</p>
</dd>
<dt>CHOSTNAME</dt>
<dd>
<p>Returns a TEXT value that is the host name of the client.</p>
</dd>
<dt>COSUSER</dt>
<dd>
<p>Returns a TEXT value that is the operating system user name of the client.</p>
</dd>
<dt>TERMNAME</dt>
<dd>
<p>Returns a TEXT value that is the terminal name of the client.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3218"></a>Examples</p>
<div id="OLADM1947" class="example">
<p class="titleinexample"><a id="sthref3219"></a>Example 8-127 Obtaining the User ID</p>
<p>You can use the SYSINFO function to obtain the user of the current session.</p>
<pre dir="ltr">SHOW SYSINFO(USER)
</pre>
<p>produces output like the following.</p>
<pre dir="ltr">Scott
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78593"></a>
<div id="OLADM684" class="refsect1">
<h2 class="refsect1">SYSTEM</h2>
<p><a id="sthref3220"></a><a id="sthref3221"></a><a id="sthref3222"></a>The SYSTEM function identifies the platform on which Oracle OLAP is running.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3223"></a>Data Type</p>
<p>TEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3224"></a>Syntax</p>
<p class="synopsis">SYSTEM</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3225"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1948"></a>Relevance of the Platform</p>
<p>Because Oracle OLAP is incorporated in Oracle Database, the operating system on which it is running should not be an important factor in its behavior.</p>
</div>
<!-- class="refsubsect" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
All references to external files are made through directory objects, which are not platform specific</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3226"></a>Examples</p>
<div id="OLADM1949" class="example">
<p class="titleinexample"><a id="sthref3227"></a>Example 8-128 Displaying the Platform</p>
<p>Issuing the following SYSTEM statement on Intel NT returns the value <code dir="ltr">NTX86</code>.</p>
<pre dir="ltr">SHOW SYSTEM
</pre>
<pre dir="ltr">NTX86 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDEGHH"></a>
<div id="OLADM685" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SYSTIMESTAMP</h2>
<p>The <a id="sthref3228"></a>SYSTIMESTAMP function returns the current date and time as a TIMESTAMP_TZ value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3229"></a>Data Type</p>
<p>TIMESTAMP_TZ</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3230"></a>Syntax</p>
<p class="synopsis">SYSTIMESTAMP</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3231"></a>Examples</p>
<div id="OLADM1950" class="example">
<p class="titleinexample"><a id="sthref3232"></a>Example 8-129 Retrieving the current date and time as a TIMESTAMP value.</p>
<pre dir="ltr">SHOW systimestamp
26-APR-07 02.18.47.030587 PM -04:00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78598"></a>
<div id="OLADM686" class="refsect1">
<h2 class="refsect1">TALLY</h2>
<p><a id="sthref3233"></a><a id="sthref3234"></a><a id="sthref3235"></a>The TALLY function counts the number of values of a dimension that correspond to each value of one or more related dimensions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3236"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3237"></a>Syntax</p>
<p class="synopsis">TALLY(<span class="italic">dimension&nbsp;</span>[<span class="italic">related-dimensions</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3238"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>A dimension whose values are to be counted. When you specify <span class="italic">related-dimensions,</span> TALLY counts the number of values of <span class="italic">dimension</span> that correspond to each value of a single related dimension, or to each combination of values of two or more related dimensions. When you do not specify <span class="italic">related-dimensions,</span> TALLY counts the number of values in the dimension. Only values in the current status of <span class="italic">dimension</span> are counted.</p>
</dd>
<dt><span class="italic">related-dimensions</span></dt>
<dd>
<p>One or more related dimensions for the results. These must be related to <span class="italic">dimension.</span> Alternatively, you can specify the name of the relation instead of the dimension name which enables you to choose which relation is used when there are multiple relations between dimensions. When no <span class="italic">related-dimensions</span> are specified, TALLY returns the total number of values in the current status of <span class="italic">dimension.</span></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3239"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1951"></a>TALLY with NA</p>
<p>TALLY returns <code dir="ltr">NA</code> for any <span class="italic">related-dimension</span> position that has no <span class="italic">dimension</span> values corresponding to it.</p>
<p class="subhead2"><a id="OLADM1952"></a>TALLY with DWMQY Dimensions</p>
<p>When <span class="italic">expression</span> is dimensioned by a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR, you can specify any other dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR as a <span class="italic">related-dimension.</span> Oracle OLAP uses the implicit relation between the dimensions. To control the mapping of one DAY, WEEK, MONTH, QUARTER, or YEAR dimension to another (for example, from weeks to months), you can define an explicit relation between the two dimensions and specify the name of the relation as the <span class="italic">related-dimension</span> argument to the TALLY function.</p>
<p>For each time period in the related dimension, Oracle OLAP tallies all the source time periods that end in the target time period. This method is used regardless of which dimension has the more aggregate time periods.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3240"></a>Examples</p>
<div id="OLADM1953" class="example">
<p class="titleinexample"><a id="sthref3241"></a>Example 8-130 Breaking Out TALLY Results</p>
<p>Here you use TALLY to determine how many products are produced by each division. The <code dir="ltr">division.product</code> relation records the division to which each product belongs. The following is a report of <code dir="ltr">division.product</code>.</p>
<pre dir="ltr">PRODUCT          DIVISION.PRODUCT
---------------------------------
Tents          Camping
Canoes         Camping
Racquets       Sporting
Sportswear     Clothing
Footwear       Clothing
</pre>
<p>The following statement includes TALLY to present the number of products produced by each division.</p>
<pre dir="ltr">REPORT HEADING &#39;Products&#39; TALLY(product, division)
</pre>
<p>The statement produces this report.</p>
<pre dir="ltr">DIVISION        Products
-------------------------
Camping                 2
Sporting                1
Clothing                2
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78603"></a>
<div id="OLADM687" class="refsect1">
<h2 class="refsect1">TAN</h2>
<p><a id="sthref3242"></a><a id="sthref3243"></a>The TAN function calculates the tangent of an angle expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3244"></a>Return Value</p>
<p>NUMBER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3245"></a>Syntax</p>
<p class="synopsis">TAN(<span class="italic">expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3246"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>A numeric expression that contains an angle value, which is specified in radians.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3247"></a>Examples</p>
<div id="OLADM1954" class="example">
<p class="titleinexample"><a id="sthref3248"></a>Example 8-131 Calculating the Tangent of an Angle</p>
<p>This example calculates the tangent of an angle of <code dir="ltr">1</code> radian. The statements</p>
<pre dir="ltr">DECIMALS = 5
SHOW TAN(1)
</pre>
<p>produce the following result.</p>
<pre dir="ltr">1.55741
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78608"></a>
<div id="OLADM688" class="refsect1">
<h2 class="refsect1">TANH</h2>
<p><a id="sthref3249"></a><a id="sthref3250"></a><a id="sthref3251"></a>The TANH function calculates the hyperbolic tangent of an angle expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3252"></a>Return Value</p>
<p>NUMBER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3253"></a>Syntax</p>
<p class="synopsis">TANH(<span class="italic">expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3254"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>A numeric expression that contains an angle value, which is specified in radians.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3255"></a>Examples</p>
<div id="OLADM1955" class="example">
<p class="titleinexample"><a id="sthref3256"></a>Example 8-132 Calculating the Hyperbolic Tangent of an Angle</p>
<p>This example calculates the hyperbolic tangent of an angle of <code dir="ltr">1</code> radian. The statements</p>
<pre dir="ltr">DECIMALS = 5
SHOW TANH(1)
</pre>
<p>produce the following result.</p>
<pre dir="ltr">0.76159
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78613"></a>
<div id="OLADM689" class="refsect1">
<h2 class="refsect1">TCONVERT</h2>
<p><a id="sthref3257"></a><a id="sthref3258"></a><a id="sthref3259"></a>The TCONVERT function converts time-series data from one dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR to another dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR. You can specify an aggregation method or an allocation method to use in the conversion.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
You can only use this function with dimensions of type DAY, WEEK, MONTH, QUARTER, or YEAR.You can<span class="italic">not</span> use this function for time dimensions that are implemented as hierarchical dimensions of type TEXT.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3260"></a>Return Value</p>
<p>The value returned by the TCONVERT function depends on the type of conversion you specify and the type of the dimension being converted.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3261"></a>Syntax</p>
<p class="synopsis">TCONVERT(<span class="italic">expression&nbsp;time-dimension&nbsp;method&nbsp;</span>[<span class="italic">method</span>])</p>
<p>where the syntax for <span class="syntaxinlineitalic">method</span> varies by method type:</p>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="syntaxinline">SUM|AVERAGE|LAST&nbsp;[BY&nbsp;PERIOD|BY&nbsp;DAY]&nbsp;[STATUS|NOSTATUS]</span><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="syntaxinline">SPLIT|REPEAT|INTERPOLATE&nbsp;[BY&nbsp;PERIOD|BY&nbsp;DAY]</span></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3262"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>An expression whose values you want to convert. <span class="italic">Expression</span> must be dimensioned by a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR. This dimension is referred to as the <span class="italic">source</span> dimension. Usually <span class="italic">expression</span> is numeric, but with some conversion methods you can also convert text data. See <a href="#i79193">&#34;Converting Text Data&#34;</a>.</p>
</dd>
<dt><span class="italic">time-dimension</span></dt>
<dd>
<p>The DAY, WEEK, MONTH, QUARTER, or YEAR dimension to which you want to convert the <span class="italic">expression.</span> This dimension is referred to as the <span class="italic">target</span> dimension.</p>
</dd>
<dt><span class="italic">method</span></dt>
<dd>
<p>The method to use for converting data from the source dimension to the target dimension. You can specify an aggregation method or an allocation method:</p>
</dd>
</dl>
<ul>
<li>
<p>Aggregation methods are SUM, AVERAGE, and LAST. They are typically used to convert data from smaller time periods to larger time periods (for example, months to years).</p>
</li>
<li>
<p>Allocation methods are SPLIT, REPEAT, and INTERPOLATE. They are typically used to convert data from larger to smaller time periods (for example, years to quarters). The allocation methods all use the full default status of the source dimension to determine the periods that contribute to the allocation.</p>
</li>
</ul>
<p>Except for a case in which the source dimension and target dimension have overlapping periods of equal length (as with a calendar year and a fiscal year), you can specify both an aggregation method and an allocation method. See <a href="#i79203">&#34;Compatible Aggregation and Allocation Methods&#34;</a> and <a href="#i79210">&#34;Using Both Aggregation and Allocation&#34;</a>.</p>
<p>For all methods, results are calculated for the values in the current status of the target dimension.</p>
<p>The results you obtain depend on the method you specify and on whether you convert data between dimensions with periods of equal length or unequal length. See <a href="#i79210">&#34;Using Both Aggregation and Allocation&#34;</a>, <a href="#CACBEIBD">&#34;Overlapping Periods of Equal Length&#34;</a>, and <a href="#i79251">&#34;Substituting a Compatible Method&#34;</a>.</p>
<dl>
<dt>SUM [BY PERIOD]</dt>
<dd>
<p>Aggregates data to a target period by totaling the data of the contributing source periods. For each target period, SUM BY PERIOD returns the total for all the source periods that end in the target period. SUM uses the implicit relation between the source and target dimensions.</p>
</dd>
<dt>SUM BY DAY</dt>
<dd>
<p>Weights each source value according to the portion of target days it represents. For each target period, SUM BY DAY multiplies each contributing source period value by a weighting factor that has this form where <span class="italic">source-days-in-target</span> is the Number of <span class="italic">source-period days</span> that actually fall in target period and total-days-in-period is the total number of days in source period:</p>
<p class="synopsis"><span class="italic">source-days-in-target</span> / <span class="italic">total-days-in-period</span></p>
<p>SUM BY DAY then returns the total of these weighted source values. When you use SUM BY DAY, the value of an individual source period may be apportioned across adjacent target periods.</p>
<p>For example, suppose you convert weekly data to monthly data. When three days of a week fall in January and four fall in February, then SUM BY DAY adds <code dir="ltr">3/7</code> of the data for that week to the January total and <code dir="ltr">4/7</code> to the February total. In contrast, SUM BY PERIOD adds the entire data value for the week to the February total (because the week ends in February).</p>
<p>As another example, suppose you want to convert calendar year data to a fiscal year ending in June. Calendar year 1996 (<code dir="ltr">Cal96</code>) is the only calendar year that ends in fiscal year 1997 (<code dir="ltr">Fy97</code>). The SUM BY PERIOD method assigns the value for <code dir="ltr">Cal96</code> to <code dir="ltr">Fy97</code>. In contrast, SUM BY DAY apportions the <code dir="ltr">Cal96</code> value to the fiscal years <code dir="ltr">Fy96</code> and <code dir="ltr">Fy97</code>, according to the number of calendar days that fall in each fiscal year. Of the 366 days of <code dir="ltr">Cal96</code>, 182 days (January&nbsp;1 - June&nbsp;30) fall in <code dir="ltr">Fy96</code> and 184 days (July&nbsp;1 - December&nbsp;31) fall in <code dir="ltr">Fy97</code>. Therefore, for the <code dir="ltr">CAL96</code> data, SUM&nbsp;BY&nbsp;DAY uses a weighting factor of <code dir="ltr">182/366</code> for <code dir="ltr">Fy96</code> and a factor of <code dir="ltr">184/366</code> for <code dir="ltr">Fy97</code>.</p>
</dd>
<dt>AVERAGE [BY PERIOD]</dt>
<dd>
<p>Aggregates data to a target period by averaging the data of the contributing source periods. For each target period, AVERAGE BY PERIOD adds up the data from all the source periods that end within the target period and divides this total by the number of source periods. AVERAGE BY PERIOD uses the implicit relation between the two time dimensions.</p>
</dd>
<dt>AVERAGE BY DAY</dt>
<dd>
<p>Weights the value of each contributing source period by the portion of target days it represents. For each target period, AVERAGE BY DAY multiplies the value of each source period by the number of days of that source period that actually fall within the target period. The average is then calculated by adding these weighted source values and dividing by the total number of days in the target period. When you use AVERAGE BY DAY, the value of a single source period may be apportioned across adjacent target periods.</p>
</dd>
<dt>LAST [BY PERIOD]</dt>
<dd>
<p>For each target period, LAST BY PERIOD returns the data value from the last source period that ends within the target period. It uses the implicit relation between the source and target dimensions.</p>
</dd>
<dt>LAST BY DAY</dt>
<dd>
<p>Has the same effect as LAST BY PERIOD, provided you are converting data from smaller periods to larger periods. See <a href="#i79251">&#34;Substituting a Compatible Method&#34;</a>.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Indicates that the current status of the source dimension is used. It is the default for the SUM and AVERAGE methods.</p>
</dd>
<dt>NOSTATUS</dt>
<dd>
<p>Indicates that the full default status of the source dimension is used. It is the default for the LAST method.</p>
</dd>
<dt>SPLIT [BY PERIOD]</dt>
<dd>
<p>Allocates data to target periods by splitting the data from the source periods. SPLIT&nbsp;BY&nbsp;PERIOD divides a source value evenly among the target periods that end in that source period. SPLIT BY PERIOD uses the implicit relation between the two DAY, WEEK, MONTH, QUARTER, or YEAR dimensions.</p>
</dd>
<dt>SPLIT BY DAY</dt>
<dd>
<p>Weights each source value according to the portion of target days it represents. For each target period, SPLIT BY DAY multiplies each contributing source period value by a weighting factor that has this form where <span class="italic">target-days-in-source</span> is the Number of target-period days that actually fall in source period and <span class="italic">total-period-days</span> is the total number of days in source period:</p>
<p class="synopsis"><span class="italic">target-days-in-source</span> / <span class="italic">total-period-days</span></p>
<p>SPLIT BY DAY then returns the total of these weighted source values. When you use SPLIT BY DAY, the value of an individual source period may be apportioned across adjacent target periods.</p>
</dd>
<dt>REPEAT</dt>
<dd>
<p>For each target period, REPEAT returns the value of a source period. The target periods are the periods that end within the source period. REPEAT uses the implicit relation between the source and target dimensions. REPEAT BY DAY has the same effect as REPEAT BY PERIOD, provided you are converting data from larger time periods to smaller time periods. See <a href="#i79251">&#34;Substituting a Compatible Method&#34;</a>.</p>
</dd>
<dt>INTERPOLATE [BY PERIOD]</dt>
<dd>
<p>The INTERPOLATE method allocates data to target periods by first calculating the difference between the values of the current and previous source periods, and then splitting the result incrementally over the target periods. INTERPOLATE divides the difference between the current and previous source period values by the number of target periods that end in the source period, and it increments each target period by this amount.</p>
</dd>
<dt>INTERPOLATE BY DAY</dt>
<dd>
<p>For each target period, adds the value of the previous source period to a value that is calculated as follows where <span class="italic">end-days</span> is the number of days from end of previous source period to end of current target period and <span class="italic">period-days</span> is the total number of days in current source period:</p>
<p class="synopsis">(<span class="italic">end-days</span> / <span class="italic">period-days</span>) * (<span class="italic">current-source-value</span> - <span class="italic">previous-source-value</span>)</p>
<p>When a target period has days that fall in multiple source periods, a similar calculation is made for each source period.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3263"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1956"></a>Dimensions of the Result Returned by TCONVERT</p>
<p>The results returned by TCONVERT are dimensioned by the target DAY, WEEK, MONTH, QUARTER, or YEAR dimension and by all of <span class="italic">expression</span> dimensions that are not DAY, WEEK, MONTH, QUARTER, or YEAR dimensions<span class="italic">.</span></p>
<p class="subhead2"><a id="OLADM1957"></a>Status Used with Allocation</p>
<p>The STATUS and NOSTATUS keywords have no effect with the allocation methods. The allocation methods always use the full default status of the source dimension to determine the contributing periods.</p>
<p class="subhead2"><a id="i79203"></a><a id="OLADM1958"></a>Compatible Aggregation and Allocation Methods</p>
<p>Except for a case in which the source dimension and the target dimension have overlapping periods of equal length, you can specify both an aggregation method and an allocation method. However, the two methods must be compatible. <a href="#g1012008">Table 8-15, &#34;Compatible Aggregation and Allocation Methods&#34;</a> shows the compatible methods.</p>
<div id="OLADM1959" class="tblformal">
<p class="titleintable"><a id="sthref3264"></a><a id="g1012008"></a>Table 8-15 Compatible Aggregation and Allocation Methods</p>
<table class="cellalignment3618" title="Compatible Aggregation and Allocation Methods" summary="This table outlines allocation methods that are compatible with various aggregation methods." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t84">Aggregation</th>
<th class="cellalignment3616" id="r1c2-t84">Compatible Allocation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t84" headers="r1c1-t84">
<p>SUM</p>
</td>
<td class="cellalignment3617" headers="r2c1-t84 r1c2-t84">
<p>SPLIT</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t84" headers="r1c1-t84">
<p>AVERAGE</p>
</td>
<td class="cellalignment3617" headers="r3c1-t84 r1c2-t84">
<p>REPEAT</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t84" headers="r1c1-t84">
<p>LAST</p>
</td>
<td class="cellalignment3617" headers="r4c1-t84 r1c2-t84">
<p>INTERPOLATE</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>When you specify both an aggregation method and an allocation method, you can specify BY PERIOD or BY DAY with either method. When you specify BY PERIOD (explicitly or by default) for one method and BY DAY for the other method, BY DAY takes precedence.</p>
<p class="subhead2"><a id="i79210"></a><a id="OLADM1960"></a>Using Both Aggregation and Allocation</p>
<p>When you specify both an aggregation method and a compatible allocation method, Oracle OLAP handles this as follows:</p>
<ul>
<li>
<p>When you convert data from smaller periods to larger periods, Oracle OLAP uses the aggregation method (with BY DAY, if specified for either method).</p>
</li>
<li>
<p>When you convert data from larger periods to smaller periods, Oracle OLAP uses the allocation method (with BY DAY, if specified for either method).</p>
</li>
<li>
<p>When you convert data between dimensions that have non-overlapping periods of equal length, such as a quarter ending in March and a quarter ending in June, the results of the aggregation and allocation methods are identical.</p>
</li>
</ul>
<p class="subhead2"><a id="CACBEIBD"></a><a id="OLADM1961"></a>Overlapping Periods of Equal Length</p>
<p>When you convert data between two dimensions of type DAY, WEEK, MONTH, QUARTER, or YEAR that have overlapping periods of equal length, such as a calendar year and a fiscal year, or a quarter ending in March and a quarter ending in April, you must specify either an aggregation method or allocation method, but not both. For these dimensions, the compatible aggregation and allocation methods may yield different results.</p>
<p>For example, when you convert data from a calendar year dimension to a fiscal year dimension that ends in June, the SUM and SPLIT methods return different results:</p>
<ul>
<li>
<p>The SUM method totals up the data from the source periods that end in the target period. Because the calendar year 1996 ends in fiscal year 1997, the SUM method assigns the value for calendar year 1996 to fiscal year 1997.</p>
</li>
<li>
<p>The SPLIT method allocates a source data value to the target periods that end in the source period. Because the fiscal year 1996 ends in calendar year 1996, the SPLIT method assigns the value for calendar year 1996 to fiscal year 1996.</p>
</li>
</ul>
<p class="subhead2"><a id="i79251"></a><a id="OLADM1962"></a>Substituting a Compatible Method</p>
<p>When you specify a single conversion method, and you use an aggregation method to convert data from a larger period to a smaller period (for example, from months to weeks) Oracle OLAP automatically uses the compatible allocation method instead of the specified aggregation method. Similarly, when you use an allocation method to convert data from a smaller period to a larger period, Oracle OLAP automatically uses the compatible aggregation method. See <a href="#i79203">&#34;Compatible Aggregation and Allocation Methods&#34;</a>.</p>
<p class="subhead2"><a id="OLADM1963"></a>Data Type of the Result</p>
<p>When possible, TCONVERT returns results that have the same data type as <span class="italic">expression.</span> When <span class="italic">expression</span> is DECIMAL, the results are always DECIMAL. When <span class="italic">expression</span> is INTEGER, the results are INTEGER when the required calculations do not involve division. For example, when two dimensions are <span class="italic">aligned</span> (that is, they have the same phase and are based on the same periods, such as a calendar year dimension and a quarter dimension ending in December), the result is INTEGER when you use the REPEAT method to convert an INTEGER <span class="italic">expression</span> from larger periods to smaller periods. Similarly, the result is INTEGER when you use the SUM or LAST method to convert the <span class="italic">expression</span> from smaller to larger periods.</p>
<p class="subhead2"><a id="i79193"></a><a id="OLADM1964"></a>Converting Text Data</p>
<p>You can also use TCONVERT to convert the values of a text expression when no numeric calculations are needed for the conversion. For aligned dimensions, for example, you can use the LAST method to convert text values from smaller periods to larger periods, and you can use the REPEAT method to convert text values from larger periods to smaller periods. You can also use the LAST and REPEAT methods to convert text data between dimensions that have periods of equal length. When you attempt to convert a text expression with a method that requires numeric calculations, you receive an error message.</p>
<p class="subhead2"><a id="OLADM1965"></a>Methods for Financial Data</p>
<p>When you work with financial data, you can use an appropriate conversion method for each type of data. <a href="#g1011968">Table 8-16, &#34;Examples of Conversion Methods for Different Types of Financial Data&#34;</a> gives some examples.</p>
<div id="OLADM1966" class="tblformal">
<p class="titleintable"><a id="sthref3265"></a><a id="g1011968"></a>Table 8-16 Examples of Conversion Methods for Different Types of Financial Data</p>
<table class="cellalignment3618" title="Examples of Conversion Methods for Different Types of Financial Data" summary="This table provides outlines conversion methods that are frequently used for different types of financial data." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t85">Type of Financial Data</th>
<th class="cellalignment3616" id="r1c2-t85">Conversion</th>
<th class="cellalignment3616" id="r1c3-t85">Conversion Method</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t85" headers="r1c1-t85">
<p>Revenue or expenses</p>
</td>
<td class="cellalignment3617" headers="r2c1-t85 r1c2-t85">
<p>Month to year</p>
</td>
<td class="cellalignment3617" headers="r2c1-t85 r1c3-t85">
<p>SUM</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t85" headers="r1c1-t85">
<p>Stock quotations</p>
</td>
<td class="cellalignment3617" headers="r3c1-t85 r1c2-t85">
<p>Day to quarter</p>
</td>
<td class="cellalignment3617" headers="r3c1-t85 r1c3-t85">
<p>AVERAGE</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t85" headers="r1c1-t85">
<p>Balance sheet items</p>
</td>
<td class="cellalignment3617" headers="r4c1-t85 r1c2-t85">
<p>Month to quarter</p>
</td>
<td class="cellalignment3617" headers="r4c1-t85 r1c3-t85">
<p>LAST</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t85" headers="r1c1-t85">
<p>Quarterly tax payment</p>
</td>
<td class="cellalignment3617" headers="r5c1-t85 r1c2-t85">
<p>Year to quarter</p>
</td>
<td class="cellalignment3617" headers="r5c1-t85 r1c3-t85">
<p>SPLIT BY PERIOD</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t85" headers="r1c1-t85">
<p>Money supply</p>
</td>
<td class="cellalignment3617" headers="r6c1-t85 r1c2-t85">
<p>Year to quarter</p>
</td>
<td class="cellalignment3617" headers="r6c1-t85 r1c3-t85">
<p>INTERPOLATE</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<p class="subhead2"><a id="OLADM1967"></a>How TCONVERT Handles NA Values</p>
<p>TCONVERT is affected by the NASKIP option. When NASKIP is set to <code dir="ltr">NO</code>, TCONVERT returns an <code dir="ltr">NA</code> value for any target period that receives contributions from a source period with an <code dir="ltr">NA</code> value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3266"></a>Examples</p>
<div id="OLADM1968" class="example">
<p class="titleinexample"><a id="sthref3267"></a>Example 8-133 Splitting Data Across Quarters</p>
<p>This example shows the effects of using the SPLIT method and the SPLIT BY DAY method to allocate an annual budget revenue figure of $120,000 across the quarters of the year 1996. An existing <code dir="ltr">year</code> dimension is the source dimension and an existing <code dir="ltr">quarter</code> dimension is the target dimension.</p>
<p>The following statements</p>
<pre dir="ltr">DEFINE budget.revenue DECIMAL &lt;year&gt;
budget.revenue(year &#39;Yr96&#39;) = 120000
LIMIT quarter TO year &#39;Yr96&#39;
REPORT W 12 HEADING &#39;Split Evenly&#39; -
   TCONVERT(budget.revenue quarter SPLIT) -
   W 12 HEADING &#39;Split by Day&#39; -
   TCONVERT(budget.revenue quarter Split by day)
</pre>
<p>produce this report.</p>
<pre dir="ltr">QUARTER        Split Evenly Split by Day
-------------- ------------ ------------
Q1.96             30,000.00    29,836.07
Q2.96             30,000.00    29,836.07
Q3.96             30,000.00    30,163.93
Q4.96             30,000.00    30,163.93
</pre></div>
<!-- class="example" -->
<div id="OLADM1969" class="example">
<p class="titleinexample"><a id="sthref3268"></a>Example 8-134 Aggregating Weekly Data to Monthly Using TCONVERT</p>
<p>This example aggregates weekly data to monthly data. First, define a week dimension named <code dir="ltr">week</code> and add weeks that include the dates January&nbsp;1,&nbsp;1996 and June&nbsp;30,&nbsp;1996 (Oracle OLAP automatically adds the intervening weeks).</p>
<pre dir="ltr">DEFINE week DIMENSION WEEK
MAINTAIN week ADD &#39;01Jan96&#39; &#39;30Jun96&#39;
</pre>
<p>Next, define a variable named <code dir="ltr">weekvar</code>, dimensioned by <code dir="ltr">week</code>, and assign a value of <code dir="ltr">7</code> to each week.</p>
<pre dir="ltr">DEFINE weekvar DECIMAL &lt;week&gt;
weekvar = 7
</pre>
<p>The following statements show that December 31, 1995 is the beginning date of the first week for which <code dir="ltr">weekvar</code> contains non-<code dir="ltr">NA</code> data and that July&nbsp;6,&nbsp;1996 is the ending date of the final week for which <code dir="ltr">weekvar</code> contains non-<code dir="ltr">NA</code> data.</p>
<pre dir="ltr">SHOW BEGINDATE(weekvar)
SHOW ENDDATE(weekvar)
</pre>
<p>The statements produce this output.</p>
<pre dir="ltr">31Dec95
06Jul96
</pre>
<p>With these beginning and ending dates, when the data is converted to monthly data, it is aggregated over the months <code dir="ltr">Dec95</code> through <code dir="ltr">Jul96</code>. The following statements show the effects of using the SUM method and the SUM BY DAY method to convert the weekly <code dir="ltr">weekvar</code> data to monthly data.</p>
<pre dir="ltr">LIMIT month TO &#39;Jan96&#39; TO &#39;Jul96&#39;
REPORT HEADING &#39;Sum&#39; TCONVERT(weekvar month SUM) -
   HEADING &#39;Sum by Day&#39; -
   TCONVERT(weekvar month SUM BY day)
</pre>
<p>These statements produce the following report.</p>
<pre dir="ltr">MONTH              Sum    Sum by Day
-------------- ---------- ----------
Jan96               28.00      31.00
Feb96               28.00      29.00
Mar96               35.00      31.00
Apr96               28.00      30.00
May96               28.00      31.00
Jun96               35.00      30.00
Jul96                7.00       6.00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78623"></a>
<div id="OLADM690" class="refsect1">
<h2 class="refsect1">TEXTFILL</h2>
<p><a id="sthref3269"></a>The TEXTFILL function reformats a text value to fit compactly into lines of a specified width, regardless of its current format. TEXTFILL is commonly used to reformat text with an unnecessarily ragged right margin or with a bad line width.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
TEXTFILL joins lines of text while reformatting, whereas ROW and REPORT reformat without joining lines. See <a href="#CACGAGHB">Example 8-135, &#34;The Effects of TEXTFILL on ROW&#34;</a>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3270"></a>Return Value</p>
<p>TEXT or NTEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3271"></a>Syntax</p>
<p class="synopsis">TEXTFILL(<span class="italic">text-expression</span>,&nbsp;<span class="italic">width</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3272"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>A text expression to be reformatted to the specified width, regardless of the current format of the data. When you specify a TEXT expression, the return value is TEXT. When you specify an NTEXT expression, the return value is NTEXT.</p>
</dd>
<dt><span class="italic">width</span></dt>
<dd>
<p>The desired width of the reformatted data, entered as an <code dir="ltr">INTEGER</code> value from <code dir="ltr">1</code>&nbsp;to&nbsp;<code dir="ltr">132</code>.</p>
<p>In a structured report, TEXTFILL reformats <span class="italic">text-expression</span> to the width you specify if that width is less than the width of the report column. When <span class="italic">width</span> is greater than the column width, it is ignored by TEXTFILL, and the expression is reformatted to the width of the column.</p>
<p>TEXTFILL fits as many words of <span class="italic">text-expression</span> as it can onto one line, placing just one space between words and removing extra spaces between words. When a word is longer than <span class="italic">width,</span> TEXTFILL breaks it across two or more lines. In this case there may be extra spaces at the end of lines.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3273"></a>Examples</p>
<div id="OLADM1970" class="example">
<p class="titleinexample"><a id="CACGAGHB"></a>Example 8-135 The Effects of TEXTFILL on ROW</p>
<p>The following example shows the effect of TEXTFILL on a ROW command, using the nicely formatted text variable <code dir="ltr">textvar</code>.</p>
<p>The statement</p>
<pre dir="ltr">SHOW textvar
</pre>
<p>produces the following output.</p>
<pre dir="ltr">You can use the following options to control the format of 
   your display.
 
   BMARGIN    Controls the bottom margin.
   COLWIDTH   Controls column width.
   COMMAS     Controls the use of commas in numbers.
   DECIMALS   Controls number of decimal places in numbers.
   LSIZE      Controls the maximum length of a line.
   NASPELL    Controls the spelling of NA values in output.
</pre>
<p>The ROW statement</p>
<pre dir="ltr">ROW W 50 textvar
</pre>
<p>produces the following output.</p>
<pre dir="ltr">You can use the following options to control the
format of your
display.
BMARGIN       Controls the bottom margin.
COLWIDTH      Controls column width.
COMMAS        Controls the use of commas in
numbers.
DECIMALS      Controls the number of decimal
places in numbers.
LSIZE         Controls the maximum length of a
line.
NASPELL       Controls the spelling of NA values
in output.
</pre>
<p>By contrast, the ROW statement with TEXTFILL</p>
<pre dir="ltr">ROW W 50 TEXTFILL(textvar, 50)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">You can use the following options to control the
format of your display. BMARGIN Controls the
bottom margin. COLWIDTH Controls column width.
COMMAS Controls the use of commas in numbers.
DECIMALS Controls the number of decimal places in
numbers. LSIZE Controls the maximum length of a 
line. NASPELL Controls the spelling of NA values
in output. 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCHGID"></a>
<div id="OLADM1971" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">TO_BINARY_DOUBLE</h2>
<p>The TO_BINARY_DOUBLE function <a id="sthref3274"></a><a id="sthref3275"></a><a id="sthref3276"></a>converts a text or numeric expression to a DECIMAL numeric expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3277"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3278"></a>Syntax</p>
<p class="synopsis">TO_BINARY_DOUBLE(<span class="italic">expr</span> [, <span class="italic">fmt</span> [, <span class="italic">nlsparam</span> ] ])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3279"></a>Parameters</p>
<dl>
<dt>expr</dt>
<dd>
<p>A text or numeric expression. When <span class="italic">expr</span> is a text expression, the function converts the following case-insensitive values to particular values:</p>
<ul>
<li>
<p><code dir="ltr">INF</code> to positive infinity</p>
</li>
<li>
<p><code dir="ltr">-INF</code> to negative infinity</p>
</li>
<li>
<p><code dir="ltr">NaN</code> to <code dir="ltr">NaN</code> (not a number)</p>
</li>
</ul>
</dd>
<dt><span class="italic">fmt</span></dt>
<dd>
<p>A text expression that specifies a number format model. This argument is valid only when <span class="italic">expr</span> is a text expression.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
&#34;Number Format Models&#34; in <a class="olink SQLRF00211" href="../SQLRF/sql_elements004.htm#SQLRF00211"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
<p>The default number format model uses the decimal and thousands group markers identified by NLS_NUMERIC_CHARACTERS.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use a floating-point number format element (F, f, D, or d) in a text expression.</div>
</dd>
<dt><span class="italic">nlsparams</span></dt>
<dd>
<p>A text expression that specifies how the function uses the thousands group marker, decimal marker, and currency symbols when converting a text expression. This argument is valid only when <span class="italic">expr</span> is a text expression. This expression contains one or more of the following parameters, separated by commas:</p>
<p class="synopsis">NLS_CURRENCY&nbsp;<span class="italic">symbol&nbsp;</span></p>
<p class="synopsis">NLS_ISO_CURRENCY&nbsp;<span class="italic">territory&nbsp;</span></p>
<p class="synopsis">NLS_NUMERIC_CHARACTERS&nbsp;<span class="italic">dg&nbsp;</span></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDJIIGJ"></a>
<div id="OLADM1972" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">TO_BINARY_FLOAT</h2>
<p>The TO_BINARY_FLOAT <a id="sthref3280"></a><a id="sthref3281"></a><a id="sthref3282"></a>function converts a text or numeric expression to a SHORTDECIMAL numeric expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3283"></a>Return Value</p>
<p>SHORTDECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3284"></a>Syntax</p>
<p class="synopsis">TO_BINARY_FLOAT(<span class="italic">expr</span> [, <span class="italic">fmt</span> [, <span class="italic">nlsparam</span> ] ])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3285"></a>Parameters</p>
<dl>
<dt>expr</dt>
<dd>
<p>A text or a numeric expression. When <span class="italic">expr</span> is a text expression, the function converts the following case-insensitive values to particular values:</p>
<ul>
<li>
<p><code dir="ltr">INF</code> to positive infinity</p>
</li>
<li>
<p><code dir="ltr">-INF</code> to negative infinity</p>
</li>
<li>
<p><code dir="ltr">NaN</code> to <code dir="ltr">NaN</code> (not a number)</p>
</li>
</ul>
</dd>
<dt><span class="italic">fmt</span></dt>
<dd>
<p>A text expression that specifies a number format model. This argument is valid only when <span class="italic">expr</span> is a text expression.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF00211" href="../SQLRF/sql_elements004.htm#SQLRF00211">&#34;Number Format Models&#34;</a> in <span class="italic">Oracle Database SQL Language Reference</span></div>
<p>The default number format model uses the decimal and thousands group markers identified by NLS_NUMERIC_CHARACTERS.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use a floating-point number format element (F, f, D, or d) in a text expression.</div>
</dd>
<dt><span class="italic">nlsparams</span></dt>
<dd>
<p>A text expression that specifies how the function uses the thousands group marker, decimal marker, and currency symbols when converting a text expression. This argument is valid only when <span class="italic">expr</span> is a text expression. This expression contains one or more of the following parameters, separated by commas:</p>
<p class="synopsis">NLS_CURRENCY&nbsp;<span class="italic">symbol&nbsp;</span></p>
<p class="synopsis">NLS_ISO_CURRENCY&nbsp;<span class="italic">territory&nbsp;</span></p>
<p class="synopsis">NLS_NUMERIC_CHARACTERS&nbsp;<span class="italic">dg&nbsp;</span></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78638"></a>
<div id="OLADM691" class="refsect1">
<h2 class="refsect1">TO_CHAR</h2>
<p><a id="sthref3286"></a>The TO_CHAR function converts a DATETIME, number, or NTEXT expression to a TEXT expression in a specified format. This function is typically used to format output data.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3287"></a>Return Value</p>
<p>TEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3288"></a>Syntax</p>
<p class="synopsis">TO_CHAR(<span class="italic">datetime-exp</span>,&nbsp;[<span class="italic">datetime-fmt</span>,]&nbsp;[<span class="italic">option&nbsp;setting</span>])</p>
<p><span class="bolditalic">or</span></p>
<p class="synopsis">TO_CHAR(<span class="italic">num-exp</span>,&nbsp;[<span class="italic">num-fmt</span>,]&nbsp;[<span class="italic">nlsparams</span>])</p>
<p><span class="bolditalic">or</span></p>
<p class="synopsis">TO_CHAR(<span class="italic">ntext-exp)</span></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3289"></a>Parameters</p>
<dl>
<dt><span class="italic">datetime-exp</span></dt>
<dd>
<p>A DATETIME expression to be converted to TEXT.</p>
</dd>
<dt><span class="italic">datetime-fmt</span></dt>
<dd>
<p>A text expression that identifies a datetime format template. This template specifies how the conversion from a DATETIME data type to TEXT should be performed. For information about datetime format templates, see <a href="dml_commands_1.htm#BABEFHFG">Table 9-4, &#34;Datetime Format Elements&#34;</a>. The default value of <span class="italic">datetime-fmt</span> is controlled by the NLS_DATE_FORMAT option.</p>
</dd>
<dt><span class="italic">option setting</span></dt>
<dd>
<p>An OLAP option (such as NLS_DATE_LANGUAGE) and its new setting, which temporarily overrides the setting currently in effect for the session. Typically, this option identifies the language that you want <span class="italic">datetime-exp</span> to be translated into. See <a href="#i79307">Example 8-138, &#34;Displaying the Current Date and Time in Spanish&#34;</a>.</p>
<p>Do not specify an option that set other options. For example, do not set NLS_DATE_LANGUAGE or NLS_TERRITORY; set NLS_DATE_LANGUAGE instead. While TO_CHAR saves and restores the current setting of the specified option so that it has a new value only for the duration of the statement, TO_CHAR cannot save and restore any side effects of changing that option. For example, NLS_TERRITORY controls the value of NLS_DATE_FORMAT, NLS_NUMERIC_CHARACTERS, NLS_CURRENCY, NLS_CALENDAR, and other options. When you change the value of NLS_TERRITORY in a call to TO_CHAR, all of these options are reset to their territory-appropriate default values twice: once when NLS_TERRITORY is set to its new value for the duration of the TO_CHAR statement, and again when the saved value of NLS_TERRITORY is restored.</p>
</dd>
<dt><span class="italic">num-exp</span></dt>
<dd>
<p>A numeric expression to be converted to TEXT.</p>
</dd>
<dt><span class="italic">num-fmt</span></dt>
<dd>
<p>A text expression that identifies a number format model. This model specifies how the conversion from a numeric data type (NUMBER, INTEGER, SHORTINTEGER, LONGINTEGER, DECIMAL, SHORTDECIMAL) to TEXT should be performed.</p>
<p>The default number format model uses the decimal and thousands group markers identified by NLS_NUMERIC_CHARACTERS.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF00211" href="../SQLRF/sql_elements004.htm#SQLRF00211">&#34;Number Format Models&#34;</a> in <span class="italic">Oracle Database SQL Language Reference</span></div>
</dd>
<dt><span class="italic">nlsparams</span></dt>
<dd>
<p>A text expression that specifies the thousands group marker, decimal marker, and currency symbols used in <span class="italic">num-exp</span>. This expression contains one or more of the following parameters, separated by commas:</p>
<p class="synopsis">NLS_CURRENCY&nbsp;<span class="italic">symbol&nbsp;</span></p>
<p class="synopsis">NLS_ISO_CURRENCY&nbsp;<span class="italic">territory&nbsp;</span></p>
<p class="synopsis">NLS_NUMERIC_CHARACTERS&nbsp;<span class="italic">dg&nbsp;</span></p>
</dd>
<dt><span class="italic">symbol</span></dt>
<dd>
<p>A text expression that specifies the local currency symbol. It can be no more than 10 characters.</p>
</dd>
<dt><span class="italic">territory</span></dt>
<dd>
<p>A text expression that identifies the territory whose ISO currency symbol is used.</p>
</dd>
<dt><span class="italic">dg</span></dt>
<dd>
<p>A text expression composed of two different, single-byte characters for the decimal marker (<code dir="ltr">d</code>) and thousands group marker (<code dir="ltr">g</code>).</p>
<p>These parameters override the default values specified by the NLS_CURRENCY, NLS_ISO_CURRENCY, and NLS_NUMERIC_CHARACTERS options.</p>
</dd>
<dt><span class="italic">ntext-exp</span></dt>
<dd>
<p>An NTEXT expression to be converted to TEXT. A conversion from NTEXT to TEXT can result in data loss when the NTEXT value cannot be represented in the database character set.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3290"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1973"></a>How TO_CHAR Handles Numerical Data Types</p>
<p>The TO_CHAR function converts INTEGER, SHORTINTEGER, LONGINTEGER, DECIMAL, and SHORTDECIMAL values to NUMBER before converting them to TEXT. Thus, TO_CHAR converts NUMBER values faster than other numeric data types.</p>
<p class="subhead2"><a id="OLADM1974"></a>Possible Effects of TO_CHAR Rounding</p>
<p>All number format models cause the number to be rounded to the specified number of significant digits. <a href="#i1007661">Table 8-17, &#34;Possible Effects of Rounding&#34;</a> identifies some effects of rounding.</p>
<div id="OLADM1975" class="tblformal">
<p class="titleintable"><a id="sthref3291"></a><a id="sthref3292"></a>Table 8-17 <a id="i1007661"></a><span class="bolditalic">Possible Effects of Rounding</span></p>
<table class="cellalignment3618" title="Possible Effects of Rounding" summary="This table describes possible effects of rounding various types of numerical values." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t92">IF&nbsp;<span class="italic">num-exp</span></th>
<th class="cellalignment3616" id="r1c2-t92">THEN&nbsp;the return value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t92" headers="r1c1-t92">
<p>has more significant digits to the left of the decimal place than are specified in the format,</p>
</td>
<td class="cellalignment3617" headers="r2c1-t92 r1c2-t92">
<p>appears as pound signs (<code dir="ltr">#</code>).</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t92" headers="r1c1-t92">
<p>is a very large positive value that cannot be represented in the specified format,</p>
</td>
<td class="cellalignment3617" headers="r3c1-t92 r1c2-t92">
<p>is a tilde (<code dir="ltr">~</code>).</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t92" headers="r1c1-t92">
<p>is a very small negative value that cannot be represented in the specified format,</p>
</td>
<td class="cellalignment3617" headers="r4c1-t92 r1c2-t92">
<p>is a negative sign followed by a tilde (<code dir="ltr">-~</code>).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3293"></a>Examples</p>
<div id="OLADM1976" class="example">
<p class="titleinexample"><a id="sthref3294"></a>Example 8-136 Converting a Date to CHAR</p>
<p>This statement converts today&#39;s date and specifies the format.</p>
<pre dir="ltr">SHOW TO_CHAR(SYSDATE, &#39;Month DD, YYYY HH24:MI:SS&#39;)
</pre>
<p>The specified date format allows the time to be displayed along with the date.</p>
<pre dir="ltr">November  30, 2000 10:01:29
</pre></div>
<!-- class="example" -->
<div id="OLADM1977" class="example">
<p class="titleinexample"><a id="sthref3295"></a>Example 8-137 Converting a Numerical Value to Text</p>
<p>This statement converts a number to text and specifies a space as the decimal marker and a period as the thousands group marker.</p>
<pre dir="ltr">SHOW TO_CHAR(1013.50, NA, NLS_NUMERIC_CHARACTERS &#39; .&#39;)
</pre>
<p>The value 1013.50 now appears like this:</p>
<pre dir="ltr">1.013 50
</pre></div>
<!-- class="example" -->
<div id="OLADM1978" class="example">
<p class="titleinexample"><a id="i79307"></a>Example 8-138 Displaying the Current Date and Time in Spanish</p>
<p>The following statements set the default language to Spanish and specify a new date format.</p>
<pre dir="ltr">NLS_DATE_LANGUAGE = &#39;spanish&#39;
NLS_DATE_FORMAT = &#39;Day: Month dd, yyyy HH:MI:SS am&#39;
</pre>
<p>The following statement displays the current date and time in Spanish.</p>
<pre dir="ltr">SHOW TO_CHAR(SYSDATE)
Viernes  : Diciembre  01, 2000 08:21:17 AM
</pre>
<p>The NLS_DATE_LANGUAGE option changes the language for the duration of the statement. The following statement displays the date and time in German.</p>
<pre dir="ltr">SHOW TO_CHAR(SYSDATE, NA, NLS_DATE_LANGUAGE &#39;german&#39;)
Freitag   : Dezember  01, 2000 08:26:00 AM 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78643"></a>
<div id="OLADM692" class="refsect1">
<h2 class="refsect1">TO_DATE</h2>
<p><a id="sthref3296"></a>The TO_DATE function converts a formatted TEXT or NTEXT expression to a DATETIME value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3297"></a>Return Value</p>
<p>DATETIME</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3298"></a>Syntax</p>
<p class="synopsis">TO_DATE(<span class="italic">text-exp</span>,&nbsp;[<span class="italic">fmt</span>,]&nbsp;[<span class="italic">option&nbsp;setting</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3299"></a>Parameters</p>
<dl>
<dt><span class="italic">text-exp</span></dt>
<dd>
<p>The text expression that contains a date to be converted. The expression can have the TEXT or NTEXT data type. A conversion from NTEXT can result in an incorrect result when the NTEXT value cannot be interpreted as a date.</p>
</dd>
<dt><span class="italic">fmt</span></dt>
<dd>
<p>A text expression that identifies a datetime format template. This template specifies how the conversion from text to DATETIME should be performed. For information about datetime format templates, see <a href="dml_commands_1.htm#BABEFHFG">Table 9-4, &#34;Datetime Format Elements&#34;</a>.</p>
</dd>
<dt><span class="italic">option setting</span></dt>
<dd>
<p>An OLAP option (such as NLS_DATE_LANGUAGE) and its new setting, which temporarily overrides the setting currently in effect for the session. Typically, this option identifies the language of <span class="italic">text-exp</span> when it is different from the session language. See <a href="#i79337">Example 8-140, &#34;Specifying a Default Language and a Date Format&#34;</a>.</p>
<p>Do not specify an option that sets other options. For example, do not set NLS_LANGUAGE or NLS_TERRITORY; set NLS_DATE_LANGUAGE instead. While TO_DATE saves and restores the current setting of the specified option so that it has a new value only for the duration of the statement, TO_DATE cannot save and restore any side effects of changing that option. For example, NLS_TERRITORY controls the value of NLS_DATE_FORMAT, NLS_NUMERIC_CHARACTERS, NLS_CURRENCY, NLS_CALENDAR, and other options. When you change the value of NLS_TERRITORY in a call to TO_DATE, all of these options are reset to their territory-appropriate default values twice: once when NLS_TERRITORY is set to its new value for the duration of the TO_DATE statement, and again when the saved value of NLS_TERRITORY is restored.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3300"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1979"></a>Capitalization</p>
<p>Capital letters in words, abbreviation, or Roman numerals in a format element produce corresponding capitalization in the return value. For example, the format element <code dir="ltr">DAY</code> produces <code dir="ltr">MONDAY</code>, <code dir="ltr">Day</code> produces <code dir="ltr">Monday</code>, and <code dir="ltr">day</code> produces <code dir="ltr">monday</code>.</p>
<p class="subhead2"><a id="OLADM1980"></a>Unrecognized Dates</p>
<p>When TO_DATE cannot construct a value with a valid DATE value using <span class="italic">fmt</span>, it returns an error. For example, when an alphanumeric character appears in <span class="italic">text-exp</span> where <span class="italic">fmt</span> indicates a punctuation character, then an error results.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3301"></a>Examples</p>
<div id="OLADM1981" class="example">
<p class="titleinexample"><a id="sthref3302"></a>Example 8-139 Converting Text Values to DATE Values</p>
<p>The following statement converts <code dir="ltr">January</code>&nbsp;<code dir="ltr">15,</code>&nbsp;<code dir="ltr">2002,</code>&nbsp;<code dir="ltr">11:00</code>&nbsp;<code dir="ltr">A.M.</code> to the default date format of <code dir="ltr">15JAN02</code>, and stores that value in a DATE variable named <code dir="ltr">bonusdate</code>.</p>
<pre dir="ltr">bonusdate = TO_DATE(&#39;January 15, 2002, 11:00 A.M.&#39;, -
   &#39;Month dd, YYYY, HH:MI A.M.&#39;)
</pre></div>
<!-- class="example" -->
<div id="OLADM1982" class="example">
<p class="titleinexample"><a id="i79337"></a>Example 8-140 Specifying a Default Language and a Date Format</p>
<p>The following statements set the default language to Spanish and specify a new date format. The NLS_DATE_LANGUAGE option, when used in the TO_DATE function, allows the American month name to be translated.</p>
<pre dir="ltr">NLS_DATE_FORMAT = &#39;Day: Month dd, yyyy HH:MI:SS am&#39;
NLS_DATE_LANGUAGE = &#39;spanish&#39;
SHOW TO_DATE(&#39;November 15, 2001&#39;, &#39;Month dd, yyyy&#39;, -
   NLS_DATE_LANGUAGE &#39;american&#39;)
</pre>
<p>The date is translated from American to Spanish and displayed in the new date format.</p>
<pre dir="ltr">Jueves   : Noviembre  15, 2001 12:00:00 AM 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBJGIB"></a>
<div id="OLADM693" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">TO_DSINTERVAL</h2>
<p>The <a id="sthref3303"></a><a id="sthref3304"></a>TO_DSINTERVAL function converts a character to a DSINTERVAL value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3305"></a>Return Value</p>
<p><code dir="ltr">DSINTERVAL</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3306"></a>Syntax</p>
<p class="synopsis">TO_DSINTERVAL(<span class="italic">char</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3307"></a><br/>
Parameters</p>
<dl>
<dt><span class="italic">char</span></dt>
<dd>
<p>Specifies the character string to be converted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78648"></a>
<div id="OLADM694" class="refsect1">
<h2 class="refsect1">TO_NCHAR</h2>
<p><a id="sthref3308"></a>The TO_NCHAR function converts a TEXT expression, date, or number to NTEXT in a specified format. This function is typically used to format output data.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3309"></a>Return Value</p>
<p>NTEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3310"></a>Syntax</p>
<p class="synopsis">TO_NCHAR(<span class="italic">text-exp)</span></p>
<p><span class="bolditalic">or</span></p>
<p class="synopsis">TO_NCHAR(<span class="italic">datetime-exp</span>,&nbsp;[<span class="italic">datetime-fmt</span>,]&nbsp;[<span class="italic">option&nbsp;setting</span>]</p>
<p><span class="bolditalic">or</span></p>
<p class="synopsis">TO_NCHAR(<span class="italic">num-exp</span>,&nbsp;[<span class="italic">num-fmt</span>,]&nbsp;[<span class="italic">nlsparams</span>]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3311"></a>Parameters</p>
<dl>
<dt><span class="italic">text-exp</span></dt>
<dd>
<p>A TEXT expression to be converted to NTEXT.</p>
</dd>
<dt><span class="italic">datetime-exp</span></dt>
<dd>
<p>A DATETIME expression to be converted to NTEXT.</p>
</dd>
<dt><span class="italic">datetime-fmt</span></dt>
<dd>
<p>A text expression that identifies a datetime format template. This template specifies how the conversion from a DATETIME data type to NTEXT should be performed. For information about datetime format templates, see <a href="dml_commands_1.htm#BABEFHFG">Table 9-4, &#34;Datetime Format Elements&#34;</a>. The default value of <span class="italic">datetime-fmt</span> is controlled by the NLS_DATE_FORMAT option.</p>
</dd>
<dt><span class="italic">option setting</span></dt>
<dd>
<p>An OLAP option (such as NLS_DATE_LANGUAGE) and its new setting, which temporarily overrides the setting currently in effect for the session. Typically, this option identifies the language that you want <span class="italic">datetime-exp</span> to be translated into. See <a href="#i79369">Example 8-143, &#34;Specifying the Default Language and a Date Format&#34;</a>.</p>
<p>Do not specify an option that sets other options. For example, do not set NLS_LANGUAGE or NLS_TERRITORY; set NLS_DATE_LANGUAGE instead.While TO_NCHAR saves and restores the current setting of the specified option so that it has a new value only for the duration of the statement, TO_NCHAR cannot save and restore any side effects of changing that option. For example, NLS_TERRITORY controls the value of NLS_DATE_FORMATE, NLS_NUMERIC_CHARACTERS, NLS_CURRENCY, NLS_CALENDAR, and other options. When you change the value of NLS_TERRITORY in a call to TO_NCHAR, all of these options are reset to their territory-appropriate default values twice: once when NLS_TERRITORY is set to its new value for the duration of the TO_NCHAR statement, and again when the saved value of NLS_TERRITORY is restored.</p>
</dd>
<dt><span class="italic">num-exp</span></dt>
<dd>
<p>A numeric expression to be converted to NTEXT.</p>
</dd>
<dt><span class="italic">num-fmt</span></dt>
<dd>
<p>A text expression that identifies a number format model. This model specifies how the conversion from a numeric data type (NUMBER, INTEGER, SHORTINTEGER, LONGINTEGER, DECIMAL, SHORTDECIMAL) to TEXT should be performed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF00211" href="../SQLRF/sql_elements004.htm#SQLRF00211">&#34;Number Format Models&#34;</a> in <span class="italic">Oracle Database SQL Language Reference</span></div>
<p>The default number format model uses the decimal and thousands group markers identified by NLS_NUMERIC_CHARACTERS option.</p>
</dd>
<dt><span class="italic">nlsparams</span></dt>
<dd>
<p>A text expression that specifies the thousands group marker, decimal marker, and currency symbols used in <span class="italic">num-exp</span>. This expression contains one or more of the following parameters, separated by commas:</p>
<p class="synopsis">NLS_CURRENCY&nbsp;<span class="italic">symbol&nbsp;</span></p>
<p class="synopsis">NLS_ISO_CURRENCY&nbsp;<span class="italic">territory&nbsp;</span></p>
<p class="synopsis">NLS_NUMERIC_CHARACTERS&nbsp;<span class="italic">dg&nbsp;</span></p>
</dd>
<dt><span class="italic">symbol</span></dt>
<dd>
<p>A text expression that specifies the local currency symbol. It can be no more than 10 characters.</p>
</dd>
<dt><span class="italic">territory</span></dt>
<dd>
<p>A text expression that identifies the territory whose ISO currency symbol is used.</p>
</dd>
<dt><span class="italic">dg</span></dt>
<dd>
<p>A text expression composed of two different, single-byte characters for the decimal marker (<code dir="ltr">d</code>) and thousands group marker (<code dir="ltr">g</code>).</p>
<p>These parameters override the default values specified by the NLS_CURRENCY, NLS_ISO_CURRENCY, and NLS_NUMERIC_CHARACTERS options.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3312"></a>Examples</p>
<div id="OLADM1983" class="example">
<p class="titleinexample"><a id="sthref3313"></a>Example 8-141 Date Conversion</p>
<p>This statement converts today&#39;s date and specifies the format.</p>
<pre dir="ltr">SHOW TO_NCHAR(SYSDATE, &#39;Month DD, YYYY HH24:MI:SS&#39;)
</pre>
<p>The specified date format allows the time to be displayed along with the date.</p>
<pre dir="ltr">November  30, 2000 10:01:29
</pre></div>
<!-- class="example" -->
<div id="OLADM1984" class="example">
<p class="titleinexample"><a id="sthref3314"></a>Example 8-142 Converting Numerical Data to NTEXT Data</p>
<p>This statement converts a number to NTEXT and specifies a space as the decimal marker and a period as the thousands group marker.</p>
<pre dir="ltr">SHOW TO_NCHAR(1013.50, NA, NLS_NUMERIC_CHARACTERS &#39; .&#39;)
</pre>
<p>The value 1013.50 now appears like this:</p>
<pre dir="ltr">1.013 50
</pre></div>
<!-- class="example" -->
<div id="OLADM1985" class="example">
<p class="titleinexample"><a id="i79369"></a>Example 8-143 Specifying the Default Language and a Date Format</p>
<p>The following statements set the default language to Spanish and specify a new date format.</p>
<pre dir="ltr">NLS_DATE_LANGUAGE = &#39;spanish&#39;
NLS_DATE_FORMAT = &#39;Day: Month dd, yyyy HH:MI:SS am&#39;
</pre>
<p>The following statement:</p>
<pre dir="ltr">SHOW TO_NCHAR(SYSDATE)
</pre>
<p>Displays the current date and time in Spanish:</p>
<pre dir="ltr">Viernes  : Diciembre  01, 2000 08:21:17 AM
</pre>
<p>The NLS_DATE_LANGUAGE option changes the language for the duration of the statement. The following statement</p>
<pre dir="ltr">SHOW TO_NCHAR(SYSDATE, NA, NLS_DATE_LANGUAGE &#39;german&#39;)
</pre>
<p>displays the date and time in German:</p>
<pre dir="ltr">Freitag   : Dezember  01, 2000 08:26:00 AM
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78653"></a>
<div id="OLADM695" class="refsect1">
<h2 class="refsect1">TO_NUMBER</h2>
<p><a id="sthref3315"></a>The TO_NUMBER function converts a formatted TEXT or NTEXT expression to a number. This function is typically used to convert the formatted numeric output of one application (which includes currency symbols, decimal markers, thousands group markers, and so forth) so that it can be used as input to another application.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3316"></a>Return Value</p>
<p>NUMBER. Negative return values contain a leading negative sign, and positive values contain a leading space, unless the format model contains the <code dir="ltr">MI</code>, <code dir="ltr">S</code>, or <code dir="ltr">PR</code> format elements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3317"></a>Syntax</p>
<p class="synopsis">TO_NUMBER(<span class="italic">text-exp</span>,&nbsp;[<span class="italic">fmt</span>,]&nbsp;[<span class="italic">nlsparams</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3318"></a>Parameters</p>
<dl>
<dt><span class="italic">text-exp</span></dt>
<dd>
<p>A text expression that contains a number to be converted. The expression can have the TEXT or NTEXT data type. A conversion from NTEXT can result in an incorrect result when the NTEXT value cannot be interpreted as a number.</p>
</dd>
<dt><span class="italic">fmt</span></dt>
<dd>
<p>A text expression that identifies a number format model. This model specifies how the conversion to NUMBER should be performed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF00211" href="../SQLRF/sql_elements004.htm#SQLRF00211">&#34;Number Format Models&#34;</a> in <span class="italic">Oracle Database SQL Language Reference</span></div>
<p>The default number format identifies a period (<code dir="ltr">.</code>) as the decimal marker and does not recognize any other symbol.</p>
</dd>
<dt><span class="italic">nlsparams</span></dt>
<dd>
<p>A text expression that specifies the thousands group marker, decimal marker, and currency symbols used in <span class="italic">text-exp</span>. This expression contains one or more of the following parameters, separated by commas:</p>
<p class="synopsis">NLS_CURRENCY&nbsp;<span class="italic">symbol&nbsp;</span></p>
<p class="synopsis">NLS_ISO_CURRENCY&nbsp;<span class="italic">territory&nbsp;</span></p>
<p class="synopsis">NLS_NUMERIC_CHARACTERS&nbsp;<span class="italic">dg&nbsp;</span></p>
</dd>
<dt><span class="italic">symbol</span></dt>
<dd>
<p>A text expression that specifies the local currency symbol. It can be no more than 10 characters.</p>
</dd>
<dt><span class="italic">territory</span></dt>
<dd>
<p>A text expression that identifies the territory whose ISO currency symbol is used.</p>
</dd>
<dt><span class="italic">dg</span></dt>
<dd>
<p>A text expression composed of two different, single-byte characters for the decimal marker (<code dir="ltr">d</code>) and thousands group marker (<code dir="ltr">g</code>).</p>
<p>These parameters override the default values specified by the NLS_CURRENCY, NLS_ISO_CURRENCY, and NLS_NUMERIC_CHARACTERS options. Refer to NLS Options for additional information.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3319"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1986"></a><span class="bold">Default Number Format Values</span></p>
<p>The values of some formats are determined by the value of <a href="dml_options.htm#CHDEHFCH">NLS_TERRITORY</a>.</p>
<p class="subhead2"><a id="OLADM1987"></a>Possible Effects of TO_NUMBER Rounding</p>
<p>All number format models cause the number to be rounded to the specified number of significant digits. <a href="#i1007661">Table 8-17, &#34;Possible Effects of Rounding&#34;</a> identifies some effects of rounding.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3320"></a>Examples</p>
<div id="OLADM1988" class="example">
<p class="titleinexample"><a id="sthref3321"></a>Example 8-144 Converting Text Data to Decimal Data</p>
<p>The following statements convert a text string to a DECIMAL data type in the current number format, which is American. The <span class="italic">text-exp</span> parameter is a text string in European format. The <span class="italic">fmt</span> parameter identifies the local currency symbol (<code dir="ltr">L</code>), the thousands group separator (<code dir="ltr">G</code>), and the decimal marker (<code dir="ltr">D</code>). The NLS_NUMERIC_CHARACTERS option identifies the characters used for the <code dir="ltr">G</code> and <code dir="ltr">D</code> formats in the <span class="italic">text-exp</span> parameter because they are different from the current setting for the session. In <span class="italic">text_exp</span>, <code dir="ltr">D</code> is a comma and <code dir="ltr">G</code> is a space.</p>
<pre dir="ltr">DEFINE money VARIABLE DECIMAL
money = TO_NUMBER(&#39;$94 567,00&#39;, &#39;L999G999D00&#39;, NLS_NUMERIC_CHARACTERS &#39;, &#39;)
SHOW money
</pre>
<p>The output of this statement is:</p>
<pre dir="ltr">94,567.00 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGJIAI"></a>
<div id="OLADM696" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">TO_TIMESTAMP</h2>
<p>The TO_TIMESTAMP function converts text data to a value of <code dir="ltr">TIMESTAMP</code> data type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3322"></a>Return Values</p>
<p>TIMESTAMP</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3323"></a>Syntax</p>
<p class="synopsis">TO_TIMESTAMP(<span class="italic">char-exp</span> [, <span class="italic">fmt</span> [ &#39;<span class="italic">nlsparam</span>&#39; ] ])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3324"></a>Parameters</p>
<dl>
<dt><span class="italic">char-exp</span></dt>
<dd>
<p>A text expression that you want to convert.</p>
</dd>
<dt>fmt</dt>
<dd>
<p>Specifies the datetime format template to be used to convert the text expression. See <a href="dml_commands_1.htm#BABEFHFG">Table 9-4, &#34;Datetime Format Elements&#34;</a> for more information about the datetime format template.</p>
<p>When you omit this argument, the function uses the default format of <code dir="ltr">TIMESTAMP</code> for the object.</p>
</dd>
<dt>nlsparam</dt>
<dd>
<p>Specifies the language in which month and day names and abbreviations are returned. This argument can have this form:</p>
<pre dir="ltr">&#39;NLS_DATE_LANGUAGE = <span class="italic">language</span>&#39; 
</pre>
<p>If you omit this argument, then this function uses the default date language for your session.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3325"></a>Examples</p>
<div id="OLADM1989" class="example">
<p class="titleinexample"><a id="sthref3326"></a>Example 8-145 Converting To and Extracting From Timestamp Data</p>
<pre dir="ltr">SHOW NLS_DATE_FORMAT
DD-MON-RR

SHOW TO_TIMESTAMP(&#39;10-SEP-0614:10:10:10.123000&#39; &#39;DD MON RR HH24:MI:SS.FF&#39;)
10-SEP-14 10.10.10.123 AM

SHOW TO_TIMESTAMP_TZ (&#39;2006-03-26 7:33:00 -4:00&#39;, &#39;YYYY-MM-DD HH:MI:SS TZH:TZM&#39;)
26-MAR-06 07.33.00 AM -04:00

DEFINE mytimestamp VARIABLE TIMESTAMP
DEFINE mytimezone VARIABLE TEXT
DEFINE mytimestamptz VARIABLE TIMESTAMP_TZ
mytimestamp = &#39;26-MAR-06&#39;
mytimezone = &#39;-04:00&#39;
mytimestamptz = FROM_TZ (mytimestamp mytimezone)
REPORT mytimestamptz
 
MYTIMESTAMPTZ
------------------------------
  26-MAR-06 12.00.00 AM -04:00
SHOW EXTRACT (TIMEZONE_HOUR FROM mytimestamptz)
-4.00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBEAFF"></a>
<div id="OLADM697" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">TO_TIMESTAMP_TZ</h2>
<p><a id="sthref3327"></a>The TO_TIMESTAMP_TZ function converts text data to a value with the <code dir="ltr">TIMESTAMP_TZ</code> data type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3328"></a>Return Value</p>
<p>TIMESTAMP_TZ</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3329"></a>Syntax</p>
<p class="synopsis">TO_TIMESTAMP_TZ (<span class="italic">char-exp</span> [, <span class="italic">fmt</span> [ &#39;nlsparam&#39; ] ])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3330"></a>Parameters</p>
<dl>
<dt><span class="italic">char-exp</span></dt>
<dd>
<p>A text expression that you wan to convert.</p>
</dd>
<dt>fmt</dt>
<dd>
<p>Specifies the datetime format template to be used to convert the text expression. See <a href="dml_commands_1.htm#BABEFHFG">Table 9-4, &#34;Datetime Format Elements&#34;</a> for more information about the datetime format template.</p>
<p>When you omit this argument, the function uses the default format of <code dir="ltr">TIMESTAMP_TZ</code> for the object.</p>
</dd>
<dt>nlsparam</dt>
<dd>
<p>Specifies the language in which month and day names and abbreviations are returned. This argument can have this form:</p>
<pre dir="ltr">&#39;NLS_DATE_LANGUAGE = <span class="italic">language</span>&#39; 
</pre>
<p>If you omit this argument, then this function uses the default date language for your session.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3331"></a>Examples</p>
<div id="OLADM1990" class="example">
<p class="titleinexample"><a id="sthref3332"></a>Example 8-146 Converting Text Data to TIMESTAMP_TZ DAta</p>
<pre dir="ltr">SHOW TO_TIMESTAMP_TZ (&#39;2006-03-26 7:33:00 -4:00&#39;, &#39;YYYY-MM-DD HH:MI:SS TZH:TZM&#39;)
26-MAR-06 07.33.00 AM -04:00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDEFDGG"></a>
<div id="OLADM698" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">TO_YMINTERVAL</h2>
<p>The <a id="sthref3333"></a><a id="sthref3334"></a>TO_YMINTERVAL function converts a character to a YMINTERVAL value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3335"></a>Return Value</p>
<p><code dir="ltr">YMINTERVAL</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3336"></a>Syntax</p>
<p class="synopsis">TO_YMINTERVAL(<span class="italic">char</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3337"></a><br/>
Parameters</p>
<dl>
<dt><span class="italic">char</span></dt>
<dd>
<p>Specifies the character string to be converted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78658"></a>
<div id="OLADM699" class="refsect1">
<h2 class="refsect1">TOD</h2>
<p><a id="sthref3338"></a><a id="sthref3339"></a>The TOD function returns the current time of day in the form <span class="italic">hh:mm:ss</span> using a 24-hour format.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3340"></a>Return Value</p>
<p>ID</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3341"></a>Syntax</p>
<p class="synopsis">TOD</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3342"></a>Examples</p>
<div id="OLADM1991" class="example">
<p class="titleinexample"><a id="sthref3343"></a>Example 8-147 Displaying the Current Time</p>
<p>The following statement sends the current time of day to the current outfile.</p>
<pre dir="ltr">show tod
</pre>
<p>This statement produces the following output.</p>
<pre dir="ltr">17:30:46
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78663"></a>
<div id="OLADM700" class="refsect1">
<h2 class="refsect1">TODAY</h2>
<p><a id="sthref3344"></a><a id="sthref3345"></a><a id="sthref3346"></a>The TODAY function returns the current date as a DATE or TEXT value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3347"></a>Return Value</p>
<p>DATE or TEXT depending on the data type that is expected:</p>
<ul>
<li>
<p>DATE</p>
<p>When you display a returned DATE value, the value has the format specified by the date template in the DATEFORMAT option. When the day of the week or the name of the month is used in the date template, TODAY uses the day names specified in the DAYNAMES option and the month names specified in the MONTHNAMES option.</p>
</li>
<li>
<p>TEXT</p>
<p>Where a text value is expected. TODAY automatically converts the date to a TEXT value, using the current template in the DATEFORMAT option to format the text value. When you want to override the current DATEFORMAT template, you can convert the date result to text by using the CONVERT function with a date-format argument.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3348"></a>Syntax</p>
<p class="synopsis">TODAY</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3349"></a>Examples</p>
<div id="OLADM1992" class="example">
<p class="titleinexample"><a id="sthref3350"></a>Example 8-148 Displaying Today&#39;s Date</p>
<p>The following statements send the current date in DATE format to the current outfile.</p>
<pre dir="ltr">DATEFORMAT = &#39;&lt;wtextl&gt; &lt;mtextl&gt; &lt;d&gt;, &lt;yyyy&gt;&#39;
SHOW TODAY
</pre>
<p>When the current date is January&nbsp;15,&nbsp;1996, then these statements produce the following output.</p>
<pre dir="ltr">Monday January 15, 1996
</pre></div>
<!-- class="example" -->
<div id="OLADM1993" class="example">
<p class="titleinexample"><a id="sthref3351"></a>Example 8-149 Calculating a Date Using the TODAY Function</p>
<p>The following statement calculates the date 60 days from today.</p>
<pre dir="ltr">SHOW TODAY + 60
</pre>
<p>When the current date is January&nbsp;15,&nbsp;1996, then this statement produces the following output.</p>
<pre dir="ltr">Friday March 15, 1996
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78668"></a>
<div id="OLADM701" class="refsect1">
<h2 class="refsect1">TOTAL</h2>
<p><a id="sthref3352"></a><a id="sthref3353"></a>The TOTAL function calculates the total of the values of an expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3354"></a>Return Value</p>
<p>The data type of the expression. It can be INTEGER, LONGINT, or DECIMAL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3355"></a>Syntax</p>
<p class="synopsis">TOTAL(<span class="italic">expression&nbsp;</span>[CACHE] [<span class="italic">dimension</span>...])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3356"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The expression to be totalled.</p>
</dd>
<dt>CACHE</dt>
<dd>
<p>Specifies slightly different internal behavior. Specify this keyword only when the original performance is extremely slow.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The name of a dimension of the result; or, the name of a relation between one dimension of <span class="italic">expression</span> and another dimension that you want as a dimension of the result.</p>
<p>By default, TOTAL returns a single value. When you indicate one or more dimensions for the result, TOTAL calculates values along the dimensions that are specified and returns an array of values. Each dimension must be either a dimension of <span class="italic">expression</span> or related to one of its dimensions.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you specify a dimension that is not an actual dimension of expression, but, instead, is dimension that is related to a dimension of expression and when there are multiple relations between the two dimensions, Oracle OLAP uses the default relation between the dimensions to perform the calculation. (See the <a href="dml_commands_2.htm#CACBJGDI">RELATION command</a> for more information on default relations.) When you do not want Oracle OLAP to use this default relation, specify the related dimension by specifying the name of a specify relation.</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3357"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM1994"></a>How TOTAL Handles NA Values</p>
<p>TOTAL is affected by the NASKIP option. When NASKIP is set to <code dir="ltr">YES</code> (the default), TOTAL ignores <code dir="ltr">NA</code> values and returns the sum of the values that are not <code dir="ltr">NA</code>. When NASKIP is set to <code dir="ltr">NO</code>, TOTAL returns <code dir="ltr">NA</code> when any value in the calculation is <code dir="ltr">NA</code>. When all data values for a calculation are <code dir="ltr">NA</code>, TOTAL returns <code dir="ltr">NA</code> for either setting of NASKIP.</p>
<p class="subhead2"><a id="OLADM1995"></a>Totaling over a DWMQY Dimension</p>
<p>When <span class="italic">expression</span> is dimensioned by a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR, you can specify any other DAY, WEEK, MONTH, QUARTER, or YEAR dimension as a related <span class="italic">dimension.</span> Oracle OLAP uses the implicit relation between the dimensions. To control the mapping of one DAY, WEEK, MONTH, QUARTER, or YEAR dimension to another (for example, from weeks to months), you can define an explicit relation between the two dimensions and specify the name of the relation as the <span class="italic">dimension</span> argument to the TOTAL function.</p>
<p>For each time period in the related dimension, Oracle OLAP totals the data for all the source time periods that end in the target time period. This method is used regardless of which dimension has the more aggregate time periods. To control the way in which data is aggregated or allocated between the periods of two time dimensions, you can use the TCONVERT function.</p>
<p class="subhead2"><a id="i1006897"></a><a id="OLADM1996"></a>Multiple Relations in a TOTAL Function</p>
<p>When you break out the total by a related dimension, you are changing the dimensionality of the expression, so Oracle OLAP expects values based on this new dimensionality. It chooses the relation that holds values of that dimension.</p>
<p>When there are multiple relations that hold values of the expected dimension, Oracle OLAP uses the one that was defined first. When there is no relation in which the related dimension is the one expected, Oracle OLAP looks for a relation that is dimensioned by the expected dimension.</p>
<p>For example, assume that there are two relations between <code dir="ltr">district</code> and <code dir="ltr">region</code>, as follows.</p>
<pre dir="ltr">DEFINE REGION.DISTRICT RELATION REGION &lt;DISTRICT&gt;
LD The region each district belongs to
 
DEFINE DISTRICT.REGION RELATION DISTRICT &lt;REGION&gt;
LD The primary district in each region
</pre>
<p>When an analytic workspace had the two relations described earlier and you specified the following TOTAL function, Oracle OLAP would use the relation <code dir="ltr">region.district</code> by default, because it holds values of the specified dimension.</p>
<pre dir="ltr">REPORT TOTAL(sales region)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3358"></a>Examples</p>
<div id="OLADM1997" class="example">
<p class="titleinexample"><a id="sthref3359"></a>Example 8-150 Totaling Sales over All Months</p>
<p>Suppose you would like to see the total sportswear sales for all months for each district. Use the TOTAL function to calculate the total sales. To see a total for each district, specify <code dir="ltr">district</code> as the dimension of the results.</p>
<pre dir="ltr">LIMIT product TO &#39;Sportswear&#39;
REPORT W 15 HEADING &#39;Total Sales&#39; TOTAL(sales district)
</pre>
<p>The preceding statements produce the following output.</p>
<pre dir="ltr">DISTRICT         Total Sales
-------------- ---------------
Boston            1,659,609.90
Atlanta           3,628,616.62
Chicago           2,296,631.81
Dallas            3,893,829.30
Denver            2,133,425.29
Seattle           1,298,215.59
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGDHJB"></a>
<div id="OLADM702" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">TRANSLATE</h2>
<p>The <a id="sthref3360"></a>TRANSLATE function replaces all occurrences of each character of one string with the corresponding character in another string.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
TRANSLATE provides functionality related to that provided by the <a href="#CACCAFIH">REPLCHARS</a> function. REPLCHARS lets you substitute a single string for another single string and remove character strings. TRANSLATE lets you make several single-character, one-to-one substitutions in one operation.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3361"></a>Return value</p>
<p>Text.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3362"></a>Syntax</p>
<p class="synopsis">TRANSLATE ( <span class="italic">exp</span> <span class="italic">from_string</span> <span class="italic">to_string</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3363"></a>Parameters</p>
<dl>
<dt><span class="italic">exp</span></dt>
<dd>
<p>A text expression in which you want to replace characters.</p>
</dd>
<dt><span class="italic">from_string</span></dt>
<dd>
<p>A text expression that is the characters you want to replace.</p>
</dd>
<dt><span class="italic">to_string</span></dt>
<dd>
<p>A text expression that is the characters to use for replacement in the order of <span class="italic">from_string</span>. When you include fewer characters in this argument than are in <span class="italic">from_string</span>, the function removes the extra characters in <span class="italic">from_string</span> from the return value. Note, however, that to remove all characters in <span class="italic">from_string</span>, you cannot specify an empty string for <span class="italic">to_string</span> as an empty string is interpreted as a null argument.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3364"></a>Examples</p>
<div id="OLADM1998" class="example">
<p class="titleinexample"><a id="sthref3365"></a>Example 8-151 Replacing several Characters Using TRANSLATE</p>
<p>The following statement translates a book title into a string that could be used (for example) as a filename. The <span class="italic">from_string</span> contains three characters: an asterisk, a space, asterisk, and apostrophe (with a backslash as the escape character). The <span class="italic">to_string</span> contains only two underscores which leaves the third character in the <span class="italic">from_string</span> without a corresponding replacement, so the return value does not contain any apostrophes.</p>
<pre dir="ltr">SHOW TRANSLATE (&#39;SQL*Plus User\&#39;s Guide&#39; &#39;* \&#39;&#39; &#39;__&#39;)
SQL_Plus_Users_Guide
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCJEAD"></a>
<div id="OLADM703" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">TRIGGER function</h2>
<p><a id="sthref3366"></a><a id="sthref3367"></a><a id="sthref3368"></a><a id="sthref3369"></a><a id="sthref3370"></a><a id="sthref3371"></a><a id="sthref3372"></a><a id="sthref3373"></a>The TRIGGER function retrieves the event, subevent, or name of the object or analytic workspace that caused the execution of a trigger program (that is, a TRIGGER_DEFINE, TRIGGER_AFTER_UPDATE, or TRIGGER_BEFORE_UPDATE program, or any program identified as a trigger program using the TRIGGER command).</p>
<p>When the current program is a trigger program, the TRIGGER function returns the trigger information for that program. When it is not, the TRIGGER function returns trigger information for the most recently executed trigger program.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_program.htm#CHDBDIIH">&#34;Trigger Programs&#34;</a> and the <a href="dml_commands_2.htm#BABGJHJH">&#34;TRIGGER command&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3374"></a>Return Values</p>
<p><code dir="ltr">TEXT</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3375"></a>Syntax</p>
<p class="synopsis">TRIGGER (NAME | EVENT | SUBEVENT)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3376"></a>Parameters</p>
<dl>
<dt>NAME</dt>
<dd>
<p>For a program identified as a trigger program using the TRIGGER command, returns the object for which the trigger program is association. For a TRIGGER_AW, TRIGGER_DEFINE, TRIGGER_AFTER_UPDATE, or TRIGGER_BEFORE_UPDATE program, returns the name of the analytic workspace that caused the program to execute.</p>
</dd>
<dt>EVENT</dt>
<dd>
<p>Returns the name of the event (DML statement) that triggered the execution of the program.</p>
<dl>
<dd><span class="syntaxinline">AW</span></dd>
<dd><span class="syntaxinline">MAINTAIN</span></dd>
<dd><span class="syntaxinline">DELETE</span></dd>
<dd><span class="syntaxinline">DEFINE</span></dd>
<dd><span class="syntaxinline">PROPERTY</span></dd>
<dd><span class="syntaxinline">ASSIGN</span></dd>
<dd><span class="syntaxinline">BEFORE_UPDATE</span></dd>
<dd><span class="syntaxinline">AFTER_UPDATE</span></dd>
</dl>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_program.htm#CHDBDIIH">&#34;Trigger Programs&#34;</a> and <a href="dml_commands_2.htm#BABGJHJH">&#34;TRIGGER command&#34;</a> for more information on events</div>
</dd>
<dt>SUBEVENT</dt>
<dd>
<p>When the value returned by EVENT is <code dir="ltr">MAINTAIN</code>, <code dir="ltr">AFTER_UPDATE</code> or <code dir="ltr">BEFORE_UPDATE</code>, returns more information on the OLAP DML statement that triggered the execution of the program. Valid subevents for <code dir="ltr">AW</code> are outlined in <a href="#CEGGGAIE">Table 8-18, &#34;Subevents for the AW Event&#34;</a>. Valid subevents for <code dir="ltr">MAINTAIN</code> are outlined in <a href="#CEGFGHBF">Table 8-19, &#34;Subevents for the MAINTAIN Event&#34;</a>. Valid subevents for <code dir="ltr">UPDATE</code> are outlined in <a href="#CEGIEAGA">Table 8-20, &#34;Subevents for UPDATE Events&#34;</a>.</p>
<div id="OLADM1999" class="tblformal">
<p class="titleintable"><a id="sthref3377"></a><a id="CEGGGAIE"></a>Table 8-18 Subevents for the AW Event</p>
<table class="cellalignment3618" title="Subevents for the AW Event" summary="This table lists the subevents for the AW event." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t99">Subevent</th>
<th class="cellalignment3616" id="r1c2-t99">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t99" headers="r1c1-t99">
<p>CREATE</p>
</td>
<td class="cellalignment3617" headers="r2c1-t99 r1c2-t99">
<p>Returned when an AW CREATE statement triggered the execution of the program.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t99" headers="r1c1-t99">
<p>ATTACH</p>
</td>
<td class="cellalignment3617" headers="r3c1-t99 r1c2-t99">
<p>Returned when an AW ATTACH statement triggered the execution of the program.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t99" headers="r1c1-t99">
<p>DELETE</p>
</td>
<td class="cellalignment3617" headers="r4c1-t99 r1c2-t99">
<p>Returned when an AW DELETE statement triggered the execution of the program.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t99" headers="r1c1-t99">
<p>DETACH</p>
</td>
<td class="cellalignment3617" headers="r5c1-t99 r1c2-t99">
<p>Returned when an AW DETACH statement triggered the execution of the program.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="OLADM2000" class="tblformal">
<p class="titleintable"><a id="sthref3378"></a><a id="CEGFGHBF"></a>Table 8-19 Subevents for the MAINTAIN Event</p>
<table class="cellalignment3618" title="Subevents for the MAINTAIN Event" summary="This table describes the values that can be returned by SUBEVENT when the value returned by EVENT is MAINTAIN." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t100">Subevent</th>
<th class="cellalignment3616" id="r1c2-t100">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t100" headers="r1c1-t100">
<p>ADD</p>
</td>
<td class="cellalignment3617" headers="r2c1-t100 r1c2-t100">
<p>Returned when a MAINTAIN ADD statement triggered the execution of the program.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t100" headers="r1c1-t100">
<p>DELETE</p>
</td>
<td class="cellalignment3617" headers="r3c1-t100 r1c2-t100">
<p>Returned when any MAINTAIN DELETE statement <span class="italic">except</span> a MAINTAIN DELETE ALL statement triggered the execution of the program.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t100" headers="r1c1-t100">
<p>DELETE ALL</p>
</td>
<td class="cellalignment3617" headers="r4c1-t100 r1c2-t100">
<p>Returned when a MAINTAIN DELETE ALL statement triggered the execution of the program.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r5c1-t100" headers="r1c1-t100">
<p>MERGE</p>
</td>
<td class="cellalignment3617" headers="r5c1-t100 r1c2-t100">
<p>Returned when a MAINTAIN MERGE statement triggered the execution of the program.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r6c1-t100" headers="r1c1-t100">
<p>MOVE</p>
</td>
<td class="cellalignment3617" headers="r6c1-t100 r1c2-t100">
<p>Returned when a MAINTAIN MOVE statement triggered the execution of the program.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r7c1-t100" headers="r1c1-t100">
<p>RENAME</p>
</td>
<td class="cellalignment3617" headers="r7c1-t100 r1c2-t100">
<p>Returned when a MAINTAIN RENAME statement triggered the execution of the program.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="OLADM2001" class="tblformal">
<p class="titleintable"><a id="sthref3379"></a><a id="CEGIEAGA"></a>Table 8-20 Subevents for UPDATE Events</p>
<table class="cellalignment3618" title="Subevents for UPDATE Events" summary="This table describes the values that can be returned by SUBEVENT when the value returned by EVENT is UPDATE." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t101">Subevent</th>
<th class="cellalignment3616" id="r1c2-t101">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t101" headers="r1c1-t101">
<p>AW</p>
</td>
<td class="cellalignment3617" headers="r2c1-t101 r1c2-t101">
<p>Returned when an UPDATE command triggered the execution of a TRIGGER_AFTER_UPDATE or TRIGGER_BEFORE_UPDATE program.</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t101" headers="r1c1-t101">
<p>MULTI</p>
</td>
<td class="cellalignment3617" headers="r3c1-t101 r1c2-t101">
<p>Returned when an UPDATE command triggered the execution of a program identified as a trigger program using the TRIGGER command when an object is acquired in multiwriter mode.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3380"></a>Examples</p>
<p>For examples of using the TRIGGER function, see <a href="dml_program.htm#CEGCBCAB">Example 6-3, &#34;TRIGGER_BEFORE_UPDATE Program&#34;</a> and <a href="dml_commands_2.htm#CEGEFJCJ">Example 10-166, &#34;Assigning an Alternative Value using an Assign Trigger&#34;</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1005094"></a>
<div id="OLADM704" class="refsect1">
<h2 class="refsect1">TRIM</h2>
<p><a id="sthref3381"></a><a id="sthref3382"></a>The TRIM function enables you to trim leading or trailing characters (or both) from a character string.</p>
<p>You can also trim leading characters using <a href="#i1012542">LTRIM</a> and trailing characters using <a href="#i1004883">RTRIM</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3383"></a>Return Value</p>
<p>The data type of the string you are trimming (that is, <span class="italic">trim-source</span>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3384"></a>Syntax</p>
<p class="synopsis">TRIM ([{{LEADING|TRAILING|<span class="underline">BOTH</span>} [<span class="italic">trim_characters</span>])|<span class="italic">trim_character</span>} FROM] <span class="italic">trim_source</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3385"></a>Parameters</p>
<dl>
<dt><span class="italic">trim-characters</span></dt>
<dd>
<p>An expression that specifies the character values to be trimmed. This text expression can be any of the text data types.</p>
<p>When you specify multiple characters in <span class="italic">trim-characters</span>, the function searches for each character in <span class="italic">trim_source</span>, in turn, removing characters from <span class="italic">trim_source</span> until it encounters a character in <span class="italic">trim_source</span> that is not in <span class="italic">trim-characters</span>.</p>
<p>When you do not specify a value, then the default value is a blank space and the function removes leading and trailing blank spaces.</p>
</dd>
<dt>LEADING</dt>
<dd>
<p>Specifies that the function removes any leading characters from <span class="italic">trim_source</span> that are equal to <span class="italic">trim_characters</span>.</p>
</dd>
<dt>TRAILING</dt>
<dd>
<p>Specifies that the function removes any trailing characters from <span class="italic">trim_source</span> that are equal to <span class="italic">trim_characters</span>.</p>
</dd>
<dt>BOTH</dt>
<dd>
<p>Specifies that the function removes leading and trailing characters from <span class="italic">trim_source</span> that are equal to <span class="italic">trim_characters</span>.</p>
</dd>
<dt><span class="italic">trim-source</span></dt>
<dd>
<p>An expression that is the string value to be trimmed. This text expression can be any of the text data types.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1009576"></a>
<div id="OLADM705" class="refsect1">
<h2 class="refsect1">TRUNCATE</h2>
<p><a id="sthref3386"></a>The TRUNCATE function (abbreviated as TRUNC) truncates either a number or a datetime value. Because the syntax of the TRUNC function is different depending on the whether it is being used for a number or a date and time value, two separate entries are provided:</p>
<ul>
<li>
<p><a href="#BABCIFGH">TRUNCATE (datetime)</a></p>
</li>
<li>
<p><a href="#BABJCBDI">TRUNCATE (number)</a></p>
</li>
</ul>
<div id="OLADM706" class="refsect2"><a id="BABCIFGH"></a>
<h3 class="refsect2">TRUNCATE (datetime)</h3>
<p><a id="sthref3387"></a><a id="sthref3388"></a>The TRUNCATE (datetime) function returns date with the time portion of the day truncated to the unit specified by the format model.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3389"></a>Return Value</p>
<p>DATETIME</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3390"></a>Syntax</p>
<p class="synopsis">TRUNC&nbsp;(<span class="italic">datetime_exp</span>, [<span class="italic">fmt</span>])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3391"></a>Parameters</p>
<dl>
<dt><span class="italic">datetime-exp</span></dt>
<dd>
<p>A datetime expression that identifies a date and time number.</p>
</dd>
<dt><span class="italic">fmt</span></dt>
<dd>
<p>A text expression that specifies a format model shown in <a href="#CJAEFAIA">Table 8-13, &#34;Datetime Format Templates for the ROUND and TRUNC Date Functions&#34;</a>. A format model indicates how the date and time number should be truncated. If you omit <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>, then <code dir="ltr"><span class="codeinlineitalic">date</span></code> is truncated to the nearest day.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3392"></a>Examples</p>
<div id="OLADM2002" class="example">
<p class="titleinexample"><a id="sthref3393"></a>Example 8-152 Truncating to the Nearest Year</p>
<p>When the value of the NLS_DATE_FORMAT option is <code dir="ltr">DD-MON-YY</code>, then this statement:</p>
<pre dir="ltr">SHOW TRUNC (TO_DATE(&#39;27-OCT-92&#39;),&#39;YEAR&#39;)
</pre>
<p>returns this value:</p>
<pre dir="ltr">01-JAN-92
</pre></div>
<!-- class="example" -->
<div id="OLADM2003" class="example">
<p class="titleinexample"><a id="sthref3394"></a>Example 8-153 Truncating Using Different Formats</p>
<p>Assume the following option values, variables, and values are in your analytic workspace.</p>
<pre dir="ltr">SHOW NLS_DATE_FORMAT
DD-MON-RR
DEFINE MYDATETIME VARIABLE DATETIME
DATE_FORMAT = &#39;MON-RRRR-DD-HH24&#39;
mydatetime = CURRENT_TIMESTAMP
SHOW mydatetime
= &#39;AUG-2006-07-14&#39;
</pre>
<p>As the following SHOW statements illustrate, the value you specify for the format argument of TRUNCATE function determines the value returned by that function.</p>
<pre dir="ltr">SHOW TRUNCATE(mydatetime, &#39;MON&#39;)
01-AUG-06
SHOW TRUNCATE(mydatetime, &#39;DD&#39;)
07-AUG-06
SHOW TRUNCATE(mydatetime)
= &#39;AUG-2006-07-00&#39;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM707" class="refsect2"><a id="BABJCBDI"></a>
<h3 class="refsect2">TRUNCATE (number)</h3>
<p><a id="sthref3395"></a>When you specify a number as an argument, the TRUNCATE function truncates a number to a specified number of decimal places.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3396"></a>Return Value</p>
<p>DECIMAL</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3397"></a>Syntax</p>
<p class="synopsis">TRUNC&nbsp;(<span class="italic">number</span>,&nbsp;<span class="italic">truncvalue</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3398"></a>Parameters</p>
<dl>
<dt><span class="italic">number</span></dt>
<dd>
<p>The number to truncate. The value specified for <span class="italic">number</span> must be followed by a comma.</p>
</dd>
<dt><span class="italic">truncvalue</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> value that specifies the number of places to the right or left of the decimal point to which <span class="italic">number</span> should be truncated. When <span class="italic">truncvalue</span> is positive, digits to the right of the decimal point are truncated. When it is negative, digits to the left of the decimal point are truncated (that is, made zero). When <span class="italic">truncvalue</span> is omitted, <span class="italic">number</span> is truncated to <code dir="ltr">0</code> decimal places.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3399"></a>Examples</p>
<div id="OLADM2004" class="example">
<p class="titleinexample"><a id="sthref3400"></a>Example 8-154 Truncating to the Right of the Decimal Point</p>
<p>The following statement</p>
<pre dir="ltr">SHOW TRUNC (15.79, 1)
</pre>
<p>returns this value</p>
<pre dir="ltr">15.7
</pre></div>
<!-- class="example" -->
<div id="OLADM2005" class="example">
<p class="titleinexample"><a id="sthref3401"></a>Example 8-155 Truncating to the Left of the Decimal Point</p>
<p>The following statement</p>
<pre dir="ltr">SHOW TRUNC (15.79, -1)
</pre>
<p>returns this value</p>
<pre dir="ltr">10
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CHDJCADG"></a>
<div id="OLADM708" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">TZ_OFFSET</h2>
<p>The <a id="sthref3402"></a><a id="sthref3403"></a>TZ_OFFSET function returns the time zone offset corresponding to the argument based on the date the statement is executed.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Time zone region names are needed by the daylight savings feature. The region names are stored in two time zone files. The default time zone file is a small file containing only the most common time zones to maximize performance. If your time zone is not in the default file, then you do not have daylight savings support until you provide a path to the complete (larger) file by way of the ORA_TZFILE environment variable.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3404"></a>Return Values</p>
<p>A text value in the format shown below which represents the offset</p>
<p>&#39;{ + | - } <span class="italic">hh</span> : <span class="italic">mi</span>&#39;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3405"></a>Syntax</p>
<p class="synopsis">TZ_OFFSET( &#39;<span class="italic">time_zone_name</span>&#39; | &#39;{ + | - } <span class="italic">hh</span> : <span class="italic">mi</span>&#39; | SESSIONTIMEZONE | DBTMEZONE)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3406"></a>Parameters</p>
<dl>
<dt><span class="italic">time_zone_name</span></dt>
<dd>
<p>A text value that specifies a valid time zone name. For a listing of valid values for time_zone_name, query the TZNAME column of the V$TIMEZONE_NAMES dynamic performance view.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Time zone region names are needed by the daylight savings feature. The region names are stored in two time zone files. The default time zone file is a small file containing only the most common time zones to maximize performance. If your time zone is not in the default file, then you do not have daylight savings support until you provide a path to the complete (larger) file by way of the ORA_TZFILE environment variable.</div>
</dd>
<dt>{ + | - } <span class="italic">hh</span> : <span class="italic">mi</span>&#39;</dt>
<dd>
<p>Specifies a time zone offset from UTC (which simply returns itself)</p>
</dd>
<dt>SESSIONTIMEZONE</dt>
<dd>
<p>Specifies the time zone of the current session.</p>
</dd>
<dt>DBTIMEZONE</dt>
<dd>
<p>Specifies the value of the database time zone.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABCCEID"></a>
<div id="OLADM709" class="refsect1">
<h2 class="refsect1">UNIQUELINES</h2>
<p><a id="sthref3407"></a>The UNIQUELINES function removes duplicate lines in a multiline text value and sorts the lines in ascending order. The function returns a multiline text value composed of the resulting lines.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3408"></a>Return Value</p>
<p>TEXT or NTEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3409"></a>Syntax</p>
<p class="synopsis">UNIQUELINES(<span class="italic">text-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3410"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>A multiline text expression from which UNIQUELINES removes duplicate lines and in which it sorts the remaining lines. UNIQUELINES is case-sensitive when it checks for duplicates, and it compares all characters, including spaces.</p>
<p>When you specify a TEXT expression, the return value is TEXT. When you specify an NTEXT expression, the return value is NTEXT.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3411"></a>Examples</p>
<div id="OLADM2006" class="example">
<p class="titleinexample"><a id="sthref3412"></a>Example 8-156 Removing Duplicate Text Lines</p>
<p>In the following example, one line is removed from the value of <code dir="ltr">officelist</code>, and the lines are sorted.</p>
<p>The statement</p>
<pre dir="ltr">SHOW officelist
</pre>
<p>produces the following output.</p>
<pre dir="ltr">MIAMI
Providence
Miami
Baltimore
Saratoga
Baltimore
</pre>
<p>The statement</p>
<pre dir="ltr">show uniquelines(officelist)
</pre>
<p>produces the following output.</p>
<pre dir="ltr">Baltimore
Miami
MIAMI
Providence
Saratoga 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABHDHGG"></a>
<div id="OLADM710" class="refsect1">
<h2 class="refsect1">UNRAVEL</h2>
<p><a id="sthref3413"></a><a id="sthref3414"></a><a id="sthref3415"></a><a id="sthref3416"></a>The UNRAVEL function is used with an assignment statement to copy the values of an expression into the cells of a variable when the dimensions of the expression are different from the dimensions of the variable.</p>
<p>An assignment statement created using an assignment statement assigns the values obtained from UNRAVEL by looping over the status of the dimensions of the target variable. The first dimension listed in the variable&#39;s definition varies the fastest. UNRAVEL obtains the values of the expression in the same way, looping over the status of the dimensions of the expression with the first dimension varying the fastest. You can alter the order in which UNRAVEL obtains its values by specifying the dimensions over which to loop.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3417"></a>Return Value</p>
<p>The data type returned by UNRAVEL is the data type of the values specified by the expression.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3418"></a>Syntax</p>
<p class="synopsis">UNRAVEL(<span class="italic">expression&nbsp;</span>[<span class="italic">dimension1</span>...])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3419"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The expression whose values are to be copied.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>Specifies one or more dimensions over which to loop; the dimension specified first varies fastest as the data is unraveled.</p>
<p>Specifying dimensions in UNRAVEL overrides the default looping order and the extent to which the expression is unraveled. By default, unraveling extends through all the dimensions of the expression. However, when you specify some but not all the dimensions of the expression, any dimensions you have not specified do not unravel. Instead, the unraveled values include only the first value of each of the omitted dimensions.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3420"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2007"></a>Moving Worksheet Data</p>
<p>One common use of UNRAVEL is to move data from a worksheet to a variable, because the worksheet usually does not have the same dimensions as the variable. See <a href="#i80916">Example 8-157, &#34;Copying Data from a Worksheet to a Variable&#34;</a>.</p>
<p class="subhead2"><a id="OLADM2008"></a>Filling Extra Target Cells</p>
<p>When there are still more cells in the target for the assignment statement (created using an assignment statement) to fill after it has used the last value from the expression, UNRAVEL starts over at the first value again.</p>
<p class="subhead2"><a id="OLADM2009"></a>Setting Status</p>
<p>Because the order in which unraveled values are assigned depends on the current status of the dimensions of both the variable and the expression, ensure that the appropriate LIMIT commands have been given so that the cells match up correctly.</p>
<p class="subhead2"><a id="OLADM2010"></a>Assigning Data Values</p>
<p>See <a href="dml_commands_2.htm#CIHCEHEH">SET</a> for information on how data values are assigned.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3421"></a>Examples</p>
<div id="OLADM2011" class="example">
<p class="titleinexample"><a id="i80916"></a>Example 8-157 Copying Data from a Worksheet to a Variable</p>
<p>In an analytic workspace, you have imported some product price data from a spreadsheet into a worksheet. You now want to transfer that data to a variable called <code dir="ltr">newprice</code>. You can produce a report of a worksheet, called <code dir="ltr">pricedata</code>, with these statements.</p>
<pre dir="ltr">LIMIT wksrow TO 1 TO 6
LIMIT wkscol TO 1 2 3
REPORT pricedata
</pre>
<p>This is the report.</p>
<pre dir="ltr">               -----------PRICEDATA------------
               -------------WKSCOL-------------
WKSROW             1          2          3
-------------- ---------- ---------- ----------
             1            Jan95      Jan96
             2 Tents          191.39     194.00
             3 Canoes         279.92     300.00
             4 Racquets        83.34      85.00
             5 Sportswear     107.90     110.00
             6 Footwear       183.18     195.00
</pre>
<p>As you can see, row 1 contains month labels, while column 1 contains product labels. The variable <code dir="ltr">newprice</code> is dimensioned by <code dir="ltr">month</code> and <code dir="ltr">product</code>, as shown in its definition.</p>
<pre dir="ltr">DEFINE newprice VARIABLE DECIMAL &lt;month product&gt;
LD Wholesale Unit Selling Price
</pre>
<p>Even though the worksheet has different dimensions (<code dir="ltr">wkscol</code> and <code dir="ltr">wksrow</code>) than <code dir="ltr">newprice</code>, the data contained in it is well organized for transferring to the variable.</p>
<p>However, you do not want to take data from all the rows and columns in the worksheet, so limit <code dir="ltr">wkscol</code> and <code dir="ltr">wksrow</code> to the rows and columns that contain the price data itself.</p>
<pre dir="ltr">LIMIT wkscol TO 2 3
LIMIT wksrow TO 2 TO 6
</pre>
<p>Also, you only want to set values into the variable <code dir="ltr">newprice</code> for January 1995 and January 1996. So first limit <code dir="ltr">month</code> to these values, then type an assignment statement using UNRAVEL to move the values from the worksheet to the variable.</p>
<pre dir="ltr">LIMIT month TO &#39;Jan95&#39; &#39;Jan96&#39;
newprice = UNRAVEL(pricedata)
</pre>
<p>You do not have to specify dimensions in the UNRAVEL function because <code dir="ltr">wkscol</code> is the fastest varying dimension. Consequently, both months unravel for the first product, then both months for the second product. Because the fastest-varying dimension of the variable is <code dir="ltr">month</code>, SET assigns values to the variable in the same order.</p>
<p>A report of <code dir="ltr">newprice</code> looks like this.</p>
<pre dir="ltr">               ------NEWPRICE-------
               --------MONTH--------
PRODUCT          Jan95      Jan96
-------------- ---------- ----------
Tents              191.39     194.00
Canoes             279.92     300.00
Racquets            83.34      85.00
Sportswear         107.90     110.00
Footwear           183.18     195.00
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGICBD"></a>
<div id="OLADM2012" class="refsect1">
<h2 class="refsect1">UPPER</h2>
<p><a id="sthref3422"></a>The UPCASE function converts all alphabetic characters in a text expression into uppercase. When you specify a TEXT expression, the return value is TEXT. When you specify an NTEXT expression, the return value is NTEXT.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3423"></a>Return Value</p>
<p>TEXT or NTEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3424"></a>Syntax</p>
<p class="synopsis">UPCASE(<span class="italic">text-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3425"></a>Parameters</p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The text expression whose characters are to be converted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3426"></a>Examples</p>
<div id="OLADM2013" class="example">
<p class="titleinexample"><a id="sthref3427"></a>Example 8-158 Converting Part of a Text Expression to Uppercase</p>
<p>Suppose you get some new data to add to a mailing list. In the existing mailing list, people&#39;s names have the first letter capitalized. In the new data, however, the whole name is in lowercase. You can use UPCASE to make the new data correspond to the current data with a statement similar to the following.</p>
<pre dir="ltr">lastname = JOINCHARS(UPCASE(EXTCHARS(lastname, 1, 1)), -
           EXTCHARS(lastname, 2, NUMCHARS(lastname))) 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDJEIBB"></a>
<div id="OLADM2014" class="refsect1">
<h2 class="refsect1">UPPER</h2>
<p><a id="sthref3428"></a>The UPPER function converts all alphabetic characters in a text expression into uppercase.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3429"></a>Return Value</p>
<p>The data type of <span class="italic">text-expression</span>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <a class="olink SQLRF06155" href="../SQLRF/functions242.htm#SQLRF06155">UPPER</a> function in <span class="italic">Oracle Database SQL Language Reference</span></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3430"></a>Syntax</p>
<p class="synopsis">UPPER(<span class="italic">text-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3431"></a>Parameters<a id="sthref3432"></a></p>
<dl>
<dt><span class="italic">text-expression</span></dt>
<dd>
<p>The text expression whose characters are to be converted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79219"></a>
<div id="OLADM712" class="refsect1">
<h2 class="refsect1">VALSPERPAGE</h2>
<p><a id="sthref3433"></a>The VALSPERPAGE program calculates the maximum number of values for a variable of a given width that fits on one page. Pages are units of storage in the workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3434"></a>Return Value</p>
<p>INTEGER</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3435"></a>Syntax</p>
<p class="synopsis">VALSPERPAGE(<span class="italic">n</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3436"></a>Parameters</p>
<dl>
<dt><span class="italic">n</span></dt>
<dd>
<p>An <code dir="ltr">INTEGER</code> expression specifying the width of a variable in bytes. This value should be between <code dir="ltr">1</code> and <code dir="ltr">4000</code>. When you specify a value greater than <code dir="ltr">4000</code> or less than <code dir="ltr">1</code>, the result is <code dir="ltr">NA</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3437"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2015"></a>Large Variables</p>
<p>Oracle OLAP lets you create very large, multidimensional variables. Theoretically, a variable can contain up to <code dir="ltr">2**63</code> cells, although this maximum is subject to memory constraints and other factors specific to your system.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3438"></a>Examples</p>
<div id="OLADM2016" class="example">
<p class="titleinexample"><a id="sthref3439"></a>Example 8-159 Calculating the Number of Cells in a Page</p>
<p>The following statement calculates the maximum number of cells available in a single page for a variable with an <code dir="ltr">INTEGER</code> data type. The default width of an <code dir="ltr">INTEGER</code> value in Oracle OLAP is <code dir="ltr">4</code> bytes.</p>
<pre dir="ltr">SHOW VALSPERPAGE(4)
</pre>
<p>The output of this statement is</p>
<pre dir="ltr">992 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79224"></a>
<div id="OLADM713" class="refsect1">
<h2 class="refsect1">VALUES</h2>
<p><a id="sthref3440"></a><a id="sthref3441"></a><a id="sthref3442"></a>The VALUES function returns the default status list or the current status list of a dimension or dimension surrogate, or it returns the values in a valueset. VALUES returns a multiline text value that contains one dimension value on a line.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Because composites do not have status, you cannot use the VALUES function with a composite. When you attempt to do so, Oracle OLAP displays an error message.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3443"></a>Return Value</p>
<p>TEXT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3444"></a>Syntax</p>
<p class="synopsis">VALUES(<span class="italic">dimension&nbsp;</span>[<span class="italic">keyword</span>]&nbsp;[INTEGER])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3445"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>A text expression whose value is the name of a dimension, dimension surrogate, or valueset.</p>
</dd>
<dt><span class="italic">keyword</span></dt>
<dd>
<p>One of the following keywords that specify whether you want the current status list or the default status list for a dimension or a surrogate:</p>
<ul>
<li>
<p><span class="syntaxinlinebold">NOSTATUS</span> which indicates that VALUES should return the default status list of a dimension or dimension surrogate rather than its current status list.</p>
</li>
<li>
<p><span class="syntaxinlinebold">STATUS</span> which indicates that VALUES should return the current status list of a dimension or dimension surrogate (Default).</p>
</li>
</ul>
<p>These keywords do not affect valuesets. For a valueset, VALUES returns all the values in that valueset whether you specify <code dir="ltr">NOSTATUS</code>, <code dir="ltr">STATUS</code>, or nothing.</p>
</dd>
<dt>INTEGER</dt>
<dd>
<p>When you use the INTEGER keyword, the function returns the position numbers of the dimension or dimension surrogate values rather than the values. When you use INTEGER with a valueset, the function returns the position numbers of the values in the existing dimension, not in the valueset.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3446"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2017"></a>Using a LIMIT Statement With a STATUS Keyword Rather than VALUES</p>
<p>When possible, when you want Oracle OLAP to use the dimension values that are presently in status, use a <a href="dml_commands_2.htm#i1019733">LIMIT (using values) command</a> with the STATUS keyword (or a <a href="#i78807">LIMIT function</a> with a similar construction) rather than using a VALUES statement. A LIMIT with the STATUS keyword is more efficient than a VALUES (<span class="italic">dimname</span>) statement.</p>
<p class="subhead2"><a id="OLADM2018"></a>Comparing VALUES to CHARLIST</p>
<p>The VALUES function is very similar to the CHARLIST function. <code dir="ltr">VALUES(MONTH)</code> returns the same list as <code dir="ltr">CHARLIST(MONTH)</code>.</p>
<p>The main differences are:</p>
<ul>
<li>
<p>For dimensions, the NOSTATUS keyword of VALUES lets you use the default status without first limiting the dimension values to <code dir="ltr">ALL</code>.</p>
</li>
<li>
<p>The VALUES function lets you use a text expression to specify the dimension or valueset name. See <a href="#i80931">Example 8-162, &#34;VALUES with Text Variables&#34;</a>.</p>
</li>
</ul>
<p class="subhead2"><a id="OLADM2019"></a>Special Considerations for an Ampersand (&amp;)</p>
<p>Under certain circumstances, an ampersand (<code dir="ltr">&amp;</code>) that is intended to be a character in a dimension value name is interpreted as ampersand substitution. When this happens, Oracle OLAP generates an error message.</p>
<p>This happens because Oracle OLAP recognizes special characters in dimension value names with when they are used in tuples in text expressions. For example, you can include spaces, such as naming a dimension value <code dir="ltr">New</code>&nbsp;<code dir="ltr">York</code> instead of <code dir="ltr">NewYork</code>. When you have dimension values that include ampersands in their names, refer to <a href="#i81143">Example 8-163, &#34;Workaround for Dimension Value Names Including an Ampersand&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3447"></a>Examples</p>
<div id="OLADM2020" class="example">
<p class="titleinexample"><a id="sthref3448"></a>Example 8-160 Listing the Values of a Valueset</p>
<p>The easiest way to display the values of a valueset is simply by using the name of the valueset in a SHOW or a REPORT statement. You can also use VALUES to list the values in that valueset.</p>
<p>For example, suppose an analytic workspace contains a valueset called <code dir="ltr">monthset</code> that has the values <code dir="ltr">Jan95</code>, <code dir="ltr">May95</code>, and <code dir="ltr">Dec95</code>. The following statement displays the values.</p>
<pre dir="ltr">SHOW VALUES(monthset)
Jan95
May95
Dec95
</pre></div>
<!-- class="example" -->
<div id="OLADM2021" class="example">
<p class="titleinexample"><a id="sthref3449"></a>Example 8-161 Listing Position Numbers of a Dimension</p>
<p>You can use VALUES to list the position numbers instead of the actual values in a dimension or valueset. In this example, because you are using the INTEGER keyword with a valueset instead of a dimension, the function returns the position numbers of the values in the <code dir="ltr">month</code> dimension as shown by the output returned by the following statement.</p>
<pre dir="ltr">SHOW VALUES(monthset INTEGER)
61
65
72
</pre>
<p>Therefore, the value <code dir="ltr">Jan95</code> is shown as the 61st value in the <code dir="ltr">month</code> dimension, <code dir="ltr">May95</code> as the 65th value, and <code dir="ltr">Dec95</code> as the 72nd value, although they are the first, second, and third values in <code dir="ltr">monthset</code>.</p>
</div>
<!-- class="example" -->
<div id="OLADM2022" class="example">
<p class="titleinexample"><a id="i80931"></a>Example 8-162 VALUES with Text Variables</p>
<p>This example shows how to assign a dimension name to a text variable and use the text variable in the VALUES function instead of the variable name itself. As the following statements illustrate, when the variable <code dir="ltr">textvar</code> has the value <code dir="ltr">district</code>, <code dir="ltr">VALUES(textvar)</code> returns a list of <code dir="ltr">district</code> values.</p>
<pre dir="ltr">textvar = &#39;district&#39;
SHOW VALUES(textvar)
Boston
Atlanta
Chicago
Dallas
Denver
Seattle
</pre>
<p>To list the values of <code dir="ltr">district</code> using the CHARLIST function rather than VALUES, you must use an ampersand.</p>
<pre dir="ltr">SHOW CHARLIST(&amp;textvar)
</pre>
<p>Because ampersands in a program can degrade performance, use VALUES rather than CHARLIST in such cases.</p>
</div>
<!-- class="example" -->
<div id="OLADM2023" class="example">
<p class="titleinexample"><a id="i81143"></a>Example 8-163 Workaround for Dimension Value Names Including an Ampersand</p>
<p>When a dimension value name contains an ampersand (<code dir="ltr">&amp;</code>) as one of its characters, and when that dimension is a base dimension of a conjoint dimension, then a text expression that contains the names of dimension values in a tuple can generate an error in certain circumstances. This example shows how to avoid this error.</p>
<p>Suppose you use the following statements to define two dimensions.</p>
<pre dir="ltr">DEFINE prod DIMENSION TEXT
DEFINE geog DIMENSION TEXT
</pre>
<p>Next, you use the following statements to define two conjoint dimensions.</p>
<pre dir="ltr">DEFINE conj1 DIMENSION &lt;prod geog&gt;
DEFINE conj2 DIMENSION &lt;prod geog&gt;
</pre>
<p>The following statements add dimension values to the <code dir="ltr">prod</code> and <code dir="ltr">geog</code> dimensions.</p>
<pre dir="ltr">MAINTAIN prod ADD &#39;prod1&#39; &#39;prod&amp;val2&#39;
MAINTAIN geog ADD &#39;geog1&#39; &#39;geog&amp;val2&#39;
</pre>
<p>The following statements add tuples (combinations of dimension values) to the CONJ1 conjoint dimension.</p>
<pre dir="ltr">MAINTAIN conj1 ADD &lt;&#39;prod1&#39; &#39;geog1&#39;&gt;
MAINTAIN conj1 ADD &lt;&#39;prod&amp;val2&#39; &#39;geog1&#39;&gt;
</pre>
<p>Now, suppose you want to use the VALUE function with a MAINTAIN statement to add those same tuples to the <code dir="ltr">conj2</code> conjoint dimension. When you attempt to use the following statement, it generates an error message.</p>
<pre dir="ltr">MAINTAIN conj2 ADD VALUES(conj1)
ERROR: (MXMSERR) val2 does not exist in any attached workspace.
</pre>
<p>This error occurs because the ampersand in the dimension value name <code dir="ltr">prod&amp;val2</code> is interpreted as an attempt at ampersand substitution.</p>
<p>Instead of using the preceding MAINTAIN statement, you can use the following statement to add the tuples to the CONJ2 conjoint dimension.</p>
<pre dir="ltr">MAINTAIN conj2 MERGE &lt; KEY(conj1 prod) KEY(conj1 geog) &gt; 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79239"></a>
<div id="OLADM714" class="refsect1">
<h2 class="refsect1">VINTSCHED</h2>
<p><a id="sthref3450"></a><a id="sthref3451"></a><a id="sthref3452"></a><a id="sthref3453"></a>The VINTSCHED function calculates the interest portion of the payments on a series of variable-rate installment loans that are paid off over a specified number of time periods. VINTSCHED calculates the result for a given time period as the sum of the interest due on each loan that is incurred or outstanding in that period. For each time period, you specify the initial amount of the loans incurred in that time period and the interest rate that is charged in that time period for each new or outstanding loan.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3454"></a>Return Value</p>
<p>DECIMAL</p>
<p>The result returned by the VINTSCHED function is dimensioned by the union of all the dimensions of <span class="italic">loans</span> and <span class="italic">rates</span> and the dimension that is used as the <span class="italic">time-dimension</span> argument.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3455"></a>Syntax</p>
<p class="synopsis">VINTSCHED(<span class="italic">loans</span>,&nbsp;<span class="italic">rates</span>,&nbsp;<span class="italic">n</span>,&nbsp;[<span class="italic">time-dimension</span>] [STATUS])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3456"></a>Parameters</p>
<dl>
<dt><span class="italic">loans</span></dt>
<dd>
<p>A numeric expression that contains the initial amounts of the loans. When <span class="italic">loans</span> does not have a time dimension, or when <span class="italic">loans</span> is dimensioned by multiple time dimensions, the <span class="italic">time-dimension</span> argument is required.</p>
</dd>
<dt><span class="italic">rates</span></dt>
<dd>
<p>A numeric expression that contains the interest rates charged for <span class="italic">loans.</span> When <span class="italic">rates</span> is a dimensioned variable, it can be dimensioned by any dimension, including a different time dimension. When <span class="italic">rates</span> is dimensioned by a time dimension, you specify the interest rate in each time period that applies to the loans incurred or outstanding in that period. The interest rates are expressed as decimal values; for example, a 5 percent rate is expressed as <code dir="ltr">.05</code>.</p>
</dd>
<dt><span class="italic">n</span></dt>
<dd>
<p>A numeric expression that specifies the number of payments required to pay off the loans in the series. The <span class="italic">n</span> expression can be dimensioned, but it cannot be dimensioned by the time dimension argument. One payment is made in each time period of the time dimension by which <span class="italic">loans</span> is dimensioned or in each time period of the dimension specified in the <span class="italic">time-dimension</span> argument. For example, one payment a month is made when <span class="italic">loans</span> is dimensioned by <code dir="ltr">month</code>.</p>
</dd>
<dt><span class="italic">time-dimension</span></dt>
<dd>
<p>The name of the dimension along which the interest payments are calculated. When <span class="italic">loans</span> has a dimension of type of DAY, WEEK, MONTH, QUARTER, or YEAR, the <span class="italic">time-dimension</span> argument is optional, unless <span class="italic">loans</span> has multiple dimensions of these types.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Specifies that VINTSCHED should use the current status list (that is, only the dimension values currently in status in their current status order) when computing the interest portion of the payments. By default VINTSCHED uses the default status list.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3457"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2024"></a>VINTSCHED and NA Values</p>
<p>When <span class="italic">loans</span> has a value other than <code dir="ltr">NA</code> and the corresponding value of <span class="italic">rates</span> is <code dir="ltr">NA</code>, an error occurs.</p>
<p>VINTSCHED is affected by the NASKIP option. When NASKIP is set to YES (the default), and a loan value is <code dir="ltr">NA</code> for the affected time period, the result returned by VINTSCHED depends on whether the corresponding interest rate has a value of <code dir="ltr">NA</code> or a value other than <code dir="ltr">NA</code>. <a href="#i1016808">Table 8-21, &#34;How NASKIP Affects the Results When a Loan or Rate Value is NA for a Given Time Period&#34;</a> illustrates how NASKIP affects the results when a loan or rate value is <code dir="ltr">NA</code> for a given time period.</p>
<div id="OLADM2025" class="tblformal">
<p class="titleintable"><a id="sthref3458"></a><a id="sthref3459"></a>Table 8-21 <a id="i1016808"></a><span class="bolditalic">How NASKIP Affects the Results When a Loan or Rate Value is NA for a Given Time Period</span></p>
<table class="cellalignment3618" title="How NASKIP Affects the Results When a Loan or Rate Value is NA for a Given Time Period" summary="This table illustrates how NASKIP affects the results when a loan or rate value is NA for a given time period." dir="ltr">
<thead>
<tr class="cellalignment3609">
<th class="cellalignment3616" id="r1c1-t106">Loan Value</th>
<th class="cellalignment3616" id="r1c2-t106">Rate Value</th>
<th class="cellalignment3616" id="r1c3-t106">Result when NASKIP = YES</th>
<th class="cellalignment3616" id="r1c4-t106">Result when NASKIP = NO</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r2c1-t106" headers="r1c1-t106">
<p>Non-<code dir="ltr">NA</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t106 r1c2-t106">
<p><code dir="ltr">NA</code></p>
</td>
<td class="cellalignment3617" headers="r2c1-t106 r1c3-t106">
<p>Error</p>
</td>
<td class="cellalignment3617" headers="r2c1-t106 r1c4-t106">
<p>Error</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r3c1-t106" headers="r1c1-t106">
<p><code dir="ltr">NA</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t106 r1c2-t106">
<p>Non-<code dir="ltr">NA</code></p>
</td>
<td class="cellalignment3617" headers="r3c1-t106 r1c3-t106">
<p>Interest values (<code dir="ltr">NA</code> loan value is treated as zero)</p>
</td>
<td class="cellalignment3617" headers="r3c1-t106 r1c4-t106">
<p><code dir="ltr">NA</code> for affected time periods</p>
</td>
</tr>
<tr class="cellalignment3609">
<td class="cellalignment3617" id="r4c1-t106" headers="r1c1-t106">
<p><code dir="ltr">NA</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t106 r1c2-t106">
<p><code dir="ltr">NA</code></p>
</td>
<td class="cellalignment3617" headers="r4c1-t106 r1c3-t106">
<p><code dir="ltr">NA</code> for affected time periods</p>
</td>
<td class="cellalignment3617" headers="r4c1-t106 r1c4-t106">
<p><code dir="ltr">NA</code> for affected time periods</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>As an example, suppose a loan expression and a corresponding interest expression both have <code dir="ltr">NA</code> values for 1997, but both have values other than <code dir="ltr">NA</code> for succeeding years. When the number of payments is <code dir="ltr">3</code>, VINTSCHED returns <code dir="ltr">NA</code> for 1997, 1996, and 1995. For 1997, VINTSCHED returns the interest portion of the payment due for loans incurred in 1995, 1996, and 1997.</p>
<p class="subhead2"><a id="OLADM2026"></a>VINTSCHED Ignores the Status of a Time Dimension</p>
<p>The VINTSCHED calculation begins with the first value of the time dimension, regardless of how the status of that dimension may be limited. For example, suppose <span class="italic">loans</span> is dimensioned by <code dir="ltr">year</code>, and the values of <code dir="ltr">year</code> range from <code dir="ltr">Yr95</code> to <code dir="ltr">Yr99</code>. The calculation always begins with <code dir="ltr">Yr95</code>, even when you limit the status of <code dir="ltr">year</code> so that it does not include <code dir="ltr">Yr95</code>.</p>
<p>However, when <span class="italic">loans</span> is not dimensioned by the time dimension, the VINTSCHED calculation begins with the first value in the current status of the time dimension. For example, suppose <span class="italic">loans</span> is not dimensioned by <code dir="ltr">year</code>, but <code dir="ltr">year</code> is specified as <span class="italic">time-dimension.</span> When the status of <code dir="ltr">year</code> is limited to <code dir="ltr">Yr97</code> to <code dir="ltr">Yr99</code>, the calculation begins with <code dir="ltr">Yr97</code> instead of <code dir="ltr">Yr95</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3460"></a>Examples</p>
<div id="OLADM2027" class="example">
<p class="titleinexample"><a id="sthref3461"></a>Example 8-164 Using VINTSCHED</p>
<p>The following statements create two variables called <code dir="ltr">loans</code> and <code dir="ltr">rates</code>.</p>
<pre dir="ltr">DEFINE loans DECIMAL &lt;year&gt;
DEFINE rates DECIMAL &lt;year&gt;
</pre>
<p>Suppose you assign the following values to the variables <code dir="ltr">loans</code> and <code dir="ltr">rates</code>.</p>
<pre dir="ltr">YEAR             LOANS      RATES
-------------- ---------- ----------
Yr95               100.00       0.05
Yr96               200.00       0.06
Yr97               300.00       0.07
Yr98                 0.00       0.07
Yr99                 0.00       0.07
</pre>
<p>For each year, <code dir="ltr">loans</code> contains the initial value of the variable-rate loan incurred during that year. For each year, the value of <code dir="ltr">rates</code> is the interest rate that is charged for that year on any loans incurred or outstanding in that year.</p>
<p>The following statement specifies that each loan is to be paid off in three payments, calculates the interest portion of the payments on the loans,</p>
<pre dir="ltr">REPORT W 20 HEADING &#39;Payment&#39; VINTSCHED(loans, rates, 3, year)
</pre>
<p>and produces the following report.</p>
<pre dir="ltr">YEAR                        Payment
-------------- --------------------
Yr95                           5.00
Yr96                          16.10
Yr97                          33.06
Yr98                          19.43
Yr99                           7.48
</pre>
<p>The interest payment for 1995 is interest on the loan of $100 incurred in 1995, at 5&nbsp;percent. The interest payment for 1996 is the sum of the interest on the remaining principal of the 1995 loan, plus interest on the loan of $200 incurred in 1996; the interest rate for both loans is 6 percent. The 1997 interest payment is the sum of the interest on the remaining principal of the 1995 loan, interest on the remaining principal of the 1996 loan, and interest on the loan of $300 incurred in 1997; the interest rate for all three loans is 7 percent. Because the 1995 loan is paid off in 1997, the payment for 1998 represents 7 percent interest on the remaining principal of the 1996 and 1997 loans. In 1999, the interest payment is on the remaining principal of the 1997 loan.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79249"></a>
<div id="OLADM715" class="refsect1">
<h2 class="refsect1">VPMTSCHED</h2>
<p><a id="sthref3462"></a><a id="sthref3463"></a><a id="sthref3464"></a>The VPMTSCHED function calculates a payment schedule (principal plus interest) for paying off a series of variable-rate installment loans over a specified number of time periods. VPMTSCHED calculates the payment for a given time period as the sum of the principal and interest due on each loan that is incurred or outstanding in that period. For each time period, you specify the initial amount of the loans incurred in that time period and the interest rate that is charged in that time period for each new or outstanding loan.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3465"></a>Return Value</p>
<p>DECIMAL</p>
<p>The result returned by the VPMTSCHED function is dimensioned by the union of all the dimensions of <span class="italic">loans</span> and <span class="italic">rates</span> and the dimension used as the <span class="italic">time-dimension</span> argument.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3466"></a>Syntax</p>
<p class="synopsis">VPMTSCHED(<span class="italic">loans</span>,&nbsp;<span class="italic">rates</span>,&nbsp;<span class="italic">n</span>,&nbsp;[<span class="italic">time-dimension</span>] [STATUS])</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3467"></a>Parameters</p>
<dl>
<dt><span class="italic">loans</span></dt>
<dd>
<p>A numeric expression that contains the initial amounts of the loans. When <span class="italic">loans</span> does not have a time dimension, or when <span class="italic">loans</span> is dimensioned by multiple time dimensions, the <span class="italic">time-dimension</span> argument is required.</p>
</dd>
<dt><span class="italic">rates</span></dt>
<dd>
<p>A numeric expression that contains the interest rates charged for <span class="italic">loans.</span> When <span class="italic">rates</span> is a dimensioned variable, it can be dimensioned by any dimension, including a different time dimension. When <span class="italic">rates</span> is dimensioned by a time dimension, you specify the interest rate in each time period that applies to the loans incurred or outstanding in that period. The interest rates are expressed as decimal values; for example, a 5 percent rate is expressed as .05.</p>
</dd>
<dt><span class="italic">n</span></dt>
<dd>
<p>A numeric expression that specifies the number of payments required to pay off the loans in the series. The <span class="italic">n</span> expression can be dimensioned, but it cannot be dimensioned by the time dimension argument. One payment is made in each time period of the time dimension by which <span class="italic">loans</span> is dimensioned or in each time period of the dimension specified in the <span class="italic">time-dimension</span> argument. For example, one payment a month is made when <span class="italic">loans</span> is dimensioned by <code dir="ltr">month</code>.</p>
</dd>
<dt><span class="italic">time-dimension</span></dt>
<dd>
<p>The name of the dimension along which the interest payments are calculated. When <span class="italic">loans</span> has a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR, the <span class="italic">time-dimension</span> argument is optional, unless <span class="italic">loans</span> has more than dimension of this type.</p>
</dd>
<dt>STATUS</dt>
<dd>
<p>Specifies that VPMTSCHED should use the current status list (that is, only the dimension values currently in status in their current status order) when computing the payment schedule. By default VPMTSCHED uses the default status list.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3468"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2028"></a>VPMTSCHED and NA Values</p>
<p>When <span class="italic">loans</span> has a value other than <code dir="ltr">NA</code> and the corresponding value of <span class="italic">rates</span> is <code dir="ltr">NA</code>, an error occurs.</p>
<p>VPMTSCHED is affected by the NASKIP option. When NASKIP is set to YES (the default), and a loan value is <code dir="ltr">NA</code> for the affected time period, the result returned by VPMTSCHED depends on whether the corresponding interest rate has a value of <code dir="ltr">NA</code> or a value other than <code dir="ltr">NA</code>. <a href="#i1016808">Table 8-21, &#34;How NASKIP Affects the Results When a Loan or Rate Value is NA for a Given Time Period&#34;</a> illustrates how NASKIP affects the results when a loan or rate value is <code dir="ltr">NA</code> for a given time period.</p>
<p>As an example, suppose a loan expression and a corresponding interest expression both have <code dir="ltr">NA</code> values for 1994, but both have values other than <code dir="ltr">NA</code> for succeeding years. When the number of payments is 3, VPMTSCHED returns <code dir="ltr">NA</code> for 1994, 1995, and 1996. For 1997, VPMTSCHED returns the payment due for loans incurred in 1995, 1996, and 1997.</p>
<p class="subhead2"><a id="OLADM2029"></a>VPTMPTSCHED Ignores the Status of the Time Dimension</p>
<p>The VPMTSCHED calculation begins with the first value of the time dimension, regardless of how the status of that dimension may be limited. For example, suppose <span class="italic">loans</span> is dimensioned by <code dir="ltr">year</code>, and the values of <code dir="ltr">year</code> range from <code dir="ltr">Yr95</code> to <code dir="ltr">Yr99</code>. The calculation always begins with <code dir="ltr">Yr95</code>, even when you limit the status of <code dir="ltr">year</code> so that it does not include <code dir="ltr">Yr95</code>.</p>
<p>However, when <span class="italic">loans</span> is not dimensioned by the time dimension, the VPMTSCHED calculation begins with the first value in the current status of the time dimension. For example, suppose <span class="italic">loans</span> is not dimensioned by <code dir="ltr">year</code>, but <code dir="ltr">year</code> is specified as <span class="italic">time-dimension.</span> When the status of <code dir="ltr">year</code> is limited to <code dir="ltr">Yr97</code> to <code dir="ltr">Yr99</code>, the calculation begins with <code dir="ltr">Yr97</code> instead of <code dir="ltr">Yr95</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3469"></a>Examples</p>
<div id="OLADM2030" class="example">
<p class="titleinexample"><a id="sthref3470"></a>Example 8-165 Using VPMTSCHED</p>
<p>The following statements create two variables called <code dir="ltr">loans</code> and <code dir="ltr">rates</code>.</p>
<pre dir="ltr">DEFINE loans DECIMAL &lt;year&gt;
DEFINE rates DECIMAL &lt;year&gt;
</pre>
<p>Suppose you assign the following values to the variables <code dir="ltr">loans</code> and <code dir="ltr">rates</code>.</p>
<pre dir="ltr">YEAR             LOANS      RATES
-------------- ---------- ----------
Yr95               100.00       0.05
Yr96               200.00       0.06
Yr97               300.00       0.07
Yr98                 0.00       0.07
Yr99                 0.00       0.07
</pre>
<p>For each year, <code dir="ltr">loans</code> contains the initial value of the variable-rate loan incurred during that year. For each year, the value of <code dir="ltr">rates</code> is the interest rate that is charged for that year on any loans incurred or outstanding in that year.</p>
<p>The following statement specifies that each loan is to be paid off in three payments, calculates the schedule for paying off the principal and interest on the loans,</p>
<pre dir="ltr">REPORT W 20 HEADING &#39;Payment&#39; VPMTSCHED(loans, rates, 3, year)
</pre>
<p>and produces the following report.</p>
<pre dir="ltr">YEAR                        Payment
-------------- --------------------
Yr95                          36.72
Yr96                         112.06
Yr97                         227.78
Yr98                         190.19
Yr99                         114.32
</pre>
<p>The payment for 1995 is the principal due on the loan of $100 incurred in 1995, plus interest on the loan at 5 percent. The payment due in 1996 is the sum of the second payment of principal on the loan incurred in 1995, plus the first payment of principal on the loan of $200 incurred in 1996, plus interest on the remaining principals of both loans at 6 percent. The 1997 payment is the sum of the third and final principal payment on the loan incurred in 1995, the second of the three principal payments on the 1996 loan, the first payment of principal on the loan of $300 incurred in 1997, plus interest on the remaining principals of all three loans at 7 percent. Because the 1995 loan is paid off in 1997, the payment for 1998 covers the principal and interest for the 1996 and 1997 loans. The payment for 1999 is the final payment of principal and interest for the 1997 loan.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCBDHJ"></a>
<div id="OLADM2031" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">VSIZE</h2>
<p>The VSIZE function<a id="sthref3471"></a><a id="sthref3472"></a><a id="sthref3473"></a><a id="sthref3474"></a> returns the number of bytes in the internal representation of an expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3475"></a>Return Value</p>
<p>INTEGER</p>
<p>If <span class="italic">expr</span> is null, then this function returns NA.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3476"></a>Syntax</p>
<p class="synopsis">VSIZE(<span class="italic">expr</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3477"></a>Parameters</p>
<dl>
<dt><span class="italic">expr</span></dt>
<dd>
<p>An expression of any data type.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79259"></a>
<div id="OLADM716" class="refsect1">
<h2 class="refsect1">WEEKOF</h2>
<p><a id="sthref3478"></a>The WEEKOF function returns an <code dir="ltr">INTEGER</code> in the range of 1 to 53, which gives the week of the year in which a specified date falls. The result has the same dimensions as the specified <code dir="ltr">DATE</code> expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3479"></a>Return Value</p>
<p><code dir="ltr">INTEGER</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3480"></a>Syntax</p>
<p class="synopsis">WEEKOF(<span class="italic">date-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3481"></a>Parameters</p>
<dl>
<dt><span class="italic">date-expression</span></dt>
<dd>
<p>An expression that has the DATE data type, or a text expression that specifies a date. The values of the text expression are converted automatically to DATE values, using the current setting of the DATEORDER option to resolve any ambiguity.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3482"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2032"></a>Determining Week 1</p>
<p>The value of WEEKDSYSNEWYEAR specifies how many days of the new year there must be in the week for WEEKOF to consider it to be week 1 of the new year. For example, when January 1 is on a Wednesday, then the week of December 29 to January 4 has four days in the new year. WEEKDSYSNEWYEAR must therefore have a value of 4 or less for that week to be counted as week 1. This determination of week 1 affects the numbering of all weeks in the year.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3483"></a>Examples</p>
<div id="OLADM2033" class="example">
<p class="titleinexample"><a id="sthref3484"></a>Example 8-166 Finding Today&#39;s Week</p>
<p>The following statement sends the week of the year in which today&#39;s date falls to the current outfile.</p>
<pre dir="ltr">SHOW WEEKOF(TODAY)
</pre>
<p>When today&#39;s date is August 5, 1996, which is a Monday, this statement produces the following output.</p>
<pre dir="ltr">32
</pre></div>
<!-- class="example" -->
<div id="OLADM2034" class="example">
<p class="titleinexample"><a id="sthref3485"></a>Example 8-167 Finding the Week of a Date</p>
<p>The following statement sends the week of the year in which July 4 falls in 1996 to the current outfile.</p>
<pre dir="ltr">SHOW WEEKOF(&#39;04JUL96&#39;)
</pre>
<p>This statement produces the following output.</p>
<pre dir="ltr">27
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1005135"></a>
<div id="OLADM717" class="refsect1">
<h2 class="refsect1">WIDTH_BUCKET</h2>
<p><a id="sthref3486"></a><a id="sthref3487"></a>For a given expression, the WIDTH_BUCKET function returns the bucket number into which the value of this expression would fall after being evaluated.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3488"></a>Return Value</p>
<p>An <code dir="ltr">INTEGER</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3489"></a>Syntax</p>
<p class="synopsis">WIDTH_BUCKET (<span class="italic">expr</span> , <span class="italic">min_value</span> , <span class="italic">max_value</span> , <span class="italic">num_buckets</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3490"></a>Parameters</p>
<dl>
<dt><span class="italic">expr</span></dt>
<dd>
<p>The expression for which the histogram is being created. This expression must evaluate to a number or a datetime value. When <span class="italic">expr</span> evaluates to <code dir="ltr">NA</code>, then the expression returns <code dir="ltr">NA</code>.</p>
</dd>
<dt><span class="italic">min_value</span></dt>
<dd>
<p>An expression that resolves to the minimum end point of the acceptable range for <span class="italic">expr</span>. This expression must evaluate to number or datetime values, and can<span class="italic">not</span> evaluate to <code dir="ltr">NA</code>.</p>
</dd>
<dt><span class="italic">max_value</span></dt>
<dd>
<p>An expression that resolves to the maximum end point of the acceptable range for <span class="italic">expr</span>. This expression must evaluate to number or datetime values, and can<span class="italic">not</span> evaluate to <code dir="ltr">NA</code>.</p>
</dd>
<dt><span class="italic">num_buckets</span></dt>
<dd>
<p>An expression that resolves to a constant indicating the number of buckets. This expression must evaluate to a positive <code dir="ltr">INTEGER</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3491"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2035"></a>Underflow and Overflow Buckets</p>
<p>WIDTH_BUCKET also creates (when needed) an underflow bucket numbered <code dir="ltr">0</code> and an overflow bucket numbered <span class="italic">num_buckets</span><code dir="ltr">+1</code>. These buckets handle values less than <span class="italic">min_value</span> and more than <span class="italic">max_value</span> and are helpful in checking the reasonableness of endpoints.</p>
<p class="subhead2"><a id="OLADM2036"></a>Constructing Equiwidth Histograms</p>
<p>WIDTH_BUCKET lets you construct equiwidth histograms, in which the histogram range is divided into intervals that have identical size. (Compare this function with NTILE, which creates equiheight histograms.) Ideally each bucket is a &#34;closed-open&#34; interval of the real number line. For example, a bucket can be assigned to cores between <code dir="ltr">10.00</code> and <code dir="ltr">19.999...</code> to indicate that <code dir="ltr">10</code> is included in the interval and <code dir="ltr">20</code> is excluded. A bucket of this size is sometimes denoted as <code dir="ltr">(10,</code> <code dir="ltr">20)</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3492"></a>Examples</p>
<div id="OLADM2037" class="example">
<p class="titleinexample"><a id="sthref3493"></a>Example 8-168 Grouping Values Into a Ten-Bucket Histogram</p>
<p>The following example limits the customers to those customers who have a <code dir="ltr">customer_id</code> of 825 through 853 and, then, creates a ten-bucket histogram on the <code dir="ltr">credit_limit</code> variable for those customer. It uses the <code dir="ltr">credit_group</code> formula to calculate the bucket number for each customer. Customers with credit limits greater than the maximum value are assigned to the overflow bucket, 11.</p>
<pre dir="ltr">DESCRIBE
DEFINE customer_id DIMENSION INTEGER
DEFINE cust_last_name VARIABLE TEXT &lt;customer_id&gt;
DEFINE credit_limit VARIABLE INTEGER &lt;customer_id&gt;
DEFINE credit_group FORMULA INTEGER &lt;customer_id&gt; 
EQ WIDTH_BUCKET(credit_limit, 100, 5000, 10)

LIMIT customer_id to 825 TO 853
REPORT cust_last_name, credit_limit, credit_group

CUSTOMER_ID     CUST_LAST_NAME    CREDIT_LIMIT     CREDIT_GROUP
-------------- ---------------- ---------------- ----------------
           825 Dreyfuss                      500                1
           826 Barkin                        500                1
           827 Siegel                        500                1
           828 Minnelli                    2,300                5
           829 Hunter                      2,300                5
           830 Dutt                        3,500                7
           831 Bel Geddes                  3,500                7
           832 Spacek                      3,500                7
           833 Moranis                     3,500                7
           834 Idle                        3,500                7
           835 Eastwood                    1,200                3
           836 Berenger                    1,200                3
           837 Stanton                     1,200                3
           838 Nicholson                   3,500                7
           839 Johnson                     3,500                7
           840 Elliott                     1,400                3
           841 Boyer                       1,400                3
           842 Stern                       1,400                3
           843 Oates                         700                2
           844 Julius                        700                2
           845 Fawcett                     5,000               11
           846 Brando                      5,000               11
           847 Streep                      5,000               11
           848 Olmos                       1,800                4
           849 Kaurusmdki                  1,800                4
           850 Finney                      2,300                5
           851 Brown                       2,300                5
           852 Tanner                      2,300                5
           853 Palin                         400                1
 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1009579"></a>
<div id="OLADM718" class="refsect1">
<h2 class="refsect1">WKSDATA</h2>
<p><a id="sthref3494"></a><a id="sthref3495"></a><a id="sthref3496"></a>The WKSDATA function returns the data type of each individual cell in a worksheet or the data type of a program argument with the WORKSHEET data type. You can use WKSDATA to help in the process of transferring labels and data between text files and Oracle OLAP.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3497"></a>Return Value</p>
<p>The data type of individual worksheet cells.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3498"></a>Syntax</p>
<p class="synopsis">WKSDATA(<span class="italic">worksheetname</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3499"></a>Parameters</p>
<dl>
<dt><span class="italic">worksheetname</span></dt>
<dd>
<p>Specifies the name of an Oracle OLAP worksheet object, such as <code dir="ltr">workunits</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3500"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2038"></a>Checking One or More Cells</p>
<p>You can use WKSDATA to return the data type of a single worksheet cell by using a qualified data reference for the cell, as in the following format.</p>
<p class="synopsis">SHOW&nbsp;WKSDATA(<span class="italic">worksheetname</span>(WKSROW&nbsp;<span class="italic">n</span>,&nbsp;WKSCOL&nbsp;<span class="italic">n</span>))</p>
<p>Or you can use a REPORT statement in this format with WKSDATA to provide the contents of all the cells in a worksheet side-by-side with their data types.</p>
<p class="synopsis">REPORT&nbsp;<span class="italic">worksheetname&nbsp;</span>WKSDATA(<span class="italic">worksheetname</span>)</p>
<p class="subhead2"><a id="OLADM2039"></a>Multiple Data Types</p>
<p>Always use care when using worksheet objects in expressions. Because a worksheet object can contain multiple data types, the actual data type of individual worksheet cells is not considered when an OLAP DML statement is compiled. Instead, code is generated to convert each worksheet cell to the data type it expects at that position in the expression which may lead to unexpected results in some cases.</p>
<p class="subhead2"><a id="OLADM2040"></a>Text Data</p>
<p>All textual data (as opposed to numeric, Boolean, date, and so on) in a worksheet has the TEXT data type. The ID and NTEXT data types are not supported in worksheets.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3501"></a>Examples</p>
<div id="OLADM2041" class="example">
<p class="titleinexample"><a id="sthref3502"></a>Example 8-169 Checking Data Imported from a Worksheet</p>
<p>Suppose you have imported a flat data file into a worksheet called <code dir="ltr">workunits</code>. You can use WKSDATA to provide a quick way to determine which areas to treat as dimension values and which as data values in bringing the worksheet into standard OLAP workspace format.</p>
<p>This statement produces this output following the statement that shows the data in <code dir="ltr">workunits</code></p>
<pre dir="ltr">REPORT workunits

               -----------------WORKUNITS-----------------
               ------------------WKSCOL-------------------
WKSROW             1          2          3          4
-------------- ---------- ---------- ---------- ----------
             1         NA Jan96      Feb96      Mar96
             2 Tents             307        209        277
             3 Canoes            352        411        488
             4 Racquets        1,024      1,098      1,144
             5 Sportswear      1,141      1,262      1,340
             6 Footwear        2,525      2,660      2,728
</pre>
<p>This statement uses the WKSDATA function to produce the report following the statement, which shows the data type of each cell in the worksheet.</p>
<pre dir="ltr">REPORT WKSDATA(workunits)

               ------------WKSDATA(WORKUNITS)-------------
               ------------------WKSCOL-------------------
WKSROW             1          2          3          4
-------------- ---------- ---------- ---------- ----------
             1         NA TEXT       TEXT       TEXT
             2 TEXT       INTEGER    INTEGER    INTEGER
             3 TEXT       INTEGER    INTEGER    INTEGER
             4 TEXT       INTEGER    INTEGER    INTEGER
             5 TEXT       INTEGER    INTEGER    INTEGER
             6 TEXT       INTEGER    INTEGER    INTEGER 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABIBADI"></a>
<div id="OLADM719" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">WRITABLE</h2>
<p>The WRITABLE function returns <code dir="ltr">TRUE</code> when the user has WRITE permission for the object and <code dir="ltr">FALSE</code> when the user does not or when the object is not a variable, worksheet object, relation, or valueset.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3503"></a>Return value</p>
<p><code dir="ltr">BOOLEAN</code></p>
<p>The result has the same dimensions as <span class="italic">expression</span>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3504"></a>Syntax</p>
<p class="synopsis">WRITABLE (<span class="italic">expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3505"></a>Parameters</p>
<dl>
<dt><span class="italic">expression</span></dt>
<dd>
<p>An expression that is the name or QDR of an object that has values (that is, a variable, relation, valueset, or worksheet object).</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGAECE"></a>
<div id="OLADM720" class="refsect1">
<h2 class="refsect1">YYOF</h2>
<p><a id="sthref3506"></a>The YYOF function returns an <code dir="ltr">INTEGER</code> in the range of 1000 to 9999, giving the year in which a specified date falls. The result returned by YYOF has the same dimensions as the specified date expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3507"></a>Return Value</p>
<p><code dir="ltr">INTEGER</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3508"></a>Syntax</p>
<p class="synopsis">YYOF(<span class="italic">date-expression</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3509"></a>Parameters</p>
<dl>
<dt><span class="italic">date-expression</span></dt>
<dd>
<p>An expression that has the DATE data type, or a text expression that specifies a date. The values of the text expression are converted automatically to DATE values, using the current setting of the DATEORDER option to resolve any ambiguity.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3510"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2042"></a>Commas in Year Values</p>
<p>When the COMMAS option is set to YES when you display the value returned by YYOF, the year is displayed with a comma separating the thousands (for example, <code dir="ltr">1,996</code>). To avoid this, you can set the COMMAS option to <code dir="ltr">NO</code> before displaying the year.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3511"></a>Examples</p>
<div id="OLADM2043" class="example">
<p class="titleinexample"><a id="sthref3512"></a>Example 8-170 Obtaining the Current Year</p>
<p>The following statements send the year in which today&#39;s date falls to the current outfile.</p>
<pre dir="ltr">COMMAS = NO
SHOW YYOF(TODAY)
</pre>
<p>When today&#39;s date is January 15, 1996, these statements produce the following output.</p>
<pre dir="ltr">1996
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3608">
<tr>
<td class="cellalignment3617">
<table class="cellalignment3613">
<tr>
<td class="cellalignment3612"><a href="dml_functions_1.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3612"><a href="dml_commands_1.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3620">
<table class="cellalignment3611">
<tr>
<td class="cellalignment3612"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3612"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3612"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3612"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3612"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3612"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>