<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-113942"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20the%20ttIsql%20Utility"></a><title>Using the ttIsql Utility</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748"/>
<meta name="dcterms.created" content="2014-09-30T15:13:4Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database Operations Guide"/>
<meta name="dcterms.identifier" content="E21633-12"/>
<meta name="dcterms.isVersionOf" content="TTOPR"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="globalization.htm" title="Previous" type="text/html"/>
<link rel="Next" href="trans.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21633-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/16</span> <!-- End Header -->
<div id="TTOPR306" class="chapter"><a id="CHDCIAEA"></a>
<h1 class="chapter"><span class="secnum">6</span> Using the <a id="sthref636"></a>ttIsql Utility</h1>
<p>The TimesTen <code>ttIsql</code> utility is a general tool for working with a TimesTen data source. The <code>ttIsql</code> command line interface is used to execute SQL statements and built-in <code>ttIsql</code> commands to perform various operations. Some common tasks that are typically accomplished using <code>ttIsql</code> include:</p>
<ul>
<li>
<p>Database setup and maintenance. Creating tables and indexes, altering existing tables and updating table statistics can be performed quickly and easily using <code>ttIsql</code>.</p>
</li>
<li>
<p>Retrieval of information on database structures. The definitions for tables, indexes and cache groups can be retrieved using built-in <code>ttIsql</code> commands. In addition, the current size and state of the database can be displayed.</p>
</li>
<li>
<p>Optimizing database operations. The <code>ttIsql</code> utility can be used to alter and display query optimizer plans for the purpose of tuning SQL operations. The time required to execute various ODBC function calls can also be displayed.</p>
</li>
</ul>
<p>The following sections describe how the <code>ttIsql</code> utility is used to perform these types of tasks:</p>
<ul>
<li>
<p><a href="#BABGJFAE">Batch mode vs. interactive mode</a></p>
</li>
<li>
<p><a href="#BABIICDI">Defining default settings with the TTISQL environment variable</a></p>
</li>
<li>
<p><a href="#BABJDJBJ">Customizing the ttIsql command prompt</a></p>
</li>
<li>
<p><a href="#BABFBECJ">Using the ttIsql online help</a></p>
</li>
<li>
<p><a href="#BABEADBD">Using the ttIsql &#39;editline&#39; feature for UNIX only</a></p>
</li>
<li>
<p><a href="#BABJIGFE">Using the ttIsql command history</a></p>
</li>
<li>
<p><a href="#BJEJEIHE">Using the ttIsql edit command</a></p>
</li>
<li>
<p><a href="#BABCFFIH">Working with character sets</a></p>
</li>
<li>
<p><a href="#BABBHIDB">Displaying database structure information</a></p>
</li>
<li>
<p><a href="#CHDEJBFD">Listing database objects by object type</a></p>
</li>
<li>
<p><a href="#BABEACHF">Viewing and setting connection attributes</a></p>
</li>
<li>
<p><a href="#BABBGIJA">Working with transactions</a></p>
</li>
<li>
<p><a href="#BABEFDJF">Working with prepared and parameterized SQL statements</a></p>
</li>
<li>
<p><a href="#CHDCEFFF">Using, declaring, and setting variables</a></p>
</li>
<li>
<p><a href="#CHDDHFFE">Creating and executing PL/SQL blocks</a></p>
</li>
<li>
<p><a href="#CHDFDAJD">Passing data from PL/SQL using OUT parameters</a></p>
</li>
<li>
<p><a href="#CHDDIFEE">Conditional control with the IF-THEN-ELSE command construct</a></p>
</li>
<li>
<p><a href="#CHDEDHII">Loading data from an Oracle database into a TimesTen table</a></p>
</li>
<li>
<p><a href="#BABJHCCE">Viewing and changing query optimizer plans</a></p>
</li>
<li>
<p><a href="#CHDIDIBB">Managing ODBC functions</a></p>
</li>
<li>
<p><a href="#CHDDEHID">Error recovery with WHENEVER SQLERROR</a></p>
</li>
</ul>
<p>For more information on <code>ttIsql</code> commands, see the <a class="olink TTREF342" href="../TTREF/util.htm#TTREF342">&#34;ttIsql&#34;</a> section in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<a id="BABGJFAE"></a>
<div id="TTOPR307" class="sect1">
<h2 class="sect1">Batch <a id="sthref637"></a><a id="sthref638"></a><a id="sthref639"></a>mode vs. interactive mode</h2>
<p>The <code>ttIsql</code> utility can be used in two distinctly different ways: batch mode or interactive mode. When <code>ttIsql</code> is used in interactive mode, users type commands directly into <code>ttIsql</code> from the console. When <code>ttIsql</code> is used in batch mode, a prepared script of <code>ttIsql</code> commands is executed by specifying the name of the file containing the commands.</p>
<p>Batch mode is commonly used for the following types of tasks:</p>
<ul>
<li>
<p>Performing periodic maintenance operations including the updating of table statistics, compacting the database and purging log files.</p>
</li>
<li>
<p>Initializing a database by creating tables, indexes and cache groups and then populating the tables with data.</p>
</li>
<li>
<p>Generating simple reports by executing common queries.</p>
</li>
</ul>
<p>Interactive mode is suited for the following types of tasks:</p>
<ul>
<li>
<p>Experimenting with TimesTen features, testing design alternatives and improving query performance.</p>
</li>
<li>
<p>Solving database problems by examining database statistics.</p>
</li>
<li>
<p>Any other database tasks that are not performed routinely.</p>
</li>
</ul>
<p>By default, when starting <code>ttIsql</code> from the shell, <code>ttIsql</code> is in interactive mode. The <code>ttIsql</code> utility prompts you to type in a valid <code>ttIsql</code> built-in command or SQL statement by printing the <code>Command&gt;</code> prompt. The following example starts ttIsql in interactive mode and then connects to a TimesTen database by executing the <code>connect</code> command with the <code>MY_DSN</code> DSN.</p>
<pre>C:\&gt;ttIsql

Copyright (c) 1996-2013, Oracle.  All rights reserved.
Type ? or &#34;help&#34; for help, type &#34;exit&#34; to quit ttIsql.

Command&gt; connect MY_DSN;
Connection successful: DSN=MY_DSN;DataStore=E:\ds\MY_DSN; 
DRIVER=E:\WINNT\System32\TTdv1122.dll;
(Default setting AutoCommit=1)

Command&gt;
</pre>
<p>When connecting to the database using <code>ttIsql</code>, you can also specify the DSN or connection string on the <code>ttIsql</code> command line. The <code>connect</code> command is implicitly executed.</p>
<pre>C:\&gt;ttIsql -connstr &#34;DSN=MY_DSN&#34;

Copyright (c) 1996-2013, Oracle.  All rights reserved.
Type ? or &#34;help&#34; for help, type &#34;exit&#34; to quit ttIsql.

connect &#34;DSN=MY_DSN&#34;;
Connection successful: DSN=MY_DSN;DataStore=E:\ds\MY_DSN; 
DRIVER=E:\WINNT\System32\TTdv1122.dll;
(Default setting AutoCommit=1)

Command&gt;
</pre>
<p>Batch mode can be accessed in two different ways. The most common way is to specify the <code>-f</code> option on the <code>ttIsql</code> command line followed by the name of file to run.</p>
<p>For example, executing a file containing a <code>CREATE TABLE</code> statement looks like the following:</p>
<pre>C:\&gt;ttIsql -f create.sql -connstr &#34;DSN=MY_DSN&#34;

Copyright (c) 1996-2013, Oracle.  All rights reserved.
Type ? or &#34;help&#34; for help, type &#34;exit&#34; to quit ttIsql.

connect &#34;DSN=MY_DSN&#34;
Connection successful: DSN=MY_DSN;DataStore=E:\ds\MY_DSN; 
DRIVER=E:\WINNT\System32\TTdv1122.dll;
(Default setting AutoCommit=1)

run &#34;create.sql&#34;

CREATE TABLE LOOKUP (KEY NUMBER NOT NULL PRIMARY KEY, VALUE CHAR (64))

exit;
Disconnecting...
Done.

C:\&gt;
</pre>
<p>The other way to use batch mode is to enter the <code>run</code> command directly from the interactive command prompt. The <code>run</code> command is followed by the name of the file containing <code>ttIsql</code> built-in commands and SQL statements to execute:</p>
<pre>Command&gt; run &#34;create.sql&#34;;

CREATE TABLE LOOKUP (KEY NUMBER NOT NULL PRIMARY KEY, VALUE CHAR (64))
Command&gt;
</pre></div>
<!-- class="sect1" -->
<a id="BABIICDI"></a>
<div id="TTOPR325" class="sect1">
<h2 class="sect1">Defining default settings with the <a id="sthref640"></a><a id="sthref641"></a>TTISQL environment variable</h2>
<p>The <code>ttIsql</code> utility can be customized to automatically execute a set of command line options every time a <code>ttIsql</code> session is started from the command prompt. This is accomplished by setting an environment variable called <code>TTISQL</code> to the value of the <code>ttIsql</code> command line that you prefer. A summary of <code>ttIsql</code> command line options is shown below. For a complete description of the <code>ttIsql</code> command line options, see the <a class="olink TTREF342" href="../TTREF/util.htm#TTREF342">&#34;ttIsql&#34;</a> section in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<pre>Usage: ttIsql [-h | -help | -helpcmds | -helpfull | -V]
        ttIsql [-f &lt;filename&gt;] 
               [-v &lt;verbosity&gt;] 
               [-e &lt;commands&gt;]
               [-interactive] 
               [-N &lt;ncharEncoding&gt;] 
               [-wait]
               [{&lt;DSN&gt; | -connstr &lt;connection_string&gt;}]
</pre>
<p>The <code>TTISQL</code> environment variable has the same syntax requirements as the <code>ttIsql</code> command line. When <code>ttIsql</code> starts up it reads the value of the <code>TTISQL</code> environment variable and applies all options specified by the variable to the current <code>ttIsql</code> session. If a particular command line option is specified in both the <code>TTISQL</code> environment variable and the command line, then the command line version always takes precedence.</p>
<p>The procedure for setting the value of an environment variable differs based on the platform and shell that <code>ttIsql</code> is started from. As an example, setting the <code>TTISQL</code> environment variable on Windows could look like this:</p>
<pre>C:\&gt;set TTISQL=-connStr &#34;DSN=MY_DSN&#34; -e &#34;autocommit 0;dssize;&#34;
</pre>
<p>In this example, <code>ttIsql</code> automatically connects to a DSN called <code>MY_DSN</code>, turns off autocommit, and displays the size of the database, as shown below:</p>
<pre>C:\&gt;ttIsql

Copyright (c) 1996-2013, Oracle.  All rights reserved.
Type ? or &#34;help&#34; for help, type &#34;exit&#34; to quit ttIsql.

Command&gt; connect &#34;DSN=MY_DSN&#34;;
Connection successful: DSN=MY_DSN;DataStore=E:\ds\MY_DSN;
DRIVER=E:\WINNT\System32\TTdv1122.dll;
(Default setting AutoCommit=1)
Command&gt; autocommit 0;
Command&gt; dssize;
The following values are in KB:
 
  PERM_ALLOCATED_SIZE:      40960
  PERM_IN_USE_SIZE:         9453
  PERM_IN_USE_HIGH_WATER:   9453
  TEMP_ALLOCATED_SIZE:      32768
  TEMP_IN_USE_SIZE:         9442
  TEMP_IN_USE_HIGH_WATER:   9885
Command&gt;
</pre></div>
<!-- class="sect1" -->
<a id="BABJDJBJ"></a>
<div id="TTOPR308" class="sect1">
<h2 class="sect1">Customizing the ttIsql command prompt</h2>
<p>You can <a id="sthref642"></a>customize the <code>ttIsql</code> command prompt by using the <code>set</code> command with the <code>prompt</code> attribute:</p>
<pre>Command&gt; set prompt MY_DSN;
MY_DSN
</pre>
<p>You can specify a string format (<code>%c</code>) that returns the name of the current connection:</p>
<pre>Command&gt; set prompt %c;
con1
</pre>
<p>If you want to embed spaces, you must quote the string:</p>
<pre>Command&gt; set prompt &#34;MY_DSN %c&gt; &#34;;
MY_DSN con1&gt;
</pre></div>
<!-- class="sect1" -->
<a id="BABFBECJ"></a>
<div id="TTOPR309" class="sect1">
<h2 class="sect1">Using the ttIsql <a id="sthref643"></a><a id="sthref644"></a><a id="sthref645"></a>online help</h2>
<p>The <code>ttIsql</code> utility has an online version of command syntax definitions and descriptions for all built-in <code>ttIsql</code> commands. To access this online help from within <code>ttIsql</code> use the <code>help</code> command. To view a detailed description of any built-in <code>ttIsql</code> commands type the <code>help</code> command followed by one or more <code>ttIsql</code> commands to display help for. The example below displays the online description for the <code>connect</code> and <code>disconnect</code> commands.</p>
<pre>Command&gt; help connect disconnect
 
Arguments in &lt;&gt; are required.
Arguments in [] are optional.
 
Command Usage: connect [DSN|connection_string] [as &lt;connection_id&gt;]
Command Aliases: (none)
Description: Connects to the data source specified by the optional DSN or 
connection string argument. If an argument is not given, then the DSN or 
connection string from the last successful connection is used. A connection ID 
may optionally be specified, for use in referring to the connection when multiple 
connections are enabled. The DSN is used as the default connection ID. If that ID 
is already in use, the connection will be assigned the ID &#34;conN&#34;, where N is some 
number larger than 0.
Requires an active connection: NO
Requires autocommit turned off: NO
Reports elapsed execution time: YES
Works only with a TimesTen data source: NO
Example: connect; -or- connect RunData; -or- connect &#34;DSN=RunData&#34;;
-or- connect RunData as rundata1;
 
Command Usage: disconnect [all]
Command Aliases: (none)
Description: Disconnects from the currently connected data source or all 
connections when the &#34;all&#34; argument is included. If a transaction is active when 
disconnecting then the transaction will be rolled back automatically. If a 
connection exists when executing the &#34;bye&#34;, &#34;quit&#34; or &#34;exit&#34; commands then the 
&#34;disconnect&#34; command will be executed automatically.
Requires an active connection: NO
Requires autocommit turned off: NO
Reports elapsed execution time: YES
Works only with a TimesTen data source: NO
Example: disconnect;
</pre>
<p>To view a short description of all <code>ttIsql</code> built-in commands type the <code>help</code> command without an argument. To view a detailed description of all built-in <code>ttIsql</code> commands type the <code>help</code> command followed by the <code>all</code> argument.</p>
<p>To view the list of attributes that can be set or shown by using <code>ttIsql</code>, enter:</p>
<pre>Command&gt; help attributes
</pre></div>
<!-- class="sect1" -->
<a id="BABEADBD"></a>
<div id="TTOPR310" class="sect1">
<h2 class="sect1">Using the ttIsql &#39;<a id="sthref646"></a><a id="sthref647"></a>editline&#39; feature for UNIX only</h2>
<p>On UNIX systems, you can use the &#39;editline&#39; library to set up emacs (default) or vi bindings that enable you to scroll through previous <code>ttIsql</code> commands, as well as edit and resubmit them. This feature is not available or needed on Windows.</p>
<p>To disable the &#39;editline&#39; feature in <code>ttIsql</code>, use the <code>ttIsql</code> command <code>set editline off</code>.</p>
<p>The set up and keystroke information is described for each type of editor:</p>
<ul>
<li>
<p><a href="#BABEDIJE">Emacs binding</a></p>
</li>
<li>
<p><a href="#BABJBAEG">vi binding</a></p>
</li>
</ul>
<a id="BABEDIJE"></a>
<div id="TTOPR311" class="sect2">
<h3 class="sect2">Emacs binding</h3>
<p>To use the emacs binding, create a file <code>~/.editrc</code> and put &#34;<code>bind</code>&#34; on the last line of the file, run <code>ttIsql</code>. The editline lib prints the current bindings.</p>
<p>The keystrokes when using <code>ttIsql</code> with the emacs binding are:</p>
<div class="inftblhruleinformal">
<table class="cellalignment3233" title="keystrokes used in ttIsql with the emacs binding" summary="This table describes the actions of keystrokes used in ttIsql with the emacs binding." dir="ltr">
<thead>
<tr class="cellalignment3224">
<th class="cellalignment3234" id="r1c1-t2">Keystroke</th>
<th class="cellalignment3234" id="r1c2-t2">Action</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r2c1-t2" headers="r1c1-t2">&lt;Left-Arrow&gt;</td>
<td class="cellalignment3230" headers="r2c1-t2 r1c2-t2">Move the insertion point left. Back up.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r3c1-t2" headers="r1c1-t2">&lt;Right-Arrow&gt;</td>
<td class="cellalignment3230" headers="r3c1-t2 r1c2-t2">Move the insertion point right. Move forward.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r4c1-t2" headers="r1c1-t2">&lt;Up-Arrow&gt;</td>
<td class="cellalignment3230" headers="r4c1-t2 r1c2-t2">Scroll to the command prior to the one being displayed. Places the cursor at the end of the line.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r5c1-t2" headers="r1c1-t2">&lt;Down-Arrow&gt;</td>
<td class="cellalignment3230" headers="r5c1-t2 r1c2-t2">Scroll to a more recent command history item and put the cursor at the end of the line.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r6c1-t2" headers="r1c1-t2">&lt;Ctrl-A&gt;</td>
<td class="cellalignment3230" headers="r6c1-t2 r1c2-t2">Move the insertion point to the beginning of the line.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r7c1-t2" headers="r1c1-t2">&lt;Ctrl-E&gt;</td>
<td class="cellalignment3230" headers="r7c1-t2 r1c2-t2">Move the insertion point to the end of the line.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r8c1-t2" headers="r1c1-t2">&lt;Ctrl-K&gt;</td>
<td class="cellalignment3230" headers="r8c1-t2 r1c2-t2">&#34;Kill&#34; (Save and erase) the characters on the command line from the current position to the end of the line.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r9c1-t2" headers="r1c1-t2">&lt;Ctrl-Y&gt;</td>
<td class="cellalignment3230" headers="r9c1-t2 r1c2-t2">&#34;Yank&#34; (Restore) the characters previously saved and insert them at the current insertion point.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r10c1-t2" headers="r1c1-t2">&lt;Ctrl-F&gt;</td>
<td class="cellalignment3230" headers="r10c1-t2 r1c2-t2">Forward char - move forward 1 (see Right Arrow).</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r11c1-t2" headers="r1c1-t2">&lt;Ctrl-B&gt;</td>
<td class="cellalignment3230" headers="r11c1-t2 r1c2-t2">Backward char - move back 1 (see Left Arrow).</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r12c1-t2" headers="r1c1-t2">&lt;Ctrl-P&gt;</td>
<td class="cellalignment3230" headers="r12c1-t2 r1c2-t2">Previous History (see Up Arrow).</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r13c1-t2" headers="r1c1-t2">&lt;Ctrl-N&gt;</td>
<td class="cellalignment3230" headers="r13c1-t2 r1c2-t2">Next History (see up Down Arrow).</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect2" -->
<a id="BABJBAEG"></a>
<div id="TTOPR312" class="sect2">
<h3 class="sect2">vi binding</h3>
<p>To use the vi bindings, create a file <code>${HOME}/.editrc</code> and put &#34;<code>bind-v</code>&#34; in the file, run <code>ttIsql</code>. To get the current settings, create a file <code>${HOME}/.editrc</code> and put &#34;<code>bind</code>&#34; on the last line of the file. When you execute <code>ttIsql</code>, the editline lib prints the current bindings.</p>
<p>The keystrokes when using <code>ttIsql</code> with the vi binding are:</p>
<div class="inftblhruleinformal">
<table class="cellalignment3233" title="keystrokes used in ttIsql with the vi binding" summary="This table describes the actions of keystrokes used in ttIsql with the vi binding." dir="ltr">
<thead>
<tr class="cellalignment3224">
<th class="cellalignment3234" id="r1c1-t3">Keystroke</th>
<th class="cellalignment3234" id="r1c2-t3">Action</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r2c1-t3" headers="r1c1-t3">&lt;Left-Arrow&gt;, h</td>
<td class="cellalignment3230" headers="r2c1-t3 r1c2-t3">Move the insertion point left (back up).</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r3c1-t3" headers="r1c1-t3">&lt;Right-Arrow&gt;, l</td>
<td class="cellalignment3230" headers="r3c1-t3 r1c2-t3">Move the insertion point right (forward).</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r4c1-t3" headers="r1c1-t3">&lt;Up-Arrow&gt;, k</td>
<td class="cellalignment3230" headers="r4c1-t3 r1c2-t3">Scroll to the prior command in the history and put the cursor at the end of the line.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r5c1-t3" headers="r1c1-t3">&lt;Down-Arrow&gt;, j</td>
<td class="cellalignment3230" headers="r5c1-t3 r1c2-t3">Scroll to the next command in the history and put the cursor at the end of the line.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r6c1-t3" headers="r1c1-t3">ESC</td>
<td class="cellalignment3230" headers="r6c1-t3 r1c2-t3">Vi Command mode.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r7c1-t3" headers="r1c1-t3">0, $</td>
<td class="cellalignment3230" headers="r7c1-t3 r1c2-t3">Move the insertion point to the beginning of the line, Move to end of the line.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r8c1-t3" headers="r1c1-t3">i, I</td>
<td class="cellalignment3230" headers="r8c1-t3 r1c2-t3">Insert mode, Insert mode at beginning of the line.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r9c1-t3" headers="r1c1-t3">a, A</td>
<td class="cellalignment3230" headers="r9c1-t3 r1c2-t3">Add (&#34;Insert after&#34;) mode, Append at end of line</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r10c1-t3" headers="r1c1-t3">R</td>
<td class="cellalignment3230" headers="r10c1-t3 r1c2-t3">Replace mode.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r11c1-t3" headers="r1c1-t3">C</td>
<td class="cellalignment3230" headers="r11c1-t3 r1c2-t3">Change to end of line.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r12c1-t3" headers="r1c1-t3">B</td>
<td class="cellalignment3230" headers="r12c1-t3 r1c2-t3">Move to previous word.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r13c1-t3" headers="r1c1-t3">e</td>
<td class="cellalignment3230" headers="r13c1-t3 r1c2-t3">Move to end of word.</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r14c1-t3" headers="r1c1-t3">&lt;Ctrl-P&gt;</td>
<td class="cellalignment3230" headers="r14c1-t3 r1c2-t3">Previous History (see Up Arrow).</td>
</tr>
<tr class="cellalignment3224">
<td class="cellalignment3230" id="r15c1-t3" headers="r1c1-t3">&lt;Ctrl-N&gt;</td>
<td class="cellalignment3230" headers="r15c1-t3 r1c2-t3">Next History (see up Down Arrow).</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJIGFE"></a>
<div id="TTOPR313" class="sect1">
<h2 class="sect1">Using the ttIsql <a id="sthref648"></a><a id="sthref649"></a><a id="sthref650"></a><a id="sthref651"></a>command history</h2>
<p>The <code>ttIsql</code> utility stores a list of the last 100 commands executed within the current <code>ttIsql</code> session. The commands in this list can be viewed or executed again without having to type the entire command over. Both SQL statements and built-in <code>ttIsql</code> commands are stored in the history list. Use the <code>history</code> command (&#34;<code>h</code> &#34;) to view the list of previously executed commands. For example:</p>
<pre>Command&gt; h;
8 INSERT INTO T3 VALUES (3)
9 INSERT INTO T1 VALUES (4)
10 INSERT INTO T2 VALUES (5)
11 INSERT INTO T3 VALUES (6)
12 autocommit 0
13 showplan
14 SELECT * FROM T1, t2, t3 WHERE A=B AND B=C AND A=B
15 trytbllocks 0
16 tryserial 0
17 SELECT * FROM T1, t2, t3 WHERE A=B AND B=C AND A=B
Command&gt;
</pre>
<p>The <code>history</code> command displays the last 10 SQL statements or <code>ttIsql</code> built-in commands executed. To display more than that last 10 commands specify the maximum number to display as an argument to the <code>history</code> command.</p>
<p>Each entry in the history list is identified by a unique number. The <code>!</code> character followed by the number of the command can be used to execute the command again. For example:</p>
<pre>Command&gt;
Command&gt; ! 12;

autocommit 0
Command&gt;
</pre>
<p>To execute the last command again simply type a sequence of two <code>!</code> characters:</p>
<pre>Command&gt; !!;

autocommit 0
Command&gt;
</pre>
<p>To execute the last command that begins with a given string type the <code>!</code> character followed by the first few letters of the command. For example:</p>
<pre>Command&gt; ! auto;

autocommit 0
Command&gt;
</pre>
<div id="TTOPR314" class="sect2"><a id="sthref652"></a>
<h3 class="sect2">Saving and clearing the ttIsql command history</h3>
<p>You can save the l<a id="sthref653"></a><a id="sthref654"></a><a id="sthref655"></a>ist of commands that <code>ttIsql</code> stores by using the <code>savehistory</code> command:</p>
<pre>Command&gt; savehistory history.txt;
</pre>
<p>If the output file already exists, use the <code>-a</code> option to append the new command history to the file or the <code>-f</code> option to overwrite the file. The next example shows how to append new command history to an existing file.</p>
<pre>Command&gt; savehistory -a history.txt;
</pre>
<p>You can clear the <a id="sthref656"></a><a id="sthref657"></a>list of commands that <code>ttIsql</code> stores by using the <code>clearhistory</code> command:</p>
<pre>Command&gt; clearhistory;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BJEJEIHE"></a>
<div id="TTOPR786" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the ttIsql edit command</h2>
<p>You can use the <code>ttIsql edit</code> command to edit a file or edit <code>ttIsql</code> commands in a text editor. The <code>ttIsql edit</code> command starts a text editor such as <code>emacs</code>, <code>gedit</code>, or <code>vi</code>. For more information on changing the default text editor, see <a href="#BJEFGHGA">&#34;Changing the default text editor for the ttIsql edit command&#34;</a>.</p>
<p>The syntax for the <code>ttIsql edit</code> command is as follows:</p>
<pre>Command&gt; edit [ file | !history_search_command ]
</pre>
<p>You can only use one parameter at a time. The <code>history_search_command</code> parameter is defined as the <code>!</code> character followed by the number of the command or a search string. If you do not specify a <code>!</code> character, the <code>ttIsql edit</code> command interprets the parameter as <code>file</code>. <code><span class="codeinlineitalic">file</span></code> is the name of the file that you want to edit. If you do not specify a parameter or specify <code>!!</code>, the last <code>ttIsql</code> command is edited.</p>
<p>When you specify a <code>file</code> parameter, the editor edits the specified file. If TimesTen does not find an exact file match for the specified <code>file</code> parameter in the current working directory, it searches for <code><span class="codeinlineitalic">file</span></code><code>.sql</code>. If neither file exists, the editor creates the specified file in the current working directory. You can specify a path in the <code>file</code> parameter.</p>
<p>The following example edits the <code>new.sql</code> file:</p>
<pre>Command&gt; edit new.sql;
</pre>
<p>The following example edits the <code>new.sql</code> file in the <code>/scripts</code> directory:</p>
<pre>Command&gt; edit /scripts/new.sql;
</pre>
<p>If you execute the <code>ttIsql edit</code> command with a <code>file</code> parameter, <code>ttIsql</code> does not execute the contents of the file after you exit the editor.</p>
<p>You can edit a SQL statement that is stored in the history list of the current <code>ttIsql</code> session. When calling the <code>ttIsql edit</code> command specify the <code>!</code> character followed by the number of the command or a search string. The editor opens the <code>ttIsql</code> command in a temporary file that you can save in a preferred location. For more information on using the <code>ttIsql history</code> command, see <a href="#BABJIGFE">&#34;Using the ttIsql command history&#34;</a>.</p>
<p>The following example edits <code>ttIsql</code> command <code>2</code>:</p>
<pre>Command&gt; edit !2;
</pre>
<p>The following example searches for and edits the last <code>ttIsql</code> command that contains the search string <code>create</code>:</p>
<pre>Command&gt; edit !create;
</pre>
<p>The following example executes a <code>CREATE TABLE</code> statement and then uses the <code>edit</code> command to edit the <code>CREATE TABLE</code> statement in a text editor:</p>
<pre>Command&gt; CREATE TABLE t1 
(c1 VARCHAR(10) NOT INLINE NOT NULL, c2 VARCHAR(144) INLINE NOT NULL);
Command&gt; edit;
</pre>
<p>The prior example is equivalent to using the <code>ttIsql edit</code> command with the <code>!!</code> parameter:</p>
<pre>Command&gt; CREATE TABLE t1 
(c1 VARCHAR(10) NOT INLINE NOT NULL, c2 VARCHAR(144) INLINE NOT NULL);
Command&gt; edit !!;
</pre>
<p>If you execute the <code>ttIsql edit</code> command with a <code>history_search_command</code> parameter, <code>ttIsql</code> executes the contents of the file after you exit the editor. The contents of the file are executed as a single <code>ttIsql</code> command. If you do not want to execute the contents of the file, delete the contents of the file and save the file before you exit the editor.</p>
<a id="BJEFGHGA"></a>
<div id="TTOPR787" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Changing the default text editor for the ttIsql edit command</h3>
<p>You can specify the default editor by defining the <code>ttIsql</code> <code>_EDITOR</code> define alias. The following example sets the default editor to <code>vi</code>:</p>
<pre>Command&gt; DEFINE _EDITOR=vi
</pre>
<p>If you do not define the <code>_EDITOR</code> define alias, <code>ttIsql</code> uses the editor specified by the <code>VISUAL</code> environment variable. If the <code>_EDITOR</code> define alias and the <code>VISUAL</code> environment variables are not set, <code>ttIsql</code> uses the editor specified by the <code>EDITOR</code> environment variable. When <code>_EDITOR</code>, <code>VISUAL</code>, and EDITOR are not set, <code>vi</code> is used for Unix and <code>notepad.exe</code> is used for Windows.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCFFIH"></a>
<div id="TTOPR315" class="sect1">
<h2 class="sect1">Working with character sets<a id="sthref658"></a><a id="sthref659"></a></h2>
<p>The <code>ttIsql</code> utility supports the character sets listed in <a class="olink TTREF739" href="../TTREF/attribute.htm#TTREF739">&#34;Supported character sets&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>. The ability of <code>ttIsql</code> to display characters depends on the native operating system locale settings of the terminal on which you are using <code>ttIsql</code>.</p>
<p>To override the locale-based output format, use the <code>ncharencoding</code> option or the <code>-N</code> option. The valid values for these options are <code>LOCALE</code> (the default) and <code>ASCII</code>. If you choose <code>ASCII</code> and <code>ttIsql</code> encounters a Unicode character, it displays it in escaped format.</p>
<p>You do not need to have an active connection to change the output method.</p>
</div>
<!-- class="sect1" -->
<a id="BABBHIDB"></a>
<div id="TTOPR317" class="sect1">
<h2 class="sect1">D<a id="sthref660"></a><a id="sthref661"></a>isplaying database structure information</h2>
<p>There are several<a id="sthref662"></a> <code>ttIsql</code> commands that display information on database structures. The most useful commands are summarized below:</p>
<ul>
<li>
<p><a id="sthref663"></a><a id="sthref664"></a><code>describe</code> - Displays information on database objects.</p>
</li>
<li>
<p><a id="sthref665"></a><a id="sthref666"></a><code>cachegroups</code> - Displays the attributes of cache groups.</p>
</li>
<li>
<p><a id="sthref667"></a><a id="sthref668"></a><code>dssize</code> - Reports the current sizes of the permanent and temporary database memory regions.</p>
</li>
<li>
<p><code><a id="sthref669"></a>tablesize</code> - Displays the size of tables that have been analyzed with the <code>ttComputeTabSizes</code> tool.</p>
</li>
<li>
<p><a id="sthref670"></a><a id="sthref671"></a><code>monitor</code> - Displays a summary of the current state of the database.</p>
</li>
</ul>
<div id="TTOPR687" class="sect2"><a id="sthref672"></a>
<h3 class="sect2">Using the ttIsql describe command</h3>
<p><a id="sthref673"></a><a id="sthref674"></a>Use the <code>describe</code> command to display information on individual database objects. Displays parameters for prepared SQL statements and built-in procedures. The argument to the <code>describe</code> command can be the name of a table, cache group, view, materialized view, materialized view log, sequence, synonym, a built-in procedure, a SQL statement or a command ID for a previously prepared SQL statement, a PL/SQL function, PL/SQL procedure or PL/SQL package.</p>
<p>The <code>describe</code> command requires a semicolon character to terminate the command.</p>
<pre>Command&gt; CREATE TABLE T1 (KEY NUMBER NOT NULL PRIMARY KEY, VALUE CHAR (64));
Command&gt; describe T1
       &gt; ;

Table USER.T1:
  Columns:
   *KEY                            NUMBER NOT NULL
    VALUE                          CHAR (64)
1 table found.

(primary key columns are indicated with *)
Command&gt; describe SELECT * FROM T1 WHERE KEY=?;

Prepared Statement:
  Parameters:
    Parameter 1                    NUMBER
  Columns:
    KEY NUMBER                     NOT NULL
    VALUE                          CHAR (64)
Command&gt; describe ttOptUseIndex;

Procedure TTOPTUSEINDEX:
  Parameters:
    Parameter INDOPTION            VARCHAR (1024)
  Columns:
    (none)

1 procedure found.
Command&gt;
</pre></div>
<!-- class="sect2" -->
<div id="TTOPR688" class="sect2"><a id="sthref675"></a>
<h3 class="sect2">Using the ttIsql cachegroups command</h3>
<p>The <code>cachegroups</code><a id="sthref676"></a><a id="sthref677"></a> command is used to provide detailed information on cache groups defined in the current database. The attributes of the root and child tables defined in the cache group are displayed in addition to the <code>WHERE</code> clauses associated with the cache group. The argument to the <code>cachegroups</code> command is the name of the cache group that you want to display information for.</p>
<pre>Command&gt; cachegroups;
Cache Group CACHEUSER.READCACHE:
 Cache Group Type: Read Only
 Autorefresh: Yes
 Autorefresh Mode: Incremental
 Autorefresh State: Paused
 Autorefresh Interval: 5 Seconds
 Autorefresh Status: ok
 Aging: No aging defined
 Root Table: ORATT.READTAB
 Table Type: Read Only
Cache Group CACHEUSER.WRITECACHE:
 Cache Group Type: Asynchronous Writethrough global (Dynamic)
 Autorefresh: No
 Aging: LRU on
 Root Table: ORATT.WRITETAB
 Table Type: Propagate
2 cache groups found.
</pre></div>
<!-- class="sect2" -->
<div id="TTOPR689" class="sect2"><a id="sthref678"></a>
<h3 class="sect2">Using the ttIsql dssize command</h3>
<p><a id="sthref679"></a><a id="sthref680"></a>The <code>dssize</code> command is used to report the current memory status of the permanent and temporary memory regions as well as the maximum, allocated and in-use sizes for the database.</p>
<p>The following example uses the <code>k</code> option to print the database size information in KB:</p>
<pre>Command&gt; dssize k;
The following values are in KB:
 
  PERM_ALLOCATED_SIZE:      40960
  PERM_IN_USE_SIZE:         9742
  PERM_IN_USE_HIGH_WATER:   9742
  TEMP_ALLOCATED_SIZE:      32768
  TEMP_IN_USE_SIZE:         9442
  TEMP_IN_USE_HIGH_WATER:   9505
</pre>
<p>For more information on the <code>dssize</code> command, see <a class="olink TTREF342" href="../TTREF/util.htm#TTREF342">&#34;ttIsql&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDEIAJ"></a>
<div id="TTOPR710" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the ttIsql tablesize command<a id="sthref681"></a><a id="sthref682"></a><a id="sthref683"></a></h3>
<p>The <code>tablesize</code> command displays the detailed analysis of the amount of space used by a table. Once you call the <code>ttComputeTabSizes</code> built-in procedure, which analyzes the table size of the indicated tables, the <code>tablesize</code> command displays the total size data for all analyzed tables.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For more details, see <a class="olink TTREF766" href="../TTREF/proced.htm#TTREF766">&#34;ttComputeTabSizes&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</div>
<p>Executing the <code>tablesize</code> command with no arguments displays available sizing information for all tables that have had the <code>ttComputeTabSizes</code> computation run. When you provide a table as an argument, <code>tablesize</code> displays available sizing only for the indicated table.</p>
<p>The syntax for <code>tablesize</code> is as follows:</p>
<pre>tablesize [[owner_name_pattern.]table_name_pattern]
</pre>
<p>The following example invokes the <code>ttComputeTabSizes</code> built-in procedure to calculate the table size of the <code>employees</code> table. Then, the <code>tablesize</code> command displays the sizing information gathered for the <code>employees</code> table.</p>
<pre>Command&gt; call ttComputeTabSizes(&#39;employees&#39;);
Command&gt; tablesize employees;
 
Sizes of USER1.EMPLOYEES:
 
  INLINE_ALLOC_BYTES:   60432
  NUM_USED_ROWS:        107
  NUM_FREE_ROWS:        149
  AVG_ROW_LEN:          236
  OUT_OF_LINE_BYTES:    0
  METADATA_BYTES:       1304
  TOTAL_BYTES:          61736
  LAST_UPDATED:         2011-06-29 12:55:28.000000
 
1 table found.
</pre>
<p>These values provide insights into overhead and how the total space is used for the table.</p>
<p>For example:</p>
<ul>
<li>
<p>The <code>NUM_FREE_ROWS</code> value describes the number of rows allocated for the table, but not currently in use. Space occupied by free rows cannot be used by the system for storing other system objects or structures.</p>
</li>
<li>
<p>Use the <code>TOTAL_BYTES</code> value to calculate how much permanent space your table occupies.</p>
</li>
<li>
<p><code>LAST_UPDATED</code> is the time of the last size computation. If you want a more recent computation, re-execute <code>ttComputeTabSizes</code> and display the new output.</p>
</li>
</ul>
<p>You can find a description for each calculated value in the <a class="olink TTSYS474" href="../TTSYS/systemtables.htm#TTSYS474">&#34;SYS.ALL_TAB_SIZES&#34;</a> section in the <span class="italic">Oracle TimesTen In-Memory Database System Tables and Views Reference</span>.</p>
</div>
<!-- class="sect2" -->
<div id="TTOPR690" class="sect2"><a id="sthref684"></a>
<h3 class="sect2">Using the ttIsql monitor command</h3>
<p>The <a id="sthref685"></a><a id="sthref686"></a><code>monitor</code> command displays all of the information provided by the <code>dssize</code> command plus additional statistics on the number of connections, checkpoints, lock timeouts, commits, rollbacks and other information collected since the last time the database was loaded into memory.</p>
<pre>Command&gt; monitor; 
TIME_OF_1ST_CONNECT: Wed Apr 20 10:34:17 2011
DS_CONNECTS: 11 
DS_DISCONNECTS: 0 
DS_CHECKPOINTS: 0 
DS_CHECKPOINTS_FUZZY: 0 
DS_COMPACTS: 0 
PERM_ALLOCATED_SIZE: 40960 
PERM_IN_USE_SIZE: 5174 
PERM_IN_USE_HIGH_WATER: 5174 
TEMP_ALLOCATED_SIZE: 18432 
TEMP_IN_USE_SIZE: 4527 
TEMP_IN_USE_HIGH_WATER: 4527 
SYS18: 0 
TPL_FETCHES: 0 
TPL_EXECS: 0 
CACHE_HITS: 0 
PASSTHROUGH_COUNT: 0 
XACT_BEGINS: 2 
XACT_COMMITS: 1 
XACT_D_COMMITS: 0 
XACT_ROLLBACKS: 0 
LOG_FORCES: 0 
DEADLOCKS: 0 
LOCK_TIMEOUTS: 0 
LOCK_GRANTS_IMMED: 17 
LOCK_GRANTS_WAIT: 0 
SYS19: 0 
CMD_PREPARES: 1 
CMD_REPREPARES: 0 
CMD_TEMP_INDEXES: 0 
LAST_LOG_FILE: 0 
REPHOLD_LOG_FILE: -1 
REPHOLD_LOG_OFF: -1 
REP_XACT_COUNT: 0 
REP_CONFLICT_COUNT: 0 
REP_PEER_CONNECTIONS: 0 
REP_PEER_RETRIES: 0 
FIRST_LOG_FILE: 0 
LOG_BYTES_TO_LOG_BUFFER: 64 
LOG_FS_READS: 0 
LOG_FS_WRITES: 0 
LOG_BUFFER_WAITS: 0 
CHECKPOINT_BYTES_WRITTEN: 0 
CURSOR_OPENS: 1 
CURSOR_CLOSES: 1 
SYS3: 0 
SYS4: 0 
SYS5: 0 
SYS6: 0 
CHECKPOINT_BLOCKS_WRITTEN: 0 
CHECKPOINT_WRITES: 0 
REQUIRED_RECOVERY: 0 
SYS11: 0 
SYS12: 1 
TYPE_MODE: 0 
SYS13: 0 
SYS14: 0 
SYS15: 0 
SYS16: 0 
SYS17: 0 
SYS9: 
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDEJBFD"></a>
<div id="TTOPR320" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Listing database objects by object type</h2>
<p>You <a id="sthref687"></a><a id="sthref688"></a><a id="sthref689"></a><a id="sthref690"></a><a id="sthref691"></a><a id="sthref692"></a><a id="sthref693"></a>can use <code>ttIsql</code> to list tables, indexes, views, sequences, synonyms, PL/SQL functions, procedures and packages in a database. Commands prefixed by <code>all</code> display all of this type of object. For example, the <code>functions</code> command lists PL/SQL functions that are owned by the user, whereas <code>allfunctions</code> lists all PL/SQL functions.</p>
<p>You can optionally specify patterns for object owners and object names.</p>
<p>Use these commands to list database objects:</p>
<ul>
<li>
<p><code>tables</code> and <code>alltables</code> - Lists tables.</p>
</li>
<li>
<p><code>indexes</code> and <code>allindexes</code> - Lists indexes.</p>
</li>
<li>
<p><code>views</code> and <code>allviews</code> - Lists views.</p>
</li>
<li>
<p><code>sequences</code> and <code>allsequences</code> - Lists sequences.</p>
</li>
<li>
<p><code>synonyms</code> and <code>allsynonyms</code> - Lists synonyms.</p>
</li>
<li>
<p><code>functions</code> and <code>allfunctions</code> - Lists PL/SQL functions.</p>
</li>
<li>
<p><code>procedures</code> and <code>allprocedures</code> - Lists PL/SQL procedures.</p>
</li>
<li>
<p><code>packages</code> and <code>allpackages</code> - Lists PL/SQL packages.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
For details on each of these commands, see the <a class="olink TTREF342" href="../TTREF/util.htm#TTREF342">&#34;ttIsql&#34;</a> section in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</div>
<p>The following example demonstrates the <code>procedures</code> and <code>allprocedures</code> commands. User <code>TERRY</code> creates a procedure called <code>proc1</code> while connected to <code>myDSN</code>. Note that a slash character (/) is entered on a new line following the PL/SQL statements.</p>
<p>The <code>procedures</code> command and the <code>allprocedures</code> command show that it is the only PL/SQL procedure in the database.</p>
<pre>$ ttisql myDSN
Copyright (c) 1996-2013, Oracle.  All rights reserved.
Type ? or &#34;help&#34; for help, type &#34;exit&#34; to quit ttIsql.
connect &#34;DSN=myDSN&#34;;
Connection successful: 
DSN=myDSN;UID=terry;DataStore=/scratch/terry/myDSN;DatabaseCharacter 
Set=AL32UTF8;ConnectionCharacterSet=US7ASCII;PermSize=32;TypeMode=0;
(Default setting AutoCommit=1)
Command&gt; create or replace procedure proc1 as begin null; end;
       &gt; /
Procedure created.
Command&gt; procedures;
  TERRY.PROC1
1 procedure found.
Command&gt; allprocedures;
  TERRY.PROC1
1 procedure found.
</pre>
<p>Now connect to the same DSN as Pat and create a procedure called <code>q</code>. The <code>allprocedures</code> command shows the PL/SQL procedures created by Terry and <code>pat</code>.</p>
<pre>$ ttisql &#34;dsn=myDSN;uid=PAT&#34;
Copyright (c) 1996-2013, Oracle.  All rights reserved.
Type ? or &#34;help&#34; for help, type &#34;exit&#34; to quit ttIsql.
connect &#34;dsn=myDSN;uid=PAT&#34;;
Connection successful: DSN=myDSN;UID=PAT;
DataStore=/scratch/terry/myDSN;DatabaseCharacterSet=AL32UTF8;
ConnectionCharacterSet=US7ASCII;PermSize=32;TypeMode=0;
(Default setting AutoCommit=1)
Command&gt; create or replace procedure q as begin null; end;
       &gt; /
Procedure created.
Command&gt; procedures;
  PAT.Q
1 procedure found.
Command&gt; allprocedures;
  TERRY.PROC1
  PAT.Q
2 procedures found.
</pre></div>
<!-- class="sect1" -->
<a id="BABEACHF"></a>
<div id="TTOPR321" class="sect1">
<h2 class="sect1">Viewing and setting connection attributes</h2>
<p>You can <a id="sthref694"></a><a id="sthref695"></a>view and set connection attributes with the <code>ttIsql</code> <code>show</code> and <code>set</code> commands. For a list of the attributes that you can view and set with <code>ttIsql</code>, see <a class="olink TTREF114" href="../TTREF/attribute.htm#TTREF114">&#34;Connection Attributes&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<p>To view the setting for the <code>Passthrough</code> attribute, enter:</p>
<pre>Command&gt; show passthrough;
PassThrough = 0
</pre>
<p>To change the <code>Passthrough</code> setting, enter:</p>
<pre>Command&gt; set passthrough 1;
</pre></div>
<!-- class="sect1" -->
<a id="BABBGIJA"></a>
<div id="TTOPR316" class="sect1">
<h2 class="sect1">Working with <a id="sthref696"></a><a id="sthref697"></a>transactions</h2>
<p>The <code>ttIsql</code> utility has several <a id="sthref698"></a>built-in commands for managing transactions. These commands are summarized below:</p>
<ul>
<li>
<p><a id="sthref699"></a><a id="sthref700"></a><code>autocommit</code> - Turns on or off the autocommit feature. This can also be set as an attribute of the <code>set</code> command.</p>
</li>
<li>
<p><a id="sthref701"></a><a id="sthref702"></a><code>commit</code> - Commits the current transaction.</p>
</li>
<li>
<p><a id="sthref703"></a><a id="sthref704"></a><code>commitdurable</code> - Commits the current transaction and ensures that the committed work is recovered in case of database failure.</p>
</li>
<li>
<p><a id="sthref705"></a><a id="sthref706"></a><code>rollback</code> - Rolls back the current transaction.</p>
</li>
<li>
<p><a id="sthref707"></a><a id="sthref708"></a><code>isolation</code> - Changes the transaction isolation level. This can also be set as an attribute of the <code>set</code> command.</p>
</li>
<li>
<p><a id="sthref709"></a><a id="sthref710"></a><code>sqlquerytimeout</code> - Specifies the number of seconds to wait for a SQL statement to execute before returning to the application. This can also be set as an attribute of the <code>set</code> command.</p>
</li>
</ul>
<p>When starting <code>ttIsql</code>, the autocommit feature is turned on by default, even within a SQL script. In this mode, every SQL operation against the database is committed automatically. When autocommit is turned off, then automatic commit depends on the setting for the <code>DDLCommitBehavior</code> connection attribute and the user executing DDL. For more information, see <a href="trans.htm#BABFGAEB">&#34;Relationship between autocommit and DDLCommitBehavior&#34;</a>.</p>
<p>To turn the autocommit feature off, execute the <code>ttIsql</code> <code>autocommit</code> command with an argument of 0. When autocommit is turned off, transactions must be committed or rolled back manually by executing the <code>ttIsql</code> <code>commit</code>, <code>commitdurable</code> or <code>rollback</code> commands. The <code>commitdurable</code> command ensures that the transaction&#39;s effect is preserved in case of database failure. If autocommit is off when <code>ttIsql</code> exits, any uncommitted statements are rolled back and reported by <code>ttIsql</code>.</p>
<p>The <code>ttIsql</code> <code>isolation</code> command can be used to change the current connection&#39;s transaction isolation properties. The isolation can be changed only at the beginning of a transaction. The <code>isolation</code> command accepts one of the following constants: <code>READ_COMMITTED</code> and <code>SERIALIZABLE</code>. If the <code>isolation</code> command is modified without an argument then the current isolation level is reported.</p>
<p>The <code>ttIsql</code> <code>sqlquerytimeout</code> command sets the timeout period for SQL statements. If the execution time of a SQL statement exceeds the number of seconds set by the <code>sqlquerytimeout</code> command, the SQL statement is not executed and an 6111 error is generated. For details, see <a class="olink TTJDV165" href="../TTJDV/writing_app.htm#TTJDV165">&#34;Setting a timeout duration for SQL statements&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Java Developer&#39;s Guide</span> and <a class="olink TTCDV156" href="../TTCDV/writing_app.htm#TTCDV156">&#34;Setting a timeout duration for SQL statements&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
TimesTen rollback and query timeout features do not stop TimesTen Cache operations that are being processed on the Oracle database. This includes passthrough statements, flushing, manual loading, manual refreshing, synchronous writethrough, propagating and dynamic loading.</div>
<p>The following example demonstrates the common use of the <code>ttIsql</code> built-in transaction management commands.</p>
<pre>E:\&gt;ttIsql
Copyright (c) 1996-2013, Oracle.  All rights reserved.
Type ? or &#34;help&#34; for help, type &#34;exit&#34; to quit ttIsql.

Command&gt; connect &#34;DSN=MY_DSN&#34;;
Connection successful: DSN=MY_DSN;DataStore=E:\ds\MY_DSN;
DRIVER=E:\WINNT\System32\TTdv1122.dll;
(Default setting AutoCommit=1)
Command&gt; autocommit 0;
Command&gt; CREATE TABLE LOOKUP (KEY NUMBER NOT NULL PRIMARY KEY, VALUE CHAR (64));
Command&gt; commit;
Command&gt; INSERT INTO LOOKUP VALUES (1, &#39;ABC&#39;);
1 row inserted.
Command&gt; SELECT * FROM LOOKUP;
&lt; 1, ABC &gt;
1 row found.
Command&gt; rollback;
Command&gt; SELECT * FROM LOOKUP;
0 rows found.
Command&gt; isolation;
isolation = READ_COMMITTED
Command&gt; commitdurable;
Command&gt; sqlquerytimeout 10;
Command&gt; sqlquerytimeout;
Query timeout = 10 seconds
Command&gt; disconnect;
Disconnecting...
Command&gt; exit;
Done.
</pre></div>
<!-- class="sect1" -->
<a id="BABEFDJF"></a>
<div id="TTOPR324" class="sect1">
<h2 class="sect1">Working with <a id="sthref711"></a><a id="sthref712"></a><a id="sthref713"></a><a id="sthref714"></a><a id="sthref715"></a><a id="sthref716"></a>prepared and parameterized SQL statements</h2>
<p>Preparing a SQL statement just once and then executing it multiple times is much more efficient for TimesTen applications than re-preparing the statement each time it is to be executed. <code>ttIsql</code> has a set of built-in commands to work with prepared SQL statements. These commands are summarized below:</p>
<ul>
<li>
<p><a id="sthref717"></a><a id="sthref718"></a><code>prepare</code> - Prepares a SQL statement. Corresponds to a <code>SQLPrepare</code> ODBC call.</p>
</li>
<li>
<p><a id="sthref719"></a><code>exec</code> - Executes a previously prepared statement. Corresponds to a <code>SQLExecute</code> ODBC call.</p>
</li>
<li>
<p><a id="sthref720"></a><code>execandfetch</code> - Executes a previously prepared statement and fetches all result rows. Corresponds to a <code>SQLExecute</code> call followed by one or more calls to <code>SQLFetch</code>.</p>
</li>
<li>
<p><a id="sthref721"></a><code>fetchall</code> - Fetches all result rows for a previously executed statement. Corresponds to one or more <code>SQLFetch</code> calls.</p>
</li>
<li>
<p><a id="sthref722"></a><code>fetchone</code> - Fetches only one row for a previously executed statement. Corresponds to exactly one <code>SQLFetch</code> call.</p>
</li>
<li>
<p><a id="sthref723"></a><code>close</code> - Closes the result set cursor on a previously executed statement that generated a result set. Corresponds to a <code>SQLFreeStmt</code> call with the <code>SQL_CLOSE</code> option.</p>
</li>
<li>
<p><a id="sthref724"></a><code>free</code> - Closes a previously prepared statement. Corresponds to a <code>SQLFreeStmt</code> call with the <code>SQL_DROP</code> option.</p>
</li>
<li>
<p><a id="sthref725"></a><code>describe</code> - Describes the prepared statement including the input parameters and the result columns.</p>
</li>
</ul>
<p>The <code>ttIsql</code> utility prepared statement commands also handle SQL statement parameter markers. When parameter markers are included in a prepared SQL statement, <code>ttIsql</code> automatically prompts for the value of each parameter in the statement at execution time.</p>
<p>The example below uses the prepared statement commands of the <code>ttIsql</code> utility to prepare an <code>INSERT</code> statement into a table containing a <code>NUMBER</code> and a <code>CHAR</code> column. The statement is prepared and then executed twice with different values for each of the statement&#39;s two parameters. The <code>ttIsql</code> utility <code>timing</code> command is used to display the elapsed time required to executed the primary ODBC function call associated with each command.</p>
<pre>Command&gt; connect &#34;DSN=MY_DSN&#34;;
Connection successful: DSN=MY_DSN;DataStore=E:\ds\MY_DSN;DRIVER=
E:\WINNT\System32\TTdv1122.dll;
(Default setting AutoCommit=1)

Command&gt; timing 1;
Command&gt; create table t1 (key number not null primary key, value char(20));
Execution time (SQLExecute) = 0.007247 seconds.
Command&gt; prepare insert into t1 values (:f, :g);
Execution time (SQLPrepare) = 0.000603 seconds.

Command&gt; exec;
Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/&#39; to leave the remaining parameters unbound and execute the command.
Enter Parameter 1 &#39;F&#39; (NUMBER) &gt; 1;
Enter Parameter 2 &#39;G&#39; (CHAR) &gt; &#39;abc&#39;;
1 row inserted.
Execution time (SQLExecute) = 0.000454 seconds.

Command&gt; exec;
Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/&#39; to leave the remaining parameters unbound and execute the help command.
Enter Parameter 1 &#39;F&#39; (NUMBER) &gt; 2;
Enter Parameter 2 &#39;G&#39; (CHAR) &gt; &#39;def&#39;;
1 row inserted.
Execution time (SQLExecute) = 0.000300 seconds.

Command&gt; free;
Command&gt; select * from t1;
&lt; 1, abc                  &gt;
&lt; 2, def                  &gt;
2 rows found.
Execution time (SQLExecute + Fetch Loop) = 0.000226 seconds.

Command&gt; disconnect;
Disconnecting...
Execution time (SQLDisconnect) = 2.911396 seconds. 
Command&gt;
</pre>
<p>In the example above, the <code>prepare</code> command is immediately followed by the SQL statement to prepare. Whenever a SQL statement is prepared in <code>ttIsql</code>, a unique command ID is assigned to the prepared statement. The <code>ttIsql</code> utility uses this ID to keep track of multiple prepared statements. A maximum of 256 prepared statements can exist in a <code>ttIsql</code> session simultaneously. When the <code>free</code> command is executed, the command ID is automatically disassociated from the prepared SQL statement.</p>
<p>To see the command IDs generated by <code>ttIsql</code> when using the prepared statement commands, set the verbosity level to 4 using the <code>verbosity</code> command before preparing the statement, or use the <code>describe *</code> command to list all prepared statements with their IDs.</p>
<p>Command IDs can be referenced explicitly when using <code>ttIsql</code>&#39;s prepared statement commands. For a complete description of the syntax of <code>ttIsql</code>&#39;s prepared statement commands see the <a class="olink TTREF342" href="../TTREF/util.htm#TTREF342">&#34;ttIsql&#34;</a> section in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span> or type <code>help</code> at the <code>ttIsql</code> command prompt.</p>
<p>The example below prepares and executes a <code>SELECT</code> statement with a predicate containing one <code>NUMBER</code> parameter. The <code>fetchone</code> command is used to fetch the result row generated by the statement. The <a id="sthref726"></a><code>showplan</code> command is used to display the execution plan used by the TimesTen query optimizer when the statement is executed. In addition, the verbosity level is set to 4 so that the command ID used by <code>ttIsql</code> to keep track of the prepared statement is displayed.</p>
<pre>Command&gt; connect &#34;DSN=MY_DSN&#34;;
Connection successful: DSN=MY_DSN;DataStore=E:\ds\MY_DSN;
DRIVER=E:\WINNT\Sys tem32\TTdv1122.dll;
(Default setting AutoCommit=1)
The command succeeded.
Command&gt; CREATE TABLE T1 (KEY NUMBER NOT NULL PRIMARY KEY, VALUE CHAR (64));
The command succeeded.
Command&gt; INSERT INTO T1 VALUES (1, &#39;abc&#39;);
1 row inserted.
The command succeeded.
Command&gt; autocommit 0;
Command&gt; showplan 1;
Command&gt; verbosity 4;
The command succeeded.
Command&gt; prepare SELECT * FROM T1 WHERE KEY=?;
Assigning new prepared command id = 0.

Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               1
  OPERATION:           RowLkRangeScan
  TBLNAME:             T1
  IXNAME:              T1
  INDEXED CONDITION:   T1.KEY = _QMARK_1
  NOT INDEXED:         &lt;NULL&gt;
 
The command succeeded.
Command&gt; exec;

Executing prepared command id = 0.
 
Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/;&#39; to leave the remaining parameters unbound and execute the command.
 
Enter Parameter 1 &#39;_QMARK_1&#39; (NUMBER) &gt; 1
The command succeeded.
Command&gt; fetchone;
Fetching prepared command id = 0.
&lt; 1, abc                                                              &gt;
1 row found.
The command succeeded.
Command&gt; close;
Closing prepared command id = 0.
The command succeeded.
Command&gt; free;
Freeing prepared command id = 0.
The command succeeded.
Command&gt; commit;
The command succeeded.
Command&gt; disconnect;
Disconnecting...
The command succeeded.
Command&gt;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
For information about using <code>ttIsql</code> with <a id="sthref727"></a><a id="sthref728"></a><a id="sthref729"></a>PL/SQL host variables, see <a class="olink TTPLS110" href="../TTPLS/intro.htm#TTPLS110">&#34;Introduction to PL/SQL in the TimesTen Database&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span>.</div>
</div>
<!-- class="sect1" -->
<a id="CHDCEFFF"></a>
<div id="TTOPR719" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using, declaring, and setting variables<a id="sthref730"></a><a id="sthref731"></a></h2>
<p>The following sections describe how to declare, set and use bind variables in ttIsql:</p>
<ul>
<li>
<p><a href="#CHDIBHGB">Declaring and setting bind variables</a></p>
</li>
<li>
<p><a href="#CHDHEIFG">Automatically creating bind variables for retrieved columns</a></p>
</li>
</ul>
<a id="CHDIBHGB"></a>
<div id="TTOPR720" class="sect2">
<h3 class="sect2">Declaring and setting bind variables</h3>
<p>You can declare and set variables and arrays in ttIsql that can be referenced in a SQL statement, SQL script, or PL/SQL block. The variables declared using the <code>variable</code> and <code>setvariable</code> command must be one of the following data types: <code>NUMBER</code>, <code>CHAR</code>, <code>NCHAR</code>, <code>VARCHAR2</code>, <code>NVARCHAR2</code>, <code>CLOB</code>, <code>NCLOB</code>, <code>BLOB</code>, or <code>REFCURSOR</code>. However, when binding arrays, Timesten supports only binding arrays of the <code>NUMBER</code>, <code>CHAR</code>, <code>NCHAR</code>, <code>VARCHAR2</code>, or <code>NVARCHAR2</code> data types.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
All variables that are declared exist for the life of the ttIsql session. However, if you declare a new variable with the same name, the new variable replaces the old variable.</div>
<p>The following examples declare bind variables with the <code>variable</code> or <code>var</code> command for a number, character string, and an array. Each is assigned to a value either when declared or by using the <code>setvariable</code> or <code>setvar</code> command.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For details on the syntax for these commands, see <a class="olink TTREF342" href="../TTREF/util.htm#TTREF342">&#34;ttIsql&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</div>
<pre>Command&gt; VARIABLE house_number NUMBER := 268;
Command&gt; PRINT house_number;
HOUSE_NUMBER            : 268

Command&gt; VARIABLE street_name VARCHAR2(15);
Command&gt; SETVARIABLE street_name := &#39;Oracle Parkway&#39;; 

Command&gt; VARIABLE occupants[5] VARCHAR2(15);
Command&gt; SETVARIABLE occupants[1] := &#39;Pat&#39;; 
Command&gt; SETVARIABLE occupants[2] := &#39;Terry&#39;;
Command&gt; PRINT occupants;
OCCUPANTS            : ARRAY [ 5 ] (Current Size 2)
OCCUPANTS[1] : Pat
OCCUPANTS[2] : Terry
</pre>
<p>The following is an example of binding multiple values in an array using square brackets to delineate the values and commas to separate each value for the array:</p>
<pre>Command&gt; VARIABLE occupants[5] VARCHAR2(15) := [&#39;Pat&#39;, &#39;Terry&#39;];
Command&gt; PRINT occupants;
OCCUPANTS : ARRAY [ 5 ] (Current Size 2)
OCCUPANTS[1] : Pat
OCCUPANTS[2] : Terry
</pre>
<p>When using array binds, PL/SQL enables you to bind each variable to a PL/SQL variable with the following declaration, where <code><span class="codeinlineitalic">TypeName</span></code> is any unique identifier for the PL/SQL data type and <code><span class="codeinlineitalic">DataType</span></code> can be specified as <code>CHAR</code>, <code>NCHAR</code>, <code>VARCHAR2</code>, or <code>NVARCHAR2</code>.</p>
<pre>TYPE <span class="codeinlineitalic">TypeName</span> IS TABLE OF <span class="codeinlineitalic">DataType</span>(&lt;precision&gt;) INDEX BY BINARY_INTEGER;
 
</pre>
<p>If the variable is declared as array of <code>NUMBER</code>, you can bind it to a PL/SQL variable of the following data types: <code>NUMBER</code>, <code>INTEGER</code>, <code>FLOAT</code>, or <code>DOUBLE PRECISION</code>. To do so, use the appropriate declaration:</p>
<pre>TYPE <span class="codeinlineitalic">TypeName</span> IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE <span class="codeinlineitalic">TypeName</span> IS TABLE OF INTEGER INDEX BY BINARY_INTEGER;
TYPE <span class="codeinlineitalic">TypeName</span> IS TABLE OF FLOAT INDEX BY BINARY_INTEGER;
TYPE <span class="codeinlineitalic">TypeName</span> IS TABLE OF DOUBLE PRECISION INDEX BY BINARY_INTEGER;
</pre>
<p>The following example declares the <code>occupants</code> <code>VARCHAR2</code> array, which is then declared and used within a PL/SQL block:</p>
<pre>Command&gt; VARIABLE occupants[5] VARCHAR2(15);
Command&gt; SETVARIABLE occupants[1] := &#39;Pat&#39;;
Command&gt; SETVARIABLE occupants[2] := &#39;Terry&#39;;
Command&gt; DECLARE
       &gt; TYPE occuname IS TABLE OF VARCHAR2(15) INDEX BY BINARY_INTEGER;
       &gt; x occuname;
       &gt; BEGIN
       &gt; x := :occupants;
       &gt; FOR LROW IN x.FIRST..x.LAST LOOP
       &gt;   x(LROW) := x(LROW) || &#39; Doe&#39;;
       &gt; END LOOP;
       &gt; :occupants := x;
       &gt; END;
       &gt; /
 
PL/SQL procedure successfully completed.
 
Command&gt; PRINT occupants;
OCCUPANTS            : ARRAY [ 5 ] (Current Size 2)
OCCUPANTS[1] : Pat Doe
OCCUPANTS[2] : Terry Doe
</pre></div>
<!-- class="sect2" -->
<a id="CHDHEIFG"></a>
<div id="TTOPR721" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Automatically creating bind <a id="sthref732"></a><a id="sthref733"></a>variables for retrieved columns</h3>
<p>When you set <code>autovariables</code> on in ttIsql, TimesTen creates an automatic bind variable named after each column in the last fetched row. An automatic bind variable can be used in the same manner of any bind variable.</p>
<p>The following example selects all rows from the <code>employees</code> table. Since all columns are retrieved, automatic variables are created and named for each column. The bind variable contains the last value retrieved for each column.</p>
<pre>Command&gt; SET AUTOVARIABLES ON;
Command&gt; SELECT * FROM employees;
...
&lt; 204, Hermann, Baer, HBAER, 515.123.8888, 1994-06-07 00:00:00, PR_REP, 10000,
 &lt;NULL&gt;, 101, 70 &gt;
&lt; 205, Shelley, Higgins, SHIGGINS, 515.123.8080, 1994-06-07 00:00:00, AC_MGR, 
12000, &lt;NULL&gt;, 101, 110 &gt;
&lt; 206, William, Gietz, WGIETZ, 515.123.8181, 1994-06-07 00:00:00, AC_ACCOUNT, 
8300, &lt;NULL&gt;, 205, 110 &gt;

Command&gt; PRINT;
EMPLOYEE_ID          : 206
FIRST_NAME           : William
LAST_NAME            : Gietz
EMAIL                : WGIETZ
PHONE_NUMBER         : 515.123.8181
HIRE_DATE            : 1994-06-07 00:00:00
JOB_ID               : AC_ACCOUNT
SALARY               : 8300
COMMISSION_PCT       : &lt;NULL&gt;
MANAGER_ID           : 205
DEPARTMENT_ID        : 110
</pre>
<p>If you provide an alias for a column name, the automatic bind variable name uses the alias, rather than the column name.</p>
<pre>Command&gt; SET AUTOVARIABLES ON;
Command&gt; SELECT employee_id ID, First_name SURNAME, last_name LASTNAME 
 FROM employees;
 
ID, SURNAME, LASTNAME
...
&lt; 204, Hermann, Baer &gt;
&lt; 205, Shelley, Higgins &gt;
&lt; 206, William, Gietz &gt;
107 rows found.
Command&gt; PRINT;
ID                   : 206
SURNAME              : William
LASTNAME             : Gietz
</pre>
<p>For any query that fetches data without a known named column, set <code>columnlabels</code> <code>on</code> to show the column names. The following example shows that the columns returns from <code>ttConfiguration</code> built-in procedure are <code>paramname</code> and <code>paramvalue</code>.</p>
<pre>Command&gt; SET AUTOVARIABLES ON;
Command&gt; SET COLUMNLABELS ON;

Command&gt; call TTCONFIGURATION(&#39;PLSQL&#39;);

PARAMNAME, PARAMVALUE
&lt; PLSQL, 1 &gt;
1 row found.

Command&gt; IF :paramvalue = 1 THEN &#34;e:PLSQL is enabled&#34;;
PLSQL is enabled
Command&gt; IF NOT  :paramvalue = 1 THEN &#34;e:PLSQL is not enabled&#34;;
</pre>
<p>You can also use the <code>describe</code> command to show the column names. The following example uses the describe command to display the column names for the <code>ttConfiguration</code> built-in procedure.</p>
<pre>Command&gt; DESCRIBE TTCONFIGURATION;
 
Procedure TTCONFIGURATION:
  Parameters:
    PARAMNAME                       TT_VARCHAR (30)
  Columns:
    PARAMNAME                       TT_VARCHAR (30) NOT NULL
    PARAMVALUE                      TT_VARCHAR (1024)
 
1 procedure found.
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDDHFFE"></a>
<div id="TTOPR318" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating and executing PL/SQL blocks</h2>
<p>You can create and execute <a id="sthref734"></a>PL/SQL blocks from the <code>ttIsql</code> command line.</p>
<p>Set <code>serveroutput</code> on to display results generated from the PL/SQL block:</p>
<pre>Command&gt; set serveroutput on
</pre>
<p>Create an anonymous block that puts a text line in the output buffer. Note that the block must be terminated with a slash (/).</p>
<pre>Command&gt; BEGIN
       &gt; DBMS_OUTPUT.put_line(
       &gt;   &#39;Welcome!&#39;);
       &gt; END;
       &gt; /
Welcome!
PL/SQL procedure successfully completed.
Command&gt;
</pre>
<p>See the <a class="olink TTPLS" href="../TTPLS/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span></a> for more examples. For information on error handling in <code>ttIsql</code> for PL/SQL objects, see <a class="olink TTPLS350" href="../TTPLS/exceptions.htm#TTPLS350">&#34;Showing errors in ttIsql&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDFDAJD"></a>
<div id="TTOPR319" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Passing data from PL/SQL using OUT parameters</h2>
<p>You <a id="sthref735"></a><a id="sthref736"></a>can pass data back to applications from PL/SQL by using <code>OUT</code> parameters. This example returns information about how full a TimesTen database is.</p>
<p>Create the <code>tt_space_info</code> PL/SQL procedure and use SQL to provide values for the <code>permpct</code>, <code>permmaxpct</code>, <code>temppct</code>, and <code>tempmaxpct</code> parameters.</p>
<pre>Command&gt; CREATE OR REPLACE PROCEDURE tt_space_info
       &gt;   (permpct    OUT PLS_INTEGER,
       &gt;    permmaxpct OUT PLS_INTEGER,
       &gt;    temppct    OUT PLS_INTEGER,
       &gt;    tempmaxpct OUT PLS_INTEGER) AS
       &gt;    monitor    sys.monitor%ROWTYPE;
       &gt; BEGIN
       &gt;   SELECT * INTO monitor FROM sys.monitor;
       &gt;   permpct := monitor.perm_in_use_size * 100 / 
                 monitor.perm_allocated_size;
       &gt;   permmaxpct := monitor.perm_in_use_high_water * 100 / 
                 monitor.perm_allocated_size;
       &gt;   temppct := monitor.temp_in_use_size * 100 / 
                 monitor.temp_allocated_size;
       &gt;   tempmaxpct := monitor.temp_in_use_high_water * 100 / 
                 monitor.temp_allocated_size;
       &gt; END;
       &gt;/

Procedure created.
</pre>
<p>Declare the variables and call <code>tt_space_info</code>. The parameter values are passed back to <code>ttIsql</code> so they can be printed:</p>
<pre>Command&gt; VARIABLE permpct NUMBER
Command&gt; VARIABLE permpctmax NUMBER
Command&gt; VARIABLE temppct NUMBER
Command&gt; VARIABLE temppctmax NUMBER
Command&gt; BEGIN
       &gt;   tt_space_info(:permpct, :permpctmax, :temppct, :temppctmax);
       &gt; END;
       &gt;/

PL/SQL procedure successfully completed.

Command&gt; PRINT permpct;
PERMPCT              : 4

Command&gt; PRINT permpctmax;
PERMPCTMAX           : 4

Command&gt; PRINT temppct;
TEMPPCT              : 11

Command&gt; PRINT temppctmax;
TEMPPCTMAX           : 11
</pre>
<p>You can also pass back a statement handle that can be executed by a PL/SQL statement with an <code>OUT</code> refcursor parameter. The PL/SQL statement can choose the query associated with the cursor. The following example opens a refcursor, which randomly chooses between ascending or descending order.</p>
<pre>Command&gt; VARIABLE ref REFCURSOR;
Command&gt; BEGIN
    &gt;    IF (mod(dbms_random.random(), 2) = 0) THEN
    &gt;     open :ref for select object_name from SYS.ALL_OBJECTS order by 1 asc;
    &gt;    ELSE
    &gt;     open :ref for select object_name from SYS.ALL_OBJECTS order by 1 desc;
    &gt;    end if;
    &gt;   END;
    &gt;   /

PL/SQL procedure successfully completed.
</pre>
<p>To fetch the result set from the refcursor, use the <code>PRINT</code> command:</p>
<pre>Command&gt; PRINT ref 
REF           : 
&lt; ACCESS$ &gt;
&lt; ALL_ARGUMENTS &gt;
&lt; ALL_COL_PRIVS &gt;
&lt; ALL_DEPENDENCIES &gt;
...
143 rows found.
</pre>
<p>Or if the result set was ordered in descending order, the following would print:</p>
<pre>Command&gt; PRINT ref
REF          : 
&lt; XLASUBSCRIPTIONS &gt;
&lt; WARNING_SETTINGS$ &gt;
&lt; VIEWS &gt;
...
143 rows found.
</pre></div>
<!-- class="sect1" -->
<a id="CHDDIFEE"></a>
<div id="TTOPR722" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Conditional control with the IF-THEN-ELSE <a id="sthref737"></a><a id="sthref738"></a>command construct</h2>
<p>The <code>IF-THEN-ELSE</code> command construct enables you to implement conditional branching logic in a ttIsql session. The <code>IF</code> command tests a condition and decides whether to execute commands within the <code>THEN</code> clause or the optional <code>ELSE</code> clause. The commands executed can be SQL statements, SQL scripts, PL/SQL blocks, or TimesTen utilities.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For details on the syntax of the <code>IF-THEN-ELSE</code> construct, see the <a class="olink TTREF342" href="../TTREF/util.htm#TTREF342">&#34;ttIsql&#34;</a> section in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</div>
<p>The following example creates and tests a bind variable to see if PL/SQL is enabled. It uses the <code>autovariables</code> command to create the bind variable from the result of the call to <code>ttConfiguration</code>. The value can be tested within the <code>IF-THEN-ELSE</code> conditional by testing the <code>paramvalue</code> variable.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For more details on the <code>autovariables</code> command, see <a href="#CHDHEIFG">&#34;Automatically creating bind variables for retrieved columns&#34;</a>.</div>
<pre>Command&gt; SET AUTOVARIABLES ON;
Command&gt; CALL TTCONFIGURATION(&#39;PLSQL&#39;);
PARAMNAME, PARAMVALUE
&lt; PLSQL, 1 &gt;
1 row found.
Command&gt; IF :paramvalue = 1 THEN &#34;e:PLSQL is enabled&#34;
&gt; ELSE &#34;e:PLSQL is not enabled&#34;;
PLSQL is enabled
</pre>
<p>The following example checks to see that the <code>employees</code> table exists. If it does not, it executes the SQL script that creates the <code>employees</code> table; otherwise, a message is printed out.</p>
<pre>Command&gt; IF 0 = &#34;SELECT COUNT(*) FROM SYS.TABLES 
       &gt; WHERE TBLNAME LIKE &#39;employees&#39;;&#34;
       &gt; THEN &#34;e:EMPLOYEES table already exists&#34;
       &gt; ELSE &#34;@HR_CRE_TT.SQL;&#34;;
EMPLOYEES table already exists
</pre></div>
<!-- class="sect1" -->
<a id="CHDEDHII"></a>
<div id="TTOPR750" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Loading data from an Oracle database into a TimesTen table<a id="sthref739"></a></h2>
<p>You can load the results of a SQL query from a back-end Oracle database into a single table on TimesTen without creating a cache grid, cache group, and cache table to contain the results. TimesTen provides tools that execute a user-provided <code>SELECT</code> statement on the Oracle database and load the result set into a table on TimesTen.</p>
<p>The following are the major steps that are performed to accomplish this task:</p>
<ol>
<li>
<p>Create a table with the correct columns and data types on TimesTen.</p>
</li>
<li>
<p>Provide a <code>SELECT</code> statement that is executed on the Oracle database to generate the desired result set.</p>
</li>
<li>
<p>Load the result set into the table on TimesTen.</p>
</li>
</ol>
<p>TimesTen provides two methods to accomplish these tasks:</p>
<ul>
<li>
<p>The <code>ttIsql</code> utility provides the <code><a id="sthref740"></a><a id="sthref741"></a>createandloadfromoraquery</code> command that, once provided the TimesTen table name and the <code>SELECT</code> statement, automatically creates the TimesTen table, executes the <code>SELECT</code> statement on the Oracle database, and loads the result set into the TimesTen table. This command is described fully in <a href="#CHDDEJJA">&#34;Use ttIsql to create a table and load SQL query results&#34;</a>.</p>
</li>
<li>
<p>The <code><a id="sthref742"></a>ttTableSchemaFromOraQueryGet</code> built-in procedure evaluates the user-provided <code>SELECT</code> statement to generate a <code>CREATE TABLE</code> statement that can be executed to create a table on TimesTen, which would be appropriate to receive the result set from the <code>SELECT</code> statement. The <code><a id="sthref743"></a>ttLoadFromOracle</code> built-in procedure executes the <code>SELECT</code> statement on the Oracle database and loads the result set into the TimesTen table. These built-in procedures are described in <a href="#CHDDABGE">&#34;Use TimesTen built-in procedures to recommend a table and load SQL query results&#34;</a>.</p>
</li>
</ul>
<p>Both methods require the following:</p>
<ul>
<li>
<p>Both the TimesTen and Oracle databases involved must be configured with the same national database character set.</p>
</li>
<li>
<p>When you connect to the TimesTen database, the connection must contain the same connection attributes that are required when using cache groups, as follows:</p>
<ul>
<li>
<p>The user name, which must be the same on both the TimesTen and Oracle databases</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The correct privileges must be granted to these users on each database for the SQL statements that are executed on their behalf.</div>
</li>
<li>
<p>The correct passwords for each user as appropriate in the <code>PWD</code> and <code>OraclePWD</code> connection attributes</p>
</li>
<li>
<p>The <code>OracleNetServiceName</code> connection attributes that identifies the Oracle database instance</p>
</li>
</ul>
</li>
<li>
<p>For either method, the user provides the following:</p>
<ul>
<li>
<p>The table name on the TimesTen database where the results of the SQL query is loaded. If the owner of the table is not provided, the table is created with the current user as the owner. The table name is not required to be the same name as the table name on the Oracle database against which the SQL statement is executed. This table does not require a primary key. If the table already exists, a warning is issued and the retrieved rows are appended to the table.</p>
</li>
<li>
<p>Optionally, the number of parallel threads that you would like to be used in parallel when loading the table with the result set. This defaults to four.</p>
</li>
<li>
<p>The SQL <code>SELECT</code> statement that is executed against the Oracle database to obtain the required rows. The tables specified within this <code>SELECT</code> statement must be fully qualified, unless the tables are within the schema of the current Oracle Database user. The query cannot have any parameter bindings.</p>
<p>The <code>SELECT</code> list should contain either simple column references or column aliases. For example, any expressions in the <code>SELECT</code> list should be provided with a column alias. You can also use the column alias to avoid duplication of column names in the result table. For example, instead of using <code>SELECT C1+1 FROM T1</code>, use <code>SELECT C1 + 1 C2 FROM T1</code>, which would create a column named <code>C2</code>.</p>
</li>
</ul>
</li>
</ul>
<p>TimesTen evaluates the <code>SELECT</code> statement and uses the column names, data types, and nullability information to create the table on TimesTen into which the result set is loaded. The column names and data types (either the same or mapped) are taken from the tables on the Oracle database involved in the <code>SELECT</code> statement. However, other Oracle Database table definition information (such as <code>DEFAULT</code> values, primary key, foreign key relationships, and so on) are not used when creating the <code>CREATE TABLE</code> statement for the TimesTen table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the evaluation returns any unsupported data types or if the query cannot be executed on the Oracle database, such as from a syntax error, a warning is logged and a comment is displayed for the unsupported column in the output. However, if the data type is not supported by TimesTen, you can cast the data type directly in the <code>SELECT</code> list to a TimesTen supported data type.</div>
<p>The load process does not check that the column data types and sizes in the TimesTen table match the data types and sizes of the result set. Instead, the insert is attempted and if the column data types cannot be mapped or the Oracle Database data from the SQL query exceeds the TimesTen column size, TimesTen returns an error.</p>
<p>The load is automatically committed every 256 rows. If an error is encountered during the load, it terminates the load, but does not roll back any committed transactions. Any errors returned from the Oracle database are reported in the same manner as when using cache groups.</p>
<p>Because you can use the <code>createandloadfromoraquery</code> command and the <code>ttLoadFromOracle</code> built-in procedure to load into an existing TimesTen table, the following restrictions apply:</p>
<ul>
<li>
<p>You cannot load into system tables, dictionary tables, temporary tables, detail tables of views, materialized view tables, materialized view log tables, or tables already in a cache group. In addition, you cannot use a synonym for the table name.</p>
</li>
<li>
<p>If you load the result set into an existing table that is the referencing table (child table) of a foreign key constraint, the constraint is not validated. As a result, rows that are missing a parent row may be loaded. Instead, you should verify all foreign keys after the table is loaded.</p>
</li>
</ul>
<p>The following sections provide more details on each individual method:</p>
<ul>
<li>
<p><a href="#CHDDEJJA">Use ttIsql to create a table and load SQL query results</a></p>
</li>
<li>
<p><a href="#CHDDABGE">Use TimesTen built-in procedures to recommend a table and load SQL query results</a></p>
</li>
</ul>
<a id="CHDDEJJA"></a>
<div id="TTOPR751" class="sect2">
<h3 class="sect2">Use ttIsql to create a table and load SQL query results<a id="sthref744"></a><a id="sthref745"></a><a id="sthref746"></a></h3>
<p>The <code>ttIsql</code> utility provides the <code>createandloadfromoraquery</code> command, which takes a table name, the number of parallel threads, and a <code>SELECT</code> statement that is to be executed on the Oracle database as input parameters. From these parameters, TimesTen performs the following:</p>
<ol>
<li>
<p>Evaluates the SQL query and creates an appropriate table, if not already created, with the provided table name where the columns are those named in the SQL query with the same (or mapped) data types as those in the Oracle Database tables from which the resulting data is retrieved.</p>
</li>
<li>
<p>Loads the results of the SQL query as executed on the Oracle database into this table. The call returns a single number indicating the number of rows loaded. Any subsequent calls to this command append retrieved rows to the table.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
See the <code>createandloadfromoraquery</code> command in <a class="olink TTREF342" href="../TTREF/util.htm#TTREF342">&#34;ttIsql&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for full details on syntax, requirements, restrictions, and required privileges.</div>
<p>The following <code>ttIsql</code> example connects providing the DSN, user name, password for the user on TimesTen, and the password for the same user name on the Oracle database. Then, it executes the <code>createandloadfromoraquery</code> command to evaluate the <code>SELECT</code> statement. The <code>employees</code> table is created on TimesTen with the same column names and data types as the columns and data types of the retrieved rows. Then, the table is populated with the result set from the Oracle database over two parallel threads.</p>
<pre>ttisql -connstr &#34;DSN=cachedb1_1122;UID=oratt;PWD=timesten;OraclePWD=oracle&#34;
 
Copyright (c) 1996-2013, Oracle.  All rights reserved.
Type ? or &#34;help&#34; for help, type &#34;exit&#34; to quit ttIsql
connect -connstr &#34;DSN=mydb;UID=oratt;PWD=timesten;OraclePWD=oracle&#34;;
Connection successful: DSN=mydb;UID=oratt;
DataStore=/timesten/install/info/DemoDataStore/mydb;DatabaseCharacterSet=US7ASCII;
ConnectionCharacterSet=US7ASCII;DRIVER=/timesten/install/lib/libtten.so;
PermSize=40;TempSize=32;TypeMode=0;OracleNetServiceName=inst1;

(Default setting AutoCommit=1)
Command&gt; createandloadfromoraquery employees 2 SELECT * FROM hr.employees;
Mapping query to this table:
    CREATE TABLE &#34;ORATT&#34;.&#34;EMPLOYEES&#34; (
    &#34;EMPLOYEE_ID&#34; number(6,0) NOT NULL,
    &#34;FIRST_NAME&#34; varchar2(20 byte),
    &#34;LAST_NAME&#34; varchar2(25 byte) NOT NULL,
    &#34;EMAIL&#34; varchar2(25 byte) NOT NULL,
    &#34;PHONE_NUMBER&#34; varchar2(20 byte),
    &#34;HIRE_DATE&#34; date NOT NULL,
    &#34;JOB_ID&#34; varchar2(10 byte) NOT NULL,
    &#34;SALARY&#34; number(8,2),
    &#34;COMMISSION_PCT&#34; number(2,2),
    &#34;MANAGER_ID&#34; number(6,0),
    &#34;DEPARTMENT_ID&#34; number(4,0)
     )
Table employees created
107 rows loaded from oracle.
</pre>
<p>Execute the <code>DESCRIBE</code> command to show the new table:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In this example, the table owner is not specified, so it defaults to the current user. In this example, the current user is <code>oratt</code>.</div>
<pre>Command&gt; DESCRIBE employees;
 
Table ORATT.EMPLOYEES:
  Columns:
    EMPLOYEE_ID                     NUMBER (6) NOT NULL
    FIRST_NAME                      VARCHAR2 (20) INLINE
    LAST_NAME                       VARCHAR2 (25) INLINE NOT NULL
    EMAIL                           VARCHAR2 (25) INLINE NOT NULL
    PHONE_NUMBER                    VARCHAR2 (20) INLINE
    HIRE_DATE                       DATE NOT NULL
    JOB_ID                          VARCHAR2 (10) INLINE NOT NULL
    SALARY                          NUMBER (8,2)
    COMMISSION_PCT                  NUMBER (2,2)
    MANAGER_ID                      NUMBER (6)
    DEPARTMENT_ID                   NUMBER (4)
 
1 table found.
(primary key columns are indicated with *)
 
Command&gt; SELECT * FROM employees;
&lt; 114, Den, Raphaely, DRAPHEAL, 515.127.4561, 2002-12-07 00:00:00, PU_MAN, 
11000, &lt;NULL&gt;, 100, 30 &gt;
&lt; 115, Alexander, Khoo, AKHOO, 515.127.4562, 2003-05-18 00:00:00, PU_CLERK, 
3100, &lt;NULL&gt;, 114, 30 &gt;
&hellip;
&lt; 205, Shelley, Higgins, SHIGGINS, 515.123.8080, 2002-06-07 00:00:00, 
AC_MGR, 12008, &lt;NULL&gt;, 101, 110 &gt;
&lt; 206, William, Gietz, WGIETZ, 515.123.8181, 2002-06-07 00:00:00, 
AC_ACCOUNT, 8300, &lt;NULL&gt;, 205, 110 &gt;
107 rows found. 
</pre>
<p>The following example uses the <code>createandloadfromoraquery</code> command to create the <code>oratt.emp</code> table on TimesTen and populate it in parallel over four threads with data from the <code>hr.employees</code> table on the Oracle database, where <code>employee_id</code> is less than 200.</p>
<pre>Command&gt; createandloadfromoraquery emp 4 SELECT * FROM hr.employees 
 WHERE employee_id &lt; 200;
Mapping query to this table:
    CREATE TABLE &#34;ORATT&#34;.&#34;EMP&#34; (
    &#34;EMPLOYEE_ID&#34; number(6,0) NOT NULL,
    &#34;FIRST_NAME&#34; varchar2(20 byte),
    &#34;LAST_NAME&#34; varchar2(25 byte) NOT NULL,
    &#34;EMAIL&#34; varchar2(25 byte) NOT NULL,
    &#34;PHONE_NUMBER&#34; varchar2(20 byte),
    &#34;HIRE_DATE&#34; date NOT NULL,
    &#34;JOB_ID&#34; varchar2(10 byte) NOT NULL,
    &#34;SALARY&#34; number(8,2),
    &#34;COMMISSION_PCT&#34; number(2,2),
    &#34;MANAGER_ID&#34; number(6,0),
    &#34;DEPARTMENT_ID&#34; number(4,0)
     )
 
Table emp created
100 rows loaded from oracle.
</pre>
<p>Then, the following <code>createandloadfromoraquery</code> retrieves all employees whose id is &gt; 200 and the result set is appended to the existing table in TimesTen. A warning tells you that the table already exists and that 6 rows were added to it.</p>
<pre>Command&gt; createandloadfromoraquery emp 4 SELECT * FROM hr.employees 
 WHERE employee_id &gt; 200;
Warning  2207: Table ORATT.EMP already exists
6 rows loaded from oracle.
</pre>
<p>A parallel load operation may take a long time to execute and you may want to cancel the operation. For more information on cancelling a parallel load operation, see <a href="#BJEEEDIJ">&#34;Cancel a parallel load operation&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDABGE"></a>
<div id="TTOPR752" class="sect2">
<h3 class="sect2">Use TimesTen built-in procedures to recommend a table and load SQL query results<a id="sthref747"></a><a id="sthref748"></a><a id="sthref749"></a><a id="sthref750"></a></h3>
<p>While the <code>createandloadfromoraquery</code> command automatically performs all of the tasks for creating the TimesTen table and loading the result set from the Oracle database into it, the following two built-in procedures separate the same functionality into the following two steps:</p>
<ol>
<li>
<p>The <code>ttTableSchemaFromOraQueryGet</code> built-in procedure evaluates the SQL query and generates the <code>CREATE TABLE</code> SQL statement that you can choose to execute. In order to execute this statement, the user should have all required privileges to execute the query on the Oracle database. This enables you to view the table structure without execution. However, it does require you to execute the recommended <code>CREATE TABLE</code> statement yourself.</p>
</li>
<li>
<p>The <code>ttLoadFromOracle</code> built-in procedure executes the SQL query on the back-end Oracle database and then loads the result set into the TimesTen table. It requires the TimesTen table name where the results are loaded, the Oracle Database SQL <code>SELECT</code> statement to obtain the required rows, and the number of parallel threads that you would like to be used in parallel when loading the table with this result set.</p>
<p>The call returns a single number indicating the number of rows loaded. Any subsequent calls append the retrieved rows to the table.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
See <a class="olink TTREF786" href="../TTREF/proced.htm#TTREF786">&#34;ttTableSchemaFromOraQueryGet&#34;</a> and <a class="olink TTREF785" href="../TTREF/proced.htm#TTREF785">&#34;ttLoadFromOracle&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for full details on syntax, requirements, restrictions, and required privileges.</div>
<p>The following example connects providing the DSN, user name, password for the user on TimesTen, the password for a user with the same name on the Oracle database, and the <code>OracleNetServiceName</code> for the Oracle database instance. Then, it calls the <code>ttTableSchemaFromOraQueryGet</code> built-in procedure to evaluate the <code>SELECT</code> statement and return a recommended <code>CREATE TABLE</code> statement for the <code>employees</code> table. Finally, the example calls the <code>ttLoadFromOracle</code> built-in procedure to load the <code>employees</code> table with the result set from the Oracle database. The load is performed in parallel over four threads, which is the default.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If <code>autocommit</code> is set to off, then the user must either commit or rollback manually after loading the table.</div>
<pre>$ ttisql &#34;DSN=mydb;uid=oratt;pwd=timesten;
OraclePwd=oracle;OracleNetServiceName=inst1&#34;
Copyright (c) 1996-2013, Oracle.  All rights reserved.
Type ? or &#34;help&#34; for help, type &#34;exit&#34; to quit ttIsql.
connect &#34;DSN=mydb;uid=oratt;pwd=timesten;
OraclePwd=oracle;OracleNetServiceName=inst1&#34;;
Connection successful: DSN=mydb;UID=oratt;
DataStore=/timesten/install/info/DemoDataStore/mydb;
DatabaseCharacterSet=US7ASCII;ConnectionCharacterSet=US7ASCII;
DRIVER=/timesten/install/lib/libtten.so;PermSize=40;TempSize=32;
TypeMode=0;OracleNetServiceName=inst1;
(Default setting AutoCommit=1)

Command&gt; call ttTableSchemaFromOraQueryGet(&#39;hr&#39;,&#39;employees&#39;,
 &#39;SELECT * FROM hr.employees&#39;);
&lt; CREATE TABLE &#34;HR&#34;.&#34;EMPLOYEES&#34; (
&#34;EMPLOYEE_ID&#34; number(6,0) NOT NULL,
&#34;FIRST_NAME&#34; varchar2(20 byte),
&#34;LAST_NAME&#34; varchar2(25 byte) NOT NULL,
&#34;EMAIL&#34; varchar2(25 byte) NOT NULL,
&#34;PHONE_NUMBER&#34; varchar2(20 byte),
&#34;HIRE_DATE&#34; date NOT NULL,
&#34;JOB_ID&#34; varchar2(10 byte) NOT NULL,
&#34;SALARY&#34; number(8,2),
&#34;COMMISSION_PCT&#34; number(2,2),
&#34;MANAGER_ID&#34; number(6,0),
&#34;DEPARTMENT_ID&#34; number(4,0)
 ) &gt;
1 row found.

Command&gt; CALL ttLoadFromOracle (&#39;HR&#39;,&#39;EMPLOYEES&#39;,&#39;SELECT * FROM HR.EMPLOYEES&#39;);
&lt; 107 &gt;
1 row found.

Command&gt; SELECT * FROM hr.employees;
&lt; 100, Steven, King, SKING, 515.123.4567, 2003-06-17 00:00:00, AD_PRES, 24000,
&lt;NULL&gt;, &lt;NULL&gt;, 90 &gt;
&lt; 101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 2005-09-21 00:00:00, AD_VP, 17000, 
&lt;NULL&gt;, 100, 90 &gt;
...
&lt; 205, Shelley, Higgins, SHIGGINS, 515.123.8080, 2002-06-07 00:00:00, AC_MGR, 
12008, &lt;NULL&gt;, 101, 110 &gt;
&lt; 206, William, Gietz, WGIETZ, 515.123.8181, 2002-06-07 00:00:00, AC_ACCOUNT, 
8300, &lt;NULL&gt;, 205, 110 &gt;
107 rows found.

</pre>
<p>The following example creates a table on the Oracle database, where <code>employee_id</code> is a column with a <code>PRIMARY KEY</code> constraints and <code>email</code> is a column with a <code>UNIQUE</code> constraint.</p>
<pre>SQL&gt; CREATE TABLE employees    ( employee_id    NUMBER(6) PRIMARY KEY
    , first_name     VARCHAR2(20)
    , last_name      VARCHAR2(25) NOT NULL
    , email          VARCHAR2(25) NOT NULL UNIQUE
    , phone_number   VARCHAR2(20)
    , hire_date      DATE NOT NULL
    , job_id         VARCHAR2(10) NOT NULL    , salary         NUMBER(8,2)
    , commission_pct NUMBER(2,2)    , manager_id     NUMBER(6)    , department_id  NUMBER(4)    ) ;

Table created.
</pre>
<p>Then, the following <code>ttTableSchemaFromOraQueryGet</code> built-in procedure evaluates the SQL query and generates a <code>CREATE TABLE</code> SQL statement. Note that in the suggested <code>CREATE TABLE</code> SQL statement the <code>PRIMARY KEY</code> and <code>UNIQUE</code> constraints are not carried over from the Oracle database. Nullability constraints are carried over from the Oracle database. This also applies to the <code>createandloadfromoraquery</code> command.</p>
<pre>Command&gt; call ttTableSchemaFromOraQueryGet (&#39;oratt&#39;, &#39;employees&#39;, &#39;select * from oratt.employees&#39;);
&lt; CREATE TABLE &#34;ORATT&#34;.&#34;EMPLOYEES&#34; ( 
&#34;EMPLOYEE_ID&#34; number(6,0) NOT NULL,
&#34;FIRST_NAME&#34; varchar2(20 byte),
&#34;LAST_NAME&#34; varchar2(25 byte) NOT NULL,
&#34;EMAIL&#34; varchar2(25 byte) NOT NULL,
&#34;PHONE_NUMBER&#34; varchar2(20 byte),
&#34;HIRE_DATE&#34; date NOT NULL,
&#34;JOB_ID&#34; varchar2(10 byte) NOT NULL,
&#34;SALARY&#34; number(8,2),
&#34;COMMISSION_PCT&#34; number(2,2),
&#34;MANAGER_ID&#34; number(6,0),
&#34;DEPARTMENT_ID&#34; number(4,0)
 ) &gt;
1 row found.
</pre>
<p>A parallel load operation may take a long time to execute and you may want to cancel the operation. For more information on cancelling a parallel load operation, see <a href="#BJEEEDIJ">&#34;Cancel a parallel load operation&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BJEEEDIJ"></a>
<div id="TTOPR788" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Cancel a parallel load operation</h3>
<p>You can cancel and cleanly stop all threads that are performing a parallel load operation with either the <code>SQLCancel(</code><code><span class="codeinlineitalic">hstmt</span></code><code>)</code> ODBC function or by pressing Ctrl-C in the <code>ttIsql</code> utility. For more information, see <a class="olink TTCDV474" href="../TTCDV/odbc_supported.htm#TTCDV474">&#34;Supported ODBC functions&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span> and <a href="#CHDIDFBF">&#34;Canceling ODBC functions&#34;</a> in this book.</p>
<p>A parallel load operation periodically commits, so any successful operations are not rolled back. When you issue the cancel command, TimesTen performs the cancel operation:</p>
<ul>
<li>
<p>Before insert threads are spawned.</p>
</li>
<li>
<p>After an insert batch commit (every 256 rows)</p>
</li>
<li>
<p>After the main thread completes a fetch from the Oracle database.</p>
</li>
</ul>
<p>To retry a cancelled parallel load operation, delete previously inserted rows from the TimesTen database to avoid duplicate rows.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJHCCE"></a>
<div id="TTOPR322" class="sect1">
<h2 class="sect1">Viewing and changing query optimizer plans</h2>
<p>The following sections describe how to view the query optimizer plans, commands in the SQL command cache, or query plans for commands in the SQL command cache:</p>
<ul>
<li>
<p><a href="#CHDCFJBJ">Using the showplan command</a></p>
</li>
<li>
<p><a href="#CHDFJDED">Viewing commands and explain plans from the SQL command cache</a></p>
</li>
</ul>
<a id="CHDCFJBJ"></a>
<div id="TTOPR691" class="sect2">
<h3 class="sect2">Using the showplan command</h3>
<p><a id="sthref751"></a><a id="sthref752"></a>The built-in <a id="sthref753"></a><a id="sthref754"></a><code>showplan</code> command is used to display the query optimizer plans used by the TimesTen Data Manager for executing queries. In addition, <code>ttIsql</code> contains built-in query optimizer hint commands for altering the query optimizer plan. By using the <a id="sthref755"></a><code>showplan</code> command in conjunction with the <code>ttIsql</code> commands summarized below, the optimum execution plan can be designed. For detailed information on the TimesTen query optimizer see <a href="query.htm#BABEJFHI">&#34;The TimesTen Query Optimizer&#34;</a>.</p>
<ul>
<li>
<p><a id="sthref756"></a><code>optprofile</code> - Displays the current optimizer hint settings and join order.</p>
</li>
<li>
<p><a id="sthref757"></a><code>setjoinorder</code> - Sets the join order.</p>
</li>
<li>
<p><a id="sthref758"></a><code>setuseindex</code> - Sets the index hint.</p>
</li>
<li>
<p><a id="sthref759"></a><code>tryhash</code> - Enables or disables the use of hash indexes.</p>
</li>
<li>
<p><a id="sthref760"></a><code>trymergejoin</code> - Enables or disables merge joins.</p>
</li>
<li>
<p><a id="sthref761"></a><code>trynestedloopjoin</code> - Enables or disables nested loop joins.</p>
</li>
<li>
<p><a id="sthref762"></a><code>tryserial</code> - Enables or disables serial scans.</p>
</li>
<li>
<p><a id="sthref763"></a><code>trytmphash</code> - Enables or disables the use of temporary hash indexes.</p>
</li>
<li>
<p><a id="sthref764"></a><code>trytmptable</code> - Enables or disables the use of an intermediate results table.</p>
</li>
<li>
<p><a id="sthref765"></a><code>trytmprange</code> - Enables or disables the use of temporary range indexes.</p>
</li>
<li>
<p><a id="sthref766"></a><code>tryrange</code> - Enables or disables the use of range indexes.</p>
</li>
<li>
<p><a id="sthref767"></a><code>tryrowid</code> - Enables or disables the use of rowid scans.</p>
</li>
<li>
<p><a id="sthref768"></a><code>trytbllocks</code> - Enables or disables the use of table locks.</p>
</li>
<li>
<p><a id="sthref769"></a><code>unsetjoinorder</code> - Clears the join order.</p>
</li>
<li>
<p><a id="sthref770"></a><code>unsetuseindex</code> - Clears the index hint.</p>
</li>
</ul>
<p>When using the <code>showplan</code> command and the query optimizer hint commands the autocommit feature must be turned off. Use the <code>ttIsql</code> <code>autocommit</code> command to turn off autocommit.</p>
<p>The example below shows how these commands can be used to change the query optimizer execution plan.</p>
<pre>Command&gt; CREATE TABLE T1 (A NUMBER);
Command&gt; CREATE TABLE T2 (B NUMBER);
Command&gt; CREATE TABLE T3 (C NUMBER);
Command&gt; INSERT INTO T1 VALUES (3);
1 row inserted.
Command&gt; INSERT INTO T2 VALUES (3);
1 row inserted.
Command&gt; INSERT INTO T3 VALUES (3);
1 row inserted.
Command&gt; INSERT INTO T1 VALUES (4);
1 row inserted.
Command&gt; INSERT INTO T2 VALUES (5);
1 row inserted.
Command&gt; INSERT INTO T3 VALUES (6);
1 row inserted.
Command&gt; autocommit 0;
Command&gt; showplan;
Command&gt; SELECT * FROM T1, T2, T3 WHERE A=B AND B=C AND A=B;

Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               3
  OPERATION:           TblLkSerialScan
  TBLNAME:             T2
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
 
  STEP:                2
  LEVEL:               3
  OPERATION:           TblLkSerialScan
  TBLNAME:             T3
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         T2.B = T3.C
 
 
  STEP:                3
  LEVEL:               2
  OPERATION:           NestedLoop
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
 
  STEP:                4
  LEVEL:               2
  OPERATION:           TblLkSerialScan
  TBLNAME:             T1
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         T1.A = T2.B AND T1.A = T2.B
 
 
  STEP:                5
  LEVEL:               1
  OPERATION:           NestedLoop
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
&lt; 3, 3, 3 &gt;
1 row found.

Command&gt; trytbllocks 0;
Command&gt; tryserial 0;
Command&gt; SELECT * FROM T1, T2, T3 WHERE A=B AND B=C AND A=B;

Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               3
  OPERATION:           TmpRangeScan
  TBLNAME:             T2
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
 
  STEP:                2
  LEVEL:               3
  OPERATION:           RowLkSerialScan
  TBLNAME:             T3
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         T2.B = T3.C
 
 
  STEP:                3
  LEVEL:               2
  OPERATION:           NestedLoop
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
 
  STEP:                4
  LEVEL:               2
  OPERATION:           RowLkSerialScan
  TBLNAME:             T1
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         T1.A = T2.B AND T1.A = T2.B
 
 
  STEP:                5
  LEVEL:               1
  OPERATION:           NestedLoop
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
&lt; 3, 3, 3 &gt;
1 row found.
</pre>
<p>In this example a query against three tables is executed and the query optimizer plan is displayed. The first version of the query simply uses the query optimizer&#39;s default execution plan. However, in the second version the <a id="sthref771"></a><code>trytbllocks</code> and <code>tryserial</code> <code>ttIsql</code> built-in hint commands have been used to alter the query optimizer&#39;s plan. Instead of using serial scans and nested loop joins the second version of the query uses temporary index scans, serial scans and nested loops.</p>
<p>In this way the <code>showplan</code> command in conjunction with <code>ttIsql</code>&#39;s built-in query optimizer hint commands can be used to quickly determine which execution plan should be used to meet application requirements.</p>
</div>
<!-- class="sect2" -->
<a id="CHDFJDED"></a>
<div id="TTOPR692" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Viewing commands and explain plans from the SQL command cache</h3>
<p>The following sections describe how to view commands and their explain plans:</p>
<ul>
<li>
<p><a href="#CHDCAHDG">View commands in the SQL command cache</a></p>
</li>
<li>
<p><a href="#CHDCBJJG">Display query plan for statement in SQL command cache</a></p>
</li>
</ul>
<a id="CHDCAHDG"></a>
<div id="TTOPR693" class="sect3">
<h4 class="sect3">View commands in the SQL command cache</h4>
<p><a id="sthref772"></a><a id="sthref773"></a><a id="sthref774"></a><a id="sthref775"></a>The <code>ttIsql</code> <code>cmdcache</code> command invokes the <code>ttSqlCmdCacheInfo</code> built-in procedure to display the contents of the TimesTen SQL command cache. See <a href="query.htm#BABEAEAA">&#34;Displaying commands stored in the SQL command cache&#34;</a> for full details on this procedure.</p>
<p>If you execute the <code>cmdcache</code> command without parameters, the full SQL command cache contents are displayed. Identical to the <code>ttSqlCmdCacheInfo</code> built-in procedure, you can provide a command ID to specify a specific command to be displayed.</p>
<p>In addition, the <code>ttIsql</code> <code>cmdcache</code> command can filter the results so that only those commands that match a particular owner or query text are displayed.</p>
<p>The syntax for the <code>cmdcache</code> command is as follows:</p>
<pre>cmdcache [[by {sqlcmdid | querytext | owner}] &lt;<span class="italic">query_substring</span>&gt;
</pre>
<p>If you provide the <code>owner</code> parameter, the results are filtered by the owner, identified by the <code><span class="codeinlineitalic">&lt;query_substring&gt;</span></code>, displayed within each returned command. If you provide the <code>querytext</code> parameter, the results are filtered so that all queries are displayed that contain the substring provided within the <code><span class="codeinlineitalic">&lt;query_substring&gt;</span></code>. If only the <code><span class="codeinlineitalic">&lt;query_substring&gt;</span></code> is provided, such as <code>cmdcache</code> <code><span class="codeinlineitalic">&lt;query_substring&gt;</span></code>, the command assumes to filter the query text by the <code><span class="codeinlineitalic">&lt;query_substring&gt;</span></code>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCBJJG"></a>
<div id="TTOPR694" class="sect3">
<h4 class="sect3">Display query plan for statement in SQL command cache</h4>
<p><a id="sthref776"></a><a id="sthref777"></a><a id="sthref778"></a><a id="sthref779"></a><a id="sthref780"></a>The <code>ttIsql</code> <code>explain</code> command displays the query plan for an individual command.</p>
<ul>
<li>
<p>If you provide a command ID from the SQL command cache, the <code>explain</code> command invokes the <code>ttSqlCmdQueryPlan</code> built-in procedure to display the query plan for an individual command in the TimesTen SQL command cache. If you want the explain plan displayed in a formatted method, execute the explain command instead of calling the <code>ttSqlCmdQueryPlan</code> built-in procedure. Both provide the same information, but the <code>ttSqlCmdQueryPlan</code> built-in procedure provides the data in a raw data format. See <a href="query.htm#BABJFDIE">&#34;Viewing query plans associated with commands stored in the SQL command cache&#34;</a> for full details on the <code>ttSqlCmdQueryPlan</code> built-in procedure.</p>
</li>
<li>
<p>If you provide a SQL statement or the history item number, the <code>explain</code> command compiles the SQL statements necessary to display the explain plan for this particular SQL statement.</p>
</li>
</ul>
<p>The syntax for the <code>explain</code> command is as follows:</p>
<pre>explain [plan for] {[&lt;<span class="italic">Connid</span>&gt;.]&lt;<span class="italic">ttisqlcmdid</span>&gt; | sqlcmdid &lt;<span class="italic">sqlcmdid</span>&gt; | &lt;<span class="italic">sqlstmt</span>&gt; 
| !&lt;<span class="italic">historyitem</span>&gt;}
</pre>
<p>Identical to the <code>ttSqlCmdQueryPlan</code> built-in procedure, you can provide a command ID to specify a specific command to be displayed. The command ID can be retrieved with the <code>cmdcache</code> command, as described in <a href="#CHDCAHDG">&#34;View commands in the SQL command cache&#34;</a>.</p>
<p>The following example provides an explain plan for command ID <code>38001456</code>:</p>
<pre>Command&gt; EXPLAIN SQLCMDID 38001456;
 
Query Optimizer Plan:
 Query Text: select * from all_objects where object_name = &#39;DBMS_OUTPUT&#39;
 
  STEP:             1
  LEVEL:            12
  OPERATION:        TblLkRangeScan
  TABLENAME:        OBJ$
  TABLEOWNERNAME:   SYS
  INDEXNAME:        USER$.I_OBJ
  INDEXEDPRED:      
  NONINDEXEDPRED:   (RTRIM( NAME ))  = DBMS_OUTPUT;NOT( 10 = TYPE#) ;
(  FLAGS ^ 128 = 0) ;
 
 
  STEP:             2
  LEVEL:            12
  OPERATION:        RowLkRangeScan
  TABLENAME:        OBJAUTH$
  TABLEOWNERNAME:   SYS
  INDEXNAME:        OBJAUTH$.I_OBJAUTH1
  INDEXEDPRED:      ( (GRANTEE#=1 )  OR (GRANTEE#=10 ) )  AND ( (PRIVILEGE#=8 ) )
  NONINDEXEDPRED:   OBJ# = OBJ#;
 
 
  STEP:             3
  LEVEL:            11
  OPERATION:        NestedLoop(Left OuterJoin)
  TABLENAME:        
  TABLEOWNERNAME:   
  INDEXNAME:        
  INDEXEDPRED:      
  NONINDEXEDPRED: 
...
 STEP:             21
  LEVEL:            1
  OPERATION:        Project
  TABLENAME:        
  TABLEOWNERNAME:   
  INDEXNAME:        
  INDEXEDPRED:      
  NONINDEXEDPRED:   
 
Command&gt; 
</pre>
<p>In addition, the <code>ttIsql</code> <code>explain</code> command can generate an explain plan for any SQL query you provide. For example, the following shows the explain plan for the SQL query: &#34;<code>SELECT * FROM EMPLOYEES;</code>&#34;</p>
<pre>Command&gt; EXPLAIN SELECT * FROM EMPLOYEES;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               1
  OPERATION:           TblLkRangeScan
  TBLNAME:             EMPLOYEES
  IXNAME:              EMP_NAME_IX
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
</pre>
<p>You can also retrieve explain plans based upon the command history. The following example shows how you explain a previously executed SQL statement using the history command ID:</p>
<pre>Command&gt; SELECT * FROM all_objects WHERE object_name = &#39;DBMS_OUTPUT&#39;;
&lt; SYS, DBMS_OUTPUT, &lt;NULL&gt;, 241, &lt;NULL&gt;, PACKAGE, 2009-10-13 10:41:11, 2009-10-13 
10:41:11, 2009-10-13:10:41:11, VALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; PUBLIC, DBMS_OUTPUT, &lt;NULL&gt;, 242, &lt;NULL&gt;, SYNONYM, 2009-10-13 10:41:11, 
2009-10-13 10:41:11, 2009-10-13:10:41:11, INVALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; SYS, DBMS_OUTPUT, &lt;NULL&gt;, 243, &lt;NULL&gt;, PACKAGE BODY, 2009-10-13 10:41:11, 
2009-10-13 10:41:11, 2009-10-13:10:41:11, VALID, N, N, N, 2, &lt;NULL&gt; &gt;
3 rows found.
Command&gt; HISTORY;
1     connect &#34;DSN=cache&#34;;
2     help cmdcache;
3     cmdcache;
4     explain select * from dual;
5     select * from all_objects where object_name = &#39;DBMS_OUTPUT&#39;;
Command&gt; EXPLAIN !5;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               10
  OPERATION:           TblLkRangeScan
  TBLNAME:             SYS.OBJ$
  IXNAME:              USER$.I_OBJ
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         O.FLAGS &amp; 128 = 0 AND CAST(RTRIM (O.NAME) AS VARCHAR2(30 
BYTE) INLINE) = &#39;DBMS_OUTPUT&#39; AND O.TYPE# &lt;&gt; 10
 
  STEP:                2
  LEVEL:               10
  OPERATION:           RowLkRangeScan
  TBLNAME:             SYS.OBJAUTH$
  IXNAME:              OBJAUTH$.I_OBJAUTH1
  INDEXED CONDITION:   (OA.GRANTEE# = 1 OR OA.GRANTEE# = 10) AND OA.PRIVILEGE# = 8
  NOT INDEXED:         OA.OBJ# = O.OBJ#
 
  STEP:                3
  LEVEL:               9
  OPERATION:           NestedLoop(Left OuterJoin)
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                4
  LEVEL:               9
  OPERATION:           TblLkRangeScan
  TBLNAME:             SYS.OBJAUTH$
  IXNAME:              OBJAUTH$.I_OBJAUTH1
  INDEXED CONDITION:   (OBJAUTH$.GRANTEE# = 1 OR OBJAUTH$.GRANTEE# = 10) AND 
(OBJAUTH$.PRIVILEGE# = 2 OR OBJAUTH$.PRIVILEGE# = 3 OR OBJAUTH$.PRIVILEGE# = 4 OR 
OBJAUTH$.PRIVILEGE# = 5 OR OBJAUTH$.PRIVILEGE# = 8)
  NOT INDEXED:         O.OBJ# = OBJAUTH$.OBJ#
... 
 STEP:                19
  LEVEL:               1
  OPERATION:           NestedLoop(Left OuterJoin)
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         O.OWNER# = 1 OR (O.TYPE# IN (7,8,9) AND (NOT( ISNULLROW 
(SYS.OBJAUTH$.ROWID)) OR NOT( ISNULLROW (SYS.SYSAUTH$.ROWID)))) OR (O.TYPE# IN 
(1,2,3,4,5) AND NOT( ISNULLROW (SYS.SYSAUTH$.ROWID))) OR (O.TYPE# = 6 AND NOT( 
ISNULLROW (SYS.SYSAUTH$.ROWID))) OR (O.TYPE# = 11 AND NOT( ISNULLROW 
(SYS.SYSAUTH$.ROWID))) OR (O.TYPE# NOT IN (7,8,9,11) AND NOT( ISNULLROW 
(SYS.OBJAUTH$.ROWID))) OR (O.TYPE# = 28 AND NOT( ISNULLROW (SYS.SYSAUTH$.ROWID))) 
OR (O.TYPE# = 23 AND NOT( ISNULLROW (SYS.SYSAUTH$.ROWID))) OR O.OWNER# = 10
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDIDIBB"></a>
<div id="TTOPR724" class="sect1">
<h2 class="sect1">Managing ODBC functions</h2>
<p>You can perform the following on ODBC functions within ttIsql:</p>
<ul>
<li>
<p><a href="#CHDIDFBF">Canceling ODBC functions</a></p>
</li>
<li>
<p><a href="#BABDIHDH">Timing ODBC function calls</a></p>
</li>
</ul>
<a id="CHDIDFBF"></a>
<div id="TTOPR725" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Canceling <a id="sthref781"></a>ODBC functions</h3>
<p>The ttIsql command attempts to cancel an ongoing ODBC function when the user presses Ctrl-C.</p>
</div>
<!-- class="sect2" -->
<a id="BABDIHDH"></a>
<div id="TTOPR323" class="sect2">
<h3 class="sect2"><a id="sthref782"></a><a id="sthref783"></a>Timing ODBC function calls</h3>
<p><a id="sthref784"></a><a id="sthref785"></a>Information on the time required to execute common ODBC function calls can be displayed by using the <code>ttIsql</code> <code>timing</code> command. When the timing feature is enabled many built-in <code>ttIsql</code> commands report the elapsed execution time associated with the primary ODBC function call corresponding to the <code>ttIsql</code> command that is executed.</p>
<p>For example, when executing the <code>ttIsql</code> <a id="sthref786"></a><a id="sthref787"></a><code>connect</code> command several ODBC function calls are executed, however, the primary ODBC function call associated with <code>connect</code> is <code>SQLDriverConnect</code> and this is the function call that is timed and reported as shown below.</p>
<pre>Command&gt; timing 1;
Command&gt; connect &#34;DSN=MY_DSN&#34;;
Connection successful: DSN=MY_DSN;DataStore=E:\ds\MY_DSN;
DRIVER=E:\WINNT\System32\ TTdv1122.dll;
(Default setting AutoCommit=1)
Execution time (SQLDriverConnect) = 1.2626 seconds.
Command&gt;
</pre>
<p>In the example above, the <code>SQLDriverConnect</code> call took about 1.26 seconds to execute.</p>
<p>When using the <code>timing</code> command to measure queries, the time required to execute the query plus the time required to fetch the query results is measured. To avoid measuring the time to format and print query results to the display, set the verbosity level to 0 before executing the query.</p>
<pre>Command&gt; timing 1;
Command&gt; verbosity 0;
Command&gt; SELECT * FROM T1;
Execution time (SQLExecute + FetchLoop) = 0.064210 seconds.
Command&gt;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDDEHID"></a>
<div id="TTOPR726" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Error recovery with <a id="sthref788"></a><a id="sthref789"></a><a id="sthref790"></a>WHENEVER SQLERROR</h2>
<p>Execute the <code>WHENEVER</code> <code>SQLERROR</code> command to prescribe what to do when a SQL error occurs. <code>WHENEVER</code> <code>SQLERROR</code> can be used to set up a recovery action for SQL statements, SQL script, or PL/SQL block.</p>
<p>By default, if a SQL error occurs while in ttIsql, the error information is displayed and ttIsql continues so that you can enter a new command. The default setting is <code>WHENEVER SQLERROR CONTINUE NONE</code>. You can also specify that ttIsql exits each time an error occurs, which may not be the best action for interactive use or when executing a SQL script or a PL/SQL block.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For syntax of the <code>WHENEVER SQLERROR</code> command, see the <a class="olink TTREF342" href="../TTREF/util.htm#TTREF342">&#34;ttIsql&#34;</a> section in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</div>
<p>The following example uses <code>EXIT</code> to return an error code of 255 and executes a <code>COMMIT</code> statement to save all changes to the current connection before exiting ttIsql. The example retrieves the error code using the C shell <code>echo $status</code> command.</p>
<pre>Command&gt; WHENEVER SQLERROR EXIT 255 COMMIT;
Command&gt; SELECT emp_id FROM employee;
 2206: Table PAT.EMPLOYEE not found
WHENEVER SQLERROR exiting.
$ echo $status
255
</pre>
<p>The following example demonstrates how the <code>WHENEVER</code> <code>SQLERROR</code> command can execute ttIsql commands or TimesTen utilities when an error occurs, even if the error is from another TimesTen utility:</p>
<pre>Command&gt; WHENEVER SQLERROR EXEC &#34;DSSIZE;CALL TTSQLCMDCACHEINFOGET();&#34;;
Command&gt; CALL TTCACHEPOLICYGET;
 5010: No OracleNetServiceName specified in DSN
The command failed.
 
DSSIZE;
 
  PERM_ALLOCATED_SIZE:      32768
  PERM_IN_USE_SIZE:         9204
  PERM_IN_USE_HIGH_WATER:   9204
  TEMP_ALLOCATED_SIZE:      40960
  TEMP_IN_USE_SIZE:         7785
  TEMP_IN_USE_HIGH_WATER:   7848
 
CALL TTSQLCMDCACHEINFOGET();
 
CMDCOUNT, FREEABLECOUNT, SIZE
&lt; 10, 7, 41800 &gt;
1 row found.
</pre>
<p>The following demonstrates the <code>SUPPRESS</code> command option. It suppresses all error messages and continues to the next command. The example shows that the error messages can be turned back on in the existing connection with another command option, which in this case is the <code>EXIT</code> command.</p>
<pre>Command&gt; WHENEVER SQLERROR SUPPRESS;
Command&gt; SELECT *;
Command&gt; WHENEVER SQLERROR EXIT;
Command&gt; SELECT *;
 1001: Syntax error in SQL statement before or at: &#34;&#34;, character position: 9
select *
        ^
WHENEVER SQLERROR exiting.
</pre>
<p>The following example sets a bind variable called <code>retcode</code>, the value of which is returned when a SQL error occurs:</p>
<pre>Command&gt; VARIABLE retcode NUMBER := 111;
Command&gt; WHENEVER SQLERROR EXIT :retcode;
Command&gt; INSERT INTO EMPLOYEES VALUES (
       &gt; 202, &#39;Pat&#39;, &#39;Fay&#39;, &#39;PFAY&#39;, &#39;603.123.6666&#39;,
       &gt; TO_DATE (&#39;17-AUG-1997&#39;, &#39;DD-MON-YYYY&#39;),
       &gt; &#39;MK_REP&#39;, 6000, NULL, 201, 20);
  907: Unique constraint (EMPLOYEES on PAT.EMPLOYEES) violated at Rowid
 &lt;BMUFVUAAACOAAAAIiB&gt;
WHENEVER SQLERROR exiting.
$ echo $status;
111
</pre></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3223">
<tr>
<td class="cellalignment3230">
<table class="cellalignment3228">
<tr>
<td class="cellalignment3227"><a href="globalization.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3227"><a href="trans.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3232">
<table class="cellalignment3226">
<tr>
<td class="cellalignment3227"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3227"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3227"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3227"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3227"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3227"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>