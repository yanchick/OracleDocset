<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2049"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Multimedia%20ORDDoc%20Object%20Type"></a><title>Oracle Multimedia ORDDoc Object Type</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="Presents reference information about using Oracle Database to store, manage, and retrieve images, audio, video, DICOM format medical images and other objects, or other heterogeneous media data in an integrated fashion with other enterprise information. Oracle Multimedia extends Oracle Database reliability, availability, and data management to multimedia content in Internet, electronic commerce, medical, financial, and other media-rich applications."/>
<meta name="dcterms.created" content="2014-07-30T15:7:3Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Multimedia Reference"/>
<meta name="dcterms.identifier" content="E17696-09"/>
<meta name="dcterms.isVersionOf" content="AIVUG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="ch_audref.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ch_imgref.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17696-09.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/25</span> <!-- End Header -->
<div id="AIVUG5000" class="chapter"><a id="g1099816"></a> <a id="i1084359"></a>
<h1 class="chapter"><span class="secnum">4</span> Oracle Multimedia ORDDoc Object Type</h1>
<p>Oracle Multimedia provides the ORDDoc object type<a id="sthref481"></a>, which supports the storage and management of any media data including image, audio, and video.</p>
<p>The ORDDoc object type is defined in the <code>orddspec.sql</code> file<a id="sthref482"></a>. After installation, this file is available in the Oracle home directory at:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\im\admin</code> (on Windows)</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/im/admin</code> (on Linux and UNIX)</p>
<p>This chapter contains these sections:</p>
<ul>
<li>
<p><a href="#CHEFIJFA">ORDDoc Object Examples</a></p>
</li>
<li>
<p><a href="#BABCJBBF">Important Notes for ORDDoc Methods</a></p>
</li>
<li>
<p><a href="#BABCGGCC">ORDDoc Object Type</a></p>
</li>
<li>
<p><a href="#BABEIFGJ">ORDDoc Constructors</a></p>
</li>
<li>
<p><a href="#BABECEGG">ORDDoc Methods</a></p>
</li>
</ul>
<a id="CHEFIJFA"></a>
<div id="AIVUG5100" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.1</span> ORDDoc Object Examples</h2>
<p>The examples in this chapter use the ONLINE_MEDIA table in the Product Media (PM) sample schema. To replicate the examples on your computer, begin with the examples shown in the reference pages for the ORDDoc constructors and the import( ) and importFrom( ) methods. Then, substitute your media files for those in the examples.</p>
<p>The example for the constructor <a href="#CACHAEFD">ORDDoc for BLOBs</a> uses the test document table TDOC. (See <a href="ch_relatref.htm#CHECCDAH">Section 7.2.3</a> for the definition of this table.)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you manipulate the media data itself (by either directly modifying the BLOB or changing the external source), you must ensure that the object attributes stay synchronized and the update time is modified; otherwise, the object attributes will not match the media data.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink COMSC00025" href="../COMSC/scripts.htm#COMSC00025"><span class="italic">Oracle Database Sample Schemas</span></a> for more information about the PM schema</p>
</div>
<div id="AIVUG80855" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref483"></a>
<h3 class="sect2"><span class="secnum">4.1.1</span> Directory Definition for ORDDoc Object Examples</h3>
<p>Issue the following statements before executing the examples, where <code>c:\mydir\work</code> is the directory where the user <code>ron</code> can find the image, audio, and video data:</p>
<pre>CONNECT sys as sysdba
CREATE OR REPLACE DIRECTORY FILE_DIR as &#39;c:\mydir\work&#39;;
GRANT READ ON DIRECTORY FILE_DIR TO &#39;ron&#39;;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCJBBF"></a>
<div id="AIVUG5200" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.2</span> Important Notes for ORDDoc Methods</h2>
<p>Methods invoked at the ORDSource level that are handed off to the source plug-in for processing have ctx (RAW) as the first argument. Before calling any of these methods for the first time, the client must allocate the ctx structure, initialize it to NULL, and invoke the openSource( ) method. At this point, the source plug-in can initialize context for this client. When processing is complete, the client must invoke the closeSource( ) method.</p>
<p>Methods invoked from a source plug-in call have the first argument as ctx (RAW).</p>
<p>Methods invoked at the ORDDoc level that are handed off to the format plug-in for processing have ctx (RAW) as the first argument. Before calling any of these methods for the first time, the client must allocate the ctx structure and initialize it to NULL.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In the current release, none of the plug-ins provided by Oracle and not all source or format plug-ins use the ctx argument, but if you code as previously described, your application should work with current or future source or format plug-ins.</div>
<p>Use any of the individual set methods to set the attribute value for an object for formats not natively supported; otherwise, for formats natively supported, use the setProperties( ) method to populate the attributes of the object or write a format plug-in.</p>
</div>
<!-- class="sect1" -->
<div class="refentry"><a id="BABCGGCC"></a>
<div id="AIVUG5300" class="refsect1">
<h2 class="refsect1">ORDDoc Object Type<a id="sthref484"></a><a id="sthref485"></a></h2>
<p>The ORDDoc<a id="sthref486"></a> object type supports the storage and management of any media data including image, audio, and video. The attributes for this object type are defined as follows in the <code>orddspec.sql</code> file:</p>
<pre>  -------------------
  -- TYPE ATTRIBUTES
  -------------------
  source              ORDSource,
  format              VARCHAR(80),
  mimeType            VARCHAR(80),
  contentLength       INTEGER,
  comments            CLOB,
</pre>
<p>where:</p>
<ul>
<li>
<p>source: the ORDSource where the media data is found.</p>
</li>
<li>
<p>format: the format in which the media data is stored.</p>
</li>
<li>
<p>mimeType: the MIME type information.</p>
</li>
<li>
<p>contentLength: the length of the media data stored in the source.</p>
</li>
<li>
<p>comments: the metadata information of the media object.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
The comments attribute is populated by the setProperties( ) method when the setComments parameter is TRUE. Oracle recommends that you not write to this attribute directly.</div>
</div>
<!-- class="refsect1" -->
<a id="BABEIFGJ"></a>
<div id="AIVUG5400" class="refsect1">
<h2 class="refsect1">ORDDoc Constructors<a id="sthref487"></a><a id="sthref488"></a></h2>
<p>This section describes these ORDDoc constructor functions:</p>
<ul>
<li>
<p><a href="#CACHAEFD">ORDDoc for BLOBs</a></p>
</li>
<li>
<p><a href="#CACIDAJF">ORDDoc for Other Sources</a></p>
</li>
</ul>
<div id="AIVUG80757" class="refsect2"><a id="CACHAEFD"></a>
<h3 class="refsect2"><a id="sthref489"></a><a id="sthref490"></a>ORDDoc for BLOBs</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref491"></a>Format</p>
<p class="synopsis">ORDDoc(SELF IN OUT NOCOPY ORDSYS.ORDDoc,<br/>
data IN BLOB,<br/>
setproperties IN INTEGER DEFAULT 0)<br/>
RETURN SELF AS RESULT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref492"></a>Description</p>
<p>Constructs an ORDDoc object from a BLOB. The data stored in the BLOB is copied into the ORDDoc object when the constructed ORDDoc object is inserted or updated into a table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref493"></a>Parameters</p>
<dl>
<dt>data</dt>
<dd>
<p>Media content stored in a BLOB.</p>
</dd>
<dt>setproperties</dt>
<dd>
<p>Indicator flag that determines whether the setProperties( ) method is called in the constructor. If the value is <code>1</code>, the setProperties( ) method is called. If the value is <code>0</code>, the method is not called. The default is <code>0</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref494"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref495"></a>Exceptions</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref496"></a>Usage Notes</p>
<p>Use this constructor to create an ORDDoc object when the media content is stored in either a temporary or a persistent BLOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref497"></a>Examples</p>
<p>Create an ORDDoc object from a BLOB object and insert it into the table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The user who runs this statement must have the SELECT privilege on the table <code>tdoc</code> created by the user <code>mediauser</code>.
<p>See <a href="ch_relatref.htm#CHECCDAH">Section 7.2.3</a> for a definition of the test document table TDOC.</p>
</div>
<pre>INSERT INTO pm.online_media (product_id, product_testimonials)
  SELECT 2808, ORDSYS.ORDDoc(t.document) FROM mediauser.tdoc t WHERE t.n = 1;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80758" class="refsect2"><a id="CACIDAJF"></a>
<h3 class="refsect2"><a id="sthref498"></a><a id="sthref499"></a>ORDDoc for Other Sources</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref500"></a>Format</p>
<p class="synopsis">ORDDoc( SELF IN OUT NOCOPY ORDSYS.ORDDoc,<br/>
source_type IN VARCHAR2 DEFAULT &#39;LOCAL&#39;,<br/>
source_location IN VARCHAR2 DEFAULT NULL,<br/>
source_name IN VARCHAR2 DEFAULT NULL,<br/>
setproperties IN INTEGER DEFAULT 0<br/>
) RETURN SELF AS RESULT</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref501"></a>Description</p>
<p>Constructs an ORDDoc object from a specific source. By default, an empty object with a local source is constructed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref502"></a>Parameters</p>
<dl>
<dt>source_type</dt>
<dd>
<p>The type of the source media data. Valid values are: <code>FILE</code>, <code>HTTP</code>, <code>LOCAL</code>, or user-defined. The default is <code>LOCAL</code>.</p>
<p>The parameter value <code>LOCAL</code> indicates that the data is stored in Oracle Database. The parameter value <code>LOCAL</code> is never stored in the srcType attribute. Rather, this parameter value indicates that the data is stored in Oracle Database in the localData attribute. (See <a href="ch_comref.htm#CHEBDBIB">Section 2.2</a> for a description of the ORDSource object.)</p>
</dd>
<dt>source_location</dt>
<dd>
<p>The location from which the source media data is to be imported. (See <a href="ch_comref.htm#BABGFBBB">Table 2-2</a>.)</p>
</dd>
<dt>source_name</dt>
<dd>
<p>The name of the source media data. (See <a href="ch_comref.htm#BABBGHFE">Table 2-3</a>.)</p>
</dd>
<dt>setproperties</dt>
<dd>
<p>Indicator flag that determines whether the setProperties( ) method is called in the constructor. If the value is <code>1</code>, the setProperties( ) method is called. If the value is <code>0</code>, the method is not called. The default is <code>0</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref503"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref504"></a>Exceptions</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref505"></a>Usage Notes</p>
<p>Use this constructor to create an ORDDoc object when the media content is not already stored in a BLOB, as in any of these situations:</p>
<br/>
The content is in a local file.<br/>
The content is referenced by a URL.<br/>
The content is not available when the ORDDoc object is created.</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref506"></a>Examples</p>
<p>Create an ORDDoc object from a specified source:</p>
<pre>-- Construct an ORDDoc object from an external file and insert it into the table.
INSERT INTO pm.online_media (product_id, product_testimonials)
  VALUES (2999, ORDSYS.ORDDoc(&#39;FILE&#39;, &#39;FILE_DIR&#39;, &#39;modem.jpg&#39;));
 
-- Initialize an ORDDoc object in the table.
INSERT INTO pm.online_media (product_id, product_testimonials)
  VALUES(2808, ORDSYS.ORDDoc());
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABECEGG"></a>
<div id="AIVUG5500" class="refsect1">
<h2 class="refsect1">ORDDoc Methods<a id="sthref507"></a><a id="sthref508"></a></h2>
<p>This section presents reference information about the Oracle Multimedia methods used specifically for media data manipulation.</p>
<p><a href="ch_comref.htm#g1135951">Chapter 2</a> presents reference information about the Oracle Multimedia methods that are common to ORDAudio, ORDDoc, ORDImage, and ORDVideo. Use the methods presented in both chapters to get and set attributes, and to perform metadata extractions.</p>
<p>This section describes these methods:</p>
<ul>
<li>
<p><a href="#i1088857">getContentInLob( )</a></p>
</li>
<li>
<p><a href="#i1088934">getContentLength( )</a></p>
</li>
<li>
<p><a href="#i1088702">getFormat( )</a></p>
</li>
<li>
<p><a href="#i1082381">import( )</a></p>
</li>
<li>
<p><a href="#i1088766">importFrom( )</a></p>
</li>
<li>
<p><a href="#i1089022">setFormat( )</a></p>
</li>
<li>
<p><a href="#i1088208">setProperties( )</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink CNCPT010" href="../CNCPT/tablecls.htm#CNCPT010"><span class="italic">Oracle Database Concepts</span></a> for more information about object types and methods</p>
</div>
<div id="AIVUG80465" class="refsect2"><a id="i1088857"></a>
<h3 class="refsect2"><a id="sthref509"></a><a id="sthref510"></a>getContentInLob( )</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref511"></a>Format</p>
<p class="synopsis">getContentInLob(ctx IN OUT RAW,</p>
<p class="synopsis">dest_lob IN OUT NOCOPY BLOB,</p>
<p class="synopsis">mimeType OUT VARCHAR2,</p>
<p class="synopsis">format OUT VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref512"></a>Description</p>
<p>Copies data from a data source into the specified BLOB. The BLOB must not be the BLOB in the source.localData attribute (of the embedded ORDSource object).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref513"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The source plug-in context information. (See <a href="#BABCJBBF">Section 4.2</a>.)</p>
</dd>
<dt>dest_lob</dt>
<dd>
<p>The LOB in which to receive data.</p>
</dd>
<dt>mimeType</dt>
<dd>
<p>The MIME type of the data; this may or may not be returned.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the data; this may or may not be returned.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref514"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref515"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref516"></a>Exceptions</p>
<p>ORDDocExceptions.NULL_SOURCE</p>
<p>This exception is raised when the value of the ORDDoc.source attribute is <code>NULL</code>.</p>
<p>ORDSourceExceptions.METHOD_NOT_SUPPORTED</p>
<p>This exception is raised if you call the getContentInLob( ) method and this method is not supported by the source plug-in being used.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref517"></a>Examples</p>
<p>Get data from a data source and put it into the specified BLOB:</p>
<pre>DECLARE
 obj ORDSYS.ORDDoc;
 tempBLob BLOB;
 mimeType VARCHAR2(4000);
 format VARCHAR2(31);
 ctx RAW(64) :=NULL;
BEGIN
 SELECT product_testimonials INTO obj FROM pm.online_media 
    WHERE product_id = 2808 ;
 IF (obj.isLocal()) THEN
   DBMS_OUTPUT.put_line(&#39;Local is true&#39;);
 END IF;
 DBMS_LOB.CREATETEMPORARY(tempBLob, true, 10);
 obj.getContentInLob(ctx,tempBLob, mimeType,format);
 DBMS_OUTPUT.PUT_LINE(&#39;Length: &#39; || TO_CHAR(DBMS_LOB.getLength(tempBLob)));
 EXCEPTION
  WHEN ORDSYS.ORDSourceExceptions.METHOD_NOT_SUPPORTED THEN
   DBMS_OUTPUT.put_line(&#39;ORDSourceExceptions.METHOD_NOT_SUPPORTED caught&#39;);
  WHEN OTHERS THEN
   DBMS_OUTPUT.put_line(&#39;EXCEPTION caught&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80466" class="refsect2"><a id="i1088934"></a>
<h3 class="refsect2"><a id="sthref518"></a><a id="sthref519"></a>getContentLength( )</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref520"></a>Format</p>
<p class="synopsis">getContentLength( ) RETURN INTEGER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref521"></a>Description</p>
<p>Returns the length of the media data content stored in the source.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref522"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref523"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref524"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref525"></a>Exceptions</p>
<p>ORDDocExceptions.NULL_SOURCE</p>
<p>This exception is raised when the value of the ORDDoc.source attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref526"></a>Examples</p>
<p>Get the content length of the media data:</p>
<pre>DECLARE
 obj ORDSYS.ORDDoc;
BEGIN
 SELECT product_testimonials INTO obj FROM pm.online_media 
   WHERE product_id = 2808 ;
 IF (obj.isLocal()) THEN
   DBMS_OUTPUT.put_line(&#39;Local is true&#39;);
 END IF;
 DBMS_OUTPUT.PUT_LINE(&#39;Content length is &#39; || TO_CHAR(obj.getContentLength()));
END;/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80467" class="refsect2"><a id="i1088702"></a>
<h3 class="refsect2"><a id="sthref527"></a><a id="sthref528"></a>getFormat( )</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref529"></a>Format</p>
<p class="synopsis">getFormat( ) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref530"></a>Description</p>
<p>Returns the value of the format attribute of the media object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref531"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref532"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref533"></a>Pragmas</p>
<p>PRAGMA RESTRICT_REFERENCES(getFormat, WNDS, WNPS, RNDS, RNPS)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref534"></a>Exceptions</p>
<p>ORDDocExceptions.INVALID_FORMAT_TYPE</p>
<p>This exception is raised if you call the getFormat( ) method and the value of the format attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref535"></a>Examples</p>
<p>See the example in <a href="#i1089022">setFormat( )</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80468" class="refsect2"><a id="i1082381"></a>
<h3 class="refsect2"><a id="sthref536"></a><a id="sthref537"></a>import( )</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref538"></a>Format</p>
<p class="synopsis">import(ctx IN OUT RAW</p>
<p class="synopsis">set_prop IN BOOLEAN);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref539"></a>Description</p>
<p>Transfers media data from an external media data source to the source.localData attribute (of the embedded ORDSource object) within the database.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref540"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The source plug-in context information. This parameter must be allocated and initialized to NULL. If you are using a user-defined source plug-in, call the <a href="ch_comref.htm#BABBAGIG">openSource( )</a> method. (See <a href="#BABCJBBF">Section 4.2</a>.)</p>
</dd>
<dt>set_prop</dt>
<dd>
<p>A value that determines whether the setProperties( ) method is called. If the value of this parameter is <code>TRUE</code>, then the setProperties( ) method is called to read the media data to get the values of the object attributes and store them in the object attributes; otherwise, if the value is <code>FALSE</code>, the setProperties( ) method is not called. The default value is <code>FALSE</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref541"></a>Usage Notes</p>
<p>Use the setSource( ) method to set the source.srcType, source.srcLocation, and source.srcName attributes (of the embedded ORDSource object) for the external source before calling the import( ) method.</p>
<p>After importing data from an external media data source to a local source (within Oracle Database), the source information remains unchanged (that is, pointing to the source from where the data was imported).</p>
<p>Invoking this method implicitly calls the setUpdateTime( ) and setLocal( ) methods.</p>
<p>If the value of the source.srcType attribute is <code>FILE</code>, the source.srcLocation attribute contains the name of a database directory object that contains the file to be imported, and the source.srcName attribute contains the name of the file to be imported. You must ensure that the directory for the external source location exists or is created before you use this method.</p>
<p>The import( ) method reads only from a database directory object that the user has privilege to access. That is, you can access a directory object that you have created using the SQL statement CREATE DIRECTORY, or one to which you have been granted READ access.</p>
<p>For example, the following SQL*Plus commands create a directory object and grant the user <code>ron</code> permission to read any file within the directory <code>c:\mydir\work</code>:</p>
<pre>CONNECT sys as sysdba
Enter password: <span class="italic">password</span>
CREATE OR REPLACE DIRECTORY FILE_DIR AS &#39;c:\mydir\work&#39;;
GRANT READ ON DIRECTORY FILE_DIR TO ron;
</pre>
<p>See <a href="#CHEFIJFA">Section 4.1</a> for more information about directory and table definitions.</p>
<p>If the value of the source.srcType attribute is <code>HTTP</code>, the source.srcLocation attribute contains the base URL needed to find the directory that contains the object to be imported, and the source.srcName attribute contains the name of the object to be imported.</p>
<p>This method uses the <a id="sthref542"></a>PL/SQL UTL_HTTP package to import media data from an HTTP data source. You can use environment variables to specify the proxy behavior of the UTL_HTTP package. For example, on Linux and UNIX, setting the environment variable http_proxy to a URL specifies that the UTL_HTTP package must use that URL as the proxy server for HTTP requests. Setting the no_proxy environment variable to a domain name specifies that the HTTP proxy server not be used for URLs in the specified domain.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS070" href="../ARPLS/u_http.htm#ARPLS070"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the UTL_HTTP package</p>
</div>
<p>If the value of the source.srcType attribute is a user-defined name, the source.srcLocation attribute contains an identifier string required to access the user-defined object to be imported, and the source.srcName attribute contains the name of the object to be imported.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref543"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref544"></a>Exceptions</p>
<p>ORDDocExceptions.NULL_SOURCE</p>
<p>This exception is raised when the value of the ORDDoc.source attribute is <code>NULL</code>.</p>
<p>ORDSourceExceptions.INCOMPLETE_SOURCE_INFORMATION</p>
<p>This exception is raised if you call the import( ) method and the value of the source.srcType attribute is <code>NULL</code>.</p>
<p>ORDSourceExceptions.METHOD_NOT_SUPPORTED</p>
<p>This exception is raised if you call the import( ) method and the import( ) method is not supported by the source plug-in being used.</p>
<p>ORDSourceExceptions.NULL_SOURCE</p>
<p>This exception is raised if you call the import( ) method and the value of the source.localData attribute is <code>NULL</code>.</p>
<p>ORDSYS.ORDDocExceptions.DOC_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the import( ) method and the setProperties( ) method raises an exception from within the media plug-in.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1082410"></a>Examples</p>
<p>Import media data from an external media data source into the local source:</p>
<pre>DECLARE
  obj ORDSYS.ORDDoc;
  ctx RAW(64) :=NULL;
BEGIN
  SELECT product_testimonials INTO obj FROM pm.online_media  
    WHERE product_id = 2808 FOR UPDATE;
  DBMS_OUTPUT.PUT_LINE(&#39;setting and getting source&#39;);
  DBMS_OUTPUT.PUT_LINE(&#39;--------------------------&#39;);
  -- set source to a file
  obj.setSource(&#39;file&#39;,&#39;FILE_DIR&#39;,&#39;printer.rm&#39;);
  -- get source information
  DBMS_OUTPUT.PUT_LINE(obj.getSource());
  -- import data
  obj.import(ctx,FALSE);
  -- check size
  DBMS_OUTPUT.PUT_LINE(&#39;Length:&#39; ||TO_CHAR(DBMS_LOB.getLength(obj.getContent())));
  UPDATE pm.online_media SET product_testimonials=obj WHERE product_id=2808;
  COMMIT;
  EXCEPTION
    WHEN ORDSYS.ORDSourceExceptions.METHOD_NOT_SUPPORTED THEN
      DBMS_OUTPUT.PUT_LINE(&#39;ORDSourceExceptions.METHOD_NOT_SUPPORTED caught&#39;);
    WHEN ORDSYS.ORDDocExceptions.DOC_PLUGIN_EXCEPTION THEN
      DBMS_OUTPUT.put_line(&#39;DOC PLUGIN EXCEPTION caught&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80469" class="refsect2"><a id="i1088766"></a>
<h3 class="refsect2"><a id="sthref545"></a><a id="sthref546"></a>importFrom( )</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref547"></a>Format</p>
<p class="synopsis">importFrom(ctx IN OUT RAW,</p>
<p class="synopsis">source_type IN VARCHAR2,</p>
<p class="synopsis">source_location IN VARCHAR2,</p>
<p class="synopsis">source_name IN VARCHAR2</p>
<p class="synopsis">set_prop IN BOOLEAN);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref548"></a>Description</p>
<p>Transfers media data from the specified external media data source to the source.localData attribute (of the embedded ORDSource object) within the database.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref549"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The source plug-in context information. This parameter must be allocated and initialized to NULL. If you are using a user-defined source plug-in, call the <a href="ch_comref.htm#BABBAGIG">openSource( )</a> method. (See <a href="#BABCJBBF">Section 4.2</a>.)</p>
</dd>
<dt>source_type</dt>
<dd>
<p>The type of the source media data. (See <a href="ch_comref.htm#BABFJAIE">Table 2-1</a>.)</p>
</dd>
<dt>source_location</dt>
<dd>
<p>The location from which the source media data is to be imported. (See <a href="ch_comref.htm#BABGFBBB">Table 2-2</a>.)</p>
</dd>
<dt>source_name</dt>
<dd>
<p>The name of the source media data. (See <a href="ch_comref.htm#BABBGHFE">Table 2-3</a>.)</p>
</dd>
<dt>set_prop</dt>
<dd>
<p>A value that determines whether the setProperties( ) method is called. If the value of this parameter is <code>TRUE</code>, then the setProperties( ) method is called to read the media data to get the values of the object attributes and store them in the object attributes; otherwise, if the value is <code>FALSE</code>, the setProperties( ) method is not called. The default value is <code>FALSE</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref550"></a>Usage Notes</p>
<p>This method is similar to the import( ) method except the source information is specified as parameters to the method instead of separately.</p>
<p>After importing data from an external media data source to a local source (within Oracle Database), the source information (that is, pointing to the source from where the data was imported) is set to the input values.</p>
<p>Invoking this method implicitly calls the setUpdateTime( ) and setLocal( ) methods.</p>
<p>If the value of the source_type parameter is <code>FILE</code>, the source_location parameter contains the name of a database directory object that contains the file to be imported, and the source_name parameter contains the name of the file to be imported. You must ensure that the directory indicated by the source_location parameter exists or is created before you use this method.</p>
<p>The importFrom( ) method reads only from a database directory object that the user has privilege to access. That is, you can access a directory object that you have created using the SQL statement CREATE DIRECTORY, or one to which you have been granted READ access.</p>
<p>For example, the following SQL*Plus commands create a directory object and grant the user <code>ron</code> permission to read any file within the directory <code>c:\mydir\work</code>:</p>
<pre>CONNECT sys as sysdba
Enter password: <span class="italic">password</span>
CREATE OR REPLACE DIRECTORY FILE_DIR AS &#39;c:\mydir\work&#39;;
GRANT READ ON DIRECTORY FILE_DIR TO ron;
</pre>
<p>See <a href="#CHEFIJFA">Section 4.1</a> for more information about directory and table definitions.</p>
<p>If the value of the source_type parameter is <code>HTTP</code>, the source_location parameter contains the base URL needed to find the directory that contains the object to be imported, and the source_name parameter contains the name of the object to be imported.</p>
<p>This method uses the <a id="sthref551"></a>PL/SQL UTL_HTTP package to import media data from an HTTP data source. You can use environment variables to specify the proxy behavior of the UTL_HTTP package. For example, on Linux and UNIX, setting the environment variable http_proxy to a URL specifies that the UTL_HTTP package must use that URL as the proxy server for HTTP requests. Setting the no_proxy environment variable to a domain name specifies that the HTTP proxy server not be used for URLs in the specified domain.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS070" href="../ARPLS/u_http.htm#ARPLS070"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the UTL_HTTP package</p>
</div>
<p>If the value of the source_type parameter is a user-defined name, the source_location parameter contains an identifier string required to access the user-defined object to be imported, and the source_name parameter contains the name of the object to be imported.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref552"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref553"></a>Exceptions</p>
<p>ORDDocExceptions.NULL_SOURCE</p>
<p>This exception is raised when the value of the ORDDoc.source attribute is <code>NULL</code>.</p>
<p>ORDSourceExceptions.INCOMPLETE_SOURCE_INFORMATION</p>
<p>This exception is raised if you call the importFrom( ) method and the value of the source_type parameter is <code>NULL</code>.</p>
<p>ORDSourceExceptions.METHOD_NOT_SUPPORTED</p>
<p>This exception is raised if you call the importFrom( ) method and this method is not supported by the source plug-in being used.</p>
<p>ORDSYS.ORDDocExceptions.DOC_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the importFrom( ) method and the setProperties( ) method raises an exception from within the media plug-in.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref554"></a>Examples</p>
<p>Import media data from the specified external data source into the local source:</p>
<pre>DECLARE
  obj ORDSYS.ORDDoc;
  ctx RAW(64) :=NULL;
BEGIN
  SELECT product_testimonials INTO obj FROM pm.online_media
    WHERE product_id=2999 FOR UPDATE;
  DBMS_OUTPUT.PUT_LINE(&#39;setting and getting source&#39;);
  DBMS_OUTPUT.PUT_LINE(&#39;--------------------------&#39;);
  -- set source to a file
  -- import data
  obj.importFrom(ctx,&#39;file&#39;,&#39;FILE_DIR&#39;,&#39;modem.jpg&#39;,FALSE);
  -- check size
  DBMS_OUTPUT.PUT_LINE(&#39;Length: &#39;||TO_CHAR(DBMS_LOB.GETLENGTH(obj.getContent())));
  DBMS_OUTPUT.PUT_LINE(obj.getSource());
  UPDATE pm.online_media SET product_testimonials=obj WHERE product_id=2999;
  COMMIT;
  EXCEPTION
    WHEN ORDSYS.ORDSourceExceptions.METHOD_NOT_SUPPORTED THEN
      DBMS_OUTPUT.PUT_LINE(&#39;ORDSourceExceptions.METHOD_NOT_SUPPORTED caught&#39;);
    WHEN ORDSYS.ORDDocExceptions.DOC_PLUGIN_EXCEPTION THEN
      DBMS_OUTPUT.put_line(&#39;DOC PLUGIN EXCEPTION caught&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80470" class="refsect2"><a id="i1089022"></a>
<h3 class="refsect2"><a id="sthref555"></a><a id="sthref556"></a>setFormat( )</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref557"></a>Format</p>
<p class="synopsis">setFormat(knownFormat IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref558"></a>Description</p>
<p>Sets the format attribute of the media object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref559"></a>Parameters</p>
<dl>
<dt>knownFormat</dt>
<dd>
<p>The known format of the data to be set in the corresponding media object.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref560"></a>Usage Notes</p>
<p>Calling this method implicitly calls the setUpdateTime( ) method.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref561"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref562"></a>Exceptions</p>
<p>ORDDocExceptions.NULL_INPUT_VALUE</p>
<p>This exception is raised if you call the setFormat( ) method and the value of the knownFormat parameter is <code>NULL</code>.</p>
<p>ORDDocExceptions.NULL_SOURCE</p>
<p>This exception is raised when the value of the ORDDoc.source attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1089038"></a>Examples</p>
<p>Set the format for some media data:</p>
<pre>DECLARE
  obj ORDSYS.ORDDoc;
BEGIN
  SELECT product_testimonials INTO obj FROM pm.online_media 
    WHERE product_id = 2808 FOR UPDATE;
  obj.setFormat(&#39;PDF&#39;);
  DBMS_OUTPUT.put_line(&#39;format: &#39; || obj.getformat());
  COMMIT;
  EXCEPTION
   WHEN ORDSYS.ORDDocExceptions.NULL_INPUT_VALUE THEN
    DBMS_OUTPUT.put_line(&#39;ORDDocExceptions.NULL_INPUT_VALUE caught&#39;);
   WHEN OTHERS THEN
    DBMS_OUTPUT.put_line(&#39;EXCEPTION caught&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80471" class="refsect2"><a id="i1088208"></a>
<h3 class="refsect2"><a id="sthref563"></a><a id="sthref564"></a>setProperties( )</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref565"></a>Format</p>
<p class="synopsis">setProperties(ctx IN OUT RAW,</p>
<p class="synopsis">setComments IN BOOLEAN);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref566"></a>Description</p>
<p>Reads the media data to get the values of the object attributes and then stores them in the object attributes. This method sets the properties for these attributes of the media data: format, MIME type, and content length. It populates the comments field of the object with an extensive set of format and application properties in XML form if the value of the setComments parameter is <code>TRUE</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This method works for only natively supported audio, image, and video formats. See <a href="ap_audfmts.htm#BABFBDHD">Appendix A</a>, <a href="ap_imgfmts.htm#g661665">Appendix B</a>, and <a href="ap_vidfmts.htm#BABDGCJE">Appendix C</a>, respectively, for information about these formats.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref567"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#BABCJBBF">Section 4.2</a>.)</p>
</dd>
<dt>setComments</dt>
<dd>
<p>A Boolean value that indicates whether the comments field of the object is populated. If the value is <code>TRUE</code>, then the comments field of the object is populated with an extensive set of format and application properties of the media object in XML form; otherwise, if the value is <code>FALSE</code>, the comments field of the object remains unpopulated. The default value is <code>FALSE</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref568"></a>Usage Notes</p>
<p>If the property cannot be extracted from the media source, then the respective attribute is set to NULL.</p>
<p>If the format attribute is set to NULL, then the setProperties( ) method uses the default format plug-in; otherwise, it uses the plug-in specified by the format.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref569"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref570"></a>Exceptions</p>
<p>ORDDocExceptions.DOC_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the setProperties( ) method and the media plug-in raises an exception.</p>
<p>ORDDocExceptions.NULL_SOURCE</p>
<p>This exception is raised when the value of the ORDDoc.source attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref571"></a>Examples</p>
<p><span class="bold">Example 1:</span></p>
<p>Set the property information for known media attributes:</p>
<pre>DECLARE
  obj ORDSYS.ORDDoc;
  ctx RAW(64) :=NULL;
BEGIN
  SELECT product_testimonials INTO obj FROM pm.online_media
    WHERE product_id = 2808 FOR UPDATE;
  obj.setProperties(ctx,FALSE);
  DBMS_OUTPUT.put_line(&#39;format: &#39; || obj.getformat());
  UPDATE  pm.online_media SET product_testimonials = obj 
    WHERE  product_id=2808;
  COMMIT;
  EXCEPTION
   WHEN ORDSYS.ORDDocExceptions.DOC_PLUGIN_EXCEPTION THEN
    DBMS_OUTPUT.put_line(&#39;DOC PLUGIN EXCEPTION caught&#39;);
   WHEN OTHERS THEN
    DBMS_OUTPUT.put_line(&#39;EXCEPTION caught&#39;);
END;
/
</pre>
<p><span class="bold">Example 2:</span></p>
<p>Set the property information for known media attributes and store the format and application properties in the comments attribute. Create an extensible index on the contents of the comments attribute using Oracle Text:</p>
<pre>DECLARE
  obj ORDSYS.ORDDoc;
  ctx RAW(64) :=NULL;
BEGIN
  SELECT product_testimonials INTO obj FROM pm.online_media
    WHERE product_id = 2999 FOR UPDATE;
  obj.setProperties(ctx,TRUE);
  DBMS_OUTPUT.put_line(&#39;format: &#39; || obj.getformat());
   UPDATE  pm.online_media SET product_testimonials = obj 
    WHERE  product_id=2999;
  COMMIT;
  EXCEPTION
   WHEN ORDSYS.ORDDocExceptions.DOC_PLUGIN_EXCEPTION THEN
    DBMS_OUTPUT.put_line(&#39;DOC PLUGIN EXCEPTION caught&#39;);
   WHEN OTHERS THEN
    DBMS_OUTPUT.put_line(&#39;EXCEPTION caught&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1451">
<tr>
<td class="cellalignment1460">
<table class="cellalignment1456">
<tr>
<td class="cellalignment1455"><a href="ch_audref.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1455"><a href="ch_imgref.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1462">
<table class="cellalignment1454">
<tr>
<td class="cellalignment1455"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1455"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1455"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1455"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1455"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1455"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>