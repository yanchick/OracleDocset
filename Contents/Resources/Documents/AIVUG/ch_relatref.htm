<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2052"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Multimedia%20Relational%20Interface"></a><title>Oracle Multimedia Relational Interface</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="Presents reference information about using Oracle Database to store, manage, and retrieve images, audio, video, DICOM format medical images and other objects, or other heterogeneous media data in an integrated fashion with other enterprise information. Oracle Multimedia extends Oracle Database reliability, availability, and data management to multimedia content in Internet, electronic commerce, medical, financial, and other media-rich applications."/>
<meta name="dcterms.created" content="2014-07-30T15:7:4Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Multimedia Reference"/>
<meta name="dcterms.identifier" content="E17696-09"/>
<meta name="dcterms.isVersionOf" content="AIVUG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="ch_vidref.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ch_sourcref.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17696-09.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/25</span> <!-- End Header -->
<div id="AIVUG9000" class="chapter"><a id="g1116554"></a>
<h1 class="chapter"><span class="secnum">7</span> Oracle Multimedia Relational Interface</h1>
<p>Oracle Multimedia provides a relational interface that consists of a set of static methods for each of these Oracle Multimedia objects:<a id="sthref1131"></a></p>
<ul>
<li>
<p>ORDAudio</p>
</li>
<li>
<p>ORDDoc</p>
</li>
<li>
<p>ORDImage</p>
</li>
<li>
<p>ORDVideo</p>
</li>
</ul>
<p>Because these are static methods, no objects are instantiated. So, data is passed by method arguments rather than by object attributes.</p>
<p>The static methods for these four Oracle Multimedia objects are defined in the <code>ordaspec.sql<a id="sthref1132"></a></code>, <code>orddspec.sql</code><a id="sthref1133"></a>, <code>ordispec.sql<a id="sthref1134"></a></code>, and <code>ordvspec.sql<a id="sthref1135"></a></code> files, respectively. After installation, these files are available in the Oracle home directory at:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/im/admin</code> (on Linux and UNIX)</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\im\admin</code> (on Windows)</p>
<p>This chapter includes these sections:</p>
<ul>
<li>
<p><a href="#CHDDAFCH">Purpose of the Oracle Multimedia Relational Interface</a></p>
</li>
<li>
<p><a href="#CHEHJDGC">Examples for Relational Methods</a></p>
</li>
<li>
<p><a href="#CACGHGFC">Important Notes for Relational Methods</a></p>
</li>
<li>
<p><a href="#CACEICDE">Static Methods Common to All Object Types</a></p>
</li>
<li>
<p><a href="#i1098509">Static Methods Unique to the ORDAudio Object Type Relational Interface</a></p>
</li>
<li>
<p><a href="#CACJFFCA">Static Methods Unique to the ORDDoc Object Type Relational Interface</a></p>
</li>
<li>
<p><a href="#CACBJGAD">Static Methods Unique to the ORDImage Object Type Relational Interface</a></p>
</li>
<li>
<p><a href="#CACIGIJJ">Static Methods Unique to the ORDVideo Object Type Relational Interface</a></p>
</li>
</ul>
<a id="CHDDAFCH"></a>
<div id="AIVUG80838" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.1</span> Purpose of the Oracle Multimedia Relational Interface</h2>
<p>Application developers, who created multimedia applications without using the Oracle Multimedia object types to store and manage media data in relational tables, and who do not want to migrate their existing multimedia applications to use Oracle Multimedia objects, can use the Oracle Multimedia relational interface for managing their media data. The Oracle Multimedia relational interface <a id="sthref1136"></a><a id="sthref1137"></a>consists of a set of methods for these operations:</p>
<ul>
<li>
<p>Extracting information directly from media data, either as an XML string or as XML and individual attributes</p>
</li>
<li>
<p>Processing and copying image data</p>
</li>
<li>
<p>Loading media data into Oracle Database</p>
</li>
<li>
<p>Exporting media data from Oracle Database into operating system files</p>
</li>
</ul>
<p>The Oracle Multimedia relational interface enables application developers to take advantage of Oracle Multimedia functions with only minimal changes to their applications, and all without having to change their schemas to the Oracle Multimedia objects to store their data.</p>
</div>
<!-- class="sect1" -->
<a id="CHEHJDGC"></a>
<div id="AIVUG80834" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.2</span> Examples for Relational Methods</h2>
<p>The examples of static methods for the relational interface (including methods common to all object types and methods that are unique to a particular object type) use this list of tables:</p>
<div class="inftblruleinformal">
<table class="cellalignment1458" summary="Tables for relational methods" dir="ltr">
<thead>
<tr class="cellalignment1452">
<th class="cellalignment1459" id="r1c1-t2">Name</th>
<th class="cellalignment1459" id="r1c2-t2">Purpose</th>
<th class="cellalignment1459" id="r1c3-t2">Definition</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1452">
<td class="cellalignment1460" id="r2c1-t2" headers="r1c1-t2">TAUD</td>
<td class="cellalignment1460" headers="r2c1-t2 r1c2-t2">ORDAudio relational methods (and the common relational method <a href="#CHEFJDGI">export( )</a>)</td>
<td class="cellalignment1460" headers="r2c1-t2 r1c3-t2"><a href="#CHEHFFGA">Section 7.2.2</a></td>
</tr>
<tr class="cellalignment1452">
<td class="cellalignment1460" id="r3c1-t2" headers="r1c1-t2">TDOC</td>
<td class="cellalignment1460" headers="r3c1-t2 r1c2-t2">ORDDoc relational methods (and the common relational method <a href="#CHEBIDGI">importFrom( )</a>)</td>
<td class="cellalignment1460" headers="r3c1-t2 r1c3-t2"><a href="#CHECCDAH">Section 7.2.3</a></td>
</tr>
<tr class="cellalignment1452">
<td class="cellalignment1460" id="r4c1-t2" headers="r1c1-t2">TIMG</td>
<td class="cellalignment1460" headers="r4c1-t2 r1c2-t2">ORDImage relational methods (and the common relational method <a href="#CHEJJCAA">importFrom( ) (all attributes)</a>)</td>
<td class="cellalignment1460" headers="r4c1-t2 r1c3-t2"><a href="#CHEGDHBF">Section 7.2.4</a></td>
</tr>
<tr class="cellalignment1452">
<td class="cellalignment1460" id="r5c1-t2" headers="r1c1-t2">TVID</td>
<td class="cellalignment1460" headers="r5c1-t2 r1c2-t2">ORDVideo relational methods</td>
<td class="cellalignment1460" headers="r5c1-t2 r1c3-t2"><a href="#CHEFFAGJ">Section 7.2.5</a></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblruleinformal" -->
<p>When reading through the examples in this chapter, use the directory and table definitions that are provided in this section and with the example for each relational method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The tables described in this chapter are also used in the examples for these object constructors:
<ul>
<li>
<p><a href="ch_audref.htm#CHDDFGDF">ORDAudio for BLOBs</a> ()</p>
</li>
<li>
<p><a href="ch_docref.htm#CACHAEFD">ORDDoc for BLOBs</a> ()</p>
</li>
<li>
<p><a href="ch_imgref.htm#CHDDFGJC">ORDImage for BLOBs</a> ()</p>
</li>
<li>
<p><a href="ch_vidref.htm#CACGBEDB">ORDVideo for BLOBs</a> ()</p>
</li>
</ul>
</div>
<div id="AIVUG80835" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1138"></a>
<h3 class="sect2"><span class="secnum">7.2.1</span> Directory Definitions for Relational Examples</h3>
<p>Some examples in this chapter use <code>mediauser</code> to represent the user, and <code>c:\mydir\work</code> to represent the directory specification where your test files can be located. See the example for each method for specific directory definitions for media data files and other details specific to that method.</p>
</div>
<!-- class="sect2" -->
<a id="CHEHFFGA"></a>
<div id="AIVUG80786" class="sect2">
<h3 class="sect2"><span class="secnum">7.2.2</span> TAUD Table Definition<a id="sthref1139"></a></h3>
<p>The examples in <a href="#i1098509">Static Methods Unique to the ORDAudio Object Type Relational Interface</a> use the audio table TAUD.</p>
<pre>CREATE TABLE taud(n                NUMBER, 
                  aud              BLOB,
                  attributes       CLOB,
                  mimetype         VARCHAR2(4000),
                  format           VARCHAR2(31),
                  encoding         VARCHAR2(256),
                  numberofchannels INTEGER,
                  samplingrate     INTEGER,
                  samplesize       INTEGER,
                  compressiontype  VARCHAR2(4000),
                  audioduration    INTEGER)
LOB(aud) STORE AS SECUREFILE;

INSERT INTO taud VALUES(1,EMPTY_BLOB(),EMPTY_CLOB(), NULL, NULL, NULL, NULL,
   NULL, NULL, NULL, NULL);
INSERT INTO taud VALUES(2,EMPTY_BLOB(),EMPTY_CLOB(), NULL, NULL, NULL, NULL,
   NULL, NULL, NULL, NULL);
COMMIT;
</pre></div>
<!-- class="sect2" -->
<a id="CHECCDAH"></a>
<div id="AIVUG80788" class="sect2">
<h3 class="sect2"><span class="secnum">7.2.3</span> TDOC Table Definition<a id="sthref1140"></a></h3>
<p>The examples in <a href="#CACJFFCA">Static Methods Unique to the ORDDoc Object Type Relational Interface</a> use the document table TDOC.</p>
<pre>CREATE TABLE tdoc(n             NUMBER, 
                  document      BLOB, 
                  attributes    CLOB,
                  mimetype      VARCHAR2(80),
                  format        VARCHAR2(80),
                  contentlength INTEGER)
LOB(document) STORE AS SECUREFILE;

INSERT INTO tdoc VALUES(1, EMPTY_BLOB(), EMPTY_CLOB(), NULL, NULL, NULL);
INSERT INTO tdoc VALUES(2, EMPTY_BLOB(), EMPTY_CLOB(), NULL, NULL, NULL);
INSERT INTO tdoc VALUES(3, EMPTY_BLOB(), EMPTY_CLOB(), NULL, NULL, NULL);
INSERT INTO tdoc VALUES(4, EMPTY_BLOB(), EMPTY_CLOB(), NULL, NULL, NULL);
COMMIT;
</pre></div>
<!-- class="sect2" -->
<a id="CHEGDHBF"></a>
<div id="AIVUG80790" class="sect2">
<h3 class="sect2"><span class="secnum">7.2.4</span> TIMG Table Definition<a id="sthref1141"></a></h3>
<p>The examples in <a href="#CACBJGAD">Static Methods Unique to the ORDImage Object Type Relational Interface</a> use the image table TIMG.</p>
<pre>CREATE TABLE timg(n NUMBER, 
                  img BLOB,
                  attributes CLOB,
                  mimetype VARCHAR2(4000),
                  width INTEGER,
                  height INTEGER,
                  fileformat VARCHAR2(4000),
                  contentformat VARCHAR2(4000),
                  compressionformat VARCHAR2(4000),
                  contentlength INTEGER)
LOB(img) STORE AS SECUREFILE;

INSERT INTO timg VALUES(1, EMPTY_BLOB(), EMPTY_CLOB(), NULL,
   NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO timg VALUES(2, EMPTY_BLOB(), EMPTY_CLOB(), NULL,
   NULL, NULL, NULL, NULL, NULL, NULL);
COMMIT;
</pre></div>
<!-- class="sect2" -->
<a id="CHEFFAGJ"></a>
<div id="AIVUG80792" class="sect2">
<h3 class="sect2"><span class="secnum">7.2.5</span> TVID Table Definition<a id="sthref1142"></a></h3>
<p>The examples in <a href="#CACIGIJJ">Static Methods Unique to the ORDVideo Object Type Relational Interface</a> use the video table TVID.</p>
<pre>CREATE TABLE tvid(n NUMBER, 
                  vid BLOB,
                  attributes CLOB,
                  mimetype VARCHAR2(4000),
                  format VARCHAR2(31),
                  width INTEGER,
                  height INTEGER,
                  frameresolution INTEGER,
                  framerate INTEGER,
                  videoduration INTEGER,
                  numberofframes INTEGER,
                  compressiontype VARCHAR2(4000),
                  numberofcolors INTEGER,
                  bitrate INTEGER)
LOB(vid) STORE AS SECUREFILE;

INSERT INTO tvid VALUES(1, EMPTY_BLOB(), EMPTY_CLOB(), NULL, NULL,
   NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
INSERT INTO tvid VALUES(2, EMPTY_BLOB(), EMPTY_CLOB(), NULL, NULL,
   NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
COMMIT;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACGHGFC"></a>
<div id="AIVUG80794" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.3</span> Important Notes for Relational Methods</h2>
<p>Methods related to the source of the media have ctx (RAW) as the first argument. Before calling any of these methods for the first time, the client must allocate the ctx structure and initialize it to NULL.</p>
<p>ORDAudio, ORDDoc, and ORDVideo methods related to media parsing have ctx (RAW) as the first argument. Before calling any of these methods for the first time, the client must allocate the ctx structure and initialize it to NULL.</p>
</div>
<!-- class="sect1" -->
<div class="refentry"><a id="CACEICDE"></a>
<div id="AIVUG80795" class="refsect1">
<h2 class="refsect1">Static Methods Common to All Object Types<a id="sthref1143"></a></h2>
<p>This section presents reference information about these Oracle Multimedia common static methods, which are used for the relational interface:</p>
<ul>
<li>
<p><a href="#CHEFJDGI">export( )</a></p>
</li>
<li>
<p><a href="#CHEBIDGI">importFrom( )</a></p>
</li>
<li>
<p><a href="#CHEJJCAA">importFrom( ) (all attributes)</a></p>
</li>
</ul>
<p>The common static methods for the ORDAudio, ORDDoc, ORDImage, and ORDVideo relational interfaces are defined in the <code>ordaspec.sql</code>, <code>orddspec.sql</code>, <code>ordispec.sql</code>, and <code>ordvspec.sql</code> files, respectively.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The examples in this section assume that these tables exist: TAUD, TDOC, and TIMG.</div>
<div id="AIVUG80796" class="refsect2"><a id="CHEFJDGI"></a>
<h3 class="refsect2">export( )<a id="sthref1144"></a><a id="sthref1145"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1146"></a>Format</p>
<p class="synopsis">export(ctx IN OUT RAW,</p>
<p class="synopsis">local_data IN BLOB,</p>
<p class="synopsis">source_type IN VARCHAR2,</p>
<p class="synopsis">source_location IN VARCHAR2,</p>
<p class="synopsis">source_name IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1147"></a>Description</p>
<p>Copies data from a local source (local_data) within the database to an external data source.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The export( ) method provides native support only when the value of the source_type parameter is <code>FILE</code>. In this case, this method writes the data to a file within a directory that is accessible to Oracle Database. User-defined sources may support the export( ) method to provide WRITE access to other types of data stores.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1148"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The source plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>local_data</dt>
<dd>
<p>The BLOB location that is being exported.</p>
</dd>
<dt>source_type</dt>
<dd>
<p>The type of the external source data. This parameter is not case sensitive. (See <a href="ch_comref.htm#BABFJAIE">Table 2-1</a>.)</p>
</dd>
<dt>source_location</dt>
<dd>
<p>The location to which the source data is to be exported. (See <a href="ch_comref.htm#BABGFBBB">Table 2-2</a>.)</p>
</dd>
<dt>source_name</dt>
<dd>
<p>The name of the object to which the source data is to be exported. (See <a href="ch_comref.htm#BABBGHFE">Table 2-3</a>.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1149"></a>Usage Notes</p>
<p>After calling the export( ) method, you can issue a SQL DELETE statement or call the DBMS_LOB.TRIM procedure to delete the content stored locally, if desired.</p>
<p>The export( ) method for a source type of <code>FILE</code> does not modify data stored in the BLOB.</p>
<p>When the source_type parameter has a value of <code>FILE</code>, the source_location parameter specifies the name of an Oracle directory object, and the source_name parameter specifies the name of the file to contain the data.</p>
<p>The export( ) method writes only to a database directory object that the user has privilege to access. That is, you can access a directory object that you have created using the SQL statement CREATE DIRECTORY, or one to which you have been granted READ and WRITE access.</p>
<p>For example, the following SQL*Plus commands create a directory object and grant the user <code>mediauser</code> permission to read and write to any file within the directory <code>c:\mydir\work</code>:</p>
<pre>CONNECT sys as sysdba
Enter password: <span class="italic">password</span>
CREATE OR REPLACE DIRECTORY FILE_DIR AS &#39;c:\mydir\work&#39;;
GRANT READ,WRITE ON DIRECTORY FILE_DIR TO mediauser;
</pre>
<p>See <a href="#CHEHJDGC">Section 7.2</a> for more information about directory and table definitions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1150"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1151"></a>Exceptions</p>
<p>ORDSourceExceptions.INCOMPLETE_SOURCE_INFORMATION</p>
<p>This exception is raised if you call the export( ) method and the value of the source_type parameter is <code>NULL</code>.</p>
<p>ORDSourceExceptions.IO_ERROR</p>
<p>This exception is raised if the export( ) method encounters an error writing the BLOB data to the file specified.</p>
<p>ORDSourceExceptions.METHOD_NOT_SUPPORTED</p>
<p>This exception is raised if you call the export( ) method and this method is not supported by the source plug-in being used.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1152"></a>Examples</p>
<p>Export data from a local source to an external data source:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Replace <span class="italic">c:\mydir\work</span> with the directory specification where your exported file should be located, and replace <span class="italic">password</span> with the <code>sys</code> password.</div>
<pre>CONNECT sys as sysdba
Enter password: <span class="italic">password</span>;
CREATE OR REPLACE DIRECTORY AUDIODIR AS &#39;<span class="italic">c:\mydir\work</span>&#39;;
GRANT READ, WRITE ON DIRECTORY AUDIODIR TO mediauser;

CONNECT mediauser
Enter password: <span class="italic">password</span>;

DECLARE
  audio_data BLOB;
  ctx RAW(64) :=NULL;
BEGIN
  SELECT aud INTO audio_data FROM taud WHERE N = 1;
  ORDSYS.ORDAudio.export(ctx,audio_data,&#39;file&#39;,&#39;AUDIODIR&#39;,&#39;testaud.dat&#39;);
EXCEPTION
  WHEN OTHERS THEN
  RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80797" class="refsect2"><a id="CHEBIDGI"></a>
<h3 class="refsect2">importFrom( )<a id="sthref1153"></a><a id="sthref1154"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1155"></a>Format</p>
<p class="synopsis">importFrom(ctx IN OUT RAW,</p>
<p class="synopsis">local_data IN OUT NOCOPY BLOB,</p>
<p class="synopsis">source_type IN VARCHAR2,</p>
<p class="synopsis">source_location IN VARCHAR2,</p>
<p class="synopsis">source_name IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1156"></a>Description</p>
<p>Transfers data from the specified external data source to the BLOB specified by the local_data parameter.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1157"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The source plug-in context information. This parameter must be allocated and initialized to NULL. If you are using a user-defined source plug-in, call the <a href="ch_comref.htm#BABBAGIG">openSource( )</a> method. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>local_data</dt>
<dd>
<p>The BLOB location to receive the data.</p>
</dd>
<dt>source_type</dt>
<dd>
<p>The type of the source data. (See <a href="ch_comref.htm#BABFJAIE">Table 2-1</a>.)</p>
</dd>
<dt>source_location</dt>
<dd>
<p>The location from which the source data is to be imported. (See <a href="ch_comref.htm#BABGFBBB">Table 2-2</a>.)</p>
</dd>
<dt>source_name</dt>
<dd>
<p>The name of the source data. (See <a href="ch_comref.htm#BABBGHFE">Table 2-3</a>.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1158"></a>Usage Notes</p>
<p>If the value of the source_type parameter is <code>FILE</code>, the source_location parameter contains the name of a database directory object that contains the file to be imported, and the source_name parameter contains the name of the file to be imported. You must ensure that the directory for the external source location exists or is created before you use this method.</p>
<p>The importFrom( ) method reads only from a database directory object that the user has privilege to access. That is, you can access a directory object that you have created using the SQL statement CREATE DIRECTORY, or one to which you have been granted READ access.</p>
<p>For example, the following SQL*Plus commands create a directory object and grant the user <code>mediauser</code> permission to read any file within the directory <code>c:\mydir\work</code>:</p>
<pre>CONNECT sys as sysdba
Enter password: <span class="italic">password</span>
CREATE OR REPLACE DIRECTORY FILE_DIR AS &#39;c:\mydir\work&#39;;
GRANT READ ON DIRECTORY FILE_DIR TO mediauser;
</pre>
<p>See <a href="#CHEHJDGC">Section 7.2</a> for more information about directory and table definitions.</p>
<p>If the value of the source_type parameter is <code>HTTP</code>, the source_location parameter contains the base URL needed to find the directory that contains the object to be imported, and the source_name parameter contains the name of the object to be imported.</p>
<p>This method uses the <a id="sthref1159"></a>PL/SQL UTL_HTTP package to import media data from an HTTP data source. You can use environment variables to specify the proxy behavior of the UTL_HTTP package. For example, on Linux and UNIX, setting the environment variable http_proxy to a URL specifies that the UTL_HTTP package must use that URL as the proxy server for HTTP requests. Setting the no_proxy environment variable to a domain name specifies that the HTTP proxy server not be used for URLs in the specified domain.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS070" href="../ARPLS/u_http.htm#ARPLS070"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the UTL_HTTP package</p>
</div>
<p>If the value of the source_type parameter is a user-defined name, the source_location parameter contains an identifier string required to access the user-defined object to be imported, and the source_name parameter contains the name of the object to be imported.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1160"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1161"></a>Exceptions</p>
<p>ORDSourceExceptions.METHOD_NOT_SUPPORTED</p>
<p>This exception is raised if you call the importFrom( ) method and this method is not supported by the source plug-in being used.</p>
<p>ORDSourceExceptions.NULL_SOURCE</p>
<p>This exception is raised if you call the importFrom( ) method and the value of the local_data parameter is <code>NULL</code> or has not been initialized.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1162"></a>Examples</p>
<p>Import data from the specified external data source into the local source:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Replace <span class="italic">c:\mydir\work</span> with the directory specification where your test files are located, replace <span class="italic">testimg.dat</span>, <span class="italic">testaud.dat</span>, and <span class="italic">testvid.dat</span> with the file specifications of your test files, and replace <span class="italic">password</span> with the system password.</div>
<pre>CONNECT sys as sysdba
Enter password: <span class="italic">password</span>;
CREATE OR REPLACE DIRECTORY DOCDIR AS &#39;<span class="italic">c:\mydir\work</span>&#39;;
GRANT READ ON DIRECTORY DOCDIR TO mediauser;

CONNECT mediauser
Enter password: <span class="italic">password</span>;

DECLARE
  document_data BLOB;
  ctx RAW(64) :=NULL;
BEGIN
   SELECT document INTO document_data FROM tdoc WHERE N = 1 FOR UPDATE;
   ORDSYS.ORDDoc.importFrom(ctx,document_data,&#39;file&#39;,&#39;DOCDIR&#39;,&#39;testimg.dat&#39;);
   UPDATE tdoc SET document = document_data WHERE N = 1;
   COMMIT;
   SELECT document INTO document_data FROM tdoc WHERE N = 2 FOR UPDATE;
   ORDSYS.ORDDoc.importFrom(ctx,document_data,&#39;file&#39;,&#39;DOCDIR&#39;,&#39;testaud.dat&#39;);
   UPDATE tdoc SET document = document_data WHERE N = 2;
   COMMIT;
   SELECT document INTO document_data FROM tdoc WHERE N = 3 FOR UPDATE;
   ORDSYS.ORDDoc.importFrom(ctx,document_data,&#39;file&#39;,&#39;DOCDIR&#39;,&#39;testvid.dat&#39;);
   UPDATE tdoc SET document = document_data WHERE N = 3;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80798" class="refsect2"><a id="CHEJJCAA"></a>
<h3 class="refsect2">importFrom( ) (all attributes)<a id="sthref1163"></a><a id="sthref1164"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1165"></a>Format</p>
<p class="synopsis">importFrom(ctx IN OUT RAW,</p>
<p class="synopsis">local_data IN OUT NOCOPY BLOB,</p>
<p class="synopsis">source_type IN VARCHAR2,</p>
<p class="synopsis">source_location IN VARCHAR2,</p>
<p class="synopsis">source_name IN VARCHAR2,</p>
<p class="synopsis">format OUT VARCHAR2,</p>
<p class="synopsis">mime_type OUT VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1166"></a>Description</p>
<p>Transfers data from the specified external data source to the BLOB specified by the local_data parameter.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1167"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The source plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>local_data</dt>
<dd>
<p>The BLOB location to receive the data.</p>
</dd>
<dt>source_type</dt>
<dd>
<p>The type of the source data. (See <a href="ch_comref.htm#BABFJAIE">Table 2-1</a>.)</p>
</dd>
<dt>source_location</dt>
<dd>
<p>The location from which the source data is to be imported. (See <a href="ch_comref.htm#BABGFBBB">Table 2-2</a>.)</p>
</dd>
<dt>source_name</dt>
<dd>
<p>The name of the source data. (See <a href="ch_comref.htm#BABBGHFE">Table 2-3</a>.)</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the data. The value is returned if it is available (from HTTP sources).</p>
</dd>
<dt>mime_type</dt>
<dd>
<p>The MIME type of the data. The value is returned if it is available (from HTTP sources).</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1168"></a>Usage Notes</p>
<p>If the value of the source_type parameter is <code>FILE</code>, the source_location parameter contains the name of a database directory object that contains the file to be imported, and the source_name parameter contains the name of the file to be imported. You must ensure that the directory for the external source location exists or is created before you use this method.</p>
<p>The importFrom( ) method reads only from a database directory object that the user has privilege to access. That is, you can access a directory object that you have created using the SQL statement CREATE DIRECTORY, or one to which you have been granted READ access.</p>
<p>For example, the following SQL*Plus commands create a directory object and grant the user <code>mediauser</code> permission to read any file within the directory <code>c:\mydir\work</code>:</p>
<pre>CONNECT sys as sysdba
Enter password: <span class="italic">password</span>
CREATE OR REPLACE DIRECTORY FILE_DIR AS &#39;c:\mydir\work&#39;;
GRANT READ ON DIRECTORY FILE_DIR TO mediauser;
</pre>
<p>See <a href="#CHEHJDGC">Section 7.2</a> for more information about directory and table definitions.</p>
<p>If the value of the source_type parameter is <code>HTTP</code>, the source_location parameter contains the base URL needed to find the directory that contains the object to be imported, and the source_name parameter contains the name of the object to be imported.</p>
<p>This method uses the <a id="sthref1169"></a>PL/SQL UTL_HTTP package to import media data from an HTTP data source. You can use environment variables to specify the proxy behavior of the UTL_HTTP package. For example, on Linux and UNIX, setting the environment variable http_proxy to a URL specifies that the UTL_HTTP package must use that URL as the proxy server for HTTP requests. Setting the no_proxy environment variable to a domain name specifies that the HTTP proxy server not be used for URLs in the specified domain.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS070" href="../ARPLS/u_http.htm#ARPLS070"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the UTL_HTTP package</p>
</div>
<p>If the value of the source_type parameter is a user-defined name, the source_location parameter contains an identifier string required to access the user-defined object to be imported, and the source_name parameter contains the name of the object to be imported.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1170"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1171"></a>Exceptions</p>
<p>ORDSourceExceptions.METHOD_NOT_SUPPORTED</p>
<p>This exception is raised if you call the importFrom( ) method and this method is not supported by the source plug-in being used.</p>
<p>ORDSourceExceptions.NULL_SOURCE</p>
<p>This exception is raised if you call the importFrom( ) method and the value of the local_data parameter is <code>NULL</code> or has not been initialized.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1172"></a>Examples</p>
<p>Import image data from the specified external data source into the local source:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Replace <span class="italic">c:\mydir\work</span> with the directory specification where your test file is located, replace <span class="italic">testimg.dat</span> with the file specification of your test file, and replace <span class="italic">password</span> with the system password.</div>
<pre>CONNECT sys as sysdba
Enter password: <span class="italic">password</span>;
CREATE OR REPLACE DIRECTORY IMAGEDIR AS &#39;<span class="italic">c:\mydir\work</span>&#39;;
GRANT READ ON DIRECTORY IMAGEDIR TO mediauser;

CONNECT mediauser
Enter password: <span class="italic">password</span>;

DECLARE
  image_data BLOB;
  ctx RAW(64) :=NULL;
  img_format     VARCHAR2(32)  := NULL;
  img_mime_type  VARCHAR2(80);
BEGIN
   SELECT img INTO image_data FROM timg WHERE N = 1 FOR UPDATE;
   ORDSYS.ORDImage.importFrom(ctx,image_data,&#39;file&#39;,&#39;IMAGEDIR&#39;,
                              &#39;testimg.dat&#39;,img_format,img_mime_type);
   UPDATE timg SET img = image_data WHERE N = 1;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<div class="refentry"><a id="i1098509"></a>
<div id="AIVUG80799" class="refsect1">
<h2 class="refsect1">Static Methods Unique to the ORDAudio Object Type Relational Interface<a id="sthref1173"></a></h2>
<p>This section presents reference information about these Oracle Multimedia static methods, which are unique to the ORDAudio relational interface:</p>
<ul>
<li>
<p><a href="#CHEBJBCC">getProperties( ) for BFILEs</a></p>
</li>
<li>
<p><a href="#CHEGDFBI">getProperties( ) (all attributes) for BFILEs</a></p>
</li>
<li>
<p><a href="#i1082268">getProperties( ) for BLOBs</a></p>
</li>
<li>
<p><a href="#CHECGFGC">getProperties( ) (all attributes) for BLOBs</a></p>
</li>
</ul>
<p>The relational interface adds Oracle Multimedia support to audio data stored in BLOBs and BFILEs rather than in the ORDAudio object type. The static methods that are unique to the ORDAudio relational interface are defined in the <code>ordaspec.sql</code> file.</p>
<div id="AIVUG80800" class="refsect2"><a id="CHEBJBCC"></a>
<h3 class="refsect2">getProperties( ) for BFILEs<a id="sthref1174"></a><a id="sthref1175"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1176"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">audioBfile IN OUT NOCOPY BFILE,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">format IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1177"></a>Description</p>
<p>Reads the audio BFILE data to get the values of the media attributes for supported formats, and then stores them in the input CLOB. This method populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1178"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>audioBfile</dt>
<dd>
<p>The audio data represented as a BFILE.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the audio BFILE data in XML form.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the audio data. If a non-NULL value is specified for this parameter, then the format plug-in for this format type is invoked.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1179"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1180"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1181"></a>Exceptions</p>
<p>ORDAudioExceptions.AUDIO_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the audio plug-in raises an exception.</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1182"></a>Examples</p>
<p>Get the property information for known audio attributes:</p>
<pre>DECLARE
  aud_attrib CLOB;
  ctx RAW(64) :=NULL;
  aud_data BFILE := BFILENAME(&#39;AUDIODIR&#39;,&#39;testaud.dat&#39;);
  aud_format VARCHAR2(160) := NULL;
BEGIN
  DBMS_LOB.CREATETEMPORARY(aud_attrib, FALSE, DBMS_LOB.CALL);
  ORDSYS.ORDAudio.getProperties(ctx, aud_data, aud_attrib, aud_format);

  DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(aud_attrib)));
EXCEPTION
  WHEN OTHERS THEN
  RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80801" class="refsect2"><a id="CHEGDFBI"></a>
<h3 class="refsect2">getProperties( ) (all attributes) for BFILEs<a id="sthref1183"></a><a id="sthref1184"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1185"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">audioBfile IN OUT NOCOPY BFILE,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">mimeType OUT VARCHAR2,</p>
<p class="synopsis">format IN OUT VARCHAR2</p>
<p class="synopsis">encoding OUT VARCHAR2,</p>
<p class="synopsis">numberOfChannels OUT INTEGER,</p>
<p class="synopsis">samplingRate OUT INTEGER,</p>
<p class="synopsis">sampleSize OUT INTEGER,</p>
<p class="synopsis">compressionType OUT VARCHAR2,</p>
<p class="synopsis">audioDuration OUT INTEGER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1186"></a>Description</p>
<p>Reads the audio BFILE data to get the values of the media attributes for supported formats, and then stores them in the input CLOB and returns them as explicit parameters. This method gets the properties for these attributes of the audio data: duration, MIME type, compression type, format, encoding type, number of channels, sampling rate, and sample size. It populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1187"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>audioBfile</dt>
<dd>
<p>The audio data represented as a BFILE.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the audio BFILE data in XML form.</p>
</dd>
<dt>mimeType</dt>
<dd>
<p>The MIME type of the audio data.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the audio data. If a non-NULL value is specified, then the format plug-in for this format type is invoked. If not specified, the default plug-in is used and the derived format value is returned.</p>
</dd>
<dt>encoding</dt>
<dd>
<p>The encoding type of the audio data.</p>
</dd>
<dt>numberOfChannels</dt>
<dd>
<p>The number of channels in the audio data.</p>
</dd>
<dt>samplingRate</dt>
<dd>
<p>The sampling rate in samples per second at which the audio data was recorded.</p>
</dd>
<dt>sampleSize</dt>
<dd>
<p>The sample width or number of samples of audio in the data.</p>
</dd>
<dt>compressionType</dt>
<dd>
<p>The compression type of the audio data.</p>
</dd>
<dt>audioDuration</dt>
<dd>
<p>The total time required to play the audio data.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1188"></a>Usage Notes</p>
<p>If a property cannot be extracted from the media source, then the respective parameter is set to NULL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1189"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1190"></a>Exceptions</p>
<p>ORDAudioExceptions.AUDIO_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the audio plug-in raises an exception.</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1191"></a>Examples</p>
<p>Get the property information for known audio attributes:</p>
<pre>DECLARE
  aud_attrib        CLOB;
  ctx               RAW(64) :=NULL;
  data              BFILE := BFILENAME(&#39;AUDIODIR&#39;,&#39;testaud.dat&#39;);
  mimeType          VARCHAR2(80);
  format            VARCHAR2(32) := NULL;
  encoding          VARCHAR2(160);
  numberOfChannels  NUMBER;
  samplingRate      NUMBER;
  sampleSize        NUMBER;
  compressionType   VARCHAR2(160);
  audioDuration     NUMBER;
BEGIN
  DBMS_LOB.CREATETEMPORARY(aud_attrib, FALSE, DBMS_LOB.CALL);

  ORDSYS.ORDAudio.getProperties(ctx, data, aud_attrib, mimeType, format, encoding,
                                numberOfChannels, samplingRate, sampleSize, 
                                compressionType, audioDuration);

  DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(aud_attrib)));
  DBMS_OUTPUT.put_line(&#39;mimeType: &#39; || mimeType );
  DBMS_OUTPUT.put_line(&#39;format: &#39; || format );
  DBMS_OUTPUT.put_line(&#39;encoding: &#39; || encoding );
  DBMS_OUTPUT.put_line(&#39;numberOfChannels: &#39; || numberOfChannels );
  DBMS_OUTPUT.put_line(&#39;samplingRate: &#39; || samplingRate );
  DBMS_OUTPUT.put_line(&#39;sampleSize: &#39; || sampleSize );
  DBMS_OUTPUT.put_line(&#39;compressionType: &#39; || compressionType );
  DBMS_OUTPUT.put_line(&#39;audioDuration: &#39; || audioDuration );
EXCEPTION
  WHEN OTHERS THEN
  RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80802" class="refsect2"><a id="i1082268"></a>
<h3 class="refsect2">getProperties( ) for BLOBs<a id="sthref1192"></a><a id="sthref1193"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1194"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">audioBlob IN BLOB,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">format IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1195"></a>Description</p>
<p>Reads the audio BLOB data to get the values of the media attributes for supported formats, and then stores them in the input CLOB. This method populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1196"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>audioBlob</dt>
<dd>
<p>The audio data represented as a BLOB.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the audio BLOB data in XML form.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the audio data. If a non-NULL value is specified for this parameter, then the format plug-in for this format type is invoked; otherwise, the default plug-in is used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1197"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1198"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1199"></a>Exceptions</p>
<p>ORDAudioExceptions.AUDIO_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the audio plug-in raises an exception.</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1200"></a>Examples</p>
<p>Get the property information for known audio attributes:</p>
<pre>DECLARE
  aud_attrib CLOB;
  ctx RAW(64) :=NULL;
  aud_data BLOB;
  aud_format VARCHAR2(160) := NULL;
BEGIN
  SELECT aud, attributes INTO aud_data, aud_attrib FROM taud WHERE N =1 FOR UPDATE;
  ORDSYS.ORDAudio.getProperties(ctx,aud_data,aud_attrib,aud_format);
  DBMS_OUTPUT.put_line(&#39;Size of XML Annotations: &#39; || 
                  TO_CHAR(DBMS_LOB.GETLENGTH(aud_attrib)));
  UPDATE taud SET attributes=aud_attrib WHERE N=1;
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
  RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80803" class="refsect2"><a id="CHECGFGC"></a>
<h3 class="refsect2">getProperties( ) (all attributes) for BLOBs<a id="sthref1201"></a><a id="sthref1202"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1203"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">audioBlob IN BLOB,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">mimeType OUT VARCHAR2,</p>
<p class="synopsis">format IN OUT VARCHAR2</p>
<p class="synopsis">encoding OUT VARCHAR2,</p>
<p class="synopsis">numberOfChannels OUT INTEGER,</p>
<p class="synopsis">samplingRate OUT INTEGER,</p>
<p class="synopsis">sampleSize OUT INTEGER,</p>
<p class="synopsis">compressionType OUT VARCHAR2,</p>
<p class="synopsis">audioDuration OUT INTEGER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1204"></a>Description</p>
<p>Reads the audio BLOB data to get the values of the media attributes for supported formats, and then stores them in the input CLOB and returns them as explicit parameters. This method gets the properties for these attributes of the audio data: duration, MIME type, compression type, format, encoding type, number of channels, sampling rate, and sample size. It populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1205"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>audioBlob</dt>
<dd>
<p>The audio data represented as a BLOB.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the audio BLOB data in XML form.</p>
</dd>
<dt>mimeType</dt>
<dd>
<p>The MIME type of the audio data.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the audio data. If a non-NULL value is specified, then the format plug-in for this format type is invoked. If not specified, the derived format value is returned.</p>
</dd>
<dt>encoding</dt>
<dd>
<p>The encoding type of the audio data.</p>
</dd>
<dt>numberOfChannels</dt>
<dd>
<p>The number of channels in the audio data.</p>
</dd>
<dt>samplingRate</dt>
<dd>
<p>The sampling rate in samples per second at which the audio data was recorded.</p>
</dd>
<dt>sampleSize</dt>
<dd>
<p>The sample width or number of samples of audio in the data.</p>
</dd>
<dt>compressionType</dt>
<dd>
<p>The compression type of the audio data.</p>
</dd>
<dt>audioDuration</dt>
<dd>
<p>The total time required to play the audio data.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1206"></a>Usage Notes</p>
<p>If a property cannot be extracted from the media source, then the respective parameter is set to NULL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1207"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1208"></a>Exceptions</p>
<p>ORDAudioExceptions.AUDIO_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the audio plug-in raises an exception.</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1209"></a>Examples</p>
<p>Get the property information for known audio attributes:</p>
<pre>DECLARE
  aud_attrib        CLOB;
  ctx               RAW(64) := NULL;
  aud_data          BLOB;
  mimeType          VARCHAR2(80);
  format            VARCHAR2(32) := NULL;
  encoding          VARCHAR2(160);
  numberOfChannels  NUMBER;
  samplingRate      NUMBER;
  sampleSize        NUMBER;
  compressionType   VARCHAR2(160);
  audioDuration     NUMBER;
BEGIN
  SELECT aud, attributes, mimetype, format, encoding, numberofchannels, samplingrate,
    samplesize, compressiontype, audioduration INTO aud_data, aud_attrib, mimeType,
    format, encoding, numberOfChannels, samplingRate, sampleSize, compressionType,
    audioDuration FROM taud WHERE N = 1 FOR UPDATE;

  ORDSYS.ORDAudio.getProperties(ctx, aud_data, aud_attrib, mimeType, format, encoding, 
              numberOfChannels, samplingRate, sampleSize, compressionType, audioDuration);

  DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(aud_attrib)));
  DBMS_OUTPUT.put_line(&#39;mimeType: &#39; || mimeType );
  DBMS_OUTPUT.put_line(&#39;format: &#39; || format );
  DBMS_OUTPUT.put_line(&#39;encoding: &#39; || encoding );
  DBMS_OUTPUT.put_line(&#39;numberOfChannels: &#39; || numberOfChannels );
  DBMS_OUTPUT.put_line(&#39;samplingRate: &#39; || samplingRate );
  DBMS_OUTPUT.put_line(&#39;sampleSize: &#39; || sampleSize );
  DBMS_OUTPUT.put_line(&#39;compressionType: &#39; || compressionType );
  DBMS_OUTPUT.put_line(&#39;audioDuration: &#39; || audioDuration );
  UPDATE taud SET 
               aud=aud_data, 
               attributes=aud_attrib, 
               mimetype=mimeType,
               format=format, 
               encoding=encoding, 
               numberofchannels=numberOfChannels, 
               samplingrate=samplingRate, 
               samplesize=sampleSize, 
               compressiontype=compressionType, 
               audioduration=audioDuration 
             WHERE n=1;
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
  RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<div class="refentry"><a id="CACJFFCA"></a>
<div id="AIVUG80804" class="refsect1">
<h2 class="refsect1">Static Methods Unique to the ORDDoc Object Type Relational Interface<a id="sthref1210"></a></h2>
<p>This section presents reference information about these Oracle Multimedia static methods, which are unique to the ORDDoc relational interface:</p>
<ul>
<li>
<p><a href="#CHEIBGDC">getProperties( ) for BFILEs</a></p>
</li>
<li>
<p><a href="#CHEDBGJB">getProperties( ) (all attributes) for BFILEs</a></p>
</li>
<li>
<p><a href="#CHEHABHI">getProperties( ) for BLOBs</a></p>
</li>
<li>
<p><a href="#CHEHAAJG">getProperties( ) (all attributes) for BLOBs</a></p>
</li>
</ul>
<p>The relational interface adds Oracle Multimedia support to audio, image, video, and other heterogeneous media data stored in BLOBs and BFILEs rather than in the ORDDoc object type. The static methods that are unique to the ORDDoc relational interface are defined in the <code>orddspec.sql</code> file.</p>
<div id="AIVUG80805" class="refsect2"><a id="CHEIBGDC"></a>
<h3 class="refsect2">getProperties( ) for BFILEs<a id="sthref1211"></a><a id="sthref1212"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1213"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">docBfile IN OUT NOCOPY BFILE,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">format IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1214"></a>Description</p>
<p>Reads the document BFILE data to get the values of the media attributes, and then stores them in the input CLOB. It populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1215"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>docBfile</dt>
<dd>
<p>The document data represented as a BFILE.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the document BFILE data in XML form.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the document data. If a non-NULL value is specified, then the format plug-in for this format type is invoked.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1216"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1217"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1218"></a>Exceptions</p>
<p>ORDDocExceptions.DOC_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the document plug-in raises an exception.</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1219"></a>Examples</p>
<p>Get the property information for known document attributes:</p>
<pre>DECLARE
  doc_attrib CLOB;
  ctx RAW(64) :=NULL;
  doc_data BFILE := BFILENAME(&#39;DOCDIR&#39;,&#39;testvid.dat&#39;);
  doc_format VARCHAR2(160) := NULL;
BEGIN
   DBMS_LOB.CREATETEMPORARY(doc_attrib, FALSE, DBMS_LOB.CALL);
   ORDSYS.ORDDoc.getProperties(ctx, doc_data, doc_attrib, doc_format);

   DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(doc_attrib)));
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80806" class="refsect2"><a id="CHEDBGJB"></a>
<h3 class="refsect2">getProperties( ) (all attributes) for BFILEs<a id="sthref1220"></a><a id="sthref1221"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1222"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">docBfile IN OUT NOCOPY BFILE,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">mimeType OUT VARCHAR2,</p>
<p class="synopsis">format IN OUT VARCHAR2,</p>
<p class="synopsis">contentLength OUT INTEGER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1223"></a>Description</p>
<p>Reads the document BFILE data to get the values of the media attributes for supported formats, and then stores them in the input CLOB and returns them as explicit parameters. This method gets the properties for these attributes of the document data: MIME type, content length, and format. It populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1224"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>docBfile</dt>
<dd>
<p>The document data represented as a BFILE.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the document BFILE data in XML form.</p>
</dd>
<dt>mimeType</dt>
<dd>
<p>The MIME type of the document data.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the document data. If a non-NULL value is specified, then the format plug-in for this format type is invoked. If not specified, the derived format is returned.</p>
</dd>
<dt>contentLength</dt>
<dd>
<p>The length of the content, in bytes.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1225"></a>Usage Notes</p>
<p>If a property cannot be extracted from the media source, then the respective parameter is set to NULL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1226"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1227"></a>Exceptions</p>
<p>ORDDocExceptions.DOC_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the document plug-in raises an exception.</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1228"></a>Examples</p>
<p>Get the property information for known document attributes:</p>
<pre>DECLARE
  doc_attrib        CLOB;
  ctx               RAW(64) :=NULL;
  doc_data          BFILE := BFILENAME(&#39;DOCDIR&#39;,&#39;testimg.dat&#39;);
  doc_mimeType      VARCHAR2(80);
  doc_format        VARCHAR2(32) := NULL;
  doc_contentLength NUMBER;
BEGIN
   DBMS_LOB.CREATETEMPORARY(doc_attrib, FALSE, DBMS_LOB.CALL);
   ORDSYS.ORDDoc.getProperties(ctx, doc_data, doc_attrib, 
                  doc_mimeType, doc_format, doc_contentLength);
   DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; || 
                         TO_CHAR(DBMS_LOB.GETLENGTH(doc_attrib)));
   DBMS_OUTPUT.put_line(&#39;mimeType: &#39; || doc_mimeType );
   DBMS_OUTPUT.put_line(&#39;format: &#39; || doc_format );
   DBMS_OUTPUT.put_line(&#39;contentLength: &#39; || doc_contentLength );
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80807" class="refsect2"><a id="CHEHABHI"></a>
<h3 class="refsect2">getProperties( ) for BLOBs<a id="sthref1229"></a><a id="sthref1230"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1231"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">docBlob IN BLOB,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">format IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1232"></a>Description</p>
<p>Reads the document BLOB data to get the values of the media attributes, and then stores them in the input CLOB. This method populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1233"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>docBlob</dt>
<dd>
<p>The document data represented as a BLOB.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the document BLOB data in XML form.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the document data. If a non-NULL value is specified, then the format plug-in for this format type is invoked.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1234"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1235"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1236"></a>Exceptions</p>
<p>ORDDocExceptions.DOC_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the document plug-in raises an exception.</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1237"></a>Examples</p>
<p>Get the property information for known document attributes:</p>
<pre>DECLARE
  doc_attrib CLOB;
  ctx RAW(64) :=NULL;
  doc_data BLOB;
  doc_format VARCHAR2(160) := NULL;

BEGIN
    SELECT document,attributes INTO doc_data,doc_attrib FROM tdoc WHERE N = 1 FOR UPDATE;
   ORDSYS.ORDDoc.getProperties(ctx, doc_data, doc_attrib, doc_format);

   DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(doc_attrib)));
   UPDATE tdoc SET document=doc_data, attributes=doc_attrib WHERE N=1;
   COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
      RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80808" class="refsect2"><a id="CHEHAAJG"></a>
<h3 class="refsect2">getProperties( ) (all attributes) for BLOBs<a id="sthref1238"></a><a id="sthref1239"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1240"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">docBlob IN BLOB,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">mimeType OUT VARCHAR2,</p>
<p class="synopsis">format IN OUT VARCHAR2,</p>
<p class="synopsis">contentLength OUT INTEGER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1241"></a>Description</p>
<p>Reads the document BLOB data to get the values of the media attributes, and then stores them in the input CLOB and returns them as explicit parameters. This method gets the properties for these attributes of the document data: MIME type, content length, and format. It populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1242"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>docBlob</dt>
<dd>
<p>The document data represented as a BLOB.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the document BLOB data in XML form.</p>
</dd>
<dt>mimeType</dt>
<dd>
<p>The MIME type of the document data.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the document data. If a non-NULL value is specified, then the format plug-in for this format type is invoked.</p>
</dd>
<dt>contentLength</dt>
<dd>
<p>The length of the content, in bytes.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1243"></a>Usage Notes</p>
<p>If a property cannot be extracted from the media source, then the respective parameter is set to NULL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1244"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1245"></a>Exceptions</p>
<p>ORDDocExceptions.DOC_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the document plug-in raises an exception.</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1246"></a>Examples</p>
<p>Get the property information for known document attributes:</p>
<pre>DECLARE
  doc_attrib        CLOB;
  ctx               RAW(64) :=NULL;
  doc_data          BLOB;
  doc_mimeType      VARCHAR2(80);
  doc_format        VARCHAR2(32):=NULL;
  doc_contentLength NUMBER;
BEGIN
   SELECT document, attributes, mimetype, format, contentlength INTO doc_data, 
     doc_attrib, doc_mimeType, doc_format, doc_contentLength FROM tdoc 
     WHERE N = 1 FOR UPDATE;

   ORDSYS.ORDDoc.getProperties(ctx, doc_data, doc_attrib, 
                  doc_mimeType, doc_format, doc_contentLength);

   DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(doc_attrib)));
   DBMS_OUTPUT.put_line(&#39;mimeType: &#39; || doc_mimeType );
   DBMS_OUTPUT.put_line(&#39;format: &#39; || doc_format );
   DBMS_OUTPUT.put_line(&#39;contentLength: &#39; || doc_contentLength );
   UPDATE tdoc SET 
     document=doc_data, 
     attributes=doc_attrib, 
     mimetype=doc_mimeType, 
     format=doc_format, 
     contentlength=doc_contentLength 
    WHERE N=1;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<div class="refentry"><a id="CACBJGAD"></a>
<div id="AIVUG80809" class="refsect1">
<h2 class="refsect1">Static Methods Unique to the ORDImage Object Type Relational Interface<a id="sthref1247"></a></h2>
<p>This section presents reference information about these Oracle Multimedia static methods, which are unique to the ORDImage relational interface:</p>
<ul>
<li>
<p><a href="#CHEGAADE">applyWatermark( ) image for BFILEs</a></p>
</li>
<li>
<p><a href="#CHEIJHCJ">applyWatermark( ) image for BLOBs</a></p>
</li>
<li>
<p><a href="#CHECDCJD">applyWatermark( ) text for BFILEs</a></p>
</li>
<li>
<p><a href="#CHEDDEBJ">applyWatermark( ) text for BLOBs</a></p>
</li>
<li>
<p><a href="#CHEIEBBB">getMetadata( ) for BFILEs</a></p>
</li>
<li>
<p><a href="#CHEHBBDA">getMetadata( ) for BLOBs</a></p>
</li>
<li>
<p><a href="#CHEJGDEC">getProperties( ) for BFILEs</a></p>
</li>
<li>
<p><a href="#CHEIEDAA">getProperties( ) (all attributes) for BFILEs</a></p>
</li>
<li>
<p><a href="#CHEJAGII">getProperties( ) for BLOBs</a></p>
</li>
<li>
<p><a href="#CHEDEAHB">getProperties( ) (all attributes) for BLOBs</a></p>
</li>
<li>
<p><a href="#CHEBJGFI">process( )</a></p>
</li>
<li>
<p><a href="#CHEIGDGC">processCopy( ) for BFILEs</a></p>
</li>
<li>
<p><a href="#i1090190">processCopy( ) for BLOBs</a></p>
</li>
<li>
<p><a href="#CHEJHIGD">putMetadata( ) for BFILEs</a></p>
</li>
<li>
<p><a href="#CHEGIJCB">putMetadata( ) for BLOBs</a></p>
</li>
</ul>
<p>The relational interface adds Oracle Multimedia support to image data stored in BLOBs and BFILEs rather than in the ORDImage object type. The static methods that are unique to the ORDImage relational interface are defined in the <code>ordispec.sql</code> file.</p>
<div id="AIVUG80810" class="refsect2"><a id="CHEGAADE"></a>
<h3 class="refsect2">applyWatermark( ) image for BFILEs<a id="sthref1248"></a><a id="sthref1249"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1250"></a>Format</p>
<p class="synopsis">applyWatermark(imageBfile IN OUT NOCOPY BFILE,<br/>
added_image IN OUT NOCOPY BFILE,<br/>
dest IN OUT NOCOPY BLOB,<br/>
logging OUT VARCHAR2,<br/>
watermark_properties IN ordsys.ord_str_list default null),</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1251"></a>Description</p>
<p>Overlays an image watermark onto a source image stored in a BFILE and writes it to a destination BLOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1252"></a>Parameters</p>
<dl>
<dt>imageBfile</dt>
<dd>
<p>The source image data represented as a BFILE.</p>
</dd>
<dt>added_image</dt>
<dd>
<p>The watermark image stored in a BFILE to be added to the source image.</p>
</dd>
<dt>dest</dt>
<dd>
<p>The destination BLOB for the watermarked image.</p>
</dd>
<dt>logging</dt>
<dd>
<p>A string that contains information about any unexpected behavior that occurred during the watermarking operation. If the operation is successful, an empty string is returned.</p>
</dd>
<dt>watermark_properties</dt>
<dd>
<p>A string list of name-value pairs that define attributes of the watermark image, including: width, height, position, position_x, position_y, and transparency. See <a href="ap_imgproc.htm#BIHJFADG">Table D-2</a> for the complete list of watermark properties.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1253"></a>Usage Notes</p>
<p>Calling this method processes the image into the destination BLOB from any source BFILE.</p>
<p>See <a href="ap_imgproc.htm#BIHHICGG">Section D.6</a> for more information about watermarking operations and watermark properties.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1254"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1255"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the source image or added image is NULL.</p>
<p>ORDImageExceptions.NULL_DESTINATION</p>
<p>This exception is raised when the destination image BLOB is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1256"></a>Examples</p>
<p>Add a watermark image to an image BFILE:</p>
<pre>-- add image as watermark for BFILE
DECLARE
  source_image   BFILE := BFILENAME(&#39;IMAGEDIR&#39;,&#39;testimg.jpg&#39;);
  added_image   BFILE := BFILENAME(&#39;IMAGEDIR&#39;,&#39;testlogo.png&#39;);
  dest_image BLOB;
  prop ordsys.ord_str_list;
  logging VARCHAR2(2000);
BEGIN
  SELECT img INTO dest_image FROM timg WHERE N = 4003 FOR UPDATE;
 
  -- specify properties
  prop := ordsys.ord_str_list(
                   &#39;position=bottomright&#39;,
                   &#39;transparency=0.2&#39;);
 
  -- add image watermark to source image
  ORDSYS.ORDImage.applyWatermark(source_image, added_image, dest_image, logging, prop);
 
  UPDATE timg SET img = dest_image WHERE N = 4003;
  COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre>
<p>where:</p>
<ul>
<li>
<p><code>testimg.jpg</code>: the source image (in JPEG format) stored in the table. The source image is larger than the watermark image.</p>
</li>
<li>
<p><code>testlogo.png</code>: the watermark image (in PNG format) stored in the table. The watermark image is overlaid onto the bottom right position of the source image.</p>
</li>
<li>
<p><code>4003</code>: the resulting watermarked image stored in the table.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80811" class="refsect2"><a id="CHEIJHCJ"></a>
<h3 class="refsect2">applyWatermark( ) image for BLOBs<a id="sthref1257"></a><a id="sthref1258"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1259"></a>Format</p>
<p class="synopsis">applyWatermark(imageBlob IN BLOB,<br/>
added_image IN BLOB,<br/>
dest IN OUT NOCOPY BLOB,<br/>
logging OUT VARCHAR2,<br/>
watermark_properties IN ordsys.ord_str_list default null),</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1260"></a>Description</p>
<p>Overlays an image watermark onto a source image stored in a BLOB and writes it to a destination BLOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1261"></a>Parameters</p>
<dl>
<dt>imageBlob</dt>
<dd>
<p>The source image data represented as a BLOB.</p>
</dd>
<dt>added_image</dt>
<dd>
<p>The watermark image stored in a BLOB to be added to the source image.</p>
</dd>
<dt>dest</dt>
<dd>
<p>The destination BLOB for the watermarked image.</p>
</dd>
<dt>logging</dt>
<dd>
<p>A string that contains information about any unexpected behavior that occurred during the watermarking operation. If the operation is successful, an empty string is returned.</p>
</dd>
<dt>watermark_properties</dt>
<dd>
<p>A string list of name-value pairs that define attributes of the watermark image, including: width, height, position, position_x, position_y, and transparency. See <a href="ap_imgproc.htm#BIHJFADG">Table D-2</a> for the complete list of watermark properties.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1262"></a>Usage Notes</p>
<p>Because temporary LOBs do not have read consistency, you cannot use the same temporary LOB for both the imageBlob and dest parameters.</p>
<p>Calling this method processes the image into the destination BLOB from any source BLOB.</p>
<p>See <a href="ap_imgproc.htm#BIHHICGG">Section D.6</a> for more information about watermarking operations and watermark properties.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1263"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1264"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the source image or added image is NULL.</p>
<p>ORDImageExceptions.NULL_DESTINATION</p>
<p>This exception is raised when the destination image BLOB is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1265"></a>Examples</p>
<p>Add a watermark image to an image BLOB:</p>
<pre>-- add image as watermark for BLOB
DECLARE
  source_image      BLOB;
  added_image       BLOB;
  dest_image        BLOB;
  prop ordsys.ord_str_list;
  logging VARCHAR2(2000);
BEGIN
  SELECT img INTO source_image FROM timg WHERE N = 4001;
  SELECT img INTO added_image FROM timg WHERE N = 4002;
  SELECT img INTO dest_image FROM timg WHERE N = 4003 FOR UPDATE;
 
  -- specify properties
  prop := ordsys.ord_str_list(
                   &#39;position=bottomright&#39;,
                   &#39;transparency=0.2&#39;);
 
  -- add image watermark to source image
  ORDSYS.ORDImage.applyWatermark(source_image, added_image, dest_image, logging, prop);
 
  UPDATE timg SET img = dest_image WHERE N = 4003;
  COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre>
<p>where:</p>
<ul>
<li>
<p><code>4001</code>: the source image (in JPEG format) stored in the table. The source image is larger than the watermark image.</p>
</li>
<li>
<p><code>4002</code>: the watermark image (in PNG format) stored in the table. The watermark image is overlaid onto the bottom right position of the source image.</p>
</li>
<li>
<p><code>4003</code>: the resulting watermarked image stored in the table.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80812" class="refsect2"><a id="CHECDCJD"></a>
<h3 class="refsect2">applyWatermark( ) text for BFILEs<a id="sthref1266"></a><a id="sthref1267"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1268"></a>Format</p>
<p class="synopsis">applyWatermark(imageBfile IN OUT NOCOPY BFILE,<br/>
added_text IN VARCHAR2,<br/>
dest IN OUT NOCOPY BLOB,<br/>
logging OUT VARCHAR2,<br/>
watermark_properties IN ordsys.ord_str_list default null),</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1269"></a>Description</p>
<p>Overlays a text watermark onto a source image stored in a BFILE and writes it to a destination BLOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1270"></a>Parameters</p>
<dl>
<dt>imageBfile</dt>
<dd>
<p>The source image data represented as a BFILE.</p>
</dd>
<dt>added_text</dt>
<dd>
<p>The watermark text stored in a string to be added to the source image.</p>
</dd>
<dt>dest</dt>
<dd>
<p>The destination BLOB for the watermarked image.</p>
</dd>
<dt>logging</dt>
<dd>
<p>A string that contains information about any unexpected behavior that occurred during the watermarking operation. If the operation is successful, an empty string is returned. Otherwise, this method returns a string that describes the unexpected behavior. For example: if watermark text is so long that it is truncated, this string is returned: <code>WARNING: text is too long and truncated.</code></p>
</dd>
<dt>watermark_properties</dt>
<dd>
<p>A string list of name-value pairs that define attributes of the watermark text, including: font_name, font_style, font_size, text_color, position_x, position_y, and transparency. See <a href="ap_imgproc.htm#BIHJFADG">Table D-2</a> for the complete list of watermark properties.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1271"></a>Usage Notes</p>
<p>Calling this method processes the image into the destination BLOB from any source BFILE.</p>
<p>See <a href="ap_imgproc.htm#BIHHICGG">Section D.6</a> for more information about watermarking operations and watermark properties.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1272"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1273"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the source image is NULL.</p>
<p>ORDImageExceptions.NULL_DESTINATION</p>
<p>This exception is raised when the destination image BLOB is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1274"></a>Examples</p>
<p>Add watermark text to an image BFILE:</p>
<pre>-- add text as watermark for BFILE
DECLARE
  source_image   BFILE := BFILENAME(&#39;IMAGEDIR&#39;,&#39;testimg.jpg&#39;);
  added_text   varchar2(200);
  dest_image BLOB;
  prop ordsys.ord_str_list;
  logging VARCHAR2(2000);
BEGIN
  SELECT img INTO dest_image FROM timg WHERE N = 4003 FOR UPDATE;
 
  added_text := &#39;Oracle Multimedia &copy; 2009&#39;;
  -- specify properties
  prop := ordsys.ord_str_list(
                   &#39;font_name=Times New Roman&#39;,
                   &#39;font_style=bold&#39;,
                   &#39;font_size=50&#39;,
                   &#39;text_color=red&#39;,
                   &#39;position_x=100&#39;,
                   &#39;position_y=100&#39;,
                   &#39;transparency=0.6&#39;);
 
  -- add text watermark to source image
  ORDSYS.ORDImage.applyWatermark(source_image, added_text, dest_image, logging, prop);
 
  UPDATE timg SET img = dest_image WHERE N = 4003;
  COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre>
<p>where:</p>
<ul>
<li>
<p><code>testimg.jpg</code>: the source image (in JPEG format) stored in the table.</p>
</li>
<li>
<p><code>4003</code>: the resulting watermarked image stored in the table.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80813" class="refsect2"><a id="CHEDDEBJ"></a>
<h3 class="refsect2">applyWatermark( ) text for BLOBs<a id="sthref1275"></a><a id="sthref1276"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1277"></a>Format</p>
<p class="synopsis">applyWatermark(imageBlob IN BLOB,<br/>
added_text IN VARCHAR2,<br/>
dest IN OUT NOCOPY BLOB,<br/>
logging OUT VARCHAR2,<br/>
watermark_properties IN ordsys.ord_str_list default null),</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1278"></a>Description</p>
<p>Overlays a text watermark onto a source image stored in a BLOB and writes it to a destination BLOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1279"></a>Parameters</p>
<dl>
<dt>imageBfile</dt>
<dd>
<p>The source image data represented as a BLOB.</p>
</dd>
<dt>added_text</dt>
<dd>
<p>The watermark text stored in a string to be added to the source image.</p>
</dd>
<dt>dest</dt>
<dd>
<p>The destination BLOB for the watermarked image.</p>
</dd>
<dt>logging</dt>
<dd>
<p>A string that contains information about any unexpected behavior that occurred during the watermarking operation. If the operation is successful, an empty string is returned. Otherwise, this method returns a string that describes the unexpected behavior. For example: if watermark text is so long that it is truncated, this string is returned: <code>WARNING: text is too long and truncated.</code></p>
</dd>
<dt>watermark_properties</dt>
<dd>
<p>A string list of name-value pairs that define attributes of the watermark text, including: font_name, font_style, font_size, text_color, position_x, position_y, and transparency. See <a href="ap_imgproc.htm#BIHJFADG">Table D-2</a> for the complete list of watermark properties.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1280"></a>Usage Notes</p>
<p>Because temporary LOBs do not have read consistency, you cannot use the same temporary LOB for both the imageBlob and dest parameters.</p>
<p>Calling this method processes the image into the destination BLOB from any source BLOB.</p>
<p>See <a href="ap_imgproc.htm#BIHHICGG">Section D.6</a> for more information about watermarking operations and watermark properties.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1281"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1282"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the source image is NULL.</p>
<p>ORDImageExceptions.NULL_DESTINATION</p>
<p>This exception is raised when the destination image BLOB is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1283"></a>Examples</p>
<p>Add watermark text to an image BLOB:</p>
<pre>-- add text as watermark for BLOB
DECLARE
  source_image      BLOB;
  added_text  varchar2(200);
  dest_image        BLOB;
  prop ordsys.ord_str_list;
  logging VARCHAR2(2000);
BEGIN
  SELECT img INTO source_image FROM timg WHERE N = 4001;
  SELECT img INTO dest_image FROM timg WHERE N = 4003 FOR UPDATE;
 
  added_text := &#39;Oracle Multimedia &copy; 2009&#39;;
  -- specify properties
  prop := ordsys.ord_str_list(
                   &#39;font_name=Times New Roman&#39;,
                   &#39;font_style=bold&#39;,
                   &#39;font_size=50&#39;,
                   &#39;text_color=red&#39;,
                   &#39;position_x=100&#39;,
                   &#39;position_y=100&#39;,
                   &#39;transparency=0.6&#39;);
 
  -- add text watermark to source image
  ORDSYS.ORDImage.applyWatermark(source_image, added_text, dest_image, logging, prop);
 
  UPDATE timg SET img = dest_image WHERE N = 4003;
  COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre>
<p>where:</p>
<ul>
<li>
<p><code>4001</code>: the source image (in JPEG format) stored in the table.</p>
</li>
<li>
<p><code>4003</code>: the resulting watermarked image stored in the table.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80814" class="refsect2"><a id="CHEIEBBB"></a>
<h3 class="refsect2">getMetadata( ) for BFILEs<a id="sthref1284"></a><a id="sthref1285"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1286"></a>Format</p>
<p class="synopsis">getMetadata(imageBfile IN NOCOPY BFILE,</p>
<p class="synopsis">metadataType IN VARCHAR2 DEFAULT &#39;ALL&#39;</p>
<p class="synopsis">RETURN XMLSequenceType;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1287"></a>Description</p>
<p>Extracts the specified types of metadata from the imageBfile and returns an array of schema-valid XML documents. If no matching metadata is found, an empty array is returned.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1288"></a>Parameters</p>
<dl>
<dt>imageBfile</dt>
<dd>
<p>The image data represented as a BFILE.</p>
</dd>
<dt>metadataType</dt>
<dd>
<p>A string that identifies the types of embedded metadata to extract. Valid values are: <code>ALL</code>, <code>ORDIMAGE</code>, <code>XMP</code>, <code>EXIF</code>, and <code>IPTC-IIM</code>. The default value is <code>ALL</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1289"></a>Usage Notes</p>
<p>When the value of input parameter metadataType is <code>ALL</code>, and two or more types of supported metadata are present in the image, this method returns several XML documents, one for each type of metadata found. For other values of the input parameter, the method returns zero or one XML document.</p>
<p>Each document is stored as an instance of XMLType, and is based on one of the metadata schemas. Use the XQuery function <code>fn:namespace-uri</code> to determine the type of metadata represented in that document.</p>
<p>See <a href="ap_xmlschms.htm#CIHBDJCC">Appendix F</a> for information about the supported metadata schemas.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink IMURG3500" href="../IMURG/ch_metadata.htm#IMURG3500"><span class="italic">Oracle Multimedia User&#39;s Guide</span></a> for more information about the metadata feature</p>
</li>
<li>
<p><a class="olink ADXDB1700" href="../ADXDB/xdb_xquery.htm#ADXDB1700"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information about XQuery functions</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1290"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1291"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the imageBfile parameter is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1292"></a>Examples</p>
<p>Extract the embedded metadata from an imageBfile, and return an array of schema-valid XML documents:</p>
<pre>DECLARE 
  imageBfile  BFILE := BFILENAME(&#39;MEDIA_DIR&#39;,&#39;keyboard.jpg&#39;);
  metav       XMLSequenceType; 
  ns          varchar2(4000);
BEGIN 

  metav := ORDSYS.ORDImage.getMetadata(imageBfile, &#39;ALL&#39;);
 
  -- print the namespace of each metadata document
  FOR i in 1..metav.count LOOP
    select xmlcast(xmlquery(&#39;fn:namespace-uri($x)&#39;
          passing metav(i) as &#34;x&#34; returning content) as varchar2(4000))
      into ns from dual;
    DBMS_OUTPUT.PUT_LINE(&#39;namespace: &#39; || ns);
  END LOOP;

  EXCEPTION 
  WHEN ORDSYS.ORDImageExceptions.NULL_CONTENT THEN 
    DBMS_OUTPUT.PUT_LINE(&#39;imageBlob is null&#39;); 
  WHEN OTHERS THEN 
    RAISE;
END; /
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80815" class="refsect2"><a id="CHEHBBDA"></a>
<h3 class="refsect2">getMetadata( ) for BLOBs<a id="sthref1293"></a><a id="sthref1294"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1295"></a>Format</p>
<p class="synopsis">getMetadata(imageBlob IN NOCOPY BLOB,</p>
<p class="synopsis">metadataType IN VARCHAR2 DEFAULT &#39;ALL&#39;)</p>
<p class="synopsis">RETURN XMLSequenceType;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1296"></a>Description</p>
<p>Extracts the specified types of metadata from the imageBlob and returns an array of schema-valid XML documents. If no matching metadata is found, an empty array is returned.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1297"></a>Parameters</p>
<dl>
<dt>imageBlob</dt>
<dd>
<p>The image data represented as a BLOB.</p>
</dd>
<dt>metadataType</dt>
<dd>
<p>A string that identifies the types of embedded metadata to extract. Valid values are: <code>ALL</code>, <code>ORDIMAGE</code>, <code>XMP</code>, <code>EXIF</code>, and <code>IPTC-IIM</code>. The default value is <code>ALL</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1298"></a>Usage Notes</p>
<p>When the value of input parameter metadataType is <code>ALL</code>, and two or more types of supported metadata are present in the image, this method returns several XML documents, one for each type of metadata found. For other values of the input parameter, the method returns zero or one XML document.</p>
<p>Each document is stored as an instance of XMLType, and is based on one of the metadata schemas. Use the XQuery function <code>fn:namespace-uri</code> to determine the type of metadata represented in that document.</p>
<p>See <a href="ap_xmlschms.htm#CIHBDJCC">Appendix F</a> for information about the supported metadata schemas.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink IMURG3500" href="../IMURG/ch_metadata.htm#IMURG3500"><span class="italic">Oracle Multimedia User&#39;s Guide</span></a> for more information about the metadata feature</p>
</li>
<li>
<p><a class="olink ADXDB1700" href="../ADXDB/xdb_xquery.htm#ADXDB1700"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information about XQuery functions</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1299"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1300"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the imageBlob parameter is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1301"></a>Examples</p>
<p>Extract the embedded metadata from an imageBlob, and return an array of schema-valid XML documents:</p>
<pre>DECLARE 
  imageBlob BLOB;
  metav     XMLSequenceType; 
  ns        varchar2(4000);
BEGIN 
  SELECT ad_photo
  INTO imageBlob 
  FROM pm.print_media
  WHERE product_id = 3106;
  
  metav := ORDSYS.ORDImage.getMetadata(imageBlob, &#39;ALL&#39;);
  
  -- print the namespace of each metadata document
  FOR i in 1..metav.count LOOP
    select xmlcast(xmlquery(&#39;fn:namespace-uri($x)&#39;
          passing metav(i) as &#34;x&#34; returning content) as varchar2(4000))
      into ns from dual;
    DBMS_OUTPUT.PUT_LINE(&#39;namespace: &#39; || ns);
  END LOOP;
 
  EXCEPTION 
  WHEN ORDSYS.ORDImageExceptions.NULL_CONTENT THEN 
    DBMS_OUTPUT.PUT_LINE(&#39;imageBlob is null&#39;); 
  WHEN OTHERS THEN
    RAISE;
END; /
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80816" class="refsect2"><a id="CHEJGDEC"></a>
<h3 class="refsect2">getProperties( ) for BFILEs<a id="sthref1302"></a><a id="sthref1303"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1304"></a>Format</p>
<p class="synopsis">getProperties(imageBfile IN OUT NOCOPY BFILE,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1305"></a>Description</p>
<p>Reads the image BFILE data to get the values of the media attributes for supported formats, and then stores them in the input CLOB. This method populates the CLOB with a set of format properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1306"></a>Parameters</p>
<dl>
<dt>imageBfile</dt>
<dd>
<p>The image data represented as a BFILE.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with a set of format properties of the image BFILE data in XML form.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1307"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1308"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1309"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the imageBfile parameter is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1310"></a>Examples</p>
<p>Get the property information for known image attributes:</p>
<pre>DECLARE
  img_attrib CLOB;
  data BFILE := BFILENAME(&#39;IMAGEDIR&#39;,&#39;testimg.dat&#39;);
BEGIN
   DBMS_LOB.CREATETEMPORARY(img_attrib, FALSE, DBMS_LOB.CALL);
   ORDSYS.ORDImage.getProperties(data, img_attrib);

   DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(img_attrib)));
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80817" class="refsect2"><a id="CHEIEDAA"></a>
<h3 class="refsect2">getProperties( ) (all attributes) for BFILEs<a id="sthref1311"></a><a id="sthref1312"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1313"></a>Format</p>
<p class="synopsis">getProperties(imageBfile IN OUT NOCOPY BFILE,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">mimeType OUT VARCHAR2,</p>
<p class="synopsis">width OUT INTEGER,</p>
<p class="synopsis">height OUT INTEGER,</p>
<p class="synopsis">fileFormat OUT VARCHAR2,</p>
<p class="synopsis">contentFormat OUT VARCHAR2,</p>
<p class="synopsis">compressionFormat OUT VARCHAR2,</p>
<p class="synopsis">contentLength OUT INTEGER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1314"></a>Description</p>
<p>Reads the image BFILE data to get the values of the media attributes for supported formats, and then stores them in the input CLOB and returns them as explicit parameters. This method gets the properties for these attributes of the image data: MIME type, width, height, file format, content format, compression format, and content length. It populates the CLOB with a set of format properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1315"></a>Parameters</p>
<dl>
<dt>imageBfile</dt>
<dd>
<p>The image data represented as a BFILE.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with a set of format properties of the image BFILE data in XML form.</p>
</dd>
<dt>mimeType</dt>
<dd>
<p>The MIME type of the image data.</p>
</dd>
<dt>width</dt>
<dd>
<p>The width of the image in pixels.</p>
</dd>
<dt>height</dt>
<dd>
<p>The height of the image in pixels.</p>
</dd>
<dt>fileFormat</dt>
<dd>
<p>The format of the image data.</p>
</dd>
<dt>contentFormat</dt>
<dd>
<p>The type of image (monochrome, and so on).</p>
</dd>
<dt>compressionFormat</dt>
<dd>
<p>The compression algorithm used on the image data.</p>
</dd>
<dt>contentLength</dt>
<dd>
<p>The size of the image file on disk, in bytes.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1316"></a>Usage Notes</p>
<p>If a property cannot be extracted from the media source, then the respective parameter is set to NULL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1317"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1318"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the imageBfile parameter is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1319"></a>Examples</p>
<p>Get the property information for known image attributes:</p>
<pre>DECLARE
  img_data          BFILE := BFILENAME(&#39;IMAGEDIR&#39;,&#39;testimg.dat&#39;);
  img_attrib        CLOB;
  mimeType          VARCHAR2(80);
  width             NUMBER;
  height            NUMBER;
  fileFormat        VARCHAR2(32);
  contentFormat     VARCHAR2(4000);
  compressionFormat VARCHAR2(4000);
  contentLength     NUMBER;
BEGIN
   DBMS_LOB.CREATETEMPORARY(img_attrib, FALSE, DBMS_LOB.CALL);

  ORDSYS.ORDImage.getProperties(img_data, img_attrib, 
         mimeType, width, height, fileFormat, 
         contentFormat, compressionFormat, contentLength);

   DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(img_attrib)));
   DBMS_OUTPUT.put_line(&#39;mimeType: &#39; || mimeType );
   DBMS_OUTPUT.put_line(&#39;width: &#39; || width );
   DBMS_OUTPUT.put_line(&#39;height: &#39; || height );
   DBMS_OUTPUT.put_line(&#39;fileFormat: &#39; || fileFormat );
   DBMS_OUTPUT.put_line(&#39;contentFormat: &#39; || contentFormat );
   DBMS_OUTPUT.put_line(&#39;compressionFormat: &#39; || compressionFormat );
   DBMS_OUTPUT.put_line(&#39;contentLength: &#39; || contentLength );
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80818" class="refsect2"><a id="CHEJAGII"></a>
<h3 class="refsect2">getProperties( ) for BLOBs<a id="sthref1320"></a><a id="sthref1321"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1322"></a>Format</p>
<p class="synopsis">getProperties(imageBlob IN BLOB,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1323"></a>Description</p>
<p>Reads the image BLOB data to get the values of the media attributes for supported formats, and then stores them in the input CLOB. This method populates the CLOB with a set of format properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1324"></a>Parameters</p>
<dl>
<dt>imageBlob</dt>
<dd>
<p>The image data represented as a BLOB.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with a set of format properties of the image BLOB data in XML form.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1325"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1326"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1327"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the imageBlob parameter is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1328"></a>Examples</p>
<p>Get the property information for known image attributes:</p>
<pre>DECLARE
  img_attrib CLOB;
  img_data BLOB;
BEGIN
   SELECT img, attributes INTO img_data, img_attrib FROM timg WHERE N = 1 FOR UPDATE;
   ORDSYS.ORDImage.getProperties(img_data, img_attrib);

   DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(img_attrib)));
   UPDATE timg SET img=img_data, attributes=img_attrib WHERE N=1;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80819" class="refsect2"><a id="CHEDEAHB"></a>
<h3 class="refsect2">getProperties( ) (all attributes) for BLOBs<a id="sthref1329"></a><a id="sthref1330"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1331"></a>Format</p>
<p class="synopsis">getProperties(imageBlob IN BLOB,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">mimeType OUT VARCHAR2,</p>
<p class="synopsis">width OUT INTEGER,</p>
<p class="synopsis">height OUT INTEGER,</p>
<p class="synopsis">fileFormat OUT VARCHAR2,</p>
<p class="synopsis">contentFormat OUT VARCHAR2,</p>
<p class="synopsis">compressionFormat OUT VARCHAR2,</p>
<p class="synopsis">contentLength OUT INTEGER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1332"></a>Description</p>
<p>Reads the image BLOB data to get the values of the media attributes for supported formats, and then stores them in the input CLOB and returns them as explicit parameters. This method gets the properties for these attributes of the image data: MIME type, width, height, file format, content format, compression format, and content length. It populates the CLOB with a set of format properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1333"></a>Parameters</p>
<dl>
<dt>imageBlob</dt>
<dd>
<p>The image data represented as a BLOB.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with a set of format properties of the image BLOB data in XML form.</p>
</dd>
<dt>mimeType</dt>
<dd>
<p>The MIME type of the image data.</p>
</dd>
<dt>width</dt>
<dd>
<p>The width of the image in pixels.</p>
</dd>
<dt>height</dt>
<dd>
<p>The height of the image in pixels.</p>
</dd>
<dt>fileFormat</dt>
<dd>
<p>The format of the image data.</p>
</dd>
<dt>contentFormat</dt>
<dd>
<p>The type of image (monochrome, and so on).</p>
</dd>
<dt>compressionFormat</dt>
<dd>
<p>The compression algorithm used on the image data.</p>
</dd>
<dt>contentLength</dt>
<dd>
<p>The size of the image file on disk, in bytes.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1334"></a>Usage Notes</p>
<p>If a property cannot be extracted from the media source, then the respective parameter is set to <code>NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1335"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1336"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the imageBlob parameter is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1337"></a>Examples</p>
<p>Get the property information for known image attributes:</p>
<pre>DECLARE
  img_data              BLOB;
  img_attrib        CLOB;
  mimeType          VARCHAR2(4000);
  width             NUMBER;
  height            NUMBER;
  fileFormat        VARCHAR2(32);
  contentFormat     VARCHAR2(4000);
  compressionFormat VARCHAR2(4000);
  contentLength     NUMBER;
BEGIN
   SELECT img, attributes, mimetype, width, height, fileformat, contentformat,
     compressionformat, contentlength INTO img_data, img_attrib, mimeType, width,
     height, fileFormat, contentFormat, compressionFormat, contentLength 
     FROM timg WHERE N = 1 FOR UPDATE;

  ORDSYS.ORDImage.getProperties(img_data, img_attrib, 
         mimeType, width, height, fileFormat,
         contentFormat, compressionFormat, contentLength);

   DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(img_attrib)));
   DBMS_OUTPUT.put_line(&#39;mimeType: &#39; || mimeType );
   DBMS_OUTPUT.put_line(&#39;width: &#39; || width );
   DBMS_OUTPUT.put_line(&#39;height: &#39; || height );
   DBMS_OUTPUT.put_line(&#39;fileFormat: &#39; || fileFormat );
   DBMS_OUTPUT.put_line(&#39;contentFormat: &#39; || contentFormat );
   DBMS_OUTPUT.put_line(&#39;compressionFormat: &#39; || compressionFormat );
   DBMS_OUTPUT.put_line(&#39;contentLength: &#39; || contentLength );
   UPDATE timg SET 
       img=img_data, 
       attributes=img_attrib, 
       mimetype=mimeType, 
       width=width, 
       height=height, 
       fileformat=fileFormat, 
       contentformat=contentFormat, 
       compressionformat=compressionFormat, 
       contentlength=contentLength 
    WHERE N=1;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80820" class="refsect2"><a id="CHEBJGFI"></a>
<h3 class="refsect2">process( )<a id="sthref1338"></a><a id="sthref1339"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1340"></a>Format</p>
<p class="synopsis">process(imageBlob IN OUT NOCOPY BLOB,</p>
<p class="synopsis">command IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1341"></a>Description</p>
<p>Performs one or more image processing operations on a BLOB, writing the image back onto itself.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1342"></a>Parameters</p>
<dl>
<dt>imageBlob</dt>
<dd>
<p>The image data represented as a BLOB.</p>
</dd>
<dt>command</dt>
<dd>
<p>A list of image processing operations to perform on the image.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1343"></a>Usage Notes</p>
<p>You can change one or more of the image attributes shown in <a href="ch_imgref.htm#BABGGJJH">Table 5-1</a>. <a href="ch_imgref.htm#BABJJDAJ">Table 5-2</a> shows additional changes that can be made only to raw pixel and foreign images.</p>
<p>See <a href="ap_imgproc.htm#g622034">Appendix D</a> for more information about process( ) operators.</p>
<p>The process( ) method changes image attributes, therefore if you are storing image attributes, call the getProperties( ) method after calling the process( ) method.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1344"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1345"></a>Exceptions</p>
<p>ORDImageExceptions.DATA_NOT_LOCAL</p>
<p>This exception is raised if you call the process( ) method and the imageBlob parameter is not initialized.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1346"></a>Examples</p>
<p><span class="bold">Example 1:</span></p>
<p>Change the image in the image_data BLOB to use higher quality JPEG compression and double the length of the image along the X-axis:</p>
<pre>ORDSYS.ORDImage.process(
image_data,&#39;compressionFormat=JPEG,compressionQuality=MAXCOMPRATIO, xScale=&#34;2.0&#34;&#39;);
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Changing the length on one axis (for example, xScale=2.0) does not affect the length on the other axis; thus, it distorts the image. Only the xScale and yScale operators can be combined in a single scale operation; any other combination of scale operators causes an error.</div>
<p><span class="bold">Example 2:</span></p>
<p><a id="sthref1347"></a>Create at most a 32-by-32 pixel thumbnail image, preserving the original aspect ratio. The maxScale and fixedScale operators are especially useful for creating thumbnail images from various-sized originals:</p>
<pre>ORDSYS.ORDImage.process(image_data, &#39;maxScale=32 32&#39;);
</pre>
<p><span class="bold">Example 3:</span></p>
<p>Convert the image to TIFF:</p>
<pre>DECLARE
img_attrib CLOB;  
image_data BLOB;
BEGIN
   SELECT img, attributes INTO image_data, img_attrib FROM timg 
     WHERE N = 1 FOR UPDATE;
   ORDSYS.ORDImage.process(image_data, &#39;fileFormat=TIFF&#39;);
   ORDSYS.ORDImage.getProperties(image_data, img_attrib);
   UPDATE timg SET img = image_data, attributes=img_attrib WHERE N = 1;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80821" class="refsect2"><a id="CHEIGDGC"></a>
<h3 class="refsect2">processCopy( ) for BFILEs<a id="sthref1348"></a><a id="sthref1349"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1350"></a>Format</p>
<p class="synopsis">processCopy(imageBfile IN OUT NOCOPY BFILE,</p>
<p class="synopsis">command IN VARCHAR2,</p>
<p class="synopsis">dest IN OUT NOCOPY BLOB);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1351"></a>Description</p>
<p>Reads the image in the source BFILE, performs one or more image processing operations on the image, and then stores the resulting image in the destination BLOB. The original image content in the source BFILE remains unchanged.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1352"></a>Parameters</p>
<dl>
<dt>imageBfile</dt>
<dd>
<p>The image data represented as a BFILE.</p>
</dd>
<dt>command</dt>
<dd>
<p>A list of image processing changes to make for the image in the destination BLOB.</p>
</dd>
<dt>dest</dt>
<dd>
<p>The destination of the new image.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1353"></a>Usage Notes</p>
<p>See <a href="ch_imgref.htm#BABGGJJH">Table 5-1</a> and <a href="ch_imgref.htm#BABJJDAJ">Table 5-2</a> for information about image processing operators.</p>
<p>Calling this method processes the image into the destination BLOB from any source BFILE.</p>
<p>The processCopy( ) method changes image attributes, therefore, if you are storing image attributes, call the getProperties( ) method on the destination image after calling the processCopy( ) method.</p>
<p>See <a href="ap_imgproc.htm#g622034">Appendix D</a> for more information about processCopy( ) operators.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1354"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1355"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_DESTINATION</p>
<p>This exception is raised if you call the processCopy( ) method and the destination image is NULL.</p>
<p>ORDImageExceptions.NULL_LOCAL_DATA</p>
<p>This exception is raised when the imageBfile parameter is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1356"></a>Examples</p>
<p>Generate a thumbnail image of, at most, 32 x 32 pixels in the destination image:</p>
<pre>DECLARE
  dest_attrib      CLOB;
  image_data       BFILE := BFILENAME(&#39;IMAGEDIR&#39;,&#39;testimg.dat&#39;);
  destination_data BLOB;
  the_Command      VARCHAR2(4000);
BEGIN
   SELECT img, attributes INTO destination_data, dest_attrib FROM timg 
       WHERE N = 2 FOR UPDATE;

   the_Command := &#39;maxScale=32 32&#39;;
   ORDSYS.ORDImage.processCopy(image_data, the_Command, destination_data);
   ORDSYS.ORDImage.getProperties(destination_data, dest_attrib);
   UPDATE timg SET img = destination_data, attributes=dest_attrib WHERE N = 2;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80822" class="refsect2"><a id="i1090190"></a>
<h3 class="refsect2">processCopy( ) for BLOBs<a id="sthref1357"></a><a id="sthref1358"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1359"></a>Format</p>
<p class="synopsis">processCopy(imageBlob IN BLOB,</p>
<p class="synopsis">command IN VARCHAR2,</p>
<p class="synopsis">dest IN OUT NOCOPY BLOB);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1360"></a>Description</p>
<p>Reads the image in the source BLOB, performs one or more image processing operations on the image, and then stores the resulting image in the destination BLOB. The original image content in the source BLOB remains unchanged.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1361"></a>Parameters</p>
<dl>
<dt>imageBlob</dt>
<dd>
<p>The source image data represented as a BLOB.</p>
</dd>
<dt>command</dt>
<dd>
<p>A list of image processing changes to make for the image in the destination BLOB.</p>
</dd>
<dt>dest</dt>
<dd>
<p>The destination of the new image.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1362"></a>Usage Notes</p>
<p>See <a href="ch_imgref.htm#BABGGJJH">Table 5-1</a> and <a href="ch_imgref.htm#BABJJDAJ">Table 5-2</a> for information about image processing operators.</p>
<p>Because temporary LOBs do not have read consistency, you cannot use the same temporary LOB for both the imageBlob and dest parameters.</p>
<p>Calling this method processes the image into the destination BLOB from any source BLOB.</p>
<p>The processCopy( ) method changes image attributes, therefore, if you are storing image attributes, call the getProperties( ) method on the destination image after calling the processCopy( ) method.</p>
<p>See <a href="ap_imgproc.htm#g622034">Appendix D</a> for more information about processCopy( ) operators.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1363"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1364"></a>Exceptions</p>
<p>ORDImageExceptions.DATA_NOT_LOCAL</p>
<p>This exception is raised if you call the processCopy( ) method and the imageBlob parameter is not initialized.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about this exception.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1365"></a>Examples</p>
<p>Create a new image, changing the file format, compression format, and content format in the destination image:</p>
<pre>DECLARE
  dest_attrib      CLOB;
  image_data       BLOB;
  destination_data BLOB;
  the_Command      VARCHAR2(4000);
BEGIN
   SELECT img INTO image_data FROM timg WHERE N = 1;
   SELECT img, attributes INTO destination_data, dest_attrib FROM timg 
      WHERE N = 2 FOR UPDATE;

   the_Command := &#39;fileFormat=tiff, compressionFormat=packbits, contentFormat=8bitlut&#39;;
   ORDSYS.ORDImage.processCopy(image_data, the_Command, destination_data);
   ORDSYS.ORDImage.getProperties(destination_data, dest_attrib);
   UPDATE timg SET img = destination_data, attributes=dest_attrib WHERE N = 2;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80823" class="refsect2"><a id="CHEJHIGD"></a>
<h3 class="refsect2">putMetadata( ) for BFILEs<a id="sthref1366"></a><a id="sthref1367"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1368"></a>Format</p>
<p class="synopsis">putMetadata(imageBfile IN NOCOPY BFILE,</p>
<p class="synopsis">dest IN OUT NOCOPY BLOB</p>
<p class="synopsis">xmlData IN NOCOPY XMLType,</p>
<p class="synopsis">metadataType IN VARCHAR2 DEFAULT &#39;XMP&#39;,</p>
<p class="synopsis">encoding IN VARCHAR2 DEFAULT &#34;UTF-8&#34;);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1369"></a>Description</p>
<p>Accepts a BFILE containing an image and a schema-valid XML document, and creates a binary packet suitable for embedding in the target image file format. The packet is encoded according to the value of the encoding parameter. If the value of the metadataType parameter is <code>XMP</code>, this method writes a new XMP packet to the image, replacing any existing XMP packets. The new image file with embedded metadata is returned in the dest parameter.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1370"></a>Parameters</p>
<dl>
<dt>imageBfile</dt>
<dd>
<p>The BFILE handle to the image.</p>
</dd>
<dt>dest</dt>
<dd>
<p>The BLOB to receive the image containing the embedded metadata.</p>
</dd>
<dt>xmlData</dt>
<dd>
<p>The XMLtype that contains a schema-valid XML document for the indicated metadataType. If the value of the metadataType parameter is <code>XMP</code>, the root element should contain a well-formed RDF document.</p>
</dd>
<dt>metadataType</dt>
<dd>
<p>A string that specifies the type of metadata to write. The valid value is <code>XMP</code>; it is also the default.</p>
</dd>
<dt>encoding</dt>
<dd>
<p>The character encoding to be used in the image file. Valid values are: <code>UTF-8</code>, <code>UTF-16</code>, <code>UTF-16BE</code>, and <code>UTF-16LE</code>. The default is <code>UTF-8</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1371"></a>Usage Notes</p>
<p>The binary metadata packet generated from the same xmlData input may have different sizes for different encodings. Different image file formats support different encodings, and may restrict the binary metadata packet size. The restrictions of the supported image formats are as follows:</p>
<ul>
<li>
<p>GIF89a supports UTF-8 encoding only.</p>
</li>
<li>
<p>JPEG requires a binary packet size of less than 65502 bytes.</p>
</li>
<li>
<p>TIFF requires a binary packet size of less than 4 gigabytes.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink IMURG3500" href="../IMURG/ch_metadata.htm#IMURG3500"><span class="italic">Oracle Multimedia User&#39;s Guide</span></a> for more information about the metadata feature</p>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1372"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1373"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the image is NULL.</p>
<p>ORDImageExceptions.NULL_DESTINATION</p>
<p>This exception is raised when the destination image is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1374"></a>Examples</p>
<p>Insert a new image into the table <code>pm.print_media</code>. The new image is a copy of the image <code>keyboard.jpg</code> from the <code>MEDIA_DIR</code> directory object, with updated XMP metadata:</p>
<pre>DECLARE
  imageBfile        BFILE := BFILENAME(&#39;MEDIA_DIR&#39;,&#39;keyboard.jpg&#39;);
  dest              BLOB;
  xmlData           XMLType;
BEGIN
  SELECT ad_photo 
  INTO dest 
  FROM pm.print_media
  WHERE product_id = 3106 FOR UPDATE; 
 
  xmlData := xmltype(
          &#39;&lt;xmpMetadata xmlns=&#34;http://xmlns.oracle.com/ord/meta/xmp&#34;&gt;&#39; ||
          &#39;&lt;rdf:RDF xmlns:rdf=&#34;http://www.w3.org/1999/02/22-rdf-syntax-ns#&#34;&#39; ||
          &#39;  xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34;&gt;&#39; ||
          &#39;&lt;rdf:Description&gt;&#39; ||
          &#39;  &lt;dc:rights&gt;&#39; ||
          &#39;    &lt;rdf:Alt&gt;&#39; ||
          &#39;      &lt;rdf:li&gt;&#39; ||
          &#39;        Oracle Corporation&#39; ||
          &#39;      &lt;/rdf:li&gt;&#39; ||
          &#39;    &lt;/rdf:Alt&gt;&#39;||
          &#39;  &lt;/dc:rights&gt;&#39; ||
          &#39;&lt;/rdf:Description&gt;&#39; ||
          &#39;&lt;/rdf:RDF&gt;&#39; ||
          &#39;&lt;/xmpMetadata&gt;&#39;, &#39;http://xmlns.oracle.com/ord/meta/xmp&#39;); 
 
  ORDSYS.ORDImage.putMetadata(imageBfile, dest, xmlData, &#39;xmp&#39;, &#39;utf-8&#39;); 
 
  UPDATE pm.print_media 
  SET ad_photo = dest 
  WHERE product_id = 3106;
  COMMIT;
 
  EXCEPTION
    WHEN ORDSYS.ORDImageExceptions.NULL_CONTENT THEN
      DBMS_OUTPUT.PUT_LINE(&#39;image source is null&#39;);
    WHEN ORDSYS.ORDImageExceptions.NULL_DESTINATION THEN
      DBMS_OUTPUT.PUT_LINE(&#39;image destionation is null&#39;);
    WHEN OTHERS THEN
    RAISE;
END;/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80824" class="refsect2"><a id="CHEGIJCB"></a>
<h3 class="refsect2">putMetadata( ) for BLOBs<a id="sthref1375"></a><a id="sthref1376"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1377"></a>Format</p>
<p class="synopsis">putMetadata(imageBlob IN NOCOPY BLOB,</p>
<p class="synopsis">dest IN OUT NOCOPY BLOB</p>
<p class="synopsis">xmlData IN NOCOPY XMLType,</p>
<p class="synopsis">metadataType IN VARCHAR2 DEFAULT &#39;XMP&#39;,</p>
<p class="synopsis">encoding IN VARCHAR2 DEFAULT &#34;UTF-8&#34;);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1378"></a>Description</p>
<p>Accepts a BLOB containing an image and a schema-valid XML document, and creates a binary packet suitable for embedding in the target image file format. The packet is encoded according to the value of the encoding parameter. If the value of the metadataType parameter is <code>XMP</code>, this method writes a new XMP packet to the image, replacing any existing XMP packets. The new image file with embedded metadata is returned in the dest parameter.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1379"></a>Parameters</p>
<dl>
<dt>imageBlob</dt>
<dd>
<p>The BLOB handle to the image.</p>
</dd>
<dt>dest</dt>
<dd>
<p>The BLOB to receive the image containing the embedded metadata.</p>
</dd>
<dt>xmlData</dt>
<dd>
<p>The XMLtype that contains a schema-valid XML document for the indicated metadataType. If the value of the metadataType parameter is <code>XMP</code>, the root element should contain a well-formed RDF document.</p>
</dd>
<dt>metadataType</dt>
<dd>
<p>A string that specifies the type of metadata to write. The valid value is <code>XMP</code>; it is also the default.</p>
</dd>
<dt>encoding</dt>
<dd>
<p>The character encoding to be used in the image file. Valid values are: <code>UTF-8</code>, <code>UTF-16</code>, <code>UTF-16BE</code>, and <code>UTF-16LE</code>. The default is <code>UTF-8</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1380"></a>Usage Notes</p>
<p>Because temporary LOBs do not have read consistency, you cannot use one temporary LOB for both the imageBlob and dest parameters. The binary metadata packet generated from the same xmlData input may have different sizes for different encodings. Different image file formats support different encodings, and may restrict the binary metadata packet size. The restrictions of the supported image formats are as follows:</p>
<ul>
<li>
<p>GIF89a supports UTF-8 encoding only.</p>
</li>
<li>
<p>JPEG requires a binary packet size of less than 65502 bytes.</p>
</li>
<li>
<p>TIFF requires a binary packet size of less than 4 gigabytes.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink IMURG3500" href="../IMURG/ch_metadata.htm#IMURG3500"><span class="italic">Oracle Multimedia User&#39;s Guide</span></a> for more information about the metadata feature</p>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1381"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1382"></a>Exceptions</p>
<p>ORDImageExceptions.NULL_CONTENT</p>
<p>This exception is raised when the image is NULL.</p>
<p>ORDImageExceptions.NULL_DESTINATION</p>
<p>This exception is raised when the destination image is NULL.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1383"></a>Examples</p>
<p>Replace an image in the table <code>pm.print_media</code> with updated XMP metadata:</p>
<pre>DECLARE
  imageBlob        BLOB;
  tmp              BLOB;
  xmlData          XMLType;
  ctx              RAW(64):=NULL;
BEGIN
  SELECT ad_photo
  INTO imageBlob 
  FROM pm.print_media
  WHERE product_id = 3106 FOR UPDATE; 
 
  xmlData := xmltype(
          &#39;&lt;xmpMetadata xmlns=&#34;http://xmlns.oracle.com/ord/meta/xmp&#34;&gt;&#39; ||
          &#39;&lt;rdf:RDF xmlns:rdf=&#34;http://www.w3.org/1999/02/22-rdf-syntax-ns#&#34;&#39; ||
          &#39;  xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34;&gt;&#39; ||
          &#39;&lt;rdf:Description&gt;&#39; ||
          &#39;  &lt;dc:rights&gt;&#39; ||
          &#39;    &lt;rdf:Alt&gt;&#39; ||
          &#39;      &lt;rdf:li&gt;&#39; ||
          &#39;        Oracle Corporation&#39; ||
          &#39;      &lt;/rdf:li&gt;&#39; ||
          &#39;    &lt;/rdf:Alt&gt;&#39;||
          &#39;  &lt;/dc:rights&gt;&#39; ||
          &#39;&lt;/rdf:Description&gt;&#39; ||
          &#39;&lt;/rdf:RDF&gt;&#39; ||
          &#39;&lt;/xmpMetadata&gt;&#39;, &#39;http://xmlns.oracle.com/ord/meta/xmp&#39;); 
 
  tmp := imageBlob;
  ORDSYS.ORDImage.putMetadata(tmp, imageBlob, xmlData, &#39;xmp&#39;, &#39;utf-8&#39;); 
 
  UPDATE pm.print_media 
  SET ad_photo = imageBlob 
  WHERE product_id = 3106;
  COMMIT; 
 
  EXCEPTION
    WHEN ORDSYS.ORDImageExceptions.NULL_CONTENT THEN
      DBMS_OUTPUT.PUT_LINE(&#39;image source is null&#39;);
    WHEN ORDSYS.ORDImageExceptions.NULL_DESTINATION THEN
      DBMS_OUTPUT.PUT_LINE(&#39;image destionation is null&#39;);
    WHEN OTHERS THEN
      RAISE;
END;/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<div class="refentry"><a id="CACIGIJJ"></a>
<div id="AIVUG80825" class="refsect1">
<h2 class="refsect1">Static Methods Unique to the ORDVideo Object Type Relational Interface<a id="sthref1384"></a></h2>
<p>This section presents reference information about these Oracle Multimedia static methods, which are unique to the ORDVideo relational interface:</p>
<ul>
<li>
<p><a href="#CHEDFEGJ">getProperties( ) for BFILEs</a></p>
</li>
<li>
<p><a href="#CHEEAHFD">getProperties( ) (all attributes) for BFILEs</a></p>
</li>
<li>
<p><a href="#CHEJHCHF">getProperties( ) for BLOBs</a></p>
</li>
<li>
<p><a href="#CHEDDBGH">getProperties( ) (all attributes) for BLOBs</a></p>
</li>
</ul>
<p>The relational interface adds Oracle Multimedia support to video data stored in BLOBs and BFILEs rather than in the ORDVideo object type. The static methods that are unique to the ORDVideo relational interface are defined in the <code>ordvspec.sql</code> file.</p>
<div id="AIVUG80826" class="refsect2"><a id="CHEDFEGJ"></a>
<h3 class="refsect2">getProperties( ) for BFILEs<a id="sthref1385"></a><a id="sthref1386"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1387"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">videoBfile IN OUT NOCOPY BFILE,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">format IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1388"></a>Description</p>
<p>Reads the video BFILE data to get the values of the media attributes for supported formats, and then stores them in the input CLOB. This method populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1389"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>videoBfile</dt>
<dd>
<p>The video data represented as a BFILE.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the video BFILE data in XML form.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the video data. If a non-NULL value is specified, then the format plug-in for this format type is invoked.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1390"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1391"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1392"></a>Exceptions</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>ORDVideoExceptions.VIDEO_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the video plug-in raises an exception.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1393"></a>Examples</p>
<p>Get the property information for known video attributes:</p>
<pre>DECLARE
  vid_attrib CLOB;
  ctx RAW(64) :=NULL;
  vid_data BFILE := BFILENAME(&#39;VIDEODIR&#39;,&#39;testvid.dat&#39;);
  vid_format VARCHAR2(160) := NULL;
BEGIN
  DBMS_LOB.CREATETEMPORARY(vid_attrib, FALSE, DBMS_LOB.CALL);
  ORDSYS.ORDVideo.getProperties(ctx, vid_data, vid_attrib, vid_format);

  DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(vid_attrib)));
EXCEPTION
  WHEN OTHERS THEN
  RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80827" class="refsect2"><a id="CHEEAHFD"></a>
<h3 class="refsect2">getProperties( ) (all attributes) for BFILEs<a id="sthref1394"></a><a id="sthref1395"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1396"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">videoBfile IN OUT NOCOPY BFILE,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">mimeType OUT VARCHAR2,</p>
<p class="synopsis">format IN OUT VARCHAR2,</p>
<p class="synopsis">width OUT INTEGER,</p>
<p class="synopsis">height OUT INTEGER,</p>
<p class="synopsis">frameResolution OUT INTEGER,</p>
<p class="synopsis">frameRate OUT INTEGER,</p>
<p class="synopsis">videoDuration OUT INTEGER,</p>
<p class="synopsis">numberOfFrames OUT INTEGER,</p>
<p class="synopsis">compressionType OUT VARCHAR2,</p>
<p class="synopsis">numberOfColors OUT INTEGER,</p>
<p class="synopsis">bitRate OUT INTEGER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1397"></a>Description</p>
<p>Reads the video BFILE data to get the values of the media attributes for supported formats, and then stores them in the input CLOB and returns them as explicit parameters. This method gets the properties for these attributes of the video data: MIME type, format, frame size, frame resolution, frame rate, video duration, number of frames, compression type, number of colors, and bit rate. It populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1398"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>videoBfile</dt>
<dd>
<p>The video data represented as a BFILE.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the video BFILE data in XML form.</p>
</dd>
<dt>mimeType</dt>
<dd>
<p>The MIME type of the video data.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the video data. If a non-NULL value is specified, then the format plug-in for this format type is invoked. If specified as <code>NULL</code>, the format of the video data is returned.</p>
</dd>
<dt>width</dt>
<dd>
<p>The width of the frame in pixels of the video data.</p>
</dd>
<dt>height</dt>
<dd>
<p>The height of the frame in pixels of the video data.</p>
</dd>
<dt>frameResolution</dt>
<dd>
<p>The number of pixels per inch of frames in the video data.</p>
</dd>
<dt>frameRate</dt>
<dd>
<p>The number of frames per second at which the video data was recorded.</p>
</dd>
<dt>videoDuration</dt>
<dd>
<p>The total time required to play the video data.</p>
</dd>
<dt>numberOfFrames</dt>
<dd>
<p>The total number of frames in the video data.</p>
</dd>
<dt>compressionType</dt>
<dd>
<p>The compression type of the video data.</p>
</dd>
<dt>numberOfColors</dt>
<dd>
<p>The number of colors in the video data.</p>
</dd>
<dt>bitRate</dt>
<dd>
<p>The bit rate in the video data.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1399"></a>Usage Notes</p>
<p>If a property cannot be extracted from the media source, then the respective parameter is set to NULL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1400"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1401"></a>Exceptions</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>ORDVideoExceptions.VIDEO_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the video plug-in raises an exception.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1402"></a>Examples</p>
<p>Get the property information for known video attributes:</p>
<pre>DECLARE
  vid_attrib        CLOB;
  ctx               RAW(64) :=NULL;
  vid_data          BFILE := BFILENAME(&#39;VIDEODIR&#39;,&#39;testvid.dat&#39;);
  mimeType          VARCHAR2(80);
  format            VARCHAR2(32) := NULL;
  width             NUMBER;
  height            NUMBER;
  frameResolution   NUMBER;
  frameRate         NUMBER;
  videoDuration     NUMBER;
  numberOfFrames    NUMBER;
  compressionType   VARCHAR2(160);
  numberOfColors    NUMBER;
  bitRate           NUMBER;
BEGIN
  DBMS_LOB.CREATETEMPORARY(vid_attrib, FALSE, DBMS_LOB.CALL);

  ORDSYS.ORDVideo.getProperties(ctx, vid_data, vid_attrib, mimeType, format, 
          width, height, frameResolution, frameRate,
          videoDuration, numberOfFrames, compressionType, numberOfColors, bitRate);

  DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(vid_attrib)));
  DBMS_OUTPUT.put_line(&#39;mimeType: &#39; || mimeType );
  DBMS_OUTPUT.put_line(&#39;format: &#39; || format );
  DBMS_OUTPUT.put_line(&#39;width: &#39; || width );
  DBMS_OUTPUT.put_line(&#39;height: &#39; || height );
  DBMS_OUTPUT.put_line(&#39;frameResolution: &#39; || frameResolution );
  DBMS_OUTPUT.put_line(&#39;frameRate: &#39; || frameRate );
  DBMS_OUTPUT.put_line(&#39;videoDuration: &#39; || videoDuration );
  DBMS_OUTPUT.put_line(&#39;numberOfFrames: &#39; || numberOfFrames );
  DBMS_OUTPUT.put_line(&#39;compressionType: &#39; || compressionType );
  DBMS_OUTPUT.put_line(&#39;numberOfColors: &#39; || numberOfColors );
  DBMS_OUTPUT.put_line(&#39;bitRate: &#39; || bitRate );
EXCEPTION
  WHEN OTHERS THEN
  RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80828" class="refsect2"><a id="CHEJHCHF"></a>
<h3 class="refsect2">getProperties( ) for BLOBs<a id="sthref1403"></a><a id="sthref1404"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1405"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">videoBlob IN BLOB,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">format IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1406"></a>Description</p>
<p>Reads the video BLOB data to get the values of the media attributes for supported formats, and then stores them in the input CLOB. This method populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1407"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>videoBlob</dt>
<dd>
<p>The video data represented as a BLOB.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the video BLOB data in XML form.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the video data. If a non-NULL value is specified, then the format plug-in for this format type is invoked.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1408"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1409"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1410"></a>Exceptions</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>ORDVideoExceptions.VIDEO_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the video plug-in raises an exception.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1411"></a>Examples</p>
<p>Get the property information for known video attributes:</p>
<pre>DECLARE
  vid_attrib CLOB;
  ctx RAW(64) :=NULL;
  vid_data BLOB;
  vid_format VARCHAR2(31) := NULL;
BEGIN
  SELECT vid, attributes INTO vid_data, vid_attrib FROM tvid WHERE N = 1 FOR UPDATE;
  ORDSYS.ORDVideo.getProperties(ctx, vid_data, vid_attrib, vid_format);

  DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(vid_attrib)));
  UPDATE tvid SET vid=vid_data, attributes=vid_attrib WHERE N=1;
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
  RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="AIVUG80829" class="refsect2"><a id="CHEDDBGH"></a>
<h3 class="refsect2">getProperties( ) (all attributes) for BLOBs<a id="sthref1412"></a><a id="sthref1413"></a></h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1414"></a>Format</p>
<p class="synopsis">getProperties(ctx IN OUT RAW,</p>
<p class="synopsis">videoBlob IN BLOB,</p>
<p class="synopsis">attributes IN OUT NOCOPY CLOB,</p>
<p class="synopsis">mimeType OUT VARCHAR2,</p>
<p class="synopsis">format IN OUT VARCHAR2</p>
<p class="synopsis">width OUT INTEGER,</p>
<p class="synopsis">height OUT INTEGER,</p>
<p class="synopsis">frameResolution OUT INTEGER,</p>
<p class="synopsis">frameRate OUT INTEGER,</p>
<p class="synopsis">videoDuration OUT INTEGER,</p>
<p class="synopsis">numberOfFrames OUT INTEGER,</p>
<p class="synopsis">compressionType OUT VARCHAR2,</p>
<p class="synopsis">numberOfColors OUT INTEGER,</p>
<p class="synopsis">bitRate OUT INTEGER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1415"></a>Description</p>
<p>Reads the video BLOB data to get the values of the media attributes for supported formats, and then stores them in the input CLOB and returns them as explicit parameters. This method gets the properties for these attributes of the video data: MIME type, format, frame size, frame resolution, frame rate, video duration, number of frames, compression type, number of colors, and bit rate. It populates the CLOB with an extensive set of format and application properties in XML form.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1416"></a>Parameters</p>
<dl>
<dt>ctx</dt>
<dd>
<p>The format plug-in context information. (See <a href="#CACGHGFC">Section 7.3</a>.)</p>
</dd>
<dt>videoBlob</dt>
<dd>
<p>The video data represented as a BLOB.</p>
</dd>
<dt>attributes</dt>
<dd>
<p>The CLOB to hold the XML attribute information generated by the getProperties( ) method. This CLOB is populated with an extensive set of format and application properties of the video BLOB data in XML form.</p>
</dd>
<dt>mimeType</dt>
<dd>
<p>The MIME type of the video data.</p>
</dd>
<dt>format</dt>
<dd>
<p>The format of the video data. If a non-NULL value is specified, then the format plug-in for this format type is invoked. If specified as <code>NULL</code>, the format of the video data is returned.</p>
</dd>
<dt>width</dt>
<dd>
<p>The width of the frame in pixels of the video data.</p>
</dd>
<dt>height</dt>
<dd>
<p>The height of the frame in pixels of the video data.</p>
</dd>
<dt>frameResolution</dt>
<dd>
<p>The number of pixels per inch of frames in the video data.</p>
</dd>
<dt>frameRate</dt>
<dd>
<p>The number of frames per second at which the video data was recorded.</p>
</dd>
<dt>videoDuration</dt>
<dd>
<p>The total time required to play the video data.</p>
</dd>
<dt>numberOfFrames</dt>
<dd>
<p>The total number of frames in the video data.</p>
</dd>
<dt>compressionType</dt>
<dd>
<p>The compression type of the video data.</p>
</dd>
<dt>numberOfColors</dt>
<dd>
<p>The number of colors in the video data.</p>
</dd>
<dt>bitRate</dt>
<dd>
<p>The bit rate in the video data.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1417"></a>Usage Notes</p>
<p>If a property cannot be extracted from the media source, then the respective parameter is set to NULL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1418"></a>Pragmas</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1419"></a>Exceptions</p>
<p>ORDSourceExceptions.EMPTY_SOURCE</p>
<p>This exception is raised when the value of the source.local attribute is <code>1</code> or <code>0</code> (TRUE), but the value of the source.localData attribute is <code>NULL</code>.</p>
<p>ORDVideoExceptions.VIDEO_PLUGIN_EXCEPTION</p>
<p>This exception is raised if you call the getProperties( ) method and the video plug-in raises an exception.</p>
<p>See <a href="ap_excpts.htm#g630514">Appendix G</a> for more information about these exceptions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1420"></a>Examples</p>
<p>Get the property information for known video attributes:</p>
<pre>DECLARE
  vid_attrib        CLOB;
  ctx               RAW(64) :=NULL;
  vid_data          BLOB;
  mimeType          VARCHAR2(80);
  format            VARCHAR2(32);
  width             NUMBER;
  height            NUMBER;
  frameResolution   NUMBER;
  frameRate         NUMBER;
  videoDuration     NUMBER;
  numberOfFrames    NUMBER;
  compressionType   VARCHAR2(160);
  numberOfColors    NUMBER;
  bitRate           NUMBER;
BEGIN
  SELECT vid, attributes, mimetype, format, width, height, frameresolution, framerate,
         videoduration, numberofframes, compressiontype, numberofcolors, bitrate INTO
         vid_data, vid_attrib, mimeType, format, width, height, frameResolution,
         frameRate, videoDuration, numberOfFrames, compressionType, numberOfColors,
         bitRate FROM tvid WHERE N = 1 FOR UPDATE;

  ORDSYS.ORDVideo.getProperties(ctx, vid_data, vid_attrib, mimeType, format, 
          width, height, frameResolution, frameRate,
          videoDuration, numberOfFrames, compressionType, numberOfColors, bitRate);

  DBMS_OUTPUT.put_line(&#39;Size of XML Annotations &#39; ||
                   TO_CHAR(DBMS_LOB.GETLENGTH(vid_attrib)));
  DBMS_OUTPUT.put_line(&#39;mimeType: &#39; || mimeType );
  DBMS_OUTPUT.put_line(&#39;format: &#39; || format );
  DBMS_OUTPUT.put_line(&#39;width: &#39; || width );
  DBMS_OUTPUT.put_line(&#39;height: &#39; || height );
  DBMS_OUTPUT.put_line(&#39;frameResolution: &#39; || frameResolution );
  DBMS_OUTPUT.put_line(&#39;frameRate: &#39; || frameRate );
  DBMS_OUTPUT.put_line(&#39;videoDuration: &#39; || videoDuration );
  DBMS_OUTPUT.put_line(&#39;numberOfFrames: &#39; || numberOfFrames );
  DBMS_OUTPUT.put_line(&#39;compressionType: &#39; || compressionType );
  DBMS_OUTPUT.put_line(&#39;numberOfColors: &#39; || numberOfColors );
  DBMS_OUTPUT.put_line(&#39;bitRate: &#39; || bitRate );
  UPDATE tvid SET 
        vid=vid_data, 
        attributes=vid_attrib, 
        mimetype=mimeType, 
        format=format, 
        width=width, 
        height=height, 
        frameresolution=frameResolution, 
        framerate=frameRate, 
        videoduration=videoDuration, 
        numberofframes=numberOfFrames, 
        compressiontype=compressionType, 
        numberofcolors=numberOfColors, 
        bitrate=bitRate 
     WHERE N=1;
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
  RAISE;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1451">
<tr>
<td class="cellalignment1460">
<table class="cellalignment1456">
<tr>
<td class="cellalignment1455"><a href="ch_vidref.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1455"><a href="ch_sourcref.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1462">
<table class="cellalignment1454">
<tr>
<td class="cellalignment1455"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1455"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1455"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1455"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1455"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1455"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>