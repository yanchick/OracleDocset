<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-73910"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Blob%20Class"></a><title>Blob Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1082"/>
<meta name="dcterms.created" content="2016-06-01T12:8:11Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="C++ Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E48221-07"/>
<meta name="dcterms.isVersionOf" content="LNCPP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="reference006.htm" title="Previous" type="text/html"/>
<link rel="Next" href="reference008.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48221-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">27/54</span> <!-- End Header --><a id="i1119032"></a>
<div id="LNCPP1004" class="refsect1">
<h1 class="refsect1">Blob Cl<a id="sthref713"></a><a id="sthref714"></a>a<a id="sthref715"></a>ss</h1>
<p>The <code dir="ltr">Blob</code> class defines the common properties of objects of type <code dir="ltr">BLOB</code>. A <code dir="ltr">BLOB</code> is a large binary object stored as a column value in a row of a database table. A <code dir="ltr">Blob</code> object contains a logical pointer to a <code dir="ltr">BLOB</code>, not the <code dir="ltr">BLOB</code> itself.</p>
<p>Methods of the <code dir="ltr">Blob</code> class enable you to perform specific tasks related to <code dir="ltr">Blob</code> objects.</p>
<p>Methods of the <code dir="ltr">ResultSet</code> and <code dir="ltr">Statement</code> classes, such as <code dir="ltr">getBlob()</code> and <code dir="ltr">setBlob()</code>, enable you to access an SQL <code dir="ltr">BLOB</code> value.</p>
<p>The only methods valid on a <code dir="ltr">NULL</code> <code dir="ltr">Blob</code> object are <a href="reference006.htm#i1078439">setName()</a>, <a href="reference006.htm#i1078396">isNull()</a>, and <a href="reference006.htm#i1091091">operator=()</a>.</p>
<p>An uninitialized <code dir="ltr">Blob</code> object can be initialized by:</p>
<ul>
<li>
<p>The <a href="#i1078908">setEmpty()</a> method. The <code dir="ltr">BLOB</code> can then be modified by inserting this <code dir="ltr">BLOB</code> into the table and then retrieving it using <code dir="ltr">SELECT...FOR&nbsp;UPDATE</code>. The <a href="#i1078928">write()</a> method modifies the <code dir="ltr">BLOB</code>; however, the modified data is flushed to the table only when the transaction is committed. Note that an update is not required.</p>
</li>
<li>
<p>Assigning an initialized <code dir="ltr">Blob</code> object to it.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>In-depth discussion of LOBs in <a class="olink ADLOB001" href="../ADLOB/adlob_intro.htm#ADLOB001"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
<div id="LNCPP20640" class="tblformal">
<p class="titleintable"><a id="sthref716"></a><a id="BBAIABGF"></a>Table 13-8 Summary of <a id="sthref717"></a><a id="sthref718"></a>Blob Methods</p>
<table class="cellalignment2203" title="Summary of Blob Methods" summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t44">Method</th>
<th class="cellalignment2204" id="r1c2-t44">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t44" headers="r1c1-t44">
<p><a href="#i1148823">Blob()</a></p>
</td>
<td class="cellalignment2205" headers="r2c1-t44 r1c2-t44">
<p><code dir="ltr">Blob</code> class constructor.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t44" headers="r1c1-t44">
<p><a href="#i1078780">append()</a></p>
</td>
<td class="cellalignment2205" headers="r3c1-t44 r1c2-t44">
<p>Appends a specified <code dir="ltr">BLOB</code> to the end of the current <code dir="ltr">BLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t44" headers="r1c1-t44">
<p><a href="#i1078789">close()</a></p>
</td>
<td class="cellalignment2205" headers="r4c1-t44 r1c2-t44">
<p>Closes a previously opened <code dir="ltr">BLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t44" headers="r1c1-t44">
<p><a href="#i1078795">closeStream()</a></p>
</td>
<td class="cellalignment2205" headers="r5c1-t44 r1c2-t44">
<p>Closes the <code dir="ltr">Stream</code> object obtained from the <code dir="ltr">BLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t44" headers="r1c1-t44">
<p><a href="#i1096202">copy()</a></p>
</td>
<td class="cellalignment2205" headers="r6c1-t44 r1c2-t44">
<p>Copies a specified portion of a <code dir="ltr">BFILE</code> or <code dir="ltr">BLOB</code> into the current <code dir="ltr">BLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t44" headers="r1c1-t44">
<p><a href="#i1078835">getChunkSize()</a></p>
</td>
<td class="cellalignment2205" headers="r7c1-t44 r1c2-t44">
<p>Returns the smallest data size to perform efficient writes to the <code dir="ltr">BLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t44" headers="r1c1-t44">
<p><a href="#BBAEGGAF">getContentType()</a></p>
</td>
<td class="cellalignment2205" headers="r8c1-t44 r1c2-t44">
<p>Returns the content type of the <code dir="ltr">Blob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t44" headers="r1c1-t44">
<p><a href="#BBAHDFFA">getOptions()</a></p>
</td>
<td class="cellalignment2205" headers="r9c1-t44 r1c2-t44">
<p>Returns the <code dir="ltr">BLOB</code>&#39;s <code dir="ltr">LobOptionValue</code> for a specified <code dir="ltr">LobOptionType</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t44" headers="r1c1-t44">
<p><a href="#i1078841">getStream()</a></p>
</td>
<td class="cellalignment2205" headers="r10c1-t44 r1c2-t44">
<p>Returns data from the <code dir="ltr">BLOB</code> as a <code dir="ltr">Stream</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t44" headers="r1c1-t44">
<p><a href="#i1132151">isInitialized()</a></p>
</td>
<td class="cellalignment2205" headers="r11c1-t44 r1c2-t44">
<p>Tests whether the <code dir="ltr">Blob</code> object is initialized</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t44" headers="r1c1-t44">
<p><a href="#i1132166">isNull()</a></p>
</td>
<td class="cellalignment2205" headers="r12c1-t44 r1c2-t44">
<p>Tests whether the <code dir="ltr">Blob</code> object is atomically <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t44" headers="r1c1-t44">
<p><a href="#i1078871">isOpen()</a></p>
</td>
<td class="cellalignment2205" headers="r13c1-t44 r1c2-t44">
<p>Tests whether the <code dir="ltr">BLOB</code> is open.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t44" headers="r1c1-t44">
<p><a href="#i1078877">length()</a></p>
</td>
<td class="cellalignment2205" headers="r14c1-t44 r1c2-t44">
<p>Returns the number of bytes in the <code dir="ltr">BLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t44" headers="r1c1-t44">
<p><a href="#i1078883">open()</a></p>
</td>
<td class="cellalignment2205" headers="r15c1-t44 r1c2-t44">
<p>Opens the <code dir="ltr">BLOB</code> <code dir="ltr">with read or</code> read/write access.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t44" headers="r1c1-t44">
<p><a href="#i1091119">operator=()</a></p>
</td>
<td class="cellalignment2205" headers="r16c1-t44 r1c2-t44">
<p>Assigns a <code dir="ltr">BLOB</code> locator to the <code dir="ltr">Blob</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t44" headers="r1c1-t44">
<p><a href="#i1088881">operator==()</a></p>
</td>
<td class="cellalignment2205" headers="r17c1-t44 r1c2-t44">
<p>Tests whether two <code dir="ltr">Blob</code> objects are equal.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t44" headers="r1c1-t44">
<p><a href="#i1088889">operator!= ()</a></p>
</td>
<td class="cellalignment2205" headers="r18c1-t44 r1c2-t44">
<p>Tests whether two <code dir="ltr">Blob</code> objects are not equal.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t44" headers="r1c1-t44">
<p><a href="#i1132180">read()</a></p>
</td>
<td class="cellalignment2205" headers="r19c1-t44 r1c2-t44">
<p>Reads a portion of the <code dir="ltr">BLOB</code> into a buffer.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t44" headers="r1c1-t44">
<p><a href="#BBACHJFJ">setContentType()</a></p>
</td>
<td class="cellalignment2205" headers="r20c1-t44 r1c2-t44">
<p>Sets the content type of the <code dir="ltr">Blob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t44" headers="r1c1-t44">
<p><a href="#i1078908">setEmpty()</a></p>
</td>
<td class="cellalignment2205" headers="r21c1-t44 r1c2-t44">
<p>Sets the <code dir="ltr">Blob</code> object to empty.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t44" headers="r1c1-t44">
<p><a href="#i1078914">setNull()</a></p>
</td>
<td class="cellalignment2205" headers="r22c1-t44 r1c2-t44">
<p>Sets the <code dir="ltr">Blob</code> object to atomically <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r23c1-t44" headers="r1c1-t44">
<p><a href="#BBACCGGD">setOptions()</a></p>
</td>
<td class="cellalignment2205" headers="r23c1-t44 r1c2-t44">
<p>Specifies a <code dir="ltr">LobOptionValue</code> for a particular <code dir="ltr">LobOptionType</code>. Enables advanced compression, encryption and deduplication of <code dir="ltr">BLOB</code>s.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r24c1-t44" headers="r1c1-t44">
<p><a href="#i1078920">trim()</a></p>
</td>
<td class="cellalignment2205" headers="r24c1-t44 r1c2-t44">
<p>Truncates the <code dir="ltr">BLOB</code> to a specified length.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r25c1-t44" headers="r1c1-t44">
<p><a href="#i1078928">write()</a></p>
</td>
<td class="cellalignment2205" headers="r25c1-t44 r1c2-t44">
<p>Writes a buffer into an <span class="italic">unopened</span> <code dir="ltr">BLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r26c1-t44" headers="r1c1-t44">
<p><a href="#i1078943">writeChunk()</a></p>
</td>
<td class="cellalignment2205" headers="r26c1-t44 r1c2-t44">
<p>Writes a buffer into an <span class="italic">open</span> <code dir="ltr">BLOB</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP20641" class="refsect2"><a id="i1148823"></a>
<h2 class="refsect2">Blob()</h2>
<p><code dir="ltr">Blob</code> class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of Blob() constructor" summary="First column lists constructor versions; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t45">Syntax</th>
<th class="cellalignment2204" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t45" headers="r1c1-t45">
<pre dir="ltr">Blob();
</pre></td>
<td class="cellalignment2205" headers="r2c1-t45 r1c2-t45">Creates a <code dir="ltr">NULL</code> <code dir="ltr">Blob</code> object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t45" headers="r1c1-t45">
<pre dir="ltr">Blob(
   const Connection *connectionp);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t45 r1c2-t45">Creates an uninitialized <code dir="ltr">Blob</code> object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t45" headers="r1c1-t45">
<pre dir="ltr">Blob(
   const Blob &amp;srcBlob);
</pre></td>
<td class="cellalignment2205" headers="r4c1-t45 r1c2-t45">Creates a copy of a <code dir="ltr">Blob</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of Blob() constructor" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t46">Parameter</th>
<th class="cellalignment2204" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t46" headers="r1c1-t46">
<pre dir="ltr">connectionp
</pre></td>
<td class="cellalignment2205" headers="r2c1-t46 r1c2-t46">The connection pointer</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t46" headers="r1c1-t46">
<pre dir="ltr">srcBlob
</pre></td>
<td class="cellalignment2205" headers="r3c1-t46 r1c2-t46">The source <code dir="ltr">Blob</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20642" class="refsect2"><a id="i1078780"></a>
<h2 class="refsect2">append()</h2>
<p>Appends a <code dir="ltr">BLOB</code> to the end of the current <code dir="ltr">BLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20643"></a>Syntax</p>
<pre dir="ltr">void append(
   const Blob &amp;srcBlob);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of append() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t47">Parameter</th>
<th class="cellalignment2204" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t47" headers="r1c1-t47">
<pre dir="ltr">srcBlob
</pre></td>
<td class="cellalignment2205" headers="r2c1-t47 r1c2-t47">The <code dir="ltr">BLOB</code> object to be appended to the current <code dir="ltr">BLOB</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20644" class="refsect2"><a id="i1078789"></a>
<h2 class="refsect2">close()</h2>
<p>Closes a <code dir="ltr">BLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20645"></a>Syntax</p>
<pre dir="ltr">void close();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20646" class="refsect2"><a id="i1078795"></a>
<h2 class="refsect2">closeStream()</h2>
<p>Closes the Stream object obtained from the <code dir="ltr">BLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20647"></a>Syntax</p>
<pre dir="ltr">void closeStream(
   Stream *stream);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of closeStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t48">Parameter</th>
<th class="cellalignment2204" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t48" headers="r1c1-t48">
<pre dir="ltr">stream
</pre></td>
<td class="cellalignment2205" headers="r2c1-t48 r1c2-t48">The <code dir="ltr">Stream</code> to be closed.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20648" class="refsect2"><a id="i1096202"></a>
<h2 class="refsect2">copy()</h2>
<p>Copies a part or all of a <code dir="ltr">BFILE</code> or <code dir="ltr">BLOB</code> into the current <code dir="ltr">BLOB</code>.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of copy() method" summary="First column lists method versions; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t49">Syntax</th>
<th class="cellalignment2204" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t49" headers="r1c1-t49">
<pre dir="ltr">void copy(
   const Bfile &amp;srcBfile,
   unsigned int numBytes,
   unsigned int dstOffset = 1,
   unsigned int srcOffset = 1);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t49 r1c2-t49">Copies a part of a <code dir="ltr">BFILE</code> into the current <code dir="ltr">BLOB</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t49" headers="r1c1-t49">
<pre dir="ltr">void copy(
   const Blob &amp;srcBlob,
   unsigned int numBytes,
   unsigned int dstOffset = 1,
   unsigned int srcOffset = 1);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t49 r1c2-t49">Copies a part of a <code dir="ltr">BLOB</code> into the current <code dir="ltr">BLOB</code>.
<p>If the destination <code dir="ltr">BLOB</code> has deduplication enabled, and the source and destination <code dir="ltr">BLOB</code>s are in the same column, the new <code dir="ltr">BLOB</code> is created as copy-on-write. All other settings are inherited from the source <code dir="ltr">BLOB</code>. If the destination <code dir="ltr">BLOB</code> has deduplication disabled, it is a completely new copy of the <code dir="ltr">BLOB</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of copy() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t50">Parameter</th>
<th class="cellalignment2204" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t50" headers="r1c1-t50">
<pre dir="ltr">srcBfile
</pre></td>
<td class="cellalignment2205" headers="r2c1-t50 r1c2-t50">The <code dir="ltr">BFILE</code> from which the data is to be copied.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t50" headers="r1c1-t50">
<pre dir="ltr">srcBlob
</pre></td>
<td class="cellalignment2205" headers="r3c1-t50 r1c2-t50">The <code dir="ltr">BLOB</code> from which the data is to be copied.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t50" headers="r1c1-t50">
<pre dir="ltr">numBytes
</pre></td>
<td class="cellalignment2205" headers="r4c1-t50 r1c2-t50">The number of bytes to be copied from the source <code dir="ltr">BFILE</code> or <code dir="ltr">BLOB</code>. Valid values are numbers greater than 0.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t50" headers="r1c1-t50">
<pre dir="ltr">dstOffset
</pre></td>
<td class="cellalignment2205" headers="r5c1-t50 r1c2-t50">The starting position at which to begin writing data into the current <code dir="ltr">BLOB</code>. Valid values are numbers greater than or equal to 1.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t50" headers="r1c1-t50">
<pre dir="ltr">srcOffset
</pre></td>
<td class="cellalignment2205" headers="r6c1-t50 r1c2-t50">The starting position at which to begin reading data from the source <code dir="ltr">BFILE</code> or <code dir="ltr">BLOB</code>. Valid values are numbers greater than or equal to 1.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20649" class="refsect2"><a id="i1078835"></a>
<h2 class="refsect2">getChunkSize()</h2>
<p>Returns the smallest data size to perform efficient writes to the <code dir="ltr">BLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20650"></a>Syntax</p>
<pre dir="ltr">unsigned int getChunkSize() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20651" class="refsect2"><a id="BBAEGGAF"></a>
<h2 class="refsect2">getContentType()</h2>
<p>Returns the content type of the <code dir="ltr">Blob</code>. If a content type has not been assigned, returns a <code dir="ltr">NULL</code> string.</p>
<p class="subhead1"><a id="LNCPP20652"></a>Syntax</p>
<pre dir="ltr">string getContentType();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20653" class="refsect2"><a id="BBAHDFFA"></a>
<h2 class="refsect2">getOptions()</h2>
<p>Returns the <code dir="ltr">BLOB</code>&#39;s <code dir="ltr">LobOptionValue</code> for a specified <code dir="ltr">LobOptionType</code>.</p>
<p>Throws an exception if attempting to retrieve a value for an option that is not configured on the database column or partition that stores the <code dir="ltr">BLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20654"></a>Syntax</p>
<pre dir="ltr">LobOptionValue getOptions(
   LobOptionType optType);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getOptions() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t51">Parameter</th>
<th class="cellalignment2204" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t51" headers="r1c1-t51">
<pre dir="ltr">optType
</pre></td>
<td class="cellalignment2205" headers="r2c1-t51 r1c2-t51">The <code dir="ltr">LobOptionType</code> setting requested. These may be combined using bitwise <code dir="ltr">or</code> (<code dir="ltr">|</code>) to avoid server round trips. See <a href="lobs.htm#BABGICGB">Table 7-1, &#34;Values of Type LobOptionType&#34;</a> and <a href="lobs.htm#BABEHGAJ">Table 7-2, &#34;Values of Type LobOptionValue&#34;</a></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20655" class="refsect2"><a id="i1078841"></a>
<h2 class="refsect2">getStream()</h2>
<p>Returns a <code dir="ltr">Stream</code> object from the <code dir="ltr">BLOB</code>. If a stream is open, it is disallowed to open another stream on <code dir="ltr">Blob object</code>, so the user must always close the stream before performing any <code dir="ltr">Blob</code> object operations.</p>
<p class="subhead1"><a id="LNCPP20656"></a>Syntax</p>
<pre dir="ltr">Stream* getStream(
   unsigned int offset = 1,
   unsigned int amount = 0);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t52">Parameter</th>
<th class="cellalignment2204" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t52" headers="r1c1-t52">
<pre dir="ltr">offset
</pre></td>
<td class="cellalignment2205" headers="r2c1-t52 r1c2-t52">The starting position at which to begin reading data from the <code dir="ltr">BLOB</code>. If <code dir="ltr">offset</code> is not specified, the data is written from the beginning of the <code dir="ltr">BLOB</code>. Valid values are numbers greater than or equal to <code dir="ltr">1</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t52" headers="r1c1-t52">
<pre dir="ltr">amount
</pre></td>
<td class="cellalignment2205" headers="r3c1-t52 r1c2-t52">The total number of bytes to be read from the <code dir="ltr">BLOB</code>; if <code dir="ltr">amount</code> is <code dir="ltr">0</code>, the data is read in a streamed mode from input <code dir="ltr">offset</code> until the end of the <code dir="ltr">BLOB</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20657" class="refsect2"><a id="i1132151"></a>
<h2 class="refsect2">isInitialized()</h2>
<p>Tests whether the <code dir="ltr">Blob</code> object is initialized. If the <code dir="ltr">Blob</code> object is initialized, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20658"></a>Syntax</p>
<pre dir="ltr">bool isInitialized() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20659" class="refsect2"><a id="i1132166"></a>
<h2 class="refsect2">isNull()</h2>
<p>Tests whether the <code dir="ltr">Blob</code> object is atomically <code dir="ltr">NULL</code>. If the <code dir="ltr">Blob</code> object is atomically <code dir="ltr">NULL</code>, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20660"></a>Syntax</p>
<pre dir="ltr">bool isNull() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20661" class="refsect2"><a id="i1078871"></a>
<h2 class="refsect2">isOpen()</h2>
<p>Tests whether the <code dir="ltr">BLOB</code> is open. If the <code dir="ltr">BLOB</code> is open, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20662"></a>Syntax</p>
<pre dir="ltr">bool isOpen() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20663" class="refsect2"><a id="i1078877"></a>
<h2 class="refsect2">length()</h2>
<p>Returns the number of bytes in the <code dir="ltr">BLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20664"></a>Syntax</p>
<pre dir="ltr">unsigned int length() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20665" class="refsect2"><a id="i1078883"></a>
<h2 class="refsect2">open()</h2>
<p>Opens the <code dir="ltr">BLOB</code> in read/write or read-only mode.</p>
<p class="subhead1"><a id="LNCPP20666"></a>Syntax</p>
<pre dir="ltr">void open(
   LobOpenMode mode = OCCI_LOB_READWRITE);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of open() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t53">Parameter</th>
<th class="cellalignment2204" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t53" headers="r1c1-t53">
<pre dir="ltr">mode
</pre></td>
<td class="cellalignment2205" headers="r2c1-t53 r1c2-t53">The mode the <code dir="ltr">BLOB</code> is to be opened in. Valid values are:
<ul>
<li>
<p><code dir="ltr">OCCI_LOB_READWRITE</code></p>
</li>
<li>
<p><code dir="ltr">OCCI_LOB_READONLY</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20667" class="refsect2"><a id="i1091119"></a>
<h2 class="refsect2">operator=()</h2>
<p>Assigns a <code dir="ltr">BLOB</code> to the current <code dir="ltr">BLOB</code>. The source <code dir="ltr">BLOB</code> gets copied to the destination <code dir="ltr">BLOB</code> only when the destination <code dir="ltr">BLOB</code> gets stored in the table.</p>
<p class="subhead1"><a id="LNCPP20668"></a>Syntax</p>
<pre dir="ltr">Blob&amp; operator=(
   const Blob &amp;srcBlob);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t54">Parameter</th>
<th class="cellalignment2204" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t54" headers="r1c1-t54">
<pre dir="ltr">srcBlob
</pre></td>
<td class="cellalignment2205" headers="r2c1-t54 r1c2-t54">The source <code dir="ltr">BLOB</code> from which to copy data.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20669" class="refsect2"><a id="i1088881"></a>
<h2 class="refsect2">operator==()</h2>
<p>Compares two <code dir="ltr">Blob objects</code> for equality. Two <code dir="ltr">Blob objects</code> are equal if they both refer to the same <code dir="ltr">BLOB</code>. Two <code dir="ltr">NULL</code> <code dir="ltr">Blob objects</code> are not considered equal. If the <code dir="ltr">Blob</code> objects are equal, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20670"></a>Syntax</p>
<pre dir="ltr">bool operator==(
   const Blob &amp;srcBlob) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator==() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t55">Parameter</th>
<th class="cellalignment2204" id="r1c2-t55">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t55" headers="r1c1-t55">
<pre dir="ltr">srcBlob
</pre></td>
<td class="cellalignment2205" headers="r2c1-t55 r1c2-t55">The source <code dir="ltr">BLOB</code> to be compared with the current <code dir="ltr">BLOB</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20671" class="refsect2"><a id="i1088889"></a>
<h2 class="refsect2">operator!= ()</h2>
<p>Compares two <code dir="ltr">Blob objects</code> for inequality. Two <code dir="ltr">Blob objects</code> are equal if they both refer to the same <code dir="ltr">BLOB</code>. Two <code dir="ltr">NULL</code> <code dir="ltr">Blob</code> objects are not considered equal. If the <code dir="ltr">Blob</code> objects are not equal, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20672"></a>Syntax</p>
<pre dir="ltr">bool operator!=(
   const Blob &amp;srcBlob) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator!=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t56">Parameter</th>
<th class="cellalignment2204" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t56" headers="r1c1-t56">
<pre dir="ltr">srcBlob
</pre></td>
<td class="cellalignment2205" headers="r2c1-t56 r1c2-t56">The source <code dir="ltr">BLOB</code> to be compared with the current <code dir="ltr">BLOB</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20673" class="refsect2"><a id="i1132180"></a>
<h2 class="refsect2">read()</h2>
<p>Reads a part or all of the <code dir="ltr">BLOB</code> into a buffer. The actual number of bytes read is returned.</p>
<p class="subhead1"><a id="LNCPP20674"></a>Syntax</p>
<pre dir="ltr">unsigned int read(
   unsigned int amt,
   unsigned char *buffer,
   unsigned int bufsize,
   unsigned int offset = 1) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of read() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t57">Parameter</th>
<th class="cellalignment2204" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t57" headers="r1c1-t57">
<pre dir="ltr">amt
</pre></td>
<td class="cellalignment2205" headers="r2c1-t57 r1c2-t57">The number of bytes to be read. Valid values are numbers greater than or equal to <code dir="ltr">1</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t57" headers="r1c1-t57">
<pre dir="ltr">buffer
</pre></td>
<td class="cellalignment2205" headers="r3c1-t57 r1c2-t57">The buffer that the <code dir="ltr">BLOB</code> data is to be read into. Valid values are numbers greater than or equal to <code dir="ltr">amt</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t57" headers="r1c1-t57">
<pre dir="ltr">buffsize
</pre></td>
<td class="cellalignment2205" headers="r4c1-t57 r1c2-t57">The size of the buffer that the <code dir="ltr">BLOB</code> data is to be read into. Valid values are numbers greater than or equal to <code dir="ltr">amt</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t57" headers="r1c1-t57">
<pre dir="ltr">offset
</pre></td>
<td class="cellalignment2205" headers="r5c1-t57 r1c2-t57">The starting position at which to begin reading data from the <code dir="ltr">BLOB</code>. If <code dir="ltr">offset</code> is not specified, the data is written from the beginning of the <code dir="ltr">BLOB</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20675" class="refsect2"><a id="BBACHJFJ"></a>
<h2 class="refsect2">setContentType()</h2>
<p>Sets the content type of the <code dir="ltr">Blob</code>. If the <code dir="ltr">Blob</code> is not a SecureFile, throws an exception.</p>
<p class="subhead1"><a id="LNCPP20676"></a>Syntax</p>
<pre dir="ltr">void setContentType(
   const string contenttype);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setContentType() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t58">Parameter</th>
<th class="cellalignment2204" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t58" headers="r1c1-t58">
<pre dir="ltr">contenttype
</pre></td>
<td class="cellalignment2205" headers="r2c1-t58 r1c2-t58">The content type of the <code dir="ltr">Blob</code>; an ASCII Mime compliant string.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20677" class="refsect2"><a id="i1078908"></a>
<h2 class="refsect2">setEmpty()</h2>
<p>Sets the <code dir="ltr">Blob</code> object to empty.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of setEmpty() method" summary="First column lists method versions; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t59">Syntax</th>
<th class="cellalignment2204" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t59" headers="r1c1-t59">
<pre dir="ltr">void setEmpty();
</pre></td>
<td class="cellalignment2205" headers="r2c1-t59 r1c2-t59">Sets the <code dir="ltr">Blob</code> object to empty.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t59" headers="r1c1-t59">
<pre dir="ltr">void setEmpty(
   const Connection* connectionp);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t59 r1c2-t59">Sets the <code dir="ltr">Blob</code> object to empty and initializes the connection pointer to the passed parameter.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setEmpty() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t60">Parameter</th>
<th class="cellalignment2204" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t60" headers="r1c1-t60">
<pre dir="ltr">connectionp
</pre></td>
<td class="cellalignment2205" headers="r2c1-t60 r1c2-t60">The new connection pointer for the <code dir="ltr">BLOB</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20678" class="refsect2"><a id="i1078914"></a>
<h2 class="refsect2">setNull()</h2>
<p>Sets the <code dir="ltr">Blob</code> object to atomically <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP20679"></a>Syntax</p>
<pre dir="ltr">void setNull();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20680" class="refsect2"><a id="BBACCGGD"></a>
<h2 class="refsect2">setOptions()</h2>
<p>Specifies a <code dir="ltr">LobOptionValue</code> for a particular <code dir="ltr">LobOptionType</code>. Enables advanced compression, encryption and deduplication of <code dir="ltr">BLOB</code>s. See <a href="lobs.htm#BABGICGB">Table 7-1, &#34;Values of Type LobOptionType&#34;</a> and <a href="lobs.htm#BABEHGAJ">Table 7-2, &#34;Values of Type LobOptionValue&#34;</a>.</p>
<p>Throws an exception if attempting to set or un-set an option that is not configured on the database column or partition that stores the <code dir="ltr">BLOB</code>.</p>
<p>Throws an exception if attempting to turn off encryption in an encrypted <code dir="ltr">BLOB</code> column.</p>
<p class="subhead1"><a id="LNCPP20681"></a>Syntax</p>
<pre dir="ltr">void setOptions(
   LobOptionType optType,
   LobOptionValue optValue);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setOptions() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t61">Parameter</th>
<th class="cellalignment2204" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t61" headers="r1c1-t61">
<pre dir="ltr">optType
</pre></td>
<td class="cellalignment2205" headers="r2c1-t61 r1c2-t61">The <code dir="ltr">LobOptionType</code> setting being specified. These may be combined using bitwise <code dir="ltr">or</code> (<code dir="ltr">|</code>) to avoid server round trips.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t61" headers="r1c1-t61">
<pre dir="ltr">optValue
</pre></td>
<td class="cellalignment2205" headers="r3c1-t61 r1c2-t61">The <code dir="ltr">LobOptionValue</code> setting for the <code dir="ltr">LobOptionType</code> specified by the <code dir="ltr">optType</code> parameter</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20682" class="refsect2"><a id="i1078920"></a>
<h2 class="refsect2">trim()</h2>
<p>Truncates the <code dir="ltr">BLOB</code> to the new length specified.</p>
<p class="subhead1"><a id="LNCPP20683"></a>Syntax</p>
<pre dir="ltr">void trim(
   unsigned int newlen);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of trip() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t62">Parameter</th>
<th class="cellalignment2204" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t62" headers="r1c1-t62">
<pre dir="ltr">newlen
</pre></td>
<td class="cellalignment2205" headers="r2c1-t62 r1c2-t62">The new length of the <code dir="ltr">BLOB</code>. Valid values are numbers less than or equal to the current length of the <code dir="ltr">BLOB</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20684" class="refsect2"><a id="i1078928"></a>
<h2 class="refsect2">write()</h2>
<p>Writes data from a buffer into a <code dir="ltr">BLOB</code>. This method implicitly opens the <code dir="ltr">BLOB</code>, copies the buffer into the <code dir="ltr">BLOB</code>, and implicitly closes the <code dir="ltr">BLOB</code>. If the <code dir="ltr">BLOB</code> is open, use <a href="#i1078943">writeChunk()</a> instead. The actual number of bytes written is returned.</p>
<p class="subhead1"><a id="LNCPP20685"></a>Syntax</p>
<pre dir="ltr">unsigned int write(
   unsigned int amt,
   unsigned char *buffer,
   unsigned int bufsize,
   unsigned int offset = 1);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of write() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t63">Parameter</th>
<th class="cellalignment2204" id="r1c2-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t63" headers="r1c1-t63">
<pre dir="ltr">amt
</pre></td>
<td class="cellalignment2205" headers="r2c1-t63 r1c2-t63">The number of bytes to be written to the <code dir="ltr">BLOB</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t63" headers="r1c1-t63">
<pre dir="ltr">buffer
</pre></td>
<td class="cellalignment2205" headers="r3c1-t63 r1c2-t63">The buffer containing the data to be written to the <code dir="ltr">BLOB</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t63" headers="r1c1-t63">
<pre dir="ltr">buffsize
</pre></td>
<td class="cellalignment2205" headers="r4c1-t63 r1c2-t63">The size of the <code dir="ltr">buffer containing the data to be written to the</code> <code dir="ltr">BLOB</code><code dir="ltr">.</code> Valid values are numbers greater than or equal to <code dir="ltr"><span class="codeinlineitalic">amt</span></code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t63" headers="r1c1-t63">
<pre dir="ltr">offset
</pre></td>
<td class="cellalignment2205" headers="r5c1-t63 r1c2-t63">The starting position at which to begin writing data into the <code dir="ltr">BLOB</code>. If <code dir="ltr">offset</code> is not specified, the data is written from the beginning of the <code dir="ltr">BLOB</code>. Valid values are numbers greater than or equal to 1.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20686" class="refsect2"><a id="i1078943"></a>
<h2 class="refsect2">writeChunk()</h2>
<p>Writes data from a buffer into a previously opened <code dir="ltr">BLOB</code>. The actual number of bytes written is returned.</p>
<p class="subhead1"><a id="LNCPP20687"></a>Syntax</p>
<pre dir="ltr">unsigned int writeChunk(
   unsigned int amount,
   unsigned char *buffer,
   unsigned int bufsize,
   unsigned int offset = 1);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of writeChunk() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t64">Parameter</th>
<th class="cellalignment2204" id="r1c2-t64">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t64" headers="r1c1-t64">
<pre dir="ltr">amt
</pre></td>
<td class="cellalignment2205" headers="r2c1-t64 r1c2-t64">The number of bytes to be written to the <code dir="ltr">BLOB</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t64" headers="r1c1-t64">
<pre dir="ltr">buffer
</pre></td>
<td class="cellalignment2205" headers="r3c1-t64 r1c2-t64">The buffer containing the data to be written to the <code dir="ltr">BLOB</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t64" headers="r1c1-t64">
<pre dir="ltr">buffsize
</pre></td>
<td class="cellalignment2205" headers="r4c1-t64 r1c2-t64">The size of the buffer containing the data to be written to the <code dir="ltr">BLOB</code>. Valid values are numbers greater than or equal to <code dir="ltr"><span class="codeinlineitalic">amt</span></code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t64" headers="r1c1-t64">
<pre dir="ltr">offset
</pre></td>
<td class="cellalignment2205" headers="r5c1-t64 r1c2-t64">The starting position at which to begin writing data into the <code dir="ltr">BLOB</code>. If <code dir="ltr">offset</code> is not specified, the data is written from the beginning of the <code dir="ltr">BLOB</code>. Valid values are numbers greater than or equal to <code dir="ltr">1</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2196">
<tr>
<td class="cellalignment2205">
<table class="cellalignment2201">
<tr>
<td class="cellalignment2200"><a href="reference006.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2200"><a href="reference008.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2208">
<table class="cellalignment2199">
<tr>
<td class="cellalignment2200"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2200"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2200"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2200"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2200"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2200"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>