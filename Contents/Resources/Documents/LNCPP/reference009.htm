<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-73912"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Clob%20Class"></a><title>Clob Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1082"/>
<meta name="dcterms.created" content="2016-06-01T12:8:11Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="C++ Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E48221-07"/>
<meta name="dcterms.isVersionOf" content="LNCPP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="reference008.htm" title="Previous" type="text/html"/>
<link rel="Next" href="reference010.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48221-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">29/54</span> <!-- End Header --><a id="i1118691"></a>
<div id="LNCPP1006" class="refsect1">
<h1 class="refsect1">Clob<a id="sthref726"></a> <a id="sthref727"></a><a id="sthref728"></a>Class</h1>
<p>The <code dir="ltr">Clob</code> class defines the common properties of objects of type <code dir="ltr">CLOB</code>. A <code dir="ltr">Clob</code> is a large character object stored as a column value in a row of a database table. A <code dir="ltr">Clob</code> object contains a logical pointer to a <code dir="ltr">CLOB</code>, not the <code dir="ltr">CLOB</code> itself.</p>
<p>Methods of the <code dir="ltr">Clob</code> class enable you to perform specific tasks related to <code dir="ltr">Clob</code> objects, including methods for getting the length of a SQL <code dir="ltr">CLOB</code>, for materializing a <code dir="ltr">CLOB</code> on the client, and for extracting a part of the <code dir="ltr">CLOB</code>.</p>
<p>The only methods valid on a <code dir="ltr">NULL</code> <code dir="ltr">CLOB</code> object are <a href="reference006.htm#i1078439">setName()</a>, <a href="#i1076059">isNull()</a>, and <a href="reference006.htm#i1091091">operator=()</a>.</p>
<p>Methods in the <code dir="ltr">ResultSet</code> and <code dir="ltr">Statement</code> classes, such as <code dir="ltr">getClob()</code> and <code dir="ltr">setClob()</code>, enable you to access an SQL <code dir="ltr">CLOB</code> value.</p>
<p>An uninitialized <code dir="ltr">CLOB</code> object can be initialized by:</p>
<ul>
<li>
<p>The <a href="reference007.htm#i1078908">setEmpty()</a> method. The <code dir="ltr">CLOB</code> can then be modified by inserting this <code dir="ltr">CLOB</code> into the table and retrieving it using <code dir="ltr">SELECT...FOR&nbsp;UPDATE</code>. The <a href="reference007.htm#i1078928">write()</a> method modifies the <code dir="ltr">CLOB</code>; however, the modified data is flushed to the table only when the transaction is committed. Note that an <code dir="ltr">insert</code> is not required.</p>
</li>
<li>
<p>Assigning an initialized <code dir="ltr">Clob</code> object to it.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>In-depth discussion of <code dir="ltr">LOB</code>s in the introductory chapter of <a class="olink ADLOB001" href="../ADLOB/adlob_intro.htm#ADLOB001"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a>,</p>
</li>
</ul>
</div>
<div id="LNCPP20702" class="tblformal">
<p class="titleintable"><a id="sthref729"></a><a id="BBAFIFAD"></a>Table 13-10 Summary of <a id="sthref730"></a>Clob Methods</p>
<table class="cellalignment2203" title="Summary of Clob Methods " summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t72">Method</th>
<th class="cellalignment2204" id="r1c2-t72">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t72" headers="r1c1-t72">
<p><a href="#i1148609">Clob()</a></p>
</td>
<td class="cellalignment2205" headers="r2c1-t72 r1c2-t72">
<p><code dir="ltr">Clob</code> class constructor.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t72" headers="r1c1-t72">
<p><a href="#i1075959">append()</a></p>
</td>
<td class="cellalignment2205" headers="r3c1-t72 r1c2-t72">
<p>Appends a <code dir="ltr">Clob</code> at the end of the current <code dir="ltr">Clob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t72" headers="r1c1-t72">
<p><a href="#i1075968">close()</a></p>
</td>
<td class="cellalignment2205" headers="r4c1-t72 r1c2-t72">
<p>Closes a previously opened <code dir="ltr">Clob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t72" headers="r1c1-t72">
<p><a href="#i1075974">closeStream()</a></p>
</td>
<td class="cellalignment2205" headers="r5c1-t72 r1c2-t72">
<p>Closes the <code dir="ltr">Stream</code> object obtained from the current <code dir="ltr">Clob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t72" headers="r1c1-t72">
<p><a href="#i1100017">copy()</a></p>
</td>
<td class="cellalignment2205" headers="r6c1-t72 r1c2-t72">
<p>Copies all or a portion of a <code dir="ltr">Clob</code> or <code dir="ltr">BFILE</code> into the current <code dir="ltr">Clob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t72" headers="r1c1-t72">
<p><a href="#i1076019">getCharSetForm()</a></p>
</td>
<td class="cellalignment2205" headers="r7c1-t72 r1c2-t72">
<p>Returns the character set form of the <code dir="ltr">Clob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t72" headers="r1c1-t72">
<p><a href="#i1076026">getCharSetId()</a></p>
</td>
<td class="cellalignment2205" headers="r8c1-t72 r1c2-t72">
<p>Returns the character set ID of the <code dir="ltr">Clob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t72" headers="r1c1-t72">
<p><a href="#BBACEAHJ">getCharSetIdUString()</a></p>
</td>
<td class="cellalignment2205" headers="r9c1-t72 r1c2-t72">
<p>Retrieves the characterset name associated with the <code dir="ltr">Clob</code>; <code dir="ltr">UString</code> version.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t72" headers="r1c1-t72">
<p><a href="#i1089206">getChunkSize()</a></p>
</td>
<td class="cellalignment2205" headers="r10c1-t72 r1c2-t72">
<p>Returns the smallest data size to perform efficient writes to the <code dir="ltr">CLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t72" headers="r1c1-t72">
<p><a href="#BBAFFJFI">getContentType()</a></p>
</td>
<td class="cellalignment2205" headers="r11c1-t72 r1c2-t72">
<p>Returns the content type of the <code dir="ltr">Clob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t72" headers="r1c1-t72">
<p><a href="#BBAGEFBA">getOptions()</a></p>
</td>
<td class="cellalignment2205" headers="r12c1-t72 r1c2-t72">
<p>Returns the <code dir="ltr">CLOB</code>&#39;s <code dir="ltr">LobOptionValue</code> for a specified <code dir="ltr">LobOptionTyp</code>e.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t72" headers="r1c1-t72">
<p><a href="#i1089333">getStream()</a></p>
</td>
<td class="cellalignment2205" headers="r13c1-t72 r1c2-t72">
<p>Returns data from the <code dir="ltr">CLOB</code> as a <code dir="ltr">Stream</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t72" headers="r1c1-t72">
<p><a href="#i1076053">isInitialized()</a></p>
</td>
<td class="cellalignment2205" headers="r14c1-t72 r1c2-t72">
<p>Tests whether the <code dir="ltr">Clob</code> object is initialized.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t72" headers="r1c1-t72">
<p><a href="#i1076059">isNull()</a></p>
</td>
<td class="cellalignment2205" headers="r15c1-t72 r1c2-t72">
<p>Tests whether the <code dir="ltr">Clob</code> object is atomically <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t72" headers="r1c1-t72">
<p><a href="#i1076065">isOpen()</a></p>
</td>
<td class="cellalignment2205" headers="r16c1-t72 r1c2-t72">
<p>Tests whether the <code dir="ltr">Clob</code> is open.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t72" headers="r1c1-t72">
<p><a href="#i1076071">length()</a></p>
</td>
<td class="cellalignment2205" headers="r17c1-t72 r1c2-t72">
<p>Returns the number of characters in the current <code dir="ltr">CLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t72" headers="r1c1-t72">
<p><a href="#i1076077">open()</a></p>
</td>
<td class="cellalignment2205" headers="r18c1-t72 r1c2-t72">
<p>Opens the <code dir="ltr">CLOB</code> with read or read/write access.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t72" headers="r1c1-t72">
<p><a href="#i1091238">operator=()</a></p>
</td>
<td class="cellalignment2205" headers="r19c1-t72 r1c2-t72">
<p>Assigns a <code dir="ltr">CLOB</code> locator to the current <code dir="ltr">Clob</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t72" headers="r1c1-t72">
<p><a href="#i1089346">operator==()</a></p>
</td>
<td class="cellalignment2205" headers="r20c1-t72 r1c2-t72">
<p>Tests whether two <code dir="ltr">Clob</code> objects are equal.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t72" headers="r1c1-t72">
<p><a href="#i1112342">operator!=()</a></p>
</td>
<td class="cellalignment2205" headers="r21c1-t72 r1c2-t72">
<p>Tests whether two <code dir="ltr">Clob</code> objects are not equal.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t72" headers="r1c1-t72">
<p><a href="#i1076086">read()</a></p>
</td>
<td class="cellalignment2205" headers="r22c1-t72 r1c2-t72">
<p>Reads a portion of the <code dir="ltr">CLOB</code> into a buffer.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r23c1-t72" headers="r1c1-t72">
<p><a href="#i1130838">setCharSetId()</a></p>
</td>
<td class="cellalignment2205" headers="r23c1-t72 r1c2-t72">
<p>Sets the character set ID associated with the <code dir="ltr">Clob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r24c1-t72" headers="r1c1-t72">
<p><a href="#CACIFDAB">setCharSetIdUString()</a></p>
</td>
<td class="cellalignment2205" headers="r24c1-t72 r1c2-t72">
<p>Sets the character set ID associated with the <code dir="ltr">Clob</code>; used when the environment character set is UTF16.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r25c1-t72" headers="r1c1-t72">
<p><a href="#i1076105">setCharSetForm()</a></p>
</td>
<td class="cellalignment2205" headers="r25c1-t72 r1c2-t72">
<p>Sets the character set form associated with the <code dir="ltr">Clob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r26c1-t72" headers="r1c1-t72">
<p><a href="#BBAEDHIG">setContentType()</a></p>
</td>
<td class="cellalignment2205" headers="r26c1-t72 r1c2-t72">
<p>Sets the content type of the <code dir="ltr">Clob</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r27c1-t72" headers="r1c1-t72">
<p><a href="#i1130436">setEmpty()</a></p>
</td>
<td class="cellalignment2205" headers="r27c1-t72 r1c2-t72">
<p>Sets the <code dir="ltr">Clob</code> object to empty.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r28c1-t72" headers="r1c1-t72">
<p><a href="#i1076111">setNull()</a></p>
</td>
<td class="cellalignment2205" headers="r28c1-t72 r1c2-t72">
<p>Sets the <code dir="ltr">Clob</code> object to atomically <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r29c1-t72" headers="r1c1-t72">
<p><a href="#BBABEIBG">setOptions()</a></p>
</td>
<td class="cellalignment2205" headers="r29c1-t72 r1c2-t72">
<p>Specifies a <code dir="ltr">LobOptionValue</code> for a particular <code dir="ltr">LobOptionType</code>. Enables advanced compression, encryption and deduplication of <code dir="ltr">CLOB</code>s.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r30c1-t72" headers="r1c1-t72">
<p><a href="#i1076116">trim()</a></p>
</td>
<td class="cellalignment2205" headers="r30c1-t72 r1c2-t72">
<p>Truncates the <code dir="ltr">Clob</code> to a specified length.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r31c1-t72" headers="r1c1-t72">
<p><a href="#i1076125">write()</a></p>
</td>
<td class="cellalignment2205" headers="r31c1-t72 r1c2-t72">
<p>Writes a buffer into an <span class="italic">unopened</span> <code dir="ltr">CLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r32c1-t72" headers="r1c1-t72">
<p><a href="#i1130867">writeChunk()</a></p>
</td>
<td class="cellalignment2205" headers="r32c1-t72 r1c2-t72">
<p>Writes a buffer into an <span class="italic">open</span><a id="sthref731"></a> <code dir="ltr">CLOB</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP20703" class="refsect2"><a id="i1148609"></a>
<h2 class="refsect2">Clob()</h2>
<p><code dir="ltr">Clob</code> class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of Clob() constructor" summary="First column lists constructor versions; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t73">Syntax</th>
<th class="cellalignment2204" id="r1c2-t73">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t73" headers="r1c1-t73">
<pre dir="ltr">Clob();
</pre></td>
<td class="cellalignment2205" headers="r2c1-t73 r1c2-t73">Creates a <code dir="ltr">NULL</code> <code dir="ltr">Clob</code> object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t73" headers="r1c1-t73">
<pre dir="ltr">Clob(
   const Connection *connectionp);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t73 r1c2-t73">Creates an uninitialized <code dir="ltr">Clob</code> object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t73" headers="r1c1-t73">
<pre dir="ltr">Clob(
   const Clob *srcClob);
</pre></td>
<td class="cellalignment2205" headers="r4c1-t73 r1c2-t73">Creates a copy of a <code dir="ltr">Clob</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of Clob() constructor" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t74">Parameter</th>
<th class="cellalignment2204" id="r1c2-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t74" headers="r1c1-t74">
<pre dir="ltr">connectionp
</pre></td>
<td class="cellalignment2205" headers="r2c1-t74 r1c2-t74">Connection pointer</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t74" headers="r1c1-t74">
<pre dir="ltr">srcClob
</pre></td>
<td class="cellalignment2205" headers="r3c1-t74 r1c2-t74">The source <code dir="ltr">Clob</code> object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20704" class="refsect2"><a id="i1075959"></a>
<h2 class="refsect2">append()</h2>
<p>Appends a <code dir="ltr">CLOB</code> to the end of the current <code dir="ltr">CLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20705"></a>Syntax</p>
<pre dir="ltr">void append(
   const Clob &amp;srcClob);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of append() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t75">Parameter</th>
<th class="cellalignment2204" id="r1c2-t75">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t75" headers="r1c1-t75">
<pre dir="ltr">srcClob
</pre></td>
<td class="cellalignment2205" headers="r2c1-t75 r1c2-t75">The <code dir="ltr">CLOB</code> to be appended to the current <code dir="ltr">CLOB</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20706" class="refsect2"><a id="i1075968"></a>
<h2 class="refsect2">close()</h2>
<p>Closes a <code dir="ltr">CLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20707"></a>Syntax</p>
<pre dir="ltr">void close();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20708" class="refsect2"><a id="i1075974"></a>
<h2 class="refsect2">closeStream()</h2>
<p>Closes the <code dir="ltr">Stream</code> object obtained from the <code dir="ltr">CLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20709"></a>Syntax</p>
<pre dir="ltr">void closeStream(
   Stream *stream);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of closeStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t76">Parameter</th>
<th class="cellalignment2204" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t76" headers="r1c1-t76">
<pre dir="ltr">stream
</pre></td>
<td class="cellalignment2205" headers="r2c1-t76 r1c2-t76">The Stream object to be closed.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20710" class="refsect2"><a id="i1100017"></a>
<h2 class="refsect2">copy()</h2>
<p>Copies a part or all of a <code dir="ltr">BFILE</code> or <code dir="ltr">CLOB</code> into the current <code dir="ltr">CLOB</code>.</p>
<p>OCCI does not perform any characterset conversions when loading data from a <code dir="ltr">Bfile</code> into a <code dir="ltr">Clob</code>; therefore, ensure that the contents of the <code dir="ltr">Bfile</code> are character data in the server&#39;s <code dir="ltr">Clob</code> storage characterset.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of copy() method" summary="First column lists method versions; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t77">Syntax</th>
<th class="cellalignment2204" id="r1c2-t77">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t77" headers="r1c1-t77">
<pre dir="ltr">void copy(
   const Bfile &amp;srcBfile,
   unsigned int numBytes,
   unsigned int dstOffset = 1,
   unsigned int srcOffset = 1);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t77 r1c2-t77">Copies a <code dir="ltr">BFILE</code> into the current <code dir="ltr">CLOB</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t77" headers="r1c1-t77">
<pre dir="ltr">void copy(
   const Clob &amp;srcClob,
   unsigned int numBytes,
   unsigned int dstOffset = 1,
   unsigned int srcOffset = 1);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t77 r1c2-t77">Copies a <code dir="ltr">CLOB</code> into the current <code dir="ltr">CLOB</code>.
<p>If the destination <code dir="ltr">CLOB</code> has deduplication enabled, and the source and destination <code dir="ltr">CLOB</code>s are in the same column, the new <code dir="ltr">CLOB</code> is created as copy-on-write. All other settings are inherited from the source <code dir="ltr">CLOB</code>. If the destination <code dir="ltr">CLOB</code> has deduplication disabled, it is a completely new copy of the <code dir="ltr">CLOB</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of copy() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t78">Parameter</th>
<th class="cellalignment2204" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t78" headers="r1c1-t78">
<pre dir="ltr">srcBfile
</pre></td>
<td class="cellalignment2205" headers="r2c1-t78 r1c2-t78">The <code dir="ltr">BFILE</code> from which the data is to be copied.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t78" headers="r1c1-t78">
<pre dir="ltr">srcClob
</pre></td>
<td class="cellalignment2205" headers="r3c1-t78 r1c2-t78">The <code dir="ltr">CLOB</code> from which the data is to be copied.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t78" headers="r1c1-t78">
<pre dir="ltr">numBytes
</pre></td>
<td class="cellalignment2205" headers="r4c1-t78 r1c2-t78">The number of bytes to be copied from the source <code dir="ltr">BFILE</code> <code dir="ltr">or</code> <code dir="ltr">CLOB</code><code dir="ltr">.</code> Valid values are numbers greater than 0.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t78" headers="r1c1-t78">
<pre dir="ltr">dstOffset
</pre></td>
<td class="cellalignment2205" headers="r5c1-t78 r1c2-t78">The starting position at which data is to be is at 0.
<p>The starting position at which to begin writing data into the current <code dir="ltr">CLOB</code> Valid values are numbers greater than or equal to 1 written in the destination buffer; the position of the first byte.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t78" headers="r1c1-t78">
<pre dir="ltr">srcOffset
</pre></td>
<td class="cellalignment2205" headers="r6c1-t78 r1c2-t78">The starting position at which to begin reading data from the source <code dir="ltr">BFILE</code> or <code dir="ltr">CLOB</code>. Valid values are numbers greater than or equal to 1.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20711" class="refsect2"><a id="i1076019"></a>
<h2 class="refsect2">getCharSetForm()</h2>
<p>Returns the character set form of the <code dir="ltr">CLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20712"></a>Syntax</p>
<pre dir="ltr">CharSetForm getCharSetForm() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20713" class="refsect2"><a id="i1076026"></a>
<h2 class="refsect2">getCharSetId()</h2>
<p>Returns the character set ID of the <code dir="ltr">CLOB</code>, in string form.</p>
<p class="subhead1"><a id="LNCPP20714"></a>Syntax</p>
<pre dir="ltr">string getCharSetId() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20715" class="refsect2"><a id="BBACEAHJ"></a>
<h2 class="refsect2">getCharSetIdUString()</h2>
<p>Retrieves the characterset name associated with the <code dir="ltr">Clob</code>; <code dir="ltr">UString</code> version.</p>
<p class="subhead1"><a id="LNCPP20716"></a>Syntax</p>
<pre dir="ltr">UString getCharSetIdUString() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20717" class="refsect2"><a id="i1089206"></a>
<h2 class="refsect2">getChunkSize()</h2>
<p>Returns the smallest data size to perform efficient writes to the <code dir="ltr">CLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20718"></a>Syntax</p>
<pre dir="ltr">unsigned int getChunkSize() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20719" class="refsect2"><a id="BBAFFJFI"></a>
<h2 class="refsect2">getContentType()</h2>
<p>Returns the content type of the <code dir="ltr">Clob</code>. If a content type has not been assigned, returns a <code dir="ltr">NULL</code> string.</p>
<p class="subhead1"><a id="LNCPP20720"></a>Syntax</p>
<pre dir="ltr">string getContentType();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20721" class="refsect2"><a id="BBAGEFBA"></a>
<h2 class="refsect2">getOptions()</h2>
<p>Returns the <code dir="ltr">CLOB</code>&#39;s <code dir="ltr">LobOptionValue</code> for a specified <code dir="ltr">LobOptionType</code>.</p>
<p>Throws an exception if attempting to retrieve a value for an option that is not configured on the database column or partition that stores the <code dir="ltr">CLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20722"></a>Syntax</p>
<pre dir="ltr">LobOptionValue getOptions(
   LobOptionType optType);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getOptions() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t79">Parameter</th>
<th class="cellalignment2204" id="r1c2-t79">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t79" headers="r1c1-t79">
<pre dir="ltr">optType
</pre></td>
<td class="cellalignment2205" headers="r2c1-t79 r1c2-t79">The <code dir="ltr">LobOptionType</code> setting requested. These may be combined using bitwise <code dir="ltr">or</code> (<code dir="ltr">|</code>) to avoid server round trips. See <a href="lobs.htm#BABGICGB">Table 7-1, &#34;Values of Type LobOptionType&#34;</a> and <a href="lobs.htm#BABEHGAJ">Table 7-2, &#34;Values of Type LobOptionValue&#34;</a></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20723" class="refsect2"><a id="i1089333"></a>
<h2 class="refsect2">getStream()</h2>
<p>Returns a <code dir="ltr">Stream</code> object from the <code dir="ltr">CLOB</code>. If a stream is open, it is disallowed to open another stream on <code dir="ltr">CLOB</code> object, so the user must always close the stream before performing any <code dir="ltr">Clob</code> object operations. The client&#39;s character set id and form is used by default, unless they are explicitly set through <a href="#i1130838">setCharSetId()</a> and <a href="reference007.htm#i1078908">setEmpty()</a> calls.</p>
<p class="subhead1"><a id="LNCPP20724"></a>Syntax</p>
<pre dir="ltr">Stream* getStream(
   unsigned int offset = 1,
   unsigned int amount = 0);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t80">Parameter</th>
<th class="cellalignment2204" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t80" headers="r1c1-t80">
<pre dir="ltr">offset
</pre></td>
<td class="cellalignment2205" headers="r2c1-t80 r1c2-t80">The starting position at which to begin reading data from the <code dir="ltr">CLOB</code>. If <code dir="ltr">offset</code> is not specified, the data is written from the beginning of the <code dir="ltr">CLOB</code>. Valid values are numbers greater than or equal to 1.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t80" headers="r1c1-t80">
<pre dir="ltr">amount
</pre></td>
<td class="cellalignment2205" headers="r3c1-t80 r1c2-t80">The total number of consecutive characters to be read. If <code dir="ltr"><span class="codeinlineitalic">amount</span></code> is 0, the data is read from the <code dir="ltr">offset</code> value until the end of the <code dir="ltr">CLOB</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20725" class="refsect2"><a id="i1076053"></a>
<h2 class="refsect2">isInitialized()</h2>
<p>Tests whether the <code dir="ltr">Clob object</code> is initialized. If the <code dir="ltr">Clob</code> object is initialized, <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20726"></a>Syntax</p>
<pre dir="ltr">bool isInitialized() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20727" class="refsect2"><a id="i1076059"></a>
<h2 class="refsect2">isNull()</h2>
<p>Tests whether the <code dir="ltr">Clob</code> object is atomically <code dir="ltr">NULL</code>. If the <code dir="ltr">Clob</code> object is atomically <code dir="ltr">NULL</code>, <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20728"></a>Syntax</p>
<pre dir="ltr">bool isNull() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20729" class="refsect2"><a id="i1076065"></a>
<h2 class="refsect2">isOpen()</h2>
<p>Tests whether the <code dir="ltr">CLOB</code> is open. If the <code dir="ltr">CLOB</code> is open, <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20730"></a>Syntax</p>
<pre dir="ltr">bool isOpen() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20731" class="refsect2"><a id="i1076071"></a>
<h2 class="refsect2">length()</h2>
<p>Returns the number of characters in the <code dir="ltr">CLOB</code>.</p>
<p class="subhead1"><a id="LNCPP20732"></a>Syntax</p>
<pre dir="ltr">unsigned int length() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20733" class="refsect2"><a id="i1076077"></a>
<h2 class="refsect2">open()</h2>
<p>Opens the <code dir="ltr">CLOB</code> in <code dir="ltr">read/write</code> or read-only mode.</p>
<p class="subhead1"><a id="LNCPP20734"></a>Syntax</p>
<pre dir="ltr">void open(
   LObOpenMode mode = OCCI_LOB_READWRITE);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of open() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t81">Parameter</th>
<th class="cellalignment2204" id="r1c2-t81">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t81" headers="r1c1-t81">
<pre dir="ltr">mode
</pre></td>
<td class="cellalignment2205" headers="r2c1-t81 r1c2-t81"><code dir="ltr">The mode the</code> <code dir="ltr">CLOB</code> <code dir="ltr">is to be opened in. Valid values are:</code>
<ul>
<li>
<p><code dir="ltr">OCCI_LOB_READWRITE</code></p>
</li>
<li>
<p><code dir="ltr">OCCI_LOB_READONLY</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20735" class="refsect2"><a id="i1091238"></a>
<h2 class="refsect2">operator=()</h2>
<p>Assigns a <code dir="ltr">CLOB</code> to the current <code dir="ltr">CLOB</code>. The source <code dir="ltr">CLOB</code> gets copied to the destination <code dir="ltr">CLOB</code> only when the destination <code dir="ltr">CLOB</code> gets stored in the table.</p>
<p class="subhead1"><a id="LNCPP20736"></a>Syntax</p>
<pre dir="ltr">Clob&amp; operator=(
   const Clob &amp;srcClob);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t82">Parameter</th>
<th class="cellalignment2204" id="r1c2-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t82" headers="r1c1-t82">
<pre dir="ltr">srcClob
</pre></td>
<td class="cellalignment2205" headers="r2c1-t82 r1c2-t82">The <code dir="ltr">Clob</code> from which the data must be copied.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20737" class="refsect2"><a id="i1089346"></a>
<h2 class="refsect2">operator==()</h2>
<p>Compares two <code dir="ltr">Clob</code> objects for equality. Two <code dir="ltr">Clob</code> objects are equal if they both refer to the same <code dir="ltr">CLOB</code>. Two <code dir="ltr">NULL</code> <code dir="ltr">Clob</code> objects are not considered equal. If the <code dir="ltr">Blob</code> objects are equal, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20738"></a>Syntax</p>
<pre dir="ltr">bool operator==(
   const Clob &amp;srcClob) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator==() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t83">Parameter</th>
<th class="cellalignment2204" id="r1c2-t83">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t83" headers="r1c1-t83">
<pre dir="ltr">srcClob
</pre></td>
<td class="cellalignment2205" headers="r2c1-t83 r1c2-t83">The <code dir="ltr">Clob</code> object to be compared with the current <code dir="ltr">Clob</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20739" class="refsect2"><a id="i1112342"></a>
<h2 class="refsect2">operator!=()</h2>
<p>Compares two <code dir="ltr">Clob objects</code> for inequality. Two <code dir="ltr">Clob</code> objects are equal if they both refer to the same <code dir="ltr">CLOB</code>. Two <code dir="ltr">NULL</code> <code dir="ltr">Clob</code> objects are not considered equal. If the <code dir="ltr">Clob</code> objects are not equal, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20740"></a>Syntax</p>
<pre dir="ltr">bool operator!=(
   const Clob &amp;srcClob) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator!=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t84">Parameter</th>
<th class="cellalignment2204" id="r1c2-t84">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t84" headers="r1c1-t84">
<pre dir="ltr">srcClob
</pre></td>
<td class="cellalignment2205" headers="r2c1-t84 r1c2-t84">The <code dir="ltr">Clob</code> object to be compared with the current <code dir="ltr">Clob</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20741" class="refsect2"><a id="i1076086"></a>
<h2 class="refsect2">read()</h2>
<p>Reads a part or all of the <code dir="ltr">CLOB</code> into a buffer.</p>
<p>Returns the actual number of characters read for fixed-width charactersets, such as UTF16, or the number of bytes read for multibyte charactersets, including UTF8.</p>
<p>The client&#39;s character set id and form is used by default, unless they are explicitly set through <a href="#i1130838">setCharSetId()</a>, <a href="#CACIFDAB">setCharSetIdUString()</a> and <a href="#i1076105">setCharSetForm()</a> calls.</p>
<p>Note that for the second version of the method, the return value represents either the number of characters read for fixed-width charactersets (UTF16), or the number of bytes read for multibyte charactersets (including UTF8).</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of read() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t85">Syntax</th>
<th class="cellalignment2204" id="r1c2-t85">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t85" headers="r1c1-t85">
<pre dir="ltr">unsigned int read(
   unsigned int amt,
   unsigned char *buffer,
   unsigned int bufsize,
   unsigned int offset=1) const;
</pre></td>
<td class="cellalignment2205" headers="r2c1-t85 r1c2-t85">Reads a part or all of the <code dir="ltr">CLOB</code> into a buffer.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t85" headers="r1c1-t85">
<pre dir="ltr">unsigned int read(
   unsigned int amt,
   unsigned utext *buffer,
   unsigned int bufsize,
   unsigned int offset=1) const;
</pre></td>
<td class="cellalignment2205" headers="r3c1-t85 r1c2-t85">Reads a part or all of the <code dir="ltr">CLOB</code> into a buffer; globalization enabled. Should be called after setting character set to OCCIUTF16 using <code dir="ltr">setCharSetId()</code> method.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of read() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t86">Parameter</th>
<th class="cellalignment2204" id="r1c2-t86">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t86" headers="r1c1-t86">
<pre dir="ltr">amt
</pre></td>
<td class="cellalignment2205" headers="r2c1-t86 r1c2-t86">The number of bytes to be read. from the <code dir="ltr">CLOB</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t86" headers="r1c1-t86">
<pre dir="ltr">buffer
</pre></td>
<td class="cellalignment2205" headers="r3c1-t86 r1c2-t86">The buffer that the <code dir="ltr">CLOB</code> data is to be read into.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t86" headers="r1c1-t86">
<pre dir="ltr">buffsize
</pre></td>
<td class="cellalignment2205" headers="r4c1-t86 r1c2-t86">The size of the buffer. Valid values are numbers greater than or equal to <code dir="ltr">amt</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t86" headers="r1c1-t86">
<pre dir="ltr">offset
</pre></td>
<td class="cellalignment2205" headers="r5c1-t86 r1c2-t86">The starting position at which to begin reading data from the <code dir="ltr">CLOB</code>. If <code dir="ltr">offset</code> is not specified, the data is written from the beginning of the <code dir="ltr">CLOB</code>. Valid values are numbers greater than or equal to 1.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20742" class="refsect2"><a id="i1130838"></a>
<h2 class="refsect2">setCharSetId()</h2>
<p>Sets the Character set Id associated with <code dir="ltr">Clob</code>. The characterset id set is used for read/write and <a href="#i1089333">getStream()</a> operations. If no value is set explicitly, the default client&#39;s character set id is used. List of character sets supported is given in Globalization Support Guide Appendix A.</p>
<p class="subhead1"><a id="LNCPP20743"></a>Syntax</p>
<pre dir="ltr">void setCharSetId(
   const string &amp;charset);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setCharSetId() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t87">Parameter</th>
<th class="cellalignment2204" id="r1c2-t87">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t87" headers="r1c1-t87">
<pre dir="ltr">charset
</pre></td>
<td class="cellalignment2205" headers="r2c1-t87 r1c2-t87">Oracle supported characterset name, such as <code dir="ltr">E8DEC</code>, <code dir="ltr">ZHT16BIG5</code>, or <code dir="ltr">OCCIUTF16</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20744" class="refsect2"><a id="CACIFDAB"></a>
<h2 class="refsect2">setCharSetIdUString()</h2>
<p>Sets the characterset id associated with <code dir="ltr">Clob</code>; used when the environment&#39;s characterset is <code dir="ltr">UTF16</code>. The <code dir="ltr">charset</code> id set is used for read, write and <a href="#i1089333">getStream()</a> operations.</p>
<p class="subhead1"><a id="LNCPP20745"></a>Syntax</p>
<pre dir="ltr">void setCharSetIdUSString(
   const string &amp;charset);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setCharSetIdUSString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t88">Parameter</th>
<th class="cellalignment2204" id="r1c2-t88">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t88" headers="r1c1-t88">
<pre dir="ltr">charset
</pre></td>
<td class="cellalignment2205" headers="r2c1-t88 r1c2-t88">Oracle supported characterset name, such as <code dir="ltr">WE8DEC</code>, <code dir="ltr">ZHT16BIG5</code>, or <code dir="ltr">OCCIUTF16</code> in <code dir="ltr">UString</code> (UTF16 characterset).</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20746" class="refsect2"><a id="i1076105"></a>
<h2 class="refsect2">setCharSetForm()</h2>
<p>Sets the character set form associated with the <code dir="ltr">CLOB</code>. The charset form set is used for read, write and <a href="#i1089333">getStream()</a> operations. If no value is set explicitly, by default, <code dir="ltr">OCCI_SQLCS_IMPLICIT</code> is used.</p>
<p class="subhead1"><a id="LNCPP20747"></a>Syntax</p>
<pre dir="ltr">void setCharSetForm(
   CharSetForm csfrm );
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setCharSetFrom() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t89">Parameter</th>
<th class="cellalignment2204" id="r1c2-t89">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t89" headers="r1c1-t89">
<pre dir="ltr">csfrm
</pre></td>
<td class="cellalignment2205" headers="r2c1-t89 r1c2-t89">The charset form for <code dir="ltr">Clob</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20748" class="refsect2"><a id="BBAEDHIG"></a>
<h2 class="refsect2">setContentType()</h2>
<p>Sets the content type of the <code dir="ltr">Clob</code>. If the <code dir="ltr">Clob</code> is not a SecureFile, throws an exception.</p>
<p class="subhead1"><a id="LNCPP20749"></a>Syntax</p>
<pre dir="ltr">void setContentType(
   const string contenttype);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setContentType() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t90">Parameter</th>
<th class="cellalignment2204" id="r1c2-t90">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t90" headers="r1c1-t90">
<pre dir="ltr">contenttype
</pre></td>
<td class="cellalignment2205" headers="r2c1-t90 r1c2-t90">The content type of the <code dir="ltr">Clob</code>; an ASCII Mime compliant string.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20750" class="refsect2"><a id="i1130436"></a>
<h2 class="refsect2">setEmpty()</h2>
<p>Sets the <code dir="ltr">Clob</code> object to empty.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of write() method" summary="First column lists method versions; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t91">Syntax</th>
<th class="cellalignment2204" id="r1c2-t91">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t91" headers="r1c1-t91">
<pre dir="ltr">void setEmpty();
</pre></td>
<td class="cellalignment2205" headers="r2c1-t91 r1c2-t91">Sets the <code dir="ltr">Clob</code> object to empty.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t91" headers="r1c1-t91">
<pre dir="ltr">void setEmpty(
   const Connection* connectionp);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t91 r1c2-t91">Sets the <code dir="ltr">Clob</code> object to empty and initializes the connection pointer to the passed parameter.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setEmpty() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t92">Parameter</th>
<th class="cellalignment2204" id="r1c2-t92">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t92" headers="r1c1-t92">
<pre dir="ltr">connectionp
</pre></td>
<td class="cellalignment2205" headers="r2c1-t92 r1c2-t92">The new connection pointer for the <code dir="ltr">Clob</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20751" class="refsect2"><a id="i1076111"></a>
<h2 class="refsect2">setNull()</h2>
<p>Sets the <code dir="ltr">Clob</code> object to atomically <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP20752"></a>Syntax</p>
<pre dir="ltr">void setNull();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20753" class="refsect2"><a id="BBABEIBG"></a>
<h2 class="refsect2">setOptions()</h2>
<p>Specifies a <code dir="ltr">LobOptionValue</code> for a particular <code dir="ltr">LobOptionType</code>. Enables advanced compression, encryption and deduplication of CLOBs. See <a href="lobs.htm#BABGICGB">Table 7-1, &#34;Values of Type LobOptionType&#34;</a> and <a href="lobs.htm#BABEHGAJ">Table 7-2, &#34;Values of Type LobOptionValue&#34;</a>.</p>
<p>Throws an exception if attempting to set or un-set an option that is not configured on the database column or partition that stores the <code dir="ltr">CLOB</code>.</p>
<p>Throws an exception if attempting to turn off encryption in an encrypted <code dir="ltr">CLOB</code> column.</p>
<p class="subhead1"><a id="LNCPP20754"></a>Syntax</p>
<pre dir="ltr">void setOptions(
   LobOptionType optType,
   LobOptionValue optValue);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setOptions() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t93">Parameter</th>
<th class="cellalignment2204" id="r1c2-t93">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t93" headers="r1c1-t93">
<pre dir="ltr">optType
</pre></td>
<td class="cellalignment2205" headers="r2c1-t93 r1c2-t93">The <code dir="ltr">LobOptionType</code> setting being specified. These may be combined using bitwise <code dir="ltr">or</code> (<code dir="ltr">|</code>) to avoid server round trips.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t93" headers="r1c1-t93">
<pre dir="ltr">optValue
</pre></td>
<td class="cellalignment2205" headers="r3c1-t93 r1c2-t93">The <code dir="ltr">LobOptionValue</code> setting for the <code dir="ltr">LobOptionType</code> specified by the <code dir="ltr">optType</code> parameter</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20755" class="refsect2"><a id="i1076116"></a>
<h2 class="refsect2">trim()</h2>
<p>Truncates the <code dir="ltr">CLOB</code> <code dir="ltr">to the new length specified.</code></p>
<p class="subhead1"><a id="LNCPP20756"></a>Syntax</p>
<pre dir="ltr">void trim(
   unsigned int newlen);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of trim() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t94">Parameter</th>
<th class="cellalignment2204" id="r1c2-t94">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t94" headers="r1c1-t94">
<pre dir="ltr">newlen
</pre></td>
<td class="cellalignment2205" headers="r2c1-t94 r1c2-t94">The new length of the <code dir="ltr">CLOB</code>. Valid values are numbers less than or equal to the current length of the <code dir="ltr">CLOB</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20757" class="refsect2"><a id="i1076125"></a>
<h2 class="refsect2">write()</h2>
<p>Writes data from a buffer into a <code dir="ltr">CLOB</code>.</p>
<p>This method implicitly opens the <code dir="ltr">CLOB</code>, copies the buffer into the <code dir="ltr">CLOB</code>, and implicitly closes the <code dir="ltr">CLOB</code>. If the <code dir="ltr">CLOB</code> is open, use <a href="#i1130867">writeChunk()</a> instead. The actual number of characters written is returned. The client&#39;s character set id and form is used by default, unless they are explicitly set through <a href="#i1130838">setCharSetId()</a> and <a href="#i1076105">setCharSetForm()</a> calls.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of write() method" summary="First column lists method versions; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t95">Syntax</th>
<th class="cellalignment2204" id="r1c2-t95">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t95" headers="r1c1-t95">
<pre dir="ltr">unsigned int write(
   unsigned int amt,
   unsigned char *buffer,
   unsigned int bufsize,
   unsigned int offset=1);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t95 r1c2-t95">Writes data from a buffer into a <code dir="ltr">CLOB</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t95" headers="r1c1-t95">
<pre dir="ltr">unsigned int write(
   unsigned int amt,
   utext *buffer,
   unsigned int bufsize,
   unsigned int offset=1);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t95 r1c2-t95">Writes data from a UTF16 buffer into a <code dir="ltr">CLOB</code>; globalization enabled. Should be called after setting character set to OCCIUTF16 using <a href="#CACIFDAB">setCharSetIdUString()</a> method.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of write() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t96">Parameter</th>
<th class="cellalignment2204" id="r1c2-t96">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t96" headers="r1c1-t96">
<pre dir="ltr">amt
</pre></td>
<td class="cellalignment2205" headers="r2c1-t96 r1c2-t96">The amount parameter represents:
<ul>
<li>
<p>number of characters written for fixed-width charactersets (UTF16)</p>
</li>
<li>
<p>number of bytes written for multibyte charactersets (including UTF8)</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t96" headers="r1c1-t96">
<pre dir="ltr">buffer
</pre></td>
<td class="cellalignment2205" headers="r3c1-t96 r1c2-t96">The buffer containing the data to be written to the <code dir="ltr">CLOB</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t96" headers="r1c1-t96">
<pre dir="ltr">buffsize
</pre></td>
<td class="cellalignment2205" headers="r4c1-t96 r1c2-t96">The size of the buffer containing the data to be written to the <code dir="ltr">CLOB</code><code dir="ltr">.</code> Valid values are numbers greater than or equal to <code dir="ltr">amt</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t96" headers="r1c1-t96">
<pre dir="ltr">offset
</pre></td>
<td class="cellalignment2205" headers="r5c1-t96 r1c2-t96">The starting position at which to begin writing data into the <code dir="ltr">CLOB</code>. If <code dir="ltr">offset</code> is not specified, the data is written from the beginning of the <code dir="ltr">CLOB</code>. Valid values are numbers greater than or equal to 1.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20758" class="refsect2"><a id="i1130867"></a>
<h2 class="refsect2">writeChunk()</h2>
<p>Writes data from a buffer into a previously opened <code dir="ltr">CLOB</code>. Returns the actual number of characters. The client&#39;s character set id and form is used by default, unless they are explicitly set through <a href="#i1130838">setCharSetId()</a> and <a href="#i1076105">setCharSetForm()</a> calls.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of writeChunk() method" summary="First column lists method versions; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t97">Syntax</th>
<th class="cellalignment2204" id="r1c2-t97">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t97" headers="r1c1-t97">
<pre dir="ltr">unsigned int writeChunk(
   unsigned int amt,
   unsigned char *buffer,
   unsigned int bufsize,
   unsigned int offset=1);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t97 r1c2-t97">Writes data from a buffer into a previously opened <code dir="ltr">CLOB</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t97" headers="r1c1-t97">
<pre dir="ltr">unsigned int writeChunk(
   unsigned int amt,
   utext *buffer,
   unsigned int bufsize,
   unsigned int offset=1);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t97 r1c2-t97">Writes data from a UTF16 buffer into a <code dir="ltr">CLOB</code>; globalization enabled. Should be called after setting characterset to <code dir="ltr">OCCIUTF16</code> using <a href="#CACIFDAB">setCharSetIdUString()</a> method.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of writeChunk() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t98">Parameter</th>
<th class="cellalignment2204" id="r1c2-t98">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t98" headers="r1c1-t98">
<pre dir="ltr">amt
</pre></td>
<td class="cellalignment2205" headers="r2c1-t98 r1c2-t98">The amount parameter represents either a number of characters written for fixed-width charactersets (UTF16) or a number of bytes written for multibyte charactersets (including UTF8)</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t98" headers="r1c1-t98">
<pre dir="ltr">buffer
</pre></td>
<td class="cellalignment2205" headers="r3c1-t98 r1c2-t98">The buffer containing the data to be written to the <code dir="ltr">CLOB</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t98" headers="r1c1-t98">
<pre dir="ltr">buffsize
</pre></td>
<td class="cellalignment2205" headers="r4c1-t98 r1c2-t98">The size of the buffer containing the data to be written to the <code dir="ltr">CLOB</code><code dir="ltr">.</code> Valid values are numbers greater than or equal to <code dir="ltr">amt</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t98" headers="r1c1-t98">
<pre dir="ltr">offset
</pre></td>
<td class="cellalignment2205" headers="r5c1-t98 r1c2-t98">The starting position at which to begin writing data into the <code dir="ltr">CLOB</code>. If <code dir="ltr">offset</code> is not specified, the data is written from the beginning of the <code dir="ltr">CLOB</code>. Valid values are numbers greater than or equal to 1.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2196">
<tr>
<td class="cellalignment2205">
<table class="cellalignment2201">
<tr>
<td class="cellalignment2200"><a href="reference008.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2200"><a href="reference010.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2208">
<table class="cellalignment2199">
<tr>
<td class="cellalignment2200"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2200"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2200"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2200"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2200"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2200"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>