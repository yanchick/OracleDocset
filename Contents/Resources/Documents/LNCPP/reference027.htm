<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-73930"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/ResultSet%20Class"></a><title>ResultSet Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1082"/>
<meta name="dcterms.created" content="2016-06-01T12:8:12Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="C++ Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E48221-07"/>
<meta name="dcterms.isVersionOf" content="LNCPP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="reference026.htm" title="Previous" type="text/html"/>
<link rel="Next" href="reference028.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48221-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">47/54</span> <!-- End Header --><a id="i1079050"></a>
<div id="LNCPP1019" class="refsect1">
<h1 class="refsect1">Result<a id="sthref886"></a><a id="sthref887"></a><a id="sthref888"></a>Set Class</h1>
<p>A <code dir="ltr">ResultSet</code> provides access to a table of data generated by executing a <code dir="ltr">Statement</code>. Table rows are retrieved in sequence. Within a row, column values can be accessed in any order.</p>
<p>A <code dir="ltr">ResultSet</code> maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The <code dir="ltr">next</code> method moves the cursor to the next row.</p>
<p>The <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> methods retrieve column values for the current row. You can retrieve values using the index number of the column. Columns are numbered beginning at <code dir="ltr">1</code>. For the <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> methods, OCCI attempts to convert the underlying data to the specified C++ type and returns a C++ value. SQL types are mapped to C++ types with the <code dir="ltr">ResultSet::get</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> methods.</p>
<p>The number, types and properties of a <code dir="ltr">ResultSet</code>&#39;s columns are provided by the <code dir="ltr">MetaData</code> object returned by the <a href="#i1082585">getColumnListMetaData()</a> method.</p>
<div id="LNCPP21457" class="tblformal">
<p class="titleintable"><a id="sthref889"></a><a id="BBABCCHB"></a>Table 13-38 Enumerated Values Used by ResultSet Class</p>
<table class="cellalignment2203" title="Enumerated Values Used by ResultSet Class" summary="First column lists the attribute used by the class, the second column describes the options available to each attribute" dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t379">Attribute</th>
<th class="cellalignment2204" id="r1c2-t379">Options</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t379" headers="r1c1-t379">
<pre dir="ltr">Status
</pre></td>
<td class="cellalignment2205" headers="r2c1-t379 r1c2-t379">
<ul>
<li>
<p><code dir="ltr">DATA_AVAILABLE</code> indicates that data for one or more rows was successfully fetched from the server; up to the requested number of rows (<code dir="ltr">numRows</code>) were returned. When in streamed mode, use the <a href="#i1082540">getNumArrayRows()</a> method to determine the exact number of rows retrieved when <code dir="ltr">numRows</code> is greater than <code dir="ltr">1</code>.</p>
</li>
<li>
<p><code dir="ltr">STREAM_DATA_AVAILABLE</code> indicates that the application should call the <a href="#i1082551">getCurrentStreamColumn()</a> method and read stream.</p>
</li>
<li>
<p><code dir="ltr">END_OF_FETCH</code> indicates that no data was available for fetching.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP21458" class="tblformal">
<p class="titleintable"><a id="sthref890"></a><a id="sthref891"></a>Table 13-39 Summary of <a id="sthref892"></a><a id="sthref893"></a>ResultSet Methods</p>
<table class="cellalignment2203" title="Summary of ResultSet Methods " summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t380">Method</th>
<th class="cellalignment2204" id="r1c2-t380">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t380" headers="r1c1-t380">
<p><a href="#i1093998">cancel()</a></p>
</td>
<td class="cellalignment2205" headers="r2c1-t380 r1c2-t380">
<p>Cancels the <code dir="ltr">ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t380" headers="r1c1-t380">
<p><a href="#i1082060">closeStream()</a></p>
</td>
<td class="cellalignment2205" headers="r3c1-t380 r1c2-t380">
<p>Closes the specified <code dir="ltr">Stream</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t380" headers="r1c1-t380">
<p><a href="#CACEAFDB">getBDouble()</a></p>
</td>
<td class="cellalignment2205" headers="r4c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">BDouble.</code></p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t380" headers="r1c1-t380">
<p><a href="#i1104872">getBfile()</a></p>
</td>
<td class="cellalignment2205" headers="r5c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">Bfile.</code></p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t380" headers="r1c1-t380">
<p><a href="#CACCJEJF">getBFloat()</a></p>
</td>
<td class="cellalignment2205" headers="r6c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">BFloat.</code></p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t380" headers="r1c1-t380">
<p><a href="#i1082567">getBlob()</a></p>
</td>
<td class="cellalignment2205" headers="r7c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">Blob</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t380" headers="r1c1-t380">
<p><a href="#i1082566">getBytes()</a></p>
</td>
<td class="cellalignment2205" headers="r8c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">Bytes</code> array.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t380" headers="r1c1-t380">
<p><a href="#i1082553">getCharSet()</a></p>
</td>
<td class="cellalignment2205" headers="r9c1-t380 r1c2-t380">
<p>Returns the character set in which data would be fetched.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t380" headers="r1c1-t380">
<p><a href="#CACFCGJA">getCharSetUString()</a></p>
</td>
<td class="cellalignment2205" headers="r10c1-t380 r1c2-t380">
<p>Returns the character set in which data would be fetched as a <code dir="ltr">UString</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t380" headers="r1c1-t380">
<p><a href="#i1082552">getClob()</a></p>
</td>
<td class="cellalignment2205" headers="r11c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">Clob</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t380" headers="r1c1-t380">
<p><a href="#i1082585">getColumnListMetaData()</a></p>
</td>
<td class="cellalignment2205" headers="r12c1-t380 r1c2-t380">
<p>Returns the describe information of the result set columns as a <code dir="ltr">MetaData</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t380" headers="r1c1-t380">
<p><a href="#i1082551">getCurrentStreamColumn()</a></p>
</td>
<td class="cellalignment2205" headers="r13c1-t380 r1c2-t380">
<p>Returns the column index of the current readable <code dir="ltr">Stream.</code></p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t380" headers="r1c1-t380">
<p><a href="#i1082141">getCurrentStreamRow()</a></p>
</td>
<td class="cellalignment2205" headers="r14c1-t380 r1c2-t380">
<p>Returns the current row of the <code dir="ltr">ResultSet</code> being processed.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t380" headers="r1c1-t380">
<p><a href="#i1082550">getCursor()</a></p>
</td>
<td class="cellalignment2205" headers="r15c1-t380 r1c2-t380">
<p>Returns the nested cursor as a <code dir="ltr">ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t380" headers="r1c1-t380">
<p><a href="#i1082547">getDate()</a></p>
</td>
<td class="cellalignment2205" headers="r16c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">Date</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t380" headers="r1c1-t380">
<p><a href="#i1131388">getDatabaseNCHARParam()</a></p>
</td>
<td class="cellalignment2205" headers="r17c1-t380 r1c2-t380">
<p>Returns whether data is in NCHAR character set or not.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t380" headers="r1c1-t380">
<p><a href="#i1140070">getDouble()</a></p>
</td>
<td class="cellalignment2205" headers="r18c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a C++ double.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t380" headers="r1c1-t380">
<p><a href="#i1082549">getFloat()</a></p>
</td>
<td class="cellalignment2205" headers="r19c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a C++ float.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t380" headers="r1c1-t380">
<p><a href="#i1082546">getInt()</a></p>
</td>
<td class="cellalignment2205" headers="r20c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a C++ int.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t380" headers="r1c1-t380">
<p><a href="#i1082696">getIntervalDS()</a></p>
</td>
<td class="cellalignment2205" headers="r21c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">IntervalDS</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t380" headers="r1c1-t380">
<p><a href="#i1082703">getIntervalYM()</a></p>
</td>
<td class="cellalignment2205" headers="r22c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">IntervalYM</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r23c1-t380" headers="r1c1-t380">
<p><a href="#i1082545">getMaxColumnSize()</a></p>
</td>
<td class="cellalignment2205" headers="r23c1-t380 r1c2-t380">
<p>Returns the value set by <code dir="ltr">setMaxColumnSize()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r24c1-t380" headers="r1c1-t380">
<p><a href="#i1082540">getNumArrayRows()</a></p>
</td>
<td class="cellalignment2205" headers="r24c1-t380 r1c2-t380">
<p>Returns the actual number of rows fetched in the last array fetch.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r25c1-t380" headers="r1c1-t380">
<p><a href="#i1082541">getNumber()</a></p>
</td>
<td class="cellalignment2205" headers="r25c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">Number</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r26c1-t380" headers="r1c1-t380">
<p><a href="#i1082539">getObject()</a></p>
</td>
<td class="cellalignment2205" headers="r26c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">PObject</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r27c1-t380" headers="r1c1-t380">
<p><a href="#i1082305">getRef()</a></p>
</td>
<td class="cellalignment2205" headers="r27c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">Ref</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r28c1-t380" headers="r1c1-t380">
<p><a href="#i1082538">getRowid()</a></p>
</td>
<td class="cellalignment2205" headers="r28c1-t380 r1c2-t380">
<p>Returns the current <code dir="ltr">ROWID</code> for a <code dir="ltr">SELECT FOR UPDATE</code> statement.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r29c1-t380" headers="r1c1-t380">
<p><a href="#i1082537">getRowPosition()</a></p>
</td>
<td class="cellalignment2205" headers="r29c1-t380 r1c2-t380">
<p>Returns the row id of the current row position.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r30c1-t380" headers="r1c1-t380">
<p><a href="#i1082589">getStatement()</a></p>
</td>
<td class="cellalignment2205" headers="r30c1-t380 r1c2-t380">
<p>Returns the <code dir="ltr">Statement</code> of the <code dir="ltr">ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r31c1-t380" headers="r1c1-t380">
<p><a id="sthref894" href="#sthref894" onclick="footdisplay(0,&#34;getStream()&#34;)"><sup class="footnotenumber">Footref&nbsp;0</sup></a><a href="#i1082601">getStream()</a></p>
</td>
<td class="cellalignment2205" headers="r31c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">Stream</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r32c1-t380" headers="r1c1-t380">
<p><a href="#i1082536">getString()</a></p>
</td>
<td class="cellalignment2205" headers="r32c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a string.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r33c1-t380" headers="r1c1-t380">
<p><a href="#i1082535">getTimestamp()</a></p>
</td>
<td class="cellalignment2205" headers="r33c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">Timestamp</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r34c1-t380" headers="r1c1-t380">
<p><a href="#i1082406">getUInt()</a></p>
</td>
<td class="cellalignment2205" headers="r34c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a C++ unsigned int</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r35c1-t380" headers="r1c1-t380">
<p><a href="#CHEHEDJH">getUString()</a></p>
</td>
<td class="cellalignment2205" headers="r35c1-t380 r1c2-t380">
<p>Returns the value of a column in the current row as a <code dir="ltr">UString</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r36c1-t380" headers="r1c1-t380">
<p><a href="#i1120796">getVector()</a></p>
</td>
<td class="cellalignment2205" headers="r36c1-t380 r1c2-t380">
<p>Returns the specified collection parameter as a vector.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r37c1-t380" headers="r1c1-t380">
<p><a href="#i1121213">getVectorOfRefs()</a></p>
</td>
<td class="cellalignment2205" headers="r37c1-t380 r1c2-t380">
<p>Returns the column in the current position as a vector of <code dir="ltr">Ref</code>s.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r38c1-t380" headers="r1c1-t380">
<p><a href="#i1082534">isNull()</a></p>
</td>
<td class="cellalignment2205" headers="r38c1-t380 r1c2-t380">
<p>Checks whether the value is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r39c1-t380" headers="r1c1-t380">
<p><a href="#i1106789">isTruncated()</a></p>
</td>
<td class="cellalignment2205" headers="r39c1-t380 r1c2-t380">
<p>Checks whether truncation has occurred.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r40c1-t380" headers="r1c1-t380">
<p><a href="#i1082533">next()</a></p>
</td>
<td class="cellalignment2205" headers="r40c1-t380 r1c2-t380">
<p>Makes the next row the current row in a <code dir="ltr">ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r41c1-t380" headers="r1c1-t380">
<p><a href="#i1106935">preTruncationLength()</a></p>
</td>
<td class="cellalignment2205" headers="r41c1-t380 r1c2-t380">
<p>Returns the actual length of the parameter before truncation.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r42c1-t380" headers="r1c1-t380">
<p><a href="#i1082622">setBinaryStreamMode()</a></p>
</td>
<td class="cellalignment2205" headers="r42c1-t380 r1c2-t380">
<p>Specifies that a column is to be returned as a binary stream.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r43c1-t380" headers="r1c1-t380">
<p><a href="#i1082629">setCharacterStreamMode()</a></p>
</td>
<td class="cellalignment2205" headers="r43c1-t380 r1c2-t380">
<p>Specifies that a column is to be returned as a character stream.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r44c1-t380" headers="r1c1-t380">
<p><a href="#i1082532">setCharSet()</a></p>
</td>
<td class="cellalignment2205" headers="r44c1-t380 r1c2-t380">
<p>Specifies the character set in which the data is to be returned.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r45c1-t380" headers="r1c1-t380">
<p><a href="#CACCCDFG">setCharSetUString()</a></p>
</td>
<td class="cellalignment2205" headers="r45c1-t380 r1c2-t380">
<p>Specifies the character set in which the data is to be returned.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r46c1-t380" headers="r1c1-t380">
<p><a href="#i1131450">setDatabaseNCHARParam()</a></p>
</td>
<td class="cellalignment2205" headers="r46c1-t380 r1c2-t380">
<p>If the parameter is going to be retrieved from a column that contains data in the database&#39;s NCHAR character set, then OCCI must be informed by passing a true value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r47c1-t380" headers="r1c1-t380">
<p><a href="#i1082531">setDataBuffer()</a></p>
</td>
<td class="cellalignment2205" headers="r47c1-t380 r1c2-t380">
<p>Specifies the data buffer into which data is to be fetched, or the gather and scatter binds and defines made.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r48c1-t380" headers="r1c1-t380">
<p><a href="#i1082572">setErrorOnNull()</a></p>
</td>
<td class="cellalignment2205" headers="r48c1-t380 r1c2-t380">
<p>Enables Or Disables exception when <code dir="ltr">NULL</code> value is read.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r49c1-t380" headers="r1c1-t380">
<p><a href="#i1106692">setErrorOnTruncate()</a></p>
</td>
<td class="cellalignment2205" headers="r49c1-t380 r1c2-t380">
<p>Enables Or Disables exception when truncation occurs.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r50c1-t380" headers="r1c1-t380">
<p><a href="#BBAEJGFI">setPrefetchMemorySize()</a></p>
</td>
<td class="cellalignment2205" headers="r50c1-t380 r1c2-t380">
<p>Sets the amount of memory that is used internally by OCCI to store data fetched during each round trip to the server.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r51c1-t380" headers="r1c1-t380">
<p><a href="#BBAJJCHA">setPrefetchRowCount()</a></p>
</td>
<td class="cellalignment2205" headers="r51c1-t380 r1c2-t380">
<p>Sets the number of rows that are fetched internally by OCCI during each round trip to the server.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r52c1-t380" headers="r1c1-t380">
<p><a href="#i1101782">setMaxColumnSize()</a></p>
</td>
<td class="cellalignment2205" headers="r52c1-t380 r1c2-t380">
<p>Specifies the maximum amount of data in bytes to read from a column. It should be based on the environment&#39;s character set, in which the <code dir="ltr">env</code> has been created.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r53c1-t380" headers="r1c1-t380">
<p><a href="#i1076893">status()</a></p>
</td>
<td class="cellalignment2205" headers="r53c1-t380 r1c2-t380">
<p>Returns the current status of the <code dir="ltr">ResultSet</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP21459" class="refsect2"><a id="i1093998"></a>
<h2 class="refsect2">cancel()</h2>
<p>This method cancels the result set.</p>
<p class="subhead1"><a id="LNCPP21460"></a>Syntax</p>
<pre dir="ltr">void cancel();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21461" class="refsect2"><a id="i1082060"></a>
<h2 class="refsect2">closeStream()</h2>
<p>This method closes the stream specified by the parameter <code dir="ltr">stream</code>.</p>
<p class="subhead1"><a id="LNCPP21462"></a>Syntax</p>
<pre dir="ltr">void closeStream(
   Stream *stream); 
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of closeStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t381">Parameter</th>
<th class="cellalignment2204" id="r1c2-t381">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t381" headers="r1c1-t381">
<pre dir="ltr">stream
</pre></td>
<td class="cellalignment2205" headers="r2c1-t381 r1c2-t381">The <code dir="ltr">Stream</code> to be closed.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21463" class="refsect2"><a id="CACEAFDB"></a>
<h2 class="refsect2">getBDouble()</h2>
<p>This method returns the value of a column in the current row as a <code dir="ltr">BDouble</code>. If the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21464"></a>Syntax</p>
<pre dir="ltr">BDouble getBDouble(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getBfile() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t382">Parameter</th>
<th class="cellalignment2204" id="r1c2-t382">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t382" headers="r1c1-t382">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t382 r1c2-t382">Column index, first column is <code dir="ltr">1</code>, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21465" class="refsect2"><a id="i1104872"></a>
<h2 class="refsect2">getBfile()</h2>
<p>This method returns the value of a column in the current row as a <code dir="ltr">Bfile</code>. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21466"></a>Syntax</p>
<pre dir="ltr">Bfile getBfile(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getBfile() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t383">Parameter</th>
<th class="cellalignment2204" id="r1c2-t383">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t383" headers="r1c1-t383">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t383 r1c2-t383">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21467" class="refsect2"><a id="CACCJEJF"></a>
<h2 class="refsect2">getBFloat()</h2>
<p>This method returns the value of a column in the current row as a <code dir="ltr">BFloat</code>. If the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21468"></a>Syntax</p>
<pre dir="ltr">BFloat getBFloat(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getBfile() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t384">Parameter</th>
<th class="cellalignment2204" id="r1c2-t384">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t384" headers="r1c1-t384">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t384 r1c2-t384">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21469" class="refsect2"><a id="i1082567"></a>
<h2 class="refsect2">getBlob()</h2>
<p>Get the value of a column in the current row as an <code dir="ltr">Blob</code>. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21470"></a>Syntax</p>
<pre dir="ltr">Blob getBlob(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getBlob) method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t385">Parameter</th>
<th class="cellalignment2204" id="r1c2-t385">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t385" headers="r1c1-t385">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t385 r1c2-t385">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21471" class="refsect2"><a id="i1082566"></a>
<h2 class="refsect2">getBytes()</h2>
<p>Get the value of a column in the current row as a <code dir="ltr">Bytes</code> array. The bytes represent the raw values returned by the server. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code> array</p>
<p class="subhead1"><a id="LNCPP21472"></a>Syntax</p>
<pre dir="ltr">Bytes getBytes(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getBytes() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t386">Parameter</th>
<th class="cellalignment2204" id="r1c2-t386">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t386" headers="r1c1-t386">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t386 r1c2-t386">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21473" class="refsect2"><a id="i1082553"></a>
<h2 class="refsect2">getCharSet()</h2>
<p>Gets the character set in which data would be fetched, as a string.</p>
<p class="subhead1"><a id="LNCPP21474"></a>Syntax</p>
<pre dir="ltr">string getCharSet(
   unsigned int colIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getCharSet() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t387">Parameter</th>
<th class="cellalignment2204" id="r1c2-t387">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t387" headers="r1c1-t387">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t387 r1c2-t387">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21475" class="refsect2"><a id="CACFCGJA"></a>
<h2 class="refsect2">getCharSetUString()</h2>
<p>Gets the character set in which data would be fetched, as a string.</p>
<p class="subhead1"><a id="LNCPP21476"></a>Syntax</p>
<pre dir="ltr">UString getCharSetUString(
   unsigned int colIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getCharSetUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t388">Parameter</th>
<th class="cellalignment2204" id="r1c2-t388">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t388" headers="r1c1-t388">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t388 r1c2-t388">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21477" class="refsect2"><a id="i1082552"></a>
<h2 class="refsect2">getClob()</h2>
<p>Get the value of a column in the current row as a <code dir="ltr">Clob</code>. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21478"></a>Syntax</p>
<pre dir="ltr">Clob getClob(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getClob() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t389">Parameter</th>
<th class="cellalignment2204" id="r1c2-t389">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t389" headers="r1c1-t389">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t389 r1c2-t389">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21479" class="refsect2"><a id="i1082585"></a>
<h2 class="refsect2">getColumnListMetaData()</h2>
<p>The number, types and properties of a <code dir="ltr">ResultSet</code>&#39;s columns are provided by the <code dir="ltr">getMetaData</code> method. Returns the description of a <code dir="ltr">ResultSet</code>&#39;s columns. This method returns the value of the given column as a <code dir="ltr">PObject</code>. The type of the C++ object is the C++ <code dir="ltr">PObject</code> type corresponding to the column&#39;s SQL type registered with <code dir="ltr">Environment</code>&#39;s map. This method is used to materialize data of SQL user-defined types.</p>
<p class="subhead1"><a id="LNCPP21480"></a>Syntax</p>
<pre dir="ltr">vector&lt;MetaData&gt; getColumnListMetaData() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21481" class="refsect2"><a id="i1082551"></a>
<h2 class="refsect2">getCurrentStreamColumn()</h2>
<p>If the result set has any input <code dir="ltr">Stream</code> parameters, this method returns the column index of the current input <code dir="ltr">Stream</code> that must be read. If no output <code dir="ltr">Stream</code> must be read, or there are no input <code dir="ltr">Stream</code> columns in the result set, this method returns <code dir="ltr">0</code>. Returns the column index of the current input <code dir="ltr">Stream</code> column that must be read.</p>
<p class="subhead1"><a id="LNCPP21482"></a>Syntax</p>
<pre dir="ltr">unsigned int getCurrentStreamColumn() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21483" class="refsect2"><a id="i1082141"></a>
<h2 class="refsect2">getCurrentStreamRow()</h2>
<p>If the result has any input <code dir="ltr">Stream</code>s, this method returns the current row of the result set that is being processed by OCCI. If this method is called after all the rows in the set of array of rows have been processed, it returns <code dir="ltr">0</code>. Returns the row number of the current row that is being processed. The first row is numbered <code dir="ltr">1</code> and so on.</p>
<p class="subhead1"><a id="LNCPP21484"></a>Syntax</p>
<pre dir="ltr">unsigned int getCurrentStreamRow() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21485" class="refsect2"><a id="i1082550"></a>
<h2 class="refsect2">getCursor()</h2>
<p>Get the nested cursor as an <code dir="ltr">ResultSet</code>. Data can be fetched from this result set. A nested cursor results from a nested query with a <code dir="ltr">CURSOR(SELECT...)</code> clause:</p>
<pre dir="ltr">SELECT last_name, 
       CURSOR(SELECT  department_name FROM departments) 
FROM employees WHERE last_name = &#39;JONES&#39;
</pre>
<p>Note that if there are multiple <code dir="ltr">REF</code> <code dir="ltr">CURSOR</code>s being returned, data from each cursor must be completely fetched before retrieving the next <code dir="ltr">REF</code> <code dir="ltr">CURSOR</code> and starting fetch on it. Returns A <code dir="ltr">ResultSet</code> for the nested cursor.</p>
<p class="subhead1"><a id="LNCPP21486"></a>Syntax</p>
<pre dir="ltr">ResultSet * getCursor(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getCuros() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t390">Parameter</th>
<th class="cellalignment2204" id="r1c2-t390">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t390" headers="r1c1-t390">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t390 r1c2-t390">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21487" class="refsect2"><a id="i1131388"></a>
<h2 class="refsect2">getDatabaseNCHARParam()</h2>
<p>Returns whether data is in <code dir="ltr">NCHAR</code> character set or not.</p>
<p class="subhead1"><a id="LNCPP21488"></a>Syntax</p>
<pre dir="ltr">bool getDatabaseNCHARParam(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getDatabseNCHARParam() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t391">Parameter</th>
<th class="cellalignment2204" id="r1c2-t391">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t391" headers="r1c1-t391">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t391 r1c2-t391">Parameter index, first parameter is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21489" class="refsect2"><a id="i1082547"></a>
<h2 class="refsect2">getDate()</h2>
<p>Get the value of a column in the current row as a <code dir="ltr">Date</code> object. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21490"></a>Syntax</p>
<pre dir="ltr">Date getDate(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getDate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t392">Parameter</th>
<th class="cellalignment2204" id="r1c2-t392">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t392" headers="r1c1-t392">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t392 r1c2-t392">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21491" class="refsect2"><a id="i1140070"></a>
<h2 class="refsect2">getDouble()</h2>
<p>Gets the value of a column in the current row as a C++ double. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">0</code>.</p>
<p class="subhead1"><a id="LNCPP21492"></a>Syntax</p>
<pre dir="ltr">double getDouble(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getDouble() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t393">Parameter</th>
<th class="cellalignment2204" id="r1c2-t393">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t393" headers="r1c1-t393">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t393 r1c2-t393">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21493" class="refsect2"><a id="i1082549"></a>
<h2 class="refsect2">getFloat()</h2>
<p>Get the value of a column in the current row as a C++ float. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">0</code>.</p>
<p class="subhead1"><a id="LNCPP21494"></a>Syntax</p>
<pre dir="ltr">float getFloat(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getFloat() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t394">Parameter</th>
<th class="cellalignment2204" id="r1c2-t394">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t394" headers="r1c1-t394">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t394 r1c2-t394">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21495" class="refsect2"><a id="i1082546"></a>
<h2 class="refsect2">getInt()</h2>
<p>Get the value of a column in the current row as a C++ int. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">0</code>.</p>
<p class="subhead1"><a id="LNCPP21496"></a>Syntax</p>
<pre dir="ltr">int getInt(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getInt() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t395">Parameter</th>
<th class="cellalignment2204" id="r1c2-t395">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t395" headers="r1c1-t395">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t395 r1c2-t395">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21497" class="refsect2"><a id="i1082696"></a>
<h2 class="refsect2">getIntervalDS()</h2>
<p>Get the value of a column in the current row as a <code dir="ltr">IntervalDS</code> object. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21498"></a>Syntax</p>
<pre dir="ltr">IntervalDS getIntervalDS(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getIntervalDS() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t396">Parameter</th>
<th class="cellalignment2204" id="r1c2-t396">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t396" headers="r1c1-t396">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t396 r1c2-t396">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21499" class="refsect2"><a id="i1082703"></a>
<h2 class="refsect2">getIntervalYM()</h2>
<p>Get the value of a column in the current row as a <code dir="ltr">IntervalYM</code> object. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL.</code></p>
<p class="subhead1"><a id="LNCPP21500"></a>Syntax</p>
<pre dir="ltr">IntervalYM getIntervalYM(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getIntervalYM() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t397">Parameter</th>
<th class="cellalignment2204" id="r1c2-t397">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t397" headers="r1c1-t397">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t397 r1c2-t397">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21501" class="refsect2"><a id="i1082545"></a>
<h2 class="refsect2">getMaxColumnSize()</h2>
<p>Get the value set by <a href="#i1101782">setMaxColumnSize()</a>.</p>
<p class="subhead1"><a id="LNCPP21502"></a>Syntax</p>
<pre dir="ltr">unsigned int getMaxColumnSize(
   unsigned int colIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getMaxColumnSize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t398">Parameter</th>
<th class="cellalignment2204" id="r1c2-t398">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t398" headers="r1c1-t398">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t398 r1c2-t398">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21503" class="refsect2"><a id="i1082540"></a>
<h2 class="refsect2">getNumArrayRows()</h2>
<p>Returns the actual number of rows fetched in the last array fetch. Used in conjunction with the <a href="#i1082533">next()</a> method. This method cannot be used for non-array fetches.</p>
<p class="subhead1"><a id="LNCPP21504"></a>Syntax</p>
<pre dir="ltr">unsigned int getNumArrayRows() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21505" class="refsect2"><a id="i1082541"></a>
<h2 class="refsect2">getNumber()</h2>
<p>Get the value of a column in the current row as a <code dir="ltr">Number</code> object. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21506"></a>Syntax</p>
<pre dir="ltr">Number getNumber(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getNumber() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t399">Parameter</th>
<th class="cellalignment2204" id="r1c2-t399">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t399" headers="r1c1-t399">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t399 r1c2-t399">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21507" class="refsect2"><a id="i1082539"></a>
<h2 class="refsect2">getObject()</h2>
<p>Returns a pointer to a <code dir="ltr">PObject</code> holding the column value.</p>
<p class="subhead1"><a id="LNCPP21508"></a>Syntax</p>
<pre dir="ltr">PObject * getObject(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getObject() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t400">Parameter</th>
<th class="cellalignment2204" id="r1c2-t400">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t400" headers="r1c1-t400">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t400 r1c2-t400">Column index; first column is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21509" class="refsect2"><a id="i1082305"></a>
<h2 class="refsect2">getRef()</h2>
<p>Get the value of a column in the current row as a <code dir="ltr">RefAny</code>. Retrieving a <code dir="ltr">Ref</code> value does not materialize the data to which <code dir="ltr">Ref</code> refers. Also the <code dir="ltr">Ref</code> value remains valid while the session or connection on which it is created is open. Returns a <code dir="ltr">RefAny</code> holding the column value.</p>
<p class="subhead1"><a id="LNCPP21510"></a>Syntax</p>
<pre dir="ltr">RefAny getRef(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getRef() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t401">Parameter</th>
<th class="cellalignment2204" id="r1c2-t401">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t401" headers="r1c1-t401">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t401 r1c2-t401">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21511" class="refsect2"><a id="i1082538"></a>
<h2 class="refsect2">getRowid()</h2>
<p>Get the current row id for a <code dir="ltr">SELECT...FOR&nbsp;UPDATE</code> statement. The row id can be bound to a prepared <code dir="ltr">DELETE</code> statement and so on. Returns current <code dir="ltr">rowid</code> for a <code dir="ltr">SELECT...FOR&nbsp;UPDATE</code> statement.</p>
<p class="subhead1"><a id="LNCPP21512"></a>Syntax</p>
<pre dir="ltr">Bytes getRowid(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getRowid() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t402">Parameter</th>
<th class="cellalignment2204" id="r1c2-t402">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t402" headers="r1c1-t402">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t402 r1c2-t402">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21513" class="refsect2"><a id="i1082537"></a>
<h2 class="refsect2">getRowPosition()</h2>
<p>Get the <code dir="ltr">rowid</code> of the current row position.</p>
<p class="subhead1"><a id="LNCPP21514"></a>Syntax</p>
<pre dir="ltr">Bytes getRowPosition() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21515" class="refsect2"><a id="i1082589"></a>
<h2 class="refsect2">getStatement()</h2>
<p>This method returns the <code dir="ltr">statement</code> of the <code dir="ltr">ResultSet</code>.</p>
<p class="subhead1"><a id="LNCPP21516"></a>Syntax</p>
<pre dir="ltr">Statement* getStatement() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21517" class="refsect2"><a id="i1082601"></a>
<h2 class="refsect2">getStream()</h2>
<p>This method returns the value of a column in the current row as a <code dir="ltr">Stream</code>.</p>
<p class="subhead1"><a id="LNCPP21518"></a>Syntax</p>
<pre dir="ltr">Stream * getStream(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t403">Parameter</th>
<th class="cellalignment2204" id="r1c2-t403">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t403" headers="r1c1-t403">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t403 r1c2-t403">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21519" class="refsect2"><a id="i1082536"></a>
<h2 class="refsect2">getString()</h2>
<p>Get the value of a column in the current row as a string. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is an empty string.</p>
<p class="subhead1"><a id="LNCPP21520"></a>Syntax</p>
<pre dir="ltr">string getString(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t404">Parameter</th>
<th class="cellalignment2204" id="r1c2-t404">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t404" headers="r1c1-t404">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t404 r1c2-t404">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21521" class="refsect2"><a id="i1082535"></a>
<h2 class="refsect2">getTimestamp()</h2>
<p>Get the value of a column in the current row as a Timestamp object. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21522"></a>Syntax</p>
<pre dir="ltr">Timestamp getTimestamp(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getTimestamp() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t405">Parameter</th>
<th class="cellalignment2204" id="r1c2-t405">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t405" headers="r1c1-t405">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t405 r1c2-t405">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21523" class="refsect2"><a id="i1082406"></a>
<h2 class="refsect2">getUInt()</h2>
<p>Get the value of a column in the current row as a C++ <code dir="ltr">int</code>. Returns the column value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">0</code>.</p>
<p class="subhead1"><a id="LNCPP21524"></a>Syntax</p>
<pre dir="ltr">unsigned int getUInt(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getUIntl() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t406">Parameter</th>
<th class="cellalignment2204" id="r1c2-t406">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t406" headers="r1c1-t406">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t406 r1c2-t406">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21525" class="refsect2"><a id="CHEHEDJH"></a>
<h2 class="refsect2">getUString()</h2>
<p>Returns the value as a <code dir="ltr">UString</code>.</p>
<p>This method should be called only if the environment&#39;s character set is UTF16, or if <code dir="ltr">setCharset()</code> method has been called to explicitly retrieve UTF16 data.</p>
<p class="subhead1"><a id="LNCPP21526"></a>Syntax</p>
<pre dir="ltr">UString getUString(
   unsigned int colIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t407">Parameter</th>
<th class="cellalignment2204" id="r1c2-t407">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t407" headers="r1c1-t407">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t407 r1c2-t407">Column index; first column is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21527" class="refsect2"><a id="i1120796"></a>
<h2 class="refsect2">getVector()</h2>
<p>This method returns the column in the current position as a vector. The column should be a collection type (varray or nested table). The SQL type of the elements in the collection should be compatible with the data type of the objects in the vector.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of getVector() method." summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t408">Syntax</th>
<th class="cellalignment2204" id="r1c2-t408">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;BDouble&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t408 r1c2-t408">Used for <code dir="ltr">BDouble</code> vectors.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;Bfile&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t408 r1c2-t408">Used for <code dir="ltr">Bfile</code> vectors.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;BFloat&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r4c1-t408 r1c2-t408">Used for <code dir="ltr">BFloat</code> vectors.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;Blob&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r5c1-t408 r1c2-t408">Used for <code dir="ltr">Blob</code> vectors.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;Bytes&gt; &amp;vect); 
</pre></td>
<td class="cellalignment2205" headers="r6c1-t408 r1c2-t408">Used for vectors of <a href="reference008.htm#i1119060">Bytes Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;Clob&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r7c1-t408 r1c2-t408">Used for <code dir="ltr">Clob</code> vectors.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;Date&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r8c1-t408 r1c2-t408">Used for vectors of <a href="reference013.htm#i1079044">Date Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;double&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r9c1-t408 r1c2-t408">Used for vectors of <code dir="ltr">double</code> type.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;float&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r10c1-t408 r1c2-t408">Used for vectors of <code dir="ltr">float</code> type.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;int&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r11c1-t408 r1c2-t408">Used for vectors of <code dir="ltr">int</code> type.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;IntervalDS&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r12c1-t408 r1c2-t408">Used for vectors of <a href="reference015.htm#i1066767">IntervalDS Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;IntervalYM&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r13c1-t408 r1c2-t408">Used for vectors of <a href="reference016.htm#i1080017">IntervalYM Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;Number&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r14c1-t408 r1c2-t408">Used for vectors of <a href="reference022.htm#i1018892">Number Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;Ref&lt;T&gt;&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r15c1-t408 r1c2-t408">Available only on platforms where partial ordering of function templates is supported. This function may be deprecated in the future. <a href="#i1121213">getVectorOfRefs()</a> can be used instead.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;RefAny&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r16c1-t408 r1c2-t408">Used for vectors of <a href="reference026.htm#i1109327">RefAny Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;string&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r17c1-t408 r1c2-t408">Used for vectors of <code dir="ltr">string</code> type.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;T *&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r18c1-t408 r1c2-t408">Intended for use on platforms where partial ordering of function templates is supported.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;T&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r19c1-t408 r1c2-t408">Intended for use on platforms where partial ordering of function templates is not supported, such as Windows NT and z/OS.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;Timestamp&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r20c1-t408 r1c2-t408">Used for vectors of <a href="reference033.htm#i1118557">Timestamp Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;unsigned int&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r21c1-t408 r1c2-t408">Used for vectors of <code dir="ltr">unsigned int</code> type.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t408" headers="r1c1-t408">
<pre dir="ltr">void getVector(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt;UString&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r22c1-t408 r1c2-t408">Used for vectors of <code dir="ltr">UString</code> Class; globalization enabled.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getVector() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t409">Parameter</th>
<th class="cellalignment2204" id="r1c2-t409">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t409" headers="r1c1-t409">
<pre dir="ltr">rs
</pre></td>
<td class="cellalignment2205" headers="r2c1-t409 r1c2-t409">The result set</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t409" headers="r1c1-t409">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r3c1-t409 r1c2-t409">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t409" headers="r1c1-t409">
<pre dir="ltr">vect
</pre></td>
<td class="cellalignment2205" headers="r4c1-t409 r1c2-t409">The reference to the vector (<code dir="ltr">OUT</code> parameter).</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21528" class="refsect2"><a id="i1121213"></a>
<h2 class="refsect2">getVectorOfRefs()</h2>
<p>Returns the column in the current position as a vector of <code dir="ltr">REF</code>s. The column should be a collection type (varray or nested table) of <code dir="ltr">REF</code>s. It is recommend to use this function instead of specialized method <a href="reference020.htm#i1070965">getVector()</a> for <code dir="ltr">Ref&lt;T&gt;</code>.</p>
<p class="subhead1"><a id="LNCPP21529"></a>Syntax</p>
<pre dir="ltr">void getVectorOfRefs(
   ResultSet *rs,
   unsigned int colIndex,
   vector&lt; Ref&lt;T&gt; &gt; &amp;vect);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getVectorOfRefs() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t410">Parameter</th>
<th class="cellalignment2204" id="r1c2-t410">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t410" headers="r1c1-t410">
<pre dir="ltr">rs
</pre></td>
<td class="cellalignment2205" headers="r2c1-t410 r1c2-t410">The result set</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t410" headers="r1c1-t410">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r3c1-t410 r1c2-t410">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t410" headers="r1c1-t410">
<pre dir="ltr">vect
</pre></td>
<td class="cellalignment2205" headers="r4c1-t410 r1c2-t410">The reference to the vector of <code dir="ltr">REF</code>s (<code dir="ltr">OUT</code> parameter).</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21530" class="refsect2"><a id="i1082534"></a>
<h2 class="refsect2">isNull()</h2>
<p>A column may have the value of SQL <code dir="ltr">NULL</code>; <code dir="ltr">isNull()</code> reports whether the last column read had this special value. Note that you must first call <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> on a column to try to read its value and then call <code dir="ltr">isNull()</code> to find if the value was the SQL <code dir="ltr">NULL</code>. Returns <code dir="ltr">TRUE</code> if last column read was SQL <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21531"></a>Syntax</p>
<pre dir="ltr">bool isNull(
   unsigned int colIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of isNull() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t411">Parameter</th>
<th class="cellalignment2204" id="r1c2-t411">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t411" headers="r1c1-t411">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t411 r1c2-t411">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21532" class="refsect2"><a id="i1106789"></a>
<h2 class="refsect2">isTruncated()</h2>
<p>This method checks whether the value of the parameter is truncated. If the value of the parameter is truncated, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21533"></a>Syntax</p>
<pre dir="ltr">bool isTruncated(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of isTruncated() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t412">Parameter</th>
<th class="cellalignment2204" id="r1c2-t412">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t412" headers="r1c1-t412">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t412 r1c2-t412">Parameter index, first parameter is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21534" class="refsect2"><a id="i1082533"></a>
<h2 class="refsect2">next()</h2>
<p>This method fetches a specified number of rows, <code dir="ltr">numRows</code>, from a previously executed query, and reports the <code dir="ltr">Status</code> of this fetch as defined in <a href="#BBABCCHB">Table 13-38</a>.</p>
<p>For non-streamed mode, <a href="#i1082533">next()</a> only returns the status of <code dir="ltr">DATA_AVAILABLE</code> or <code dir="ltr">END_OF_FETCH</code>.</p>
<ul>
<li>
<p>When fetching one row at a time (<code dir="ltr">numRows</code>=1), process the data using <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> methods.</p>
</li>
<li>
<p>When fetching several rows at once (<code dir="ltr">numRows&gt;1</code>), as in an Array Fetch, you must use the <a href="#i1082531">setDataBuffer()</a> method to specify the location of your preallocated buffers before invoking <a href="#i1082533">next()</a>.</p>
</li>
</ul>
<p>Up to <code dir="ltr">numRows</code> data records would populate the buffers specified by the <a href="#i1082531">setDataBuffer()</a> call. To determine exactly how many records were returned, use the <a href="#i1082540">getNumArrayRows()</a> method.</p>
<p class="subhead1"><a id="LNCPP21535"></a>Syntax</p>
<pre dir="ltr">Status next(
   unsigned int numRows =1);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of next() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t413">Parameter</th>
<th class="cellalignment2204" id="r1c2-t413">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t413" headers="r1c1-t413">
<pre dir="ltr">numRows
</pre></td>
<td class="cellalignment2205" headers="r2c1-t413 r1c2-t413">Number of rows to fetch for array fetches.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21536" class="refsect2"><a id="i1106935"></a>
<h2 class="refsect2">preTruncationLength()</h2>
<p>Returns the actual length of the parameter before truncation.</p>
<p class="subhead1"><a id="LNCPP21537"></a>Syntax</p>
<pre dir="ltr">int preTruncationLength(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of preTruncationLength() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t414">Parameter</th>
<th class="cellalignment2204" id="r1c2-t414">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t414" headers="r1c1-t414">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t414 r1c2-t414">Parameter index, first parameter is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21538" class="refsect2"><a id="i1082622"></a>
<h2 class="refsect2">setBinaryStreamMode()</h2>
<p>Defines that a column is to be returned as a binary stream by the <code dir="ltr">getStream</code> method.</p>
<p class="subhead1"><a id="LNCPP21539"></a>Syntax</p>
<pre dir="ltr">void setBinaryStreamMode(
   unsigned int colIndex,
   unsigned int size);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setBinaryStreamMode() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t415">Parameter</th>
<th class="cellalignment2204" id="r1c2-t415">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t415" headers="r1c1-t415">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t415 r1c2-t415">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t415" headers="r1c1-t415">
<pre dir="ltr">size
</pre></td>
<td class="cellalignment2205" headers="r3c1-t415 r1c2-t415">The amount of data to be read as a binary stream.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21540" class="refsect2"><a id="i1082629"></a>
<h2 class="refsect2">setCharacterStreamMode()</h2>
<p>Defines that a column is to be returned as a character stream by the <a href="reference009.htm#i1089333">getStream()</a> method.</p>
<p class="subhead1"><a id="LNCPP21541"></a>Syntax</p>
<pre dir="ltr">void setCharacterStreamMode(
   unsigned int colIndex,
   unsigned int size);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setCharacterStreamMode() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t416">Parameter</th>
<th class="cellalignment2204" id="r1c2-t416">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t416" headers="r1c1-t416">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t416 r1c2-t416">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t416" headers="r1c1-t416">
<pre dir="ltr">size
</pre></td>
<td class="cellalignment2205" headers="r3c1-t416 r1c2-t416">The amount of data to be read as a character stream.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21542" class="refsect2"><a id="i1082532"></a>
<h2 class="refsect2">setCharSet()</h2>
<p>Overrides the default character set for the specified column. Data is converted from the database character set to the specified character set for this column.</p>
<p class="subhead1"><a id="LNCPP21543"></a>Syntax</p>
<pre dir="ltr">void setCharSet(
   unsigned int colIndex,
   string charSet);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setCharSet() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t417">Parameter</th>
<th class="cellalignment2204" id="r1c2-t417">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t417" headers="r1c1-t417">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t417 r1c2-t417">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t417" headers="r1c1-t417">
<pre dir="ltr">charSet
</pre></td>
<td class="cellalignment2205" headers="r3c1-t417 r1c2-t417">Desired character set, as a string.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21544" class="refsect2"><a id="CACCCDFG"></a>
<h2 class="refsect2">setCharSetUString()</h2>
<p>Specifies the character set value as a <code dir="ltr">UString</code> in which the data is returned.</p>
<p class="subhead1"><a id="LNCPP21545"></a>Syntax</p>
<pre dir="ltr">UString setCharSetUString(
   unsigned int colIndex,
   const UString &amp;charSet);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setCharSetUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t418">Parameter</th>
<th class="cellalignment2204" id="r1c2-t418">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t418" headers="r1c1-t418">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t418 r1c2-t418">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t418" headers="r1c1-t418">
<pre dir="ltr">charSet
</pre></td>
<td class="cellalignment2205" headers="r3c1-t418 r1c2-t418">Desired character set, as a string.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21546" class="refsect2"><a id="i1131450"></a>
<h2 class="refsect2">setDatabaseNCHARParam()</h2>
<p>If the parameter is going to be retrieved from a column that contains data in the database&#39;s <code dir="ltr">NCHAR</code> character set, then OCCI must be informed by passing a <code dir="ltr">TRUE</code> value. A <code dir="ltr">FALSE</code> can be passed to restore the default.</p>
<p class="subhead1"><a id="LNCPP21547"></a>Syntax</p>
<pre dir="ltr">void setDatabaseNCHARParam(
   unsigned int paramIndex, 
   bool isNCHAR);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setDatabaseNCHARParam() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t419">Parameter</th>
<th class="cellalignment2204" id="r1c2-t419">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t419" headers="r1c1-t419">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t419 r1c2-t419">Parameter index, first parameter is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t419" headers="r1c1-t419">
<pre dir="ltr">isNCHAR
</pre></td>
<td class="cellalignment2205" headers="r3c1-t419 r1c2-t419"><code dir="ltr">TRUE</code> or <code dir="ltr">FALSE.</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21548" class="refsect2"><a id="i1082531"></a>
<h2 class="refsect2">setDataBuffer()</h2>
<p>Specifies a data buffer where data would be fetched or bound. The <code dir="ltr"><span class="codeinlineitalic">buffer</span></code> parameter is a pointer to a user allocated data buffer. The current length of data must be specified in the <code dir="ltr">length</code> parameter. The amount of data should not exceed the <code dir="ltr"><span class="codeinlineitalic">size</span></code> parameter. Finally, <code dir="ltr">type</code> is the data type of the data. Only non OCCI and non C++ specific types can be used, such as STL string. OCCI classes like <code dir="ltr">Bytes</code> and <code dir="ltr">Date</code> cannot be used.</p>
<p>If <a href="#i1082531">setDataBuffer()</a> is used to fetch data for array fetches, it should be called only once for each result set. Data for each row is assumed to be at <code dir="ltr">buffer (i- 1)</code>location, where <code dir="ltr">i</code> is the row number. Similarly, the length of the data would be assumed to be at <code dir="ltr">(length+(i-1)).</code></p>
<p>For more information on the version of this method that uses 32K <code dir="ltr">length</code> parameter, see <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of setDataBuffer() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t420">Syntax</th>
<th class="cellalignment2204" id="r1c2-t420">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t420" headers="r1c1-t420">
<pre dir="ltr">void setDataBuffer(
   unsigned int colIndex,
   void *buffer,
   Type type,
   sb4 size = 0,
   ub2 *length = NULL,
   sb2 *ind = NULL,
   ub2 *rc = NULL);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t420 r1c2-t420">Uses <code dir="ltr">ub2</code> <code dir="ltr">length</code> buffer. This limits <code dir="ltr">VARCHAR2</code> and <code dir="ltr">NVARCHAR2</code> length to <code dir="ltr">4,000</code> bytes, and <code dir="ltr">RAW</code> data types to <code dir="ltr">2,000</code> bytes.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t420" headers="r1c1-t420">
<pre dir="ltr">void setDataBuffer(
   unsigned int colIndex,
   void *buffer,
   Type type,
   sb4 size = 0,
   ub4 *length = NULL,
   sb2 *ind = NULL,
   ub2 *rc = NULL);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t420 r1c2-t420">Uses <code dir="ltr">ub4</code> <code dir="ltr">length</code> buffer (32K). This increases the length of <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code> and <code dir="ltr">RAW</code> data types.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setDataBuffer() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t421">Parameter</th>
<th class="cellalignment2204" id="r1c2-t421">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t421" headers="r1c1-t421">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t421 r1c2-t421">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t421" headers="r1c1-t421">
<pre dir="ltr">buffer
</pre></td>
<td class="cellalignment2205" headers="r3c1-t421 r1c2-t421">Pointer to user-allocated buffer. For array fetches, it should have <code dir="ltr">numRows</code> * size bytes in it. For gather or scatter binds and defines, this structure stores the address of <code dir="ltr">OCIIOVec</code> and the number of <code dir="ltr">OCIIOVec</code> elements that start at that address.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t421" headers="r1c1-t421">
<pre dir="ltr">type
</pre></td>
<td class="cellalignment2205" headers="r4c1-t421 r1c2-t421">Type of the data that is provided (or retrieved) in the buffer.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t421" headers="r1c1-t421">
<pre dir="ltr">size
</pre></td>
<td class="cellalignment2205" headers="r5c1-t421 r1c2-t421">Size of the data buffer. For array fetches, it is the size of each element of the data items.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t421" headers="r1c1-t421">
<pre dir="ltr">length
</pre></td>
<td class="cellalignment2205" headers="r6c1-t421 r1c2-t421">Pointer to the length of data in the buffer; for array fetches, it should be an array of length data for each buffer element; the size of the array should be equal to <code dir="ltr">arrayLength.</code></td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t421" headers="r1c1-t421">
<pre dir="ltr">ind
</pre></td>
<td class="cellalignment2205" headers="r7c1-t421 r1c2-t421">Pointer to an indicator variable or array (<code dir="ltr">IN</code>/<code dir="ltr">OUT</code>).</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t421" headers="r1c1-t421">
<pre dir="ltr">rc
</pre></td>
<td class="cellalignment2205" headers="r8c1-t421 r1c2-t421">Pointer to array of column level return codes (<code dir="ltr">OUT</code>).</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21550" class="refsect2"><a id="i1082572"></a>
<h2 class="refsect2">setErrorOnNull()</h2>
<p>This method enables/disables exceptions for reading of <code dir="ltr">NULL</code> values on <code dir="ltr">colIndex</code> column of the result set.</p>
<p class="subhead1"><a id="LNCPP21551"></a>Syntax</p>
<pre dir="ltr">void setErrorOnNull(
   unsigned int colIndex,
   bool causeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setErrorOnNull() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t422">Parameter</th>
<th class="cellalignment2204" id="r1c2-t422">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t422" headers="r1c1-t422">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t422 r1c2-t422">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t422" headers="r1c1-t422">
<pre dir="ltr">causeException
</pre></td>
<td class="cellalignment2205" headers="r3c1-t422 r1c2-t422">Enable exceptions if <code dir="ltr">TRUE</code>. Disable if <code dir="ltr">FALSE.</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21552" class="refsect2"><a id="i1106692"></a>
<h2 class="refsect2">setErrorOnTruncate()</h2>
<p>This method enables/disables exceptions when truncation occurs.</p>
<p class="subhead1"><a id="LNCPP21553"></a>Syntax</p>
<pre dir="ltr">void setErrorOnTruncate(
   unsigned int paramIndex,
   bool causeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setErrorOnTrancate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t423">Parameter</th>
<th class="cellalignment2204" id="r1c2-t423">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t423" headers="r1c1-t423">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t423 r1c2-t423">Parameter index, first parameter is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t423" headers="r1c1-t423">
<pre dir="ltr">causeException
</pre></td>
<td class="cellalignment2205" headers="r3c1-t423 r1c2-t423">Enable exceptions if <code dir="ltr">TRUE</code>. Disable if <code dir="ltr">FALSE.</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21898" class="refsect2"><a id="BBAEJGFI"></a>
<h2 class="refsect2">setPrefetchMemorySize()</h2>
<p>Sets the amount of memory that is used internally by OCCI to store data fetched during each round trip to the server. A value of <code dir="ltr">0</code> means that the amount of data fetched during the round trip is constrained by the <code dir="ltr">FetchRowCount</code> parameter. If both parameters are nonzero, the smaller of the two is used.</p>
<p class="subhead1"><a id="LNCPP21899"></a>Syntax</p>
<pre dir="ltr">void setPrefetchMemorySize(
   unsigned int bytes);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setPrefetchMemorySize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t424">Parameter</th>
<th class="cellalignment2204" id="r1c2-t424">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t424" headers="r1c1-t424">
<pre dir="ltr">bytes
</pre></td>
<td class="cellalignment2205" headers="r2c1-t424 r1c2-t424">Number of bytes used for storing data fetched during each server round trip.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21900" class="refsect2"><a id="BBAJJCHA"></a>
<h2 class="refsect2">setPrefetchRowCount()</h2>
<p>Sets the number of rows that are fetched internally by OCCI during each round trip to the server. A value of <code dir="ltr">0</code> means that the amount of data fetched during the round trip is constrained by the <code dir="ltr">FetchMemorySize</code> parameter. If both parameters are nonzero, the smaller of the two is used. If both of these parameters are zero, row count internally defaults to <code dir="ltr">1</code> row and that is the value returned from the <code dir="ltr">getFetchRowCount()</code> method.</p>
<p class="subhead1"><a id="LNCPP21901"></a>Syntax</p>
<pre dir="ltr">void setPrefetchRowCount(
   unsigned int rowCount);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setPrefetchRowCount() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t425">Parameter</th>
<th class="cellalignment2204" id="r1c2-t425">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t425" headers="r1c1-t425">
<pre dir="ltr">rowCount
</pre></td>
<td class="cellalignment2205" headers="r2c1-t425 r1c2-t425">Number of rows to fetch for each round trip to the server.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21554" class="refsect2"><a id="i1101782"></a>
<h2 class="refsect2">setMaxColumnSize()</h2>
<p>Specifies the maximum amount of data in bytes to read from a column. It should be based on the environment&#39;s character set, in which the <code dir="ltr">env</code> has been created.</p>
<p class="subhead1"><a id="LNCPP21555"></a>Syntax</p>
<pre dir="ltr">void setMaxColumnSize(
   unsigned int colIndex,
   unsigned int max);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setMaxColumnSize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t426">Parameter</th>
<th class="cellalignment2204" id="r1c2-t426">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t426" headers="r1c1-t426">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t426 r1c2-t426">Column index, first column is <code dir="ltr">1</code>, second is <code dir="ltr">2</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t426" headers="r1c1-t426">
<pre dir="ltr">max
</pre></td>
<td class="cellalignment2205" headers="r3c1-t426 r1c2-t426">The maximum amount of data in bytes to be read.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21556" class="refsect2"><a id="i1076893"></a>
<h2 class="refsect2">status()</h2>
<p>Returns the current <code dir="ltr">Status</code> of the result set, as defined in <a href="#BBABCCHB">Table 13-38</a>. This method can be called repeatedly.</p>
<p class="subhead1"><a id="LNCPP21557"></a>Syntax</p>
<pre dir="ltr">Status status() const;
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2196">
<tr>
<td class="cellalignment2205">
<table class="cellalignment2201">
<tr>
<td class="cellalignment2200"><a href="reference026.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2200"><a href="reference028.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2208">
<table class="cellalignment2199">
<tr>
<td class="cellalignment2200"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2200"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2200"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2200"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2200"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2200"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>