<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-73933"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Statement%20Class"></a><title>Statement Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1082"/>
<meta name="dcterms.created" content="2016-06-01T12:8:12Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="C++ Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E48221-07"/>
<meta name="dcterms.isVersionOf" content="LNCPP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="reference029.htm" title="Previous" type="text/html"/>
<link rel="Next" href="reference031.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48221-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">50/54</span> <!-- End Header --><a id="i1079052"></a>
<div id="LNCPP1022" class="refsect1">
<h1 class="refsect1">Stateme<a id="sthref910"></a><a id="sthref911"></a><a id="sthref912"></a>nt Class</h1>
<p>A <code dir="ltr">Statement</code> object is used for executing SQL statements. The statement may be a query returning result set, or a non-query statement returning an update count. Non-query SQL can be insert, update, or delete statements. Non-query SQL statements can also be DML statements (such as create, grant, and so on) or stored procedure calls.</p>
<p>A query, insert / update / delete, or stored procedure call statements may have <code dir="ltr">IN</code> bind parameters, while a stored procedure call statement may have either <code dir="ltr">OUT</code> bind parameters or bind parameters that are both <code dir="ltr">IN</code> and <code dir="ltr">OUT</code>, referred to as <code dir="ltr">IN</code>/<code dir="ltr">OUT</code> parameters.</p>
<p>The <code dir="ltr">Statement</code> class methods are divided into three categories:</p>
<ul>
<li>
<p><code dir="ltr">Statement</code> methods applicable to all statements</p>
</li>
<li>
<p>Methods applicable to prepared statements with <code dir="ltr">IN</code> bind parameters</p>
</li>
<li>
<p>Methods applicable to callable statements with <code dir="ltr">OUT</code> or <code dir="ltr">IN/OUT</code> bind parameters.</p>
</li>
</ul>
<div id="LNCPP21611" class="tblformal">
<p class="titleintable"><a id="sthref913"></a><a id="CIAEGJCC"></a>Table 13-43 Enumerated Values used by the Statement Class</p>
<table class="cellalignment2203" title="Enumerated Values used by the Statement Class" summary="The first column contains the constant, the second column hods its description" dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t451">Attribute</th>
<th class="cellalignment2204" id="r1c2-t451">Options</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t451" headers="r1c1-t451">
<pre dir="ltr">Status
</pre></td>
<td class="cellalignment2205" headers="r2c1-t451 r1c2-t451">
<ul>
<li>
<p><code dir="ltr">NEEDS_STREAM_DATA</code> indicates that output <code dir="ltr">Streams</code> must be written for the streamed <code dir="ltr">IN</code> bind parameters. If there are multiple streamed parameters, call the <a href="#i1084015">getCurrentStreamParam()</a> method to find out the bind parameter that needs the stream. If the statement is executed iteratively, call <a href="#i1083876">getCurrentIteration()</a> to find the iteration for the stream that must to be written.</p>
</li>
<li>
<p><code dir="ltr">PREPARED</code> indicates that the <code dir="ltr">Statement</code> is set to a query.</p>
</li>
<li>
<p><code dir="ltr">RESULT_SET_AVAILABLE</code> indicates that the <a href="#i1084443">getResultSet()</a> method must be called to get the result set.</p>
</li>
<li>
<p><code dir="ltr">STREAM_DATA_AVAILABLE</code> indicates that the input <code dir="ltr">Streams</code> must be read for the streamed <code dir="ltr">OUT</code> bind parameters. If there are multiple streamed parameters, call the <a href="#i1084015">getCurrentStreamParam()</a> method to find out the bind parameter that needs the stream. If the statement is executed iteratively, call <a href="#i1083876">getCurrentIteration()</a> to find the iteration for the stream that must be read.</p>
</li>
<li>
<p><code dir="ltr">UPREPARED</code> indicates that the <code dir="ltr">Statement</code> object is not set to a query.</p>
</li>
<li>
<p><code dir="ltr">UPDATE_COUNT_AVAILABLE</code> indicates that the <a href="#CIAIIAHF">getUb8RowCount()</a> method must be called to find out the update count.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP21612" class="tblformal">
<p class="titleintable"><a id="sthref914"></a><a id="sthref915"></a>Table 13-44 <a id="sthref916"></a><a id="sthref917"></a>Statement Methods</p>
<table class="cellalignment2203" title="Statement Methods " summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t452">Method</th>
<th class="cellalignment2204" id="r1c2-t452">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t452" headers="r1c1-t452">
<p><a href="#i1094372">addIteration()</a></p>
</td>
<td class="cellalignment2205" headers="r2c1-t452 r1c2-t452">
<p>Adds an iteration for execution.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t452" headers="r1c1-t452">
<p><a href="#i1083658">closeResultSet()</a></p>
</td>
<td class="cellalignment2205" headers="r3c1-t452 r1c2-t452">
<p>Immediately releases a result set&#39;s database and OCCI resources instead of waiting for automatic release.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t452" headers="r1c1-t452">
<p><a href="#i1083695">closeStream()</a></p>
</td>
<td class="cellalignment2205" headers="r4c1-t452 r1c2-t452">
<p>Closes the stream specified by the parameter <code dir="ltr"><span class="codeinlineitalic">stream</span></code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t452" headers="r1c1-t452">
<p><a href="#CACDHDJF">disableCaching()</a></p>
</td>
<td class="cellalignment2205" headers="r5c1-t452 r1c2-t452">
<p>Disables statement caching.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t452" headers="r1c1-t452">
<p><a href="#i1104912">execute()</a></p>
</td>
<td class="cellalignment2205" headers="r6c1-t452 r1c2-t452">
<p>Runs the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t452" headers="r1c1-t452">
<p><a href="#i1073494">executeArrayUpdate()</a></p>
</td>
<td class="cellalignment2205" headers="r7c1-t452 r1c2-t452">
<p>Runs insert, update, and delete statements that use only the <code dir="ltr">setDataBuffer()</code> or stream interface for bind parameters.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t452" headers="r1c1-t452">
<p><a href="#i1083750">executeQuery()</a></p>
</td>
<td class="cellalignment2205" headers="r8c1-t452 r1c2-t452">
<p>Runs a SQL statement that returns a single <code dir="ltr">ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t452" headers="r1c1-t452">
<p><a href="#i1083751">executeUpdate()</a></p>
</td>
<td class="cellalignment2205" headers="r9c1-t452 r1c2-t452">
<p>Runs a SQL statement that does not return a <code dir="ltr">ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t452" headers="r1c1-t452">
<p><a href="#i1151491">getAutoCommit()</a></p>
</td>
<td class="cellalignment2205" headers="r10c1-t452 r1c2-t452">
<p>Returns the current auto-commit state.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t452" headers="r1c1-t452">
<p><a href="#CIAEJFBJ">getBatchErrorMode()</a></p>
</td>
<td class="cellalignment2205" headers="r11c1-t452 r1c2-t452">
<p>Returns the state of the batch error mode.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t452" headers="r1c1-t452">
<p><a href="#i1084194">getBDouble()</a></p>
</td>
<td class="cellalignment2205" headers="r12c1-t452 r1c2-t452">
<p>Returns the value of an IEEE754 <code dir="ltr">DOUBLE</code> as a <code dir="ltr">BDouble</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t452" headers="r1c1-t452">
<p><a href="#i1083783">getBfile()</a></p>
</td>
<td class="cellalignment2205" headers="r13c1-t452 r1c2-t452">
<p>Returns the value of a <code dir="ltr">BFILE</code> as a <code dir="ltr">Bfile</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t452" headers="r1c1-t452">
<p><a href="#i1153214">getBFloat()</a></p>
</td>
<td class="cellalignment2205" headers="r14c1-t452 r1c2-t452">
<p>Returns the value of a <code dir="ltr">IEEE754 FLOAT</code> as a <code dir="ltr">BFloat</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t452" headers="r1c1-t452">
<p><a href="#i1083796">getBlob()</a></p>
</td>
<td class="cellalignment2205" headers="r15c1-t452 r1c2-t452">
<p>Returns the value of a <code dir="ltr">BLOB</code> as a <code dir="ltr">Blob</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t452" headers="r1c1-t452">
<p><a href="#i1083825">getBytes()</a></p>
</td>
<td class="cellalignment2205" headers="r16c1-t452 r1c2-t452">
<p>Returns the value of a <code dir="ltr">SQL BINARY</code> or <code dir="ltr">VARBINARY</code> parameter as <code dir="ltr">Bytes</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t452" headers="r1c1-t452">
<p><a href="#i1083984">getCharSet()</a></p>
</td>
<td class="cellalignment2205" headers="r17c1-t452 r1c2-t452">
<p>Returns the characterset that is in effect for the specified parameter, as a <code dir="ltr">string</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t452" headers="r1c1-t452">
<p><a href="#BBAHBFIF">getCharSetUString()</a></p>
</td>
<td class="cellalignment2205" headers="r18c1-t452 r1c2-t452">
<p>Returns the characterset that is in effect for the specified parameter, as a <code dir="ltr">UString</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t452" headers="r1c1-t452">
<p><a href="#i1083992">getClob()</a></p>
</td>
<td class="cellalignment2205" headers="r19c1-t452 r1c2-t452">
<p>Returns the value of a <code dir="ltr">CLOB</code> as a <code dir="ltr">Clob</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t452" headers="r1c1-t452">
<p><a href="#i1105960">getConnection()</a></p>
</td>
<td class="cellalignment2205" headers="r20c1-t452 r1c2-t452">
<p>Returns the connection from which the <code dir="ltr">Statement</code> object was instantiated.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t452" headers="r1c1-t452">
<p><a href="#i1083876">getCurrentIteration()</a></p>
</td>
<td class="cellalignment2205" headers="r21c1-t452 r1c2-t452">
<p>Returns the iteration number of the current iteration that is being processed.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t452" headers="r1c1-t452">
<p><a href="#i1084007">getCurrentStreamIteration()</a></p>
</td>
<td class="cellalignment2205" headers="r22c1-t452 r1c2-t452">
<p>Returns the current iteration for which stream data is to be read or written.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r23c1-t452" headers="r1c1-t452">
<p><a href="#i1084015">getCurrentStreamParam()</a></p>
</td>
<td class="cellalignment2205" headers="r23c1-t452 r1c2-t452">
<p>Returns the parameter index of the current output Stream that must be read or written.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r24c1-t452" headers="r1c1-t452">
<p><a href="#i1084037">getCursor()</a></p>
</td>
<td class="cellalignment2205" headers="r24c1-t452 r1c2-t452">
<p>Returns the <code dir="ltr">REF CURSOR</code> value of an OUT parameter as a <code dir="ltr">ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r25c1-t452" headers="r1c1-t452">
<p><a href="#i1084057">getDatabaseNCHARParam()</a></p>
</td>
<td class="cellalignment2205" headers="r25c1-t452 r1c2-t452">
<p>Returns whether data is in NCHAR character set.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r26c1-t452" headers="r1c1-t452">
<p><a href="#i1084078">getDate()</a></p>
</td>
<td class="cellalignment2205" headers="r26c1-t452 r1c2-t452">
<p>Returns the value of a parameter as a <code dir="ltr">Date</code> object</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r27c1-t452" headers="r1c1-t452">
<p><a href="#CIAEJDFE">getDMLRowCounts()</a></p>
</td>
<td class="cellalignment2205" headers="r27c1-t452 r1c2-t452">
<p>Returns the row counts affected by each iteration of the current DML statement when it executes with multiple iterations.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r28c1-t452" headers="r1c1-t452">
<p><a href="#i1153225">getDouble()</a></p>
</td>
<td class="cellalignment2205" headers="r28c1-t452 r1c2-t452">
<p>Returns the value of a parameter as a C++ double.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r29c1-t452" headers="r1c1-t452">
<p><a href="#i1153214">getBFloat()</a></p>
</td>
<td class="cellalignment2205" headers="r29c1-t452 r1c2-t452">
<p>Returns the value of a parameter as an IEEE754 float.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r30c1-t452" headers="r1c1-t452">
<p><a href="#i1094380">getFloat()</a></p>
</td>
<td class="cellalignment2205" headers="r30c1-t452 r1c2-t452">
<p>Returns the value of a parameter as a C++ float.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r31c1-t452" headers="r1c1-t452">
<p><a href="#i1084209">getInt()</a></p>
</td>
<td class="cellalignment2205" headers="r31c1-t452 r1c2-t452">
<p>Returns the value of a parameter as a C++ int.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r32c1-t452" headers="r1c1-t452">
<p><a href="#i1084217">getIntervalDS()</a></p>
</td>
<td class="cellalignment2205" headers="r32c1-t452 r1c2-t452">
<p>Returns the value of a parameter as a <code dir="ltr">IntervalDS</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r33c1-t452" headers="r1c1-t452">
<p><a href="#i1084225">getIntervalYM()</a></p>
</td>
<td class="cellalignment2205" headers="r33c1-t452 r1c2-t452">
<p>Returns the value of a parameter as a <code dir="ltr">IntervalYM</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r34c1-t452" headers="r1c1-t452">
<p><a href="#i1084233">getMaxIterations()</a></p>
</td>
<td class="cellalignment2205" headers="r34c1-t452 r1c2-t452">
<p>Returns the current limit on maximum number of iterations.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r35c1-t452" headers="r1c1-t452">
<p><a href="#i1084241">getMaxParamSize()</a></p>
</td>
<td class="cellalignment2205" headers="r35c1-t452 r1c2-t452">
<p>Returns the current max parameter size limit.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r36c1-t452" headers="r1c1-t452">
<p><a href="#i1084411">getNumber()</a></p>
</td>
<td class="cellalignment2205" headers="r36c1-t452 r1c2-t452">
<p>Returns the value of a parameter as a <code dir="ltr">Number</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r37c1-t452" headers="r1c1-t452">
<p><a href="#i1084419">getObject()</a></p>
</td>
<td class="cellalignment2205" headers="r37c1-t452 r1c2-t452">
<p>Returns the value of a parameter as a <code dir="ltr">PObject</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r38c1-t452" headers="r1c1-t452">
<p><a href="#i1084427">getOCIStatement()</a></p>
</td>
<td class="cellalignment2205" headers="r38c1-t452 r1c2-t452">
<p>Returns the OCI statement handle associated with the <code dir="ltr">Statement</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r39c1-t452" headers="r1c1-t452">
<p><a href="#i1084435">getRef()</a></p>
</td>
<td class="cellalignment2205" headers="r39c1-t452 r1c2-t452">
<p>Returns the value of a REF parameter as <code dir="ltr">RefAny</code></p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r40c1-t452" headers="r1c1-t452">
<p><a href="#i1084443">getResultSet()</a></p>
</td>
<td class="cellalignment2205" headers="r40c1-t452 r1c2-t452">
<p>Returns the current result as a <code dir="ltr">ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r41c1-t452" headers="r1c1-t452">
<p><a href="#CIAJDBCE">getRowCountsOption()</a></p>
</td>
<td class="cellalignment2205" headers="r41c1-t452 r1c2-t452">
<p>Determines if the DML row counts option is enabled.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r42c1-t452" headers="r1c1-t452">
<p><a href="#i1084451">getRowid()</a></p>
</td>
<td class="cellalignment2205" headers="r42c1-t452 r1c2-t452">
<p>Returns the row id parameter value as a <code dir="ltr">Bytes</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r43c1-t452" headers="r1c1-t452">
<p><a href="#i1094388">getSQL()</a></p>
</td>
<td class="cellalignment2205" headers="r43c1-t452 r1c2-t452">
<p>Returns the current SQL string associated with the <code dir="ltr">Statement</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r44c1-t452" headers="r1c1-t452">
<p><a href="#CHEFEDDF">getSQLUString()</a></p>
</td>
<td class="cellalignment2205" headers="r44c1-t452 r1c2-t452">
<p>Returns the current SQL string associated with the <code dir="ltr">Statement</code> object; globalization enabled.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r45c1-t452" headers="r1c1-t452">
<p><a href="#i1084467">getStream()</a></p>
</td>
<td class="cellalignment2205" headers="r45c1-t452 r1c2-t452">
<p>Returns the value of the parameter as a stream.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r46c1-t452" headers="r1c1-t452">
<p><a href="#i1094396">getString()</a></p>
</td>
<td class="cellalignment2205" headers="r46c1-t452 r1c2-t452">
<p>Returns the value of the parameter as a string.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r47c1-t452" headers="r1c1-t452">
<p><a href="#i1084475">getTimestamp()</a></p>
</td>
<td class="cellalignment2205" headers="r47c1-t452 r1c2-t452">
<p>Returns the value of the parameter as a <code dir="ltr">Timestamp</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r48c1-t452" headers="r1c1-t452">
<p><a href="#CIAIIAHF">getUb8RowCount()</a></p>
</td>
<td class="cellalignment2205" headers="r48c1-t452 r1c2-t452">
<p>Returns the number of rows processed.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r49c1-t452" headers="r1c1-t452">
<p><a href="#i1084545">getUInt()</a></p>
</td>
<td class="cellalignment2205" headers="r49c1-t452 r1c2-t452">
<p>Returns the value of the parameter as a C++ unsigned integer.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r50c1-t452" headers="r1c1-t452">
<p><a href="#i1084553">getUpdateCount()</a></p>
</td>
<td class="cellalignment2205" headers="r50c1-t452 r1c2-t452">
<p>Returns the number of rows processed.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r51c1-t452" headers="r1c1-t452">
<p><a href="#CHEEDJBD">getUString()</a></p>
</td>
<td class="cellalignment2205" headers="r51c1-t452 r1c2-t452">
<p>Returns the value of a <code dir="ltr">UString</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r52c1-t452" headers="r1c1-t452">
<p><a href="#CHEGHDBG">getVector()</a></p>
</td>
<td class="cellalignment2205" headers="r52c1-t452 r1c2-t452">
<p>Returns the specified parameter as a vector.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r53c1-t452" headers="r1c1-t452">
<p><a href="#CHEFFBDJ">getVectorOfRefs()</a></p>
</td>
<td class="cellalignment2205" headers="r53c1-t452 r1c2-t452">
<p>Returns the column in the current position as a vector of <code dir="ltr">REF</code>s.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r54c1-t452" headers="r1c1-t452">
<p><a href="#i1084569">isNull()</a></p>
</td>
<td class="cellalignment2205" headers="r54c1-t452 r1c2-t452">
<p>Checks whether the parameter is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r55c1-t452" headers="r1c1-t452">
<p><a href="#i1139303">isTruncated()</a></p>
</td>
<td class="cellalignment2205" headers="r55c1-t452 r1c2-t452">
<p>Checks whether the value is truncated.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r56c1-t452" headers="r1c1-t452">
<p><a href="#i1107094">preTruncationLength()</a></p>
</td>
<td class="cellalignment2205" headers="r56c1-t452 r1c2-t452">
<p>Returns the actual length of the parameter before truncation.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r57c1-t452" headers="r1c1-t452">
<p><a href="#i1104541">registerOutParam()</a></p>
</td>
<td class="cellalignment2205" headers="r57c1-t452 r1c2-t452">
<p>Registers the type and max size of the OUT parameter.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r58c1-t452" headers="r1c1-t452">
<p><a href="#i1094412">setAutoCommit()</a></p>
</td>
<td class="cellalignment2205" headers="r58c1-t452 r1c2-t452">
<p>Specifies auto commit mode.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r59c1-t452" headers="r1c1-t452">
<p><a href="#CIAJGDBG">setBatchErrorMode()</a></p>
</td>
<td class="cellalignment2205" headers="r59c1-t452 r1c2-t452">
<p>Enables or disables the batch error processing mode.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r60c1-t452" headers="r1c1-t452">
<p><a href="#i1153095">setBDouble()</a></p>
</td>
<td class="cellalignment2205" headers="r60c1-t452 r1c2-t452">
<p>Sets a parameter to an IEEE double value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r61c1-t452" headers="r1c1-t452">
<p><a href="#i1094420">setBfile()</a></p>
</td>
<td class="cellalignment2205" headers="r61c1-t452 r1c2-t452">
<p>Sets a parameter to a <code dir="ltr">Bfile</code> value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r62c1-t452" headers="r1c1-t452">
<p><a href="#i1153923">setBFloat()</a></p>
</td>
<td class="cellalignment2205" headers="r62c1-t452 r1c2-t452">
<p>Sets a parameter to an IEEE float value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r63c1-t452" headers="r1c1-t452">
<p><a href="#i1087429">setBinaryStreamMode()</a></p>
</td>
<td class="cellalignment2205" headers="r63c1-t452 r1c2-t452">
<p>Specifies that a column is to be returned as a binary stream.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r64c1-t452" headers="r1c1-t452">
<p><a href="#i1094428">setBlob()</a></p>
</td>
<td class="cellalignment2205" headers="r64c1-t452 r1c2-t452">
<p>Sets a parameter to a <code dir="ltr">Blob</code> value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r65c1-t452" headers="r1c1-t452">
<p><a href="#i1094436">setBytes()</a></p>
</td>
<td class="cellalignment2205" headers="r65c1-t452 r1c2-t452">
<p>Sets a parameter to a <code dir="ltr">Bytes</code> array.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r66c1-t452" headers="r1c1-t452">
<p><a href="#i1088316">setCharacterStreamMode()</a></p>
</td>
<td class="cellalignment2205" headers="r66c1-t452 r1c2-t452">
<p>Specifies that a column is to be returned as a character stream.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r67c1-t452" headers="r1c1-t452">
<p><a href="reference027.htm#i1082532">setCharSet()</a></p>
</td>
<td class="cellalignment2205" headers="r67c1-t452 r1c2-t452">
<p>Specifies the characterset as a <code dir="ltr">string</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r68c1-t452" headers="r1c1-t452">
<p><a href="reference027.htm#CACCCDFG">setCharSetUString()</a></p>
</td>
<td class="cellalignment2205" headers="r68c1-t452 r1c2-t452">
<p>Specifies the character set as a <code dir="ltr">UString</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r69c1-t452" headers="r1c1-t452">
<p><a href="#i1084883">setClob()</a></p>
</td>
<td class="cellalignment2205" headers="r69c1-t452 r1c2-t452">
<p>Sets a parameter to a <code dir="ltr">Clob</code> value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r70c1-t452" headers="r1c1-t452">
<p><a href="#i1084891">setDate()</a></p>
</td>
<td class="cellalignment2205" headers="r70c1-t452 r1c2-t452">
<p>Sets a parameter to a <code dir="ltr">Date</code> value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r71c1-t452" headers="r1c1-t452">
<p><a href="#i1086347">setDatabaseNCHARParam()</a></p>
</td>
<td class="cellalignment2205" headers="r71c1-t452 r1c2-t452">
<p>Sets to true if the data is to be in the NCHAR character set of the database; set to false to restore the default.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r72c1-t452" headers="r1c1-t452">
<p><a href="#i1086355">setDataBuffer()</a></p>
</td>
<td class="cellalignment2205" headers="r72c1-t452 r1c2-t452">
<p>Specifies a data buffer where data would be available for reading or writing.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r73c1-t452" headers="r1c1-t452">
<p><a href="#i1086363">setDataBufferArray()</a></p>
</td>
<td class="cellalignment2205" headers="r73c1-t452 r1c2-t452">
<p>Specifies an array of data buffers where data would be available for reading or writing.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r74c1-t452" headers="r1c1-t452">
<p><a href="#i1086371">setDouble()</a></p>
</td>
<td class="cellalignment2205" headers="r74c1-t452 r1c2-t452">
<p>Sets a parameter to a C++ double value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r75c1-t452" headers="r1c1-t452">
<p><a href="#i1086379">setErrorOnNull()</a></p>
</td>
<td class="cellalignment2205" headers="r75c1-t452 r1c2-t452">
<p>Enables Or Disables exceptions for reading of <code dir="ltr">NULL</code> values.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r76c1-t452" headers="r1c1-t452">
<p><a href="#i1107128">setErrorOnTruncate()</a></p>
</td>
<td class="cellalignment2205" headers="r76c1-t452 r1c2-t452">
<p>Enables Or Disables exception when truncation occurs.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r77c1-t452" headers="r1c1-t452">
<p><a href="#i1086737">setFloat()</a></p>
</td>
<td class="cellalignment2205" headers="r77c1-t452 r1c2-t452">
<p>Sets a parameter to a C++ float value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r78c1-t452" headers="r1c1-t452">
<p><a href="#i1086745">setInt()</a></p>
</td>
<td class="cellalignment2205" headers="r78c1-t452 r1c2-t452">
<p>Sets a parameter to a C++ int value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r79c1-t452" headers="r1c1-t452">
<p><a href="#i1086753">setIntervalDS()</a></p>
</td>
<td class="cellalignment2205" headers="r79c1-t452 r1c2-t452">
<p>Sets a parameter to a <code dir="ltr">IntervalDS</code> value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r80c1-t452" headers="r1c1-t452">
<p><a href="#i1086761">setIntervalYM()</a></p>
</td>
<td class="cellalignment2205" headers="r80c1-t452 r1c2-t452">
<p>Sets a parameter to a <code dir="ltr">IntervalYM</code> value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r81c1-t452" headers="r1c1-t452">
<p><a href="#i1086769">setMaxIterations()</a></p>
</td>
<td class="cellalignment2205" headers="r81c1-t452 r1c2-t452">
<p>Sets the maximum number of invocations that area made for the DML statement.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r82c1-t452" headers="r1c1-t452">
<p><a href="#i1086777">setMaxParamSize()</a></p>
</td>
<td class="cellalignment2205" headers="r82c1-t452 r1c2-t452">
<p>Sets the maximum amount of data that can sent or returned from the parameter.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r83c1-t452" headers="r1c1-t452">
<p><a href="#i1086785">setNull()</a></p>
</td>
<td class="cellalignment2205" headers="r83c1-t452 r1c2-t452">
<p>Sets a parameter to SQL <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r84c1-t452" headers="r1c1-t452">
<p><a href="#i1086793">setNumber()</a></p>
</td>
<td class="cellalignment2205" headers="r84c1-t452 r1c2-t452">
<p>Sets a parameter to a <code dir="ltr">Number</code> value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r85c1-t452" headers="r1c1-t452">
<p><a href="#i1086801">setObject()</a></p>
</td>
<td class="cellalignment2205" headers="r85c1-t452 r1c2-t452">
<p>Sets the value of a parameter using an object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r86c1-t452" headers="r1c1-t452">
<p><a href="#i1086809">setPrefetchMemorySize()</a></p>
</td>
<td class="cellalignment2205" headers="r86c1-t452 r1c2-t452">
<p>Sets the amount of memory that is used internally by OCCI to store data fetched during each round trip to the server.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r87c1-t452" headers="r1c1-t452">
<p><a href="#i1086817">setPrefetchRowCount()</a></p>
</td>
<td class="cellalignment2205" headers="r87c1-t452 r1c2-t452">
<p>Sets the number of rows that are fetched internally by OCCI during each round trip to the server.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r88c1-t452" headers="r1c1-t452">
<p><a href="#BBAGEGCE">setRef()</a></p>
</td>
<td class="cellalignment2205" headers="r88c1-t452 r1c2-t452">
<p>Sets the value of a parameter to a reference.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r89c1-t452" headers="r1c1-t452">
<p><a href="#CIAIHBDI">setRowCountsOption()</a></p>
</td>
<td class="cellalignment2205" headers="r89c1-t452 r1c2-t452">
<p>Set <code dir="ltr">flag</code> to <code dir="ltr">TRUE</code> to enable return of DML row counts per iteration when invoking <a href="#CIAEJDFE">getDMLRowCounts()</a>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r90c1-t452" headers="r1c1-t452">
<p><a href="#i1086833">setRowid()</a></p>
</td>
<td class="cellalignment2205" headers="r90c1-t452 r1c2-t452">
<p>Sets a row id bytes array for a bind position.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r91c1-t452" headers="r1c1-t452">
<p><a href="#i1086841">setSQL()</a></p>
</td>
<td class="cellalignment2205" headers="r91c1-t452 r1c2-t452">
<p>Associates new SQL string with <code dir="ltr">Statement</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r92c1-t452" headers="r1c1-t452">
<p><a href="#CHECDFDD">setSQLUString()</a></p>
</td>
<td class="cellalignment2205" headers="r92c1-t452 r1c2-t452">
<p>Associates new SQL string with <code dir="ltr">Statement</code> object; globalization enabled.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r93c1-t452" headers="r1c1-t452">
<p><a href="#i1073503">setString()</a></p>
</td>
<td class="cellalignment2205" headers="r93c1-t452 r1c2-t452">
<p>Sets a parameter for a specified index.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r94c1-t452" headers="r1c1-t452">
<p><a href="#i1086856">setTimestamp()</a></p>
</td>
<td class="cellalignment2205" headers="r94c1-t452 r1c2-t452">
<p>Sets a parameter to a <code dir="ltr">Timestamp</code> value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r95c1-t452" headers="r1c1-t452">
<p><a href="#i1086864">setUInt()</a></p>
</td>
<td class="cellalignment2205" headers="r95c1-t452 r1c2-t452">
<p>Sets a parameter to a C++ unsigned int value.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r96c1-t452" headers="r1c1-t452">
<p><a href="#CHEBAADJ">setUString()</a></p>
</td>
<td class="cellalignment2205" headers="r96c1-t452 r1c2-t452">
<p>Sets a parameter for a specified index; globalization enabled.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r97c1-t452" headers="r1c1-t452">
<p><a href="#i1107158">setVector()</a></p>
</td>
<td class="cellalignment2205" headers="r97c1-t452 r1c2-t452">
<p>Sets a parameter to a vector of unsigned int.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r98c1-t452" headers="r1c1-t452">
<p><a href="#i1152343">setVectorOfRefs()</a></p>
</td>
<td class="cellalignment2205" headers="r98c1-t452 r1c2-t452">
<p>Sets a parameter to a vector; is necessary when the type is a collection of <code dir="ltr">REF</code>s.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r99c1-t452" headers="r1c1-t452">
<p><a href="#i1086880">status()</a></p>
</td>
<td class="cellalignment2205" headers="r99c1-t452 r1c2-t452">
<p>Returns the current status of the statement. This is useful when there is streamed data to be written.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP21613" class="refsect2"><a id="i1094372"></a>
<h2 class="refsect2">addIteration()</h2>
<p>After specifying set parameters, an iteration is added for execution.</p>
<p class="subhead1"><a id="LNCPP21614"></a>Syntax</p>
<pre dir="ltr">void addIteration();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21615" class="refsect2"><a id="i1083658"></a>
<h2 class="refsect2">closeResultSet()</h2>
<p>Immediately releases the specified <code dir="ltr">resultSet</code>&#39;s database and OCCI resources when the result set is not needed.</p>
<p class="subhead1"><a id="LNCPP21616"></a>Syntax</p>
<pre dir="ltr">void closeResultSet(
   ResultSet *resultSet);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of closeResultSet() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t453">Parameter</th>
<th class="cellalignment2204" id="r1c2-t453">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t453" headers="r1c1-t453">
<pre dir="ltr">resultSet
</pre></td>
<td class="cellalignment2205" headers="r2c1-t453 r1c2-t453">The result set to be closed; may be a result of <a href="#i1084443">getResultSet()</a>, <a href="#i1083750">executeQuery()</a>, or <a href="#i1084037">getCursor()</a> calls on the current statement, or by a <a href="#i1084037">getCursor()</a> call of another result set on the same statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21617" class="refsect2"><a id="i1083695"></a>
<h2 class="refsect2">closeStream()</h2>
<p>Closes the stream specified by the parameter <code dir="ltr">stream</code>.</p>
<p class="subhead1"><a id="LNCPP21618"></a>Syntax</p>
<pre dir="ltr">void closeStream(
   Stream *stream); 
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of closeStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t454">Parameter</th>
<th class="cellalignment2204" id="r1c2-t454">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t454" headers="r1c1-t454">
<pre dir="ltr">stream
</pre></td>
<td class="cellalignment2205" headers="r2c1-t454 r1c2-t454">The stream to be closed.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21619" class="refsect2"><a id="CACDHDJF"></a>
<h2 class="refsect2">disableCaching()</h2>
<p>Disables statement caching. Used if a user wants to destroy a statement instead of caching it. Effective only if statement caching is enabled.</p>
<p class="subhead1"><a id="LNCPP21620"></a>Syntax</p>
<pre dir="ltr">void disableCaching();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21621" class="refsect2"><a id="i1104912"></a>
<h2 class="refsect2">execute()</h2>
<p>Executes an SQL statement that may return either a result set or an update count. The statement may have read-able streams which may have to be written, in which case the results of the execution may not be readily available. The returned value <code dir="ltr">Status</code> is defined in <a href="#CIAEGJCC">Table 13-43</a>.</p>
<p>If output streams are used for <code dir="ltr">OUT</code> bind variables, they must be completely read in order. The <a href="#i1084015">getCurrentStreamParam()</a> method would indicate which stream must be read. Similarly, <a href="#i1083876">getCurrentIteration()</a> would indicate the iteration for which data is available.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of execute() constructor." summary="First column lists versions of the constructor; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t455">Syntax</th>
<th class="cellalignment2204" id="r1c2-t455">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t455" headers="r1c1-t455">
<pre dir="ltr">Status execute(
   const string &amp;sql=&#34;&#34;);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t455 r1c2-t455">Executes the SQL Statement.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t455" headers="r1c1-t455">
<pre dir="ltr">Status execute(
   const UString &amp;sql);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t455 r1c2-t455">Executes the SQL Statement; globalization enabled.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of execute() method" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t456">Parameter</th>
<th class="cellalignment2204" id="r1c2-t456">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t456" headers="r1c1-t456">
<pre dir="ltr">sql
</pre></td>
<td class="cellalignment2205" headers="r2c1-t456 r1c2-t456">The SQL statement to be executed. This can be <code dir="ltr">NULL</code> if the <a href="#i1073494">executeArrayUpdate()</a> method was used to associate the sql with the statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21622" class="refsect2"><a id="i1073494"></a>
<h2 class="refsect2">executeArrayUpdate()</h2>
<p>Executes insert/update/delete statements which use only the <a href="#i1086355">setDataBuffer()</a> or stream interface for bind parameters. The bind parameters must be arrays of size <code dir="ltr">arrayLength</code> parameter. The statement may have writable streams which may have to be written. The returned value <code dir="ltr">Status</code> is defined in <a href="#CIAEGJCC">Table 13-43</a>.</p>
<p>If output streams are used for <code dir="ltr">OUT</code> bind variables, they must be completely read in order. The <a href="#i1084015">getCurrentStreamParam()</a> method would indicate which stream must be read. Similarly, <a href="#i1083876">getCurrentIteration()</a> would indicate the iteration for which data is available.</p>
<p>Note that you cannot perform array executes for queries or callable statements.</p>
<p class="subhead1"><a id="LNCPP21623"></a>Syntax</p>
<pre dir="ltr">Status executeArrayUpdate(
   unsigned int arrayLength);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of executeArrayUpdate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t457">Parameter</th>
<th class="cellalignment2204" id="r1c2-t457">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t457" headers="r1c1-t457">
<pre dir="ltr">arrayLength
</pre></td>
<td class="cellalignment2205" headers="r2c1-t457 r1c2-t457">The number of elements provided in each buffer of bind variables.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21624" class="refsect2"><a id="i1083750"></a>
<h2 class="refsect2">executeQuery()</h2>
<p>Runs a SQL statement that returns a <code dir="ltr">ResultSet</code>. Should not be called for a statement which is not a query, has streamed parameters. Returns a <code dir="ltr">ResultSet</code> that contains the data produced by the query.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of executeQuery() method." summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t458">Syntax</th>
<th class="cellalignment2204" id="r1c2-t458">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t458" headers="r1c1-t458">
<pre dir="ltr">ResultSet* executeQuery(
   const string &amp;sql=&#34;&#34;);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t458 r1c2-t458">Executes the SQL Statement that returns a <code dir="ltr">ResultSet</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t458" headers="r1c1-t458">
<pre dir="ltr">ResultSet* executeQuery(
   const UString &amp;sql);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t458 r1c2-t458">Executes the SQL Statement that returns a <code dir="ltr">ResultSet;</code> globalization enabled.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of executeQuery() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t459">Parameter</th>
<th class="cellalignment2204" id="r1c2-t459">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t459" headers="r1c1-t459">
<pre dir="ltr">sql
</pre></td>
<td class="cellalignment2205" headers="r2c1-t459 r1c2-t459">The SQL statement to be executed. This can be <code dir="ltr">NULL</code> if the <a href="#i1073494">executeArrayUpdate()</a> method was used to associate the sql with the statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21625" class="refsect2"><a id="i1083751"></a>
<h2 class="refsect2">executeUpdate()</h2>
<p>Executes a non-query statement such as a SQL <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code> statement, a DDL statement such as <code dir="ltr">CREATE</code>/<code dir="ltr">ALTER</code> and so on, or a stored procedure call. Returns either the row count for <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code> or <code dir="ltr">DELETE</code> or <code dir="ltr">0</code> for SQL statements that return nothing.</p>
<p>If the number of rows processed as a result of this call exceeds <code dir="ltr">UB4MAXVAL</code>, it may throw an exception. In such scenarios, use <a href="#i1104912">execute()</a> instead, followed by <a href="#CIAIIAHF">getUb8RowCount()</a> to obtain the number of rows processed.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of executeQuery() method." summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t460">Syntax</th>
<th class="cellalignment2204" id="r1c2-t460">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t460" headers="r1c1-t460">
<pre dir="ltr">unsigned int executeUpdate(
   const string &amp;sql=&#34;&#34;);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t460 r1c2-t460">Executes a non-query statement.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t460" headers="r1c1-t460">
<pre dir="ltr">unsigned int executeUpdate(
   const UString &amp;sql);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t460 r1c2-t460">Executes a non-query statement; globalization enabled.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of executeUpdate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t461">Parameter</th>
<th class="cellalignment2204" id="r1c2-t461">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t461" headers="r1c1-t461">
<pre dir="ltr">sql
</pre></td>
<td class="cellalignment2205" headers="r2c1-t461 r1c2-t461">The SQL statement to be executed. This can be <code dir="ltr">NULL</code> if the <a href="#i1073494">executeArrayUpdate()</a> method was used to associate the sql with the statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21626" class="refsect2"><a id="i1151491"></a>
<h2 class="refsect2">getAutoCommit()</h2>
<p>Returns the current auto-commit state.</p>
<p class="subhead1"><a id="LNCPP21627"></a>Syntax</p>
<pre dir="ltr">bool getAutoCommit() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21628" class="refsect2"><a id="CIAEJFBJ"></a>
<h2 class="refsect2">getBatchErrorMode()</h2>
<p>Returns the state of the batch error mode; <code dir="ltr">TRUE</code> if the batch error mode is enabled, <code dir="ltr">FALSE</code> otherwise.</p>
<p class="subhead1"><a id="LNCPP21629"></a>Syntax</p>
<pre dir="ltr">bool getBatchErrorMode() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21630" class="refsect2"><a id="i1084194"></a>
<h2 class="refsect2">getBDouble()</h2>
<p>Returns the value of an IEEE754 <code dir="ltr">DOUBLE</code> column, which has been defined as an <code dir="ltr">OUT</code> bind. If the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">0</code>.</p>
<p class="subhead1"><a id="LNCPP21631"></a>Syntax</p>
<pre dir="ltr">BDouble getBDouble(
   unsigned int paramIndex) = 0;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getBDouble() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t462">Parameter</th>
<th class="cellalignment2204" id="r1c2-t462">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t462" headers="r1c1-t462">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t462 r1c2-t462">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21632" class="refsect2"><a id="i1083783"></a>
<h2 class="refsect2">getBfile()</h2>
<p>Returns the value of a <code dir="ltr">BFILE</code> parameter as a <code dir="ltr">Bfile</code> object.</p>
<p class="subhead1"><a id="LNCPP21633"></a>Syntax</p>
<pre dir="ltr">Bfile getBfile(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getBfile() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t463">Parameter</th>
<th class="cellalignment2204" id="r1c2-t463">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t463" headers="r1c1-t463">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t463 r1c2-t463">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21634" class="refsect2"><a id="i1153214"></a>
<h2 class="refsect2">getBFloat()</h2>
<p>Gets the value of an IEEE754 <code dir="ltr">FLOAT</code> column, which has been defined as an <code dir="ltr">OUT</code> bind. If the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">0</code>.</p>
<p class="subhead1"><a id="LNCPP21635"></a>Syntax</p>
<pre dir="ltr">BFloat getBFloat(
   unsigned int paramIndex) = 0;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getBFloat() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t464">Parameter</th>
<th class="cellalignment2204" id="r1c2-t464">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t464" headers="r1c1-t464">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t464 r1c2-t464">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21636" class="refsect2"><a id="i1083796"></a>
<h2 class="refsect2">getBlob()</h2>
<p>Returns the value of a <code dir="ltr">BLOB</code> parameter as a <code dir="ltr">Blob</code>.</p>
<p class="subhead1"><a id="LNCPP21637"></a>Syntax</p>
<pre dir="ltr">Blob getBlob(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getBlob() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t465">Parameter</th>
<th class="cellalignment2204" id="r1c2-t465">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t465" headers="r1c1-t465">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t465 r1c2-t465">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21638" class="refsect2"><a id="i1083825"></a>
<h2 class="refsect2">getBytes()</h2>
<p>Returns the value of n SQL <code dir="ltr">BINARY</code> or <code dir="ltr">VARBINARY</code> parameter as <code dir="ltr">Bytes</code>; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21639"></a>Syntax</p>
<pre dir="ltr">Bytes getBytes(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getBytes() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t466">Parameter</th>
<th class="cellalignment2204" id="r1c2-t466">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t466" headers="r1c1-t466">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t466 r1c2-t466">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21640" class="refsect2"><a id="i1083984"></a>
<h2 class="refsect2">getCharSet()</h2>
<p>Returns the characterset that is in effect for the specified parameter, as a <code dir="ltr">string</code>.</p>
<p class="subhead1"><a id="LNCPP21641"></a>Syntax</p>
<pre dir="ltr">string getCharSet(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getCharSet() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t467">Parameter</th>
<th class="cellalignment2204" id="r1c2-t467">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t467" headers="r1c1-t467">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t467 r1c2-t467">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21642" class="refsect2"><a id="BBAHBFIF"></a>
<h2 class="refsect2">getCharSetUString()</h2>
<p>Returns the character set that is in effect for the specified parameter, as a <code dir="ltr">UString</code>.</p>
<p class="subhead1"><a id="LNCPP21643"></a>Syntax</p>
<pre dir="ltr">UString getCharSetUString(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getCharSetUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t468">Parameter</th>
<th class="cellalignment2204" id="r1c2-t468">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t468" headers="r1c1-t468">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t468 r1c2-t468">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21644" class="refsect2"><a id="i1083992"></a>
<h2 class="refsect2">getClob()</h2>
<p>Get the value of a <code dir="ltr">CLOB</code> parameter as a <code dir="ltr">Clob</code>. Returns the parameter value.</p>
<p class="subhead1"><a id="LNCPP21645"></a>Syntax</p>
<pre dir="ltr">Clob getClob(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getClob() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t469">Parameter</th>
<th class="cellalignment2204" id="r1c2-t469">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t469" headers="r1c1-t469">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t469 r1c2-t469">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21646" class="refsect2"><a id="i1105960"></a>
<h2 class="refsect2">getConnection()</h2>
<p>Returns the connection from which the <code dir="ltr">Statement</code> object was instantiated.</p>
<p class="subhead1"><a id="LNCPP21647"></a>Syntax</p>
<pre dir="ltr">Connection* getConnection() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21648" class="refsect2"><a id="i1083876"></a>
<h2 class="refsect2">getCurrentIteration()</h2>
<p>If the prepared statement has any output <code dir="ltr">Streams</code>, this method returns the current iteration of the statement that is being processed by OCCI. If this method is called after all the invocations in the set of iterations has been processed, it returns <code dir="ltr">0</code>. Returns the iteration number of the current iteration that is being processed. The first iteration is numbered <code dir="ltr">1</code> and so on. If the statement has finished execution, a <code dir="ltr">0</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21649"></a>Syntax</p>
<pre dir="ltr">unsigned int getCurrentIteration() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21650" class="refsect2"><a id="i1084007"></a>
<h2 class="refsect2">getCurrentStreamIteration()</h2>
<p>Returns the current parameter stream for which data is available.</p>
<p class="subhead1"><a id="LNCPP21651"></a>Syntax</p>
<pre dir="ltr">unsigned int getCurrentStreamIteration() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21652" class="refsect2"><a id="i1084015"></a>
<h2 class="refsect2">getCurrentStreamParam()</h2>
<p>Returns the parameter index of the current output <code dir="ltr">Stream</code> parameter that must be written. If the prepared statement has any output <code dir="ltr">Stream</code> parameters, this method returns the parameter index of the current output <code dir="ltr">Stream</code> that must be written. If no output <code dir="ltr">Stream</code> must be written, or there are no output <code dir="ltr">Stream</code> parameters in the prepared statement, this method returns <code dir="ltr">0</code>.</p>
<p class="subhead1"><a id="LNCPP21653"></a>Syntax</p>
<pre dir="ltr">unsigned int getCurrentStreamParam() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21654" class="refsect2"><a id="i1084037"></a>
<h2 class="refsect2">getCursor()</h2>
<p>Gets the <code dir="ltr">REF</code> <code dir="ltr">CURSOR</code> value of an <code dir="ltr">OUT</code> parameter as a <code dir="ltr">ResultSet</code>. Data can be fetched from this result set. The <code dir="ltr">OUT</code> parameter must be registered as <code dir="ltr">CURSOR</code> with the <a href="#i1104541">registerOutParam()</a> method. Returns a <code dir="ltr">ResultSet</code> for the <code dir="ltr">OUT</code> parameter value.</p>
<p>Note that if there are multiple <code dir="ltr">REF</code> <code dir="ltr">CURSORs</code> being returned due to a batched call, data from each cursor must be completely fetched before retrieving the next <code dir="ltr">REF</code> <code dir="ltr">CURSOR</code> and starting fetch on it.</p>
<p class="subhead1"><a id="LNCPP21655"></a>Syntax</p>
<pre dir="ltr">ResultSet * getCursor(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getCursor() method" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t470">Parameter</th>
<th class="cellalignment2204" id="r1c2-t470">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t470" headers="r1c1-t470">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t470 r1c2-t470">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21656" class="refsect2"><a id="i1084057"></a>
<h2 class="refsect2">getDatabaseNCHARParam()</h2>
<p>Returns whether data is in <code dir="ltr">NCHAR</code> character set or not.</p>
<p class="subhead1"><a id="LNCPP21657"></a>Syntax</p>
<pre dir="ltr">bool getDatabaseNCHARParam(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getDatabaseNCHARParam() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t471">Parameter</th>
<th class="cellalignment2204" id="r1c2-t471">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t471" headers="r1c1-t471">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t471 r1c2-t471">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21658" class="refsect2"><a id="i1084078"></a>
<h2 class="refsect2">getDate()</h2>
<p>Get the value of a SQL <code dir="ltr">DATE</code> parameter as a <code dir="ltr">Date</code> object. Returns the parameter value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21659"></a>Syntax</p>
<pre dir="ltr">Date getDate(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getDate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t472">Parameter</th>
<th class="cellalignment2204" id="r1c2-t472">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t472" headers="r1c1-t472">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t472 r1c2-t472">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21913" class="refsect2"><a id="CIAEJDFE"></a>
<h2 class="refsect2">getDMLRowCounts()</h2>
<p>Returns the row counts affected by each iteration of the current DML statement when it executes with multiple iterations.</p>
<p>Use this method in conjunction with <a href="#CIAJDBCE">getRowCountsOption()</a> and <a href="#CIAIHBDI">setRowCountsOption()</a>.</p>
<p class="subhead1"><a id="LNCPP21914"></a>Syntax</p>
<pre dir="ltr">vector&lt;oraub8&gt; getDMLRowCounts();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21660" class="refsect2"><a id="i1153225"></a>
<h2 class="refsect2">getDouble()</h2>
<p>Get the value of a <code dir="ltr">DOUBLE</code> parameter as a C++ <code dir="ltr">double</code>. Returns the parameter value; if the value is SQL <code dir="ltr">NULL</code>, the result is 0.</p>
<p class="subhead1"><a id="LNCPP21661"></a>Syntax</p>
<pre dir="ltr">double getDouble(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getDouble() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t473">Parameter</th>
<th class="cellalignment2204" id="r1c2-t473">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t473" headers="r1c1-t473">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t473 r1c2-t473">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21662" class="refsect2"><a id="i1094380"></a>
<h2 class="refsect2">getFloat()</h2>
<p>Get the value of a <code dir="ltr">FLOAT</code> parameter as a C++ <code dir="ltr">float</code>. Returns the parameter value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">0</code>.</p>
<p class="subhead1"><a id="LNCPP21663"></a>Syntax</p>
<pre dir="ltr">float getFloat(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getFloat() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t474">Parameter</th>
<th class="cellalignment2204" id="r1c2-t474">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t474" headers="r1c1-t474">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t474 r1c2-t474">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21664" class="refsect2"><a id="i1084209"></a>
<h2 class="refsect2">getInt()</h2>
<p>Get the value of an <code dir="ltr">INTEGER</code> parameter as a C++ int. Returns the parameter value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">0</code>.</p>
<p class="subhead1"><a id="LNCPP21665"></a>Syntax</p>
<pre dir="ltr">unsigned int getInt(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getInt() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t475">Parameter</th>
<th class="cellalignment2204" id="r1c2-t475">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t475" headers="r1c1-t475">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t475 r1c2-t475">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21666" class="refsect2"><a id="i1084217"></a>
<h2 class="refsect2">getIntervalDS()</h2>
<p>Get the value of a parameter as a <code dir="ltr">IntervalDS</code> object.</p>
<p class="subhead1"><a id="LNCPP21667"></a>Syntax</p>
<pre dir="ltr">IntervalDS getIntervalDS(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getIntervalDS() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t476">Parameter</th>
<th class="cellalignment2204" id="r1c2-t476">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t476" headers="r1c1-t476">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t476 r1c2-t476">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21668" class="refsect2"><a id="i1084225"></a>
<h2 class="refsect2">getIntervalYM()</h2>
<p>Get the value of a parameter as a <code dir="ltr">IntervalYM</code> object.</p>
<p class="subhead1"><a id="LNCPP21669"></a>Syntax</p>
<pre dir="ltr">IntervalYM getIntervalYM(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getIntervalYM() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t477">Parameter</th>
<th class="cellalignment2204" id="r1c2-t477">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t477" headers="r1c1-t477">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t477 r1c2-t477">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21670" class="refsect2"><a id="i1084233"></a>
<h2 class="refsect2">getMaxIterations()</h2>
<p>Gets the current limit on maximum number of iterations. Default is <code dir="ltr">1</code>. Returns the current maximum number of iterations.</p>
<p class="subhead1"><a id="LNCPP21671"></a>Syntax</p>
<pre dir="ltr">unsigned int getMaxIterations() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21672" class="refsect2"><a id="i1084241"></a>
<h2 class="refsect2">getMaxParamSize()</h2>
<p>The <code dir="ltr">maxParamSize</code> limit (in bytes) is the maximum amount of data sent or returned for any parameter value; it only applies to character and binary types. If the limit is exceeded, the excess data is silently discarded. Returns the current <code dir="ltr">max</code> parameter size limit.</p>
<p class="subhead1"><a id="LNCPP21673"></a>Syntax</p>
<pre dir="ltr">unsigned int getMaxParamSize(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getMaxParamSize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t478">Parameter</th>
<th class="cellalignment2204" id="r1c2-t478">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t478" headers="r1c1-t478">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t478 r1c2-t478">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21674" class="refsect2"><a id="i1084411"></a>
<h2 class="refsect2">getNumber()</h2>
<p>Gets the value of a <code dir="ltr">NUMERIC</code> parameter as a <code dir="ltr">Number</code> object. Returns the parameter value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21675"></a>Syntax</p>
<pre dir="ltr">Number getNumber(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getNumber() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t479">Parameter</th>
<th class="cellalignment2204" id="r1c2-t479">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t479" headers="r1c1-t479">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t479 r1c2-t479">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21676" class="refsect2"><a id="i1084419"></a>
<h2 class="refsect2">getObject()</h2>
<p>Gets the value of a parameter as a <code dir="ltr">PObject</code>. This method returns an <code dir="ltr">PObject</code> whose type corresponds to the SQL type that was registered for this parameter using <a href="#i1104541">registerOutParam()</a>. Returns A <code dir="ltr">PObject</code> holding the <code dir="ltr">OUT</code> parameter value.</p>
<p>This method may be used to read database-specific, abstract data types.</p>
<p class="subhead1"><a id="LNCPP21677"></a>Syntax</p>
<pre dir="ltr">PObject * getObject(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getObject() method" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t480">Parameter</th>
<th class="cellalignment2204" id="r1c2-t480">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t480" headers="r1c1-t480">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t480 r1c2-t480">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21678" class="refsect2"><a id="i1084427"></a>
<h2 class="refsect2">getOCIStatement()</h2>
<p>Get the OCI statement handle associated with the <code dir="ltr">Statement</code>.</p>
<p class="subhead1"><a id="LNCPP21679"></a>Syntax</p>
<pre dir="ltr">OCIStmt * getOCIStatement() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21680" class="refsect2"><a id="i1084435"></a>
<h2 class="refsect2">getRef()</h2>
<p>Get the value of a <code dir="ltr">REF</code> parameter as <code dir="ltr">RefAny</code>. Returns the parameter value.</p>
<p class="subhead1"><a id="LNCPP21681"></a>Syntax</p>
<pre dir="ltr">RefAny getRef(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getRef() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t481">Parameter</th>
<th class="cellalignment2204" id="r1c2-t481">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t481" headers="r1c1-t481">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t481 r1c2-t481">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21682" class="refsect2"><a id="i1084443"></a>
<h2 class="refsect2">getResultSet()</h2>
<p>Returns the current result as a <code dir="ltr">ResultSet</code>.</p>
<p class="subhead1"><a id="LNCPP21683"></a>Syntax</p>
<pre dir="ltr">ResultSet * getResultSet();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21915" class="refsect2"><a id="CIAJDBCE"></a>
<h2 class="refsect2">getRowCountsOption()</h2>
<p>Determines if the DML row counts option is enabled.</p>
<p>If <code dir="ltr">TRUE</code>, DML statements can be executed to return the row counts for each iteration using the method <a href="#CIAEJDFE">getDMLRowCounts()</a>.</p>
<p class="subhead1"><a id="LNCPP21916"></a>Syntax</p>
<pre dir="ltr">bool getRowCountsOption();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21684" class="refsect2"><a id="i1084451"></a>
<h2 class="refsect2">getRowid()</h2>
<p>Get the <code dir="ltr">rowid</code> parameter value as a <code dir="ltr">Bytes</code>.</p>
<p class="subhead1"><a id="LNCPP21685"></a>Syntax</p>
<pre dir="ltr">Bytes getRowid(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getRowid() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t482">Parameter</th>
<th class="cellalignment2204" id="r1c2-t482">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t482" headers="r1c1-t482">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t482 r1c2-t482">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21686" class="refsect2"><a id="i1094388"></a>
<h2 class="refsect2">getSQL()</h2>
<p>Returns the current SQL string associated with the Statement object.</p>
<p class="subhead1"><a id="LNCPP21687"></a>Syntax</p>
<pre dir="ltr">string getSQL() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21688" class="refsect2"><a id="CHEFEDDF"></a>
<h2 class="refsect2">getSQLUString()</h2>
<p>Returns the current SQL <code dir="ltr">UString</code> associated with the Statement object; globalization enabled.</p>
<p class="subhead1"><a id="LNCPP21689"></a>Syntax</p>
<pre dir="ltr">UString getSQLUString() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21690" class="refsect2"><a id="i1084467"></a>
<h2 class="refsect2">getStream()</h2>
<p>Returns the value of the parameter as a stream.</p>
<p class="subhead1"><a id="LNCPP21691"></a>Syntax</p>
<pre dir="ltr">Stream * getStream(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t483">Parameter</th>
<th class="cellalignment2204" id="r1c2-t483">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t483" headers="r1c1-t483">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t483 r1c2-t483">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21692" class="refsect2"><a id="i1094396"></a>
<h2 class="refsect2">getString()</h2>
<p>Get the value of a <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, or <code dir="ltr">LONGVARCHAR</code> parameter as an string. Returns the parameter value; if the value is SQL <code dir="ltr">NULL</code>, the result is empty string.</p>
<p class="subhead1"><a id="LNCPP21693"></a>Syntax</p>
<pre dir="ltr">string getString(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t484">Parameter</th>
<th class="cellalignment2204" id="r1c2-t484">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t484" headers="r1c1-t484">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t484 r1c2-t484">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21694" class="refsect2"><a id="i1084475"></a>
<h2 class="refsect2">getTimestamp()</h2>
<p>Get the value of a SQL <code dir="ltr">TIMESTAMP</code> parameter as a <code dir="ltr">Timestamp</code> object. Returns the parameter value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code></p>
<p class="subhead1"><a id="LNCPP21695"></a>Syntax</p>
<pre dir="ltr">Timestamp getTimestamp(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getTimestamp() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t485">Parameter</th>
<th class="cellalignment2204" id="r1c2-t485">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t485" headers="r1c1-t485">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t485 r1c2-t485">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21936" class="refsect2"><a id="CIAIIAHF"></a>
<h2 class="refsect2">getUb8RowCount()</h2>
<p>Returns the number of rows affected by the execution of a DML statement.</p>
<p>This method enables a return of a large number of rows than was possible before Oracle Database Release 12<span class="italic">c</span>.</p>
<p class="subhead1"><a id="LNCPP21937"></a>Syntax</p>
<pre dir="ltr">oraub8 getUb8RowCount();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21696" class="refsect2"><a id="i1084545"></a>
<h2 class="refsect2">getUInt()</h2>
<p>Get the value of a <code dir="ltr">BIGINT</code> parameter as a C++ unsigned int. Returns the parameter value; if the value is SQL <code dir="ltr">NULL</code>, the result is <code dir="ltr">0</code>.</p>
<p class="subhead1"><a id="LNCPP21697"></a>Syntax</p>
<pre dir="ltr">unsigned int getUInt(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getUIntl() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t486">Parameter</th>
<th class="cellalignment2204" id="r1c2-t486">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t486" headers="r1c1-t486">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t486 r1c2-t486">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21698" class="refsect2"><a id="i1084553"></a>
<h2 class="refsect2">getUpdateCount()</h2>
<p>Returns the number of rows affected, if DML statement is executed.</p>
<p>Note: This method has been deprecated. Use <code dir="ltr">getUb8RowCount()</code> instead.</p>
<p class="subhead1"><a id="LNCPP21699"></a>Syntax</p>
<pre dir="ltr">unsigned int getUpdateCount() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21700" class="refsect2"><a id="CHEEDJBD"></a>
<h2 class="refsect2">getUString()</h2>
<p>Returns the value as a UString.</p>
<p>This method should be called only if the environment&#39;s character set is UTF16, or if <code dir="ltr">setCharset()</code> method has been called to explicitly retrieve UTF16 data.</p>
<p class="subhead1"><a id="LNCPP21701"></a>Syntax</p>
<pre dir="ltr">UString getUString(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t487">Parameter</th>
<th class="cellalignment2204" id="r1c2-t487">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t487" headers="r1c1-t487">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t487 r1c2-t487">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21702" class="refsect2"><a id="CHEGHDBG"></a>
<h2 class="refsect2">getVector()</h2>
<p>Returns the column in the current position as a vector. The column at the position, specified by index, should be a collection type (<code dir="ltr">varray</code> or nested table). The SQL type of the elements in the collection should be compatible with the type of the vector.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="Versions of the getVector() method of the Statement class." summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t488">Syntax</th>
<th class="cellalignment2204" id="r1c2-t488">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   std::vector&lt;UString&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t488 r1c2-t488">Used for vectors of <code dir="ltr">UString Class</code>; globalization enabled.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;BDouble&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t488 r1c2-t488">Used for <code dir="ltr">BDouble</code> vectors.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;BFile&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r4c1-t488 r1c2-t488">Used for vectors of <a href="reference006.htm#i1155597">Bfile Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;BFloat&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r5c1-t488 r1c2-t488">Used for <code dir="ltr">BFloat</code> vectors.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Blob&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r6c1-t488 r1c2-t488">Used for vectors of <a href="reference007.htm#i1119032">Blob Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Bytes&gt; &amp;vect); 
</pre></td>
<td class="cellalignment2205" headers="r7c1-t488 r1c2-t488">Used for vectors of <a href="reference008.htm#i1119060">Bytes Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Clob&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r8c1-t488 r1c2-t488">Used for <code dir="ltr">Clob</code> vectors.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Date&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r9c1-t488 r1c2-t488">Used for vectors of <a href="reference013.htm#i1079044">Date Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;double&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r10c1-t488 r1c2-t488">Used for vectors of <code dir="ltr">double Class.</code></td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;float&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r11c1-t488 r1c2-t488">Used for vectors of <code dir="ltr">float Class.</code></td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;int&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r12c1-t488 r1c2-t488">Used for vectors of <code dir="ltr">int Class.</code></td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;IntervalDS&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r13c1-t488 r1c2-t488">Used for vectors of <a href="reference015.htm#i1066767">IntervalDS Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;IntervalYM&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r14c1-t488 r1c2-t488">Used for vectors of <a href="reference016.htm#i1080017">IntervalYM Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Number&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r15c1-t488 r1c2-t488">Used for vectors of <a href="reference022.htm#i1018892">Number Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;RefAny&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r16c1-t488 r1c2-t488">Used for vectors of <a href="reference026.htm#i1109327">RefAny Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;string&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r17c1-t488 r1c2-t488">Used for vectors of <code dir="ltr">string Class.</code></td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;T *&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r18c1-t488 r1c2-t488">Intended for use on platforms where partial ordering of function templates is supported.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;T&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r19c1-t488 r1c2-t488">Intended for use on platforms where partial ordering of function templates is not supported, such as Windows NT and z/OS. For <code dir="ltr">OUT</code> binds.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Timestamp&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r20c1-t488 r1c2-t488">Used for vectors of <a href="reference033.htm#i1118557">Timestamp Class</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;u &lt;Ref&lt;T&gt; &gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r21c1-t488 r1c2-t488">Available only on platforms where partial ordering of function templates is supported.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t488" headers="r1c1-t488">
<pre dir="ltr">void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;unsigned int&gt; &amp;vect);
</pre></td>
<td class="cellalignment2205" headers="r22c1-t488 r1c2-t488">Used for on vectors of <code dir="ltr">unsigned int Class.</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getVector() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t489">Parameter</th>
<th class="cellalignment2204" id="r1c2-t489">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t489" headers="r1c1-t489">
<pre dir="ltr">stmt
</pre></td>
<td class="cellalignment2205" headers="r2c1-t489 r1c2-t489">The statement.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t489" headers="r1c1-t489">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r3c1-t489 r1c2-t489">Parameter index.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t489" headers="r1c1-t489">
<pre dir="ltr">vect
</pre></td>
<td class="cellalignment2205" headers="r4c1-t489 r1c2-t489">Reference to the vector (<code dir="ltr">OUT</code> parameter) into which the values should be retrieved.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21703" class="refsect2"><a id="CHEFFBDJ"></a>
<h2 class="refsect2">getVectorOfRefs()</h2>
<p>This method returns the column in the current position as a vector of <code dir="ltr">REF</code>s. The column should be a collection type (varray or nested table) of <code dir="ltr">REF</code>s. Used with <code dir="ltr">OUT</code> binds.</p>
<p class="subhead1"><a id="LNCPP21704"></a>Syntax</p>
<pre dir="ltr">void getVectorOfRefs(
   Statement *stmt,
   unsigned int colIndex,
   vector&lt; Ref&lt;T&gt; &gt; &amp;vect);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getVectorOfRefs() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t490">Parameter</th>
<th class="cellalignment2204" id="r1c2-t490">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t490" headers="r1c1-t490">
<pre dir="ltr">stmt
</pre></td>
<td class="cellalignment2205" headers="r2c1-t490 r1c2-t490">The statement object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t490" headers="r1c1-t490">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r3c1-t490 r1c2-t490">Column index; first column is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t490" headers="r1c1-t490">
<pre dir="ltr">vect
</pre></td>
<td class="cellalignment2205" headers="r4c1-t490 r1c2-t490">The reference to the vector of <code dir="ltr">REF</code>s (<code dir="ltr">OUT</code> parameter). It is recommended to use <code dir="ltr">getVectorOfRefs()</code> instead of specialized <code dir="ltr">getVector()</code> function for <code dir="ltr">Ref&lt;T&gt;.</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21705" class="refsect2"><a id="i1084569"></a>
<h2 class="refsect2">isNull()</h2>
<p>An <code dir="ltr">OUT</code> parameter may have the value of SQL <code dir="ltr">NULL</code>; <code dir="ltr">isNull()</code> reports whether the last value read has this special value. Note that you must first call <code dir="ltr">ge</code>t<code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> on a parameter to read its value and then call <code dir="ltr">isNull()</code> to see if the value was SQL <code dir="ltr">NULL</code>. Returns <code dir="ltr">TRUE</code> if the last parameter read was SQL <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21706"></a>Syntax</p>
<pre dir="ltr">bool isNull(
   unsigned int paramIndex ) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of isNull() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t491">Parameter</th>
<th class="cellalignment2204" id="r1c2-t491">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t491" headers="r1c1-t491">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t491 r1c2-t491">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21707" class="refsect2"><a id="i1139303"></a>
<h2 class="refsect2">isTruncated()</h2>
<p>This method checks whether the value of the parameter is truncated. If the value of the parameter is truncated, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21708"></a>Syntax</p>
<pre dir="ltr">bool isTruncated(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of isTruncated() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t492">Parameter</th>
<th class="cellalignment2204" id="r1c2-t492">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t492" headers="r1c1-t492">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t492 r1c2-t492">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21709" class="refsect2"><a id="i1107094"></a>
<h2 class="refsect2">preTruncationLength()</h2>
<p>Returns the actual length of the parameter before truncation.</p>
<p class="subhead1"><a id="LNCPP21710"></a>Syntax</p>
<pre dir="ltr">int preTruncationLength(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of preTruncatedLength() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t493">Parameter</th>
<th class="cellalignment2204" id="r1c2-t493">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t493" headers="r1c1-t493">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t493 r1c2-t493">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21711" class="refsect2"><a id="i1104541"></a>
<h2 class="refsect2">registerOutParam()</h2>
<p>This method registers the <code dir="ltr">type</code> of each <code dir="ltr">out</code> parameter of a PL/SQL stored procedure. Before executing a PL/SQL stored procedure, you must explicitly call this method to register the <code dir="ltr">type</code> of each <code dir="ltr">out</code> parameter. This method should be called for <code dir="ltr">out</code> parameters only. Use the <code dir="ltr">set</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> method for in/out parameters.</p>
<ul>
<li>
<p>When reading the value of an <code dir="ltr">out</code> parameter, you must use the <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> method that corresponds to the parameter&#39;s registered SQL type. For example, use <code dir="ltr">getInt</code> or <code dir="ltr">getNumber</code> when <code dir="ltr">OCCIINT</code> or <code dir="ltr">OCCINumber</code> is the type specified.</p>
</li>
<li>
<p>If a PL/SQL stored procedure has an <code dir="ltr">out</code> parameter of <code dir="ltr">type</code> <code dir="ltr">ROWID</code>, the <code dir="ltr">type</code> specified in this method should be <code dir="ltr">OCCISTRING</code>. The value of the <code dir="ltr">out</code> parameter can then be retrieved by calling the <code dir="ltr">getString()</code> method.</p>
</li>
<li>
<p>If a PL/SQL stored procedure has an in/out parameter of type <code dir="ltr">ROWID</code>, call the methods <code dir="ltr">setString()</code> and <code dir="ltr">getString()</code> to set the type and retrieve the value of the <code dir="ltr">IN</code>/<code dir="ltr">OUT</code> parameter.</p>
</li>
</ul>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of registerOutParam() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t494">Syntax</th>
<th class="cellalignment2204" id="r1c2-t494">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t494" headers="r1c1-t494">
<pre dir="ltr">void registerOutParam(
   unsigned int paramIndex,
   Type type,
   unsigned int maxSize=0,
   const string &amp;sqltype=&#34;&#34;);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t494 r1c2-t494">Registers the <code dir="ltr">type</code> of each <code dir="ltr">out</code> parameter of a PL/SQL stored procedure.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t494" headers="r1c1-t494">
<pre dir="ltr">void registerOutParam(
   unsigned int paramIndex,
   Type type,
   unsigned int maxSize,
   const string typName,
   const string &amp;schName);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t494 r1c2-t494">Registers the <code dir="ltr">type</code> of each <code dir="ltr">out</code> parameter of a PL/SQL stored procedure; <code dir="ltr">string</code> support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t494" headers="r1c1-t494">
<pre dir="ltr">void registerOutParam(
   unsigned int paramIndex,
   Type type,
   unsigned int maxSize,
   const UString &amp;typName,
   const UString &amp;schName);
</pre></td>
<td class="cellalignment2205" headers="r4c1-t494 r1c2-t494">Registers the <code dir="ltr">type</code> of each <code dir="ltr">out</code> parameter of a PL/SQL stored procedure; globalization enabled, or <code dir="ltr">UString</code> support.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="First column lists parameters; second column provides description of these parameters." summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t495">Parameter</th>
<th class="cellalignment2204" id="r1c2-t495">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t495" headers="r1c1-t495">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t495 r1c2-t495">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t495" headers="r1c1-t495">
<pre dir="ltr">type
</pre></td>
<td class="cellalignment2205" headers="r3c1-t495 r1c2-t495">SQL type code defined by <code dir="ltr"><span class="codeinlineitalic">type</span></code>; only data types corresponding to OCCI data types such as <code dir="ltr">Date</code>, <code dir="ltr">Bytes</code>, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t495" headers="r1c1-t495">
<pre dir="ltr">maxSize
</pre></td>
<td class="cellalignment2205" headers="r4c1-t495 r1c2-t495">The maximum size of the retrieved value. For data types of <code dir="ltr">OCCIBYTES</code> and <code dir="ltr">OCCISTRING</code>, <code dir="ltr">maxSize</code> should be greater than <code dir="ltr">0</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t495" headers="r1c1-t495">
<pre dir="ltr">sqltype
</pre></td>
<td class="cellalignment2205" headers="r5c1-t495 r1c2-t495">The name of the type in the data base (used for types which have been created with <code dir="ltr">CREATE TYPE</code>).</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t495" headers="r1c1-t495">
<pre dir="ltr">typName
</pre></td>
<td class="cellalignment2205" headers="r6c1-t495 r1c2-t495">The name of the type.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t495" headers="r1c1-t495">
<pre dir="ltr">schName
</pre></td>
<td class="cellalignment2205" headers="r7c1-t495 r1c2-t495">The schema name.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21712" class="refsect2"><a id="i1094412"></a>
<h2 class="refsect2">setAutoCommit()</h2>
<p>A <code dir="ltr">Statement</code> can be in auto-commit mode. In this case any statement executed is also automatically committed. By default, the auto-commit mode is turned-off.</p>
<p class="subhead1"><a id="LNCPP21713"></a>Syntax</p>
<pre dir="ltr">void setAutoCommit(
   bool autoCommit);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setAutoCommit() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t496">Parameter</th>
<th class="cellalignment2204" id="r1c2-t496">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t496" headers="r1c1-t496">
<pre dir="ltr">autoCommit
</pre></td>
<td class="cellalignment2205" headers="r2c1-t496 r1c2-t496"><code dir="ltr">TRUE</code> enables auto-commit; <code dir="ltr">FALSE</code> disables auto-commit.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21714" class="refsect2"><a id="CIAJGDBG"></a>
<h2 class="refsect2">setBatchErrorMode()</h2>
<p>Enables or disables the batch error processing mode.</p>
<p class="subhead1"><a id="LNCPP21715"></a>Syntax</p>
<pre dir="ltr">virtual void setBatchErrorMode(
   bool batchErrorMode);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setBatchErrorMode() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t497">Parameter</th>
<th class="cellalignment2204" id="r1c2-t497">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t497" headers="r1c1-t497">
<pre dir="ltr">batchErrorMode
</pre></td>
<td class="cellalignment2205" headers="r2c1-t497 r1c2-t497"><code dir="ltr">TRUE</code> enables batch error processing; <code dir="ltr">FALSE</code> disables batch error processing.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21716" class="refsect2"><a id="i1153095"></a>
<h2 class="refsect2">setBDouble()</h2>
<p>Sets an IEEE754 double as a bind value to a <code dir="ltr">Statement</code> object at the position specified by <code dir="ltr">paramIndex</code> attribute.</p>
<p class="subhead1"><a id="LNCPP21717"></a>Syntax</p>
<pre dir="ltr">void setBDouble(
   unsigned int paramIndex,
   const BDouble &amp;dval);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setBDouble() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t498">Parameter</th>
<th class="cellalignment2204" id="r1c2-t498">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t498" headers="r1c1-t498">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t498 r1c2-t498">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t498" headers="r1c1-t498">
<pre dir="ltr">dval
</pre></td>
<td class="cellalignment2205" headers="r3c1-t498 r1c2-t498">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21718" class="refsect2"><a id="i1094420"></a>
<h2 class="refsect2">setBfile()</h2>
<p>Sets a parameter to a <code dir="ltr">Bfile</code> value.</p>
<p class="subhead1"><a id="LNCPP21719"></a>Syntax</p>
<pre dir="ltr">void setBfile(
   unsigned int paramIndex,
   const Bfile &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setBfile() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t499">Parameter</th>
<th class="cellalignment2204" id="r1c2-t499">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t499" headers="r1c1-t499">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t499 r1c2-t499">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t499" headers="r1c1-t499">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t499 r1c2-t499">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21720" class="refsect2"><a id="i1153923"></a>
<h2 class="refsect2">setBFloat()</h2>
<p>Sets an IEEE754 float as a bind value to a <code dir="ltr">Statement</code> object at the position specified by the <code dir="ltr">paramIndex</code> attribute.</p>
<p class="subhead1"><a id="LNCPP21721"></a>Syntax</p>
<pre dir="ltr">void setBFloat(
   unsigned int paramIndex,
   const BFloat &amp;fval);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setBFloat() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t500">Parameter</th>
<th class="cellalignment2204" id="r1c2-t500">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t500" headers="r1c1-t500">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t500 r1c2-t500">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t500" headers="r1c1-t500">
<pre dir="ltr">fval
</pre></td>
<td class="cellalignment2205" headers="r3c1-t500 r1c2-t500">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21722" class="refsect2"><a id="i1087429"></a>
<h2 class="refsect2">setBinaryStreamMode()</h2>
<p>Defines that a column is to be returned as a binary stream.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of setBinaryStreamMode() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t501">Syntax</th>
<th class="cellalignment2204" id="r1c2-t501">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t501" headers="r1c1-t501">
<pre dir="ltr">void setBinaryStreamMode(
   unsigned int colIndex,
   unsigned int size);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t501 r1c2-t501">Sets column returned to be a binary stream.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t501" headers="r1c1-t501">
<pre dir="ltr">void setBinaryStreamMode(
   unsigned int colIndex,
   unsigned int size
   bool inArg);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t501 r1c2-t501">Sets column returned to be a binary stream; used with PL/SQL <code dir="ltr">IN</code> or <code dir="ltr">IN/OUT</code> arguments in the bind position.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setBinaryStreamMode() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t502">Parameter</th>
<th class="cellalignment2204" id="r1c2-t502">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t502" headers="r1c1-t502">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t502 r1c2-t502">Column index; first column is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t502" headers="r1c1-t502">
<pre dir="ltr">size
</pre></td>
<td class="cellalignment2205" headers="r3c1-t502 r1c2-t502">The amount of data to be read or returned as a binary <code dir="ltr">Stream</code>. This is limited to 32KB (32,768 bytes).</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t502" headers="r1c1-t502">
<pre dir="ltr">inArg
</pre></td>
<td class="cellalignment2205" headers="r4c1-t502 r1c2-t502">Pass <code dir="ltr">TRUE</code> if the bind position is a PL/SQL <code dir="ltr">IN</code> or <code dir="ltr">IN/OUT</code> argument</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21723" class="refsect2"><a id="i1094428"></a>
<h2 class="refsect2">setBlob()</h2>
<p>Sets a parameter to a <code dir="ltr">Blob</code> value.</p>
<p class="subhead1"><a id="LNCPP21724"></a>Syntax</p>
<pre dir="ltr">void setBlob(
   unsigned int paramIndex,
   const Blob &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setBlob() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t503">Parameter</th>
<th class="cellalignment2204" id="r1c2-t503">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t503" headers="r1c1-t503">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t503 r1c2-t503">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t503" headers="r1c1-t503">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t503 r1c2-t503">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21725" class="refsect2"><a id="i1094436"></a>
<h2 class="refsect2">setBytes()</h2>
<p>Sets a parameter to a <code dir="ltr">Bytes</code> array.</p>
<p class="subhead1"><a id="LNCPP21726"></a>Syntax</p>
<pre dir="ltr">void setBytes(
   unsigned int paramIndex,
   const Bytes &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setBytes() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t504">Parameter</th>
<th class="cellalignment2204" id="r1c2-t504">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t504" headers="r1c1-t504">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t504 r1c2-t504">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t504" headers="r1c1-t504">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t504 r1c2-t504">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21727" class="refsect2"><a id="i1088316"></a>
<h2 class="refsect2">setCharacterStreamMode()</h2>
<p>Defines that a column is to be returned as a character stream.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of setCharacterStreamMode() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t505">Syntax</th>
<th class="cellalignment2204" id="r1c2-t505">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t505" headers="r1c1-t505">
<pre dir="ltr">void setCharacterStreamMode(
   unsigned int colIndex,
   unsigned int size);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t505 r1c2-t505">Sets column returned to be a character stream.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t505" headers="r1c1-t505">
<pre dir="ltr">void setCharacterStreamMode(
   unsigned int colIndex,
   unsigned int size,
   bool inArg);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t505 r1c2-t505">Sets column returned to be a character stream; used with PL/SQL <code dir="ltr">IN</code> or <code dir="ltr">IN/OUT</code> arguments in the bind position.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setCharacterStreamMode() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t506">Parameter</th>
<th class="cellalignment2204" id="r1c2-t506">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t506" headers="r1c1-t506">
<pre dir="ltr">colIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t506 r1c2-t506">Column index; first column is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t506" headers="r1c1-t506">
<pre dir="ltr">size
</pre></td>
<td class="cellalignment2205" headers="r3c1-t506 r1c2-t506">The amount of data to be read or returned as a character <code dir="ltr">Stream</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t506" headers="r1c1-t506">
<pre dir="ltr">inArg
</pre></td>
<td class="cellalignment2205" headers="r4c1-t506 r1c2-t506">Pass <code dir="ltr">TRUE</code> if the bind position is a PL/SQL <code dir="ltr">IN</code> or <code dir="ltr">IN/OUT</code> argument</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21728" class="refsect2"><a id="i1094444"></a>
<h2 class="refsect2">setCharSet()</h2>
<p>Overrides the default character set for the specified parameter. Data is assumed to be in the specified character set and is converted to database character set. For <code dir="ltr">OUT</code> binds, this specifies the character set to which database characters are converted to.</p>
<p class="subhead1"><a id="LNCPP21729"></a>Syntax</p>
<pre dir="ltr">void setCharSet(
   unsigned int paramIndex,
   string &amp;charSet);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setCharSet() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t507">Parameter</th>
<th class="cellalignment2204" id="r1c2-t507">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t507" headers="r1c1-t507">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t507 r1c2-t507">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t507" headers="r1c1-t507">
<pre dir="ltr">charSet
</pre></td>
<td class="cellalignment2205" headers="r3c1-t507 r1c2-t507">Selected character set, as a string.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21730" class="refsect2"><a id="BBAFCFJI"></a>
<h2 class="refsect2">setCharSetUString()</h2>
<p>Overrides the default character set for the specified parameter. Data is assumed to be in the specified character set and is converted to database character set. For <code dir="ltr">OUT</code> binds, this specifies the character set to which database characters are converted to.</p>
<p class="subhead1"><a id="LNCPP21731"></a>Syntax</p>
<pre dir="ltr">void setCharSetUString(
   unsigned int paramIndex,
   const UString&amp; charSet); 
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setCharSetUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t508">Parameter</th>
<th class="cellalignment2204" id="r1c2-t508">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t508" headers="r1c1-t508">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t508 r1c2-t508">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t508" headers="r1c1-t508">
<pre dir="ltr">charSet
</pre></td>
<td class="cellalignment2205" headers="r3c1-t508 r1c2-t508">Selected character set, as a <code dir="ltr">UString</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21732" class="refsect2"><a id="i1084883"></a>
<h2 class="refsect2">setClob()</h2>
<p>Sets a parameter to a <code dir="ltr">Clob</code> value.</p>
<p class="subhead1"><a id="LNCPP21733"></a>Syntax</p>
<pre dir="ltr">void setClob(
   unsigned int paramIndex,
   const Clob &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setClob() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t509">Parameter</th>
<th class="cellalignment2204" id="r1c2-t509">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t509" headers="r1c1-t509">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t509 r1c2-t509">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t509" headers="r1c1-t509">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t509 r1c2-t509">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21734" class="refsect2"><a id="i1084891"></a>
<h2 class="refsect2">setDate()</h2>
<p>Sets a parameter to a <code dir="ltr">Date</code> value.</p>
<p class="subhead1"><a id="LNCPP21735"></a>Syntax</p>
<pre dir="ltr">void setDate(
   unsigned int paramIndex,
   const Date &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setDate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t510">Parameter</th>
<th class="cellalignment2204" id="r1c2-t510">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t510" headers="r1c1-t510">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t510 r1c2-t510">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t510" headers="r1c1-t510">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t510 r1c2-t510">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21736" class="refsect2"><a id="i1086347"></a>
<h2 class="refsect2">setDatabaseNCHARParam()</h2>
<p>If the parameter is going to be inserted in a column that contains data in the database&#39;s <code dir="ltr">NCHAR</code> character set, then OCCI must be informed by passing a <code dir="ltr">TRUE</code> value. A <code dir="ltr">FALSE</code> can be passed to restore the dafault.Returns returns the character set that is in effect for the specified parameter.</p>
<p class="subhead1"><a id="LNCPP21737"></a>Syntax</p>
<pre dir="ltr">void setDatabaseNCHARParam(
   unsigned int paramIndex,
   bool isNCHAR);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setDatabseNCHARParam() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t511">Parameter</th>
<th class="cellalignment2204" id="r1c2-t511">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t511" headers="r1c1-t511">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t511 r1c2-t511">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t511" headers="r1c1-t511">
<pre dir="ltr">isNCHAR
</pre></td>
<td class="cellalignment2205" headers="r3c1-t511 r1c2-t511"><code dir="ltr">TRUE</code> if this parameter contains data in Database&#39;s <code dir="ltr">NCHAR</code> character set; <code dir="ltr">FALSE</code> otherwise</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21738" class="refsect2"><a id="i1086355"></a>
<h2 class="refsect2">setDataBuffer()</h2>
<p>Specifies a data buffer where data would be available. Also used for <code dir="ltr">OUT</code> bind parameters of callable statements.</p>
<p>The <code dir="ltr">buffer</code> parameter is a pointer to a user allocated data buffer. The current length of data must be specified in the <code dir="ltr">length</code> parameter. The amount of data should not exceed the <code dir="ltr">size</code> parameter. Finally, <code dir="ltr">type</code> is the data type of the data.</p>
<p>Note that not all <code dir="ltr">types</code> can be supplied in the buffer. For example, all OCCI allocated types (such as <code dir="ltr">Bytes</code>, <code dir="ltr">Date</code> and so on) cannot be provided by the <a href="#i1086355">setDataBuffer()</a> interface. Similarly, C++ Standard Library strings cannot be provided with the <a href="#i1086355">setDataBuffer()</a> interface either. The <code dir="ltr">type</code> can be any of OCI data types such <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CSTRING</code>, <code dir="ltr">CHARZ</code> and so on.</p>
<p>If <a href="#i1086355">setDataBuffer()</a> is used to specify data for iterative or array executes, it should be called only once in the first iteration only. For subsequent iterations, OCCI would assume that data is at <code dir="ltr">buffer +(i*size)</code> location where <code dir="ltr">i</code> is the iteration number. Similarly the length of the data would be assumed to be at <code dir="ltr">(length+i).</code></p>
<p>For more information on the version of this method that uses 32K <code dir="ltr">length</code> parameter, see <span class="italic">Oracle Database SQL Language Reference</span>.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of setDataBuffer() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t512">Syntax</th>
<th class="cellalignment2204" id="r1c2-t512">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t512" headers="r1c1-t512">
<pre dir="ltr">void setDataBuffer(
   unsigned int paramIndex,
   void *buffer,
   Type type,
   sb4 size,
   ub2 *length,
   sb2 *ind = NULL,
   ub2 *rc= NULL);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t512 r1c2-t512">Uses <code dir="ltr">ub2</code> <code dir="ltr">length</code> buffer. This limits <code dir="ltr">VARCHAR2</code> and <code dir="ltr">NVARCHAR2</code> length to <code dir="ltr">4,000</code> bytes, and <code dir="ltr">RAW</code> data types to <code dir="ltr">2,000</code> bytes.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t512" headers="r1c1-t512">
<pre dir="ltr">void setDataBuffer(
   unsigned int paramIndex,
   void *buffer,
   Type type,
   sb4 size,
   ub4 *length,
   sb2 *ind = NULL,
   ub2 *rc= NULL);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t512 r1c2-t512">Uses <code dir="ltr">ub4</code> <code dir="ltr">length</code> buffer (32K). This increases the length of <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code> and <code dir="ltr">RAW</code> data types.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setDataBuffer() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t513">Parameter</th>
<th class="cellalignment2204" id="r1c2-t513">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t513" headers="r1c1-t513">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t513 r1c2-t513">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t513" headers="r1c1-t513">
<pre dir="ltr">buffer
</pre></td>
<td class="cellalignment2205" headers="r3c1-t513 r1c2-t513">Pointer to user-allocated buffer. For iterative or array executes, it should have <code dir="ltr">numIterations()</code> size bytes in it. For array fetches, it should have <code dir="ltr">numRows</code> * size bytes in it. For gather or scatter binds and defines, this structure stores the address of <code dir="ltr">OCIIOVec</code> and the number of <code dir="ltr">OCIIOVec</code> elements that start at that address.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t513" headers="r1c1-t513">
<pre dir="ltr">type
</pre></td>
<td class="cellalignment2205" headers="r4c1-t513 r1c2-t513">Type of the data that is provided (or retrieved) in the buffer.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t513" headers="r1c1-t513">
<pre dir="ltr">size
</pre></td>
<td class="cellalignment2205" headers="r5c1-t513 r1c2-t513">Size of the data buffer; for iterative and array executes, it is the size of each element of the data items. For gather or scatter binds and defines, it is the size of the <code dir="ltr">OCIIOVecArray</code> to which the <code dir="ltr">buffer</code> points; the <code dir="ltr">mode</code> must be set to <code dir="ltr">IOVEC</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t513" headers="r1c1-t513">
<pre dir="ltr">length
</pre></td>
<td class="cellalignment2205" headers="r6c1-t513 r1c2-t513">Pointer to the length of data in the buffer; for iterative and array executes, it should be an array of length data for each buffer element; the size of the array should be equal to <code dir="ltr">arrayLength()</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t513" headers="r1c1-t513">
<pre dir="ltr">ind
</pre></td>
<td class="cellalignment2205" headers="r7c1-t513 r1c2-t513">Indicator. For iterative and array executes, an indicator for every buffer element.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t513" headers="r1c1-t513">
<pre dir="ltr">rc
</pre></td>
<td class="cellalignment2205" headers="r8c1-t513 r1c2-t513">Returns code; for iterative and array executes, a return code for every buffer element.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21740" class="refsect2"><a id="i1086363"></a>
<h2 class="refsect2">setDataBufferArray()</h2>
<p>Specifies an array of data buffers where data would be available for reading or writing. Used for <code dir="ltr">IN</code>, <code dir="ltr">OUT</code>, and <code dir="ltr">IN/OUT</code> bind parameters for stored procedures which read/write array parameters.</p>
<ul>
<li>
<p>A stored procedure can have an array of values for <code dir="ltr">IN</code>, <code dir="ltr">IN/OUT</code>, or <code dir="ltr">OUT</code> parameters. In this case, the parameter must be specified using the <a href="#i1086363">setDataBufferArray()</a> method. The array is specified just as for the <a href="#i1086355">setDataBuffer()</a> method for iterative or array executes, but the number of elements in the array is determined by <code dir="ltr">*arrayLength</code> parameter.</p>
</li>
<li>
<p>For <code dir="ltr">OUT</code> and <code dir="ltr">IN/OUT</code> parameters, the maximum number of elements in the array is specified (and returned) by the <code dir="ltr">arraySize</code> parameter. The client must ensure that it has allocated size *<code dir="ltr">arraySize</code> bytes for the <code dir="ltr">buffer</code>. For iterative prepared statements, the number of elements in the array is determined by the number of iterations, and for array executes the number of elements in the array is determined by the <code dir="ltr">arrayLength</code> parameter of the <a href="#i1073494">executeArrayUpdate()</a> method. However, for array parameters of stored procedures, the number of elements in the array must be specified in the <code dir="ltr">arrayLength</code> parameter of the <a href="#i1086363">setDataBufferArray()</a> method because each parameter may have a different size array.</p>
</li>
<li>
<p>This is different from prepared statements where for iterative and array executes, the number of elements in the array for each parameter is the same and is determined by the number of iterations of the statement, but a callable statement is executed only once, and each of its parameter can be a varying length array with possibly a different length.</p>
</li>
<li>
<p>For more information on the version of this method that uses 32K <code dir="ltr">elementLength</code> parameter, see <span class="italic">Oracle Database SQL Language Reference</span>.</p>
</li>
</ul>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of setDataBufferArray() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t514">Syntax</th>
<th class="cellalignment2204" id="r1c2-t514">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t514" headers="r1c1-t514">
<pre dir="ltr">void setDataBufferArray(
   unsigned int paramIndex,
   void *buffer,
   Type type,
   ub4 arraySize,
   ub4 *arrayLength,
   sb4 elementSize,
   ub2 *elementLength,
   sb2 *ind = NULL,
   ub2 *rc = NULL);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t514 r1c2-t514">Uses <code dir="ltr">ub2</code> <code dir="ltr">elementLength</code> buffer. This limits <code dir="ltr">VARCHAR2</code> and <code dir="ltr">NVARCHAR2</code> length to <code dir="ltr">4,000</code> bytes, and <code dir="ltr">RAW</code> data types to <code dir="ltr">2,000</code> bytes.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t514" headers="r1c1-t514">
<pre dir="ltr">void setDataBufferArray(
  unsigned int paramIndex,
  void *buffer,
  Type type,
  ub4 arraySize,
  ub4 *arrayLength,
  sb4 elementSize,
  ub4 *elementLength,
  sb2 *ind = NULL,
  ub2 *rc = NULL);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t514 r1c2-t514">Uses <code dir="ltr">ub4</code> <code dir="ltr">elementLength</code> buffer (32K). This increases the length of <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code> and <code dir="ltr">RAW</code> data types.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setDataBufferArray() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t515">Parameter</th>
<th class="cellalignment2204" id="r1c2-t515">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t515" headers="r1c1-t515">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t515 r1c2-t515">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t515" headers="r1c1-t515">
<pre dir="ltr">buffer
</pre></td>
<td class="cellalignment2205" headers="r3c1-t515 r1c2-t515">Pointer to user-allocated buffer. It should have <code dir="ltr">size* arraySize</code> bytes in it. For gather or scatter binds and defines, this structure stores the address of <code dir="ltr">OCIIOVec</code> and the number of <code dir="ltr">OCIIOVec</code> elements that start at that address.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t515" headers="r1c1-t515">
<pre dir="ltr">type
</pre></td>
<td class="cellalignment2205" headers="r4c1-t515 r1c2-t515">Type of the data that is provided (or retrieved) in the buffer.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t515" headers="r1c1-t515">
<pre dir="ltr">arraySize
</pre></td>
<td class="cellalignment2205" headers="r5c1-t515 r1c2-t515">Maximum number of elements in the array.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t515" headers="r1c1-t515">
<pre dir="ltr">arrayLength
</pre></td>
<td class="cellalignment2205" headers="r6c1-t515 r1c2-t515">Pointer to number of current elements in the array.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t515" headers="r1c1-t515">
<pre dir="ltr">elementSize
</pre></td>
<td class="cellalignment2205" headers="r7c1-t515 r1c2-t515">Size of the data buffer for each element. For iterative and array executes, it is the size of each element of the data items. When using gather or scatter binds and defines, it is the size of the <code dir="ltr">OCIIOVecArray</code>; the mode must be set to <code dir="ltr">IOVEC</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t515" headers="r1c1-t515">
<pre dir="ltr">elementLemgth
</pre></td>
<td class="cellalignment2205" headers="r8c1-t515 r1c2-t515">Pointer to an array of lengths. <code dir="ltr">elementLength[i]</code> has the current length of the <code dir="ltr">i</code>th element of the array.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t515" headers="r1c1-t515">
<pre dir="ltr">ind
</pre></td>
<td class="cellalignment2205" headers="r9c1-t515 r1c2-t515">Pointer to an array of indicators. An indicator for every buffer element.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t515" headers="r1c1-t515">
<pre dir="ltr">rcs
</pre></td>
<td class="cellalignment2205" headers="r10c1-t515 r1c2-t515">Pointer to an array of return codes.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21742" class="refsect2"><a id="i1086371"></a>
<h2 class="refsect2">setDouble()</h2>
<p>Sets a parameter to a C++ double value.</p>
<p class="subhead1"><a id="LNCPP21743"></a>Syntax</p>
<pre dir="ltr">void setDouble(
   unsigned int paramIndex,
   double val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setDouble() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t516">Parameter</th>
<th class="cellalignment2204" id="r1c2-t516">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t516" headers="r1c1-t516">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t516 r1c2-t516">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t516" headers="r1c1-t516">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t516 r1c2-t516">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21744" class="refsect2"><a id="i1086379"></a>
<h2 class="refsect2">setErrorOnNull()</h2>
<p>Enables/disables exceptions for reading of <code dir="ltr">NULL</code> values on paramIndex parameter of the statement. If exceptions are enabled, calling a <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> on <code dir="ltr">paramIndex</code> parameter would result in an <code dir="ltr">SQLException</code> if the parameter value is <code dir="ltr">NULL</code>. This call can also be used to disable exceptions.</p>
<p class="subhead1"><a id="LNCPP21745"></a>Syntax</p>
<pre dir="ltr">void setErrorOnNull(
   unsigned int paramIndex,
   bool causeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setErrorOnNull() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t517">Parameter</th>
<th class="cellalignment2204" id="r1c2-t517">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t517" headers="r1c1-t517">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t517 r1c2-t517">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t517" headers="r1c1-t517">
<pre dir="ltr">causeException
</pre></td>
<td class="cellalignment2205" headers="r3c1-t517 r1c2-t517">Enable exceptions if <code dir="ltr">TRUE</code>. Disable if <code dir="ltr">FALSE</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21746" class="refsect2"><a id="i1107128"></a>
<h2 class="refsect2">setErrorOnTruncate()</h2>
<p>This method enables/disables exceptions when truncation occurs.</p>
<p class="subhead1"><a id="LNCPP21747"></a>Syntax</p>
<pre dir="ltr">void setErrorOnTruncate(
   unsigned int paramIndex,
   bool causeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setErrorOnTruncate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t518">Parameter</th>
<th class="cellalignment2204" id="r1c2-t518">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t518" headers="r1c1-t518">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t518 r1c2-t518">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t518" headers="r1c1-t518">
<pre dir="ltr">causeException
</pre></td>
<td class="cellalignment2205" headers="r3c1-t518 r1c2-t518">Enable exceptions if <code dir="ltr">TRUE</code>. Disable if <code dir="ltr">FALSE</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21748" class="refsect2"><a id="i1086737"></a>
<h2 class="refsect2">setFloat()</h2>
<p>Sets a parameter to a C++ float value.</p>
<p class="subhead1"><a id="LNCPP21749"></a>Syntax</p>
<pre dir="ltr">void setFloat(
   unsigned int paramIndex,
   float val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setFloat() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t519">Parameter</th>
<th class="cellalignment2204" id="r1c2-t519">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t519" headers="r1c1-t519">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t519 r1c2-t519">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t519" headers="r1c1-t519">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t519 r1c2-t519">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21750" class="refsect2"><a id="i1086745"></a>
<h2 class="refsect2">setInt()</h2>
<p>Sets a parameter to a C++ int value.</p>
<p class="subhead1"><a id="LNCPP21751"></a>Syntax</p>
<pre dir="ltr">void setInt(
   unsigned int paramIndex,
   int val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setInt() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t520">Parameter</th>
<th class="cellalignment2204" id="r1c2-t520">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t520" headers="r1c1-t520">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t520 r1c2-t520">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t520" headers="r1c1-t520">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t520 r1c2-t520">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21752" class="refsect2"><a id="i1086753"></a>
<h2 class="refsect2">setIntervalDS()</h2>
<p>Sets a parameter to a <code dir="ltr">IntervalDS</code> value.</p>
<p class="subhead1"><a id="LNCPP21753"></a>Syntax</p>
<pre dir="ltr">void setIntervalDS(
   unsigned int paramIndex,
   const IntervalDS &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setIntervalDS() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t521">Parameter</th>
<th class="cellalignment2204" id="r1c2-t521">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t521" headers="r1c1-t521">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t521 r1c2-t521">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t521" headers="r1c1-t521">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t521 r1c2-t521">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21754" class="refsect2"><a id="i1086761"></a>
<h2 class="refsect2">setIntervalYM()</h2>
<p>Sets a parameter to a <code dir="ltr">Interval</code> value.</p>
<p class="subhead1"><a id="LNCPP21755"></a>Syntax</p>
<pre dir="ltr">void setIntervalYM(
   unsigned int paramIndex,
   const IntervalYM &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setIntervalYM() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t522">Parameter</th>
<th class="cellalignment2204" id="r1c2-t522">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t522" headers="r1c1-t522">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t522 r1c2-t522">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t522" headers="r1c1-t522">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t522 r1c2-t522">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21756" class="refsect2"><a id="i1086769"></a>
<h2 class="refsect2">setMaxIterations()</h2>
<p>Sets the maximum number of invocations that are made for the DML statement. This must be called before any parameters are set on the prepared statement. The larger the iterations, the larger the numbers of parameters sent to the server in one round trip. However, a large number causes more memory to be reserved for all the parameters. Note that this is just the maximum limit. Actual number of iterations depends on the number of calls to <a href="#i1094372">addIteration()</a>.</p>
<p class="subhead1"><a id="LNCPP21757"></a>Syntax</p>
<pre dir="ltr">void setMaxIterations(
   unsigned int maxIterations);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setMaxIterations() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t523">Parameter</th>
<th class="cellalignment2204" id="r1c2-t523">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t523" headers="r1c1-t523">
<pre dir="ltr">maxIterations
</pre></td>
<td class="cellalignment2205" headers="r2c1-t523 r1c2-t523">Maximum number of iterations allowed on this statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21758" class="refsect2"><a id="i1086777"></a>
<h2 class="refsect2">setMaxParamSize()</h2>
<p>This method sets the maximum amount of data to be sent or received for the specified parameter. It only applies to character and binary data. If the maximum amount is exceeded, the excess data is discarded. This method can be very useful when working with a <code dir="ltr">LONG</code> column. It can be used to truncate the <code dir="ltr">LONG</code> column by reading or writing it into a string or <code dir="ltr">Bytes</code> data type.</p>
<p>If the <a href="#i1094388">getSQL()</a> or <a href="#i1094436">setBytes()</a> method has been called to bind a value to an <code dir="ltr">IN</code>/<code dir="ltr">OUT</code> parameter of a PL/SQL procedure, and the size of the <code dir="ltr">OUT</code> value is expected to be greater than the size of the <code dir="ltr">IN</code> value, then <a href="#i1086777">setMaxParamSize()</a> should be called.</p>
<p class="subhead1"><a id="LNCPP21759"></a>Syntax</p>
<pre dir="ltr">void setMaxParamSize(
   unsigned int paramIndex,
   unsigned int maxSize);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setMaxParamSize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t524">Parameter</th>
<th class="cellalignment2204" id="r1c2-t524">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t524" headers="r1c1-t524">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t524 r1c2-t524">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t524" headers="r1c1-t524">
<pre dir="ltr">maxSize
</pre></td>
<td class="cellalignment2205" headers="r3c1-t524 r1c2-t524">The new maximum parameter size limit; must be &gt;0.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21760" class="refsect2"><a id="i1086785"></a>
<h2 class="refsect2">setNull()</h2>
<p>Sets a parameter to SQL <code dir="ltr">NULL</code>. Note that you must specify the parameter&#39;s SQL type.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of setNull() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t525">Syntax</th>
<th class="cellalignment2204" id="r1c2-t525">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t525" headers="r1c1-t525">
<pre dir="ltr">void setNull(
   unsigned int paramIndex,
   Type type);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t525 r1c2-t525">Sets the value of a parameter to <code dir="ltr">NULL</code> using an object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t525" headers="r1c1-t525">
<pre dir="ltr">void setNull(
   unsigned int paramIndex,
   Type type,
   const string &amp;typeName,
   const string &amp;schemaName = &#34;&#34;)
</pre></td>
<td class="cellalignment2205" headers="r3c1-t525 r1c2-t525">Sets the value of a parameter to <code dir="ltr">NULL</code> for object and collection types, <code dir="ltr">OCCIPOBJECT</code> and <code dir="ltr">OCCIVECTOR</code>. Uses the appropriate schema and type name of the object or collection type. Support for <code dir="ltr">string</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t525" headers="r1c1-t525">
<pre dir="ltr">void setNull(
   unsigned int paramIndex, 
   Type type, 
   UString &amp;typeName, 
   UString &amp;schemaName);
</pre></td>
<td class="cellalignment2205" headers="r4c1-t525 r1c2-t525">Sets the value of a parameter to <code dir="ltr">NULL</code> for object and collection types, <code dir="ltr">OCCIPOBJECT</code> and <code dir="ltr">OCCIVECTOR</code>. Uses the appropriate schema and type name of the object or collection type. Support for <code dir="ltr">UString</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setNull() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t526">Parameter</th>
<th class="cellalignment2204" id="r1c2-t526">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t526" headers="r1c1-t526">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t526 r1c2-t526">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t526" headers="r1c1-t526">
<pre dir="ltr">type
</pre></td>
<td class="cellalignment2205" headers="r3c1-t526 r1c2-t526">SQL type.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t526" headers="r1c1-t526">
<pre dir="ltr">typeName
</pre></td>
<td class="cellalignment2205" headers="r4c1-t526 r1c2-t526">Type name of the object or collection.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t526" headers="r1c1-t526">
<pre dir="ltr">schemaName
</pre></td>
<td class="cellalignment2205" headers="r5c1-t526 r1c2-t526">Name of the schema where the object or collection is defined.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21761" class="refsect2"><a id="i1086793"></a>
<h2 class="refsect2">setNumber()</h2>
<p>Sets a parameter to a <code dir="ltr">Number</code> value.</p>
<p class="subhead1"><a id="LNCPP21762"></a>Syntax</p>
<pre dir="ltr">void setNumber(
   unsigned int paramIndex,
   const Number &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setNumber() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t527">Parameter</th>
<th class="cellalignment2204" id="r1c2-t527">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t527" headers="r1c1-t527">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t527 r1c2-t527">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t527" headers="r1c1-t527">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t527 r1c2-t527">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21763" class="refsect2"><a id="i1086801"></a>
<h2 class="refsect2">setObject()</h2>
<p>Sets the value of a parameter using an object; use the C++.lang equivalent objects for integral values. The OCCI specification specifies a standard mapping from C++ <code dir="ltr">Object</code> types to SQL types. The given parameter C++ object is converted to the corresponding SQL type before being sent to the database.</p>
<p class="subhead1"><a id="LNCPP21764"></a>Syntax</p>
<pre dir="ltr">void setObject(
   unsigned int paramIndex,
   PObject* val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setObject() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t528">Parameter</th>
<th class="cellalignment2204" id="r1c2-t528">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t528" headers="r1c1-t528">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t528 r1c2-t528">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t528" headers="r1c1-t528">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t528 r1c2-t528">The object containing the input parameter value.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t528" headers="r1c1-t528">
<pre dir="ltr">sqltyp
</pre></td>
<td class="cellalignment2205" headers="r4c1-t528 r1c2-t528">The SQL type name of the object to be set.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21765" class="refsect2"><a id="i1086809"></a>
<h2 class="refsect2">setPrefetchMemorySize()</h2>
<p>Sets the amount of memory that is used internally by OCCI to store data fetched during each round trip to the server. A value of <code dir="ltr">0</code> means that the amount of data fetched during the round trip is constrained by the <code dir="ltr">FetchRowCount</code> parameter. If both parameters are nonzero, the smaller of the two is used.</p>
<p class="subhead1"><a id="LNCPP21766"></a>Syntax</p>
<pre dir="ltr">void setPrefetchMemorySize(
   unsigned int bytes);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setPrefetchMemorySize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t529">Parameter</th>
<th class="cellalignment2204" id="r1c2-t529">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t529" headers="r1c1-t529">
<pre dir="ltr">bytes
</pre></td>
<td class="cellalignment2205" headers="r2c1-t529 r1c2-t529">Number of bytes used for storing data fetched during each server round trip.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21767" class="refsect2"><a id="i1086817"></a>
<h2 class="refsect2">setPrefetchRowCount()</h2>
<p>Sets the number of rows that are fetched internally by OCCI during each round trip to the server. A value of <code dir="ltr">0</code> means that the amount of data fetched during the round trip is constrained by the <code dir="ltr">FetchMemorySize</code> parameter. If both parameters are nonzero, the smaller of the two is used. If both of these parameters are zero, row count internally defaults to <code dir="ltr">1</code> row and that is the value returned from the <code dir="ltr">getFetchRowCount()</code> method.</p>
<p class="subhead1"><a id="LNCPP21768"></a>Syntax</p>
<pre dir="ltr">void setPrefetchRowCount(
   unsigned int rowCount);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setPrefetchRowCount() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t530">Parameter</th>
<th class="cellalignment2204" id="r1c2-t530">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t530" headers="r1c1-t530">
<pre dir="ltr">rowCount
</pre></td>
<td class="cellalignment2205" headers="r2c1-t530 r1c2-t530">Number of rows to fetch for each round trip to the server.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21769" class="refsect2"><a id="BBAGEGCE"></a>
<h2 class="refsect2">setRef()</h2>
<p>Sets the value of a parameter to a reference. A <code dir="ltr">Ref&lt;T&gt;</code> instance is implicitly converted to a <code dir="ltr">RefAny</code> object during this call.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of setRef() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t531">Syntax</th>
<th class="cellalignment2204" id="r1c2-t531">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t531" headers="r1c1-t531">
<pre dir="ltr">void setRef(
   unsigned int paramIndex,
   const RefAny &amp;refAny); 
</pre></td>
<td class="cellalignment2205" headers="r2c1-t531 r1c2-t531">Sets the value of a parameter to a reference.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t531" headers="r1c1-t531">
<pre dir="ltr">void setRef(
   unsigned int paramIndex,
   const RefAny &amp;refAny,
   const string &amp;typName,
   const string &amp;schName = &#34;&#34;);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t531 r1c2-t531">Sets the value of a parameter to a reference. If the <code dir="ltr">Statement</code> represents a callable PL/SQL method, pass the schema name and type name of the object represented by the <code dir="ltr">Ref</code>. Support for <code dir="ltr">string</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t531" headers="r1c1-t531">
<pre dir="ltr">void setRef(
   unsigned int paramIndex,
   const RefAny &amp;refAny,
   const UString &amp;typName,
   const UString &amp;schName);
</pre></td>
<td class="cellalignment2205" headers="r4c1-t531 r1c2-t531">Sets the value of a parameter to a reference. If the <code dir="ltr">Statement</code> represents a callable PL/SQL method, pass the schema name and type name of the object represented by the <code dir="ltr">Ref</code>. Support for <code dir="ltr">UString</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setRef() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t532">Parameter</th>
<th class="cellalignment2204" id="r1c2-t532">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t532" headers="r1c1-t532">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t532 r1c2-t532">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t532" headers="r1c1-t532">
<pre dir="ltr">refAny
</pre></td>
<td class="cellalignment2205" headers="r3c1-t532 r1c2-t532">The reference.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t532" headers="r1c1-t532">
<pre dir="ltr">typName
</pre></td>
<td class="cellalignment2205" headers="r4c1-t532 r1c2-t532">The type of the object [optional].</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t532" headers="r1c1-t532">
<pre dir="ltr">schName
</pre></td>
<td class="cellalignment2205" headers="r5c1-t532 r1c2-t532">The schema where the object type is defined [optional].</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21917" class="refsect2"><a id="CIAIHBDI"></a>
<h2 class="refsect2">setRowCountsOption()</h2>
<p>Set <code dir="ltr">flag</code> to <code dir="ltr">TRUE</code> to enable return of DML row counts per iteration when invoking <a href="#CIAEJDFE">getDMLRowCounts()</a>.</p>
<p>This option should be set before the statement executes. By default, the DML row counts per iteration are not returned.</p>
<p class="subhead1"><a id="LNCPP21918"></a>Syntax</p>
<pre dir="ltr">void setRowCountsOption(
   bool flag);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setRowCountOption() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t533">Parameter</th>
<th class="cellalignment2204" id="r1c2-t533">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t533" headers="r1c1-t533">
<pre dir="ltr">flag
</pre></td>
<td class="cellalignment2205" headers="r2c1-t533 r1c2-t533"><code dir="ltr">TRUE</code> to return DML row counts, <code dir="ltr">FALSE</code> otherwise</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21770" class="refsect2"><a id="i1086833"></a>
<h2 class="refsect2">setRowid()</h2>
<p>Sets a <code dir="ltr">Rowid</code> bytes array for a bind position.</p>
<p class="subhead1"><a id="LNCPP21771"></a>Syntax</p>
<pre dir="ltr">void setRowid(
   unsigned int paramIndex,
   const Bytes &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setRowid() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t534">Parameter</th>
<th class="cellalignment2204" id="r1c2-t534">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t534" headers="r1c1-t534">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t534 r1c2-t534">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t534" headers="r1c1-t534">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t534 r1c2-t534">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21772" class="refsect2"><a id="i1086841"></a>
<h2 class="refsect2">setSQL()</h2>
<p>A new SQL string can be associated with a <code dir="ltr">Statement</code> object using this call. Resources associated with the previous SQL statement are freed. In particular, a previously obtained result set is invalidated. If an empty SQL string, <code dir="ltr">&#34;&#34;</code>, is used when the <code dir="ltr">Statement</code> is created, a <code dir="ltr">setSQL</code> method with the proper SQL string must be performed first.</p>
<p class="subhead1"><a id="LNCPP21773"></a>Syntax</p>
<pre dir="ltr">void setSQL(
   const string &amp;sql);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setSQL() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t535">Parameter</th>
<th class="cellalignment2204" id="r1c2-t535">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t535" headers="r1c1-t535">
<pre dir="ltr">sql
</pre></td>
<td class="cellalignment2205" headers="r2c1-t535 r1c2-t535">Any SQL statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21774" class="refsect2"><a id="CHECDFDD"></a>
<h2 class="refsect2">setSQLUString()</h2>
<p>Associate an SQL statement with this object. Unicode support: the client <code dir="ltr">Environment</code> should be initialized in OCCIUTIF16 mode.</p>
<p class="subhead1"><a id="LNCPP21775"></a>Syntax</p>
<pre dir="ltr">void setSQLUString(
   const UString &amp;sql);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setSQLUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t536">Parameter</th>
<th class="cellalignment2204" id="r1c2-t536">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t536" headers="r1c1-t536">
<pre dir="ltr">sql
</pre></td>
<td class="cellalignment2205" headers="r2c1-t536 r1c2-t536">A SQL statement in same character set as the connection source of the statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21776" class="refsect2"><a id="i1073503"></a>
<h2 class="refsect2">setString()</h2>
<p>Sets a parameter for a specified index.</p>
<p class="subhead1"><a id="LNCPP21777"></a>Syntax</p>
<pre dir="ltr">void setString(
   unsigned int paramIndex,
   const string &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setUInt() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t537">Parameter</th>
<th class="cellalignment2204" id="r1c2-t537">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t537" headers="r1c1-t537">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t537 r1c2-t537">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t537" headers="r1c1-t537">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t537 r1c2-t537">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21778" class="refsect2"><a id="i1086856"></a>
<h2 class="refsect2">setTimestamp()</h2>
<p>Sets a parameter to a <code dir="ltr">Timestamp</code> value.</p>
<p class="subhead1"><a id="LNCPP21779"></a>Syntax</p>
<pre dir="ltr">void setTimestamp(
   unsigned int paramIndex,
   const Timestamp &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setTimestamp() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t538">Parameter</th>
<th class="cellalignment2204" id="r1c2-t538">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t538" headers="r1c1-t538">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t538 r1c2-t538">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t538" headers="r1c1-t538">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t538 r1c2-t538">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21780" class="refsect2"><a id="i1086864"></a>
<h2 class="refsect2">setUInt()</h2>
<p>Sets a parameter to a C++ unsigned int value.</p>
<p class="subhead1"><a id="LNCPP21781"></a>Syntax</p>
<pre dir="ltr">void setUInt(
   unsigned int paramIndex,
   unsigned int val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setUInt() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t539">Parameter</th>
<th class="cellalignment2204" id="r1c2-t539">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t539" headers="r1c1-t539">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t539 r1c2-t539">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t539" headers="r1c1-t539">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t539 r1c2-t539">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21782" class="refsect2"><a id="CHEBAADJ"></a>
<h2 class="refsect2">setUString()</h2>
<p>Sets a parameter for a specified index; globalization enabled.</p>
<p class="subhead1"><a id="LNCPP21783"></a>Syntax</p>
<pre dir="ltr">void setUString(
   unsigned int paramIndex,
   const UString &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t540">Parameter</th>
<th class="cellalignment2204" id="r1c2-t540">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t540" headers="r1c1-t540">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r2c1-t540 r1c2-t540">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t540" headers="r1c1-t540">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t540 r1c2-t540">The parameter value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21784" class="refsect2"><a id="i1107158"></a>
<h2 class="refsect2">setVector()</h2>
<p>Sets a parameter to a vector. This method is necessary when the type is a collection type, varrays or nested tables. The SQL Type of the elements in the collection should be compatible with the type of the vector. For example, if the collection is a varray of <code dir="ltr">VARCHAR2</code>, use <code dir="ltr">vector&lt;string&gt;.</code></p>
<div class="inftblinformal">
<table class="cellalignment2206" title="Versions of setVector() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t541">Syntax</th>
<th class="cellalignment2204" id="r1c2-t541">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt; T &gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t541 r1c2-t541">Intended for use on platforms where partial ordering of function templates is not supported, such as Windows NT and z/OS. Multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;T* &gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t541 r1c2-t541">Intended for use on platforms where partial ordering of function templates is supported. Multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;BDouble&gt; &amp;vect
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r4c1-t541 r1c2-t541">Sets a <code dir="ltr">BDouble</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Bfile&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r5c1-t541 r1c2-t541">Sets a <code dir="ltr">const Bfile</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Bfile&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r6c1-t541 r1c2-t541">Sets a <code dir="ltr">const BFile</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;BFloat&gt; &amp;vect
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r7c1-t541 r1c2-t541">Sets a <code dir="ltr">BFloat</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Blob&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r8c1-t541 r1c2-t541">Sets a <code dir="ltr">const Blob</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Blob&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r9c1-t541 r1c2-t541">Sets a <code dir="ltr">const Blob</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Bytes&gt; &amp;vect,
   const string &amp;sqltype); 
</pre></td>
<td class="cellalignment2205" headers="r10c1-t541 r1c2-t541">Sets a <code dir="ltr">const Bytes</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Bytes&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r11c1-t541 r1c2-t541">Sets a <code dir="ltr">const Bytes</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Bytes&gt; &amp;vect,
   const Ustring &amp;schemaName,
   const Ustring &amp;typeName); 
</pre></td>
<td class="cellalignment2205" headers="r12c1-t541 r1c2-t541">Sets a <code dir="ltr">const Bytes</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Clob&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r13c1-t541 r1c2-t541">Sets a <code dir="ltr">const Clob</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Clob&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r14c1-t541 r1c2-t541">Sets a <code dir="ltr">const Clob</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Date&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r15c1-t541 r1c2-t541">Sets a <code dir="ltr">const Date</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Date&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r16c1-t541 r1c2-t541">Sets a <code dir="ltr">const Date</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;double&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r17c1-t541 r1c2-t541">Sets a <code dir="ltr">const double</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;double&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r18c1-t541 r1c2-t541">Sets a <code dir="ltr">const double</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;float&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r19c1-t541 r1c2-t541">Sets a <code dir="ltr">const float</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;float&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r20c1-t541 r1c2-t541">Sets a <code dir="ltr">const float</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;int&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r21c1-t541 r1c2-t541">Sets a <code dir="ltr">const int</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;int&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r22c1-t541 r1c2-t541">Sets a <code dir="ltr">const int</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r23c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;IntervalDS&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r23c1-t541 r1c2-t541">Sets a <code dir="ltr">const IntervalDS</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r24c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;IntervalDS&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r24c1-t541 r1c2-t541">Sets a <code dir="ltr">const IntervalDS</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r25c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;IntervalYM&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r25c1-t541 r1c2-t541">Sets a <code dir="ltr">const IntervalYM</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r26c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;IntervalYM&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r26c1-t541 r1c2-t541">Sets a <code dir="ltr">const IntervalYM</code> vector; UTF16 support</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r27c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Number&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r27c1-t541 r1c2-t541">Sets a <code dir="ltr">const Number</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r28c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Number&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r28c1-t541 r1c2-t541">Sets a <code dir="ltr">const Number</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r29c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;RefAny&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r29c1-t541 r1c2-t541">Sets a <code dir="ltr">const RefAny</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r30c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;RefAny&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r30c1-t541 r1c2-t541">Sets a <code dir="ltr">const RefAny</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r31c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;string&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r31c1-t541 r1c2-t541">Sets a <code dir="ltr">const string</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r32c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;string&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r32c1-t541 r1c2-t541">Sets a <code dir="ltr">const string</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r33c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Timestamp&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r33c1-t541 r1c2-t541">Sets a <code dir="ltr">const Timestamp</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r34c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Timestamp&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r34c1-t541 r1c2-t541">Sets a <code dir="ltr">const Timestamp</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r35c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;unsigned int&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r35c1-t541 r1c2-t541">Sets a <code dir="ltr">const unsigned int</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r36c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;unsigned int&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r36c1-t541 r1c2-t541">Sets a <code dir="ltr">const unsigned int</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r37c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Bfile&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r37c1-t541 r1c2-t541">Sets a <code dir="ltr">Bfile</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r38c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Blob&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r38c1-t541 r1c2-t541">Sets a <code dir="ltr">Blob</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r39c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Clob&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r39c1-t541 r1c2-t541">Sets a <code dir="ltr">Clob</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r40c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Date&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r40c1-t541 r1c2-t541">Sets a <code dir="ltr">Date</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r41c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;double&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r41c1-t541 r1c2-t541">Sets a <code dir="ltr">double</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r42c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;float&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r42c1-t541 r1c2-t541">Sets a <code dir="ltr">float</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r43c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;int&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r43c1-t541 r1c2-t541">Sets an <code dir="ltr">int</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r44c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;IntervalDS&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r44c1-t541 r1c2-t541">Sets an <code dir="ltr">IntervalDS</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r45c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;IntervalYM&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r45c1-t541 r1c2-t541">Sets an <code dir="ltr">IntervalYM</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r46c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Number&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r46c1-t541 r1c2-t541">Sets a <code dir="ltr">Number</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r47c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;RefAny&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r47c1-t541 r1c2-t541">Sets a <code dir="ltr">RefAn</code>y vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r48c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;string&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r48c1-t541 r1c2-t541">Sets a <code dir="ltr">string</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r49c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Timestamp&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r49c1-t541 r1c2-t541">Sets a <code dir="ltr">Timestamp</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r50c1-t541" headers="r1c1-t541">
<pre dir="ltr">void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;unsigned int&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r50c1-t541 r1c2-t541">Sets an <code dir="ltr">unsigned int</code> vector.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r51c1-t541" headers="r1c1-t541">
<pre dir="ltr">template &lt;class T&gt;
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt; T* &gt; &amp;vect,
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r51c1-t541 r1c2-t541">Intended for use on platforms where partial ordering of function templates is <span class="italic">not</span> supported.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r52c1-t541" headers="r1c1-t541">
<pre dir="ltr">template &lt;class T&gt;
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;T&gt; &amp;vect,
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r52c1-t541 r1c2-t541">Intended for use on platforms where partial ordering of function templates is supported.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r53c1-t541" headers="r1c1-t541">
<pre dir="ltr">template &lt;class T&gt;
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Ref&lt;T&gt;&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r53c1-t541 r1c2-t541">Available only on platforms where partial ordering of function templates is supported. <a href="#i1152343">setVectorOfRefs()</a> can be used instead.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setVector() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t542">Parameter</th>
<th class="cellalignment2204" id="r1c2-t542">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t542" headers="r1c1-t542">
<pre dir="ltr">stmt
</pre></td>
<td class="cellalignment2205" headers="r2c1-t542 r1c2-t542">Statement on which parameter is to be set.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t542" headers="r1c1-t542">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r3c1-t542 r1c2-t542">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t542" headers="r1c1-t542">
<pre dir="ltr">vect
</pre></td>
<td class="cellalignment2205" headers="r4c1-t542 r1c2-t542">The vector to be set.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t542" headers="r1c1-t542">
<pre dir="ltr">sqltype
</pre></td>
<td class="cellalignment2205" headers="r5c1-t542 r1c2-t542">Sqltype of the collection in the database. For example, <code dir="ltr">CREATE TYPE num_coll AS VARRAY OF NUMBER</code>. And the column/parameter type is <code dir="ltr">num_coll</code>. The sqltype would be <code dir="ltr">num_coll</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t542" headers="r1c1-t542">
<pre dir="ltr">schemaName
</pre></td>
<td class="cellalignment2205" headers="r6c1-t542 r1c2-t542">Name of the schema used</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t542" headers="r1c1-t542">
<pre dir="ltr">typeName
</pre></td>
<td class="cellalignment2205" headers="r7c1-t542 r1c2-t542">Type</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21785" class="refsect2"><a id="i1152343"></a>
<h2 class="refsect2">setVectorOfRefs()</h2>
<p>Sets a parameter to a vector; is necessary when the type is a collection of <code dir="ltr">REF</code>s or nested tables of <code dir="ltr">REF</code>s.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of setVectorOfRefs() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t543">Syntax</th>
<th class="cellalignment2204" id="r1c2-t543">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t543" headers="r1c1-t543">
<pre dir="ltr">template  &lt;class T&gt; void setVectorOfRefs(
   Statement *stmt, unsigned int paramIndex,
   const vector&lt;Ref&lt;T&gt; &gt; &amp;vect,
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t543 r1c2-t543">Sets a parameter to a vector; is necessary when the type is a collection of <code dir="ltr">REF</code>s are varrays or nested tables of <code dir="ltr">REF</code>s.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t543" headers="r1c1-t543">
<pre dir="ltr">template  &lt;class T&gt;  void setVectorOfRefs(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Ref&lt;T&gt; &gt; &amp;vect,
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t543 r1c2-t543">Used for multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t543" headers="r1c1-t543">
<pre dir="ltr">template  &lt;class T&gt; void setVectorOfRefs(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Ref&lt;T&gt;&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r4c1-t543 r1c2-t543">Used for multibyte support.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t543" headers="r1c1-t543">
<pre dir="ltr">template  &lt;class T&gt; void setVectorOfRefs(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Ref&lt;T&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r5c1-t543 r1c2-t543">Used for UTF16 support on platforms where partial ordering of function templates is not supported, such as Windows NT and z/OS.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t543" headers="r1c1-t543">
<pre dir="ltr">template &lt;class T&gt;  void setVector(
Statement *stmt,
unsigned int paramIndex,
const vector&lt;T* &gt; &amp;vect,
const UString &amp;schemaName,
const UString &amp;typeName);
</pre></td>
<td class="cellalignment2205" headers="r6c1-t543 r1c2-t543">Used for UTF16 support on platforms where partial ordering of function templates is supported.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setVectorOfRefs() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t544">Parameter</th>
<th class="cellalignment2204" id="r1c2-t544">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t544" headers="r1c1-t544">
<pre dir="ltr">stmt
</pre></td>
<td class="cellalignment2205" headers="r2c1-t544 r1c2-t544">Statement on which parameter is to be set.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t544" headers="r1c1-t544">
<pre dir="ltr">paramIndex
</pre></td>
<td class="cellalignment2205" headers="r3c1-t544 r1c2-t544">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t544" headers="r1c1-t544">
<pre dir="ltr">vect
</pre></td>
<td class="cellalignment2205" headers="r4c1-t544 r1c2-t544">Vector to be set.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t544" headers="r1c1-t544">
<pre dir="ltr">sqltype
</pre></td>
<td class="cellalignment2205" headers="r5c1-t544 r1c2-t544">Sqltype of the parameter or column. Use <a href="#i1152343">setVectorOfRefs()</a> instead of specialized function <a href="#i1107158">setVector()</a> for <code dir="ltr">Ref&lt;T&gt;</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t544" headers="r1c1-t544">
<pre dir="ltr">schemaName
</pre></td>
<td class="cellalignment2205" headers="r6c1-t544 r1c2-t544">Name of the schema used</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t544" headers="r1c1-t544">
<pre dir="ltr">typeName
</pre></td>
<td class="cellalignment2205" headers="r7c1-t544 r1c2-t544">Type</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21786" class="refsect2"><a id="i1086880"></a>
<h2 class="refsect2">status()</h2>
<p>Returns the current status of the statement. Useful when there is streamed data to be written (or read). Other methods such as <a href="#i1084015">getCurrentStreamParam()</a> and <a href="#i1083876">getCurrentIteration()</a> can be called to find out the streamed parameter that must be written and the current iteration number for an iterative or array execute. The <a href="reference027.htm#i1076893">status()</a>method can be called repeatedly to find out the status of the execution.</p>
<p>The returned value, Status, is defined in <a href="#CIAEGJCC">Table 13-43</a>.</p>
<p class="subhead1"><a id="LNCPP21787"></a>Syntax</p>
<pre dir="ltr">Status status() const;
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2196">
<tr>
<td class="cellalignment2205">
<table class="cellalignment2201">
<tr>
<td class="cellalignment2200"><a href="reference029.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2200"><a href="reference031.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2208">
<table class="cellalignment2199">
<tr>
<td class="cellalignment2200"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2200"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2200"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2200"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2200"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2200"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>