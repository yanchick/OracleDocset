<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-73913"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Connection%20Class"></a><title>Connection Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1082"/>
<meta name="dcterms.created" content="2016-06-01T12:8:11Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="C++ Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E48221-07"/>
<meta name="dcterms.isVersionOf" content="LNCPP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="reference009.htm" title="Previous" type="text/html"/>
<link rel="Next" href="reference011.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48221-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">30/54</span> <!-- End Header --><a id="i1118650"></a>
<div id="LNCPP1007" class="refsect1">
<h1 class="refsect1">Conne<a id="sthref732"></a><a id="sthref733"></a><a id="sthref734"></a>ction Class</h1>
<p>The <code dir="ltr">Connection</code> class represents a connection with a specific database. Inside the connection, SQL statements are executed and results are returned.</p>
<div id="LNCPP20759" class="tblformal">
<p class="titleintable"><a id="sthref735"></a><a id="BBAEAHAH"></a>Table 13-11 Enumerated Values Used by Connection Class</p>
<table class="cellalignment2203" title="Enumerated Values Used by Connection Class" summary="First column lists the attribute used by the class, the second column describes the options available to each attribute" dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t99">Attribute</th>
<th class="cellalignment2204" id="r1c2-t99">Options</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t99" headers="r1c1-t99">
<pre dir="ltr">FailOverEventType
</pre></td>
<td class="cellalignment2205" headers="r2c1-t99 r1c2-t99">
<ul>
<li>
<p><code dir="ltr">FO_BEGIN</code> indicates that a lost connection has been detected; failover is starting.</p>
</li>
<li>
<p><code dir="ltr">FO_END</code> indicates that a failover completed successfully; the <code dir="ltr">Connection</code> is ready for use.</p>
</li>
<li>
<p><code dir="ltr">FO_ABORT</code> indicates that the failover was unsuccessful; it is not be attempted again.</p>
</li>
<li>
<p><code dir="ltr">FO_REAUTH</code> indicates that the user session has been reauthenticated.</p>
</li>
<li>
<p><code dir="ltr">FO_ERROR</code> indicates that a failover was unsuccessful; the application can handle the error and retry failover.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t99" headers="r1c1-t99">
<pre dir="ltr">FailOverType
</pre></td>
<td class="cellalignment2205" headers="r3c1-t99 r1c2-t99">
<ul>
<li>
<p><code dir="ltr">FO_NONE</code> indicates that the user requested no protection for failover.</p>
</li>
<li>
<p><code dir="ltr">FO_SESSION</code> indicates that the user requested only session failover.</p>
</li>
<li>
<p><code dir="ltr">FO_SELECT</code> indicates that the use requested select failover.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t99" headers="r1c1-t99">
<pre dir="ltr">ProxyType
</pre></td>
<td class="cellalignment2205" headers="r4c1-t99 r1c2-t99">
<ul>
<li>
<p><code dir="ltr">PROXY_DEFAULT</code> is the database user name.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP20760" class="tblformal">
<p class="titleintable"><a id="sthref736"></a><a id="sthref737"></a>Table 13-12 Summary of <a id="sthref738"></a><a id="sthref739"></a>Connection Methods</p>
<table class="cellalignment2203" title="Summary of Connection Methods " summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t100">Method</th>
<th class="cellalignment2204" id="r1c2-t100">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t100" headers="r1c1-t100">
<p><a href="#i1148337">changePassword()</a></p>
</td>
<td class="cellalignment2205" headers="r2c1-t100 r1c2-t100">
<p>Changes the password for the current user.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t100" headers="r1c1-t100">
<p><a href="#i1069537">commit()</a></p>
</td>
<td class="cellalignment2205" headers="r3c1-t100 r1c2-t100">
<p>Commits changes made since the previous commit or rollback and release any database locks held by the session.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t100" headers="r1c1-t100">
<p><a href="#i1069559">createStatement()</a></p>
</td>
<td class="cellalignment2205" headers="r4c1-t100 r1c2-t100">
<p>Creates a <code dir="ltr">Statement</code> object to execute SQL statements.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t100" headers="r1c1-t100">
<p><a href="#i1080679">flushCache()</a></p>
</td>
<td class="cellalignment2205" headers="r5c1-t100 r1c2-t100">
<p>Flushes the object cache associated with the connection.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t100" headers="r1c1-t100">
<p><a href="#i1069566">getClientCharSet()</a></p>
</td>
<td class="cellalignment2205" headers="r6c1-t100 r1c2-t100">
<p>Returns the default client character set.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t100" headers="r1c1-t100">
<p><a href="#CACICBBB">getClientCharSetUString()</a></p>
</td>
<td class="cellalignment2205" headers="r7c1-t100 r1c2-t100">
<p>Returns the globalization enabled client character set in <code dir="ltr">UString</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t100" headers="r1c1-t100">
<p><a href="#i1069573">getClientNCHARCharSet()</a></p>
</td>
<td class="cellalignment2205" headers="r8c1-t100 r1c2-t100">
<p>Returns the default client <code dir="ltr">NCHAR</code> character set.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t100" headers="r1c1-t100">
<p><a href="#CACBEBJC">getClientNCHARCharSetUString()</a></p>
</td>
<td class="cellalignment2205" headers="r9c1-t100 r1c2-t100">
<p>Returns the globalization enabled client <code dir="ltr">NCHAR</code> character set in <code dir="ltr">UString</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t100" headers="r1c1-t100">
<p><a href="#BBAJAFGC">getClientVersion()</a></p>
</td>
<td class="cellalignment2205" headers="r10c1-t100 r1c2-t100">
<p>Returns the version of the client used.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t100" headers="r1c1-t100">
<p><a href="#CIAJGEHC">getLTXID()</a></p>
</td>
<td class="cellalignment2205" headers="r11c1-t100 r1c2-t100">
<p>Returns logical transaction id that may be used in various calls of package <code dir="ltr">DBMS_APP_CONT</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t100" headers="r1c1-t100">
<p><a href="#i1069587">getMetaData()</a></p>
</td>
<td class="cellalignment2205" headers="r12c1-t100 r1c2-t100">
<p>Returns the metadata for an object accessible from the connection.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t100" headers="r1c1-t100">
<p><a href="#i1069605">getOCIServer()</a></p>
</td>
<td class="cellalignment2205" headers="r13c1-t100 r1c2-t100">
<p>Returns the OCI server context associated with the connection.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t100" headers="r1c1-t100">
<p><a href="#i1069611">getOCIServiceContext()</a></p>
</td>
<td class="cellalignment2205" headers="r14c1-t100 r1c2-t100">
<p>Returns the OCI service context associated with the connection.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t100" headers="r1c1-t100">
<p><a href="#i1069617">getOCISession()</a></p>
</td>
<td class="cellalignment2205" headers="r15c1-t100 r1c2-t100">
<p>Returns the OCI session context associated with the connection.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t100" headers="r1c1-t100">
<p><a href="#BBAIHEEF">getServerVersion()</a></p>
</td>
<td class="cellalignment2205" headers="r16c1-t100 r1c2-t100">
<p>Returns the version of the Oracle server used, as <code dir="ltr">string</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t100" headers="r1c1-t100">
<p><a href="#BBABFDBG">getServerVersionUString()</a></p>
</td>
<td class="cellalignment2205" headers="r17c1-t100 r1c2-t100">
<p>Returns the version of the Oracle server used, as a <code dir="ltr">UString</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t100" headers="r1c1-t100">
<p><a href="#CACJHFDC">getStmtCacheSize()</a></p>
</td>
<td class="cellalignment2205" headers="r18c1-t100 r1c2-t100">
<p>Retrieves the size of the statement cache.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t100" headers="r1c1-t100">
<p><a href="#i1154109">getTag()</a></p>
</td>
<td class="cellalignment2205" headers="r19c1-t100 r1c2-t100">
<p>Returns the tag associated with the connection.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t100" headers="r1c1-t100">
<p><a href="#CACGDEEH">isCached()</a></p>
</td>
<td class="cellalignment2205" headers="r20c1-t100 r1c2-t100">
<p>Determines if the specified statement is cached.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t100" headers="r1c1-t100">
<p><a href="#CACCCEJG">pinVectorOfRefs()</a></p>
</td>
<td class="cellalignment2205" headers="r21c1-t100 r1c2-t100">
<p>Pins an entire vector of <code dir="ltr">Ref</code> objects into object cache in a single round trip; pinned objects are available through an <code dir="ltr">OUT</code> parameter vector.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t100" headers="r1c1-t100">
<p><a href="#CIABDDEB">postToSubscriptions()</a></p>
</td>
<td class="cellalignment2205" headers="r22c1-t100 r1c2-t100">
<p>Posts notifications to subscriptions.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r23c1-t100" headers="r1c1-t100">
<p><a href="#CIAEHGJF">readVectorOfBfiles()</a></p>
</td>
<td class="cellalignment2205" headers="r23c1-t100 r1c2-t100">
<p>Reads multiple <code dir="ltr">Bfile</code>s in a single server round-trip.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r24c1-t100" headers="r1c1-t100">
<p><a href="#CIAGAIGE">readVectorOfBlobs()</a></p>
</td>
<td class="cellalignment2205" headers="r24c1-t100 r1c2-t100">
<p>Reads multiple <code dir="ltr">Blob</code>s in a single server round-trip.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r25c1-t100" headers="r1c1-t100">
<p><a href="#CIAGGCCE">readVectorOfClobs()</a></p>
</td>
<td class="cellalignment2205" headers="r25c1-t100 r1c2-t100">
<p>Reads multiple <code dir="ltr">Clob</code>s in a single server round-trip.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r26c1-t100" headers="r1c1-t100">
<p><a href="#CIACCFDI">registerSubscriptions()</a></p>
</td>
<td class="cellalignment2205" headers="r26c1-t100 r1c2-t100">
<p>Registers several <code dir="ltr">Subscription</code>s for notification.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r27c1-t100" headers="r1c1-t100">
<p><a href="#i1069623">rollback()</a></p>
</td>
<td class="cellalignment2205" headers="r27c1-t100 r1c2-t100">
<p>Rolls back all changes made since the previous commit or rollback and release any database locks held by the session.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r28c1-t100" headers="r1c1-t100">
<p><a href="#CACIBJFI">setStmtCacheSize()</a></p>
</td>
<td class="cellalignment2205" headers="r28c1-t100 r1c2-t100">
<p>Enables or disables statement caching.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r29c1-t100" headers="r1c1-t100">
<p><a href="#CIAIIFEA">setTAFNotify()</a></p>
</td>
<td class="cellalignment2205" headers="r29c1-t100 r1c2-t100">
<p>Registers failover callback function on the <code dir="ltr">Connection</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r30c1-t100" headers="r1c1-t100">
<p><a href="#i1069634">terminateStatement()</a></p>
</td>
<td class="cellalignment2205" headers="r30c1-t100 r1c2-t100">
<p>Closes a <code dir="ltr">Statement</code> object and free all resources associated with it.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r31c1-t100" headers="r1c1-t100">
<p><a href="#CIAGEGIH">unregisterSubscription()</a></p>
</td>
<td class="cellalignment2205" headers="r31c1-t100 r1c2-t100">
<p>Unregisters a <code dir="ltr">Subscription</code>, turns off its notifications.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r32c1-t100" headers="r1c1-t100">
<p><a href="#CIAGCBAJ">writeVectorOfBlobs()</a></p>
</td>
<td class="cellalignment2205" headers="r32c1-t100 r1c2-t100">
<p>Writes multiple <code dir="ltr">Blob</code>s in a single server round-trip.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r33c1-t100" headers="r1c1-t100">
<p><a href="#CIAHFGAI">writeVectorOfClobs()</a></p>
</td>
<td class="cellalignment2205" headers="r33c1-t100 r1c2-t100">
<p>Writes multiple <code dir="ltr">Clob</code>s in a single server round-trip.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP20761" class="refsect2"><a id="i1148337"></a>
<h2 class="refsect2">changePassword()</h2>
<p>Changes the password of the user currently connected to the database.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of changePassword() method" summary="First column lists versions of the method; second column prov ides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t101">Syntax</th>
<th class="cellalignment2204" id="r1c2-t101">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t101" headers="r1c1-t101">
<pre dir="ltr">void changePassword(
   const string &amp;user,
   const string &amp;oldPassword,
   const string &amp;newPassword)=0;
</pre></td>
<td class="cellalignment2205" headers="r2c1-t101 r1c2-t101">Changes the password of the user.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t101" headers="r1c1-t101">
<pre dir="ltr">void changePassword(
   const UString &amp;user,
   const UString &amp;oldPassword,
   const UString &amp;newPassword)=0;
</pre></td>
<td class="cellalignment2205" headers="r3c1-t101 r1c2-t101">Changes the password of the user (Unicode support). The client <code dir="ltr">Environment</code> should be initialized in OCCIUTIF16 mode.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of changePassword() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t102">Parameter</th>
<th class="cellalignment2204" id="r1c2-t102">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t102" headers="r1c1-t102">
<pre dir="ltr">user
</pre></td>
<td class="cellalignment2205" headers="r2c1-t102 r1c2-t102">The user currently connected to the database.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t102" headers="r1c1-t102">
<pre dir="ltr">oldPassword
</pre></td>
<td class="cellalignment2205" headers="r3c1-t102 r1c2-t102">The current password of the user.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t102" headers="r1c1-t102">
<pre dir="ltr">newPassword
</pre></td>
<td class="cellalignment2205" headers="r4c1-t102 r1c2-t102">The new password of the user.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20762" class="refsect2"><a id="i1069537"></a>
<h2 class="refsect2">commit()</h2>
<p>Commits all changes made since the previous commit or rollback, and releases any database locks currently held by the session.</p>
<p class="subhead1"><a id="LNCPP20763"></a>Syntax</p>
<pre dir="ltr">void commit()=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20764" class="refsect2"><a id="i1069559"></a>
<h2 class="refsect2">createStatement()</h2>
<p>Creates a <code dir="ltr">Statement</code> object with the SQL statement specified.</p>
<p>Note that for the caching-enabled version of this method, the cache is initially searched for a statement with a matching <code dir="ltr">tag</code>, which is returned. If no match is found, the cache is searched again for a statement that matches the <code dir="ltr">sql</code> parameter, which is returned. If no match is found, a new statement with a <code dir="ltr">NULL</code> <code dir="ltr">tag</code> is created and returned. If the <code dir="ltr">sql</code> parameter is empty and the <code dir="ltr">tag</code> search fails, this call generates an <code dir="ltr">ERROR</code>.</p>
<p>Also note that non-caching versions of this method always create and return a new statement.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of createStatement() method" summary="First column lists versions of the method; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t103">Syntax</th>
<th class="cellalignment2204" id="r1c2-t103">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t103" headers="r1c1-t103">
<pre dir="ltr">Statement* createStatement(
   const string &amp;sql=&#34;&#34;)=0;
</pre></td>
<td class="cellalignment2205" headers="r2c1-t103 r1c2-t103">Searches the cache for a specified SQL statement and returns it; if not found, creates a new statement.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t103" headers="r1c1-t103">
<pre dir="ltr">Statement* createStatement(
   const string &amp;sql,
   const string &amp;tag)=0;
</pre></td>
<td class="cellalignment2205" headers="r3c1-t103 r1c2-t103">Searches the cache for a statement with a matching tag; if not found, creates a new statement with the specified SQL content.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t103" headers="r1c1-t103">
<pre dir="ltr">Statement* createStatement(
   const UString &amp;sql)=0;
</pre></td>
<td class="cellalignment2205" headers="r4c1-t103 r1c2-t103">Searches the cache for a specified SQL statement and returns it; if not found, creates a new statement. Globalization enabled.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t103" headers="r1c1-t103">
<pre dir="ltr">Statement* createStatement(
   const Ustring &amp;sql,
   const Ustring &amp;tag)=0;
</pre></td>
<td class="cellalignment2205" headers="r5c1-t103 r1c2-t103">Searches the cache for a matching tag and returns it; if not found, creates a new statement with the specified SQL content. Globalization enabled.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of createStatement() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t104">Parameter</th>
<th class="cellalignment2204" id="r1c2-t104">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t104" headers="r1c1-t104">
<pre dir="ltr">sql
</pre></td>
<td class="cellalignment2205" headers="r2c1-t104 r1c2-t104">The SQL string to be associated with the statement object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t104" headers="r1c1-t104">
<pre dir="ltr">tag
</pre></td>
<td class="cellalignment2205" headers="r3c1-t104 r1c2-t104">The tag whose associated statement must be retrieved from the cache. Ignored if statement caching is disabled.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20765" class="refsect2"><a id="i1080679"></a>
<h2 class="refsect2">flushCache()</h2>
<p>Flushes the object cache associated with the connection.</p>
<p class="subhead1"><a id="LNCPP20766"></a>Syntax</p>
<pre dir="ltr">void flushCache()=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20767" class="refsect2"><a id="i1069566"></a>
<h2 class="refsect2">getClientCharSet()</h2>
<p>Returns the session&#39;s character set.</p>
<p class="subhead1"><a id="LNCPP20768"></a>Syntax</p>
<pre dir="ltr">string getClientCharSet() const=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20769" class="refsect2"><a id="CACICBBB"></a>
<h2 class="refsect2">getClientCharSetUString()</h2>
<p>Returns the globalization enabled client character set in <code dir="ltr">UString</code>.</p>
<p class="subhead1"><a id="LNCPP20770"></a>Syntax</p>
<pre dir="ltr">UString getClientCharSetUString() const=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20771" class="refsect2"><a id="i1069573"></a>
<h2 class="refsect2">getClientNCHARCharSet()</h2>
<p>Returns the session&#39;s <code dir="ltr">NCHAR</code> character set.</p>
<p class="subhead1"><a id="LNCPP20772"></a>Syntax</p>
<pre dir="ltr">string getClientNCHARCharSet() const=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20773" class="refsect2"><a id="CACBEBJC"></a>
<h2 class="refsect2">getClientNCHARCharSetUString()</h2>
<p>Returns the globalization enabled client <code dir="ltr">NCHAR</code> character set in <code dir="ltr">UString</code>.</p>
<p class="subhead1"><a id="LNCPP20774"></a>Syntax</p>
<pre dir="ltr">UString getClientNCHARCharSetUString() const=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20775" class="refsect2"><a id="BBAJAFGC"></a>
<h2 class="refsect2">getClientVersion()</h2>
<p>Returns the version of the client library the application is using at run time.</p>
<p>This is used by applications to determine the version of the OCCI client at run time, and if the application uses several separate code paths that use several different client patchsets.</p>
<p>The values of parameters <a id="BBAEFHJI"></a><code dir="ltr">majorVersion</code> and <code dir="ltr">minorVersion</code> use macros <code dir="ltr">OCCI_MAJOR_VERSION</code> and <code dir="ltr">OCCI_MINOR_VERSION</code>, respectively. These macros define the major and minor versions of the OCCI client library. Compares the versions returned.</p>
<p class="subhead1"><a id="LNCPP20776"></a>Syntax</p>
<pre dir="ltr">void getClientVersion(
   int &amp;majorVersion,
   int &amp;minorVersion,
   int &amp;updateNum,
   int &amp;patchNumber,
   int &amp;portUpdateNum)
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of geClientVersion() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t105">Parameter</th>
<th class="cellalignment2204" id="r1c2-t105">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t105" headers="r1c1-t105">
<pre dir="ltr">majorVersion
</pre></td>
<td class="cellalignment2205" headers="r2c1-t105 r1c2-t105">The major version of the client library.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t105" headers="r1c1-t105">
<pre dir="ltr">minorVersion
</pre></td>
<td class="cellalignment2205" headers="r3c1-t105 r1c2-t105">The minor version of the client library.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t105" headers="r1c1-t105">
<pre dir="ltr">updateNum
</pre></td>
<td class="cellalignment2205" headers="r4c1-t105 r1c2-t105">The update number.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t105" headers="r1c1-t105">
<pre dir="ltr">patchNumber
</pre></td>
<td class="cellalignment2205" headers="r5c1-t105 r1c2-t105">The number of the patch applied to the library.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t105" headers="r1c1-t105">
<pre dir="ltr">portUpdateNumber
</pre></td>
<td class="cellalignment2205" headers="r6c1-t105 r1c2-t105">The number of the port-specific port update applied to the library.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21932" class="refsect2"><a id="CIAJGEHC"></a>
<h2 class="refsect2">getLTXID()</h2>
<p>Returns logical transaction id that may be used in various calls of package <code dir="ltr">DBMS_APP_CONT</code>.</p>
<p class="subhead1"><a id="LNCPP21933"></a>Syntax</p>
<pre dir="ltr">Bytes getLTXID() const = 0
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20781" class="refsect2"><a id="i1069587"></a>
<h2 class="refsect2">getMetaData()</h2>
<p>Returns metadata for an object in the database.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of getMetaData() method" summary="First column lists versions of the method; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t106">Syntax</th>
<th class="cellalignment2204" id="r1c2-t106">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t106" headers="r1c1-t106">
<pre dir="ltr">MetaData getMetaData(
   const string &amp;object,
   MetaData::ParamType prmtyp=MetaData::PTYPE_UNK) const=0;
</pre></td>
<td class="cellalignment2205" headers="r2c1-t106 r1c2-t106">Returns metadata for an object in the database.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t106" headers="r1c1-t106">
<pre dir="ltr">MetaData getMetaData(
   const UString &amp;object,
   MetaData::ParamType prmtyp=MetaData::PTYPE_UNK) const=0;
</pre></td>
<td class="cellalignment2205" headers="r3c1-t106 r1c2-t106">Returns metadata for a globalization enabled object in the database.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t106" headers="r1c1-t106">
<pre dir="ltr">MetaData getMetaData(
   const RefAny &amp;ref) const=0;
</pre></td>
<td class="cellalignment2205" headers="r4c1-t106 r1c2-t106">Returns metadata for an object in the database through a reference.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of getMetaData() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t107">Parameter</th>
<th class="cellalignment2204" id="r1c2-t107">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t107" headers="r1c1-t107">object</td>
<td class="cellalignment2205" headers="r2c1-t107 r1c2-t107">The SQL string to be associated with the statement object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t107" headers="r1c1-t107">prmtyp</td>
<td class="cellalignment2205" headers="r3c1-t107 r1c2-t107">The type of the schema object being described, as defined by the enumerated <code dir="ltr">ParamType</code> of the MetaData class, <a href="reference020.htm#BBAJJDDG">Table 13-27</a></td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t107" headers="r1c1-t107">ref</td>
<td class="cellalignment2205" headers="r4c1-t107 r1c2-t107">A <code dir="ltr">REF</code> to the Type Descriptor Object (TDO) of the type to be described.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20782" class="refsect2"><a id="i1069605"></a>
<h2 class="refsect2">getOCIServer()</h2>
<p>Returns the OCI server context associated with the connection.</p>
<p class="subhead1"><a id="LNCPP20783"></a>Syntax</p>
<pre dir="ltr">OCIServer* getOCIServer() const=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20784" class="refsect2"><a id="i1069611"></a>
<h2 class="refsect2">getOCIServiceContext()</h2>
<p>Returns the OCI service context associated with the connection.</p>
<p class="subhead1"><a id="LNCPP20785"></a>Syntax</p>
<pre dir="ltr">OCISvcCtx* getOCIServiceContext() const=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20786" class="refsect2"><a id="i1069617"></a>
<h2 class="refsect2">getOCISession()</h2>
<p>Returns the OCI session context associated with the connection.</p>
<p class="subhead1"><a id="LNCPP20787"></a>Syntax</p>
<pre dir="ltr">OCISession* getOCISession() const=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20788" class="refsect2"><a id="BBAIHEEF"></a>
<h2 class="refsect2">getServerVersion()</h2>
<p>Returns the version of the database server, as a <code dir="ltr">string</code>, used by the current <code dir="ltr">Connection</code> object. This can be used when an application uses several separate code paths and connects to several different server versions.</p>
<p class="subhead1"><a id="LNCPP20789"></a>Syntax</p>
<pre dir="ltr">string getServerVersion() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20790" class="refsect2"><a id="BBABFDBG"></a>
<h2 class="refsect2">getServerVersionUString()</h2>
<p>Returns the version of the database server, as a <code dir="ltr">UString</code>, used by the current <code dir="ltr">Connection</code> object. This can be used when an application uses several separate code paths and connects to several different server versions.</p>
<p class="subhead1"><a id="LNCPP20791"></a>Syntax</p>
<pre dir="ltr">UString getServerVersionUString() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20792" class="refsect2"><a id="CACJHFDC"></a>
<h2 class="refsect2">getStmtCacheSize()</h2>
<p>Retrieves the size of the statement cache.</p>
<p class="subhead1"><a id="LNCPP20793"></a>Syntax</p>
<pre dir="ltr">unsigned int getStmtCacheSize() const=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20794" class="refsect2"><a id="i1154109"></a>
<h2 class="refsect2">getTag()</h2>
<p>Returns the tag associated with the connection. Valid only for connections from a stateless connection pool.</p>
<p class="subhead1"><a id="LNCPP20795"></a>Syntax</p>
<pre dir="ltr">string getTag() const=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20796" class="refsect2"><a id="CACGDEEH"></a>
<h2 class="refsect2">isCached()</h2>
<p>Determines if the specified statement is cached.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of isCached() method" summary="First column lists versions of the method; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t108">Syntax</th>
<th class="cellalignment2204" id="r1c2-t108">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t108" headers="r1c1-t108">
<pre dir="ltr">bool isCached(
   const string &amp;sql,
   const string &amp;tag=&#34;&#34;)=0;
</pre></td>
<td class="cellalignment2205" headers="r2c1-t108 r1c2-t108">Searches the cache for a statement with a matching tag. If the tag is not specified, the cache is searched for a matching SQL statement.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t108" headers="r1c1-t108">
<pre dir="ltr">bool isCached(
   const Ustring &amp;sql,
   const Ustring &amp;tag)=0;
</pre></td>
<td class="cellalignment2205" headers="r3c1-t108 r1c2-t108">Searches the cache for a statement with a matching tag. If the tag is not specified, the cache is searched for a matching SQL statement. Globalization enabled.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of isCached() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t109">Parameter</th>
<th class="cellalignment2204" id="r1c2-t109">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t109" headers="r1c1-t109">
<pre dir="ltr">sql
</pre></td>
<td class="cellalignment2205" headers="r2c1-t109 r1c2-t109">The SQL string to be associated with the statement object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t109" headers="r1c1-t109">
<pre dir="ltr">tag
</pre></td>
<td class="cellalignment2205" headers="r3c1-t109 r1c2-t109">The tag whose associated statement must be retrieved from the cache. Ignored if statement caching is disabled.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20797" class="refsect2"><a id="CACCCEJG"></a>
<h2 class="refsect2">pinVectorOfRefs()</h2>
<p>Pins an entire vector of <code dir="ltr">Ref</code> objects into object cache in a single round-trip. Pinned objects are available through an <code dir="ltr">OUT</code> parameter vector.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of pinVectorOfRefs() method" summary="First column lists versions of the method; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t110">Syntax</th>
<th class="cellalignment2204" id="r1c2-t110">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t110" headers="r1c1-t110">
<pre dir="ltr">template &lt;class T&gt; void pinVectorOfRefs(
   const Connection *conn,
   vector &lt;Ref&lt;T&gt;&gt; &amp; vect,
   vector &lt;T*&gt; &amp;vectObj,
   LockOptions lockOpt=OCCI_LOCK_NONE);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t110 r1c2-t110">Returns the objects.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t110" headers="r1c1-t110">
<pre dir="ltr">template &lt;class T&gt; void pinVectorOfRefs(
   const Connection *conn,
   vector &lt;Ref&lt;T&gt;&gt; &amp; vect,
   LockOptions lockOpt=OCCI_LOCK_NONE);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t110 r1c2-t110">Does not explicitly return the objects; an application must dereference a particular <code dir="ltr">Ref</code> object by a <code dir="ltr">ptr()</code> call, which returns a previously pinned object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of pinVectorOfRefs() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t111">Parameter</th>
<th class="cellalignment2204" id="r1c2-t111">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t111" headers="r1c1-t111">
<pre dir="ltr">conn
</pre></td>
<td class="cellalignment2205" headers="r2c1-t111 r1c2-t111">Connection</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t111" headers="r1c1-t111">
<pre dir="ltr">vect
</pre></td>
<td class="cellalignment2205" headers="r3c1-t111 r1c2-t111">Vector of <code dir="ltr">Ref</code> objects that are pinned.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t111" headers="r1c1-t111">
<pre dir="ltr">vectObj
</pre></td>
<td class="cellalignment2205" headers="r4c1-t111 r1c2-t111">Vector that contains objects after the pinning operation is complete; an <code dir="ltr">OUT</code> parameter.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t111" headers="r1c1-t111">
<pre dir="ltr">lockOpt
</pre></td>
<td class="cellalignment2205" headers="r5c1-t111 r1c2-t111">Lock option used during the pinning of the array, as defined by <code dir="ltr">LockOptions</code> in <a href="reference002.htm#BBADFFGJ">Table 13-2</a>. The only supported value is <code dir="ltr">OCCI_LOCK_NONE</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20798" class="refsect2"><a id="CIABDDEB"></a>
<h2 class="refsect2">postToSubscriptions()</h2>
<p>Posts notifications to subscriptions.</p>
<p>The <code dir="ltr">Subscription</code> object must have a valid subscription name, and the namespace should be set to <code dir="ltr">NS_ANONYMOUS</code>. The payload must be set before invoking this call; otherwise, the payload is assumed to be <code dir="ltr">NULL</code> and is not delivered.</p>
<p>The caller has to preserve the payload until the posting call is complete. This call provides a best-effort guarantee; a notification is sent to registered clients at most once.This call is primarily used for light-weight notification and is useful for dealing with several system events. If the application needs more rigid guarantees, it can use the Oracle Streams Advanced Queuing functionality.</p>
<p class="subhead2"><a id="LNCPP20799"></a>Syntax</p>
<pre dir="ltr">void postToSubscriptions(
   const vector&lt;aq::Subscription&gt;&amp; sub)=0;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of postToSubscriptions() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t112">Parameter</th>
<th class="cellalignment2204" id="r1c2-t112">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t112" headers="r1c1-t112">
<pre dir="ltr">sub
</pre></td>
<td class="cellalignment2205" headers="r2c1-t112 r1c2-t112">The vector of subscriptions that receive postings.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20800" class="refsect2"><a id="CIAEHGJF"></a>
<h2 class="refsect2">readVectorOfBfiles()</h2>
<p>Reads multiple <code dir="ltr">Bfile</code>s in a single server round-trip. All <code dir="ltr">Bfile</code>s must be open for reading.</p>
<p class="subhead2"><a id="LNCPP20801"></a>Syntax</p>
<pre dir="ltr">void readVectorOfBfiles(
   const Connection *conn,
   vector&lt;Bfile&gt; &amp;vec,
   oraub8 *byteAmts, 
   oraub8 *offsets, 
   unsigned char *buffers[], 
   oraub8 *bufferLengths);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of readVectorOfBfiles method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t113">Parameter</th>
<th class="cellalignment2204" id="r1c2-t113">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t113" headers="r1c1-t113">
<pre dir="ltr">conn
</pre></td>
<td class="cellalignment2205" headers="r2c1-t113 r1c2-t113">Connection.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t113" headers="r1c1-t113">
<pre dir="ltr">vec
</pre></td>
<td class="cellalignment2205" headers="r3c1-t113 r1c2-t113">Vector of <code dir="ltr">Bfile</code> objects; each <code dir="ltr">Bfile</code> must be open for reading.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t113" headers="r1c1-t113">
<pre dir="ltr">byteAmts
</pre></td>
<td class="cellalignment2205" headers="r4c1-t113 r1c2-t113">Array of amount of bytes to read from the individual <code dir="ltr">Bfile</code>s. The actual number of bytes read from each <code dir="ltr">Bfile</code> is returned in this array.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t113" headers="r1c1-t113">
<pre dir="ltr">offsets
</pre></td>
<td class="cellalignment2205" headers="r5c1-t113 r1c2-t113">Array of offsets, starting position where reading from the <code dir="ltr">Bfile</code>s starts.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t113" headers="r1c1-t113">
<pre dir="ltr">buffers
</pre></td>
<td class="cellalignment2205" headers="r6c1-t113 r1c2-t113">Array of pointers to buffers into which the data is read.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t113" headers="r1c1-t113">
<pre dir="ltr">bufferLengths
</pre></td>
<td class="cellalignment2205" headers="r7c1-t113 r1c2-t113">Array of sizes of each buffer, in bytes.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20802" class="refsect2"><a id="CIAGAIGE"></a>
<h2 class="refsect2">readVectorOfBlobs()</h2>
<p>Reads multiple <code dir="ltr">BLOB</code>s in a single server round-trip.</p>
<p class="subhead2"><a id="LNCPP20803"></a>Syntax</p>
<pre dir="ltr">void readVectorOfBlobs(
   const Connection *conn,
   vector&lt;Blob&gt; &amp;vec,
   oraub8 *byteAmts, 
   oraub8 *offsets, 
   unsigned char *buffers[], 
   oraub8 *bufferLengths);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of readVectorOfBlobs method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t114">Parameter</th>
<th class="cellalignment2204" id="r1c2-t114">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t114" headers="r1c1-t114">
<pre dir="ltr">conn
</pre></td>
<td class="cellalignment2205" headers="r2c1-t114 r1c2-t114">Connection.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t114" headers="r1c1-t114">
<pre dir="ltr">vec
</pre></td>
<td class="cellalignment2205" headers="r3c1-t114 r1c2-t114">Vector of <code dir="ltr">Blob</code> objects.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t114" headers="r1c1-t114">
<pre dir="ltr">byteAmts
</pre></td>
<td class="cellalignment2205" headers="r4c1-t114 r1c2-t114">Array of amount of bytes to read from the individual <code dir="ltr">Blob</code>s. The actual number of bytes read from each <code dir="ltr">Blob</code> is returned in this array.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t114" headers="r1c1-t114">
<pre dir="ltr">offsets
</pre></td>
<td class="cellalignment2205" headers="r5c1-t114 r1c2-t114">Array of offsets, starting position where reading from the <code dir="ltr">Blob</code>s starts.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t114" headers="r1c1-t114">
<pre dir="ltr">buffers
</pre></td>
<td class="cellalignment2205" headers="r6c1-t114 r1c2-t114">Array of pointers to buffers into which the data is read.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t114" headers="r1c1-t114">
<pre dir="ltr">bufferLengths
</pre></td>
<td class="cellalignment2205" headers="r7c1-t114 r1c2-t114">Array of sizes of each buffer, in bytes.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20804" class="refsect2"><a id="CIAGGCCE"></a>
<h2 class="refsect2">readVectorOfClobs()</h2>
<p>Reads multiple <code dir="ltr">Clob</code>s in a single server round-trip. All <code dir="ltr">Clob</code>s should be in the same characterset form and belong to the same characterset ID.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of readVectorOfClobs() method" summary="First column lists versions of the method; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t115">Syntax</th>
<th class="cellalignment2204" id="r1c2-t115">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t115" headers="r1c1-t115">
<pre dir="ltr">void readVectorOfClobs(
   const Connection *conn,
   vector&lt;Clob&gt; &amp;vec,
   oraub8 *byteAmts, 
   araub8 *charAmts,
   oraub8 *offsets, 
   unsigned char *buffers[], 
   oraub8 *bufferLengths);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t115 r1c2-t115">General form of the method.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t115" headers="r1c1-t115">
<pre dir="ltr">void readVectorOfClobs(
   const Connection *conn,
   vector&lt;Clob&gt; &amp;vec,
   oraub8 *byteAmts, 
   araub8 *charAmts,
   oraub8 *offsets, 
   utext *buffers[], 
   oraub8 *bufferLengths);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t115 r1c2-t115">Form of the method used with <code dir="ltr">utext</code> buffers, when data is in UTF16 characterset encoding.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of readVectorOfClobs method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t116">Parameter</th>
<th class="cellalignment2204" id="r1c2-t116">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t116" headers="r1c1-t116">
<pre dir="ltr">conn
</pre></td>
<td class="cellalignment2205" headers="r2c1-t116 r1c2-t116">Connection.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t116" headers="r1c1-t116">
<pre dir="ltr">vec
</pre></td>
<td class="cellalignment2205" headers="r3c1-t116 r1c2-t116">Vector of <code dir="ltr">Clob</code> objects.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t116" headers="r1c1-t116">
<pre dir="ltr">byteAmts
</pre></td>
<td class="cellalignment2205" headers="r4c1-t116 r1c2-t116">Array of amount of bytes to read from the individual <code dir="ltr">Clob</code>s. Only used if the <code dir="ltr">charAmts</code> is <code dir="ltr">NULL</code>, or <code dir="ltr">0</code> for any <code dir="ltr">Clob</code> index. Returns the number of bytes read for each <code dir="ltr">Clob</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t116" headers="r1c1-t116">
<pre dir="ltr">charAmts
</pre></td>
<td class="cellalignment2205" headers="r5c1-t116 r1c2-t116">Array of amount of characters to read from individual <code dir="ltr">Clob</code>s. Returns the number of characters read for each <code dir="ltr">Clob</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t116" headers="r1c1-t116">
<pre dir="ltr">offsets
</pre></td>
<td class="cellalignment2205" headers="r6c1-t116 r1c2-t116">Array of offsets, starting position where reading from the <code dir="ltr">Clob</code>s starts, in characters.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t116" headers="r1c1-t116">
<pre dir="ltr">buffers
</pre></td>
<td class="cellalignment2205" headers="r7c1-t116 r1c2-t116">Array of pointers to buffers into which the data is read.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t116" headers="r1c1-t116">
<pre dir="ltr">bufferLengths
</pre></td>
<td class="cellalignment2205" headers="r8c1-t116 r1c2-t116">Array of sizes of each buffer, in bytes.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20805" class="refsect2"><a id="CIACCFDI"></a>
<h2 class="refsect2">registerSubscriptions()</h2>
<p>Registers <code dir="ltr">Subscription</code>s for notification.</p>
<p>New client processes and existing processes that restart after a shut down must register for all subscriptions of interest. If the client stays up during a server shut down and restart, this client continues to receive notifications for <code dir="ltr">DISCONNECTED</code> registrations, but not for <code dir="ltr">CONNECTED</code> registrations because they are lost during the server down time.</p>
<p class="subhead2"><a id="LNCPP20806"></a>Syntax</p>
<pre dir="ltr">void registerSubscriptions(
   const vector&lt;aq::Subscription&gt;&amp; sub)=0;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of registerSubscriptions() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t117">Parameter</th>
<th class="cellalignment2204" id="r1c2-t117">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t117" headers="r1c1-t117">
<pre dir="ltr">sub
</pre></td>
<td class="cellalignment2205" headers="r2c1-t117 r1c2-t117">Vector of subscriptions that are registered for notification.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20807" class="refsect2"><a id="i1069623"></a>
<h2 class="refsect2">rollback()</h2>
<p>Drops all changes made since the previous commit or rollback, and releases any database locks currently held by the session.</p>
<p class="subhead1"><a id="LNCPP20808"></a>Syntax</p>
<pre dir="ltr">void rollback()=0;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP20811" class="refsect2"><a id="CACIBJFI"></a>
<h2 class="refsect2">setStmtCacheSize()</h2>
<p>Enables or disables statement caching. A nonzero value enables statement caching, with a cache of specified size. A zero value disables caching.</p>
<p class="subhead1"><a id="LNCPP20812"></a>Syntax</p>
<pre dir="ltr">void setStmtCacheSize(
   unsigned int cacheSize)=0;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setStmtCacheSize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t118">Parameter</th>
<th class="cellalignment2204" id="r1c2-t118">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t118" headers="r1c1-t118">
<pre dir="ltr">cacheSize
</pre></td>
<td class="cellalignment2205" headers="r2c1-t118 r1c2-t118">The maximum number of statements in the cache.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20813" class="refsect2"><a id="CIAIIFEA"></a>
<h2 class="refsect2">setTAFNotify()</h2>
<p>Registers the failover callback function on the <code dir="ltr">Connection</code> object for which failover is configured and must be detected.</p>
<p>The failover callback should return <code dir="ltr">OCCI_SUCCESS</code> to indicate that OCCI can continue with default processing. The failover event, <code dir="ltr">foEvent</code>, is defined in <a href="#BBAEAHAH">Table 13-11</a>. When the <code dir="ltr">foEvent</code> is <code dir="ltr">FO_ERROR</code>, the callback function may return either <code dir="ltr">FO_RETRY</code> to indicate that failover must be attempted again, or <code dir="ltr">OCCI_SUCCESS</code> to end failover attempts.</p>
<p class="subhead2"><a id="LNCPP20814"></a>Syntax</p>
<pre dir="ltr">void setTAFNotify(
   int (*notifyFn)(
      Environment *env,
      Connection *conn,
      void *ctx,
      FailOverType foType,
      FailOverEventType foEvent),
   void *ctxTAF)
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setTAFNotify() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t119">Parameter</th>
<th class="cellalignment2204" id="r1c2-t119">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t119" headers="r1c1-t119">
<pre dir="ltr">notifyFn
</pre></td>
<td class="cellalignment2205" headers="r2c1-t119 r1c2-t119">The user defined callback function invoked during failover events.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t119" headers="r1c1-t119">
<pre dir="ltr">env
</pre></td>
<td class="cellalignment2205" headers="r3c1-t119 r1c2-t119"><code dir="ltr">Environment</code> object from which the failing <code dir="ltr">Connection</code> was created.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t119" headers="r1c1-t119">
<pre dir="ltr">conn
</pre></td>
<td class="cellalignment2205" headers="r4c1-t119 r1c2-t119">The failing <code dir="ltr">Connection</code> on which the callback function is registered.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t119" headers="r1c1-t119">
<pre dir="ltr">ctx
</pre></td>
<td class="cellalignment2205" headers="r5c1-t119 r1c2-t119">Context supplied by the user when registering the callback.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t119" headers="r1c1-t119">
<pre dir="ltr">foType
</pre></td>
<td class="cellalignment2205" headers="r6c1-t119 r1c2-t119">The configured <code dir="ltr">FailOverType</code>, values <code dir="ltr">FO_SESSION</code> or <code dir="ltr">FO_SELECT</code>, as defined in <a href="#BBAEAHAH">Table 13-11</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t119" headers="r1c1-t119">foEvent</td>
<td class="cellalignment2205" headers="r7c1-t119 r1c2-t119">Failover event type that is triggering the callback; the <code dir="ltr">FailOverEventType</code>, values <code dir="ltr">FO_BEGIN</code>, <code dir="ltr">FO_END</code>, <code dir="ltr">FO_ABORT</code> and <code dir="ltr">FO_ERROR</code> as defined in <a href="#BBAEAHAH">Table 13-11</a>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t119" headers="r1c1-t119">
<pre dir="ltr">ctxTAF
</pre></td>
<td class="cellalignment2205" headers="r8c1-t119 r1c2-t119">User context passed back to the callback function at invocation.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20815" class="refsect2"><a id="i1069634"></a>
<h2 class="refsect2">terminateStatement()</h2>
<p>Closes a <code dir="ltr">Statement</code> object.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of terminateStatement() method" summary="First column lists versions of the method; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t120">Syntax</th>
<th class="cellalignment2204" id="r1c2-t120">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t120" headers="r1c1-t120">
<pre dir="ltr">void terminateStatement(
   Statement *stmt)=0;
</pre></td>
<td class="cellalignment2205" headers="r2c1-t120 r1c2-t120">Closes a <code dir="ltr">Statement</code> object and frees all resources associated with it.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t120" headers="r1c1-t120">
<pre dir="ltr">void terminateStatement(
   Statement *stmt,
   const string &amp;tag)=0;
</pre></td>
<td class="cellalignment2205" headers="r3c1-t120 r1c2-t120">Releases statement back to the cache after adding an optional tag, a <code dir="ltr">string</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t120" headers="r1c1-t120">
<pre dir="ltr">void terminateStatement(
   Statement* stmt,
   const UString &amp;tag) = 0;
</pre></td>
<td class="cellalignment2205" headers="r4c1-t120 r1c2-t120">Releases statement back to the cache after adding an optional tag, a <code dir="ltr">UString</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of terminateStatement() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t121">Parameter</th>
<th class="cellalignment2204" id="r1c2-t121">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t121" headers="r1c1-t121">
<pre dir="ltr">stmt
</pre></td>
<td class="cellalignment2205" headers="r2c1-t121 r1c2-t121">The <code dir="ltr">Statement</code> to be closed.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t121" headers="r1c1-t121">
<pre dir="ltr">tag
</pre></td>
<td class="cellalignment2205" headers="r3c1-t121 r1c2-t121">The tag associated with the statement, either a <code dir="ltr">string</code> or a <code dir="ltr">UString</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20816" class="refsect2"><a id="CIAGEGIH"></a>
<h2 class="refsect2">unregisterSubscription()</h2>
<p>Unregisters a <code dir="ltr">Subscription</code>, turning off its notifications.</p>
<p class="subhead2"><a id="LNCPP20817"></a>Syntax</p>
<pre dir="ltr">void unregisterSubscription(
   const aq::Subscription&amp; sub)=0;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of unregisterSubscription() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t122">Parameter</th>
<th class="cellalignment2204" id="r1c2-t122">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t122" headers="r1c1-t122">
<pre dir="ltr">sub
</pre></td>
<td class="cellalignment2205" headers="r2c1-t122 r1c2-t122"><code dir="ltr">Subscription</code> whose notifications is turned off.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20818" class="refsect2"><a id="CIAGCBAJ"></a>
<h2 class="refsect2">writeVectorOfBlobs()</h2>
<p>Writes multiple <code dir="ltr">Blob</code>s in a single server round-trip.</p>
<p class="subhead2"><a id="LNCPP20819"></a>Syntax</p>
<pre dir="ltr">void writeVectorOfBlobs(
   const Connection *conn,
   vector&lt;Blob&gt; &amp;vec,
   oraub8 *byteAmts, 
   oraub8 *offsets, 
   unsigned char *buffers[], 
   oraub8 *bufferLengths);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of writeVectorOfBlobs method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t123">Parameter</th>
<th class="cellalignment2204" id="r1c2-t123">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t123" headers="r1c1-t123">
<pre dir="ltr">conn
</pre></td>
<td class="cellalignment2205" headers="r2c1-t123 r1c2-t123">Connection.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t123" headers="r1c1-t123">
<pre dir="ltr">vec
</pre></td>
<td class="cellalignment2205" headers="r3c1-t123 r1c2-t123">Vector of <code dir="ltr">Blob</code> objects.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t123" headers="r1c1-t123">
<pre dir="ltr">byteAmts
</pre></td>
<td class="cellalignment2205" headers="r4c1-t123 r1c2-t123">Array of amount of bytes to write to the individual <code dir="ltr">Blob</code>s.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t123" headers="r1c1-t123">
<pre dir="ltr">offsets
</pre></td>
<td class="cellalignment2205" headers="r5c1-t123 r1c2-t123">Array of offsets, starting position where writing to the <code dir="ltr">Blob</code>s starts.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t123" headers="r1c1-t123">
<pre dir="ltr">buffers
</pre></td>
<td class="cellalignment2205" headers="r6c1-t123 r1c2-t123">Array of pointers to buffers from which the data is written.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t123" headers="r1c1-t123">
<pre dir="ltr">bufferLengths
</pre></td>
<td class="cellalignment2205" headers="r7c1-t123 r1c2-t123">Array of sizes of each buffer, in bytes.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP20820" class="refsect2"><a id="CIAHFGAI"></a>
<h2 class="refsect2">writeVectorOfClobs()</h2>
<p>Writes multiple <code dir="ltr">Clob</code>s in a single server round-trip. All <code dir="ltr">Clob</code>s should be in the same characterset form and belong to the same characterset ID.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of writeVectorOfClobs() method" summary="First column lists versions of the method; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t124">Syntax</th>
<th class="cellalignment2204" id="r1c2-t124">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t124" headers="r1c1-t124">
<pre dir="ltr">void writeVectorOfClobs(
   const Connection *conn,
   vector&lt;Clob&gt; &amp;vec,
   oraub8 *byteAmts, 
   araub8 *charAmts,
   oraub8 *offsets, 
   unsigned char *buffers[], 
   oraub8 *bufferLengths);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t124 r1c2-t124">General form of the method.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t124" headers="r1c1-t124">
<pre dir="ltr">void writeVectorOfClobs(
   const Connection *conn,
   vector&lt;Clob&gt; &amp;vec,
   oraub8 *byteAmts, 
   araub8 *charAmts,
   oraub8 *offsets, 
   utext *buffers[], 
   oraub8 *bufferLengths);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t124 r1c2-t124">Form of the method used with <code dir="ltr">utext</code> buffers, when data is in UTF16 characterset encoding.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of writeVectorOfClobs method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t125">Parameter</th>
<th class="cellalignment2204" id="r1c2-t125">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t125" headers="r1c1-t125">
<pre dir="ltr">conn
</pre></td>
<td class="cellalignment2205" headers="r2c1-t125 r1c2-t125">Connection.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t125" headers="r1c1-t125">
<pre dir="ltr">vec
</pre></td>
<td class="cellalignment2205" headers="r3c1-t125 r1c2-t125">Vector of <code dir="ltr">Clob</code> objects.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t125" headers="r1c1-t125">
<pre dir="ltr">byteAmts
</pre></td>
<td class="cellalignment2205" headers="r4c1-t125 r1c2-t125">Array of amount of bytes to write to the individual <code dir="ltr">Clob</code>s. Only used if the <code dir="ltr">charAmts</code> is <code dir="ltr">NULL</code> or <code dir="ltr">0</code> for any <code dir="ltr">Clob</code> index. Returns the number of bytes written for each <code dir="ltr">Clob</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t125" headers="r1c1-t125">
<pre dir="ltr">charAmts
</pre></td>
<td class="cellalignment2205" headers="r5c1-t125 r1c2-t125">Array of amount of characters to write to individual <code dir="ltr">Clob</code>s. Returns the number of characters read for each <code dir="ltr">Clob</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t125" headers="r1c1-t125">
<pre dir="ltr">offsets
</pre></td>
<td class="cellalignment2205" headers="r6c1-t125 r1c2-t125">Array of offsets, starting position where writing to the <code dir="ltr">Clob</code>s starts, in characters.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t125" headers="r1c1-t125">
<pre dir="ltr">buffers
</pre></td>
<td class="cellalignment2205" headers="r7c1-t125 r1c2-t125">Array of pointers to buffers from which the data is written.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t125" headers="r1c1-t125">
<pre dir="ltr">bufferLengths
</pre></td>
<td class="cellalignment2205" headers="r8c1-t125 r1c2-t125">Array of sizes of each buffer, in bytes.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2196">
<tr>
<td class="cellalignment2205">
<table class="cellalignment2201">
<tr>
<td class="cellalignment2200"><a href="reference009.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2200"><a href="reference011.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2208">
<table class="cellalignment2199">
<tr>
<td class="cellalignment2200"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2200"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2200"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2200"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2200"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2200"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>