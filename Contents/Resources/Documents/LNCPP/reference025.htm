<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-73928"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Ref%20Class"></a><title>Ref Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1082"/>
<meta name="dcterms.created" content="2016-06-01T12:8:12Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="C++ Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E48221-07"/>
<meta name="dcterms.isVersionOf" content="LNCPP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="reference024.htm" title="Previous" type="text/html"/>
<link rel="Next" href="reference026.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48221-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">45/54</span> <!-- End Header --><a id="i1079048"></a>
<div id="LNCPP1017" class="refsect1">
<h1 class="refsect1">Ref <a id="sthref871"></a><a id="sthref872"></a><a id="sthref873"></a>Class</h1>
<p>The mapping in the C++ programming language of an SQL REF value, which is a reference to an SQL structured type value in the database.</p>
<p>Each REF value has a unique identifier of the object it refers to. An SQL REF value may be used instead of the SQL structured type it references; it may be used as either a column value in a table or an attribute value in a structured type.</p>
<p>Because an SQL REF value is a logical pointer to an SQL structured type, a Ref object is by default also a logical pointer; thus, retrieving an SQL REF value as a Ref object does not materialize the attributes of the structured type on the client.</p>
<p>The only methods valid on a <code dir="ltr">NULL</code> <code dir="ltr">Ref</code> object are <a href="#i1072606">isNull()</a>, and <a href="#i1072681">operator=()</a>.</p>
<p>A Ref object can be saved to persistent storage and is de-referenced through <a href="#i1072650">operator*()</a>, <a href="#i1072641">operator-&gt;()</a> or <a href="#i1072691">ptr()</a> methods. T must be a class derived from <code dir="ltr">PObject</code>. In the following sections, <code dir="ltr">T*</code> and <code dir="ltr">PObject</code>* are used interchangeably.</p>
<div id="LNCPP21411" class="tblformal">
<p class="titleintable"><a id="sthref874"></a><a id="BBAJGIHJ"></a>Table 13-35 Enumerated Values Used by Ref Class</p>
<table class="cellalignment2203" title="Enumerated Values Used by Ref Class" summary="First column lists the attribute used by the class, the second column describes the options available to each attribute" dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t359">Attribute</th>
<th class="cellalignment2204" id="r1c2-t359">Options</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t359" headers="r1c1-t359">
<pre dir="ltr">LockOptions
</pre></td>
<td class="cellalignment2205" headers="r2c1-t359 r1c2-t359">
<ul>
<li>
<p><code dir="ltr">OCCI_LOCK_NONE</code> clears the lock setting on the <code dir="ltr">Ref</code> object.</p>
</li>
<li>
<p><code dir="ltr">OCCI_LOCK_X</code> indicates that the object should be locked, and to wait for the lock to be available if the object is locked by another session.</p>
</li>
<li>
<p><code dir="ltr">OCCI_LOCK_X_NOWAIT</code> indicates that the object should be locked, and returns an error if it is locked by another session.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t359" headers="r1c1-t359">
<pre dir="ltr">PrefetchOption
</pre></td>
<td class="cellalignment2205" headers="r3c1-t359 r1c2-t359">
<ul>
<li>
<p><code dir="ltr">OCCI_MAX_PREFETCH_DEPTH</code> indicates that the fetch should be done to maximum depth.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP21412" class="tblformal">
<p class="titleintable"><a id="sthref875"></a><a id="sthref876"></a>Table 13-36 Summary of<a id="sthref877"></a><a id="sthref878"></a> Ref Methods</p>
<table class="cellalignment2203" title="Summary of Ref Methods " summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t360">Method</th>
<th class="cellalignment2204" id="r1c2-t360">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t360" headers="r1c1-t360">
<p><a href="#i1145818">Ref()</a></p>
</td>
<td class="cellalignment2205" headers="r2c1-t360 r1c2-t360">
<p><code dir="ltr">Ref</code> object constructor.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t360" headers="r1c1-t360">
<p><a href="#i1095369">clear()</a></p>
</td>
<td class="cellalignment2205" headers="r3c1-t360 r1c2-t360">
<p>Clears the reference.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t360" headers="r1c1-t360">
<p><a href="#i1108233">getConnection()</a></p>
</td>
<td class="cellalignment2205" headers="r4c1-t360 r1c2-t360">
<p>Returns the connection this ref was created from.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t360" headers="r1c1-t360">
<p><a href="#i1130541">isClear()</a></p>
</td>
<td class="cellalignment2205" headers="r5c1-t360 r1c2-t360">
<p>Checks if the Ref is cleared.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t360" headers="r1c1-t360">
<p><a href="#i1072606">isNull()</a></p>
</td>
<td class="cellalignment2205" headers="r6c1-t360 r1c2-t360">
<p>Checks if the <code dir="ltr">Ref</code> is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t360" headers="r1c1-t360">
<p><a href="#i1130503">markDelete()</a></p>
</td>
<td class="cellalignment2205" headers="r7c1-t360 r1c2-t360">
<p>Marks the referred object as deleted.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t360" headers="r1c1-t360">
<p><a href="#i1072641">operator-&gt;()</a></p>
</td>
<td class="cellalignment2205" headers="r8c1-t360 r1c2-t360">
<p>Dereferences the <code dir="ltr">Ref</code> and pins the object if necessary.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t360" headers="r1c1-t360">
<p><a href="#i1072650">operator*()</a></p>
</td>
<td class="cellalignment2205" headers="r9c1-t360 r1c2-t360">
<p>Dereferences the <code dir="ltr">Ref</code> and pins or fetches the object if necessary.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t360" headers="r1c1-t360">
<p><a href="#i1072659">operator==()</a></p>
</td>
<td class="cellalignment2205" headers="r10c1-t360 r1c2-t360">
<p>Checks if the <code dir="ltr">Ref</code> and the pointer refer to the same object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t360" headers="r1c1-t360">
<p><a href="#i1072669">operator!=()</a></p>
</td>
<td class="cellalignment2205" headers="r11c1-t360 r1c2-t360">
<p>Checks if the <code dir="ltr">Ref</code> and the pointer refer to different objects.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t360" headers="r1c1-t360">
<p><a href="#i1072681">operator=()</a></p>
</td>
<td class="cellalignment2205" headers="r12c1-t360 r1c2-t360">
<p>Assignment operator.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t360" headers="r1c1-t360">
<p><a href="#i1072691">ptr()</a></p>
</td>
<td class="cellalignment2205" headers="r13c1-t360 r1c2-t360">
<p>Returns a pointer to a <code dir="ltr">PObject</code>. Dereferences the <code dir="ltr">Ref</code> and pins or fetches the object if necessary.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t360" headers="r1c1-t360">
<p><a href="#i1093642">setLock()</a></p>
</td>
<td class="cellalignment2205" headers="r14c1-t360 r1c2-t360">
<p>Sets the lock option for the object referred from this.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t360" headers="r1c1-t360">
<p><a href="#i1130567">setNull()</a></p>
</td>
<td class="cellalignment2205" headers="r15c1-t360 r1c2-t360">
<p>Sets the Ref to <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t360" headers="r1c1-t360">
<p><a href="#i1072700">setPrefetch()</a></p>
</td>
<td class="cellalignment2205" headers="r16c1-t360 r1c2-t360">
<p>Sets the prefetch options for complex object retrieval.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t360" headers="r1c1-t360">
<p><a href="#i1110487">unmarkDelete()</a></p>
</td>
<td class="cellalignment2205" headers="r17c1-t360 r1c2-t360">
<p>Unmarks for delete the object referred by this.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP21413" class="refsect2"><a id="i1145818"></a>
<h2 class="refsect2">Ref()</h2>
<p><code dir="ltr">Ref</code> object constructor.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of Ref() constructor" summary="First column lists versions of the constructor; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t361">Syntax</th>
<th class="cellalignment2204" id="r1c2-t361">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t361" headers="r1c1-t361">
<pre dir="ltr">Ref();
</pre></td>
<td class="cellalignment2205" headers="r2c1-t361 r1c2-t361">Creates a <code dir="ltr">NULL Ref.</code></td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t361" headers="r1c1-t361">
<pre dir="ltr">Ref(
   const Ref&lt;T&gt; &amp;src);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t361 r1c2-t361">Creates a copy of <code dir="ltr">Ref.</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of Ref() constructor" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t362">Parameter</th>
<th class="cellalignment2204" id="r1c2-t362">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t362" headers="r1c1-t362">
<pre dir="ltr">src
</pre></td>
<td class="cellalignment2205" headers="r2c1-t362 r1c2-t362">The <code dir="ltr">Ref</code> that is being copied.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21414" class="refsect2"><a id="i1095369"></a>
<h2 class="refsect2">clear()</h2>
<p>This method clears the <code dir="ltr">Ref</code> object.</p>
<p class="subhead1"><a id="LNCPP21415"></a>Syntax</p>
<pre dir="ltr">void clear();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21416" class="refsect2"><a id="i1108233"></a>
<h2 class="refsect2">getConnection()</h2>
<p>Returns the connection from which the <code dir="ltr">Ref</code> object was instantiated.</p>
<p class="subhead1"><a id="LNCPP21417"></a>Syntax</p>
<pre dir="ltr">const Connection *getConnection() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21418" class="refsect2"><a id="i1130541"></a>
<h2 class="refsect2">isClear()</h2>
<p>This method checks if <code dir="ltr">Ref</code> object is cleared.</p>
<p class="subhead1"><a id="LNCPP21419"></a>Syntax</p>
<pre dir="ltr">bool isClear() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21420" class="refsect2"><a id="i1072606"></a>
<h2 class="refsect2">isNull()</h2>
<p>This method tests whether the <code dir="ltr">Ref</code> object is <code dir="ltr">NULL</code>. If the <code dir="ltr">Ref</code> object is <code dir="ltr">NULL</code>, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21421"></a>Syntax</p>
<pre dir="ltr">bool isNull() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21422" class="refsect2"><a id="i1130503"></a>
<h2 class="refsect2">markDelete()</h2>
<p>This method marks the referenced object as deleted.</p>
<p class="subhead1"><a id="LNCPP21423"></a>Syntax</p>
<pre dir="ltr">void markDelete();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21424" class="refsect2"><a id="i1072641"></a>
<h2 class="refsect2">operator-&gt;()</h2>
<p>This method dereferences the <code dir="ltr">Ref</code> object and pins, or fetches the referenced object if necessary. This might result in prefetching a graph of objects if prefetch attributes of the referenced object are set.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of operator-&gt;() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t363">Syntax</th>
<th class="cellalignment2204" id="r1c2-t363">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t363" headers="r1c1-t363">
<pre dir="ltr">T *operator-&gt;();
</pre></td>
<td class="cellalignment2205" headers="r2c1-t363 r1c2-t363">Dereferences and pins or fetches a non-<code dir="ltr">const</code> <code dir="ltr">Ref</code> object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t363" headers="r1c1-t363">
<pre dir="ltr">const T *operator-&gt;() const;
</pre></td>
<td class="cellalignment2205" headers="r3c1-t363 r1c2-t363">Dereferences and pins or fetches a <code dir="ltr">const</code> <code dir="ltr">Ref</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21425" class="refsect2"><a id="i1072650"></a>
<h2 class="refsect2">operator*()</h2>
<p>This method dereferences the <code dir="ltr">Ref</code> object and pins or fetches the referenced object if necessary. This might result in prefetching a graph of objects if prefetch attributes of the referenced object are set. The object does not have to be deleted. Destructor would be automatically called when it goes out of scope.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of operator*() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t364">Syntax</th>
<th class="cellalignment2204" id="r1c2-t364">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t364" headers="r1c1-t364">
<pre dir="ltr">T&amp; operator*();
</pre></td>
<td class="cellalignment2205" headers="r2c1-t364 r1c2-t364">Dereferences and pins or fetches a non-<code dir="ltr">const</code> <code dir="ltr">Ref</code> object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t364" headers="r1c1-t364">
<pre dir="ltr">const T&amp; operator*() const;
</pre></td>
<td class="cellalignment2205" headers="r3c1-t364 r1c2-t364">Dereferences and pins or fetches a <code dir="ltr">const</code> <code dir="ltr">Ref</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21426" class="refsect2"><a id="i1072659"></a>
<h2 class="refsect2">operator==()</h2>
<p>This method tests whether two <code dir="ltr">Ref</code> objects are referencing the same object. If the <code dir="ltr">Ref</code> objects are referencing the same object, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21427"></a>Syntax</p>
<pre dir="ltr">bool operator == (
   const Ref&lt;T&gt; &amp;ref) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator==() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t365">Parameter</th>
<th class="cellalignment2204" id="r1c2-t365">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t365" headers="r1c1-t365">
<pre dir="ltr">ref
</pre></td>
<td class="cellalignment2205" headers="r2c1-t365 r1c2-t365">The Ref object of the object to be compared.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21428" class="refsect2"><a id="i1072669"></a>
<h2 class="refsect2">operator!=()</h2>
<p>This method tests whether two <code dir="ltr">Ref</code> objects are referencing the same object. If the <code dir="ltr">Ref</code> objects are not referencing the same object, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21429"></a>Syntax</p>
<pre dir="ltr">bool operator!= (
   const Ref&lt;T&gt; &amp;ref) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator!=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t366">Parameter</th>
<th class="cellalignment2204" id="r1c2-t366">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t366" headers="r1c1-t366">
<pre dir="ltr">ref
</pre></td>
<td class="cellalignment2205" headers="r2c1-t366 r1c2-t366">The <code dir="ltr">Ref</code> object of the object to be compared.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21430" class="refsect2"><a id="i1072681"></a>
<h2 class="refsect2">operator=()</h2>
<p>Assigns the <code dir="ltr">Ref</code> or the object to a <code dir="ltr">Ref</code>. For the first case, the <code dir="ltr">Ref</code>s are assigned and for the second case, the <code dir="ltr">Ref</code> is constructed from the object and then assigned.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of operator=() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t367">Syntax</th>
<th class="cellalignment2204" id="r1c2-t367">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t367" headers="r1c1-t367">
<pre dir="ltr">Ref&lt;T&gt;&amp; operator=(
   const Ref&lt;T&gt; &amp;src);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t367 r1c2-t367">Assigns a <code dir="ltr">Ref</code> to a <code dir="ltr">Ref</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t367" headers="r1c1-t367">
<pre dir="ltr">Ref&lt;T&gt;&amp; operator=(
   const T *)obj;
</pre></td>
<td class="cellalignment2205" headers="r3c1-t367 r1c2-t367">Assigns a <code dir="ltr">Ref</code> to an object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t368">Parameter</th>
<th class="cellalignment2204" id="r1c2-t368">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t368" headers="r1c1-t368">
<pre dir="ltr">src
</pre></td>
<td class="cellalignment2205" headers="r2c1-t368 r1c2-t368">The source <code dir="ltr">Ref</code> object to be assigned.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t368" headers="r1c1-t368">
<pre dir="ltr">obj
</pre></td>
<td class="cellalignment2205" headers="r3c1-t368 r1c2-t368">The source object pointer whose <code dir="ltr">Ref</code> object is to be assigned.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21431" class="refsect2"><a id="i1072691"></a>
<h2 class="refsect2">ptr()</h2>
<p>Returns a pointer to a <code dir="ltr">PObject</code>. This operator dereferences the <code dir="ltr">Ref</code> and pins or fetches the object if necessary. This might result in prefetching a graph of objects if prefetch attributes of the <code dir="ltr">Ref</code> are set.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of ptr() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t369">Syntax</th>
<th class="cellalignment2204" id="r1c2-t369">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t369" headers="r1c1-t369">
<pre dir="ltr">T *ptr();
</pre></td>
<td class="cellalignment2205" headers="r2c1-t369 r1c2-t369">Returns a pointer of a non-<code dir="ltr">const</code> <code dir="ltr">Ref</code> object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t369" headers="r1c1-t369">
<pre dir="ltr">const T *ptr() const;
</pre></td>
<td class="cellalignment2205" headers="r3c1-t369 r1c2-t369">Returns a pointer of a <code dir="ltr">const</code> <code dir="ltr">Ref</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21432" class="refsect2"><a id="i1093642"></a>
<h2 class="refsect2">setLock()</h2>
<p>This method specifies how the object should be locked when dereferenced.</p>
<p class="subhead1"><a id="LNCPP21433"></a>Syntax</p>
<pre dir="ltr">void setLock(lockOptions);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setLock() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t370">Argument</th>
<th class="cellalignment2204" id="r1c2-t370">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t370" headers="r1c1-t370">
<pre dir="ltr">lockOptions
</pre></td>
<td class="cellalignment2205" headers="r2c1-t370 r1c2-t370">The lock options as defined by <code dir="ltr">LockOptions</code> in <a href="#BBAJGIHJ">Table 13-35</a> .</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21434" class="refsect2"><a id="i1130567"></a>
<h2 class="refsect2">setNull()</h2>
<p>This method sets the <code dir="ltr">Ref</code> object to <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21435"></a>Syntax</p>
<pre dir="ltr">void setNull();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21436" class="refsect2"><a id="i1072700"></a>
<h2 class="refsect2">setPrefetch()</h2>
<p>Sets the prefetching options for complex object retrieval. This method specifies depth up to which all objects reachable from this object through <code dir="ltr">Ref</code>s (transitive closure) should be prefetched. If only selected attribute types are to be prefetched, then the first version of the method must be used. This method specifies which Ref attributes of the object it refers to should be followed for prefetching of the objects (complex object retrieval) and how many levels deep those links should be followed.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of setPrefetch() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t371">Syntax</th>
<th class="cellalignment2204" id="r1c2-t371">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t371" headers="r1c1-t371">
<pre dir="ltr">void setPrefetch(
   const string &amp;typeName,
   unsigned int depth);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t371 r1c2-t371">Sets the prefetching options for complex object retrieval, using type name and depth.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t371" headers="r1c1-t371">
<pre dir="ltr">void setPrefetch(
   unsigned int depth);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t371 r1c2-t371">Sets the prefetching options for complex object retrieval, using depth only.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t371" headers="r1c1-t371">
<pre dir="ltr">void setPrefetch(
   const string &amp;schName,
   const string &amp;typeName,
   unsigned int depth);
</pre></td>
<td class="cellalignment2205" headers="r4c1-t371 r1c2-t371">Sets the prefetching options for complex object retrieval, using schema, type name, and depth.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t371" headers="r1c1-t371">
<pre dir="ltr">void setPrefetch(
   const UString &amp;schName,
   const UString &amp;typeName,
   unsigned int depth);
</pre></td>
<td class="cellalignment2205" headers="r5c1-t371 r1c2-t371">Sets the prefetching options for complex object retrieval, using schema, type name, and depth, and <code dir="ltr">UString</code> support.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of setPrefetch() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t372">Parameter</th>
<th class="cellalignment2204" id="r1c2-t372">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t372" headers="r1c1-t372">
<pre dir="ltr">typeName
</pre></td>
<td class="cellalignment2205" headers="r2c1-t372 r1c2-t372">Type of the Ref attribute to be prefetched.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t372" headers="r1c1-t372">
<pre dir="ltr">schName
</pre></td>
<td class="cellalignment2205" headers="r3c1-t372 r1c2-t372">Schema name of the Ref attribute to be prefetched.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t372" headers="r1c1-t372">
<pre dir="ltr">depth
</pre></td>
<td class="cellalignment2205" headers="r4c1-t372 r1c2-t372">Depth level to which the links should be followed; can use <code dir="ltr">PrefetchOption</code> as defined in <a href="#BBAJGIHJ">Table 13-35</a> .</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21437" class="refsect2"><a id="i1110487"></a>
<h2 class="refsect2">unmarkDelete()</h2>
<p>This method unmarks the referred object as dirty and available for deletion.</p>
<p class="subhead1"><a id="LNCPP21438"></a>Syntax</p>
<pre dir="ltr">void unmarkDelete();
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2196">
<tr>
<td class="cellalignment2205">
<table class="cellalignment2201">
<tr>
<td class="cellalignment2200"><a href="reference024.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2200"><a href="reference026.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2208">
<table class="cellalignment2199">
<tr>
<td class="cellalignment2200"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2200"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2200"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2200"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2200"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2200"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>