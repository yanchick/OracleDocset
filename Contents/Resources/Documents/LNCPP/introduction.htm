<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-73892"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Introduction%20to%20OCCI"></a><title>Introduction to OCCI</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1082"/>
<meta name="dcterms.created" content="2016-06-01T12:8:10Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="C++ Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E48221-07"/>
<meta name="dcterms.isVersionOf" content="LNCPP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="release_changes.htm" title="Previous" type="text/html"/>
<link rel="Next" href="install.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48221-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/54</span> <!-- End Header -->
<div id="LNCPP001" class="chapter"><a id="CACIEBGE"></a> <a id="i430767"></a>
<h1 class="chapter"><span class="secnum">1</span> Introduction to OCCI</h1>
<p>This chapter provides an overview of Oracle C++ Call Interface (OCCI) and introduces terminology used in discussing OCCI. You are provided with the background information needed to develop C++ applications that run in an Oracle environment.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CACJHADG">Overview of OCCI</a></p>
</li>
<li>
<p><a href="#CACBCGIC">Processing SQL Statements</a></p>
</li>
<li>
<p><a href="#CACEBHBF">Overview of PL/SQL</a></p>
</li>
<li>
<p><a href="#i426228">Special OCCI/SQL Terms</a></p>
</li>
<li>
<p><a href="#i433372">Object Support</a></p>
</li>
<li>
<p><a href="#BABHHGBJ">Additional Support</a></p>
</li>
</ul>
<a id="CACJHADG"></a>
<div id="LNCPP20045" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of <a id="sthref8"></a>OCCI</h2>
<p>Oracle C++ Call Interface (OCCI) is an Application Programming Interface (API) that provides C++ applications access to data in an Oracle database. OCCI enables C++ programmers to use the full range of Oracle database operations, including SQL statement processing and object manipulation.</p>
<p>OCCI provides for:</p>
<ul>
<li>
<p>High performance applications through the efficient use of system memory and network connectivity</p>
</li>
<li>
<p>Scalable applications that can service an increasing number of users and requests</p>
</li>
<li>
<p>Comprehensive support for application development by using Oracle database objects, including client-side access to Oracle database objects</p>
</li>
<li>
<p>Simplified user authentication and password management</p>
</li>
<li>
<p>n-tiered authentication</p>
</li>
<li>
<p>Consistent interfaces for dynamic connection management and transaction management in two-tier client/server environments or multitiered environments</p>
</li>
<li>
<p>Encapsulated and opaque interfaces</p>
</li>
</ul>
<p>OCCI provides a library of standard database access and retrieval functions in the form of a dynamic run-time library (OCCI classes) that can be linked in a C++ application at run time. This eliminates the requirement to embed SQL or PL/SQL within third-generation language (3GL) programs.</p>
<p>This section discusses the following topics:</p>
<ul>
<li>
<p><a href="#BABCAAGE">Benefits of OCCI</a></p>
</li>
<li>
<p><a href="#BABDCDCG">Building a C++ Application with OCCI</a></p>
</li>
<li>
<p><a href="#i432337">Functionality of OCCI</a></p>
</li>
<li>
<p><a href="#i432337">Functionality of OCCI</a></p>
</li>
</ul>
<a id="BABCAAGE"></a>
<div id="LNCPP20046" class="sect2">
<h3 class="sect2">Benefits of <a id="sthref9"></a>OCCI</h3>
<p>OCCI provides these significant advantages over other methods of accessing an Oracle database:</p>
<ul>
<li>
<p>Leverages C++ and the Object Oriented Programming paradigm</p>
</li>
<li>
<p>Is easy to use</p>
</li>
<li>
<p>Is easy to learn for those familiar with JDBC</p>
</li>
<li>
<p>Has a navigational interface to manipulate database objects of user-defined types as C++ class instances</p>
</li>
</ul>
<p>Note that OCCI does not support nonblocking mode.</p>
</div>
<!-- class="sect2" -->
<a id="BABDCDCG"></a>
<div id="LNCPP20047" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref10"></a>Building a C++ Application with OCCI</h3>
<p>As <a href="#BABHECCH">Figure 1-1</a> shows, you compile and link an OCCI program in the same way that you compile and link an application that does not use the database.</p>
<div id="LNCPP20048" class="figure">
<p class="titleinfigure"><a id="BABHECCH"></a>Figure 1-1 The OCCI Development Process</p>
<img width="429" height="450" src="img/occi_development_process.gif" alt="Description of Figure 1-1 follows"/><br/>
<a id="sthref11" href="img_text/occi_development_process.htm">Description of &#39;&#39;Figure 1-1 The OCCI Development Process&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Oracle supports most popular third-party compilers. The details of linking an OCCI program vary from system to system. On some platforms, it may be necessary to include other libraries, in addition to the OCCI library, to properly link your OCCI programs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Your operating system-specific Oracle documentation and the <span class="italic">Oracle Database Installation Guide</span> for more information about compiling and linking an OCCI application for your specific platform</div>
</div>
<!-- class="sect2" -->
<a id="i432337"></a>
<div id="LNCPP20049" class="sect2">
<h3 class="sect2">Functionality of <a id="sthref12"></a>OCCI</h3>
<p>OCCI provides the following functionality:</p>
<ul>
<li>
<p>APIs to design scalable, multithreaded applications that can support large numbers of users securely</p>
</li>
<li>
<p>SQL access functions, for managing database access, processing SQL statements, and manipulating objects retrieved from an Oracle database server</p>
</li>
<li>
<p>Data type mapping and manipulation functions, for manipulating data attributes of Oracle types</p>
</li>
<li>
<p>Advanced Queuing for message management</p>
</li>
<li>
<p>XA compliance for distributed transaction support</p>
</li>
<li>
<p>Statement caching of SQL and PL/SQL queries</p>
</li>
<li>
<p>Connection pooling for managing multiple connections</p>
</li>
<li>
<p>Globalization and Unicode support to customize applications for international and regional language requirement</p>
</li>
<li>
<p>Object Type Translator Utility</p>
</li>
<li>
<p>Transparent Application Failover support</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="LNCPP20050" class="sect2"><a id="sthref13"></a>
<h3 class="sect2"><a id="sthref14"></a><a id="sthref15"></a><a id="sthref16"></a>Procedural and Nonprocedural Elements</h3>
<p>Oracle C++ Call Interface (OCCI) enables you to develop scalable, multithreaded applications on multitiered architectures that combine nonprocedural data access power of structured query language (SQL) with procedural capabilities of C++.</p>
<p>In a nonprocedural language program, the set of data to be operated on is specified, but what operations may performed, or how the operations can be carried out, is not specified. The nonprocedural nature of SQL makes it an easy language to learn and use to perform database transactions. It is also the standard language used to access and manipulate data in modern relational and object-relational database systems.</p>
<p>In a procedural language program, the execution of most statements depends on previous or subsequent statements and on control structures, such as loops or conditional branches, which are not available in SQL. The procedural nature of these languages makes them more complex than SQL, but it also makes them very flexible and powerful.</p>
<p>The combination of both nonprocedural and procedural language elements in an OCCI program provides easy access to an Oracle database in a structured programming environment.</p>
<p>OCCI supports all SQL data definition, data manipulation, query, and transaction control facilities that are available through an Oracle database server. For example, an OCCI program can run a query against an Oracle database. The queries can require the program to supply data to the database by using input (bind) variables, as follows:</p>
<pre dir="ltr">SELECT name FROM employees WHERE employee_id = :<span class="italic">empnum</span>
</pre>
<p>In this SQL statement, <code dir="ltr"><span class="codeinlineitalic">empnum</span></code> is a placeholder for a value that is supplied by the application.</p>
<p>In an OCCI application, you can also take advantage of PL/SQL, Oracle&#39;s procedural extension to SQL. The applications you develop can be more powerful and flexible than applications written in SQL alone. OCCI also provides facilities for accessing and manipulating objects in an Oracle database server.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACBCGIC"></a>
<div id="LNCPP20051" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Processing <a id="sthref17"></a>SQL Statements</h2>
<p>One of the main tasks of an OCCI application is to process SQL statements. Different types of SQL statements require different processing steps in your program. It is important to take this into account when coding your OCCI application. Oracle recognizes several types of SQL statements:</p>
<ul>
<li>
<p><a href="#i433342">Data Definition Language Statements</a> (DDL)</p>
</li>
<li>
<p><a href="#BABDCDDC">Control Statements</a></p>
</li>
<li>
<p><a href="#i426130">Data Manipulation Language Statements</a> (DML)</p>
</li>
<li>
<p><a href="#i426149">Queries</a></p>
</li>
</ul>
<a id="i433342"></a>
<div id="LNCPP20052" class="sect2">
<h3 class="sect2">Data Definition Language Statements</h3>
<p>Data Definition Language (DDL) statements manage schema objects in the database. These statements create new tables, drop old tables, and establish other schema objects. They also control access to schema objects. <a href="#CACEGCDH">Example 1-1</a> illustrates how to create a table, and <a href="#BABCJDAI">Example 1-2</a> shows how to grant and revoke privileges on this table.</p>
<div id="LNCPP20053" class="example">
<p class="titleinexample"><a id="CACEGCDH"></a>Example 1-1 Creating a Table</p>
<pre dir="ltr">CREATE TABLE employee_information ( 
   employee_id NUMBER(6), 
   ssn NUMBER(9), 
   dependents NUMBER(1),
   mail_address VARCHAR(60))
</pre></div>
<!-- class="example" -->
<div id="LNCPP20054" class="example">
<p class="titleinexample"><a id="BABCJDAI"></a>Example 1-2 Specifying Access to a Table</p>
<pre dir="ltr">GRANT UPDATE, INSERT, DELETE ON employee_information TO donna
REVOKE UPDATE ON employee_information FROM jamie 
</pre></div>
<!-- class="example" -->
<p>DDL statements also allow you to work with objects in the Oracle database, as in <a href="#CACICJFJ">Example 1-3</a>, which illustrates how to create an object table.</p>
<div id="LNCPP20055" class="example">
<p class="titleinexample"><a id="CACICJFJ"></a>Example 1-3 Creating an Object Table</p>
<pre dir="ltr">CREATE TYPE person_info_type AS OBJECT (
   employee_id NUMBER(6), 
   ssn NUMBER(9), 
   dependents NUMBER(1),
   mail_address VARCHAR(60))

CREATE TABLE person_info_table OF person_info_type 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABDCDDC"></a>
<div id="LNCPP20056" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Control<a id="sthref18"></a> Sta<a id="sthref19"></a>tements</h3>
<p>OCCI applications treat transaction control, connection control, and system control statements (for example, DML statements).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF30043" href="../SQLRF/statements_1001.htm#SQLRF30043"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about control statements.</div>
</div>
<!-- class="sect2" -->
<a id="i426130"></a>
<div id="LNCPP20057" class="sect2">
<h3 class="sect2">Data Manipulation Language<a id="sthref20"></a> Statements</h3>
<p>Data Manipulation Language (DML) statements can change data in database tables. For example, DML statements insert new rows into a table, update column values in existing rows, delete rows from a table, lock a table in the database, and explain the execution plan for a SQL statement.</p>
<p>DML statements may require an application to supply data to the database by using input bind variables, as in <a href="#CACIDBDF">Example 1-4</a>. This statement can be executed several times with different bind values, or several rows can be added through array insert in a single round-trip to the server.</p>
<div id="LNCPP20058" class="example">
<p class="titleinexample"><a id="CACIDBDF"></a>Example 1-4 Inserting Data Through Input Bind Variables</p>
<pre dir="ltr">INSERT INTO departments VALUES(:1,:2,:3) 
</pre></div>
<!-- class="example" -->
<p>DML statements also enable you to work with objects in the Oracle Database, as in <a href="#CACGIABH">Example 1-5</a>, which shows the insertion of an instance of a type into an object table.</p>
<div id="LNCPP20059" class="example">
<p class="titleinexample"><a id="CACGIABH"></a>Example 1-5 Inserting Objects into the Oracle Database</p>
<pre dir="ltr">INSERT INTO person_info_table
VALUES (person_info_type(&#39;450987&#39;,&#39;123456789&#39;,&#39;3&#39;,&#39;146 Winfield Street&#39;))
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i426149"></a>
<div id="LNCPP20060" class="sect2">
<h3 class="sect2">Queri<a id="sthref21"></a>e<a id="sthref22"></a>s</h3>
<p>Queries are statements that retrieve data from tables in a database. A query can return zero, one, or many rows of data. All queries begin with the SQL keyword <code dir="ltr">SELECT</code>, as in <a href="#BABBEJCG">Example 1-6</a>:</p>
<div id="LNCPP20061" class="example">
<p class="titleinexample"><a id="BABBEJCG"></a>Example 1-6 Using the Simple SELECT Statement</p>
<pre dir="ltr">SELECT department_name FROM departments
   WHERE department_id = 30
</pre></div>
<!-- class="example" -->
<p>Queries can require the program to supply data to the database server by using input bind variables, as in <a href="#BABIEJBI">Example 1-7</a>:</p>
<div id="LNCPP20062" class="example">
<p class="titleinexample"><a id="BABIEJBI"></a>Example 1-7 Using the SELECT Statement with Input Variables</p>
<pre dir="ltr">SELECT first_name, last_name 
   FROM employees
   WHERE employee_id = :emp_id
</pre></div>
<!-- class="example" -->
<p>In this SQL statement, <code dir="ltr">emp_id</code> is a placeholder for a value that is supplied by the application.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACEBHBF"></a>
<div id="LNCPP20063" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of <a id="sthref23"></a>PL/SQL</h2>
<p><span class="bold">PL/SQL</span> is Oracle&#39;s procedural extension to the SQL language. PL/SQL processes tasks that are more complicated than simple queries and SQL data manipulation language statements. PL/SQL allows several constructs to be grouped into a single block and executed as a unit. Among these are the following constructs:</p>
<ul>
<li>
<p>One or more SQL statements</p>
</li>
<li>
<p>Variable declarations</p>
</li>
<li>
<p>Assignment statements</p>
</li>
<li>
<p>Procedural control statements (<code dir="ltr">IF</code> <code dir="ltr">...</code> <code dir="ltr">THEN</code> <code dir="ltr">...</code> <code dir="ltr">ELSE</code> statements and loops)</p>
</li>
<li>
<p>Exception handling</p>
</li>
</ul>
<p>In addition to calling PL/SQL stored procedures from an OCCI program, you can use PL/SQL blocks in your OCCI program to perform the following tasks:</p>
<ul>
<li>
<p>Call other PL/SQL stored procedures and stored functions.</p>
</li>
<li>
<p>Combine procedural control statements with several SQL statements, to be executed as a unit.</p>
</li>
<li>
<p>Access special PL/SQL features such as records, tables, cursor FOR loops, and exception handling.</p>
</li>
<li>
<p>Use cursor variables.</p>
</li>
<li>
<p>Access and manipulate objects in an Oracle database.</p>
</li>
</ul>
<p>A PL/SQL procedure or function can also return an output variable. This is called an <span class="bold">out <a id="sthref24"></a><a id="sthref25"></a>bind variable</span>, as in <a href="#BABGCHDI">Example 1-8</a>:</p>
<div id="LNCPP20064" class="example">
<p class="titleinexample"><a id="BABGCHDI"></a>Example 1-8 Using PL/SQL to Obtain an Output Variable</p>
<pre dir="ltr">GET_EMPLOYEE_NAME(:1, :2);
</pre></div>
<!-- class="example" -->
<p>Here, the first parameter is an input variable that provides the ID number of an employee. The second parameter, or the out bind variable, contains the return value of employee name.</p>
<p>PL/SQL can also be used to issue a SQL statement to retrieve values from a table of employees, given a particular employee number. <a href="#BABIJDDG">Example 1-9</a> demonstrates the use of placeholders in PL/SQL statements.</p>
<div id="LNCPP20065" class="example">
<p class="titleinexample"><a id="BABIJDDG"></a>Example 1-9 Using PL/SQL to Insert Partial Records into Placeholders</p>
<pre dir="ltr">SELECT last_name, first_name, salary, commission_pct 
   INTO :emp_last, :emp_first, :sal, :comm
   FROM employees
   WHERE employee_id = :emp_id;
</pre></div>
<!-- class="example" -->
<p>Note that the placeholders in this statement are not PL/SQL variables. They represent input and output parameters passed to and from the database server when the statement is processed. These placeholders must be specified in your program.</p>
</div>
<!-- class="sect1" -->
<a id="i426228"></a>
<div id="LNCPP20066" class="sect1">
<h2 class="sect1">Special <a id="sthref26"></a>OCCI/SQL Terms</h2>
<p>This guide uses special terms to refer to the different parts of a SQL statement. Consider <a href="#BABEDFCH">Example 1-10</a>:</p>
<div id="LNCPP20067" class="example">
<p class="titleinexample"><a id="BABEDFCH"></a>Example 1-10 Using SQL to Extract Partial Records</p>
<pre dir="ltr">SELECT first_name, last_name, email
   FROM employees
   WHERE department_id = 80
   AND commission_pct &gt; :base;
</pre></div>
<!-- class="example" -->
<p>This example contains these parts:</p>
<ul>
<li>
<p>A SQL <span class="bold">command</span>: <code dir="ltr">SELECT</code></p>
</li>
<li>
<p>Three <span class="bold">select-list items</span>: <code dir="ltr">first_name</code>, <code dir="ltr">last_name</code>, and <code dir="ltr">email</code></p>
</li>
<li>
<p>A <span class="bold">table name</span> in the <code dir="ltr">FROM</code> clause: <code dir="ltr">employees</code></p>
</li>
<li>
<p>Two <span class="bold">column names</span> in the <code dir="ltr">WHERE</code> clause: <code dir="ltr">department_id</code> and <code dir="ltr">commission_pct</code></p>
</li>
<li>
<p>A <span class="bold">numeric input value</span> in the <code dir="ltr">WHERE</code> clause: <code dir="ltr">40</code></p>
</li>
<li>
<p>A <span class="bold">placeholder</span> for an input bind variable in the <code dir="ltr">WHERE</code> clause: <code dir="ltr">:base</code></p>
</li>
</ul>
<p>When you develop your OCCI application, you call routines that specify to the database server the value of, or reference to, input and output variables in your program. In this guide, specifying the placeholder variable for data is called a <a id="sthref27"></a><span class="bold">bind operation</span>. For input variables, this is called an <span class="bold">in bind operation</span>. For output variables, this is called an <span class="bold">out bind ope<a id="sthref28"></a>ration</span>.</p>
</div>
<!-- class="sect1" -->
<a id="i433372"></a>
<div id="LNCPP20068" class="sect1">
<h2 class="sect1">Obje<a id="sthref29"></a>ct Support</h2>
<p>OCCI has facilities for working with <span class="bold">object types</span> and <span class="bold">objects</span>. An <span class="bold">obje<a id="sthref30"></a>ct type</span> is a user-defined data structure representing an abstraction of a real-world entity. For example, the database might contain a definition of a <code dir="ltr">person</code> object. That object type might have <span class="bold">at<a id="sthref31"></a>tr<a id="sthref32"></a>ibutes</span>, such as <code dir="ltr">first_name</code>, <code dir="ltr">last_name</code>, and <code dir="ltr">age</code>, which represent a person&#39;s identifying characteristics.</p>
<p><a id="i433206"></a>The object type definition serves as the basis for creating <span class="bold">objects</span>, which represent instances of the object type. By using the object type as a structural definition, a <code dir="ltr">person</code> object could be created with the attributes <code dir="ltr">John</code>, <code dir="ltr">Bonivento</code>, and <code dir="ltr">30</code>. Object types may also contain <span class="bold">met<a id="sthref33"></a><a id="sthref34"></a>hods</span>, or programmatic functions that represent the behavior of that object type.</p>
<p>OCCI provides a comprehensive API for programmers seeking to use the Oracle database server&#39;s object capabilities. These features can be divided into several major categories, which are discussed in subsequent topics:</p>
<ul>
<li>
<p><a href="#i433212">Client-Side Object Cache</a></p>
</li>
<li>
<p><a href="#i433213">Run-time Environment for Objects</a></p>
</li>
<li>
<p><a href="#i433215">Associative and Navigational Interfaces</a></p>
</li>
<li>
<p><a href="#BABFIJHA">Interoperability with C (OCI)</a></p>
</li>
<li>
<p><a href="#i433217">Metadata Class</a></p>
</li>
<li id="i433208">
<p><a href="#i433216">Object Type Translator Utility</a> (OTT) utility, which maps internal Oracle schema information to client-side language bind variables</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a class="olink CNCPT88817" href="../CNCPT/tablecls.htm#CNCPT88817"><span class="italic">Oracle Database Concepts</span></a></p>
</li>
<li>
<p><a class="olink ADOBJ001" href="../ADOBJ/adobjint.htm#ADOBJ001"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for a more detailed explanation of object types and objects</p>
</li>
</ul>
</div>
</li>
</ul>
<a id="i433212"></a>
<div id="LNCPP20069" class="sect2">
<h3 class="sect2"><a id="sthref35"></a><a id="sthref36"></a>Client-Side Object Cache</h3>
<p>The object cache is a client-side memory buffer that provides lookup and memory management support for objects. It stores and tracks objects which have been fetched by an OCCI application from the server to the client side. The client-side object cache is created when the OCCI environment is initialized in <code dir="ltr">object</code> mode. Multiple applications running against the same server have their own object cache. The client-side object cache tracks the objects that are currently in memory, maintains references to objects, manages automatic object swapping and tracks the meta-attributes or type information about objects. The client-side object cache provides the following benefits:</p>
<ul>
<li>
<p>Improved application performance by reducing the number of client/server round-trips required to fetch and operate on objects</p>
</li>
<li>
<p>Enhanced scalability by supporting object swapping from the client-side cache</p>
</li>
<li>
<p>Improved concurrency by supporting object-level locking</p>
</li>
<li>
<p>Automatic garbage collection when cache thresholds are exceeded</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i433213"></a>
<div id="LNCPP20070" class="sect2">
<h3 class="sect2"><a id="sthref37"></a><a id="sthref38"></a>Run-time Environment for Objects</h3>
<p>OCCI provides a run-time environment for objects that offers a set of methods for managing how Oracle objects are used on the client side. These methods provide the necessary functionality for performing these tasks:</p>
<ul>
<li>
<p>Connecting to an Oracle database server to access its object functionality</p>
</li>
<li>
<p>Allocating the client-side object cache and tuning its parameters</p>
</li>
<li>
<p>Retrieving error and warning messages</p>
</li>
<li>
<p>Controlling transactions that access objects in the database</p>
</li>
<li>
<p>Associatively accessing objects through SQL</p>
</li>
<li>
<p>Describing a PL/SQL procedure or function whose parameters or result are of Oracle object type</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i433215"></a>
<div id="LNCPP20071" class="sect2">
<h3 class="sect2"><a id="sthref39"></a><a id="sthref40"></a><a id="sthref41"></a>Associative and Navigational Interfaces</h3>
<p>Applications that use OCCI can access objects in the database through several types of interfaces, such as SQL <code dir="ltr">SELECT</code>, <code dir="ltr">INSERT</code>, and <code dir="ltr">UPDATE</code> statements, and C++ pointers and references that access objects in the client-side object cache by traversing the corresponding references.</p>
<p>OCCI provides a set of methods to support object manipulation by using SQL <code dir="ltr">SELECT</code>, <code dir="ltr">INSERT</code>, and <code dir="ltr">UPDATE</code> statements. To access Oracle objects, these SQL statements use a consistent set of steps as if they were accessing relational tables. OCCI provides methods to access objects by using SQL statements for:</p>
<ul>
<li>
<p>Binding object type instances and references as input and output variables of SQL statements and PL/SQL stored procedures</p>
</li>
<li>
<p>Executing SQL statements that contain object type instances and references</p>
</li>
<li>
<p>Fetching object type instances and references</p>
</li>
<li>
<p>Retrieving column values from a result set as objects</p>
</li>
<li>
<p>Describing a select-list item of an Oracle object type</p>
</li>
</ul>
<p>OCCI provides a seamless interface for navigating objects, enabling you to manipulate database objects in the same way that you would operate on transient C++ objects. You can dereference the overloaded arrow (<code dir="ltr">-&gt;</code>) operator on an object reference to transparently materialize the object from the database into the application space.</p>
</div>
<!-- class="sect2" -->
<a id="BABFIJHA"></a>
<div id="LNCPP21903" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Interoperability with C (OCI)</h3>
<p>The OCCI application can retrieve the underlying OCI handles and descriptors by calling <code dir="ltr">getOCI</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> methods on the OCCI class instances. These handles can be used to call OCI functions.</p>
<p>Note that the application must be aware that if any properties are changed on the OCI handles, the corresponding OCCI instances may or may not reflect this.</p>
<p>This interoperability between OCCI and OCI is not supported if the application uses OCI functions for any object-related functionality.</p>
</div>
<!-- class="sect2" -->
<a id="i433217"></a>
<div id="LNCPP20072" class="sect2">
<h3 class="sect2"><a id="sthref42"></a>Metadata Class</h3>
<p>Each Oracle data type is represented in OCCI by a C++ class. The class exposes the behavior and characteristics of the data type by overloaded operators and methods. For example, the Oracle data type <code dir="ltr">NUMBER</code> is represented by <code dir="ltr">the Number</code> class. OCCI provides a metadata class that enables you to retrieve metadata describing database objects, including object types.</p>
</div>
<!-- class="sect2" -->
<a id="i433216"></a>
<div id="LNCPP20073" class="sect2">
<h3 class="sect2">Object Type <a id="sthref43"></a>Translator Utility</h3>
<p>The Object Type Translator (OTT) utility translates schema information about Oracle object types into client-side language bindings. That is, OTT translates object type information into declarations of host language variables, such as structures and classes. OTT takes an <code dir="ltr">intype</code> file that contains information about Oracle database schema objects as input. OTT generates an <code dir="ltr">outtype</code> file and the necessary header and implementation files that must be included in a C++ application that runs against the object schema. <a id="sthref44"></a></p>
<p>In summary, OCCI supports object handling in an Oracle database by:</p>
<ul>
<li>
<p>Improving application developer productivity by eliminating the requirement to write the host language variables that correspond to schema objects</p>
</li>
<li>
<p>Maintaining SQL as the data definition language of choice by providing the ability to automatically map Oracle database schema objects created by SQL to host language variables; this allows Oracle to support a consistent, enterprise-wide model of the user&#39;s data</p>
</li>
<li>
<p>Facilitating schema evolution of object types by regenerating included header files when the schema is changed, allowing Oracle applications to support schema evolution</p>
</li>
<li>
<p>Executing SQL statements that manipulate object data and schema information</p>
</li>
<li>
<p>Passing object references and instances as input variables in SQL statements</p>
</li>
<li>
<p>Declaring object references and instances as variables to receive the output of SQL statements</p>
</li>
<li>
<p>Fetching object references and instances from a database</p>
</li>
<li>
<p>Describing properties of SQL statements that return object instances and references</p>
</li>
<li>
<p>Describing PL/SQL procedures or functions with object parameters or results</p>
</li>
<li>
<p>Extending commit and rollback calls to synchronize object and relational functionality</p>
</li>
<li>
<p>Advanced queuing of objects</p>
</li>
</ul>
<p>OTT is typically invoked from the command line by specifying the intype file, the outtype file, and the specific database connection.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHHGBJ"></a>
<div id="LNCPP20074" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Additional Support</h2>
<p>This section discusses how to build the OCCI examples that ship with Oracle Database, and additional resources.</p>
<div id="LNCPP20075" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref45"></a>
<h3 class="sect2">Building OCCI Demos</h3>
<p>You must install the demonstration programs as described in <span class="italic">Oracle Database Examples Installation Guide</span>. Parts of these demos are used as examples in this book. To build the examples, see the following steps:</p>
<ol>
<li>
<p>Navigate to the demo directory.</p>
<p><span class="bolditalic">On Windows</span>, this directory is <code dir="ltr"><span class="codeinlineitalic">ORACLE_HOME</span></code><code dir="ltr">\rdbms\demo</code>.</p>
<p><span class="bolditalic">On Linux and UNIX</span>, this directory is <code dir="ltr"><span class="codeinlineitalic">ORACLE_HOME</span></code><code dir="ltr">/rdbms/demo</code>.</p>
</li>
<li>
<p>Ensure that this directory contains the file <code dir="ltr">demo_rdbms.mk</code>.</p>
</li>
<li>
<p>Create the OCCI demo using the <code dir="ltr">make</code> command.</p>
<ul>
<li>
<p>To make all the demos at the same time, use the following parameters:</p>
<pre dir="ltr">make -f demo_rdbms.mk occidemos
</pre></li>
<li>
<p>To make only one demo, use parameters:</p>
<pre dir="ltr">make -f demo_rdbms.mk <span class="italic">demoname</span>
</pre></li>
<li>
<p>To make a single demo with objects, use parameters:</p>
<pre dir="ltr">make -f demo_rdbms.mk buildocci EXE=<span class="italic">demoname</span> OBJS=<span class="italic">demoname.o</span>
</pre></li>
<li>
<p>To make a single demo with static libraries, use parameters:</p>
<pre dir="ltr">make -f demo_rdbms.mk buildocci_static EXE=<span class="italic">demoname</span> OBJS=<span class="italic">demoname.o</span>
</pre></li>
<li>
<p>For more options, examine the <code dir="ltr">demo_rdbms.mk</code> file.</p>
</li>
</ul>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div id="LNCPP20076" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref46"></a>
<h3 class="sect2">OCCI on the Oracle Technology Network</h3>
<p>You can find additional information on OCCI, including a forum, downloads, and white papers, at: <code dir="ltr"><a href="http://www.oracle.com/technetwork/database/features/oci/index-090820.html">http://www.oracle.com/technetwork/database/features/oci/index-090820.html</a></code>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2196">
<tr>
<td class="cellalignment2205">
<table class="cellalignment2201">
<tr>
<td class="cellalignment2200"><a href="release_changes.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2200"><a href="install.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2208">
<table class="cellalignment2199">
<tr>
<td class="cellalignment2200"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2200"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2200"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2200"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2200"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2200"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>