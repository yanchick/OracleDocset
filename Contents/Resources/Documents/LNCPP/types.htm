<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-73941"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Data%20Types"></a><title>Data Types</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1082"/>
<meta name="dcterms.created" content="2016-06-01T12:8:10Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="C++ Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E48221-07"/>
<meta name="dcterms.isVersionOf" content="LNCPP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="objects.htm" title="Previous" type="text/html"/>
<link rel="Next" href="metadata.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48221-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/54</span> <!-- End Header -->
<script>
<!-- // <![CDATA[
window.name='types'
// ]]> -->
</script> <script>
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="LNCPP005" class="chapter"><a id="BABBHJGB"></a> <a id="i1022418"></a>
<h1 class="chapter"><span class="secnum">5</span> Data Types</h1>
<p>This chapter is a reference for Oracle <a id="sthref295"></a>data types used by Oracle C++ Interface applications. This information helps you to understand the conversions between internal and external representations of data that occur when you transfer data between your application and the database server.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1011113">Overview of Oracle Data Types</a></p>
</li>
<li>
<p><a href="#i1011118">Internal Data Types</a></p>
</li>
<li>
<p><a href="#i1011123">External Data Types</a></p>
</li>
<li>
<p><a href="#i1011128">Data Conversions</a></p>
</li>
</ul>
<a id="i1011113"></a>
<div id="LNCPP20208" class="sect1">
<h2 class="sect1">Overview of Oracl<a id="sthref296"></a>e Data Types</h2>
<p>Accurate communication between your C++ program and the Oracle database server is critical. OCCI applications can retrieve data from database tables by using SQL queries or they can modify existing data with SQL <code>INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> functions. To facilitate communication between the host language C++ and the database server, you must be aware of how C++ data types are converted to Oracle data types and back again.</p>
<p>In the Oracle database, values are stored in columns in tables. Internally, Oracle represents data in particular formats call<a id="sthref297"></a>ed internal data types. <code dir="ltr">NUMBER</code>, <code dir="ltr">VARCHAR2</code>, and <code dir="ltr">DATE</code> are examples of Oracle internal data types.</p>
<p>OCCI applications work with host language data types, or external data types, predefined by the host language. When data is transferred between an OCCI application and the database server, the data from the database is converted from internal data types to exter<a id="sthref298"></a>nal data types.</p>
<div id="LNCPP20209" class="sect2"><a id="sthref299"></a>
<h3 class="sect2">OC<a id="sthref300"></a>CI Type and Data Conversion</h3>
<p>OCCI defines an enumerator called <code dir="ltr">Type</code> that lists the possible data representation formats available in an OCCI application. These representation formats are called external data types. When data is sent to the database server from the OCCI application, the external data type indicates to the database server what format to expect the data. When data is requested from the database server by the OCCI application, the external data type indicates the format of the data to be returned.</p>
<p>For example, on retrieving a value from a <code dir="ltr">NUMBER</code> column, the program may be set to retrieve it in <code dir="ltr">OCCIINT</code> format (a signed integer format into an integer variable). Or, the client might be set to send data in <code dir="ltr">OCCIFLOAT</code> format (floating-point format) stored in a C++ float variable to be inserted in a column of <code dir="ltr">NUMBER</code> type.</p>
<p>An OCCI application binds input parameters to a <code dir="ltr">Statement</code>, by calling a <code dir="ltr">set</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> method (the <code dir="ltr">external datatype</code> is implicitly specified by the method name), or by calling the <code dir="ltr">registerOutParam()</code>, <code dir="ltr">setDataBuffer()</code>, or <code dir="ltr">setDataBufferArray()</code> method (the external data type is explicitly specified in the method call). Similarly, when data values are fetched through a <code dir="ltr">ResultSet</code> object, the external representation of the retrieved data must be specified. This is done by calling a <code dir="ltr">get</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">()</code> method (the <code dir="ltr">external datatype</code> is implicitly specified by the method name) or by calling the <code dir="ltr">setDataBuffer()</code> method (the external data type is explicitly specified in the method call).</p>
<p>Note that there are more external data types than internal data types. In some cases, a single external data type maps to a single internal data type; in other cases, many external data types map to a single internal data type. The many-to-one mapping provides you with added flexibility.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1011123">External Data Types</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1011118"></a>
<div id="LNCPP20210" class="sect1">
<h2 class="sect1">Internal D<a id="sthref301"></a>ata Types</h2>
<p>The internal (built-in) data types provided by Oracle are listed in this section. A brief summary of internal Oracle data types, including description, code, and maximum size, appears in <a href="#CJAFAGFI">Table 5-1</a>.</p>
<div id="LNCPP20211" class="tblformal">
<p class="titleintable"><a id="sthref302"></a><a id="CJAFAGFI"></a>Table 5-1 Summary <a id="sthref303"></a>of Oracle Internal Data Types</p>
<table class="cellalignment2203" title="Summary of Oracle Internal Data Types" summary="This table shows the various Oracle internal data types and the maximum size in bytes for each one." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t3">Internal Data Type</th>
<th class="cellalignment2204" id="r1c2-t3">Maximum Size</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t3" headers="r1c1-t3">
<pre dir="ltr">BFILE
</pre></td>
<td class="cellalignment2205" headers="r2c1-t3 r1c2-t3">
<p>4 gigabytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t3" headers="r1c1-t3">
<pre dir="ltr">BINARY_DOUBLE
</pre></td>
<td class="cellalignment2205" headers="r3c1-t3 r1c2-t3">
<p>8 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t3" headers="r1c1-t3">
<pre dir="ltr">BINARY_FLOAT
</pre></td>
<td class="cellalignment2205" headers="r4c1-t3 r1c2-t3">
<p>4 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t3" headers="r1c1-t3">
<pre dir="ltr">CHAR
</pre></td>
<td class="cellalignment2205" headers="r5c1-t3 r1c2-t3">
<p>2,000 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t3" headers="r1c1-t3">
<pre dir="ltr">DATE
</pre></td>
<td class="cellalignment2205" headers="r6c1-t3 r1c2-t3">
<p>7 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t3" headers="r1c1-t3">
<pre dir="ltr">INTERVAL DAY TO SECOND REF
</pre></td>
<td class="cellalignment2205" headers="r7c1-t3 r1c2-t3">
<p>11 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t3" headers="r1c1-t3">
<pre dir="ltr">INTERVAL YEAR TO MONTH REF
</pre></td>
<td class="cellalignment2205" headers="r8c1-t3 r1c2-t3">
<p>5 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t3" headers="r1c1-t3">
<pre dir="ltr">LONG
</pre></td>
<td class="cellalignment2205" headers="r9c1-t3 r1c2-t3">
<p>2 gigabytes (2^31-1 bytes)</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t3" headers="r1c1-t3">
<pre dir="ltr">LONG RAW
</pre></td>
<td class="cellalignment2205" headers="r10c1-t3 r1c2-t3">
<p>2 gigabytes (2^31-1 bytes)</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t3" headers="r1c1-t3">
<pre dir="ltr">NCHAR
</pre></td>
<td class="cellalignment2205" headers="r11c1-t3 r1c2-t3">
<p>2,000 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t3" headers="r1c1-t3">
<pre dir="ltr">NUMBER
</pre></td>
<td class="cellalignment2205" headers="r12c1-t3 r1c2-t3">
<p>21 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t3" headers="r1c1-t3">
<pre dir="ltr">NVARCHAR2
</pre></td>
<td class="cellalignment2205" headers="r13c1-t3 r1c2-t3">
<p>32,767 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t3" headers="r1c1-t3">
<pre dir="ltr">RAW
</pre></td>
<td class="cellalignment2205" headers="r14c1-t3 r1c2-t3">
<p>2000 bytes (standard), 32,767 bytes (extended)</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t3" headers="r1c1-t3">
<pre dir="ltr">REF
</pre></td>
<td class="cellalignment2205" headers="r15c1-t3 r1c2-t3">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t3" headers="r1c1-t3">
<pre dir="ltr">BLOB
</pre></td>
<td class="cellalignment2205" headers="r16c1-t3 r1c2-t3">
<p>4 gigabytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t3" headers="r1c1-t3">
<pre dir="ltr">CLOB
</pre></td>
<td class="cellalignment2205" headers="r17c1-t3 r1c2-t3">
<p>4 gigabytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t3" headers="r1c1-t3">
<pre dir="ltr">NCLOB
</pre></td>
<td class="cellalignment2205" headers="r18c1-t3 r1c2-t3">
<p>4 gigabytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t3" headers="r1c1-t3">
<pre dir="ltr">ROWID
</pre></td>
<td class="cellalignment2205" headers="r19c1-t3 r1c2-t3">
<p>10 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t3" headers="r1c1-t3">
<pre dir="ltr">TIMESTAMP
</pre></td>
<td class="cellalignment2205" headers="r20c1-t3 r1c2-t3">
<p>11 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t3" headers="r1c1-t3">
<pre dir="ltr">TIMESTAMP WITH LOCAL TIME ZONE
</pre></td>
<td class="cellalignment2205" headers="r21c1-t3 r1c2-t3">
<p>7 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t3" headers="r1c1-t3">
<pre dir="ltr">TIMESTAMP WITH TIME ZONE
</pre></td>
<td class="cellalignment2205" headers="r22c1-t3 r1c2-t3">
<p>13 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r23c1-t3" headers="r1c1-t3">
<pre dir="ltr">UROWID
</pre></td>
<td class="cellalignment2205" headers="r23c1-t3 r1c2-t3">
<p>4000 bytes</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r24c1-t3" headers="r1c1-t3">
<p>User-defined type (object type, <code dir="ltr">VARRAY</code>, nested table)</p>
</td>
<td class="cellalignment2205" headers="r24c1-t3 r1c2-t3">
<p>Not Applicable</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r25c1-t3" headers="r1c1-t3">
<pre dir="ltr">VARCHAR2
</pre></td>
<td class="cellalignment2205" headers="r25c1-t3 r1c2-t3">
<p>4000 bytes (standard), 32,767 bytes extended</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF30020" href="../SQLRF/sql_elements001.htm#SQLRF30020"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a class="olink CNCPT113" href="../CNCPT/tablecls.htm#CNCPT113"><span class="italic">Oracle Database Concepts</span></a></p>
</li>
</ul>
</div>
<div id="LNCPP20212" class="sect2"><a id="sthref304"></a>
<h3 class="sect2">Character Strings and Byte Arrays</h3>
<p>You can use five Oracle internal data types to specify columns that contain either characters or arrays of bytes: <code dir="ltr">C<a id="sthref305"></a>HAR</code>, <code dir="ltr">VARCH<a id="sthref306"></a>AR2</code>, <code dir="ltr">R<a id="sthref307"></a>AW</code>, <code dir="ltr">LON<a id="sthref308"></a>G</code>, and <code dir="ltr">LONG<a id="sthref309"></a></code> <code dir="ltr">RAW</code>.</p>
<p><code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, and <code dir="ltr">LONG</code> columns normally hold character data. <code dir="ltr">RAW</code> and <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> hold bytes that are not interpreted as characters, for example, pixel values in a bitmapped graphics image. Character data can be transformed when passed through a gateway between networks. For example, character data passed between systems by using different languages (where single characters may be represented by differing numbers of bytes) can be significantly changed in length. Raw data is never converted in this way.</p>
<p>The database designer is responsible for choosing the appropriate Oracle internal data type for each column in a table. You must be aware of the many possible ways that character and byte-array data can be represented and converted between variables in the OCCI program and Oracle database tables.</p>
</div>
<!-- class="sect2" -->
<div id="LNCPP20213" class="sect2"><a id="sthref310"></a>
<h3 class="sect2">Universal Rowid (UROWID)</h3>
<p>The universal rowid (<code dir="ltr">UROWID</code>) is a data type that can store both the logical and the physical rowid of rows in Oracle tables and in foreign tables, such as DB2 tables accessed through a gateway. Logical <code dir="ltr">rowid</code> values are primary key-based logical identifiers for the rows of <a id="sthref311"></a><a id="sthref312"></a>index-organized tables.</p>
<p>To use columns of the <code dir="ltr">UROWID</code> data type, the value of the <code dir="ltr">COMPATIBLE</code> initialization parameter must be set to <code dir="ltr">8.1</code> or higher.</p>
<p>The following <code dir="ltr">OCCI_SQLT</code> types can be bound to universal <code dir="ltr">rowid</code>s:</p>
<ul>
<li>
<p><code dir="ltr">OCCI_SQLT_CHR</code> (<code dir="ltr">VARCHAR2</code>)</p>
</li>
<li>
<p><code dir="ltr">OCCI_SQLT_VCS</code> (<code dir="ltr">VARCHAR</code>)</p>
</li>
<li>
<p><code dir="ltr">OCCI_SQLT_STR</code> (<code dir="ltr">NULL</code> terminated string)</p>
</li>
<li>
<p><code dir="ltr">OCCI_SQLT_LVC</code> (long <code dir="ltr">VARCHAR</code>)</p>
</li>
<li>
<p><code dir="ltr">OCCI_SQLT_AFC</code> (<code dir="ltr">CHAR)</code></p>
</li>
<li>
<p><code dir="ltr">OCCI_SQLT_AVC</code> (<code dir="ltr">CHARZ</code>)</p>
</li>
<li>
<p><code dir="ltr">OCCI_SQLT_VST</code> (string)</p>
</li>
<li>
<p><code dir="ltr">OCCI_SQLT_RDD</code> (<code dir="ltr">ROWID</code> descriptor)</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1011123"></a>
<div id="LNCPP20214" class="sect1">
<h2 class="sect1">Extern<a id="sthref313"></a>al Data Types</h2>
<p>OCCI application communicate with the Oracle database server by using external data types. Specifically, external data types are mapped to C++ data types.</p>
<p><a href="#CJAFHAAD">Table 5-2</a> lists the Oracle external data types, the C++ equivalent (what the Oracle internal data type is usually converted to), and the corresponding OCCI type. Note the following conditions:</p>
<ul>
<li>
<p>In C++ Data Type column, <code dir="ltr">n</code> stands for variable length and depends on program requirements or operating system.</p>
</li>
<li>
<p>The usage of types in <code dir="ltr">Statement</code> class methods is as follows:</p>
<ul>
<li>
<p><code dir="ltr">setDataBuffer()</code> and <code dir="ltr">setDataBufferArray()</code>: Only types of the form <code dir="ltr">OCCI_SQLT_</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code> (for example, <code dir="ltr">OCCI_SQLT_INT</code>) in the <code dir="ltr">occiCommon.h</code> file are permitted.</p>
</li>
<li>
<p><code dir="ltr">registerOutParam()</code>: Only types of the form <code dir="ltr">OCCI</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code> (for example, <code dir="ltr">OCCIDOUBLE</code>, <code dir="ltr">OCCICURSOR</code>, and so on) on the <code dir="ltr">occiCommon.h</code> file are permitted. However, there are some exceptions: <code dir="ltr">OCCIANYDATA</code>, <code dir="ltr">OCCIMETADATA</code>, <code dir="ltr">OCCISTREAM</code>, and <code dir="ltr">OCCIBOOL</code> are not permitted.</p>
</li>
</ul>
</li>
<li>
<p>In the <code dir="ltr">ResultSet</code> class, only types of the form <code dir="ltr">OCCI_SQLT_</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code> (for example, <code dir="ltr">OCCI_SQLT_INT</code>) in the <code dir="ltr">occiCommon.h</code> file are permitted for use in <code dir="ltr">setDataBuffer()</code> and <code dir="ltr">setDataBufferArray()</code> methods.</p>
</li>
<li>
<p>The <code dir="ltr">TIMESTAMP</code> and <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> data types are collectively known as <span class="bold">datetimes</span>. The <code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> and <code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code> are collectively known as <span class="bold">intervals</span>.</p>
</li>
</ul>
<div id="LNCPP20215" class="tblformal">
<p class="titleintable"><a id="sthref314"></a><a id="CJAFHAAD"></a>Table 5-2 External Data Types and Corresponding C++ and OCCI Types</p>
<table class="cellalignment2203" title="External Data Types and Corresponding C++ and OCCI Types" summary="Column 1 lists external datatypes; column 2 provides a brief description; column 3 lists matching C++ type(s); column 4 lists matching OCCI Types." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t5">External Data Type</th>
<th class="cellalignment2204" id="r1c2-t5">C++ Type</th>
<th class="cellalignment2204" id="r1c3-t5">OCCI Type</th>
<th class="cellalignment2204" id="r1c4-t5">Usage Notes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t5" headers="r1c1-t5">
<p>16 bit signed <code dir="ltr">INTEGER</code></p>
</td>
<td class="cellalignment2205" headers="r2c1-t5 r1c2-t5">
<pre dir="ltr">signed short, signed int
</pre></td>
<td class="cellalignment2205" headers="r2c1-t5 r1c3-t5">
<pre dir="ltr">OCCIINT
</pre></td>
<td class="cellalignment2205" headers="r2c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t5" headers="r1c1-t5">
<p>32 bit signed <code dir="ltr">INTEGER</code></p>
</td>
<td class="cellalignment2205" headers="r3c1-t5 r1c2-t5">
<pre dir="ltr">signed int, signed long
</pre></td>
<td class="cellalignment2205" headers="r3c1-t5 r1c3-t5">
<pre dir="ltr">OCCIINT
</pre></td>
<td class="cellalignment2205" headers="r3c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t5" headers="r1c1-t5">
<p>8 bit signed <code dir="ltr">INTEGER</code></p>
</td>
<td class="cellalignment2205" headers="r4c1-t5 r1c2-t5">
<pre dir="ltr">signed char
</pre></td>
<td class="cellalignment2205" headers="r4c1-t5 r1c3-t5">
<pre dir="ltr">OCCIINT
</pre></td>
<td class="cellalignment2205" headers="r4c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">BFILE</code></p>
</td>
<td class="cellalignment2205" headers="r5c1-t5 r1c2-t5">
<pre dir="ltr">Bfile
</pre></td>
<td class="cellalignment2205" headers="r5c1-t5 r1c3-t5">
<pre dir="ltr">OCCIBFILE
</pre></td>
<td class="cellalignment2205" headers="r5c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t5" headers="r1c1-t5">
<p><code dir="ltr">FBFILE</code></p>
</td>
<td class="cellalignment2205" headers="r6c1-t5 r1c2-t5">
<pre dir="ltr">OCILobLocator
</pre></td>
<td class="cellalignment2205" headers="r6c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_FILE
</pre></td>
<td class="cellalignment2205" headers="r6c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t5" headers="r1c1-t5">
<p><code dir="ltr">BLOB</code></p>
</td>
<td class="cellalignment2205" headers="r7c1-t5 r1c2-t5">
<pre dir="ltr">OCILobLocator
</pre></td>
<td class="cellalignment2205" headers="r7c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_BLOB
</pre></td>
<td class="cellalignment2205" headers="r7c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t5" headers="r1c1-t5">
<p><code dir="ltr">BLOB</code></p>
</td>
<td class="cellalignment2205" headers="r8c1-t5 r1c2-t5">
<pre dir="ltr">Blob
</pre></td>
<td class="cellalignment2205" headers="r8c1-t5 r1c3-t5">
<pre dir="ltr">OCCIBLOB
</pre></td>
<td class="cellalignment2205" headers="r8c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t5" headers="r1c1-t5">
<p><code dir="ltr">BOOL</code></p>
</td>
<td class="cellalignment2205" headers="r9c1-t5 r1c2-t5">
<pre dir="ltr">bool
</pre></td>
<td class="cellalignment2205" headers="r9c1-t5 r1c3-t5">
<pre dir="ltr">OCCIBOOL
</pre></td>
<td class="cellalignment2205" headers="r9c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t5" headers="r1c1-t5">
<p><code dir="ltr">BYTES</code></p>
</td>
<td class="cellalignment2205" headers="r10c1-t5 r1c2-t5">
<pre dir="ltr">Bytes
</pre></td>
<td class="cellalignment2205" headers="r10c1-t5 r1c3-t5">
<pre dir="ltr">OCCIBYTES
</pre></td>
<td class="cellalignment2205" headers="r10c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t5" headers="r1c1-t5">
<p><code dir="ltr">CHAR</code></p>
</td>
<td class="cellalignment2205" headers="r11c1-t5 r1c2-t5">
<pre dir="ltr">char[n]
</pre></td>
<td class="cellalignment2205" headers="r11c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_AFC
</pre></td>
<td class="cellalignment2205" headers="r11c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t5" headers="r1c1-t5">
<p><code dir="ltr">CHAR</code></p>
</td>
<td class="cellalignment2205" headers="r12c1-t5 r1c2-t5">
<pre dir="ltr">string
</pre></td>
<td class="cellalignment2205" headers="r12c1-t5 r1c3-t5">
<pre dir="ltr">OCCICHAR
</pre></td>
<td class="cellalignment2205" headers="r12c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t5" headers="r1c1-t5">
<p><code dir="ltr">CLOB</code></p>
</td>
<td class="cellalignment2205" headers="r13c1-t5 r1c2-t5">
<pre dir="ltr">OCILobLocator
</pre></td>
<td class="cellalignment2205" headers="r13c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_CLOB
</pre></td>
<td class="cellalignment2205" headers="r13c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t5" headers="r1c1-t5">
<p><code dir="ltr">CHARZ</code></p>
</td>
<td class="cellalignment2205" headers="r14c1-t5 r1c2-t5">
<pre dir="ltr">char[n+1]
</pre></td>
<td class="cellalignment2205" headers="r14c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_RDD
</pre></td>
<td class="cellalignment2205" headers="r14c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t5" headers="r1c1-t5">
<p><code dir="ltr">CLOB</code></p>
</td>
<td class="cellalignment2205" headers="r15c1-t5 r1c2-t5">
<pre dir="ltr">Clob
</pre></td>
<td class="cellalignment2205" headers="r15c1-t5 r1c3-t5">
<pre dir="ltr">OCCICLOB
</pre></td>
<td class="cellalignment2205" headers="r15c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t5" headers="r1c1-t5">
<p><code dir="ltr">CURSOR</code></p>
</td>
<td class="cellalignment2205" headers="r16c1-t5 r1c2-t5">
<pre dir="ltr">ResultSet
</pre></td>
<td class="cellalignment2205" headers="r16c1-t5 r1c3-t5">
<pre dir="ltr">OCCICURSOR
</pre></td>
<td class="cellalignment2205" headers="r16c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t5" headers="r1c1-t5">
<p><code dir="ltr">DATE</code></p>
</td>
<td class="cellalignment2205" headers="r17c1-t5 r1c2-t5">
<pre dir="ltr">char[7]
</pre></td>
<td class="cellalignment2205" headers="r17c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_DAT
</pre></td>
<td class="cellalignment2205" headers="r17c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t5" headers="r1c1-t5">
<p><code dir="ltr">DATE</code></p>
</td>
<td class="cellalignment2205" headers="r18c1-t5 r1c2-t5">
<pre dir="ltr">Date
</pre></td>
<td class="cellalignment2205" headers="r18c1-t5 r1c3-t5">
<pre dir="ltr">OCCIDATE
</pre></td>
<td class="cellalignment2205" headers="r18c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t5" headers="r1c1-t5">
<p><code dir="ltr">DOUBLE</code></p>
</td>
<td class="cellalignment2205" headers="r19c1-t5 r1c2-t5">
<pre dir="ltr">double
</pre></td>
<td class="cellalignment2205" headers="r19c1-t5 r1c3-t5">
<pre dir="ltr">OCCIDOUBLE
</pre></td>
<td class="cellalignment2205" headers="r19c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t5" headers="r1c1-t5">
<p><code dir="ltr">FLOAT</code></p>
</td>
<td class="cellalignment2205" headers="r20c1-t5 r1c2-t5">
<pre dir="ltr">float, double
</pre></td>
<td class="cellalignment2205" headers="r20c1-t5 r1c3-t5">
<pre dir="ltr">OCCIFLOAT
</pre></td>
<td class="cellalignment2205" headers="r20c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t5" headers="r1c1-t5">
<p><code dir="ltr">FLOAT</code></p>
</td>
<td class="cellalignment2205" headers="r21c1-t5 r1c2-t5">
<pre dir="ltr">float
</pre></td>
<td class="cellalignment2205" headers="r21c1-t5 r1c3-t5">
<pre dir="ltr">OCCIFLOAT
</pre></td>
<td class="cellalignment2205" headers="r21c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t5" headers="r1c1-t5">
<p><code dir="ltr">INT</code></p>
</td>
<td class="cellalignment2205" headers="r22c1-t5 r1c2-t5">
<pre dir="ltr">int
</pre></td>
<td class="cellalignment2205" headers="r22c1-t5 r1c3-t5">
<pre dir="ltr">OCCIINT
</pre></td>
<td class="cellalignment2205" headers="r22c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r23c1-t5" headers="r1c1-t5">
<p><code dir="ltr">INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment2205" headers="r23c1-t5 r1c2-t5">
<pre dir="ltr">char[11]
</pre></td>
<td class="cellalignment2205" headers="r23c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_INTERVAL_DS
</pre></td>
<td class="cellalignment2205" headers="r23c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r24c1-t5" headers="r1c1-t5">
<p><code dir="ltr">INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment2205" headers="r24c1-t5 r1c2-t5">
<pre dir="ltr">char[5]
</pre></td>
<td class="cellalignment2205" headers="r24c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_INTERVAL_YM
</pre></td>
<td class="cellalignment2205" headers="r24c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r25c1-t5" headers="r1c1-t5">
<p><code dir="ltr">INTERVALDS</code></p>
</td>
<td class="cellalignment2205" headers="r25c1-t5 r1c2-t5">
<pre dir="ltr">IntervalDS
</pre></td>
<td class="cellalignment2205" headers="r25c1-t5 r1c3-t5">
<pre dir="ltr">OCCIINTERVALDS
</pre></td>
<td class="cellalignment2205" headers="r25c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r26c1-t5" headers="r1c1-t5">
<p><code dir="ltr">INTERVALYM</code></p>
</td>
<td class="cellalignment2205" headers="r26c1-t5 r1c2-t5">
<pre dir="ltr">IntervalYM
</pre></td>
<td class="cellalignment2205" headers="r26c1-t5 r1c3-t5">
<pre dir="ltr">OCCIINTERVALYM
</pre></td>
<td class="cellalignment2205" headers="r26c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r27c1-t5" headers="r1c1-t5">
<p><code dir="ltr">LONG</code></p>
</td>
<td class="cellalignment2205" headers="r27c1-t5 r1c2-t5">
<pre dir="ltr">char[n]
</pre></td>
<td class="cellalignment2205" headers="r27c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_LNG
</pre></td>
<td class="cellalignment2205" headers="r27c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r28c1-t5" headers="r1c1-t5">
<p><code dir="ltr">LONG RAW</code></p>
</td>
<td class="cellalignment2205" headers="r28c1-t5 r1c2-t5">
<pre dir="ltr">unsigned char[n]
</pre></td>
<td class="cellalignment2205" headers="r28c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_LBI
</pre></td>
<td class="cellalignment2205" headers="r28c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r29c1-t5" headers="r1c1-t5">
<p><code dir="ltr">LONG VARCHAR</code></p>
</td>
<td class="cellalignment2205" headers="r29c1-t5 r1c2-t5">
<pre dir="ltr">char[n+siezeof(integer)]
</pre></td>
<td class="cellalignment2205" headers="r29c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_LVC
</pre></td>
<td class="cellalignment2205" headers="r29c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r30c1-t5" headers="r1c1-t5">
<p><code dir="ltr">LONG VARRAW</code></p>
</td>
<td class="cellalignment2205" headers="r30c1-t5 r1c2-t5">
<pre dir="ltr">unsigned char[n+siezeof(integer)]
</pre></td>
<td class="cellalignment2205" headers="r30c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_LVB
</pre></td>
<td class="cellalignment2205" headers="r30c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r31c1-t5" headers="r1c1-t5">
<p><code dir="ltr">METADATA</code></p>
</td>
<td class="cellalignment2205" headers="r31c1-t5 r1c2-t5">
<pre dir="ltr">MetaData
</pre></td>
<td class="cellalignment2205" headers="r31c1-t5 r1c3-t5">
<pre dir="ltr">OCCIMETADATA
</pre></td>
<td class="cellalignment2205" headers="r31c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r32c1-t5" headers="r1c1-t5">
<p><code dir="ltr">NAMED DATA TYPE</code></p>
</td>
<td class="cellalignment2205" headers="r32c1-t5 r1c2-t5">
<pre dir="ltr">struct
</pre></td>
<td class="cellalignment2205" headers="r32c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_NTY
</pre></td>
<td class="cellalignment2205" headers="r32c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r33c1-t5" headers="r1c1-t5">
<p><code dir="ltr">NATIVE DOUBLE</code></p>
</td>
<td class="cellalignment2205" headers="r33c1-t5 r1c2-t5">
<pre dir="ltr">double
</pre></td>
<td class="cellalignment2205" headers="r33c1-t5 r1c3-t5">
<pre dir="ltr">OCCIBDOUBLE
</pre></td>
<td class="cellalignment2205" headers="r33c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r34c1-t5" headers="r1c1-t5">
<p><code dir="ltr">NATIVE DOUBLE</code></p>
</td>
<td class="cellalignment2205" headers="r34c1-t5 r1c2-t5">
<pre dir="ltr">Bdouble, double
</pre></td>
<td class="cellalignment2205" headers="r34c1-t5 r1c3-t5">
<pre dir="ltr">OCCIBDOUBLE
</pre></td>
<td class="cellalignment2205" headers="r34c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r35c1-t5" headers="r1c1-t5">
<p><code dir="ltr">NATIVE FLOAT</code></p>
</td>
<td class="cellalignment2205" headers="r35c1-t5 r1c2-t5">
<pre dir="ltr">float
</pre></td>
<td class="cellalignment2205" headers="r35c1-t5 r1c3-t5">
<pre dir="ltr">OCCIBFLOAT
</pre></td>
<td class="cellalignment2205" headers="r35c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r36c1-t5" headers="r1c1-t5">
<p><code dir="ltr">NATIVE FLOAT</code></p>
</td>
<td class="cellalignment2205" headers="r36c1-t5 r1c2-t5">
<pre dir="ltr">BFloat, float
</pre></td>
<td class="cellalignment2205" headers="r36c1-t5 r1c3-t5">
<pre dir="ltr">OCCIBFLOAT
</pre></td>
<td class="cellalignment2205" headers="r36c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r37c1-t5" headers="r1c1-t5">
<p>null terminated <code dir="ltr">STRING</code></p>
</td>
<td class="cellalignment2205" headers="r37c1-t5 r1c2-t5">
<pre dir="ltr">char[n+1]
</pre></td>
<td class="cellalignment2205" headers="r37c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_STR
</pre></td>
<td class="cellalignment2205" headers="r37c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r38c1-t5" headers="r1c1-t5">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment2205" headers="r38c1-t5 r1c2-t5">
<pre dir="ltr">unsigned char[21]
</pre></td>
<td class="cellalignment2205" headers="r38c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_NUM
</pre></td>
<td class="cellalignment2205" headers="r38c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r39c1-t5" headers="r1c1-t5">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment2205" headers="r39c1-t5 r1c2-t5">
<pre dir="ltr">Number
</pre></td>
<td class="cellalignment2205" headers="r39c1-t5 r1c3-t5">
<pre dir="ltr">OCCINUMBER
</pre></td>
<td class="cellalignment2205" headers="r39c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r40c1-t5" headers="r1c1-t5">
<p><code dir="ltr">POBJECT</code></p>
</td>
<td class="cellalignment2205" headers="r40c1-t5 r1c2-t5">
<p>User defined types generated by OTT utility.</p>
</td>
<td class="cellalignment2205" headers="r40c1-t5 r1c3-t5">
<pre dir="ltr">OCCIPOBJECT
</pre></td>
<td class="cellalignment2205" headers="r40c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r41c1-t5" headers="r1c1-t5">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment2205" headers="r41c1-t5 r1c2-t5">
<pre dir="ltr">unsigned char[n]
</pre></td>
<td class="cellalignment2205" headers="r41c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_BIN
</pre></td>
<td class="cellalignment2205" headers="r41c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r42c1-t5" headers="r1c1-t5">
<p><code dir="ltr">REF</code></p>
</td>
<td class="cellalignment2205" headers="r42c1-t5 r1c2-t5">
<pre dir="ltr">OCIRef
</pre></td>
<td class="cellalignment2205" headers="r42c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_REF
</pre></td>
<td class="cellalignment2205" headers="r42c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r43c1-t5" headers="r1c1-t5">
<p><code dir="ltr">REF</code></p>
</td>
<td class="cellalignment2205" headers="r43c1-t5 r1c2-t5">
<pre dir="ltr">Ref
</pre></td>
<td class="cellalignment2205" headers="r43c1-t5 r1c3-t5">
<pre dir="ltr">OCCIREF
</pre></td>
<td class="cellalignment2205" headers="r43c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r44c1-t5" headers="r1c1-t5">
<p><code dir="ltr">REFANY</code></p>
</td>
<td class="cellalignment2205" headers="r44c1-t5 r1c2-t5">
<pre dir="ltr">RefAny
</pre></td>
<td class="cellalignment2205" headers="r44c1-t5 r1c3-t5">
<pre dir="ltr">OCCIREFANY
</pre></td>
<td class="cellalignment2205" headers="r44c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r45c1-t5" headers="r1c1-t5">
<p><code dir="ltr">ROWID</code></p>
</td>
<td class="cellalignment2205" headers="r45c1-t5 r1c2-t5">
<pre dir="ltr">OCIRowid
</pre></td>
<td class="cellalignment2205" headers="r45c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_RID
</pre></td>
<td class="cellalignment2205" headers="r45c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r46c1-t5" headers="r1c1-t5">
<p><code dir="ltr">ROWID</code></p>
</td>
<td class="cellalignment2205" headers="r46c1-t5 r1c2-t5">
<pre dir="ltr">Bytes
</pre></td>
<td class="cellalignment2205" headers="r46c1-t5 r1c3-t5">
<pre dir="ltr">OCCIROWID
</pre></td>
<td class="cellalignment2205" headers="r46c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r47c1-t5" headers="r1c1-t5">
<p><code dir="ltr">ROWID</code> descriptor</p>
</td>
<td class="cellalignment2205" headers="r47c1-t5 r1c2-t5">
<pre dir="ltr">OCIRowid
</pre></td>
<td class="cellalignment2205" headers="r47c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_RDD
</pre></td>
<td class="cellalignment2205" headers="r47c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r48c1-t5" headers="r1c1-t5">
<p><code dir="ltr">STRING</code></p>
</td>
<td class="cellalignment2205" headers="r48c1-t5 r1c2-t5">
<pre dir="ltr">STL string
</pre></td>
<td class="cellalignment2205" headers="r48c1-t5 r1c3-t5">
<pre dir="ltr">OCCISTRING
</pre></td>
<td class="cellalignment2205" headers="r48c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r49c1-t5" headers="r1c1-t5">
<p><code dir="ltr">TIMESTAMP</code></p>
</td>
<td class="cellalignment2205" headers="r49c1-t5 r1c2-t5">
<pre dir="ltr">char[11]
</pre></td>
<td class="cellalignment2205" headers="r49c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_TIMESTAMP
</pre></td>
<td class="cellalignment2205" headers="r49c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r50c1-t5" headers="r1c1-t5">
<p><code dir="ltr">TIMESTAMP</code></p>
</td>
<td class="cellalignment2205" headers="r50c1-t5 r1c2-t5">
<pre dir="ltr">Timestamp
</pre></td>
<td class="cellalignment2205" headers="r50c1-t5 r1c3-t5">
<pre dir="ltr">OCCITIMESTAMP
</pre></td>
<td class="cellalignment2205" headers="r50c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r51c1-t5" headers="r1c1-t5">
<p><code dir="ltr">TIMESTAMP WITH LOCAL TIME ZONE</code></p>
</td>
<td class="cellalignment2205" headers="r51c1-t5 r1c2-t5">
<pre dir="ltr">char[7]
</pre></td>
<td class="cellalignment2205" headers="r51c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_TIMESTAMP_LTZ
</pre></td>
<td class="cellalignment2205" headers="r51c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r52c1-t5" headers="r1c1-t5">
<p><code dir="ltr">TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment2205" headers="r52c1-t5 r1c2-t5">
<pre dir="ltr">char[13]
</pre></td>
<td class="cellalignment2205" headers="r52c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_TIMESTAMP_TZ
</pre></td>
<td class="cellalignment2205" headers="r52c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r53c1-t5" headers="r1c1-t5">
<p><code dir="ltr">UNSIGNED INT</code></p>
</td>
<td class="cellalignment2205" headers="r53c1-t5 r1c2-t5">
<pre dir="ltr">unsigned int
</pre></td>
<td class="cellalignment2205" headers="r53c1-t5 r1c3-t5">
<pre dir="ltr">OCCIUNSIGNED_INT
</pre></td>
<td class="cellalignment2205" headers="r53c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r54c1-t5" headers="r1c1-t5">
<p><code dir="ltr">UNSIGNED INT</code></p>
</td>
<td class="cellalignment2205" headers="r54c1-t5 r1c2-t5">
<pre dir="ltr">unsigned int
</pre></td>
<td class="cellalignment2205" headers="r54c1-t5 r1c3-t5">
<pre dir="ltr">OCCIUNSIGNED_INT
</pre></td>
<td class="cellalignment2205" headers="r54c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r55c1-t5" headers="r1c1-t5">
<p><code dir="ltr">VARCHAR</code></p>
</td>
<td class="cellalignment2205" headers="r55c1-t5 r1c2-t5">
<pre dir="ltr">char[n+sizeof( short integer)]
</pre></td>
<td class="cellalignment2205" headers="r55c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_VCS
</pre></td>
<td class="cellalignment2205" headers="r55c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r56c1-t5" headers="r1c1-t5">
<p><code dir="ltr">VARCHAR2</code></p>
</td>
<td class="cellalignment2205" headers="r56c1-t5 r1c2-t5">
<pre dir="ltr">char[n]
</pre></td>
<td class="cellalignment2205" headers="r56c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_CHR
</pre></td>
<td class="cellalignment2205" headers="r56c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r57c1-t5" headers="r1c1-t5">
<p><code dir="ltr">VARNUM</code></p>
</td>
<td class="cellalignment2205" headers="r57c1-t5 r1c2-t5">
<pre dir="ltr">char[22]
</pre></td>
<td class="cellalignment2205" headers="r57c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_VNU
</pre></td>
<td class="cellalignment2205" headers="r57c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r58c1-t5" headers="r1c1-t5">
<p><code dir="ltr">VARRAW</code></p>
</td>
<td class="cellalignment2205" headers="r58c1-t5 r1c2-t5">
<pre dir="ltr">unsigned char[n+sizeof( short integer)]
</pre></td>
<td class="cellalignment2205" headers="r58c1-t5 r1c3-t5">
<pre dir="ltr">OCCI_SQLT_VBI
</pre></td>
<td class="cellalignment2205" headers="r58c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">setDataBuffer()</code>, <code dir="ltr">setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r59c1-t5" headers="r1c1-t5">
<p><code dir="ltr">VECTOR</code></p>
</td>
<td class="cellalignment2205" headers="r59c1-t5 r1c2-t5">
<pre dir="ltr">STL vector
</pre></td>
<td class="cellalignment2205" headers="r59c1-t5 r1c3-t5">
<pre dir="ltr">OCCIVECTOR
</pre></td>
<td class="cellalignment2205" headers="r59c1-t5 r1c4-t5">
<p>Use with <code dir="ltr">regiserOutParam()</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP20216" class="sect2"><a id="sthref315"></a>
<h3 class="sect2">Description of Exter<a id="sthref316"></a>nal Data Types</h3>
<p>This section provides a description for each of the external data types.</p>
<div id="LNCPP20217" class="sect3"><a id="sthref317"></a>
<h4 class="sect3">BFILE<a id="sthref318"></a><a id="sthref319"></a></h4>
<p>The external data type <code dir="ltr">BFILE</code> allows read-only byte stream access to large files on the file system of the database server. A <code dir="ltr">BFILE</code> is a large binary data object stored in operating system files outside database tablespaces. These files use reference semantics. The Oracle server can access a <code dir="ltr">BFILE</code> provided the underlying server operating system supports stream-mode access to these operating system files.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20218" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref320"></a>
<h4 class="sect3">BDOUBLE</h4>
<p>The <code dir="ltr">BDouble</code> interface in OCCI encapsulates the native double data and the <code dir="ltr">NULL</code> information of a column or object attribute of the type <code dir="ltr">binary_double</code>. The OCCI methods in <a href="reference004.htm#CACFDEFG">AnyData Class</a>, <a href="reference027.htm#i1079050">ResultSet Class</a> and <a href="reference030.htm#i1079052">Statement Class</a>, and the global methods that take these class objects as parameters, use the following definition for the <code dir="ltr">BDOUBLE</code> data type:</p>
<div id="LNCPP20219" class="example">
<p class="titleinexample"><a id="sthref321"></a>Example 5-1 Definition of the BDOUBLE Data Type</p>
<pre dir="ltr">struct BDouble 
{ 
  double value; 
  bool isNull; 
 
 BDouble() 
 { 
    isNull = false; 
    value = 0.; 
 } 
}; 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="LNCPP20220" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref322"></a>
<h4 class="sect3">BFLOAT</h4>
<p>The <code dir="ltr">BFloat</code> interface in OCCI encapsulates the native float data and the <code dir="ltr">NULL</code> information of a column or object attribute of the type <code dir="ltr">binary_float</code>. The OCCI methods in <a href="reference004.htm#CACFDEFG">AnyData Class</a>, <a href="reference027.htm#i1079050">ResultSet Class</a> and <a href="reference030.htm#i1079052">Statement Class</a>, and the global methods that take these class objects as parameters, use the following definition for the <code dir="ltr">BFLOAT</code> data type:</p>
<div id="LNCPP20221" class="example">
<p class="titleinexample"><a id="sthref323"></a>Example 5-2 Definition of the BFLOAT Data Type</p>
<pre dir="ltr">struct BFloat 
{ 
  float value; 
  bool isNull; 
 
 BFloat() 
 { 
    isNull = false; 
    value = 0.; 
 } 
}; 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="LNCPP20222" class="sect3"><a id="sthref324"></a>
<h4 class="sect3">B<a id="sthref325"></a><a id="sthref326"></a>LOB</h4>
<p>The external data type <code dir="ltr">BLOB</code> stores unstructured binary large objects. A <code dir="ltr">BLOB</code> can be thought of as a bitstream with no character set semantics. <code dir="ltr">BLOB</code>s can store up to <code dir="ltr">4</code> gigabytes of binary data.</p>
<p><code dir="ltr">BLOB</code> data types have full transactional support. Changes made through OCCI participate fully in the transaction. <code dir="ltr">BLOB</code> value manipulations can be committed or rolled back. You cannot save a <code dir="ltr">BLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20223" class="sect3"><a id="sthref327"></a>
<h4 class="sect3">CHA<a id="sthref328"></a><a id="sthref329"></a>R</h4>
<p>The external data type <code dir="ltr">CHAR</code> is a string of characters, with a maximum length of <code dir="ltr">2000</code> characters. Character strings are compared by using blank-padded comparison semantics.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20224" class="sect3"><a id="sthref330"></a>
<h4 class="sect3">CHAR<a id="sthref331"></a>Z</h4>
<p>The external data type <code dir="ltr">CHARZ</code> is similar to the <code dir="ltr">CHAR</code> data type, except that the string must be <code dir="ltr">NULL</code> terminated on input, and Oracle places a <code dir="ltr">NULL</code> terminator character at the end of the string on output. The <code dir="ltr">NULL</code> terminator serves only to delimit the string on input or output. It is not part of the data in the table.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20225" class="sect3"><a id="sthref332"></a>
<h4 class="sect3">CLO<a id="sthref333"></a><a id="sthref334"></a>B</h4>
<p>The external data type <code dir="ltr">CLOB</code> stores fixed-width or varying-width character data. A <code dir="ltr">CLOB</code> can store up to <code dir="ltr">4</code> gigabytes of character data. <code dir="ltr">CLOB</code>s have full transactional support. Changes made through OCCI participate fully in the transaction. <code dir="ltr">CLOB</code> value manipulations can be committed or rolled back. You cannot save a <code dir="ltr">CLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20226" class="sect3"><a id="sthref335"></a>
<h4 class="sect3">DA<a id="sthref336"></a><a id="sthref337"></a>TE</h4>
<p>The external data type <code dir="ltr">DATE</code> can update, insert, or retrieve a date value using the Oracle internal seven byte date binary format, as listed in <a href="#g1032325">Table 5-3</a>:</p>
<div id="LNCPP20227" class="tblformalwide">
<p class="titleintable"><a id="sthref338"></a><a id="g1032325"></a>Table 5-3 Format of the DATE Data Type</p>
<table class="cellalignment2206" title="Format of the DATE Data Type" summary="This table shows examples of the the format of DATE data types. The first column lists the example date and the remaining columns indicate the byte sequence 1 through 7 that represent century, year, month, day, hour, minute, and second, respectively." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t6">Example</th>
<th class="cellalignment2204" id="r1c2-t6">Byte 1: Century</th>
<th class="cellalignment2204" id="r1c3-t6">Byte 2: Year</th>
<th class="cellalignment2204" id="r1c4-t6">Byte 3: Month</th>
<th class="cellalignment2204" id="r1c5-t6">Byte 4: Day</th>
<th class="cellalignment2204" id="r1c6-t6">Byte 5: Hour</th>
<th class="cellalignment2204" id="r1c7-t6">Byte 6: Minute</th>
<th class="cellalignment2204" id="r1c8-t6">Byte 7: Second</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t6" headers="r1c1-t6">
<p><span class="bold">1:&nbsp;</span>01-JUN-2000, 3:17PM</p>
</td>
<td class="cellalignment2205" headers="r2c1-t6 r1c2-t6">
<p>120</p>
</td>
<td class="cellalignment2205" headers="r2c1-t6 r1c3-t6">
<p>100</p>
</td>
<td class="cellalignment2205" headers="r2c1-t6 r1c4-t6">
<p>6</p>
</td>
<td class="cellalignment2205" headers="r2c1-t6 r1c5-t6">
<p>1</p>
</td>
<td class="cellalignment2205" headers="r2c1-t6 r1c6-t6">
<p>16</p>
</td>
<td class="cellalignment2205" headers="r2c1-t6 r1c7-t6">
<p>18</p>
</td>
<td class="cellalignment2205" headers="r2c1-t6 r1c8-t6">
<p>1</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t6" headers="r1c1-t6">
<p><span class="bold">2:&nbsp;</span>01-JAN-4712 BCE</p>
</td>
<td class="cellalignment2205" headers="r3c1-t6 r1c2-t6">
<p>53</p>
</td>
<td class="cellalignment2205" headers="r3c1-t6 r1c3-t6">
<p>88</p>
</td>
<td class="cellalignment2205" headers="r3c1-t6 r1c4-t6">
<p>1</p>
</td>
<td class="cellalignment2205" headers="r3c1-t6 r1c5-t6">
<p>1</p>
</td>
<td class="cellalignment2205" headers="r3c1-t6 r1c6-t6">
<p>1</p>
</td>
<td class="cellalignment2205" headers="r3c1-t6 r1c7-t6">
<p>1</p>
</td>
<td class="cellalignment2205" headers="r3c1-t6 r1c8-t6">
<p>1</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" -->
<div id="LNCPP20228" class="sect4"><a id="sthref339"></a>
<h5 class="sect4">Example 1, 01-JUN-2000, 3:17PM:</h5>
<ul>
<li>
<p>The century and year bytes (1 and 2) are in excess-<code dir="ltr">100</code> notation. Dates BCE (Before Common Era) are less than <code dir="ltr">100</code>. Dates in the Common Era (CE), 0 and after, are greater than <code dir="ltr">100</code>. For dates 0 and after, the first digit of both bytes 1 and 2 signifies that it is of the CE.</p>
</li>
<li>
<p>For byte 1, the second and third digits of the century are calculated as the year (an integer) divided by 100. With integer division, the fractional portion is discarded. The following calculation is for the year 1992: <code dir="ltr">1992 / 100 = 19</code>.</p>
</li>
<li>
<p>For byte 1, <code dir="ltr">119</code> represents the twentieth century, 1900 to 1999. A value of <code dir="ltr">120</code> would represent the twenty-first century, 2000 to 2099.</p>
</li>
<li>
<p>For byte 2, the second and third digits of the year are calculated as the year modulo 100: <code dir="ltr">1992 % 100 = 92</code>.</p>
</li>
<li>
<p>For byte 2, <code dir="ltr">192</code> represents the ninety-second year of the current century. A value of <code dir="ltr">100</code> would represent the zeroth year of the current century.</p>
</li>
<li>
<p>The year 2000 would yield <code dir="ltr">120</code> for byte 1 and <code dir="ltr">100</code> for byte 2.</p>
</li>
<li>
<p>For bytes 3 through 7, valid dates begin at 01-JAN of the year. The month byte ranges from <code dir="ltr">1</code> to <code dir="ltr">12</code>, the date byte ranges from <code dir="ltr">1</code> to <code dir="ltr">31</code>, the hour byte ranges from <code dir="ltr">1</code> to <code dir="ltr">24</code>, the minute byte ranges from <code dir="ltr">1</code> to <code dir="ltr">60</code>, and the second byte ranges from <code dir="ltr">1</code> to <code dir="ltr">60</code>.</p>
</li>
</ul>
</div>
<!-- class="sect4" -->
<div id="LNCPP20229" class="sect4"><a id="sthref340"></a>
<h5 class="sect4">Example 2, 01-JAN-4712 BCE:</h5>
<ul>
<li>
<p>For years before 0 CE, centuries and years are represented by the difference between 100 and the number.</p>
</li>
<li>
<p>For byte 1, 01-JAN-4712 BCE is century <code dir="ltr">53:</code> <code dir="ltr">100 - 47 = 53.</code></p>
</li>
<li>
<p>For byte 2, 01-JAN-4712 BCE is year <code dir="ltr">88</code>: <code dir="ltr">100 - 12 = 88</code>.</p>
</li>
</ul>
<p>If no time is specified for a date, the time defaults to midnight and bytes 5 through 6 are set to <code dir="ltr">1</code>: <code dir="ltr">1</code>, <code dir="ltr">1</code>, <code dir="ltr">1</code>.</p>
<p>When you enter a date in binary format by using the external data type <code dir="ltr">DATE</code>, the database does not perform consistency or range checking. All data in this format must be validated before input.</p>
<p>There is little need for the external data type <code dir="ltr">DATE</code>. It is more convenient to convert <code dir="ltr">DATE</code> values to a character format, because most programs deal with dates in a character format, such as <code dir="ltr">DD-MON-YYYY</code>. Instead, you may use the <code dir="ltr">Date</code> data type.</p>
<p>When a <code dir="ltr">DATE</code> column is converted to a character string in your program, it is returned in the default format mask for your session, or as specified in the <code dir="ltr">INIT.ORA</code> file.</p>
<p>This data type is different from <code dir="ltr">OCCI DATE</code> which corresponds to a C++ <code dir="ltr">Date</code> data type.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="LNCPP20230" class="sect3"><a id="sthref341"></a>
<h4 class="sect3">FL<a id="sthref342"></a><a id="sthref343"></a>OAT</h4>
<p>The external data type <code dir="ltr">FLOAT</code> processes numbers with fractional parts. The number is represented in the host system&#39;s floating-point format. Normally, the length is 4 or 8 bytes.</p>
<p>The internal format of an Oracle number is decimal. Most floating-point implementations are binary. Oracle, therefore, represents numbers with greater precision than floating-point representations.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20231" class="sect3"><a id="sthref344"></a>
<h4 class="sect3">INTEG<a id="sthref345"></a><a id="sthref346"></a>ER</h4>
<p>The external data type <code dir="ltr">INTEGER</code> is used for converting numbers. An external integer is a signed binary number. Its size is operating system-dependent. If the number being returned from Oracle is not an integer, then the fractional part is discarded, and no error is returned. If the number returned exceeds the capacity of a signed integer for the system, then Oracle returns an overflow on conversion error.</p>
<p>A rounding error may occur when converting between <code dir="ltr">FLOAT</code> and <code dir="ltr">NUMBER</code>. Using a <code dir="ltr">FLOAT</code> as a bind variable in a query may return an error. You can work around this by converting the <code dir="ltr">FLOAT</code> to a string and using the OCCI type <code dir="ltr">OCCI_SQLT_CHR</code> or the OCCI type <code dir="ltr">OCCI_SQLT_STR</code> for the operation.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20232" class="sect3"><a id="sthref347"></a>
<h4 class="sect3">INT<a id="sthref348"></a>ERVAL D<a id="sthref349"></a>AY TO SECOND</h4>
<p>The external data type <code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code> stores the difference between two datetime values in terms of days, hours, minutes, and seconds. Specify this data type as follows:</p>
<pre dir="ltr">INTERVAL DAY [(<span class="italic">day_precision</span>)] 
   TO SECOND [(<span class="italic">fractional_seconds_precision</span>)]
</pre>
<p>This example uses the following placeholders:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">day_precision</span></code>: Number of digits in the <code dir="ltr">DAY</code> datetime field. Accepted values are <code dir="ltr">1</code> to <code dir="ltr">9</code>. The default is <code dir="ltr">2</code>.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">fractional_seconds_precision</span></code>: Number of digits in the fractional part of the <code dir="ltr">SECOND</code> datetime field. Accepted values are <code dir="ltr">0</code> to <code dir="ltr">9</code>. The default is <code dir="ltr">6</code>.</p>
</li>
</ul>
<p>To specify an <code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code> literal with nondefault day and second precision, you must specify the precisions in the literal. For example, you might specify an interval of <code dir="ltr">100</code> days, <code dir="ltr">10</code> hours, <code dir="ltr">20</code> minutes, <code dir="ltr">42</code> seconds, and <code dir="ltr">22</code> hundredths of a second as follows:</p>
<pre dir="ltr">INTERVAL &#39;100 10:20:42.22&#39; DAY(3) TO SECOND(2)
</pre>
<p>You can also use abbreviated forms of the <code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code> literal. For example:</p>
<ul>
<li>
<p><code dir="ltr">INTERVAL &#39;90&#39; MINUTE</code> maps to <code dir="ltr">INTERVAL &#39;00 00:90:00.00&#39; DAY TO SECOND(2)</code></p>
</li>
<li>
<p><code dir="ltr">INTERVAL &#39;30:30&#39; HOUR TO MINUTE</code> maps to <code dir="ltr">INTERVAL &#39;00 30:30:00.00&#39; DAY TO SECOND(2)</code></p>
</li>
<li>
<p><code dir="ltr">INTERVAL &#39;30&#39; SECOND(2,2)</code> maps to <code dir="ltr">INTERVAL &#39;00 00:00:30.00&#39; DAY TO SECOND(2)</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="LNCPP20233" class="sect3"><a id="sthref350"></a>
<h4 class="sect3">INTERVA<a id="sthref351"></a><a id="sthref352"></a>L YEAR TO MONTH</h4>
<p>The external data type <code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> stores the difference between two datetime values by using the <code dir="ltr">YEAR</code> and <code dir="ltr">MONTH</code> datetime fields. Specify <code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> as follows:</p>
<pre dir="ltr">INTERVAL YEAR [(<span class="italic">year_precision</span>)] TO MONTH
</pre>
<p>The placeholder <code dir="ltr"><span class="codeinlineitalic">year_precision</span></code> is the number of digits in the <code dir="ltr">YEAR</code> datetime field. The default value of <code dir="ltr"><span class="codeinlineitalic">year_precision</span></code> is <code dir="ltr">2</code>. To specify an <code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> literal with a nondefault <code dir="ltr"><span class="codeinlineitalic">year_precision</span></code>, you must specify the precision in the literal. For example, the following <code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> literal indicates an interval of <code dir="ltr">123</code> years, <code dir="ltr">2</code> months:</p>
<pre dir="ltr">INTERVAL &#39;123-2&#39; YEAR(3) TO MONTH
</pre>
<p>You can also use abbreviated forms of the <code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code> literal. For example,</p>
<ul>
<li>
<p><code dir="ltr">INTERVAL &#39;10&#39; MONTH</code> maps <code dir="ltr">to INTERVAL &#39;0-10&#39; YEAR TO MONTH</code></p>
</li>
<li>
<p><code dir="ltr">INTERVAL &#39;123&#39; YEAR(3)</code> maps <code dir="ltr">to INTERVAL &#39;123-0&#39; YEAR(3) TO MONTH</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="LNCPP20234" class="sect3"><a id="sthref353"></a>
<h4 class="sect3">LO<a id="sthref354"></a><a id="sthref355"></a>NG</h4>
<p>The external data type <code dir="ltr">LONG</code> stores character strings longer than 4000 bytes and up to <code dir="ltr">2</code> gigabytes in a column of data type <code dir="ltr">LONG</code>. Columns of this type are only used for storage and retrieval of long strings. They cannot be used in methods, expressions, or <code dir="ltr">WHERE</code> clauses. <code dir="ltr">LONG</code> column values are generally converted to and from character strings.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20235" class="sect3"><a id="sthref356"></a>
<h4 class="sect3">LONG R<a id="sthref357"></a><a id="sthref358"></a>AW</h4>
<p>The external data type <code dir="ltr">LONG RAW</code> is similar to the external data type <code dir="ltr">RAW</code>, except that it stores up to <code dir="ltr">2</code> gigabytes.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20236" class="sect3"><a id="sthref359"></a>
<h4 class="sect3">LONG <a id="sthref360"></a><a id="sthref361"></a>VARCHAR</h4>
<p>The external data type <code dir="ltr">LONG VARCHAR</code> stores data from and into an Oracle <code dir="ltr">LONG</code> column. The first four bytes contain the length of the item. The maximum length of a <code dir="ltr">LONG</code> <code dir="ltr">VARCHAR</code> is <code dir="ltr">2</code> gigabytes.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20237" class="sect3"><a id="sthref362"></a>
<h4 class="sect3">LONG V<a id="sthref363"></a><a id="sthref364"></a>ARRAW</h4>
<p>The external data type <code dir="ltr">LONG VARRAW</code> store data from and into an Oracle <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> column. The length is contained in the first four bytes. The maximum length is <code dir="ltr">2</code> gigabytes.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20238" class="sect3"><a id="sthref365"></a>
<h4 class="sect3">NC<a id="sthref366"></a><a id="sthref367"></a>LOB</h4>
<p>The external data type <code dir="ltr">NCLOB</code> is a national character version of a <code dir="ltr">CLOB</code>. It stores fixed-width, multibyte national character set character (<code dir="ltr">NCHAR</code>), or varying-width character set data. An <code dir="ltr">NCLOB</code> can store up to 4 gigabytes of character text data.</p>
<p><code dir="ltr">NCLOB</code>s have full transactional support. Changes made through OCCI participate fully in the transaction. <code dir="ltr">NCLOB</code> value manipulations can be committed or rolled back. You cannot save an <code dir="ltr">NCLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
<p>You cannot create an object with <code dir="ltr">NCLOB</code> attributes, but you can specify <code dir="ltr">NCLOB</code> parameters in methods.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20239" class="sect3"><a id="sthref368"></a>
<h4 class="sect3">NUM<a id="sthref369"></a><a id="sthref370"></a>BER</h4>
<p>You should not have to use <code dir="ltr">NUMBER</code> as an external data type. If you do use it, Oracle returns numeric values in its internal <code dir="ltr">21</code>-byte binary format and expects this format on input. The following discussion is included for completeness only.</p>
<p>Oracle stores values of the <code dir="ltr">NUMBER</code> data type in a variable-length format. The first byte is the exponent and is followed by <code dir="ltr">1</code> to <code dir="ltr">20</code> mantissa bytes. The high-order bit of the exponent byte is the sign bit; it is set for positive numbers and it is cleared for negative numbers. The lower <code dir="ltr">7</code> bits represent the exponent, which is a base-<code dir="ltr">100</code> digit with an offset of <code dir="ltr">65</code>.</p>
<p>To calculate the decimal exponent, add <code dir="ltr">65</code> to the base-<code dir="ltr">100</code> exponent and add another <code dir="ltr">128</code> if the number is positive. If the number is negative, you do the same, but subsequently the bits are inverted. For example, <code dir="ltr">-5</code> has a base-<code dir="ltr">100</code> exponent <code dir="ltr">=</code> <code dir="ltr">62 (0x3e)</code>. The decimal exponent is thus <code dir="ltr">(~0x3e)-128-65 = 0xc1-128-65 = 193-128-65 = 0</code>.</p>
<p>Each mantissa byte is a base-<code dir="ltr">100</code> digit, in the range <code dir="ltr">1</code> to <code dir="ltr">100</code>. For positive numbers, the digit has <code dir="ltr">1</code> added to it. So, the mantissa digit for the value <code dir="ltr">5</code> is <code dir="ltr">6</code>. For negative numbers, instead of adding 1, the digit is subtracted from <code dir="ltr">101</code>. So, the mantissa digit for the number <code dir="ltr">-5</code> is: <code dir="ltr">101-5 = 96</code>. Negative numbers have a byte containing <code dir="ltr">102</code> appended to the data bytes. However, negative numbers that have <code dir="ltr">20</code> mantissa bytes do not have the trailing <code dir="ltr">102</code> byte. Because the mantissa digits are stored in base-<code dir="ltr">100,</code> each byte can represent two decimal digits. The mantissa is normalized; leading zeroes are not stored.</p>
<p>Up to <code dir="ltr">20</code> data bytes can represent the mantissa. However, only <code dir="ltr">19</code> are guaranteed to be accurate. The <code dir="ltr">19</code> data bytes, each representing a base-<code dir="ltr">100</code> digit, yield a maximum precision of <code dir="ltr">38</code> digits for an internal data type <code dir="ltr">NUMBER</code>.</p>
<p>Note that this data type is different from <code dir="ltr">OCCI NUMBER</code> which corresponds to a C++ <code dir="ltr">Number</code> data type.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20240" class="sect3"><a id="sthref371"></a>
<h4 class="sect3">OC<a id="sthref372"></a>CI BFILE</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference006.htm#i1155597">Bfile Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20241" class="sect3"><a id="sthref373"></a>
<h4 class="sect3">OCC<a id="sthref374"></a>I BLOB</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference007.htm#i1119032">Blob Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20242" class="sect3"><a id="sthref375"></a>
<h4 class="sect3">OCCI B<a id="sthref376"></a>YTES</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference008.htm#i1119060">Bytes Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20243" class="sect3"><a id="sthref377"></a>
<h4 class="sect3">OCCI CL<a id="sthref378"></a>OB</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference009.htm#i1118691">Clob Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20244" class="sect3"><a id="sthref379"></a>
<h4 class="sect3">OCCI D<a id="sthref380"></a>ATE</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference013.htm#i1079044">Date Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20245" class="sect3"><a id="sthref381"></a>
<h4 class="sect3">OCCI <a id="sthref382"></a>INTERVALDS</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference015.htm#i1066767">IntervalDS Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20246" class="sect3"><a id="sthref383"></a>
<h4 class="sect3">OC<a id="sthref384"></a>CI INTERVALYM</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference016.htm#i1080017">IntervalYM Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20247" class="sect3"><a id="sthref385"></a>
<h4 class="sect3"><a id="sthref386"></a>OCCI NUMBER</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference022.htm#i1018892">Number Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20248" class="sect3"><a id="sthref387"></a>
<h4 class="sect3">OCCI<a id="sthref388"></a> POBJECT</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference023.htm#i1039640">PObject Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20249" class="sect3"><a id="sthref389"></a>
<h4 class="sect3">OCCI R<a id="sthref390"></a>EF</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference025.htm#i1079048">Ref Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20250" class="sect3"><a id="sthref391"></a>
<h4 class="sect3">OCCI RE<a id="sthref392"></a><a id="sthref393"></a>FANY</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference026.htm#i1109327">RefAny Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20251" class="sect3"><a id="sthref394"></a>
<h4 class="sect3">OCCI STRING</h4>
<p>The external data type <code dir="ltr">OCCI STRING</code> corresponds to an <code dir="ltr">STL string</code>.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20252" class="sect3"><a id="sthref395"></a>
<h4 class="sect3">OC<a id="sthref396"></a>CI TIMESTAMP</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, &#34;OCCI Application Programming Interface&#34;</a>, <a href="reference033.htm#i1118557">Timestamp Class</a></div>
</div>
<!-- class="sect3" -->
<div id="LNCPP20253" class="sect3"><a id="sthref397"></a>
<h4 class="sect3">OCCI V<a id="sthref398"></a>ECTOR</h4>
<p>The external data type <code dir="ltr">OCCI VECTOR</code> is used to represent collections, for example, a nested table or <code dir="ltr">VARRAY</code>. <code dir="ltr">CREATE TYPE num_type as VARRAY OF NUMBER(10)</code> can be represented in a C++ application as <code dir="ltr">vector&lt;int&gt;</code>, <code dir="ltr">vector&lt;Number&gt;</code>, and so on.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20254" class="sect3"><a id="sthref399"></a>
<h4 class="sect3"><a id="sthref400"></a>RA<a id="sthref401"></a><a id="sthref402"></a>W</h4>
<p>The external data type <code dir="ltr">RAW</code> is used for binary data or byte strings that are not to be interpreted or processed by Oracle. <code dir="ltr">RAW</code> could be used, for example, for graphics character sequences. The maximum length of a <code dir="ltr">RAW</code> column is 2000 bytes. If the <code dir="ltr">init.ora</code> parameter <code dir="ltr">max_string_size = standard</code> (default value), the maximum length of a <code dir="ltr">RAW</code> can be 2000 bytes. If the <code dir="ltr">init.ora</code> parameter <code dir="ltr">max_string_size = extended</code>, the maximum length of a <code dir="ltr">RAW</code> can be 32767 bytes.</p>
<p>When <code dir="ltr">RAW</code> data in an Oracle table is converted to a character string, the data is represented in hexadecimal code. Each byte of <code dir="ltr">RAW</code> data is represented as two characters that indicate the value of the byte, ranging from 00 to FF. If you input a character string by using <code dir="ltr">RAW</code>, then you must use hexadecimal coding.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20255" class="sect3"><a id="sthref403"></a>
<h4 class="sect3">R<a id="sthref404"></a><a id="sthref405"></a>EF</h4>
<p>The external data type <code dir="ltr">REF</code> is a reference to a named data type. To allocate a <code dir="ltr">REF</code> for use in an application, declare a variable as a pointer to a <code dir="ltr">REF</code>.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20256" class="sect3"><a id="sthref406"></a>
<h4 class="sect3">ROW<a id="sthref407"></a><a id="sthref408"></a>ID</h4>
<p>The external data type <code dir="ltr">ROWID</code> identifies a particular row in a database table. The <code dir="ltr">ROWID</code> is often returned from a query by issuing a statement similar to the following example:</p>
<pre dir="ltr">SELECT ROWID, var1, var2 FROM db;
</pre>
<p>You can then use the returned <code dir="ltr">ROWID</code> in further <code dir="ltr">DELETE</code> statements.</p>
<p>If you are performing a <code dir="ltr">SELECT</code> for an <code dir="ltr">UPDATE</code> operation, then the <code dir="ltr">ROWID</code> is implicitly returned.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20257" class="sect3"><a id="sthref409"></a>
<h4 class="sect3">ST<a id="sthref410"></a><a id="sthref411"></a>RING</h4>
<p>The external data type <code dir="ltr">STRING</code> behaves like the external data type <code dir="ltr">VARCHAR2</code> (data type code 1), except that the external data type <code dir="ltr">STRING</code> must be <code dir="ltr">NULL</code>-terminated.</p>
<p>Note that this data type is different from <code dir="ltr">OCCI STRING</code> which corresponds to a C++ STL string data type.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20258" class="sect3"><a id="sthref412"></a>
<h4 class="sect3">TI<a id="sthref413"></a><a id="sthref414"></a>MESTAMP</h4>
<p>The external data type <code dir="ltr">TIMESTAMP</code> is an extension of the <code dir="ltr">DATE</code> data type. It stores the year, month, and day of the <code dir="ltr">DATE</code> data type, plus hour, minute, and second values. Specify the <code dir="ltr">TIMESTAMP</code> data type as follows:</p>
<pre dir="ltr">TIMESTAMP [(<span class="italic">fractional_seconds_precision</span>)] 
</pre>
<p>The placeholder <code dir="ltr"><span class="codeinlineitalic">fractional_seconds_precision</span></code> optionally specifies the number of digits in the fractional part of the <code dir="ltr">SECOND</code> datetime field and can be a number in the range 0 to 9. The default is 6. For example, you specify <code dir="ltr">TIMESTAMP(2)</code> as a literal as follows:</p>
<pre dir="ltr">TIMESTAMP &#39;1997-01-31 09:26:50.10&#39;
</pre>
<p>Note that this data type is different from <code dir="ltr">OCCI TIMESTAMP</code>.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20259" class="sect3"><a id="sthref415"></a>
<h4 class="sect3">TIMEST<a id="sthref416"></a>AMP<a id="sthref417"></a> WITH LOCAL TIME ZONE</h4>
<p>The external data type <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> (<code dir="ltr">TSTZ</code>) is a variant of <code dir="ltr">TIMESTAMP</code> that includes an explicit time zone displacement in its value. The time zone displacement is the difference (in hours and minutes) between local time and Coordinated Universal Time (UTC), formerly Greenwich Mean Time. Specify the <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> data type as follows:</p>
<pre dir="ltr">TIMESTAMP(fractional_seconds_precision) WITH TIME ZONE
</pre>
<p>The placeholder <code dir="ltr"><span class="codeinlineitalic">fractional_seconds_precision</span></code> optionally specifies the number of digits in the fractional part of the <code dir="ltr">SECOND</code> datetime field and can be a number in the range <code dir="ltr">0</code> to <code dir="ltr">9</code>. The default is <code dir="ltr">6</code>.</p>
<p>Two <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> values are considered identical if they represent the same instant in UTC, regardless of the <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> offsets stored in the data.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20260" class="sect3"><a id="sthref418"></a>
<h4 class="sect3">TIM<a id="sthref419"></a><a id="sthref420"></a>ESTAMP WITH TIME ZONE</h4>
<p>The external data type <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> is a variant of <code dir="ltr">TIMESTAMP</code> that includes a <span class="bold">time zone displacement</span> in its value. The time zone displacement is the difference (in hours and minutes) between local time and Coordinated Universal Time (UTC), formerly Greenwich Mean Time. Specify the <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> data type as follows:</p>
<pre dir="ltr">TIMESTAMP [(<span class="italic">fractional_seconds_precision</span>)] WITH TIME ZONE
</pre>
<p>The placeholder <code dir="ltr"><span class="codeinlineitalic">fractional_seconds_precision</span></code> optionally specifies the number of digits in the fractional part of the SECOND datetime field and can be a number in the range <code dir="ltr">0</code> to <code dir="ltr">9</code>. The default is <code dir="ltr">6</code>. For example, you might specify <code dir="ltr">TIMESTAMP(0)</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> as a literal as follows:</p>
<pre dir="ltr">TIMESTAMP &#39;1997-01-31 09:26:50+02.00&#39;
</pre></div>
<!-- class="sect3" -->
<div id="LNCPP20261" class="sect3"><a id="sthref421"></a>
<h4 class="sect3">UNSI<a id="sthref422"></a><a id="sthref423"></a>GNED INT</h4>
<p>The external data type <code dir="ltr">UNSIGNED INT</code> is used for unsigned binary integers. The size in bytes is operating system dependent. The host system architecture determines the order of the bytes in a word. If the number being output from Oracle is not an integer, the fractional part is discarded, and no error is returned. If the number to be returned exceeds the capacity of an unsigned integer for the operating system, Oracle returns an overflow on conversion error.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20262" class="sect3"><a id="sthref424"></a>
<h4 class="sect3">VARCH<a id="sthref425"></a><a id="sthref426"></a>AR</h4>
<p>The external data type <code dir="ltr">VARCHAR</code> store character strings of varying length. The first two bytes contain the length of the character string, and the remaining bytes contain the actual string. The specified length of the string in a bind or a define call must include the two length bytes, meaning the largest <code dir="ltr">VARCHAR</code> string is <code dir="ltr">65533</code> bytes long, not <code dir="ltr">65535</code>. For converting longer strings, use the <code dir="ltr">LONG</code> <code dir="ltr">VARCHAR</code> external <a id="sthref427"></a><a id="sthref428"></a>data type.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20263" class="sect3"><a id="sthref429"></a>
<h4 class="sect3">VARCHAR2</h4>
<p>The external data type <code dir="ltr">VARCHAR2</code> is a variable-length string of characters up to 4000 bytes. If the <code dir="ltr">init.ora</code> parameter <code dir="ltr">max_string_size = standard</code> (default value), the maximum length of a <code dir="ltr">VARCHAR2</code> can be 4000 bytes. If the <code dir="ltr">init.ora</code> parameter <code dir="ltr">max_string_size = extended</code>, the maximum length of a <code dir="ltr">VARCHAR2</code> can be 32767 bytes.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20264" class="sect3"><a id="sthref430"></a>
<h4 class="sect3">VARNU<a id="sthref431"></a><a id="sthref432"></a>M</h4>
<p>The external data type <code dir="ltr">VARNUM</code> is similar to the external data type <code dir="ltr">NUMBER</code>, except that the first byte contains the length of the number representation. This length value does not include the length byte itself. Reserve 22 bytes to receive the longest possible <code dir="ltr">VARNUM</code>. You must set the length byte when you send a <code dir="ltr">VARNUM</code> value to the database.</p>
<div id="LNCPP20265" class="tblformal">
<p class="titleintable"><a id="sthref433"></a><a id="sthref434"></a>Table 5-4 VARNUM Examples</p>
<table class="cellalignment2203" title="VARNUM Examples " summary="This table shows examples of VARNUM for various decimal values. The first column is the decimal value and the remaining columns describe the length byte, exponent byte, mantussa bytes, and terminator bytes." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t19">Decimal Value</th>
<th class="cellalignment2204" id="r1c2-t19">Length Byte</th>
<th class="cellalignment2204" id="r1c3-t19">Exponent Byte</th>
<th class="cellalignment2204" id="r1c4-t19">Mantissa Bytes</th>
<th class="cellalignment2204" id="r1c5-t19">Terminator Byte</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t19" headers="r1c1-t19">
<p><code dir="ltr">0</code></p>
</td>
<td class="cellalignment2205" headers="r2c1-t19 r1c2-t19">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment2205" headers="r2c1-t19 r1c3-t19">
<p><code dir="ltr">128</code></p>
</td>
<td class="cellalignment2205" headers="r2c1-t19 r1c4-t19">
<p>NA<a id="sthref435" href="#sthref435" onclick="footdisplay(1,&#34;NA means not applicable.&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment2205" headers="r2c1-t19 r1c5-t19">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t19" headers="r1c1-t19">
<p><code dir="ltr">5</code></p>
</td>
<td class="cellalignment2205" headers="r3c1-t19 r1c2-t19">
<p><code dir="ltr">2</code></p>
</td>
<td class="cellalignment2205" headers="r3c1-t19 r1c3-t19">
<p><code dir="ltr">193</code></p>
</td>
<td class="cellalignment2205" headers="r3c1-t19 r1c4-t19">
<p><code dir="ltr">6</code></p>
</td>
<td class="cellalignment2205" headers="r3c1-t19 r1c5-t19">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t19" headers="r1c1-t19">
<p><code dir="ltr">-5</code></p>
</td>
<td class="cellalignment2205" headers="r4c1-t19 r1c2-t19">
<p><code dir="ltr">3</code></p>
</td>
<td class="cellalignment2205" headers="r4c1-t19 r1c3-t19">
<p><code dir="ltr">62</code></p>
</td>
<td class="cellalignment2205" headers="r4c1-t19 r1c4-t19">
<p><code dir="ltr">96</code></p>
</td>
<td class="cellalignment2205" headers="r4c1-t19 r1c5-t19">
<p><code dir="ltr">102</code></p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t19" headers="r1c1-t19">
<p><code dir="ltr">2767</code></p>
</td>
<td class="cellalignment2205" headers="r5c1-t19 r1c2-t19">
<p><code dir="ltr">3</code></p>
</td>
<td class="cellalignment2205" headers="r5c1-t19 r1c3-t19">
<p><code dir="ltr">194</code></p>
</td>
<td class="cellalignment2205" headers="r5c1-t19 r1c4-t19">
<p><code dir="ltr">28, 68</code></p>
</td>
<td class="cellalignment2205" headers="r5c1-t19 r1c5-t19">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t19" headers="r1c1-t19">
<p><code dir="ltr">-2767</code></p>
</td>
<td class="cellalignment2205" headers="r6c1-t19 r1c2-t19">
<p><code dir="ltr">4</code></p>
</td>
<td class="cellalignment2205" headers="r6c1-t19 r1c3-t19">
<p><code dir="ltr">61</code></p>
</td>
<td class="cellalignment2205" headers="r6c1-t19 r1c4-t19">
<p><code dir="ltr">74, 34</code></p>
</td>
<td class="cellalignment2205" headers="r6c1-t19 r1c5-t19">
<p><code dir="ltr">102</code></p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t19" headers="r1c1-t19">
<p><code dir="ltr">100000</code></p>
</td>
<td class="cellalignment2205" headers="r7c1-t19 r1c2-t19">
<p><code dir="ltr">2</code></p>
</td>
<td class="cellalignment2205" headers="r7c1-t19 r1c3-t19">
<p><code dir="ltr">195</code></p>
</td>
<td class="cellalignment2205" headers="r7c1-t19 r1c4-t19">
<p><code dir="ltr">11</code></p>
</td>
<td class="cellalignment2205" headers="r7c1-t19 r1c5-t19">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t19" headers="r1c1-t19">
<p><code dir="ltr">1234567</code></p>
</td>
<td class="cellalignment2205" headers="r8c1-t19 r1c2-t19">
<p><code dir="ltr">5</code></p>
</td>
<td class="cellalignment2205" headers="r8c1-t19 r1c3-t19">
<p><code dir="ltr">196</code></p>
</td>
<td class="cellalignment2205" headers="r8c1-t19 r1c4-t19">
<p><code dir="ltr">2, 24, 46, 68</code></p>
</td>
<td class="cellalignment2205" headers="r8c1-t19 r1c5-t19">
<p>NA</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>NA means not applicable.</p>
</div>
<!-- class="sect3" -->
<div id="LNCPP20266" class="sect3"><a id="sthref436"></a>
<h4 class="sect3">V<a id="sthref437"></a><a id="sthref438"></a>ARRAW</h4>
<p>The <span class="bold">external</span> data type <code dir="ltr">VARRAW</code> is similar to the external data type <code dir="ltr">RAW</code>, except that the first two bytes contain the length of the data. The specified length of the string in a bind or a define call must include the two length bytes. So the largest <code dir="ltr">VARRAW</code> string that can be received or sent is <code dir="ltr">65533</code> bytes, not <code dir="ltr">65535</code>. For converting longer strings, use the <code dir="ltr">LONG</code> <code dir="ltr">VARRAW</code> data type.</p>
</div>
<!-- class="sect3" -->
<a id="i1028557"></a>
<div id="LNCPP20267" class="sect3">
<h4 class="sect3">NATIVE DOUBLE</h4>
<p>This <span class="bold">external</span> data type implements the IEEE 754 standard double-precision floating point data type. It is represented in the host system&#39;s native floating point format. The data type is stored in the Oracle Server in a byte comparable canonical format, and requires 8 bytes for storage, including the length byte. It is an alternative to Oracle <code dir="ltr">NUMBER</code> and has the following advantages over <code dir="ltr">NUMBER</code>:</p>
<ul>
<li>
<p>Fewer bytes used in storage</p>
</li>
<li>
<p>Matches data types used by RDBMS Clients</p>
</li>
<li>
<p>Supports a wider range of values used in scientific calculations.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1028558"></a>
<div id="LNCPP20268" class="sect3">
<h4 class="sect3">NATIVE FLOAT</h4>
<p>This <span class="bold">external</span> data type implements the IEEE 754 single-precision floating point data type. It is represented in the host system&#39;s native floating point format. The data type is stored in the Oracle Server in a byte comparable canonical format, and requires 4 bytes for storage, including the length byte. It is an alternative to Oracle <code dir="ltr">NUMBER</code> and has the following advantages over <code dir="ltr">NUMBER</code>:</p>
<ul>
<li>
<p>Fewer bytes used in storage</p>
</li>
<li>
<p>Matches data types used by RDBMS Clients</p>
</li>
<li>
<p>Supports a wider range of values used in scientific calculations</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1011128"></a>
<div id="LNCPP20269" class="sect1">
<h2 class="sect1">Data Conve<a id="sthref439"></a>rsions</h2>
<p><a href="#g1032563">Table 5-5</a> lists the supported conversions from Oracle internal data types to external data types, and from external data types to internal column representations.</p>
<p>Note the following conditions:</p>
<ul>
<li>
<p>A <code dir="ltr">REF</code> stored in the database is converted to <code dir="ltr">OCCI_SQLT_REF</code> on output.</p>
</li>
<li>
<p>An <code dir="ltr">OCCI_SQLT_REF</code> is converted to the internal representation of a <code dir="ltr">REF</code> on input.</p>
</li>
<li>
<p>A named data type stored in the database is converted to <code dir="ltr">OCCI_SQLT_NTY</code> (and represented by a C structure in the application) on output.</p>
</li>
<li>
<p>An <code dir="ltr">OCCI_SQLT_NTY</code> (represented by a C structure in an application) is converted to the internal representation of the corresponding data type on input.</p>
</li>
<li>
<p>LOBs and <code dir="ltr">BFILE</code>s are represented by descriptors in OCCI applications, so there are no input or output conversions.</p>
</li>
</ul>
<p>Also note that in <a href="#g1032563">Table 5-5</a>, conversions have the following numeric codes:</p>
<ol>
<li>
<p>The data type must be in Oracle <code dir="ltr">ROWID</code> format for input; it is returned in Oracle <code dir="ltr">ROWID</code> format on output.</p>
</li>
<li>
<p>The data type must be in Oracle <code dir="ltr">DATE</code> format for input; it is returned in <code dir="ltr">Oracle DATE</code> format on output.</p>
</li>
<li>
<p>The data type must be in hexadecimal format for input; it is returned in hexadecimal format on output.</p>
</li>
<li>
<p>The data type must represent a valid number for output.</p>
</li>
<li>
<p>The length must be less than or equal to 2000 characters.</p>
</li>
<li>
<p>The data type must be stored in hexadecimal format on output; it is in hexadecimal format on output.</p>
</li>
</ol>
<div id="LNCPP20270" class="tblhruleformalwidekeymax">
<p class="titleintable"><a id="sthref440"></a><a id="g1032563"></a>Table 5-5 <a id="sthref441"></a>Data Conversions Between External and Internal Data Types</p>
<table class="cellalignment2206" title="Data Conversions Between External and Internal Data Types" summary="First column lists the external data type and remaining columns list the data conversion to all the internal data types." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t20">NA<a id="sthref442" href="#sthref442" onclick="footdisplay(1,&#34;NA means not applicable.&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></th>
<th class="cellalignment2204" id="r1c2-t20" colspan="10">Internal Data Types</th>
</tr>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r2c1-t20" headers="r1c1-t20">External Data Types</th>
<th class="cellalignment2204" id="r2c2-t20" headers="r2c1-t20 r1c2-t20">VARCHAR2</th>
<th class="cellalignment2204" id="r2c3-t20" headers="r2c1-t20 r1c2-t20">NUMBER</th>
<th class="cellalignment2204" id="r2c4-t20" headers="r2c1-t20 r1c2-t20">LONG</th>
<th class="cellalignment2204" id="r2c5-t20" headers="r2c1-t20 r1c2-t20">ROWID</th>
<th class="cellalignment2204" id="r2c6-t20" headers="r2c1-t20 r1c2-t20">DATE</th>
<th class="cellalignment2204" id="r2c7-t20" headers="r2c1-t20 r1c2-t20">RAW</th>
<th class="cellalignment2204" id="r2c8-t20" headers="r2c1-t20 r1c2-t20">LONG RAW</th>
<th class="cellalignment2204" id="r2c9-t20" headers="r2c1-t20 r1c2-t20">CHAR</th>
<th class="cellalignment2204" id="r2c10-t20" headers="r2c1-t20 r1c2-t20">BFLOAT</th>
<th class="cellalignment2204" id="r2c11-t20" headers="r2c1-t20 r1c2-t20">BDOUBLE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">CHAR</code></p>
</td>
<td class="cellalignment2205" headers="r3c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r3c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r3c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r3c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment2205" headers="r3c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment2205" headers="r3c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment2205" headers="r3c1-t20 r1c2-t20 r2c8-t20">
<p>I<sup>3, 5</sup></p>
</td>
<td class="cellalignment2205" headers="r3c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r3c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r3c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">CHARZ</code></p>
</td>
<td class="cellalignment2205" headers="r4c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r4c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r4c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r4c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment2205" headers="r4c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment2205" headers="r4c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment2205" headers="r4c1-t20 r1c2-t20 r2c8-t20">
<p>I<sup>3, 5</sup></p>
</td>
<td class="cellalignment2205" headers="r4c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r4c1-t20 r1c2-t20 r2c10-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r4c1-t20 r1c2-t20 r2c11-t20">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">DATE</code></p>
</td>
<td class="cellalignment2205" headers="r5c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r5c1-t20 r1c2-t20 r2c3-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r5c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r5c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r5c1-t20 r1c2-t20 r2c6-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r5c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r5c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r5c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r5c1-t20 r1c2-t20 r2c10-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r5c1-t20 r1c2-t20 r2c11-t20">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">DECIMAL</code></p>
</td>
<td class="cellalignment2205" headers="r6c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r6c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r6c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r6c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r6c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r6c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r6c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r6c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r6c1-t20 r1c2-t20 r2c10-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r6c1-t20 r1c2-t20 r2c11-t20">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">FLOAT</code></p>
</td>
<td class="cellalignment2205" headers="r7c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r7c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r7c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r7c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r7c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r7c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r7c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r7c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r7c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r7c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">INTEGER</code></p>
</td>
<td class="cellalignment2205" headers="r8c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r8c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r8c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r8c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r8c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r8c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r8c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r8c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r8c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r8c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">LONG</code></p>
</td>
<td class="cellalignment2205" headers="r9c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r9c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r9c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r9c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment2205" headers="r9c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment2205" headers="r9c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment2205" headers="r9c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3, 5</sup></p>
</td>
<td class="cellalignment2205" headers="r9c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r9c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r9c1-t20 r1c2-t20 r2c11-t20">
<p>II/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">LONG RAW</code></p>
</td>
<td class="cellalignment2205" headers="r10c1-t20 r1c2-t20 r2c2-t20">
<p>O<sup>6</sup></p>
</td>
<td class="cellalignment2205" headers="r10c1-t20 r1c2-t20 r2c3-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r10c1-t20 r1c2-t20 r2c4-t20">
<p>I<sup>5, 6</sup></p>
</td>
<td class="cellalignment2205" headers="r10c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r10c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r10c1-t20 r1c2-t20 r2c7-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r10c1-t20 r1c2-t20 r2c8-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r10c1-t20 r1c2-t20 r2c9-t20">
<p>O<sup>6</sup></p>
</td>
<td class="cellalignment2205" headers="r10c1-t20 r1c2-t20 r2c10-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r10c1-t20 r1c2-t20 r2c11-t20">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">LONG VARCHAR</code></p>
</td>
<td class="cellalignment2205" headers="r11c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r11c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r11c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r11c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment2205" headers="r11c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment2205" headers="r11c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment2205" headers="r11c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3, 5</sup></p>
</td>
<td class="cellalignment2205" headers="r11c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r11c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r11c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">LONG VARRAW</code></p>
</td>
<td class="cellalignment2205" headers="r12c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment2205" headers="r12c1-t20 r1c2-t20 r2c3-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r12c1-t20 r1c2-t20 r2c4-t20">
<p>I<sup>5, 6</sup></p>
</td>
<td class="cellalignment2205" headers="r12c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r12c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r12c1-t20 r1c2-t20 r2c7-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r12c1-t20 r1c2-t20 r2c8-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r12c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment2205" headers="r12c1-t20 r1c2-t20 r2c10-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r12c1-t20 r1c2-t20 r2c11-t20">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment2205" headers="r13c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r13c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r13c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r13c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r13c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r13c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r13c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r13c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r13c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r13c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t20" headers="r1c1-t20 r2c1-t20">
<pre dir="ltr">OCCI BDouble
</pre></td>
<td class="cellalignment2205" headers="r14c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r14c1-t20 r1c2-t20 r2c3-t20">
<p>1/O</p>
</td>
<td class="cellalignment2205" headers="r14c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r14c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r14c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r14c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r14c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r14c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r14c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r14c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t20" headers="r1c1-t20 r2c1-t20">
<pre dir="ltr">OCCI BFloat
</pre></td>
<td class="cellalignment2205" headers="r15c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r15c1-t20 r1c2-t20 r2c3-t20">
<p>1/O</p>
</td>
<td class="cellalignment2205" headers="r15c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r15c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r15c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r15c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r15c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r15c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r15c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r15c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">OCCI Bytes</code></p>
</td>
<td class="cellalignment2205" headers="r16c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment2205" headers="r16c1-t20 r1c2-t20 r2c3-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r16c1-t20 r1c2-t20 r2c4-t20">
<p>I<sup>5, 6</sup></p>
</td>
<td class="cellalignment2205" headers="r16c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r16c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r16c1-t20 r1c2-t20 r2c7-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r16c1-t20 r1c2-t20 r2c8-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r16c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment2205" headers="r16c1-t20 r1c2-t20 r2c10-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r16c1-t20 r1c2-t20 r2c11-t20">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">OCCI Date</code></p>
</td>
<td class="cellalignment2205" headers="r17c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<a id="sthref443" href="#sthref443" onclick="footdisplay(2,&#34;I/O = Conversion is valid for input and output, unless otherwise specified.&#34;)"><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment2205" headers="r17c1-t20 r1c2-t20 r2c3-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r17c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r17c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r17c1-t20 r1c2-t20 r2c6-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r17c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r17c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r17c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r17c1-t20 r1c2-t20 r2c10-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r17c1-t20 r1c2-t20 r2c11-t20">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">OCCI Number</code></p>
</td>
<td class="cellalignment2205" headers="r18c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r18c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r18c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r18c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r18c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r18c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r18c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r18c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r18c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r18c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">OCCI Timestamp</code></p>
</td>
<td class="cellalignment2205" headers="r19c1-t20 r1c2-t20 r2c2-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r19c1-t20 r1c2-t20 r2c3-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r19c1-t20 r1c2-t20 r2c4-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r19c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r19c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r19c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r19c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r19c1-t20 r1c2-t20 r2c9-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r19c1-t20 r1c2-t20 r2c10-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r19c1-t20 r1c2-t20 r2c11-t20">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment2205" headers="r20c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment2205" headers="r20c1-t20 r1c2-t20 r2c3-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r20c1-t20 r1c2-t20 r2c4-t20">
<p>I<sup>5, 6</sup></p>
</td>
<td class="cellalignment2205" headers="r20c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r20c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r20c1-t20 r1c2-t20 r2c7-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r20c1-t20 r1c2-t20 r2c8-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r20c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment2205" headers="r20c1-t20 r1c2-t20 r2c10-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r20c1-t20 r1c2-t20 r2c11-t20">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">ROWID</code></p>
</td>
<td class="cellalignment2205" headers="r21c1-t20 r1c2-t20 r2c2-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r21c1-t20 r1c2-t20 r2c3-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r21c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r21c1-t20 r1c2-t20 r2c5-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r21c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r21c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r21c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r21c1-t20 r1c2-t20 r2c9-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r21c1-t20 r1c2-t20 r2c10-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r21c1-t20 r1c2-t20 r2c11-t20">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">STL string</code></p>
</td>
<td class="cellalignment2205" headers="r22c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r22c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r22c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r22c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment2205" headers="r22c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment2205" headers="r22c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment2205" headers="r22c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment2205" headers="r22c1-t20 r1c2-t20 r2c9-t20">
<p>-</p>
</td>
<td class="cellalignment2205" headers="r22c1-t20 r1c2-t20 r2c10-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r22c1-t20 r1c2-t20 r2c11-t20">
<p>I/O<sup>4</sup></p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r23c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">STRING</code></p>
</td>
<td class="cellalignment2205" headers="r23c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r23c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r23c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r23c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment2205" headers="r23c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment2205" headers="r23c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment2205" headers="r23c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3, 5</sup></p>
</td>
<td class="cellalignment2205" headers="r23c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r23c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r23c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r24c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">UNSIGNED</code></p>
</td>
<td class="cellalignment2205" headers="r24c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r24c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r24c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r24c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r24c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r24c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r24c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r24c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r24c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r24c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r25c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">VARCHAR</code></p>
</td>
<td class="cellalignment2205" headers="r25c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r25c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r25c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r25c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment2205" headers="r25c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment2205" headers="r25c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment2205" headers="r25c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment2205" headers="r25c1-t20 r1c2-t20 r2c9-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r25c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r25c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r26c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">VARCHAR</code>2</p>
</td>
<td class="cellalignment2205" headers="r26c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r26c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r26c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r26c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment2205" headers="r26c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment2205" headers="r26c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment2205" headers="r26c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3, 5</sup></p>
</td>
<td class="cellalignment2205" headers="r26c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r26c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r26c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r27c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">VARNUM</code></p>
</td>
<td class="cellalignment2205" headers="r27c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r27c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r27c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment2205" headers="r27c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r27c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r27c1-t20 r1c2-t20 r2c7-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r27c1-t20 r1c2-t20 r2c8-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r27c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment2205" headers="r27c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r27c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r28c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code dir="ltr">VARRAW</code></p>
</td>
<td class="cellalignment2205" headers="r28c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment2205" headers="r28c1-t20 r1c2-t20 r2c3-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r28c1-t20 r1c2-t20 r2c4-t20">
<p>I<sup>5, 6</sup></p>
</td>
<td class="cellalignment2205" headers="r28c1-t20 r1c2-t20 r2c5-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r28c1-t20 r1c2-t20 r2c6-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r28c1-t20 r1c2-t20 r2c7-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r28c1-t20 r1c2-t20 r2c8-t20">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r28c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment2205" headers="r28c1-t20 r1c2-t20 r2c10-t20">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r28c1-t20 r1c2-t20 r2c11-t20">
<p>NA</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwidekeymax" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>NA means not applicable.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>I/O = Conversion is valid for input and output, unless otherwise specified.</p>
<div id="LNCPP20271" class="sect2"><a id="sthref444"></a>
<h3 class="sect2">Data C<a id="sthref445"></a>onversions for L<a id="sthref446"></a>OB Data Types</h3>
<div id="LNCPP20272" class="tblformal">
<p class="titleintable"><a id="sthref447"></a><a id="sthref448"></a>Table 5-6 <a id="sthref449"></a>Data Conversions for LOBs</p>
<table class="cellalignment2203" title="Data Conversions for LOBs" summary="First column lists external data types and the second and third columns lists CLOB and BLOB internal data type conversion information, whether input and output conversion is supported or if it is not applicable." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t21" rowspan="2">EXTERNAL DATATYPES</th>
<th class="cellalignment2204" id="r1c2-t21" colspan="2">INTERNAL DATATYPES</th>
</tr>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r2c1-t21" headers="r1c1-t21 r1c1-t21">CLOB</th>
<th class="cellalignment2204" id="r2c2-t21" headers="r1c1-t21 r2c1-t21 r1c2-t21">BLOB</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code dir="ltr">VARCHAR</code></p>
</td>
<td class="cellalignment2205" headers="r3c1-t21 r1c2-t21 r2c2-t21">
<p>I/O<a id="sthref450" href="#sthref450" onclick="footdisplay(1,&#34;I/O = Conversion is valid for input and output.&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment2205" headers="r3c1-t21 r1c2-t21">
<p>NA<a id="sthref451" href="#sthref451" onclick="footdisplay(2,&#34;NA means not applicable.&#34;)"><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code dir="ltr">CHAR</code></p>
</td>
<td class="cellalignment2205" headers="r4c1-t21 r1c2-t21 r2c2-t21">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r4c1-t21 r1c2-t21">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code dir="ltr">LONG</code></p>
</td>
<td class="cellalignment2205" headers="r5c1-t21 r1c2-t21 r2c2-t21">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r5c1-t21 r1c2-t21">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code dir="ltr">LONG VARCHAR</code></p>
</td>
<td class="cellalignment2205" headers="r6c1-t21 r1c2-t21 r2c2-t21">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r6c1-t21 r1c2-t21">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code dir="ltr">STL String</code></p>
</td>
<td class="cellalignment2205" headers="r7c1-t21 r1c2-t21 r2c2-t21">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r7c1-t21 r1c2-t21">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment2205" headers="r8c1-t21 r1c2-t21 r2c2-t21">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r8c1-t21 r1c2-t21">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code dir="ltr">VARRAW</code></p>
</td>
<td class="cellalignment2205" headers="r9c1-t21 r1c2-t21 r2c2-t21">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r9c1-t21 r1c2-t21">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code dir="ltr">LONG RAW</code></p>
</td>
<td class="cellalignment2205" headers="r10c1-t21 r1c2-t21 r2c2-t21">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r10c1-t21 r1c2-t21">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code dir="ltr">LONG VARRAW</code></p>
</td>
<td class="cellalignment2205" headers="r11c1-t21 r1c2-t21 r2c2-t21">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r11c1-t21 r1c2-t21">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code dir="ltr">OCCI Bytes</code></p>
</td>
<td class="cellalignment2205" headers="r12c1-t21 r1c2-t21 r2c2-t21">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r12c1-t21 r1c2-t21">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>I/O = Conversion is valid for input and output.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>NA means not applicable.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB001" href="../ADLOB/adlob_intro.htm#ADLOB001"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for an introduction to <code dir="ltr">LOB</code> data types.</div>
</div>
<!-- class="sect2" -->
<div id="LNCPP20273" class="sect2"><a id="sthref452"></a>
<h3 class="sect2">Data Conversions<a id="sthref453"></a><a id="sthref454"></a> for Date, Timesta<a id="sthref455"></a><a id="sthref456"></a>mp, and Interval Data Types</h3>
<p>You can also use a character data type for the host variable used in a fetch or insert operation from or to a datetime or interval column. Oracle performs the conversion between the character data type and datetime/interval data type for you.</p>
<div id="LNCPP20274" class="tblformalwide">
<p class="titleintable"><a id="sthref457"></a><a id="sthref458"></a>Table 5-7 <a id="sthref459"></a><a id="sthref460"></a><a id="sthref461"></a>Data Conversions for Date, Timestamp, and Interval Data Types</p>
<table class="cellalignment2206" title="Data Conversions for Date, Timestamp, and Interval Data Types" summary="This table shows the data conversion from external data types to Oracle internal data types: Date, Timestamp, and Interval data types. The first column is the external data type and the remaining columns are the Oracle internal data types: VARCHAR, CHAR, DATE, TS, TSTZ, TSLTZ, INTERVAL YEAR TO MONTH, and INTERVAL DAY TO SECONDS." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t23">External Types</th>
<th class="cellalignment2204" id="r1c2-t23" colspan="7">Internal Types</th>
</tr>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r2c1-t23" headers="r1c1-t23">NA<a id="sthref462" href="#sthref462" onclick="footdisplay(1,&#34;NA means not applicable.&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></th>
<th class="cellalignment2204" id="r2c2-t23" headers="r2c1-t23 r1c2-t23">VARCHAR, CHAR</th>
<th class="cellalignment2204" id="r2c3-t23" headers="r2c1-t23 r1c2-t23">DATE</th>
<th class="cellalignment2204" id="r2c4-t23" headers="r2c1-t23 r1c2-t23">TS</th>
<th class="cellalignment2204" id="r2c5-t23" headers="r2c1-t23 r1c2-t23">TSTZ</th>
<th class="cellalignment2204" id="r2c6-t23" headers="r2c1-t23 r1c2-t23">TSLTZ</th>
<th class="cellalignment2204" id="r2c7-t23" headers="r2c1-t23 r1c2-t23">INTERVAL YEAR TO MONTH</th>
<th class="cellalignment2204" id="r2c8-t23" headers="r2c1-t23 r1c2-t23">INTERVAL DAY TO SECOND</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">VARCHAR2, CHAR</code></p>
</td>
<td class="cellalignment2205" headers="r3c1-t23 r1c2-t23 r2c2-t23">
<p>I/O<a id="sthref463" href="#sthref463" onclick="footdisplay(2,&#34;I/O = Conversion is valid for input and output.&#34;)"><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment2205" headers="r3c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r3c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r3c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r3c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r3c1-t23 r1c2-t23 r2c7-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r3c1-t23 r1c2-t23 r2c8-t23">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">STL String</code></p>
</td>
<td class="cellalignment2205" headers="r4c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r4c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r4c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r4c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r4c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r4c1-t23 r1c2-t23 r2c7-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r4c1-t23 r1c2-t23 r2c8-t23">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">DATE</code></p>
</td>
<td class="cellalignment2205" headers="r5c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r5c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r5c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r5c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r5c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r5c1-t23 r1c2-t23 r2c7-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r5c1-t23 r1c2-t23 r2c8-t23">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">OCCI Date</code></p>
</td>
<td class="cellalignment2205" headers="r6c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r6c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r6c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r6c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r6c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r6c1-t23 r1c2-t23 r2c7-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r6c1-t23 r1c2-t23 r2c8-t23">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">ANSI DATE</code></p>
</td>
<td class="cellalignment2205" headers="r7c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r7c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r7c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r7c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r7c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r7c1-t23 r1c2-t23 r2c7-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r7c1-t23 r1c2-t23 r2c8-t23">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">TIMESTAMP (TS)</code></p>
</td>
<td class="cellalignment2205" headers="r8c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r8c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r8c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r8c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r8c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r8c1-t23 r1c2-t23 r2c7-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r8c1-t23 r1c2-t23 r2c8-t23">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">OCCI Timestamp</code></p>
</td>
<td class="cellalignment2205" headers="r9c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r9c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r9c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r9c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r9c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r9c1-t23 r1c2-t23 r2c7-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r9c1-t23 r1c2-t23 r2c8-t23">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">TIMESTAMP WITH TIME ZONE (TSTZ)</code></p>
</td>
<td class="cellalignment2205" headers="r10c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r10c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r10c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r10c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r10c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r10c1-t23 r1c2-t23 r2c7-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r10c1-t23 r1c2-t23 r2c8-t23">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">TIMESTAMP WITH LOCAL TIME ZONE (TSLTZ)</code></p>
</td>
<td class="cellalignment2205" headers="r11c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r11c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r11c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r11c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r11c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r11c1-t23 r1c2-t23 r2c7-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r11c1-t23 r1c2-t23 r2c8-t23">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment2205" headers="r12c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r12c1-t23 r1c2-t23 r2c3-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r12c1-t23 r1c2-t23 r2c4-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r12c1-t23 r1c2-t23 r2c5-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r12c1-t23 r1c2-t23 r2c6-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r12c1-t23 r1c2-t23 r2c7-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r12c1-t23 r1c2-t23 r2c8-t23">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">OCCI IntervalYM</code></p>
</td>
<td class="cellalignment2205" headers="r13c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r13c1-t23 r1c2-t23 r2c3-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r13c1-t23 r1c2-t23 r2c4-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r13c1-t23 r1c2-t23 r2c5-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r13c1-t23 r1c2-t23 r2c6-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r13c1-t23 r1c2-t23 r2c7-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r13c1-t23 r1c2-t23 r2c8-t23">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment2205" headers="r14c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r14c1-t23 r1c2-t23 r2c3-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r14c1-t23 r1c2-t23 r2c4-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r14c1-t23 r1c2-t23 r2c5-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r14c1-t23 r1c2-t23 r2c6-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r14c1-t23 r1c2-t23 r2c7-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r14c1-t23 r1c2-t23 r2c8-t23">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code dir="ltr">OCCI IntervalDS</code></p>
</td>
<td class="cellalignment2205" headers="r15c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment2205" headers="r15c1-t23 r1c2-t23 r2c3-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r15c1-t23 r1c2-t23 r2c4-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r15c1-t23 r1c2-t23 r2c5-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r15c1-t23 r1c2-t23 r2c6-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r15c1-t23 r1c2-t23 r2c7-t23">
<p>NA</p>
</td>
<td class="cellalignment2205" headers="r15c1-t23 r1c2-t23 r2c8-t23">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>NA means not applicable.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>I/O = Conversion is valid for input and output.</p>
<p>These consideration apply when converting between Date, Timestamp and Interval data types:</p>
<ul>
<li>
<p>When assigning a source with time zone to a target without a time zone, the time zone portion of the source is ignored. On assigning a source without a time zone to a target with a time zone, the time zone of the target is set to the session&#39;s default time zone.</p>
</li>
<li>
<p>When assigning an Oracle <code dir="ltr">DATE</code> to a <code dir="ltr">TIMESTAMP</code>, the <code dir="ltr">TIME</code> portion of the <code dir="ltr">DATE</code> is copied over to the <code dir="ltr">TIMESTAMP</code>. When assigning a <code dir="ltr">TIMESTAMP</code> to Oracle <code dir="ltr">DATE</code>, the <code dir="ltr">TIME</code> portion of the result <code dir="ltr">DATE</code> is set to zero. This is done to encourage migration of Oracle <code dir="ltr">DATE</code> to <code dir="ltr">ANSI</code> compliant <code dir="ltr">DATETIME</code> data types.</p>
</li>
<li>
<p>(When assigning an <code dir="ltr">ANSI</code> <code dir="ltr">DATE</code> to an Oracle <code dir="ltr">DATE</code> or a <code dir="ltr">TIMESTAMP</code>, the <code dir="ltr">TIME</code> portion of the Oracle <code dir="ltr">DATE</code> and the <code dir="ltr">TIMESTAMP</code> are set to zero. When assigning an Oracle <code dir="ltr">DATE</code> or a <code dir="ltr">TIMESTAMP</code> to an ANSI <code dir="ltr">DATE</code>, the <code dir="ltr">TIME</code> portion is ignored.</p>
</li>
<li>
<p>When assigning a <code dir="ltr">DATETIME</code> to a character string, the <code dir="ltr">DATETIME</code> is converted using the session&#39;s default <code dir="ltr">DATETIME</code> format. When assigning a character string to a <code dir="ltr">DATETIME</code>, the string must contain a valid <code dir="ltr">DATETIME</code> value based on the session&#39;s default <code dir="ltr">DATETIME</code> format.</p>
</li>
<li>
<p>When assigning a character string to an <code dir="ltr">INTERVAL</code>, the character string must be a valid <code dir="ltr">INTERVAL</code> character format.</p>
</li>
<li>
<p>When converting from <code dir="ltr">TSLTZ</code> to <code dir="ltr">CHAR</code>, <code dir="ltr">DATE</code>, <code dir="ltr">TIMESTAMP</code> and <code dir="ltr">TSTZ</code>, the value is adjusted to the session time zone.</p>
</li>
<li>
<p>When converting from <code dir="ltr">CHAR</code>, <code dir="ltr">DATE</code>, and <code dir="ltr">TIMESTAMP</code> to <code dir="ltr">TSLTZ</code>, the session time zone is stored in memory.</p>
</li>
<li>
<p>When assigning <code dir="ltr">TSLTZ</code> to <code dir="ltr">ANSI</code> <code dir="ltr">DATE</code>, the time portion is <code dir="ltr">0</code>.</p>
</li>
<li>
<p>When converting from <code dir="ltr">TSTZ</code>, the time zone that the time stamp is in is stored in memory.</p>
</li>
<li>
<p>When assigning a character string to an interval, the character string must be a valid interval character format.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2196">
<tr>
<td class="cellalignment2205">
<table class="cellalignment2201">
<tr>
<td class="cellalignment2200"><a href="objects.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2200"><a href="metadata.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2208">
<table class="cellalignment2199">
<tr>
<td class="cellalignment2200"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2200"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2200"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2200"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2200"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2200"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>