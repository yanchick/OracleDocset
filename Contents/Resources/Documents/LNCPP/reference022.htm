<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-73925"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Number%20Class"></a><title>Number Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1082"/>
<meta name="dcterms.created" content="2016-06-01T12:8:12Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="C++ Call Interface Programmer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E48221-07"/>
<meta name="dcterms.isVersionOf" content="LNCPP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="reference021.htm" title="Previous" type="text/html"/>
<link rel="Next" href="reference023.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48221-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">42/54</span> <!-- End Header --><a id="i1018892"></a>
<div id="LNCPP1015" class="refsect1">
<h1 class="refsect1">Numb<a id="sthref845"></a><a id="sthref846"></a><a id="sthref847"></a>er Class</h1>
<p>The <code dir="ltr">Number</code> class handles limited-precision signed base <code dir="ltr">10</code> numbers. A <code dir="ltr">Number</code> guarantees <code dir="ltr">38</code> decimal digits of precision. All positive numbers in the range displayed here can be represented to a full <code dir="ltr">38</code>-digit precision:</p>
<pre dir="ltr">10^-130
</pre>
<p>and</p>
<pre dir="ltr">9.99999999999999999999999999999999999999*10^125 
</pre>
<p>The range of representable negative numbers is symmetrical.</p>
<p>The number zero can be represented exactly. Also, Oracle numbers have representations for positive and negative infinity. These are generally used to indicate overflow.</p>
<p>The internal storage type is opaque and private. Scale is not preserved when <code dir="ltr">Number</code> instances are created.</p>
<p><code dir="ltr">Number</code> does not support the concept of NaN and is not IEEE-754-85 compliant. <code dir="ltr">Number</code> does support +Infinity and -Infinity.</p>
<p>Objects from the <code dir="ltr">Number</code> class can be used as standalone class objects in client side numeric computations. They can also be used to fetch from and set to the database.</p>
<div id="LNCPP21224" class="example">
<p class="titleinexample"><a id="sthref848"></a>Example 13-10 <a id="sthref849"></a><a id="sthref850"></a>How to Retrieve and Use a Number Object</p>
<p>This example demonstrates a <code dir="ltr">Number</code> column value being retrieved from the database, a bind using a <code dir="ltr">Number</code> object, and a comparison using a standalone <code dir="ltr">Number</code> object.</p>
<pre dir="ltr">/* Create a connection */
Environment *env = Environment::createEnvironment(Environment::DEFAULT);
Connection *conn = Connection(user, passwd, db);

/* Create a statement and associate a select clause with it */
string sqlStmt = &#34;SELECT department_id FROM DEPARTMENTS&#34;;
Statement *stmt = conn-&gt;createStatement(sqlStmt);

/* Run the statement to get a result set */
ResultSet *rset = stmt-&gt;executeQuery();
while(rset-&gt;next())
{
   Number deptId = rset-&gt;getNumber(1);
   /* Display the department id with the format string 9,999 */
   cout &lt;&lt; &#34;Department Id&#34; &lt;&lt; deptId.toText(env, &#34;9,999&#34;);

   /* Use the number obtained as a bind value in the following query */
   stmt-&gt;setSQL(&#34;SELECT * FROM EMPLOYEES WHERE department_id = :x&#34;);
   stmt-&gt;setNumber(1, deptId);
   ResultSet *rset2 = stmt-&gt;executeQuery();
   .
   .
}
/* Using a Number object as a standalone and the operations on them */

/* Create a number to a double value */
double value = 2345.123;
Number nu1 (value);

/* Some common Number methods */
Number abs = nu1.abs();    /* absolute value */
Number sqrt = nu1.squareroot();    /* square root */
Environment *env = Environment::createEnvironment();

//create a null year-month interval
IntervalYM ym
if(ym.isNull())
   cout &lt;&lt; &#34;\n ym is null&#34;;

//assign a non null value to ym
IntervalYM anotherYM(env, &#34;10-30&#34;);
ym = anotherYM;

//now all operations are valid on ym
int yr = ym.getYear();
</pre></div>
<!-- class="example" -->
<div id="LNCPP21225" class="tblformal">
<p class="titleintable"><a id="sthref851"></a><a id="sthref852"></a>Table 13-30 Summary of <a id="sthref853"></a><a id="sthref854"></a>Number Methods</p>
<table class="cellalignment2203" title="Summary of Number Methods " summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t298">Method</th>
<th class="cellalignment2204" id="r1c2-t298">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t298" headers="r1c1-t298">
<p><a href="#i1146030">Number()</a></p>
</td>
<td class="cellalignment2205" headers="r2c1-t298 r1c2-t298">
<p><code dir="ltr">Number</code> class constructor.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t298" headers="r1c1-t298">
<p><a href="#i1093419">abs()</a></p>
</td>
<td class="cellalignment2205" headers="r3c1-t298 r1c2-t298">
<p>Returns the absolute value of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t298" headers="r1c1-t298">
<p><a href="#i1071625">arcCos()</a></p>
</td>
<td class="cellalignment2205" headers="r4c1-t298 r1c2-t298">
<p>Returns the arcCosine of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t298" headers="r1c1-t298">
<p><a href="#i1071631">arcSin()</a></p>
</td>
<td class="cellalignment2205" headers="r5c1-t298 r1c2-t298">
<p>Returns the arcSine of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t298" headers="r1c1-t298">
<p><a href="#i1071637">arcTan()</a></p>
</td>
<td class="cellalignment2205" headers="r6c1-t298 r1c2-t298">
<p>Returns the arcTangent of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t298" headers="r1c1-t298">
<p><a href="#i1071643">arcTan2()</a></p>
</td>
<td class="cellalignment2205" headers="r7c1-t298 r1c2-t298">
<p>Returns the arcTangent2 of the input number <code dir="ltr">y</code> and this number <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t298" headers="r1c1-t298">
<p><a href="#i1071649">ceil()</a></p>
</td>
<td class="cellalignment2205" headers="r8c1-t298 r1c2-t298">
<p>Returns the smallest integral value not less than the value of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t298" headers="r1c1-t298">
<p><a href="#i1071655">cos()</a></p>
</td>
<td class="cellalignment2205" headers="r9c1-t298 r1c2-t298">
<p>Returns the cosine of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t298" headers="r1c1-t298">
<p><a href="#i1117513">exp()</a></p>
</td>
<td class="cellalignment2205" headers="r10c1-t298 r1c2-t298">
<p>Returns the natural exponent of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t298" headers="r1c1-t298">
<p><a href="#i1071667">floor()</a></p>
</td>
<td class="cellalignment2205" headers="r11c1-t298 r1c2-t298">
<p>Returns the largest integral value not greater than the value of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t298" headers="r1c1-t298">
<p><a href="#i1101520">fromBytes()</a></p>
</td>
<td class="cellalignment2205" headers="r12c1-t298 r1c2-t298">
<p>Returns a Number derived from a <code dir="ltr">Bytes</code> object.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t298" headers="r1c1-t298">
<p><a href="#i1071673">fromText()</a></p>
</td>
<td class="cellalignment2205" headers="r13c1-t298 r1c2-t298">
<p>Returns a Number from a given number string, format string and NLS parameters specified.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t298" headers="r1c1-t298">
<p><a href="#i1071692">hypCos()</a></p>
</td>
<td class="cellalignment2205" headers="r14c1-t298 r1c2-t298">
<p>Returns the hyperbolic cosine of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t298" headers="r1c1-t298">
<p><a href="#i1071698">hypSin()</a></p>
</td>
<td class="cellalignment2205" headers="r15c1-t298 r1c2-t298">
<p>Returns the hyperbolic sine of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r16c1-t298" headers="r1c1-t298">
<p><a href="#i1071704">hypTan()</a></p>
</td>
<td class="cellalignment2205" headers="r16c1-t298 r1c2-t298">
<p>Returns the hyperbolic tangent of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r17c1-t298" headers="r1c1-t298">
<p><a href="#i1093399">intPower()</a></p>
</td>
<td class="cellalignment2205" headers="r17c1-t298 r1c2-t298">
<p>Returns the number raised to the integer value specified.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r18c1-t298" headers="r1c1-t298">
<p><a href="#i1071717">isNull()</a></p>
</td>
<td class="cellalignment2205" headers="r18c1-t298 r1c2-t298">
<p>Checks if <code dir="ltr">Number</code> is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r19c1-t298" headers="r1c1-t298">
<p><a href="#i1093161">ln()</a></p>
</td>
<td class="cellalignment2205" headers="r19c1-t298 r1c2-t298">
<p>Returns the natural logarithm of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r20c1-t298" headers="r1c1-t298">
<p><a href="#i1071722">log()</a></p>
</td>
<td class="cellalignment2205" headers="r20c1-t298 r1c2-t298">
<p>Returns the logarithm of the number to the base value specified.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r21c1-t298" headers="r1c1-t298">
<p><a href="#i1106615">operator++()</a></p>
</td>
<td class="cellalignment2205" headers="r21c1-t298 r1c2-t298">
<p>Increments the <code dir="ltr">number</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r22c1-t298" headers="r1c1-t298">
<p><a href="#CACFAJBA">--</a></p>
</td>
<td class="cellalignment2205" headers="r22c1-t298 r1c2-t298">
<p>Decrements the n<code dir="ltr">umber</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r23c1-t298" headers="r1c1-t298">
<p><a href="#i1071800">operator*()</a></p>
</td>
<td class="cellalignment2205" headers="r23c1-t298 r1c2-t298">
<p>Returns the product of two <code dir="ltr">Number</code>s.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r24c1-t298" headers="r1c1-t298">
<p><a href="#i1071806">operator/()</a></p>
</td>
<td class="cellalignment2205" headers="r24c1-t298 r1c2-t298">
<p>Returns the quotient of two <code dir="ltr">Number</code>s.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r25c1-t298" headers="r1c1-t298">
<p><a href="#i1071812">operator%()</a></p>
</td>
<td class="cellalignment2205" headers="r25c1-t298 r1c2-t298">
<p>Returns the modulo of two <code dir="ltr">Number</code>s.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r26c1-t298" headers="r1c1-t298">
<p><a href="#i1071818">operator+()</a></p>
</td>
<td class="cellalignment2205" headers="r26c1-t298 r1c2-t298">
<p>Returns the sum of two <code dir="ltr">Number</code>s.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r27c1-t298" headers="r1c1-t298">
<p><a href="#i1106087">operator-()</a></p>
</td>
<td class="cellalignment2205" headers="r27c1-t298 r1c2-t298">
<p>Returns the negated value of <code dir="ltr">Number.</code></p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r28c1-t298" headers="r1c1-t298">
<p><a href="#i1106087">operator-()</a></p>
</td>
<td class="cellalignment2205" headers="r28c1-t298 r1c2-t298">
<p>Returns the difference between two <code dir="ltr">Number</code>s.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r29c1-t298" headers="r1c1-t298">
<p><a href="#i1071830">operator&lt;()</a></p>
</td>
<td class="cellalignment2205" headers="r29c1-t298 r1c2-t298">
<p>Checks if a number is less than an other number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r30c1-t298" headers="r1c1-t298">
<p><a href="#i1071836">operator&lt;=()</a></p>
</td>
<td class="cellalignment2205" headers="r30c1-t298 r1c2-t298">
<p>Checks if a number is less than or equal to an other number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r31c1-t298" headers="r1c1-t298">
<p><a href="#i1071842">operator&gt;()</a></p>
</td>
<td class="cellalignment2205" headers="r31c1-t298 r1c2-t298">
<p>Checks if a number is greater than an other number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r32c1-t298" headers="r1c1-t298">
<p><a href="reference013.htm#i1091852">operator&gt;=()</a></p>
</td>
<td class="cellalignment2205" headers="r32c1-t298 r1c2-t298">
<p>Checks if a number is greater than or equal to an other number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r33c1-t298" headers="r1c1-t298">
<p><a href="reference013.htm#i1070454">operator=()</a></p>
</td>
<td class="cellalignment2205" headers="r33c1-t298 r1c2-t298">
<p>Assigns one number to another.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r34c1-t298" headers="r1c1-t298">
<p><a href="reference013.htm#i1070460">operator==()</a></p>
</td>
<td class="cellalignment2205" headers="r34c1-t298 r1c2-t298">
<p>Checks if two numbers are equal.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r35c1-t298" headers="r1c1-t298">
<p><a href="reference013.htm#i1070466">operator!=()</a></p>
</td>
<td class="cellalignment2205" headers="r35c1-t298 r1c2-t298">
<p>Checks if two numbers are not equal.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r36c1-t298" headers="r1c1-t298">
<p><a href="reference015.htm#i1107469">operator*=()</a></p>
</td>
<td class="cellalignment2205" headers="r36c1-t298 r1c2-t298">
<p>Multiplication assignment.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r37c1-t298" headers="r1c1-t298">
<p><a href="reference015.htm#i1107484">operator/=()</a></p>
</td>
<td class="cellalignment2205" headers="r37c1-t298 r1c2-t298">
<p>Division assignment.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r38c1-t298" headers="r1c1-t298">
<p><a href="#i1071886">operator%=()</a></p>
</td>
<td class="cellalignment2205" headers="r38c1-t298 r1c2-t298">
<p>Modulo assignment.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r39c1-t298" headers="r1c1-t298">
<p><a href="#i1071892">operator+=()</a></p>
</td>
<td class="cellalignment2205" headers="r39c1-t298 r1c2-t298">
<p>Addition assignment.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r40c1-t298" headers="r1c1-t298">
<p><a href="#CACEACFE">-=</a></p>
</td>
<td class="cellalignment2205" headers="r40c1-t298 r1c2-t298">
<p>Subtraction assignment.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r41c1-t298" headers="r1c1-t298">
<p><a href="#i1071904">operator char()</a></p>
</td>
<td class="cellalignment2205" headers="r41c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to native char.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r42c1-t298" headers="r1c1-t298">
<p><a href="#i1130327">operator signed char()</a></p>
</td>
<td class="cellalignment2205" headers="r42c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to native signed char.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r43c1-t298" headers="r1c1-t298">
<p><a href="#i1071910">operator double()</a></p>
</td>
<td class="cellalignment2205" headers="r43c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to a native double.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r44c1-t298" headers="r1c1-t298">
<p><a href="#i1071916">operator float()</a></p>
</td>
<td class="cellalignment2205" headers="r44c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to a native float.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r45c1-t298" headers="r1c1-t298">
<p><a href="#i1071922">operator int()</a></p>
</td>
<td class="cellalignment2205" headers="r45c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to native integer.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r46c1-t298" headers="r1c1-t298">
<p><a href="#i1071928">operator long()</a></p>
</td>
<td class="cellalignment2205" headers="r46c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to native long.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r47c1-t298" headers="r1c1-t298">
<p><a href="#i1071934">operator long double()</a></p>
</td>
<td class="cellalignment2205" headers="r47c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to a native long double.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r48c1-t298" headers="r1c1-t298">
<p><a href="#i1071940">operator short()</a></p>
</td>
<td class="cellalignment2205" headers="r48c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to native short integer.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r49c1-t298" headers="r1c1-t298">
<p><a href="#i1071946">operator unsigned char()</a></p>
</td>
<td class="cellalignment2205" headers="r49c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to an unsigned native char.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r50c1-t298" headers="r1c1-t298">
<p><a href="#i1093423">operator unsigned int()</a></p>
</td>
<td class="cellalignment2205" headers="r50c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to an unsigned native integer.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r51c1-t298" headers="r1c1-t298">
<p><a href="#i1071952">operator unsigned long()</a></p>
</td>
<td class="cellalignment2205" headers="r51c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to an unsigned native long.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r52c1-t298" headers="r1c1-t298">
<p><a href="#i1093430">operator unsigned short()</a></p>
</td>
<td class="cellalignment2205" headers="r52c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> converted to an unsigned native short integer.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r53c1-t298" headers="r1c1-t298">
<p><a href="#i1071975">power()</a></p>
</td>
<td class="cellalignment2205" headers="r53c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> raised to the power of another number specified.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r54c1-t298" headers="r1c1-t298">
<p><a href="#i1096509">prec()</a></p>
</td>
<td class="cellalignment2205" headers="r54c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> rounded to digits of precision specified.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r55c1-t298" headers="r1c1-t298">
<p><a href="#i1071981">round()</a></p>
</td>
<td class="cellalignment2205" headers="r55c1-t298 r1c2-t298">
<p>Returns <code dir="ltr">Number</code> rounded to decimal place specified. Negative values are allowed.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r56c1-t298" headers="r1c1-t298">
<p><a href="#i1071987">setNull()</a></p>
</td>
<td class="cellalignment2205" headers="r56c1-t298 r1c2-t298">
<p>Sets <code dir="ltr">Number</code> to <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r57c1-t298" headers="r1c1-t298">
<p><a href="#i1071993">shift()</a></p>
</td>
<td class="cellalignment2205" headers="r57c1-t298 r1c2-t298">
<p>Returns a <code dir="ltr">Number</code> that is equivalent to the passed value <code dir="ltr">* 10^n</code>, where <code dir="ltr">n</code> may be positive or negative.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r58c1-t298" headers="r1c1-t298">
<p><a href="#i1071999">sign()</a></p>
</td>
<td class="cellalignment2205" headers="r58c1-t298 r1c2-t298">
<p>Returns the sign of the value of the passed value: -1 for the passed value &lt; 0, 0 for the passed value == 0, and 1 for the passed value &gt; 0.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r59c1-t298" headers="r1c1-t298">
<p><a href="#i1072005">sin()</a></p>
</td>
<td class="cellalignment2205" headers="r59c1-t298 r1c2-t298">
<p>Returns sine of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r60c1-t298" headers="r1c1-t298">
<p><a href="#i1072011">squareroot()</a></p>
</td>
<td class="cellalignment2205" headers="r60c1-t298 r1c2-t298">
<p>Returns the square root of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r61c1-t298" headers="r1c1-t298">
<p><a href="#i1072017">tan()</a></p>
</td>
<td class="cellalignment2205" headers="r61c1-t298 r1c2-t298">
<p>Returns tangent of the number.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r62c1-t298" headers="r1c1-t298">
<p><a href="#i1072023">toBytes()</a></p>
</td>
<td class="cellalignment2205" headers="r62c1-t298 r1c2-t298">
<p>Returns a <code dir="ltr">Bytes</code> object representing the <code dir="ltr">Number</code>.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r63c1-t298" headers="r1c1-t298">
<p><a href="#i1072029">toText()</a></p>
</td>
<td class="cellalignment2205" headers="r63c1-t298 r1c2-t298">
<p>Returns the number as a string formatted based on the format and NLS parameters.</p>
</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r64c1-t298" headers="r1c1-t298">
<p><a href="#i1072047">trunc()</a></p>
</td>
<td class="cellalignment2205" headers="r64c1-t298 r1c2-t298">
<p>Returns a <code dir="ltr">Number</code> with the value truncated at <code dir="ltr">n</code> decimal place(s). Negative values are allowed.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="LNCPP21226" class="refsect2"><a id="i1146030"></a>
<h2 class="refsect2">Number()</h2>
<p><code dir="ltr">Number</code> class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of Number() constructor" summary="First column lists versions of the constructor; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t299">Syntax</th>
<th class="cellalignment2204" id="r1c2-t299">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number();
</pre></td>
<td class="cellalignment2205" headers="r2c1-t299 r1c2-t299">Default constructor.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   const Number &amp;srcNum);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t299 r1c2-t299">Creates a copy of a <code dir="ltr">Number</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   long double &amp;val);
</pre></td>
<td class="cellalignment2205" headers="r4c1-t299 r1c2-t299">Translates a native long double into a <code dir="ltr">Number</code>. The <code dir="ltr">Number</code> is created using the precision of the platform-specific constant <code dir="ltr">LDBL_DIG</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   double val);
</pre></td>
<td class="cellalignment2205" headers="r5c1-t299 r1c2-t299">Translates a native double into a <code dir="ltr">Number</code>. The <code dir="ltr">Number</code> is created using the precision of the platform-specific constant <code dir="ltr">DBL_DIG</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r6c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   float val);
</pre></td>
<td class="cellalignment2205" headers="r6c1-t299 r1c2-t299">Translates a native float into a <code dir="ltr">Number</code>. The <code dir="ltr">Number</code> is created using the precision of the platform-specific constant <code dir="ltr">FLT_DIG</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r7c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   long val);
</pre></td>
<td class="cellalignment2205" headers="r7c1-t299 r1c2-t299">Translates a native long into a <code dir="ltr">Number</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r8c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   int val);
</pre></td>
<td class="cellalignment2205" headers="r8c1-t299 r1c2-t299">Translates a native int into a <code dir="ltr">Number</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r9c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   shot val);
</pre></td>
<td class="cellalignment2205" headers="r9c1-t299 r1c2-t299">Translates a native short into a <code dir="ltr">Number</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r10c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   char val);
</pre></td>
<td class="cellalignment2205" headers="r10c1-t299 r1c2-t299">Translates a native char into a <code dir="ltr">Number</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r11c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   signed char val);
</pre></td>
<td class="cellalignment2205" headers="r11c1-t299 r1c2-t299">Translates a native signed char into a <code dir="ltr">Number</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r12c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   unsigned long val);
</pre></td>
<td class="cellalignment2205" headers="r12c1-t299 r1c2-t299">Translates an native unsigned long into a <code dir="ltr">Number</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r13c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   unsigned int val);
</pre></td>
<td class="cellalignment2205" headers="r13c1-t299 r1c2-t299">Translates a native unsigned int into a <code dir="ltr">Number</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r14c1-t299" headers="r1c1-t299">
<pre dir="ltr">Number(
   unsigned short val);
</pre></td>
<td class="cellalignment2205" headers="r14c1-t299 r1c2-t299">Translates a native unsigned short into a <code dir="ltr">Number</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r15c1-t299" headers="r1c1-t299">
<pre dir="ltr"><a id="BBAGAHFH"></a>
Number(
   unsigned char val);
</pre></td>
<td class="cellalignment2205" headers="r15c1-t299 r1c2-t299">Translates the unsigned character array into a <code dir="ltr">Number</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of Number() constructor" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t300">Parameter</th>
<th class="cellalignment2204" id="r1c2-t300">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t300" headers="r1c1-t300">
<pre dir="ltr">srcNum
</pre></td>
<td class="cellalignment2205" headers="r2c1-t300 r1c2-t300">The source <code dir="ltr">Number</code> copied into the new <code dir="ltr">Number</code> object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t300" headers="r1c1-t300">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r3c1-t300 r1c2-t300">The value assigned to the <code dir="ltr">Number</code> object.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21227" class="refsect2"><a id="i1093419"></a>
<h2 class="refsect2">abs()</h2>
<p>This method returns the absolute value of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21228"></a>Syntax</p>
<pre dir="ltr">const Number abs() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21229" class="refsect2"><a id="i1071625"></a>
<h2 class="refsect2">arcCos()</h2>
<p>This method returns the arccosine of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21230"></a>Syntax</p>
<pre dir="ltr">const Number arcCos() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21231" class="refsect2"><a id="i1071631"></a>
<h2 class="refsect2">arcSin()</h2>
<p>This method returns the arcsine of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21232"></a>Syntax</p>
<pre dir="ltr">const Number arcSin() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21233" class="refsect2"><a id="i1071637"></a>
<h2 class="refsect2">arcTan()</h2>
<p>This method returns the arctangent of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21234"></a>Syntax</p>
<pre dir="ltr">const Number arcTan() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21235" class="refsect2"><a id="i1071643"></a>
<h2 class="refsect2">arcTan2()</h2>
<p>This method returns the arctangent of the <code dir="ltr">Number</code> object with the parameter specified. It returns <code dir="ltr">atan2 (val, x)</code> where <code dir="ltr">val</code> is the parameter specified and <code dir="ltr">x</code> is the current number object.</p>
<p class="subhead1"><a id="LNCPP21236"></a>Syntax</p>
<pre dir="ltr">const Number arcTan2(
   const Number &amp;val) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of arcTan2() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t301">Parameter</th>
<th class="cellalignment2204" id="r1c2-t301">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t301" headers="r1c1-t301">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r2c1-t301 r1c2-t301">Number parameter <code dir="ltr">val</code> to the arcTangent function <code dir="ltr">atan2(val,x)</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21237" class="refsect2"><a id="i1071649"></a>
<h2 class="refsect2">ceil()</h2>
<p>This method returns the smallest integer that is greater than or equal to the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21238"></a>Syntax</p>
<pre dir="ltr">const Number ceil() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21239" class="refsect2"><a id="i1071655"></a>
<h2 class="refsect2">cos()</h2>
<p>This method returns the cosine of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21240"></a>Syntax</p>
<pre dir="ltr">const Number cos() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21241" class="refsect2"><a id="i1117513"></a>
<h2 class="refsect2">exp()</h2>
<p>This method returns the natural exponential of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21242"></a>Syntax</p>
<pre dir="ltr">const Number exp() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21243" class="refsect2"><a id="i1071667"></a>
<h2 class="refsect2">floor()</h2>
<p>This method returns the largest integer that is less than or equal to the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21244"></a>Syntax</p>
<pre dir="ltr">const Number floor() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21245" class="refsect2"><a id="i1101520"></a>
<h2 class="refsect2">fromBytes()</h2>
<p>This method returns a <code dir="ltr">Number</code> object represented by the byte string specified.</p>
<p class="subhead1"><a id="LNCPP21246"></a>Syntax</p>
<pre dir="ltr">void fromBytes(
   const Bytes &amp;str);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of fromBytes() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t302">Parameter</th>
<th class="cellalignment2204" id="r1c2-t302">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t302" headers="r1c1-t302">
<pre dir="ltr">str
</pre></td>
<td class="cellalignment2205" headers="r2c1-t302 r1c2-t302">A byte string.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21247" class="refsect2"><a id="i1071673"></a>
<h2 class="refsect2">fromText()</h2>
<p>Sets <code dir="ltr">Number</code> object to value represented by a <code dir="ltr">string</code> or <code dir="ltr">UString</code>.</p>
<p>The value is interpreted based on the <code dir="ltr">fmt</code> and <code dir="ltr">nlsParam</code> parameters. In cases where <code dir="ltr">nlsParam</code> is not passed, the Globalization Support settings of the <code dir="ltr">envp</code> parameter are used.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for information on <a class="olink SQLRF06140" href="../SQLRF/functions227.htm#SQLRF06140"><code dir="ltr">TO_NUMBER</code></a></div>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of toTextt() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t304">Syntax</th>
<th class="cellalignment2204" id="r1c2-t304">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t304" headers="r1c1-t304">
<pre dir="ltr">void fromText(
   const Environment *envp,
   const string &amp;number,
   const string &amp;fmt,
   const string &amp;nlsParam = &#34;&#34;);
</pre></td>
<td class="cellalignment2205" headers="r2c1-t304 r1c2-t304">Sets <code dir="ltr">Number</code> object to value represented by a <code dir="ltr">string</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t304" headers="r1c1-t304">
<pre dir="ltr">void fromText(
   const Environment *envp,
   const UString &amp;number,
   const UString &amp;fmt,
   const UString &amp;nlsParam);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t304 r1c2-t304">Sets <code dir="ltr">Number</code> object to value represented by a <code dir="ltr">UString</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of toText() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t305">Parameter</th>
<th class="cellalignment2204" id="r1c2-t305">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t305" headers="r1c1-t305">
<pre dir="ltr">envp
</pre></td>
<td class="cellalignment2205" headers="r2c1-t305 r1c2-t305">The OCCI environment.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t305" headers="r1c1-t305">
<pre dir="ltr">number
</pre></td>
<td class="cellalignment2205" headers="r3c1-t305 r1c2-t305">The number string to be converted to a <code dir="ltr">Number</code> object.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t305" headers="r1c1-t305">
<pre dir="ltr">fmt
</pre></td>
<td class="cellalignment2205" headers="r4c1-t305 r1c2-t305">The format string.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r5c1-t305" headers="r1c1-t305">
<pre dir="ltr">nlsParam
</pre></td>
<td class="cellalignment2205" headers="r5c1-t305 r1c2-t305">The NLS parameters string. If <code dir="ltr">nlsParam</code> is specified, this determines the NLS parameters to be used for the conversion. If <code dir="ltr">nlsParam</code> is not specified, the NLS parameters are picked up from <code dir="ltr">envp</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21248" class="refsect2"><a id="i1071692"></a>
<h2 class="refsect2">hypCos()</h2>
<p>This method returns the hypercosine of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21249"></a>Syntax</p>
<pre dir="ltr">const Number hypCos() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21250" class="refsect2"><a id="i1071698"></a>
<h2 class="refsect2">hypSin()</h2>
<p>This method returns the hypersine of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21251"></a>Syntax</p>
<pre dir="ltr">const Number hypSin() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21252" class="refsect2"><a id="i1071704"></a>
<h2 class="refsect2">hypTan()</h2>
<p>This method returns the hypertangent of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21253"></a>Syntax</p>
<pre dir="ltr">const Number hypTan() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21254" class="refsect2"><a id="i1093399"></a>
<h2 class="refsect2">intPower()</h2>
<p>This method returns a <code dir="ltr">Number</code> whose value is the number object raised to the power of the value specified.</p>
<p class="subhead1"><a id="LNCPP21255"></a>Syntax</p>
<pre dir="ltr">const Number intPower(
   int val) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of intPower() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t306">Parameter</th>
<th class="cellalignment2204" id="r1c2-t306">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t306" headers="r1c1-t306">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r2c1-t306 r1c2-t306">Power to which the number is raised.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21256" class="refsect2"><a id="i1071717"></a>
<h2 class="refsect2">isNull()</h2>
<p>This method tests whether the <code dir="ltr">Number</code> object is <code dir="ltr">NULL</code>. If the <code dir="ltr">Number</code> object is <code dir="ltr">NULL</code>, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21257"></a>Syntax</p>
<pre dir="ltr">bool isNull() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21258" class="refsect2"><a id="i1093161"></a>
<h2 class="refsect2">ln()</h2>
<p>This method returns the natural logarithm of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21259"></a>Syntax</p>
<pre dir="ltr">const Number ln() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21260" class="refsect2"><a id="i1071722"></a>
<h2 class="refsect2">log()</h2>
<p>This method returns the logarithm of the <code dir="ltr">Number</code> object with the base provided by the parameter specified.</p>
<p class="subhead1"><a id="LNCPP21261"></a>Syntax</p>
<pre dir="ltr">const Number log(
   const Number &amp;val) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of log() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t307">Parameter</th>
<th class="cellalignment2204" id="r1c2-t307">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t307" headers="r1c1-t307">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r2c1-t307 r1c2-t307">The base to be used in the logarithm calculation.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21262" class="refsect2"><a id="i1106615"></a>
<h2 class="refsect2">operator++()</h2>
<p>Unary <code dir="ltr">operator++()</code>. This is a postfix operator.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of operator++() method" summary="First column lists method versions; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t308">Syntax</th>
<th class="cellalignment2204" id="r1c2-t308">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t308" headers="r1c1-t308">
<pre dir="ltr">Number&amp; operator++();
</pre></td>
<td class="cellalignment2205" headers="r2c1-t308 r1c2-t308">This method returns the <code dir="ltr">Number</code> object incremented by <code dir="ltr">1</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t308" headers="r1c1-t308">
<pre dir="ltr">const Number operator++(
   int incr);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t308 r1c2-t308">This method returns the <code dir="ltr">Number</code> object incremented by the integer specified.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator++() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t309">Parameter</th>
<th class="cellalignment2204" id="r1c2-t309">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t309" headers="r1c1-t309">
<pre dir="ltr"><a id="BBAEBABD"></a>
incr
</pre></td>
<td class="cellalignment2205" headers="r2c1-t309 r1c2-t309">The number by which the <code dir="ltr">Number</code> object is incremented.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21263" class="refsect2"><a id="CACFAJBA"></a>
<h2 class="refsect2">operator<a id="i1071794"></a><code dir="ltr">--</code>()</h2>
<p>Unary <code dir="ltr">operator--()</code>. This is a prefix operator.</p>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of operator--() method" summary="First column lists method versions; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t310">Syntax</th>
<th class="cellalignment2204" id="r1c2-t310">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t310" headers="r1c1-t310">
<pre dir="ltr">Number&amp; operator--();
</pre></td>
<td class="cellalignment2205" headers="r2c1-t310 r1c2-t310">This method returns the <code dir="ltr">Number</code> object decremented by <code dir="ltr">1</code>.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t310" headers="r1c1-t310">
<pre dir="ltr">const Number operator--(
   int decr);
</pre></td>
<td class="cellalignment2205" headers="r3c1-t310 r1c2-t310">This method returns the <code dir="ltr">Number</code> object decremented by the integer specified.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator--() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t311">Parameter</th>
<th class="cellalignment2204" id="r1c2-t311">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t311" headers="r1c1-t311">
<pre dir="ltr">decr
</pre></td>
<td class="cellalignment2205" headers="r2c1-t311 r1c2-t311">The number by which the Number object is decremented.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21264" class="refsect2"><a id="i1071800"></a>
<h2 class="refsect2">operator*()</h2>
<p>This method returns the product of the parameters specified.</p>
<p class="subhead1"><a id="LNCPP21265"></a>Syntax</p>
<pre dir="ltr">Number operator*(
   const Number &amp;first,
</pre>
<pre dir="ltr">   const Number &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator*() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t312">Parameter</th>
<th class="cellalignment2204" id="r1c2-t312">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t312" headers="r1c1-t312">
<pre dir="ltr">first
</pre></td>
<td class="cellalignment2205" headers="r2c1-t312 r1c2-t312">First multiplicand.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t312" headers="r1c1-t312">
<pre dir="ltr">second
</pre></td>
<td class="cellalignment2205" headers="r3c1-t312 r1c2-t312">Second multiplicand.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21266" class="refsect2"><a id="i1071806"></a>
<h2 class="refsect2">operator/()</h2>
<p>This method returns the quotient of the parameters specified.</p>
<p class="subhead1"><a id="LNCPP21267"></a>Syntax</p>
<pre dir="ltr">Number operator/(
   const Number &amp;dividend,
   const Number &amp;divisor);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator/() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t313">Parameter</th>
<th class="cellalignment2204" id="r1c2-t313">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t313" headers="r1c1-t313">
<pre dir="ltr">dividend
</pre></td>
<td class="cellalignment2205" headers="r2c1-t313 r1c2-t313">The number to be divided.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t313" headers="r1c1-t313">
<pre dir="ltr">divisor
</pre></td>
<td class="cellalignment2205" headers="r3c1-t313 r1c2-t313">The number by which to divide.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21268" class="refsect2"><a id="i1071812"></a>
<h2 class="refsect2">operator%()</h2>
<p>This method returns the remainder of the division of the parameters specified.</p>
<p class="subhead1"><a id="LNCPP21269"></a>Syntax</p>
<pre dir="ltr">Number operator%(
   const Number &amp;dividend,
   const Number &amp;divider);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator%() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t314">Parameter</th>
<th class="cellalignment2204" id="r1c2-t314">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t314" headers="r1c1-t314">
<pre dir="ltr">dividend
</pre></td>
<td class="cellalignment2205" headers="r2c1-t314 r1c2-t314">The number to be divided.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t314" headers="r1c1-t314">
<pre dir="ltr">divizor
</pre></td>
<td class="cellalignment2205" headers="r3c1-t314 r1c2-t314">The number by which to divide.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21270" class="refsect2"><a id="i1071818"></a>
<h2 class="refsect2">operator+()</h2>
<p>This method returns the sum of the parameters specified.</p>
<p class="subhead1"><a id="LNCPP21271"></a>Syntax</p>
<pre dir="ltr">Number operator+(
   const Number &amp;first,
   const Number &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator+() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t315">Parameter</th>
<th class="cellalignment2204" id="r1c2-t315">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t315" headers="r1c1-t315">
<pre dir="ltr">first
</pre></td>
<td class="cellalignment2205" headers="r2c1-t315 r1c2-t315">First number to be added.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t315" headers="r1c1-t315">
<pre dir="ltr">second
</pre></td>
<td class="cellalignment2205" headers="r3c1-t315 r1c2-t315">Second number to be added.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21272" class="refsect2"><a id="i1106087"></a>
<h2 class="refsect2">operator-()</h2>
<p>Unary <code dir="ltr">operator-()</code>. This method returns the negated value of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21273"></a>Syntax</p>
<pre dir="ltr">const Number operator-();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21274" class="refsect2"><a id="i1106053"></a>
<h2 class="refsect2">operator-()</h2>
<p>This method returns the difference between the parameters specified.</p>
<p class="subhead1"><a id="LNCPP21275"></a>Syntax</p>
<pre dir="ltr">Number operator-(
   const Number &amp;subtrahend,
   const Number &amp;subtractor);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator-() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t316">Parameter</th>
<th class="cellalignment2204" id="r1c2-t316">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t316" headers="r1c1-t316">
<pre dir="ltr">subtrahend
</pre></td>
<td class="cellalignment2205" headers="r2c1-t316 r1c2-t316">The number to be reduced.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t316" headers="r1c1-t316">
<pre dir="ltr">subtractor
</pre></td>
<td class="cellalignment2205" headers="r3c1-t316 r1c2-t316">The number to be subtracted.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21276" class="refsect2"><a id="i1071830"></a>
<h2 class="refsect2">operator&lt;()</h2>
<p>This method checks whether the first parameter specified is less than the second parameter specified. If the first parameter is less than the second parameter, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned. If either parameter equals infinity, then <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21277"></a>Syntax</p>
<pre dir="ltr">bool operator&lt;(
   const Number &amp;first,
   const Number &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator&lt;() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t317">Parameter</th>
<th class="cellalignment2204" id="r1c2-t317">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t317" headers="r1c1-t317">
<pre dir="ltr">first
</pre></td>
<td class="cellalignment2205" headers="r2c1-t317 r1c2-t317">First number to be compared.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t317" headers="r1c1-t317">
<pre dir="ltr">second
</pre></td>
<td class="cellalignment2205" headers="r3c1-t317 r1c2-t317">Second number to be compared.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21278" class="refsect2"><a id="i1071836"></a>
<h2 class="refsect2">operator&lt;=()</h2>
<p>This method checks whether the first parameter specified is less than or equal to the second parameter specified. If the first parameter is less than or equal to the second parameter, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned. If either <code dir="ltr">parameter</code> equals infinity, then <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21279"></a>Syntax</p>
<pre dir="ltr">bool operator&lt;=(
   const Number &amp;first,
   const Number &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator&lt;=() method" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t318">Parameter</th>
<th class="cellalignment2204" id="r1c2-t318">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t318" headers="r1c1-t318">
<pre dir="ltr">first
</pre></td>
<td class="cellalignment2205" headers="r2c1-t318 r1c2-t318">First number to be compared.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t318" headers="r1c1-t318">
<pre dir="ltr">second
</pre></td>
<td class="cellalignment2205" headers="r3c1-t318 r1c2-t318">Second number to be compared.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21280" class="refsect2"><a id="i1071842"></a>
<h2 class="refsect2">operator&gt;()</h2>
<p>This method checks whether the first parameter specified is greater than the second parameter specified. If the first parameter is greater than the second parameter, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned. If either parameter equals infinity, then <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21281"></a>Syntax</p>
<pre dir="ltr">bool operator&gt;(
   const Number &amp;first,
   const Number &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator&gt;() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t319">Parameter</th>
<th class="cellalignment2204" id="r1c2-t319">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t319" headers="r1c1-t319">
<pre dir="ltr">first
</pre></td>
<td class="cellalignment2205" headers="r2c1-t319 r1c2-t319">First number to be compared.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t319" headers="r1c1-t319">
<pre dir="ltr">second
</pre></td>
<td class="cellalignment2205" headers="r3c1-t319 r1c2-t319">Second number to be compared.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21282" class="refsect2"><a id="i1071848"></a>
<h2 class="refsect2">operator&gt;=()</h2>
<p>This method checks whether the first parameter specified is greater than or equal to the second parameter specified. If the first parameter is greater than or equal to the second parameter, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned. If either parameter equals infinity, then <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21283"></a>Syntax</p>
<pre dir="ltr">bool operator&gt;=(
   const Number &amp;first,
   const Number &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator&gt;=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t320">Parameter</th>
<th class="cellalignment2204" id="r1c2-t320">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t320" headers="r1c1-t320">
<pre dir="ltr">first
</pre></td>
<td class="cellalignment2205" headers="r2c1-t320 r1c2-t320">First number to be compared.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t320" headers="r1c1-t320">
<pre dir="ltr">second
</pre></td>
<td class="cellalignment2205" headers="r3c1-t320 r1c2-t320">Second number to be compared.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21284" class="refsect2"><a id="i1071856"></a>
<h2 class="refsect2">operator==()</h2>
<p>This method checks whether the parameters specified are equal. If the parameters are equal, then <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned. If either parameter equals +infinity or -infinity, then <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21285"></a>Syntax</p>
<pre dir="ltr">bool operator==(
   const Number &amp;first,
   const Number &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator==() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t321">Parameter</th>
<th class="cellalignment2204" id="r1c2-t321">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t321" headers="r1c1-t321">
<pre dir="ltr">first
</pre></td>
<td class="cellalignment2205" headers="r2c1-t321 r1c2-t321">First number to be compared.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t321" headers="r1c1-t321">
<pre dir="ltr">second
</pre></td>
<td class="cellalignment2205" headers="r3c1-t321 r1c2-t321">Second number to be compared.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21286" class="refsect2"><a id="i1071862"></a>
<h2 class="refsect2">operator!=()</h2>
<p>This method checks whether the first parameter specified equals the second parameter specified. If the parameters are not equal, <code dir="ltr">TRUE</code> is returned; otherwise, <code dir="ltr">FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21287"></a>Syntax</p>
<pre dir="ltr">bool operator!=(
   const Number &amp;first,
   const Number &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator!=() method" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t322">Parameter</th>
<th class="cellalignment2204" id="r1c2-t322">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t322" headers="r1c1-t322">
<pre dir="ltr">first
</pre></td>
<td class="cellalignment2205" headers="r2c1-t322 r1c2-t322">First number to be compared.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t322" headers="r1c1-t322">
<pre dir="ltr">second
</pre></td>
<td class="cellalignment2205" headers="r3c1-t322 r1c2-t322">Second number to be compared.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21288" class="refsect2"><a id="i1071868"></a>
<h2 class="refsect2">operator=()</h2>
<p>This method assigns the value of the parameter specified to the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21289"></a>Syntax</p>
<pre dir="ltr">Number&amp; operator=(
   const Number &amp;num);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t323">Parameter</th>
<th class="cellalignment2204" id="r1c2-t323">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t323" headers="r1c1-t323">
<pre dir="ltr">num
</pre></td>
<td class="cellalignment2205" headers="r2c1-t323 r1c2-t323">A parameter of type <code dir="ltr">Number</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21290" class="refsect2"><a id="i1071874"></a>
<h2 class="refsect2">operator*=()</h2>
<p>This method multiplies the <code dir="ltr">Number</code> object by the parameter specified, and assigns the product to the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21291"></a>Syntax</p>
<pre dir="ltr">Number&amp; operator*=(
   const Number &amp;num);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator*=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t324">Parameter</th>
<th class="cellalignment2204" id="r1c2-t324">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t324" headers="r1c1-t324">
<pre dir="ltr">num
</pre></td>
<td class="cellalignment2205" headers="r2c1-t324 r1c2-t324">A parameter of type <code dir="ltr">Number</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21292" class="refsect2"><a id="i1071880"></a>
<h2 class="refsect2">operator/=()</h2>
<p>This method divides the <code dir="ltr">Number</code> object by the parameter specified, and assigns the quotient to the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21293"></a>Syntax</p>
<pre dir="ltr">Number&amp; operator/=(
   const Number &amp;num);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator/=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t325">Parameter</th>
<th class="cellalignment2204" id="r1c2-t325">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t325" headers="r1c1-t325">
<pre dir="ltr">num
</pre></td>
<td class="cellalignment2205" headers="r2c1-t325 r1c2-t325">A parameter of type <code dir="ltr">Number</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21294" class="refsect2"><a id="i1071886"></a>
<h2 class="refsect2">operator%=()</h2>
<p>This method divides the <code dir="ltr">Number</code> object by the parameter specified, and assigns the remainder to the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21295"></a>Syntax</p>
<pre dir="ltr">Number&amp; operator%=(
   const Number &amp;num);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator%=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t326">Parameter</th>
<th class="cellalignment2204" id="r1c2-t326">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t326" headers="r1c1-t326">
<pre dir="ltr">num
</pre></td>
<td class="cellalignment2205" headers="r2c1-t326 r1c2-t326">A parameter of type <code dir="ltr">Number</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21296" class="refsect2"><a id="i1071892"></a>
<h2 class="refsect2">operator+=()</h2>
<p>This method adds the Number object and the parameter specified, and assigns the sum to the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21297"></a>Syntax</p>
<pre dir="ltr">Number&amp; operator+=(
   const Number &amp;num);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator+=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t327">Parameter</th>
<th class="cellalignment2204" id="r1c2-t327">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t327" headers="r1c1-t327">
<pre dir="ltr">num
</pre></td>
<td class="cellalignment2205" headers="r2c1-t327 r1c2-t327">A parameter of type <code dir="ltr">Number</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21298" class="refsect2"><a id="CACEACFE"></a>
<h2 class="refsect2">operator<a id="i1071898"></a><code dir="ltr">-=</code>()</h2>
<p>This method subtracts the parameter specified from the <code dir="ltr">Number</code> object, and assigns the difference to the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21299"></a>Syntax</p>
<pre dir="ltr">Number&amp; operator-=(
   const Number &amp;num);
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of operator-=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t328">Parameter</th>
<th class="cellalignment2204" id="r1c2-t328">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t328" headers="r1c1-t328">
<pre dir="ltr">num
</pre></td>
<td class="cellalignment2205" headers="r2c1-t328 r1c2-t328">A parameter of type <code dir="ltr">Number</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21300" class="refsect2"><a id="i1071904"></a>
<h2 class="refsect2">operator char()</h2>
<p>This method returns the value of the Number object converted to a native <code dir="ltr">char</code>.</p>
<p class="subhead1"><a id="LNCPP21301"></a>Syntax</p>
<pre dir="ltr">operator char() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21302" class="refsect2"><a id="i1130327"></a>
<h2 class="refsect2">operator signed char()</h2>
<p>This method returns the value of the Number object converted to a native <code dir="ltr">signed char</code>.</p>
<p class="subhead1"><a id="LNCPP21303"></a>Syntax</p>
<pre dir="ltr">operator signed char() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21304" class="refsect2"><a id="i1071910"></a>
<h2 class="refsect2">operator double()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object converted to a native <code dir="ltr">double</code>.</p>
<p class="subhead1"><a id="LNCPP21305"></a>Syntax</p>
<pre dir="ltr">operator double() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21306" class="refsect2"><a id="i1071916"></a>
<h2 class="refsect2">operator float()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object converted to a native <code dir="ltr">float</code>.</p>
<p class="subhead1"><a id="LNCPP21307"></a>Syntax</p>
<pre dir="ltr">operator float() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21308" class="refsect2"><a id="i1071922"></a>
<h2 class="refsect2">operator int()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object converted to a native <code dir="ltr">int</code>.</p>
<p class="subhead1"><a id="LNCPP21309"></a>Syntax</p>
<pre dir="ltr">operator int() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21310" class="refsect2"><a id="i1071928"></a>
<h2 class="refsect2">operator long()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object converted to a native <code dir="ltr">long</code>.</p>
<p class="subhead1"><a id="LNCPP21311"></a>Syntax</p>
<pre dir="ltr">operator long() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21312" class="refsect2"><a id="i1071934"></a>
<h2 class="refsect2">operator long double()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object converted to a native <code dir="ltr">long double</code>.</p>
<p class="subhead1"><a id="LNCPP21313"></a>Syntax</p>
<pre dir="ltr">operator long double() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21314" class="refsect2"><a id="i1071940"></a>
<h2 class="refsect2">operator short()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object converted to a native <code dir="ltr">short</code> integer.</p>
<p class="subhead1"><a id="LNCPP21315"></a>Syntax</p>
<pre dir="ltr">operator short() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21316" class="refsect2"><a id="i1071946"></a>
<h2 class="refsect2">operator unsigned char()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object converted to a native <code dir="ltr">unsigned char</code>.</p>
<p class="subhead1"><a id="LNCPP21317"></a>Syntax</p>
<pre dir="ltr">operator unsigned char() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21318" class="refsect2"><a id="i1093423"></a>
<h2 class="refsect2">operator unsigned int()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object converted to a native <code dir="ltr">unsigned int</code>.</p>
<p class="subhead1"><a id="LNCPP21319"></a>Syntax</p>
<pre dir="ltr">operator unsigned int() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21320" class="refsect2"><a id="i1071952"></a>
<h2 class="refsect2">operator unsigned long()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object converted to a native <code dir="ltr">unsigned long</code>.</p>
<p class="subhead1"><a id="LNCPP21321"></a>Syntax</p>
<pre dir="ltr">operator unsigned long() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21322" class="refsect2"><a id="i1093430"></a>
<h2 class="refsect2">operator unsigned short()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object converted to a native <code dir="ltr">unsigned short</code> integer.</p>
<p class="subhead1"><a id="LNCPP21323"></a>Syntax</p>
<pre dir="ltr">operator unsigned short() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21324" class="refsect2"><a id="i1071975"></a>
<h2 class="refsect2">power()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object raised to the power of the value provided by the parameter specified.</p>
<p class="subhead1"><a id="LNCPP21325"></a>Syntax</p>
<pre dir="ltr">const Number power(
   const Number &amp;val) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of power() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t329">Parameter</th>
<th class="cellalignment2204" id="r1c2-t329">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t329" headers="r1c1-t329">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r2c1-t329 r1c2-t329">The power to which the number has to be raised.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21326" class="refsect2"><a id="i1096509"></a>
<h2 class="refsect2">prec()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object rounded to the digits of precision provided by the parameter specified.</p>
<p class="subhead1"><a id="LNCPP21327"></a>Syntax</p>
<pre dir="ltr">const Number prec(
   int digits) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of prec() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t330">Parameter</th>
<th class="cellalignment2204" id="r1c2-t330">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t330" headers="r1c1-t330">
<pre dir="ltr">digits
</pre></td>
<td class="cellalignment2205" headers="r2c1-t330 r1c2-t330">The number of digits of precision.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21328" class="refsect2"><a id="i1071981"></a>
<h2 class="refsect2">round()</h2>
<p>This method returns the value of the <code dir="ltr">Number</code> object rounded to the decimal place provided by the parameter specified.</p>
<p class="subhead1"><a id="LNCPP21329"></a>Syntax</p>
<pre dir="ltr">const Number round(
   int decPlace) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of round() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t331">Parameter</th>
<th class="cellalignment2204" id="r1c2-t331">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t331" headers="r1c1-t331">
<pre dir="ltr">decPlace
</pre></td>
<td class="cellalignment2205" headers="r2c1-t331 r1c2-t331">The number of digits to the right of the decimal point.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21330" class="refsect2"><a id="i1071987"></a>
<h2 class="refsect2">setNull()</h2>
<p>This method sets the value of the <code dir="ltr">Number</code> object to <code dir="ltr">NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21331"></a>Syntax</p>
<pre dir="ltr">void setNull();
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21332" class="refsect2"><a id="i1071993"></a>
<h2 class="refsect2">shift()</h2>
<p>This method returns the <code dir="ltr">Number</code> object multiplied by 10 to the power provided by the parameter specified.</p>
<p class="subhead1"><a id="LNCPP21333"></a>Syntax</p>
<pre dir="ltr">const Number shift(
   int val) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of shift() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t332">Parameter</th>
<th class="cellalignment2204" id="r1c2-t332">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t332" headers="r1c1-t332">
<pre dir="ltr">val
</pre></td>
<td class="cellalignment2205" headers="r2c1-t332 r1c2-t332">An integer value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21334" class="refsect2"><a id="i1071999"></a>
<h2 class="refsect2">sign()</h2>
<p>This method returns the sign of the value of the <code dir="ltr">Number</code> object. If the <code dir="ltr">Number</code> object is negative, then create a <code dir="ltr">Date</code> object using integer parameters is returned. If the <code dir="ltr">Number</code> object equals <code dir="ltr">0</code>, then create a <code dir="ltr">Date</code> object using integer parameters is returned. If the <code dir="ltr">Number</code> object is positive, then <code dir="ltr">1</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21335"></a>Syntax</p>
<pre dir="ltr">const int sign() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21336" class="refsect2"><a id="i1072005"></a>
<h2 class="refsect2">sin()</h2>
<p>This method returns the sin of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21337"></a>Syntax</p>
<pre dir="ltr">const Number sin() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21338" class="refsect2"><a id="i1072011"></a>
<h2 class="refsect2">squareroot()</h2>
<p>This method returns the square root of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21339"></a>Syntax</p>
<pre dir="ltr">const Number squareroot() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21340" class="refsect2"><a id="i1072017"></a>
<h2 class="refsect2">tan()</h2>
<p>This method returns the tangent of the <code dir="ltr">Number</code> object.</p>
<p class="subhead1"><a id="LNCPP21341"></a>Syntax</p>
<pre dir="ltr">const Number tan() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21342" class="refsect2"><a id="i1072023"></a>
<h2 class="refsect2">toBytes()</h2>
<p>This method converts the <code dir="ltr">Number</code> object into a <code dir="ltr">Bytes</code> object. The bytes representation is assumed to be in length excluded format, that is, the <code dir="ltr">Byte.length()</code> method gives the length of valid bytes and the <code dir="ltr">0</code>th byte is the exponent byte.</p>
<p class="subhead1"><a id="LNCPP21343"></a>Syntax</p>
<pre dir="ltr">Bytes toBytes() const;
</pre></div>
<!-- class="refsect2" -->
<div id="LNCPP21344" class="refsect2"><a id="i1072029"></a>
<h2 class="refsect2">toText()</h2>
<p>Convert the <code dir="ltr">Number</code> object to a formatted <code dir="ltr">string</code> or <code dir="ltr">UString</code> based on the parameters specified.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>for information on <a class="olink SQLRF06140" href="../SQLRF/functions227.htm#SQLRF06140"><code dir="ltr">TO_NUMBER</code></a></div>
<div class="inftblinformal">
<table class="cellalignment2206" title="versions of toTextt() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t334">Syntax</th>
<th class="cellalignment2204" id="r1c2-t334">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t334" headers="r1c1-t334">
<pre dir="ltr">string toText(
   const Environment *envp,
   const string &amp;fmt,
   const string &amp;nlsParam = &#34;&#34;) const;
</pre></td>
<td class="cellalignment2205" headers="r2c1-t334 r1c2-t334">Convert the <code dir="ltr">Number</code> object to a formatted <code dir="ltr">string</code> based on the parameters specified.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t334" headers="r1c1-t334">
<pre dir="ltr">UString toText(
   const Environment *envp,
   const UString &amp;fmt,
   const UString &amp;nlsParam) const;
</pre></td>
<td class="cellalignment2205" headers="r3c1-t334 r1c2-t334">Convert the <code dir="ltr">Number</code> object to a <code dir="ltr">UString</code> based on the parameters specified.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of toText() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t335">Parameter</th>
<th class="cellalignment2204" id="r1c2-t335">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t335" headers="r1c1-t335">
<pre dir="ltr">envp
</pre></td>
<td class="cellalignment2205" headers="r2c1-t335 r1c2-t335">The OCCI environment.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r3c1-t335" headers="r1c1-t335">
<pre dir="ltr">fmt
</pre></td>
<td class="cellalignment2205" headers="r3c1-t335 r1c2-t335">The format string.</td>
</tr>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r4c1-t335" headers="r1c1-t335">
<pre dir="ltr">nlsParam
</pre></td>
<td class="cellalignment2205" headers="r4c1-t335 r1c2-t335">The NLS parameters string. If <code dir="ltr">nlsParam</code> is specified, this determines the NLS parameters to be used for the conversion. If <code dir="ltr">nlsParam</code> is not specified, the NLS parameters are picked up from <code dir="ltr">envp</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="LNCPP21345" class="refsect2"><a id="i1072047"></a>
<h2 class="refsect2">trunc()</h2>
<p>This method returns the <code dir="ltr">Number</code> object truncated at the number of decimal places provided by the parameter specified.</p>
<p class="subhead1"><a id="LNCPP21346"></a>Syntax</p>
<pre dir="ltr">const Number trunc(
   int decPlace) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment2206" title="parameters of trunc() method" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment2197">
<th class="cellalignment2204" id="r1c1-t336">Parameter</th>
<th class="cellalignment2204" id="r1c2-t336">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2197">
<td class="cellalignment2205" id="r2c1-t336" headers="r1c1-t336">
<pre dir="ltr">decPlace
</pre></td>
<td class="cellalignment2205" headers="r2c1-t336 r1c2-t336">The number of places to the right of the decimal place at which the value is to be truncated.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2196">
<tr>
<td class="cellalignment2205">
<table class="cellalignment2201">
<tr>
<td class="cellalignment2200"><a href="reference021.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2200"><a href="reference023.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2208">
<table class="cellalignment2199">
<tr>
<td class="cellalignment2200"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2200"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2200"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2200"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2200"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2200"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>