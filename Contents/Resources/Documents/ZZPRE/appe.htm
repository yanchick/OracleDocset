<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114749"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Embedded%20SQL%20Commands%20and%20Directives"></a><title>Embedded SQL Commands and Directives</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-06T18:44:40Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Programmer&#39;s Guide to the Oracle Precompilers"/>
<meta name="dcterms.identifier" content="E53283-01"/>
<meta name="dcterms.isVersionOf" content="ZZPRE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="appd.htm" title="Previous" type="text/html"/>
<link rel="Next" href="index.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53283-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">19/20</span> <!-- End Header -->
<div id="ZZPRE992" class="appendix"><a id="CJHGHJHG"></a>
<h1 class="appendix"><span class="secnum">E</span> Embedded SQL Commands and Directives</h1>
<p>This appendix contains the following sections:</p>
<ul>
<li>
<p><a href="#BABCHACD">Summary of Precompiler Directives and Embedded SQL Commands</a></p>
</li>
<li>
<p><a href="#BABFEJGF">About The Command Descriptions</a></p>
</li>
<li>
<p><a href="#BABDFIBA">How to Read Syntax Diagrams</a></p>
</li>
<li>
<p><a href="#BABDBEFB">ALLOCATE (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#BABJFBAJ">CLOSE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABBIIIF">COMMIT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABEIJCA">CONNECT (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#BABDBBBG">DECLARE CURSOR (Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#BABCDEFJ">DECLARE DATABASE (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#BABIAHAH">DECLARE STATEMENT (Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#BABEHGBC">DECLARE TABLE (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#BABGJAAI">DELETE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABEHCBB">DESCRIBE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABDJHBG">EXECUTE ... END-EXEC (Executable Embedded SQL Extension)</a></p>
</li>
<li>
<p><a href="#BABBFGAD">EXECUTE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABGBGJE">EXECUTE IMMEDIATE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABBGIAC">FETCH (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABCGCGA">INSERT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABHFEGE">OPEN (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABDFGCF">PREPARE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABBCHGE">ROLLBACK (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABCAIIB">SAVEPOINT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABHGCHD">SELECT (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABDIHFG">UPDATE (Executable Embedded SQL)</a></p>
</li>
<li>
<p><a href="#BABBCDDA">VAR (Oracle Embedded SQL Directive)</a></p>
</li>
<li>
<p><a href="#BABHAGDH">WHENEVER (Embedded SQL Directive)</a></p>
</li>
</ul>
<p>This appendix contains descriptions of both SQL92 embedded SQL commands and directives and the Oracle embedded SQL extensions. These commands and directives are prefaced in your source code with the keywords, <code>EXEC SQL</code>. Rather than trying to memorize all of the SQL syntax, simply refer to this appendix, which includes the following:</p>
<ul>
<li>
<p>A summary of embedded SQL commands and directives</p>
</li>
<li>
<p>A section about the command descriptions</p>
</li>
<li>
<p>How to read syntax diagrams</p>
</li>
<li>
<p>An alphabetic listing of the commands and directives</p>
</li>
</ul>
<a id="BABCHACD"></a>
<div id="ZZPRE993" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Summary of Precompiler Directives and Embedded SQL Commands</h2>
<p><a id="sthref1495"></a>Embedded SQL commands place DDL, DML, and Transaction Control statements within a procedural language program. Embedded SQL is supported by the Oracle Precompilers. <a href="#BABECCED">Table E-1</a> provides a functional summary of the embedded SQL commands and directives.</p>
<p>The Type column in <a href="#BABECCED">Table E-1</a> is displayed in the format, <span class="italic">source</span>/<span class="italic">type</span>, where <span class="italic">source</span> is either SQL92 standard SQL (S) or an Oracle extension (O) and <span class="italic">type</span> is either an executable (E) statement or a directive (D).</p>
<div id="ZZPRE994" class="tblformal">
<p class="titleintable"><a id="sthref1496"></a><a id="BABECCED"></a>Table E-1 Summary of Embedded SQL Commands and Directives</p>
<table class="cellalignment3250" title="Summary of Embedded SQL Commands and Directives" summary="precompiler list" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t2">EXEC SQL Statement</th>
<th class="cellalignment3246" id="r1c2-t2">Type</th>
<th class="cellalignment3246" id="r1c3-t2">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t2" headers="r1c1-t2">
<p>ALLOCATE</p>
</td>
<td class="cellalignment3247" headers="r2c1-t2 r1c2-t2">
<p>O/E</p>
</td>
<td class="cellalignment3247" headers="r2c1-t2 r1c3-t2">
<p>To allocate memory for a cursor variable.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t2" headers="r1c1-t2">
<p>CLOSE</p>
</td>
<td class="cellalignment3247" headers="r3c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r3c1-t2 r1c3-t2">
<p>To disable a cursor, releasing the resources it holds.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r4c1-t2" headers="r1c1-t2">
<p>COMMIT</p>
</td>
<td class="cellalignment3247" headers="r4c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r4c1-t2 r1c3-t2">
<p>To end the current transaction, making all database change permanent (optionally frees resources and disconnects from the database)</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r5c1-t2" headers="r1c1-t2">
<p>CONNECT</p>
</td>
<td class="cellalignment3247" headers="r5c1-t2 r1c2-t2">
<p>O/E</p>
</td>
<td class="cellalignment3247" headers="r5c1-t2 r1c3-t2">
<p>To log on to an Oracle instance.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r6c1-t2" headers="r1c1-t2">
<p>DECLARE CURSOR</p>
</td>
<td class="cellalignment3247" headers="r6c1-t2 r1c2-t2">
<p>S/D</p>
</td>
<td class="cellalignment3247" headers="r6c1-t2 r1c3-t2">
<p>To declare a cursor, associating it with a query.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r7c1-t2" headers="r1c1-t2">
<p>DECLARE DATABASE</p>
</td>
<td class="cellalignment3247" headers="r7c1-t2 r1c2-t2">
<p>O/D</p>
</td>
<td class="cellalignment3247" headers="r7c1-t2 r1c3-t2">
<p>To declare an identifier for a nondefault database to be accessed in subsequent embedded SQL statements.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r8c1-t2" headers="r1c1-t2">
<p>DECLARE STATEMENT</p>
</td>
<td class="cellalignment3247" headers="r8c1-t2 r1c2-t2">
<p>S/D</p>
</td>
<td class="cellalignment3247" headers="r8c1-t2 r1c3-t2">
<p>To assign a SQL variable name to a SQL statement.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r9c1-t2" headers="r1c1-t2">
<p>DECLARE TABLE</p>
</td>
<td class="cellalignment3247" headers="r9c1-t2 r1c2-t2">
<p>O/D</p>
</td>
<td class="cellalignment3247" headers="r9c1-t2 r1c3-t2">
<p>To declare the table structure for semantic checking of embedded SQL statements by the Oracle Precompiler.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r10c1-t2" headers="r1c1-t2">
<p>DELETE</p>
</td>
<td class="cellalignment3247" headers="r10c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r10c1-t2 r1c3-t2">
<p>To remove rows from a table or from a view&#39;s base table.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r11c1-t2" headers="r1c1-t2">
<p>DESCRIBE</p>
</td>
<td class="cellalignment3247" headers="r11c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r11c1-t2 r1c3-t2">
<p>To initialize a descriptor, a structure holding host variable descriptions.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r12c1-t2" headers="r1c1-t2">
<p>EXECUTE...END-EXEC</p>
</td>
<td class="cellalignment3247" headers="r12c1-t2 r1c2-t2">
<p>O/E</p>
</td>
<td class="cellalignment3247" headers="r12c1-t2 r1c3-t2">
<p>To execute an anonymous PL/SQL block.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r13c1-t2" headers="r1c1-t2">
<p>EXECUTE</p>
</td>
<td class="cellalignment3247" headers="r13c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r13c1-t2 r1c3-t2">
<p>To execute a prepared dynamic SQL statement.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r14c1-t2" headers="r1c1-t2">
<p>EXECUTE IMMEDIATE</p>
</td>
<td class="cellalignment3247" headers="r14c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r14c1-t2 r1c3-t2">
<p>To prepare and execute a SQL statement with no host variables.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r15c1-t2" headers="r1c1-t2">
<p>FETCH</p>
</td>
<td class="cellalignment3247" headers="r15c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r15c1-t2 r1c3-t2">
<p>To retrieve rows selected by a query.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r16c1-t2" headers="r1c1-t2">
<p>INSERT</p>
</td>
<td class="cellalignment3247" headers="r16c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r16c1-t2 r1c3-t2">
<p>To add rows to a table or to a view&#39;s base table.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r17c1-t2" headers="r1c1-t2">
<p>OPEN</p>
</td>
<td class="cellalignment3247" headers="r17c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r17c1-t2 r1c3-t2">
<p>To execute the query associated with a cursor.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r18c1-t2" headers="r1c1-t2">
<p>PREPARE</p>
</td>
<td class="cellalignment3247" headers="r18c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r18c1-t2 r1c3-t2">
<p>To parse a dynamic SQL statement.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r19c1-t2" headers="r1c1-t2">
<p>ROLLBACK</p>
</td>
<td class="cellalignment3247" headers="r19c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r19c1-t2 r1c3-t2">
<p>To end the current transaction, discard all changes in the current transaction, and release all locks (optionally release resources and disconnect from the database).</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r20c1-t2" headers="r1c1-t2">
<p>SAVEPOINT</p>
</td>
<td class="cellalignment3247" headers="r20c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r20c1-t2 r1c3-t2">
<p>To identify a point in a transaction to which you can later roll back.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r21c1-t2" headers="r1c1-t2">
<p>SELECT</p>
</td>
<td class="cellalignment3247" headers="r21c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r21c1-t2 r1c3-t2">
<p>To retrieve data from one or more tables, views, or snapshots, assigning the selected values to host variables.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r22c1-t2" headers="r1c1-t2">
<p>UPDATE</p>
</td>
<td class="cellalignment3247" headers="r22c1-t2 r1c2-t2">
<p>S/E</p>
</td>
<td class="cellalignment3247" headers="r22c1-t2 r1c3-t2">
<p>To change existing values in a table or in a view&#39;s base table.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r23c1-t2" headers="r1c1-t2">
<p>VAR</p>
</td>
<td class="cellalignment3247" headers="r23c1-t2 r1c2-t2">
<p>O/D</p>
</td>
<td class="cellalignment3247" headers="r23c1-t2 r1c3-t2">
<p>To override the default datatype and assign a specific Oracle datatype to a host variable.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r24c1-t2" headers="r1c1-t2">
<p>WHENEVER</p>
</td>
<td class="cellalignment3247" headers="r24c1-t2 r1c2-t2">
<p>S/D</p>
</td>
<td class="cellalignment3247" headers="r24c1-t2 r1c3-t2">
<p>To specify handling for error and warning conditions.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="BABFEJGF"></a>
<div id="ZZPRE995" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About The Command Descriptions</h2>
<p>The directives, commands, and clauses appear alphabetically. The description of each contains the following sections:</p>
<div class="inftblinformal">
<table class="cellalignment3245" title="command descriptions" summary="command descriptions" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t3">Heading</th>
<th class="cellalignment3246" id="r1c2-t3">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t3" headers="r1c1-t3">Purpose</td>
<td class="cellalignment3247" headers="r2c1-t3 r1c2-t3">describes the basic uses of the command.</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t3" headers="r1c1-t3">Prerequisites</td>
<td class="cellalignment3247" headers="r3c1-t3 r1c2-t3">lists privileges you must have and steps that you must take before using the command. Unless otherwise noted, most commands also require that the database be open by your instance.</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r4c1-t3" headers="r1c1-t3">Syntax</td>
<td class="cellalignment3247" headers="r4c1-t3 r1c2-t3">shows the keywords and parameters of the command.</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r5c1-t3" headers="r1c1-t3">Keywords and Parameters</td>
<td class="cellalignment3247" headers="r5c1-t3 r1c2-t3">describes the purpose of each keyword and parameter.</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r6c1-t3" headers="r1c1-t3">Usage Notes</td>
<td class="cellalignment3247" headers="r6c1-t3 r1c2-t3">discusses how and when to use the command.</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r7c1-t3" headers="r1c1-t3">Examples</td>
<td class="cellalignment3247" headers="r7c1-t3 r1c2-t3">shows example statements of the command.</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r8c1-t3" headers="r1c1-t3">Related Topics</td>
<td class="cellalignment3247" headers="r8c1-t3 r1c2-t3">lists related commands, clauses, and sections of this manual.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect1" -->
<a id="BABDFIBA"></a>
<div id="ZZPRE996" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">How to Read <a id="sthref1497"></a><a id="sthref1498"></a>Syntax Diagrams</h2>
<p>Easy-to-understand <span class="italic">syntax diagrams</span> are used to illustrate embedded SQL syntax. They are line-and-arrow drawings that depict valid syntax. If you have never used them, do not worry. This section tells you all you need to know.</p>
<p>After you understand the logical flow of a syntax diagram, it becomes a helpful guide. You can verify or construct any embedded SQL statement by tracing through its syntax diagram.</p>
<p>Syntax diagrams use lines and arrows to show how commands, parameters, and other language elements are sequenced to form statements. Trace each diagram from left to <a id="sthref1499"></a><a id="sthref1500"></a>right, in the direction shown by the arrows. The following symbols will guide you:</p>
<img width="732" height="152" src="img/image017.gif" alt="Syntax diagram symbols"/><br/>
<a id="sthref1501" href="img_text/image017.htm">Description of the illustration image017.gif</a><br/>
<br/>
<p>Commands and other keywords appear in uppercase. Parameters appear in lowercase. Operators, delimiters, and terminators appear as usual. Following the conventions defined in the Preface, a semicolon terminates statements.</p>
<p>If the syntax diagram has more than one path, you can choose any path to travel.</p>
<p>If you have the choice of more than one keyword, operator, or parameter, your options appear in a vertical list. In the following example, you can travel down the vertical line as far as you like, then continue along any horizontal line:</p>
<img width="452" height="59" src="img/image018.gif" alt="Syntax diagram example"/><br/>
<a id="sthref1502" href="img_text/image018.htm">Description of the illustration image018.gif</a><br/>
<br/>
<p>According to the diagram, all of the following statements are valid:</p>
<pre>EXEC SQL WHENEVER NOT FOUND ...
EXEC SQL WHENEVER SQLERROR ...
EXEC SQL WHENEVER SQLWARNING ...
</pre>
<div id="ZZPRE997" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1503"></a>
<h3 class="sect2">Required Keywords and Parameters</h3>
<p>Required keywords and parameters can appear singly or in a vertical list of alternatives. Single required keywords and parameters appear on the <span class="italic">main path</span>, that is, on the horizontal line you are currently traveling. In the following example, <span class="italic">cursor</span> is a required parameter:</p>
<img width="452" height="27" src="img/image019.gif" alt="Syntax diagram: keywords and parameters"/><br/>
<a id="sthref1504" href="img_text/image019.htm">Description of the illustration image019.gif</a><br/>
<br/>
<p>If there is a cursor named <span class="italic">emp_cursor</span>, then, according to the diagram, the following statement is valid:</p>
<pre>EXEC SQL CLOSE emp_cursor;
</pre>
<p>If any of the keywords or parameters in a vertical list appears on the main path, one of them is required. That is, you must choose one of the keywords or parameters, but not necessarily the one that appears on the main path. In the following example, you must choose one of the four actions:</p>
<img width="452" height="77" src="img/image020.gif" alt="Syntax diagram example: actions"/><br/>
<a id="sthref1505" href="img_text/image020.htm">Description of the illustration image020.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE998" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1506"></a>
<h3 class="sect2">Optional Keywords and Parameters</h3>
<p>If keywords and parameters appear in a vertical list the main path, they are optional. That is, you need not choose one of them. In the following example, instead of traveling down a vertical line, you can continue along the main path:</p>
<img width="452" height="43" src="img/image021.gif" alt="Syntax diagram: optional keywords and parameters"/><br/>
<a id="sthref1507" href="img_text/image021.htm">Description of the illustration image021.gif</a><br/>
<br/>
<p>If there is a database named <span class="italic">oracle2</span>, then, according to the diagram, all of the following statements are valid:</p>
<pre>EXEC SQL ROLLBACK; 
EXEC SQL ROLLBACK WORK; 
EXEC SQL AT oracle2 ROLLBACK;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE999" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1508"></a>
<h3 class="sect2">Syntax Loops</h3>
<p>Loops let you repeat the syntax within them as many times as you like. In the following example, <span class="italic">column_name</span> is inside a loop. So, after choosing one column name, you can go back repeatedly to choose another.</p>
<img width="452" height="45" src="img/image022.gif" alt="Syntax diagram: loops"/><br/>
<a id="sthref1509" href="img_text/image022.htm">Description of the illustration image022.gif</a><br/>
<br/>
<p>If <code>DEBIT</code>, <code>CREDIT</code>, and <code>BALANCE</code> are column names, then, according to the diagram, all of the following statements are valid:</p>
<pre>EXEC SQL SELECT DEBIT INTO ...
EXEC SQL SELECT CREDIT, BALANCE INTO ...
EXEC SQL SELECT DEBIT, CREDIT, BALANCE INTO ...
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1000" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1510"></a>
<h3 class="sect2">Multi-part Diagrams</h3>
<p>Read a multi-part diagram as if all the main paths were joined end-to-end. The following example is a two-part diagram:</p>
<img width="452" height="27" src="img/image023.gif" alt="Syntax diagram: multi-part"/><br/>
<a id="sthref1511" href="img_text/image023.htm">Description of the illustration image023.gif</a><br/>
<br/>
<p>According to the diagram, the following statement is valid:</p>
<pre>EXEC SQL PREPARE sql_statement FROM :sql_string;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1001" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1512"></a>
<h3 class="sect2">Database Objects</h3>
<p><a id="sthref1513"></a>The <a id="sthref1514"></a>names of Oracle objects, such as tables and columns, must not exceed 30 characters in length. The first character must be a letter, but the rest can be any combination of letters, numerals, dollar signs ($), pound signs (#), and underscores (_).</p>
<p>However, if an <a id="sthref1515"></a>Oracle identifier is enclosed by quotation marks (&#34;), it can contain any combination of legal characters, including spaces but excluding quotation marks.</p>
<p>Oracle identifiers are not case-sensitive except when enclosed by quotation marks.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDBEFB"></a>
<div id="ZZPRE1002" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1516"></a><a id="sthref1517"></a>ALLOCATE (Executable Embedded SQL Extension)<a id="sthref1518"></a></h2>
<div id="ZZPRE1003" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1519"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1520"></a>To allocate a cursor variable to be referenced in a PL/SQL block.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1004" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1521"></a>
<h3 class="sect2">Prerequisites</h3>
<p><a id="sthref1522"></a>A cursor variable of type <a id="sthref1523"></a><code>SQL_CURSOR</code> must be declared before allocating memory for the cursor variable.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1005" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1524"></a>
<h3 class="sect2">Syntax</h3>
<img width="448" height="14" src="img/image024.gif" alt="Syntax diagram: ALLOCATE"/><br/>
<a id="sthref1525" href="img_text/image024.htm">Description of the illustration image024.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1006" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1526"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>:cursor_variable</code></p>
<p>The cursor variable to be allocated.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1007" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1527"></a>
<h3 class="sect2">Usage Notes</h3>
<p>Whereas a cursor is static, a cursor variable is dynamic because it is not tied to a specific query. You can open a cursor variable for any type-compatible query.</p>
<p>Example</p>
<p>This partial example illustrates the use of the <code>ALLOCATE</code> command in a Pro*C/C++ embedded SQL program:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 SQL_CURSOR emp_cv;
 struct{ ... } emp_rec;
EXEC SQL END DECLARE SECTION;
EXEC SQL ALLOCATE emp_cv;
EXEC SQL EXECUTE
 BEGIN
 OPEN :emp_cv FOR SELECT * FROM emp;
 END;
END-EXEC;
for (;;)
{ EXEC SQL FETCH :emp_cv INTO :emp_rec; 
}
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1008" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1528"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABJFBAJ">&#34;CLOSE (Executable Embedded SQL)&#34;</a>, <a href="#BABBFGAD">&#34;EXECUTE (Executable Embedded SQL)&#34;</a>, and <a href="#BABBGIAC">&#34;FETCH (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJFBAJ"></a>
<div id="ZZPRE1009" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1529"></a><a id="sthref1530"></a>CLOSE (Executable Embedded SQL)<a id="sthref1531"></a></h2>
<div id="ZZPRE1010" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1532"></a>
<h3 class="sect2"><a id="sthref1533"></a>Purpose</h3>
<p>To disable a cursor, freeing the resources acquired by opening the cursor, and releasing parse locks.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1011" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1534"></a>
<h3 class="sect2">Prerequisites</h3>
<p><a id="sthref1535"></a>The cursor or cursor variable must be open and <code>MODE=ANSI</code>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1012" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1536"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="31" src="img/image025.gif" alt="Syntax diagram: CLOSE"/><br/>
<a id="sthref1537" href="img_text/image025.htm">Description of the illustration image025.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1013" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1538"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>cursor</code></p>
<p>A cursor to be closed.</p>
<p><code><span class="codeinlineitalic">cursor_variable</span></code></p>
<p>A cursor variable to be closed.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1014" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1539"></a>
<h3 class="sect2">Usage Notes</h3>
<p>Rows cannot be fetched from a closed cursor. A cursor need not be closed to be reopened. The <code>HOLD_CURSOR</code> and <a id="sthref1540"></a><code>RELEASE_CURSOR</code> precompiler options alter the effect of the <code>CLOSE</code> command. For information on these options, see <a href="ch_six.htm#BABDDACC">Chapter 6, &#34;Running the Oracle Precompilers&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1015" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1541"></a>
<h3 class="sect2">Example</h3>
<p><a id="sthref1542"></a>This example illustrates the use of the <code>CLOSE</code> command:</p>
<pre>EXEC SQL CLOSE emp_cursor;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1016" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1543"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABDBBBG">&#34;DECLARE CURSOR (Embedded SQL Directive)&#34;</a>, <a href="#BABHFEGE">&#34;OPEN (Executable Embedded SQL)&#34;</a>, and <a href="#BABDFGCF">&#34;PREPARE (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABBIIIF"></a>
<div id="ZZPRE1017" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1544"></a>COMMIT <a id="sthref1545"></a>(Executable Embedded SQL)<a id="sthref1546"></a></h2>
<div id="ZZPRE1018" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1547"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1548"></a>To end your current transaction, making permanent all its changes to the database and optionally freeing all resources and disconnecting from the Oracle database.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1019" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1549"></a>
<h3 class="sect2">Prerequisites</h3>
<p><a id="sthref1550"></a>To commit your current transaction, no privileges are necessary.</p>
<p>To manually commit a distributed in-doubt transaction that you originally committed, you must have <code>FORCE TRANSACTION</code> system privilege. To manually commit a distributed in-doubt transaction that was originally committed by another user, you must have <code>FORCE ANY TRANSACTION</code> system privilege.</p>
<p>If you are using Oracle in <code>DBMS MAC</code> mode, you can only commit an in-doubt transaction if your DBMS label matches the label the transaction&#39;s label and the creation label of the user who originally committed the transaction or if you satisfy one of the following criteria:</p>
<ul>
<li>
<p>If the transaction&#39;s label or the user&#39;s creation label is higher than your DBMS label, you must have <code>READUP</code> and <code>WRITEUP</code> system privileges.</p>
</li>
<li>
<p>If the transaction&#39;s label or the user&#39;s creation label is lower than your DBMS label, you must have <code>WRITEDOWN</code> system privilege.</p>
</li>
<li>
<p>If the transaction&#39;s label or the user&#39;s creation label is not comparable with your DBMS label, you must have <code>READUP</code>, <code>WRITEUP</code>, and <code>WRITEDOWN</code> system privileges.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1020" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1551"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="114" src="img/image026.gif" alt="Syntax diagram: COMMIT"/><br/>
<a id="sthref1552" href="img_text/image026.htm">Description of the illustration image026.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1021" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1553"></a>
<h3 class="sect2">Keyword and Parameters</h3>
<p><code>AT</code></p>
<p><a id="sthref1554"></a>Identifies the database to which the <code>COMMIT</code> statement is issued. The database can be identified by either:</p>
<ul>
<li>
<p><span class="italic">db_name</span> is a database identifier declared in a previous <code>DECLARE DATABASE</code> statement.</p>
</li>
<li>
<p>:<span class="italic">host_variable</span> is a host variable whose value is a previously declared <span class="italic">db_name</span>.</p>
</li>
</ul>
<p><a id="sthref1555"></a>If you omit this clause, Oracle issues the statement to your default database.</p>
<p><a id="sthref1556"></a><code>WORK</code></p>
<p>Is supported only for compliance with standard SQL. The statements <code>COMMIT</code> and <code>COMMIT WORK</code> are equivalent.</p>
<p><a id="sthref1557"></a><code>COMMENT</code></p>
<p>Specifies a comment to be associated with the current transaction. The &#39;<span class="italic">text</span>&#39; is a quoted literal of up to 50 characters that Oracle stores in the data dictionary view <code>DBA_2PC_PENDING</code> along with the transaction ID if the transaction becomes in-doubt.</p>
<p><code>RELEASE</code></p>
<p>Frees all resources and disconnects the application from the Oracle database.</p>
<p><code>FORCE</code></p>
<p><a id="sthref1558"></a>Manually commits an in-doubt distributed transaction. The transaction is identified by the &#39;<span class="italic">text</span>&#39; containing its local or global transaction ID. To find the IDs of such transactions, query the data dictionary view <code>DBA_2PC_PENDING</code>. You can also use the optional <span class="italic">integer</span> to explicitly assign the transaction a system change number (SCN). If you omit the <span class="italic">integer</span>, the transaction is committed using the current SCN.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1022" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1559"></a>
<h3 class="sect2">Usage Notes</h3>
<p><a id="sthref1560"></a>Always explicitly commit or rollback the last transaction in your program by using the <code>COMMIT</code> or <code>ROLLBACK</code> command and the <code>RELEASE</code> option. Oracle automatically rolls back changes if the program terminates abnormally.</p>
<p>The <code>COMMIT</code> command has no effect on host variables or on the flow of control in the program. For more information on this command, see <a href="ch_seven.htm#BABIFBDG">Chapter 7, &#34;Defining and Controlling Transactions&#34;</a>.</p>
<p><a id="sthref1561"></a>Example</p>
<p>This example illustrates the use of the embedded SQL <code>COMMIT</code> command:</p>
<pre>EXEC SQL AT sales_db COMMIT RELEASE;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1023" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1562"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABBCHGE">&#34;ROLLBACK (Executable Embedded SQL)&#34;</a> and <a href="#BABCAIIB">&#34;SAVEPOINT (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABEIJCA"></a>
<div id="ZZPRE1024" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1563"></a>CONNECT <a id="sthref1564"></a>(Executable Embedded SQL Extension)</h2>
<div id="ZZPRE1025" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1565"></a>
<h3 class="sect2">Purpose</h3>
<p>To log on to an Oracle database.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1026" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1566"></a>
<h3 class="sect2">Prerequisites</h3>
<p>You must have <code>CREATE SESSION</code> system privilege in the specified database.</p>
<p>If you are using Oracle in <code>DBMS MAC</code> mode, your operating system label must dominate both your creation label and the label at which you were granted <code>CREATE SESSION</code> system privilege. Your operating system label must also fall between the operating system equivalents of <code>DBHIGH</code> and <code>DBLOW</code>, inclusive.</p>
<p>If you are using Oracle in operating system <code>MAC</code> mode, your operating system label must match the label of the database to which you are connecting.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1027" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1567"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="100" src="img/image027.gif" alt="Syntax diagram: CONNECT"/><br/>
<a id="sthref1568" href="img_text/image027.htm">Description of the illustration image027.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1028" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1569"></a>
<h3 class="sect2">Keyword and Parameters</h3>
<p>:<span class="italic">user :password</span></p>
<p>specifies your username and password separately.</p>
<p>:<span class="italic">user_password</span></p>
<p>is a single host variable containing the Oracle username and password separated by a slash (/).</p>
<p>To allow Oracle to verify your connection through your operating system, specify &#34;/&#34; as the:<span class="italic">user_password</span> value.</p>
<p><code>AT</code></p>
<p>identifies the database to which the connection is made. The database can be identified by either:</p>
<p><span class="italic">db_name</span> is a database identifier declared in a previous <code>DECLARE DATABASE</code> statement.</p>
<p>:<span class="italic">host_variable</span> is a host variable whose value is a previously declared <span class="italic">db_name</span>.</p>
<p><code>USING</code></p>
<p><a id="sthref1570"></a>specifies the SQL*Net database specification string used to connect to a nondefault database. If you omit this clause, you are connected to your default database.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1029" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1571"></a>
<h3 class="sect2">Usage Notes</h3>
<p>A program can have multiple connections, but can only connect once to your default database. For more information on this command, see <a href="ch_three.htm#BABCBCDA">Chapter 3, &#34;Meeting Program Requirements&#34;</a>.</p>
<p>Example</p>
<p>The following example illustrate the use of <code>CONNECT</code>:</p>
<pre>EXEC SQL CONNECT :username
 IDENTIFIED BY :password
</pre>
<p>You can also use this statement in which the value of :<span class="italic">userid</span> is the value of :<span class="italic">username</span> and :<span class="italic">password</span> separated by a &#34;/&#34; such as &#39;SCOTT/TIGER&#39;:</p>
<pre>EXEC SQL CONNECT :userid
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1030" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1572"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABBIIIF">&#34;COMMIT (Executable Embedded SQL)&#34;</a>, <a href="#BABCDEFJ">&#34;DECLARE DATABASE (Oracle Embedded SQL Directive)&#34;</a>, and <a href="#BABBCHGE">&#34;ROLLBACK (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDBBBG"></a>
<div id="ZZPRE1031" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">DECLARE CURSOR<a id="sthref1573"></a><a id="sthref1574"></a> (Embedded SQL Directive)</h2>
<div id="ZZPRE1032" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1575"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1576"></a>To declare a cursor, giving it a name and associating it with a SQL statement or a PL/SQL block.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1033" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1577"></a>
<h3 class="sect2">Prerequisites</h3>
<p>If you associate the cursor with an identifier for a SQL statement or PL/SQL block, you must have declared this identifier in a previous <code>DECLARE</code> <code>STATEMENT</code> statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1034" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1578"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="99" src="img/image028.gif" alt="Syntax diagram: DECLARE"/><br/>
<a id="sthref1579" href="img_text/image028.htm">Description of the illustration image028.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1035" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1580"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>AT</code></p>
<p>identifies the database on which the cursor is declared. The database can be identified by either:</p>
<p><span class="italic">db_name</span> is a database identifier declared in a previous DECLARE DATABASE statement.</p>
<p>:<span class="italic">host_variable</span> is a host variable whose value is a previously declared <span class="italic">db_name</span>.</p>
<p>If you omit this clause, Oracle declares the cursor on your default database.</p>
<p>cursor</p>
<p>is the name of the cursor to be declared.</p>
<p><code>SELECT</code> <span class="italic">command</span></p>
<p>is a <code>SELECT</code> statement to be associated with the cursor. The following statement cannot contain an <code>INTO</code> clause.</p>
<p>statement_name block_name</p>
<p>identifies a SQL statement or PL/SQL block to be associated with the cursor. The <span class="italic">statement_name o</span>r <span class="italic">block_name m</span>ust be previously declared in a <code>DECLARE</code> <code>STATEMENT</code> statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1036" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1581"></a>
<h3 class="sect2">Usage Notes</h3>
<p>You must declare a cursor before referencing it in other embedded SQL statements. The scope of a cursor declaration is global within its precompilation unit and the name of each cursor must be unique in its scope. You cannot declare two cursors with the same name in a single precompilation unit.</p>
<p>You can reference the cursor in the <code>WHERE</code> clause of an <code>UPDATE</code> or <code>DELETE</code> statement using the <code>CURRENT</code> <code>OF</code> syntax, then the cursor has been opened with an OPEN statement and positioned on a row with a <code>FETCH</code> statement. For more information on this command, see <a href="ch_three.htm#BABCBCDA">Chapter 3, &#34;Meeting Program Requirements&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1037" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1582"></a>
<h3 class="sect2">Example</h3>
<p><a id="sthref1583"></a>This example illustrates the use of a <code>DECLARE CURSOR</code> statement:</p>
<pre>EXEC SQL DECLARE emp_cursor CURSOR 
 FOR SELECT ename, empno, job, sal 
 FROM emp 
 WHERE deptno = :deptno 
 FOR UPDATE OF sal
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1038" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1584"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABJFBAJ">&#34;CLOSE (Executable Embedded SQL)&#34;</a>, <a href="#BABCDEFJ">&#34;DECLARE DATABASE (Oracle Embedded SQL Directive)&#34;</a>, <a href="#BABIAHAH">&#34;DECLARE STATEMENT (Embedded SQL Directive)&#34;</a>, <a href="#BABGJAAI">&#34;DELETE (Executable Embedded SQL)&#34;</a>, <a href="#BABBGIAC">&#34;FETCH (Executable Embedded SQL)&#34;</a>, <a href="#BABHFEGE">&#34;OPEN (Executable Embedded SQL)&#34;</a>, <a href="#BABDFGCF">&#34;PREPARE (Executable Embedded SQL)&#34;</a>, <a href="#BABHGCHD">&#34;SELECT (Executable Embedded SQL)&#34;</a>, and <a href="#BABDIHFG">&#34;UPDATE (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCDEFJ"></a>
<div id="ZZPRE1039" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">DECLARE <a id="sthref1585"></a>DATABASE<a id="sthref1586"></a> (Oracle Embedded SQL Directive)</h2>
<div id="ZZPRE1040" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1587"></a>
<h3 class="sect2">Purpose<a id="sthref1588"></a></h3>
<p><a id="sthref1589"></a>To declare an identifier for a nondefault database to be accessed in subsequent embedded SQL statements.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1041" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1590"></a>
<h3 class="sect2">Prerequisites</h3>
<p>You must have access to a username on the nondefault database.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1042" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1591"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="14" src="img/image029.gif" alt="Syntax diagram: DECLARE DATABASE"/><br/>
<a id="sthref1592" href="img_text/image029.htm">Description of the illustration image029.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1043" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1593"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><span class="italic">db_name</span></p>
<p>is the identifier established for the nondefault database.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1044" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1594"></a>
<h3 class="sect2">Usage Notes</h3>
<p>You declare a <span class="italic">db_name</span> for a nondefault database so that other embedded SQL statements can refer to that database using the <code>AT</code> clause. Before issuing a <code>CONNECT</code> statement with an <code>AT</code> clause, you must declare a <span class="italic">db_name</span> for the nondefault database with a <code>DECLARE</code> <code>DATABASE</code> statement.</p>
<p>For more information on this command, see <a href="ch_three.htm#BABCBCDA">Chapter 3, &#34;Meeting Program Requirements&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1045" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1595"></a>
<h3 class="sect2">Example</h3>
<p>This example illustrates the use of a <code>DECLARE</code> <code>DATABASE</code> directive:</p>
<pre>EXEC SQL DECLARE oracle3 DATABASE
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1046" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1596"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABBIIIF">&#34;COMMIT (Executable Embedded SQL)&#34;</a>, <a href="#BABEIJCA">&#34;CONNECT (Executable Embedded SQL Extension)&#34;</a>, <a href="#BABDBBBG">&#34;DECLARE CURSOR (Embedded SQL Directive)&#34;</a>, <a href="#BABIAHAH">&#34;DECLARE STATEMENT (Embedded SQL Directive)&#34;</a>, <a href="#BABGJAAI">&#34;DELETE (Executable Embedded SQL)&#34;</a>, <a href="#BABBFGAD">&#34;EXECUTE (Executable Embedded SQL)&#34;</a>, <a href="#BABGBGJE">&#34;EXECUTE IMMEDIATE (Executable Embedded SQL)&#34;</a>, <a href="#BABCGCGA">&#34;INSERT (Executable Embedded SQL)&#34;</a>, <a href="#BABHGCHD">&#34;SELECT (Executable Embedded SQL)&#34;</a>, and <a href="#BABDIHFG">&#34;UPDATE (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIAHAH"></a>
<div id="ZZPRE1047" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">DECLARE STATEMENT <a id="sthref1597"></a>(Embedded SQL Directive)</h2>
<div id="ZZPRE1048" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1598"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1599"></a>To declare an identifier for a SQL statement or PL/SQL block to be used in other embedded SQL statements.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1049" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1600"></a>
<h3 class="sect2">Prerequisites</h3>
<p>None.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1050" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1601"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="83" src="img/image030.gif" alt="Syntax diagram: DECLARE STATEMENT"/><br/>
<a id="sthref1602" href="img_text/image030.htm">Description of the illustration image030.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1051" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1603"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>AT</code></p>
<p>identifies the database on which the SQL statement or PL/SQL block is declared. The database can be identified by either:</p>
<p><span class="italic">db_name</span> is a database identifier declared in a previous <code>DECLARE</code> <code>DATABASE</code> statement.</p>
<p>:<span class="italic">host_variable</span> is a host variable whose value is a previously declared <span class="italic">db_name</span>.</p>
<p>If you omit this clause, Oracle declares the SQL statement or PL/SQL block on your default database.</p>
<p>statement_name block_name</p>
<p>is the declared identifier for the statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1052" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1604"></a>
<h3 class="sect2">Usage Notes</h3>
<p><a id="sthref1605"></a>You must declare an identifier for a SQL statement or PL/SQL block with a <code>DECLARE</code> <code>STATEMENT</code> statement only if a <code>DECLARE</code> <code>CURSOR</code> statement referencing the identifier appears physically (not logically) in the embedded SQL program before the <code>PREPARE</code> statement that parses the statement or block and associates it with its identifier.</p>
<p>The <a id="sthref1606"></a><a id="sthref1607"></a>scope of a statement declaration is global within its precompilation unit, like a cursor declaration.For more information on this command, see <a href="ch_three.htm#BABCBCDA">Chapter 3, &#34;Meeting Program Requirements&#34;</a> and <a href="ch_ten.htm#CHDEFGBC">Chapter 10, &#34;Using Dynamic SQL&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1053" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1608"></a>
<h3 class="sect2">Example I</h3>
<p><a id="sthref1609"></a>This example illustrates the use of the <code>DECLARE STATEMENT</code> statement:</p>
<pre>EXEC SQL AT remote_db 
 DECLARE my_statement STATEMENT 
EXEC SQL PREPARE my_statement FROM :my_string 
EXEC SQL EXECUTE my_statement
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1054" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1610"></a>
<h3 class="sect2">Example II</h3>
<p>In this example from a Pro*C/C++ embedded SQL program, the <code>DECLARE</code> <code>STATEMENT</code> statement is required because the <code>DECLARE</code> <code>CURSOR</code> statement precedes the <code>PREPARE</code> statement:</p>
<pre>EXEC SQL DECLARE my_statement STATEMENT; 
EXEC SQL DECLARE emp_cursor CURSOR FOR my_statement; 
EXEC SQL PREPARE my_statement FROM :my_string; 
...
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1055" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1611"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABJFBAJ">&#34;CLOSE (Executable Embedded SQL)&#34;</a>, <a href="#BABCDEFJ">&#34;DECLARE DATABASE (Oracle Embedded SQL Directive)&#34;</a>, <a href="#BABBGIAC">&#34;FETCH (Executable Embedded SQL)&#34;</a>, <a href="#BABHFEGE">&#34;OPEN (Executable Embedded SQL)&#34;</a>, and <a href="#BABDFGCF">&#34;PREPARE (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABEHGBC"></a>
<div id="ZZPRE1056" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">DECLARE TABLE <a id="sthref1612"></a>(Oracle Embedded SQL Directive)</h2>
<div id="ZZPRE1057" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1613"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1614"></a>To define the structure of a table or view, including each column&#39;s datatype, default value, and <code>NULL</code> or <code>NOT</code> <code>NULL</code> specification for semantic checking by the Oracle Precompilers.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1058" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1615"></a>
<h3 class="sect2">Prerequisites</h3>
<p>None.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1059" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1616"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="132" src="img/image031.gif" alt="Syntax diagram: DECLARE TABLE"/><br/>
<a id="sthref1617" href="img_text/image031.htm">Description of the illustration image031.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1060" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1618"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><span class="italic">table</span></p>
<p>is the name of the declared table.</p>
<p>column</p>
<p>is a column of the <span class="italic">table</span>.</p>
<p>datatype</p>
<p>is the datatype of a <span class="italic">column</span>.</p>
<p><code>DEFAULT</code></p>
<p>specifies the default value of a <span class="italic">column</span>.</p>
<p><code>NULL</code></p>
<p>specifies that a <span class="italic">column</span> can contain nulls.</p>
<p><code>NOT</code> <code>NULL</code></p>
<p>specifies that a <span class="italic">column</span> cannot contain nulls.</p>
<p><code>WITH</code> <code>DEFAULT</code></p>
<p>is supported for compatibility with the IBM DB2 database.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1061" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1619"></a>
<h3 class="sect2">Usage Notes</h3>
<p>For information on using this command, see <a href="ch_three.htm#BABCBCDA">Chapter 3, &#34;Meeting Program Requirements&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1062" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1620"></a>
<h3 class="sect2">Example</h3>
<p><a id="sthref1621"></a>The following statement declares the <code>PARTS</code> table with the <code>PARTNO</code>, <code>BIN</code>, and <code>QTY</code> columns:</p>
<pre>EXEC SQL DECLARE parts TABLE 
 (partno NUMBER NOT NULL, 
 bin NUMBER, 
 qty NUMBER)
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1063" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1622"></a>
<h3 class="sect2">Related Topics</h3>
<p>None.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGJAAI"></a>
<div id="ZZPRE1064" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">DELETE <a id="sthref1623"></a>(Executable Embedded SQL)</h2>
<div id="ZZPRE1065" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1624"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1625"></a>To remove rows from a table or from a view&#39;s base table.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1066" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1626"></a>
<h3 class="sect2">Prerequisites</h3>
<p>For you to delete rows from a table, the table must be in your own schema or you must have <code>DELETE</code> privilege on the table.</p>
<p>For you to delete rows from the base table of a view, the owner of the schema containing the view must have <code>DELETE</code> privilege on the base table. Also, if the view is in a schema other than your own, you must be granted <code>DELETE</code> privilege on the view.</p>
<p>The <code>DELETE</code> <code>ANY</code> <code>TABLE</code> system privilege also enables delete rows from any table or any view&#39;s base table.</p>
<p>If you are using Oracle in <code>DBMS MAC</code> mode, your DBMS label must dominate the creation label of the table or view or you must meet one of the following criteria:</p>
<ul>
<li>
<p>If the creation label of the table or view is higher than your DBMS label, you must have <code>READUP</code> and <code>WRITEUP</code> system privileges.</p>
</li>
<li>
<p>If the creation label of your table or view is not comparable to your DBMS label, you must have <code>READUP</code>, <code>WRITEUP</code>, and <code>WRITEDOWN</code> system privileges.</p>
</li>
</ul>
<p>In addition, for each row to be deleted, your DBMS label must match the row&#39;s label or you must meet one of the following criteria:</p>
<ul>
<li>
<p>If the row&#39;s label is higher than your DBMS label, you must have <code>READUP</code> and <code>WRITEUP</code> system privileges.</p>
</li>
<li>
<p>If the row&#39;s label is lower than your DBMS label, you must have <code>WRITEDOWN</code> system privilege.</p>
</li>
<li>
<p>If the row label is not comparable to your DBMS label, you must have <code>READUP</code>, <code>WRITEUP</code>, and <code>WRITEDOWN</code> system privileges.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1067" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1627"></a>
<h3 class="sect2">Syntax</h3>
<p><img width="452" height="135" src="img/image032.gif" alt="Syntax diagram: DELETE"/><br/>
<a id="sthref1628" href="img_text/image032.htm">Description of the illustration image032.gif</a><br/>
<br/></p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1068" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1629"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>AT</code></p>
<p>identifies the database to which the <code>DELETE</code> statement is issued. The database can be identified by either:</p>
<p><span class="italic">db_name</span> is a database identifier declared in a previous <code>DECLARE</code> <code>DATABASE</code> statement.</p>
<p><span class="italic">:host_variable</span> is a host variable whose value is a previously declared <span class="italic">db_name</span>.</p>
<p>If you omit this clause, the <code>DELETE</code> statement is issued to your default database.</p>
<p><code>FOR</code> :<span class="italic">host_integer</span></p>
<p>limits the number of times the statement is executed if the <code>WHERE</code> clause contains array host variables. If you omit this clause, Oracle executes the statement once for each component of the smallest array.</p>
<p>schema</p>
<p>is the schema containing the table or view. If you omit <span class="italic">schema</span>, Oracle assumes the table or view is in your own schema.</p>
<p>table view</p>
<p>is the name of a table from which the rows are to be deleted. If you specify <span class="italic">view</span>, Oracle deletes rows from the view&#39;s base table.</p>
<p>dblink</p>
<p>is the complete or partial name of a database link to a remote database where the table or view is located. You can only <a id="sthref1630"></a><a id="sthref1631"></a>delete rows from a remote table or view if you are using Oracle with the distributed option.</p>
<p>If you omit <span class="italic">dblink</span>, Oracle assumes that the table or view is located on the local database.</p>
<p>alias</p>
<p>is an alias assigned to the table. Aliases are generally used in <code>DELETE</code> statements with correlated queries.</p>
<p><code><a id="sthref1632"></a>WHERE</code></p>
<p>specifies which rows are deleted:</p>
<p><span class="italic">condition</span> deletes only rows that satisfy the condition. This condition can contain host variables and optional indicator variables.</p>
<p><code><a id="sthref1633"></a>CURRENT</code> <code>OF</code> deletes only the row most recently fetched by the <span class="italic">cursor</span>. The <span class="italic">cursor</span> cannot be associated with a <code>SELECT</code> statement that performs a join, unless its <code>FOR</code> <code>UPDATE</code> clause specifically locks only one table.</p>
<p>If you omit this clause entirely, Oracle deletes all rows from the table or view.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1069" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1634"></a>
<h3 class="sect2">Usage Notes</h3>
<p>The host variables in the <code>WHERE</code> clause must be either all scalars or all arrays. If they are scalars, Oracle executes the <code>DELETE</code> statement only once. If they are arrays, Oracle executes the statement once for each set of array components. Each execution may delete zero, one, or multiple rows.</p>
<p>Array host variables in the <code>WHERE</code> clause can have different sizes. In this case, the number of times Oracle executes the statement is determined by the smaller of the following values:</p>
<ul>
<li>
<p>the size of the smallest array</p>
</li>
<li>
<p>the value of the :<span class="italic">host_integer</span> in the optional <code>FOR</code> clause</p>
</li>
</ul>
<p>If no rows satisfy the condition, no rows are deleted and the <code>SQLCODE</code> returns a <code>NOT_FOUND</code> condition.</p>
<p>The cumulative number of rows deleted is returned through the SQLCA. If the <code>WHERE</code> clause contains array host variables, this value reflects the total number of rows deleted for all components of the array processed by the DELETE statement.</p>
<p>If no rows satisfy the condition, Oracle returns an error through the <code>SQLCODE</code> of the SQLCA. If you omit the <code>WHERE</code> clause, Oracle raises a warning flag in the fifth component of <code>SQLWARN</code> in the SQLCA. For more information on this command and the SQLCA, see <a href="ch_eight.htm#BABJDJGJ">Chapter 8, &#34;Error Handling and Diagnostics&#34;</a>.</p>
<p>You can use comments in a DELETE statement to pass instructions, or <span class="italic">hints</span>, to the Oracle optimizer. The optimizer uses <a id="sthref1635"></a>hints to choose an execution plan for the statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1070" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1636"></a>
<h3 class="sect2">Example</h3>
<p><a id="sthref1637"></a>This example illustrates the use of the <code>DELETE</code> statement within a Pro*C/C++ embedded SQL program:</p>
<pre>EXEC SQL DELETE FROM emp 
 WHERE deptno = :deptno 
 AND job = :job; ... 
EXEC SQL DECLARE emp_cursor CURSOR 
 FOR SELECT empno, comm 
 FROM emp; 
EXEC SQL OPEN emp_cursor; 
EXEC SQL FETCH c1 
 INTO :emp_number, :commission; 
EXEC SQL DELETE FROM emp 
 WHERE CURRENT OF emp_cursor;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1071" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1638"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABCDEFJ">&#34;DECLARE DATABASE (Oracle Embedded SQL Directive)&#34;</a> and <a href="#BABIAHAH">&#34;DECLARE STATEMENT (Embedded SQL Directive)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABEHCBB"></a>
<div id="ZZPRE1072" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">DESCRIBE<a id="sthref1639"></a> (Executable Embedded SQL)</h2>
<div id="ZZPRE1073" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1640"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1641"></a>To initialize a descriptor to hold descriptions of host variables for a dynamic SQL statement or PL/SQL block.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1074" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1642"></a>
<h3 class="sect2">Prerequisites</h3>
<p>You must have prepared the SQL statement or PL/SQL block in a previous embedded SQL <code>PREPARE</code> statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1075" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1643"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="83" src="img/image033.gif" alt="Syntax diagram: DESCRIBE"/><br/>
<a id="sthref1644" href="img_text/image033.htm">Description of the illustration image033.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1076" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1645"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>BIND VARIABLES</code></p>
<p>initializes the descriptor to hold information about the input variables for the SQL statement or PL/SQL block.</p>
<p><code>SELECT LIST</code></p>
<p>initializes the descriptor to hold information about the select list of a <code>SELECT</code> statement.</p>
<p>The default is <code>SELECT LIST FO</code>R.</p>
<p>statement_name block_name</p>
<p>identifies a SQL statement or PL/SQL block previously prepared with a <code>PREPARE</code> statement.</p>
<p>descriptor</p>
<p>is the name of the descriptor to be initialized.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1077" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1646"></a>
<h3 class="sect2">Usage Notes</h3>
<p>You must issue a <code>DESCRIBE</code> statement before manipulating the bind or select descriptor within an embedded SQL program.</p>
<p>You cannot describe both input variables and output variables into the same descriptor.</p>
<p>The number of variables found by a <code>DESCRIBE</code> statement is the total number of placeholders in the prepare SQL statement or PL/SQL block, rather than the total number of uniquely named placeholders. For more information on this command, see <a href="ch_ten.htm#CHDEFGBC">Chapter 10, &#34;Using Dynamic SQL&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1078" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1647"></a>
<h3 class="sect2">Example</h3>
<p><a id="sthref1648"></a>This example illustrates the use of the <code>DESCRIBE</code> statement in a Pro*C embedded SQL program:</p>
<pre>EXEC SQL PREPARE my_statement FROM :my_string; 
EXEC SQL DECLARE emp_cursor 
 FOR SELECT empno, ename, sal, comm 
 FROM emp 
 WHERE deptno = :dept_number 
EXEC SQL DESCRIBE BIND VARIABLES FOR my_statement 
 INTO bind_descriptor; 
EXEC SQL OPEN emp_cursor 
 USING bind_descriptor; 
EXEC SQL DESCRIBE SELECT LIST FOR my_statement 
 INTO select_descriptor; 
EXEC SQL FETCH emp_cursor 
 INTO select_descriptor;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1079" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1649"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABDFGCF">&#34;PREPARE (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDJHBG"></a>
<div id="ZZPRE1080" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1650"></a><a id="sthref1651"></a>EXECUTE ... END-EXEC<a id="sthref1652"></a> (Executable Embedded SQL Extension)</h2>
<div id="ZZPRE1081" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1653"></a>
<h3 class="sect2">Purpose<a id="sthref1654"></a></h3>
<p><a id="sthref1655"></a>To embed an anonymous PL/SQL block into an Oracle Precompiler program.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1082" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1656"></a>
<h3 class="sect2">Prerequisites</h3>
<p>None.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1083" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1657"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="48" src="img/image034.gif" alt="Syntax diagram: EXECUTE ... END-EXEC"/><br/>
<a id="sthref1658" href="img_text/image034.htm">Description of the illustration image034.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1084" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1659"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>AT</code></p>
<p>identifies the database on which the PL/SQL block is executed. The database can be identified by either:</p>
<p><span class="italic">db_name</span> is a database identifier declared in a previous <code>DECLARE</code> <code>DATABASE</code> statement.</p>
<p>:<span class="italic">host_variable</span> is a host variable whose value is a previously declared <span class="italic">db_name</span>.</p>
<p>If you omit this clause, the PL/SQL block is executed on your default database.</p>
<p>pl/sql_block</p>
<p><code>END-EXEC</code></p>
<p>must appear after the embedded PL/SQL block, regardless of which programming language your Oracle Precompiler program uses. Of course, the keyword <code>END-EXEC</code> must be followed by the embedded SQL statement terminator for the specific language.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1085" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1660"></a>
<h3 class="sect2">Usage Notes</h3>
<p>Since the Oracle Precompilers treat an embedded PL/SQL block like a single embedded SQL statement, you can embed a PL/SQL block anywhere in an Oracle Precompiler program that you can embed a SQL statement. For more information on embedding PL/SQL blocks in Oracle Precompiler programs, see <a href="ch_five.htm#BIHJJIBA">Chapter 5, &#34;Using Embedded PL/SQL&#34;</a></p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1086" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1661"></a>
<h3 class="sect2">Example<a id="sthref1662"></a></h3>
<p><a id="sthref1663"></a>Placing this <code>EXECUTE</code> statement in an Oracle Precompiler program embeds a PL/SQL block in the program:</p>
<pre>EXEC SQL EXECUTE 
 BEGIN 
 SELECT ename, job, sal 
 INTO :emp_name:ind_name, :job_title, :salary 
 FROM emp 
 WHERE empno = :emp_number; 
 IF :emp_name:ind_name IS NULL 
 THEN RAISE name_missing; 
 END IF; 
 END; 
END-EXEC
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1087" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1664"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABGBGJE">&#34;EXECUTE IMMEDIATE (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABBFGAD"></a>
<div id="ZZPRE1088" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">EXECUTE <a id="sthref1665"></a>(Executable Embedded SQL)</h2>
<div id="ZZPRE1089" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1666"></a>
<h3 class="sect2">Purpose</h3>
<p>To execute a <code>DELETE</code>, <code>INSERT</code>, or <code>UPDATE</code> statement or a PL/SQL block that has been previously prepared with an embedded SQL <code>PREPARE</code> statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1090" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1667"></a>
<h3 class="sect2">Prerequisites</h3>
<p>You must first prepare the SQL statement or PL/SQL block with an embedded SQL <code>PREPARE</code> statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1091" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1668"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="134" src="img/image035.gif" alt="Syntax diagram: EXECUTE"/><br/>
<a id="sthref1669" href="img_text/image035.htm">Description of the illustration image035.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1092" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1670"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code><a id="sthref1671"></a>FOR</code> :<span class="italic">host_integer</span></p>
<p>limits the number of times the statement is executed when the <code>USING</code> clause contains array host variables If you omit this clause, Oracle executes the statement once for each component of the smallest array.</p>
<p>statement_id</p>
<p>is a precompiler identifier associated with the SQL statement or PL/SQL block to be executed. Use the embedded SQL <code>PREPARE</code> command to associate the precompiler identifier with the statement or PL/SQL block.</p>
<p><a id="sthref1672"></a><code>USING</code></p>
<p>specifies a list of host variables with optional indicator variables that Oracle substitutes as input variables into the statement to be executed. The host and indicator variables must be either all scalars or all arrays.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1093" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1673"></a>
<h3 class="sect2">Usage Notes</h3>
<p>For more information on this command, see <a href="ch_ten.htm#CHDEFGBC">Chapter 10, &#34;Using Dynamic SQL&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1094" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1674"></a>
<h3 class="sect2">Example</h3>
<p>This example illustrates the use of the <code>EXECUTE</code> statement in a Pro*C/C++ embedded SQL program:</p>
<pre>EXEC SQL PREPARE my_statement 
 FROM :my_string; 
EXEC SQL EXECUTE my_statement
 USING :my_var;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1095" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1675"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABCDEFJ">&#34;DECLARE DATABASE (Oracle Embedded SQL Directive)&#34;</a> and <a href="#BABDFGCF">&#34;PREPARE (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGBGJE"></a>
<div id="ZZPRE1096" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1676"></a>EXECUTE IMMEDIATE<a id="sthref1677"></a> (Executable Embedded SQL)</h2>
<div id="ZZPRE1097" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1678"></a>
<h3 class="sect2">Purpose</h3>
<p>To prepare and execute a <code>DELETE</code>, <code>INSERT</code>, or <code>UPDATE</code> statement or a PL/SQL block containing no host variables.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1098" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1679"></a>
<h3 class="sect2">Prerequisites</h3>
<p>None.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1099" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1680"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="82" src="img/image036.gif" alt="Syntax diagram: EXECUTE IMMEDIATE"/><br/>
<a id="sthref1681" href="img_text/image036.htm">Description of the illustration image036.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1100" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1682"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>AT</code></p>
<p>identifies the database on which the SQL statement or PL/SQL block is executed. The database can be identified by either:</p>
<p><span class="italic">db_name</span> is a database identifier declared in a previous <code>DECLARE</code> <code>DATABASE</code> statement.</p>
<p>:<span class="italic">host_variable</span> is a host variable whose value is a previously declared <span class="italic">db_name</span>.</p>
<p>If you omit this clause, the statement or block is executed on your default database.</p>
<p>:<span class="italic">host_string</span></p>
<p>is a host variable whose value is the SQL statement or PL/SQL block to be executed.</p>
<p>text</p>
<p>is a quoted text literal containing the SQL statement or PL/SQL block to be executed.</p>
<p>The SQL statement can only be a <code>DELETE</code>, <code>INSERT</code>, or <code>UPDATE</code> statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1101" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1683"></a>
<h3 class="sect2">Usage Notes</h3>
<p><a id="sthref1684"></a>When you issue an <code>EXECUTE</code> <code>IMMEDIATE</code> statement, Oracle parses the specified SQL statement or PL/SQL block, checking for errors, and executes it. If any errors are encountered, they are returned in the <code>SQLCODE</code> component of the SQLCA.</p>
<p>For more information on this command, see <a href="ch_ten.htm#CHDEFGBC">Chapter 10, &#34;Using Dynamic SQL&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1102" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1685"></a>
<h3 class="sect2">Example<a id="sthref1686"></a></h3>
<p>This example illustrates the use of the <code>EXECUTE</code> <code>IMMEDIATE</code> statement:</p>
<pre>EXEC SQL EXECUTE IMMEDIATE &#39;DELETE FROM emp WHERE empno = 9460&#39;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1103" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1687"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABBFGAD">&#34;EXECUTE (Executable Embedded SQL)&#34;</a> and <a href="#BABDFGCF">&#34;PREPARE (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABBGIAC"></a>
<div id="ZZPRE1104" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1688"></a>FETC<a id="sthref1689"></a>H <a id="sthref1690"></a>(Executable Embedded SQL)</h2>
<div id="ZZPRE1105" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1691"></a>
<h3 class="sect2">Purpose<a id="sthref1692"></a></h3>
<p><a id="sthref1693"></a>To retrieve one or more rows returned by a query, assigning the select list values to host variables.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1106" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1694"></a>
<h3 class="sect2">Prerequisites</h3>
<p>You must first open the cursor with an the <code>OPEN</code> statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1107" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1695"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="120" src="img/image037.gif" alt="Syntax diagram: FETCH"/><br/>
<a id="sthref1696" href="img_text/image037.htm">Description of the illustration image037.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1108" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1697"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>FOR</code> :<span class="italic">host_integer</span></p>
<p>limits the number of rows fetched if you are using array host variables. If you omit this clause, Oracle fetches enough rows to fill the smallest array.</p>
<p>cursor</p>
<p>is a cursor that is declared by a <code>DECLARE</code> <code>CURSOR</code> statement. The <code>FETCH</code> statement returns one of the rows selected by the query associated with the cursor.</p>
<p>:<span class="italic">cursor_variable</span></p>
<p>is a cursor variable is allocated an <code>ALLOCATE</code> statement. The <code>FETCH</code> statement returns one of the rows selected by the query associated with the cursor variable.</p>
<p><a id="sthref1698"></a><code>INTO</code></p>
<p>specifies a list of host variables and optional indicator variables into which data is fetched. These host variables and indicator variables must be declared within the program.</p>
<p><code><a id="sthref1699"></a>USING</code></p>
<p>specifies the descriptor referenced in a previous <code>DESCRIBE</code> statement. Only use this clause with dynamic embedded SQL, method 4. Also, the <code>USING</code> clause does not apply when a cursor variable is used.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1109" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1700"></a>
<h3 class="sect2">Usage Notes</h3>
<p>The <code>FETCH</code> statement reads the rows of the active set and names the output variables which contain the results. Indicator values are set to -1 if their associated host variable is null. The first <code>FETCH</code> statement for a cursor also sorts the rows of the active set, if necessary.</p>
<p>The number of rows retrieved is specified by the size of the output host variables and the value specified in the <code>FOR</code> clause. The host variables to receive the data must be either all scalars or all arrays. If they are scalars, Oracle fetches only one row. If they are arrays, Oracle fetches enough rows to fill the arrays.</p>
<p>Array host variables can have different sizes. In this case, the number of rows Oracle fetches is determined by the smaller of the following values:</p>
<ul>
<li>
<p>The size of the smallest array</p>
</li>
<li>
<p>The value of the :<span class="italic">host_integer</span> in the optional <code>FOR</code> clause</p>
</li>
</ul>
<p>Of course, the number of rows fetched can be further limited by the number of rows that actually satisfy the query.</p>
<p>If a <code>FETCH</code> statement does not retrieve all rows returned by the query, the cursor is positioned on the next returned row. When the last row returned by the query has been retrieved, the next <code>FETCH</code> statement results in an error code returned in the <code>SQLCODE</code> element of the SQLCA.</p>
<p>Note that the <code>FETCH</code> command does not contain an <code>AT</code> clause. You must specify the database accessed by the cursor in the <code>DECLARE</code> <code>CURSOR</code> statement.</p>
<p>You can only move forward through the active set with <code>FETCH</code> statements. If you want to revisit any of the previously fetched rows, you must reopen the cursor and fetch each row in turn. If you want to change the active set, you must assign new values to the input host variables in the cursor&#39;s query and reopen the cursor.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1110" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1701"></a>
<h3 class="sect2">Example</h3>
<p><a id="sthref1702"></a>This example illustrates the <code>FETCH</code> command in a pseudo-code embedded SQL program:</p>
<pre>EXEC SQL DECLARE emp_cursor CURSOR FOR 
 SELECT job, sal FROM emp WHERE deptno = 30; 
... 
EXEC SQL WHENEVER NOT FOUND GOTO ... 
LOOP 
 EXEC SQL FETCH emp_cursor INTO :job_title1, :salary1; 
 EXEC SQL FETCH emp_cursor INTO :job_title2, :salary2; 
... 
END LOOP; 
...
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1111" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1703"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABJFBAJ">&#34;CLOSE (Executable Embedded SQL)&#34;</a>, <a href="#BABDBBBG">&#34;DECLARE CURSOR (Embedded SQL Directive)&#34;</a>, <a href="#BABHFEGE">&#34;OPEN (Executable Embedded SQL)&#34;</a>, and <a href="#BABDFGCF">&#34;PREPARE (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCGCGA"></a>
<div id="ZZPRE1112" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1704"></a><a id="sthref1705"></a>INSE<a id="sthref1706"></a>RT <a id="sthref1707"></a>(Executable Embedded SQL)</h2>
<div id="ZZPRE1113" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1708"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1709"></a><a id="sthref1710"></a>To add rows to a table or to a view&#39;s base table.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1114" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1711"></a>
<h3 class="sect2">Prerequisites</h3>
<p>For you to insert rows into a table, the table must be in your own schema or you must have <code>INSERT</code> privilege on the table.</p>
<p>For you to insert rows into the base table of a view, the owner of the schema containing the view must have <code>INSERT</code> privilege on the base table. Also, if the view is in a schema other than your own, you must have <code>INSERT</code> privilege on the view.</p>
<p>The <code>INSERT ANY TABLE</code> system privilege also enables insert rows into any table or any view&#39;s base table.</p>
<p>If you are using Oracle in <code>DBMS MAC</code> mode, your DBMS label must match the creation label of the table or view:</p>
<ul>
<li>
<p>If the creation label of the table or view is higher than your DBMS label, you must have <code>WRITEUP</code> system privileges.</p>
</li>
<li>
<p>If the creation label of the table or view is lower than your DBMS label, you must have <code>WRITEDOWN</code> system privilege.</p>
</li>
<li>
<p>If the creation label of your table or view is not comparable to your DBMS label, you must have <code>WRITEUP</code> and <code>WRITEDOWN</code> system privileges.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1115" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1712"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="148" src="img/image038.gif" alt="Syntax diagram: INSERT"/><br/>
<a id="sthref1713" href="img_text/image038.htm">Description of the illustration image038.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1116" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1714"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>AT</code></p>
<p><a id="sthref1715"></a>identifies the database on which the <code>INSERT</code> statement is executed. The database can be identified by either:</p>
<p><span class="italic">db_name</span> is a database identifier declared in a previous <code>DECLARE</code> <code>DATABASE</code> statement.</p>
<p>:<span class="italic">host_variable</span> is a host variable whose value is a previously declared <span class="italic">db_name</span></p>
<p>If you omit this clause, the <code>INSERT</code> statement is executed on your default database.</p>
<p><code><a id="sthref1716"></a>FOR</code> :<span class="italic">host_integer</span></p>
<p>limits the number of times the statement is executed if the <code>VALUES</code> clause contains array host variables. If you omit this clause, Oracle executes the statement once for each component in the smallest array.</p>
<p>schema</p>
<p>is the schema containing the table or view. If you omit <span class="italic">schema</span>, Oracle assumes the table or view is in your own schema.</p>
<p>table view</p>
<p>is the name of the table into which rows are to be inserted. If you specify <span class="italic">view</span>, Oracle inserts rows into the view&#39;s base table.</p>
<p>dblink</p>
<p>is a complete or partial name of a database link to a remote database where the table or view is located. You can only insert rows into a remote table or view if you are using Oracle with the distributed option.</p>
<p>If you omit <span class="italic">dblink</span>, Oracle assumes that the table or view is on the local database.</p>
<p>column</p>
<p>is a column of the table or view. In the inserted row, each column in this list is assigned a value from the <code>VALUES</code> clause or the query.</p>
<p>If you omit one of the table&#39;s columns from this list, the column&#39;s value for the inserted row is the column&#39;s default value as specified when the table was created. If you omit the column list altogether, the <code>VALUES</code> clause or query must specify values for all columns in the table.</p>
<p><code><a id="sthref1717"></a><a id="sthref1718"></a>VALUES</code></p>
<p>specifies a row of values to be inserted into the table or view. Note that the expressions can be host variables with optional indicator variables. You must specify an expression in the <code>VALUES</code> clause for each column in the column list.</p>
<p>subquery</p>
<p>is a subquery that returns rows that are inserted into the table. The select list of this subquery must have the same number of columns as the column list of the <code>INSERT</code> statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1117" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1719"></a>
<h3 class="sect2">Usage Notes</h3>
<p>Any host variables that appear in the <code>WHERE</code> clause must be either all scalars or all arrays. If they are scalars, Oracle executes the <code>INSERT</code> statement once. If they are arrays, Oracle executes the <code>INSERT</code> statement once for each set of array components, inserting one row each time.</p>
<p>Array host variables in the <code>WHERE</code> clause can have different sizes. In this case, the number of times Oracle executes the statement is determined by the smaller of the following values:</p>
<ul>
<li>
<p>size of the smallest array</p>
</li>
<li>
<p>the value of the :<span class="italic">host_integer</span> in the optional FOR clause.</p>
</li>
</ul>
<p>For more information on this command, see <a href="ch_four.htm#BABEGAEG">Chapter 4, &#34;&nbsp;Using Embedded SQL&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1118" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1720"></a>
<h3 class="sect2"><a id="sthref1721"></a>Example I</h3>
<p>This example illustrates the use of the embedded SQL <code>INSERT</code> command:</p>
<pre>EXEC SQL 
 INSERT INTO emp (ename, empno, sal) 
 VALUES (:ename, :empno, :sal);
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1119" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1722"></a>
<h3 class="sect2">Example II</h3>
<p>This example shows an embedded SQL <code>INSERT</code> command with a subquery:</p>
<pre>EXEC SQL 
 INSERT INTO new_emp (ename, empno, sal) 
 SELECT ename, empno, sal FROM emp
 WHERE deptno = :deptno;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1120" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1723"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABCDEFJ">&#34;DECLARE DATABASE (Oracle Embedded SQL Directive)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHFEGE"></a>
<div id="ZZPRE1121" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1724"></a><a id="sthref1725"></a>OPEN<a id="sthref1726"></a> <a id="sthref1727"></a>(Executable Embedded SQL)</h2>
<div id="ZZPRE1122" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1728"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1729"></a>To open a cursor, evaluating the associated query and substituting the host variable names supplied by the <code>USING</code> clause into the <code>WHERE</code> clause of the query.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1123" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1730"></a>
<h3 class="sect2">Prerequisites</h3>
<p>You must declare the cursor with a <code>DECLARE</code> <code>CURSOR</code> embedded SQL statement before opening it.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1124" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1731"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="116" src="img/image039.gif" alt="Syntax diagram: OPEN"/><br/>
<a id="sthref1732" href="img_text/image039.htm">Description of the illustration image039.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1125" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1733"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><span class="italic">cursor</span></p>
<p>is the cursor to be opened.</p>
<p><code><a id="sthref1734"></a>USING</code></p>
<p><a id="sthref1735"></a>specifies the host variables to be substituted into the <code>WHERE</code> clause of the associated query.</p>
<p>:<span class="italic">host_variable</span> specifies a host variable with an optional indicator variable to be substituted into the statement associated with the cursor.</p>
<p><code>DESCRIPTOR</code></p>
<p>specifies a descriptor that describes the host variables to be substituted into the <code>WHERE</code> clause of the associated query. The <span class="italic">descriptor</span> must be initialized in a previous <code>DESCRIBE</code> statement.</p>
<p>The substitution is based on position. The host variable names specified in this statement can be different from the variable names in the associated query.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1126" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1736"></a>
<h3 class="sect2">Usage Notes</h3>
<p><a id="sthref1737"></a>The <code>OPEN</code> command defines the active set of rows and initializes the cursor just before the first row of the active set. The values of the host variables at the time of the <code>OPEN</code> are substituted in the statement. This command does not actually retrieve rows; rows are retrieved by the <code>FETCH</code> command.</p>
<p>After you have opened a cursor, its input host variables are not reexamined until you reopen the cursor. To change any input host variables and therefore the active set, you must reopen the cursor.</p>
<p>All cursors in a program are in a closed state when the program is initiated or when they have been explicitly closed using the <code>CLOSE</code> command.</p>
<p>You can reopen a cursor without first closing it. For more information on this command, see <a href="ch_four.htm#BABEGAEG">Chapter 4, &#34;&nbsp;Using Embedded SQL&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1127" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1738"></a>
<h3 class="sect2"><a id="sthref1739"></a>Example</h3>
<p>This example illustrates the use of the <code>OPEN</code> command in a Pro*C/C++ embedded SQL program:</p>
<pre>EXEC SQL DECLARE emp_cursor CURSOR FOR 
 SELECT ename, empno, job, sal 
 FROM emp 
 WHERE deptno = :deptno; 
EXEC SQL OPEN emp_cursor;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1128" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1740"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABJFBAJ">&#34;CLOSE (Executable Embedded SQL)&#34;</a>. <a href="#BABDBBBG">&#34;DECLARE CURSOR (Embedded SQL Directive)&#34;</a>, <a href="#BABBGIAC">&#34;FETCH (Executable Embedded SQL)&#34;</a>, and <a href="#BABDFGCF">&#34;PREPARE (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDFGCF"></a>
<div id="ZZPRE1129" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1741"></a><a id="sthref1742"></a>PREPARE <a id="sthref1743"></a>(Executable Embedded SQL)</h2>
<div id="ZZPRE1130" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1744"></a>
<h3 class="sect2">Purpose</h3>
<p>To parse a SQL statement or PL/SQL block specified by a host variable and associate it with an identifier.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1131" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1745"></a>
<h3 class="sect2">Prerequisites</h3>
<p>None.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1132" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1746"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="32" src="img/image040.gif" alt="Syntax diagram: PREPARE"/><br/>
<a id="sthref1747" href="img_text/image040.htm">Description of the illustration image040.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1133" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1748"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><span class="italic">statement_id</span></p>
<p>is the identifier to be associated with the prepared SQL statement or PL/SQL block. If this identifier was previously assigned to another statement or block, the prior assignment is superseded.</p>
<p>:<span class="italic">host_string</span></p>
<p>is a host variable whose value is the text of a SQL statement or PL/SQL block to be prepared.</p>
<p>text</p>
<p>is a string literal containing a SQL statement or PL/SQL block to be prepared.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1134" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1749"></a>
<h3 class="sect2">Usage Notes</h3>
<p>Any variables that appear in the :<span class="italic">host_string</span> or <span class="italic">text</span> are placeholders. The actual host variable names are assigned in the <code>USING</code> clause of the <code>OPEN</code> command (input host variables) or in the <code>INTO</code> clause of the <code>FETCH</code> command (output host variables).</p>
<p>A SQL statement is prepared only once, but can be executed any number of times.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1135" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1750"></a>
<h3 class="sect2"><a id="sthref1751"></a>Example</h3>
<p>This example illustrates the use of a <code>PREPARE</code> statement in a Pro*C/C++ embedded SQL program:</p>
<pre>EXEC SQL PREPARE my_statement FROM :my_string;
EXEC SQL EXECUTE my_statement;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1136" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1752"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABJFBAJ">&#34;CLOSE (Executable Embedded SQL)&#34;</a>, <a href="#BABDBBBG">&#34;DECLARE CURSOR (Embedded SQL Directive)&#34;</a>, <a href="#BABBGIAC">&#34;FETCH (Executable Embedded SQL)&#34;</a>, and <a href="#BABHFEGE">&#34;OPEN (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABBCHGE"></a>
<div id="ZZPRE1137" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1753"></a><a id="sthref1754"></a><a id="sthref1755"></a>ROLLBACK (Executable Embedded SQL)</h2>
<div id="ZZPRE1138" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1756"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1757"></a>To undo work done in the current transaction.</p>
<p>You can also use this command to manually undo the work done by an in-doubt distributed transaction.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1139" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1758"></a>
<h3 class="sect2">Prerequisites</h3>
<p>To roll back your current transaction, no privileges are necessary.</p>
<p>To manually roll back an in-doubt distributed transaction that you originally committed, you must have F<code>ORCE TRANSACTION</code> system privilege. To manually roll back an in-doubt distributed transaction originally committed by another user, you must have <code>FORCE ANY TRANSACTION</code> system privilege.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1140" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1759"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="135" src="img/image041.gif" alt="Syntax diagram: ROLLBACK"/><br/>
<a id="sthref1760" href="img_text/image041.htm">Description of the illustration image041.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1141" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1761"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code><a id="sthref1762"></a>WORK</code></p>
<p>is optional and is provided for ANSI compatibility.</p>
<p><code><a id="sthref1763"></a>TO</code></p>
<p>rolls back the current transaction to the specified savepoint. If you omit this clause, the <code>ROLLBACK</code> statement rolls back the entire transaction.</p>
<p><code>FORCE</code></p>
<p>manually rolls back an in-doubt distributed transaction. The transaction is identified by the <span class="italic">text</span> containing its local or global transaction ID. To find the IDs of such transactions, query the data dictionary view <code>DBA_2PC_PENDING</code>.</p>
<p><code><a id="sthref1764"></a>ROLLBACK</code> statements with the <code>FORCE</code> clause are not supported in PL/SQL.</p>
<p><code>RELEASE</code></p>
<p>frees all resources and disconnects the application from the Oracle Server. The <code>RELEASE</code> clause is not allowed with <code>SAVEPOINT</code> and <code>FORCE</code> clauses.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1142" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1765"></a>
<h3 class="sect2">Usage Notes</h3>
<p>A transaction (or a logical unit of work) is a sequence of SQL statements that Oracle treats as a single unit. A transaction begins with the first executable SQL statement after a <code>COMMIT</code>, <code>ROLLBACK</code> or connection to the database. A transaction <a id="sthref1766"></a>ends with a <code>COMMIT</code> statement, a <code>ROLLBACK</code> statement, or disconnection (intentional or unintentional) from the database. Note that Oracle issues an implicit <code>COMMIT</code> statement before and after processing any data definition language statement.</p>
<p><a id="sthref1767"></a>Using the <code>ROLLBACK</code> command without the <code>TO SAVEPOINT</code> clause performs the following operations:</p>
<ul>
<li>
<p>ends the transaction</p>
</li>
<li>
<p>undoes all changes in the current transaction</p>
</li>
<li>
<p>erases all savepoints in the transaction</p>
</li>
<li>
<p>releases the transaction&#39;s locks</p>
</li>
</ul>
<p>Using the <code>ROLLBACK</code> command with the <code>TO SAVEPOINT</code> clause performs the following operations:</p>
<ul>
<li>
<p>rolls back just the portion of the transaction after the savepoint.</p>
</li>
<li>
<p><a id="sthref1768"></a>loses all savepoints created after that savepoint. Note that the named savepoint is retained, so you can roll back to the same savepoint multiple times. Prior savepoints are also retained.</p>
</li>
<li>
<p>releases all table and row locks acquired since the savepoint. Note that other transactions that have requested access to rows locked after the savepoint must continue to wait until the transaction is committed or rolled back. Other transactions that have not already requested the rows can request and access the rows immediately.</p>
</li>
</ul>
<p>It is recommended that you explicitly end transactions in application programs using either a <code>COMMIT</code> or <code>ROLLBACK</code> statement. If you do not explicitly commit the transaction and the program terminates abnormally, Oracle rolls back the last uncommitted transaction.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1143" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1769"></a>
<h3 class="sect2"><a id="sthref1770"></a>Example I</h3>
<p>The following statement rolls back your entire current transaction:</p>
<pre>EXEC SQL ROLLBACK;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1144" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1771"></a>
<h3 class="sect2">Example II</h3>
<p>The following statement rolls back your current transaction to savepoint SP5:</p>
<pre>EXEC SQL ROLLBACK TO SAVEPOINT sp5;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1145" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1772"></a>
<h3 class="sect2">Distributed <a id="sthref1773"></a>Transactions</h3>
<p>Oracle with the distributed option enables perform distributed transactions, or transactions that modify data on multiple databases. To commit or roll back a distributed transaction, you need only issue a <code>COMMIT</code> or <code>ROLLBACK</code> statement as you would any other transaction.</p>
<p>If there is a network failure during the commit process for a distributed transaction, the state of the transaction may be unknown, or in-doubt. After consultation with the administrators of the other databases involved in the transaction, you may decide to manually commit or roll back the transaction on your local database. You can manually roll back the transaction on your local database by issuing a <code>ROLLBACK</code> statement with the <code>FORCE</code> clause.</p>
<p>You cannot manually roll back an in-doubt transaction to a savepoint.</p>
<p>A <code>ROLLBACK</code> statement with a <code>FORCE</code> clause only rolls back the specified transaction. Such a statement does not affect your current transaction.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1146" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1774"></a>
<h3 class="sect2">Example III</h3>
<p>The following statement manually rolls back an in-doubt distributed transaction:</p>
<pre>EXEC SQL
 ROLLBACK WORK
 FORCE &#39;25.32.87&#39;;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1147" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1775"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABBIIIF">&#34;COMMIT (Executable Embedded SQL)&#34;</a> and <a href="#BABCAIIB">&#34;SAVEPOINT (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCAIIB"></a>
<div id="ZZPRE1148" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1776"></a><a id="sthref1777"></a>SAVEPOINT<a id="sthref1778"></a> (Executable Embedded SQL)</h2>
<div id="ZZPRE1149" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1779"></a>
<h3 class="sect2">Purpose<a id="sthref1780"></a></h3>
<p><a id="sthref1781"></a>To identify a point in a transaction to which you can later roll back.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1150" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1782"></a>
<h3 class="sect2">Prerequisites</h3>
<p>None.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1151" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1783"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="48" src="img/image042.gif" alt="Syntax diagram: SAVEPOINT"/><br/>
<a id="sthref1784" href="img_text/image042.htm">Description of the illustration image042.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1152" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1785"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>AT</code></p>
<p>identifies the database on which the savepoint is created. The database can be identified by either:</p>
<p><span class="italic">db_name</span> is a database identifier declared in a previous <code>DECLARE</code> <code>DATABASE</code> statement.</p>
<p>:<span class="italic">host_variable</span> is a host variable whose value is a previously declared <span class="italic">db_name</span>.</p>
<p>If you omit this clause, the savepoint is created on your default database.</p>
<p>savepoint</p>
<p>is the name of the savepoint to be created.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1153" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1786"></a>
<h3 class="sect2">Usage Notes</h3>
<p><a id="sthref1787"></a>For more information on this command, see <a href="ch_seven.htm#BABIFBDG">Chapter 7, &#34;Defining and Controlling Transactions&#34;</a>.</p>
<p>Example</p>
<p><a id="sthref1788"></a>This example illustrates the use of the embedded SQL <code>SAVEPOINT</code> command:</p>
<pre>EXEC SQL SAVEPOINT save3;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1154" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1789"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABBIIIF">&#34;COMMIT (Executable Embedded SQL)&#34;</a> and <a href="#BABBCHGE">&#34;ROLLBACK (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHGCHD"></a>
<div id="ZZPRE1155" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1790"></a>SELECT<a id="sthref1791"></a> (Executable Embedded SQL)</h2>
<div id="ZZPRE1156" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1792"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1793"></a>To retrieve data from one or more tables, views, or snapshots, assigning the selected values to host variables.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1157" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1794"></a>
<h3 class="sect2">Prerequisites</h3>
Edits for feature 47829-1 - New READ Privilege
<p>For you to select data from a table or snapshot, the table or snapshot must be in your own schema or you must have <code>READ or SELECT</code> privilege on the table or snapshot.</p>
<p>For you to select rows from the base tables of a view, the owner of the schema containing the view must have <code>READ or SELECT</code> privilege on the base tables. Also, if the view is in a schema other than your own, you must have <code>READ or SELECT</code> privilege on the view.</p>
<p>The <code>READ ANY TABLE or SELECT ANY TABLE</code> system privilege also enables select data from any table or any snapshot or any view&#39;s base table.</p>
<p>If you are using Oracle in <code>DBMS MAC</code> mode, your DBMS label must dominate the creation label of each queried table, view, or snapshot or you must have <code>READUP</code> system privileges.</p>
<p>The READ privilege cannot be used for SELECT ... FOR UPDATE operations.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1158" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1795"></a>
<h3 class="sect2">Syntax</h3>
<img width="622" height="547" src="img/image043.gif" alt="Syntax diagram: SELECT"/><br/>
<a id="sthref1796" href="img_text/image043.htm">Description of the illustration image043.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1159" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1797"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>AT</code></p>
<p>identifies the database to which the <code>SELECT</code> statement is issued. The database can be identified by either:</p>
<p><span class="italic">db_name</span> is a database identifier declared in a previous <code>DECLARE</code> <code>DATABASE</code> statement.</p>
<p>:<span class="italic">host_variable</span> is a host variable whose value is a previously declared <span class="italic">db_name</span>.</p>
<p>If you omit this clause, the <code>SELECT</code> statement is issued to your default database.</p>
<p>select_list</p>
<p>identical to the non-embedded <code>SELECT</code> command except that a host variables can be used in place of literals.</p>
<p><a id="sthref1798"></a><code>INTO</code></p>
<p>specifies output host variables and optional indicator variables to receive the data returned by the <code>SELECT</code> statement. Note that these variables must be either all scalars or all arrays, but arrays need not have the same size.</p>
<p>WHERE</p>
<p>restricts the rows returned to those for which the condition is <code>TRUE</code>. The <span class="italic">condition</span> can contain host variables, but cannot contain indicator variables. These host variables can be either scalars or arrays.</p>
<p>All other keywords and parameters are identical to the non-embedded SQL <code>SELECT</code> command.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1160" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1799"></a>
<h3 class="sect2">Usage Notes</h3>
<p>If no rows meet the <code>WHERE</code> clause condition, no rows are retrieved and Oracle returns an error code through the <code>SQLCODE</code> component of the SQLCA.</p>
<p>You can use comments in a <code>SELECT</code> statement to pass instructions, or <span class="italic">hints</span>, to the Oracle optimizer. The optimizer uses <a id="sthref1800"></a>hints to choose an execution plan for the statement. For more information on hints, see <a class="olink TGDBA" href="../TGDBA/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1161" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1801"></a>
<h3 class="sect2">Example</h3>
<p><a id="sthref1802"></a>This example illustrates the use of the embedded SQL <code>SELECT</code> command:</p>
<pre>EXEC SQL SELECT ename, sal + 100, job 
 INTO :ename, :sal, :job 
 FROM emp 
 WHERE empno = :empno
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1162" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1803"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABDBBBG">&#34;DECLARE CURSOR (Embedded SQL Directive)&#34;</a>, <a href="#BABCDEFJ">&#34;DECLARE DATABASE (Oracle Embedded SQL Directive)&#34;</a>, <a href="#BABBFGAD">&#34;EXECUTE (Executable Embedded SQL)&#34;</a>, <a href="#BABBGIAC">&#34;FETCH (Executable Embedded SQL)&#34;</a>, and <a href="#BABDFGCF">&#34;PREPARE (Executable Embedded SQL)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDIHFG"></a>
<div id="ZZPRE1163" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1804"></a><a id="sthref1805"></a>UPD<a id="sthref1806"></a>ATE<a id="sthref1807"></a> <a id="sthref1808"></a>(Executable Embedded SQL)</h2>
<div id="ZZPRE1164" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1809"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1810"></a>To change existing values in a table or in a view&#39;s base table.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1165" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1811"></a>
<h3 class="sect2">Prerequisites</h3>
<p>For you to update values in a table or snapshot, the table must be in your own schema or you must have <code>UPDATE</code> privilege on the table.</p>
<p>For you to update values in the base table of a view, the owner of the schema containing the view must have <code>UPDATE</code> privilege on the base table. Also, if the view is in a schema other than your own, you must have <code>UPDATE</code> privilege on the view.</p>
<p>The <code>UPDATE ANY TABL</code>E system privilege also enables update values in any table or any view&#39;s base table.</p>
<p>If you are using Oracle in <code>DBMS MAC</code> mode, your DBMS label must match the creation label of the table or view:</p>
<ul>
<li>
<p>If the creation label of the table or view is higher than your DBMS label, you must have <code>READUP</code> and <code>WRITEUP</code> system privileges</p>
</li>
<li>
<p>If the creation label of the table or view is lower than your DBMS label, you must have <code>WRITEDOWN</code> system privilege.</p>
</li>
<li>
<p>If the creation label of your table or view is not comparable to your DBMS label, you must have <code>READUP</code>, <code>WRITEUP</code>, and <code>WRITEDOWN</code> system privileges.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1166" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1812"></a>
<h3 class="sect2">Syntax</h3>
<img width="450" height="271" src="img/image044.gif" alt="Syntax diagram: UPDATE"/><br/>
<a id="sthref1813" href="img_text/image044.htm">Description of the illustration image044.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1167" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1814"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code>AT</code></p>
<p>identifies the database to which the <code>UPDATE</code> statement is issued. The database can be identified by either:</p>
<p><span class="italic">db_name</span> is a database identifier declared in a previous <code>DECLARE</code> <code>DATABASE</code> statement.</p>
<p>:<span class="italic">host_variable</span> is a host variable whose value is a previously declared <span class="italic">db_name</span>.</p>
<p><a id="sthref1815"></a>If you omit this clause, the <code>UPDATE</code> statement is issued to your default database.</p>
<p><code>FOR</code> :<span class="italic">host_integer</span></p>
<p>limits the number of times the <code>UPDATE</code> statement is executed if the <code>SET</code> and <code>WHERE</code> clauses contain array host variables. If you omit this clause, Oracle executes the statement once for each component of the smallest array.</p>
<p>schema</p>
<p>is the schema containing the table or view. If you omit <span class="italic">schema</span>, Oracle assumes the table or view is in your own schema.</p>
<p>table view</p>
<p>is the name of the table to be updated. If you specify <span class="italic">view</span>, Oracle updates the view&#39;s base table.</p>
<p>dblink</p>
<p>is a complete or partial name of a database link to a remote database where the table or view is located. You can only use a database link to <a id="sthref1816"></a>update a remote table or view if you are using Oracle with the distributed option.</p>
<p>alias</p>
<p>is a name used to reference the table, view, or subquery elsewhere in the statement.</p>
<p>column</p>
<p>is the name of a column of the table or view that is to be updated. If you omit a column of the table from the <code>SET</code> clause, that column&#39;s value remains unchanged.</p>
<p>expr</p>
<p>is the new value assigned to the corresponding column. This expression can contain host variables and optional indicator variables.</p>
<p>subquery_1</p>
<p>is a subquery that returns new values that are assigned to the corresponding columns.</p>
<p>subquery_2</p>
<p>is a subquery that return a new value that is assigned to the corresponding column.</p>
<p><code><a id="sthref1817"></a>WHERE</code></p>
<p>specifies which rows of the table or view are updated:</p>
<p><span class="italic">condition</span> updates only rows for which this condition is true. This condition can contain host variables and optional indicator variables.</p>
<p><code><a id="sthref1818"></a>CURRENT OF</code> updates only the row most recently fetched by the <span class="italic">cursor</span>. The <span class="italic">cursor</span> cannot be associated with a <code>SELECT</code> statement that performs a join unless its <code>FOR</code> <code>UPDATE</code> clause explicitly locks only one table.</p>
<p>If you omit this clause entirely, Oracle updates all rows of the table or view.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1168" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1819"></a>
<h3 class="sect2">Usage Notes</h3>
<p>Host variables in the <code>SET</code> and <code>WHERE</code> clauses must be either all scalars or all arrays. If they are scalars, Oracle executes the <code>UPDATE</code> statement only once. If they are arrays, Oracle executes the statement once for each set of array components. Each execution may update zero, one, or multiple rows.</p>
<p>Array host variables can have different sizes. In this case, the number of times Oracle executes the statement is determined by the smaller of the following values:</p>
<ul>
<li>
<p>the size of the smallest array</p>
</li>
<li>
<p>the value of the :<span class="italic">host_integer</span> in the optional <code>FOR</code> clause</p>
</li>
</ul>
<p>The cumulative number of rows updated is returned through the third element of the <code>SQLERRD</code> component of the SQLCA. When arrays are used as input host variables, this count reflects the total number of updates for all components of the array processed in the UPDATE statement. If no rows satisfy the condition, no rows are updated and Oracle returns an error message through the <code>SQLCODE</code> element of the SQLCA. If you omit the <code>WHERE</code> clause, all rows are updated and Oracle raises a warning flag in the fifth component of the <code>SQLWARN</code> element of the SQLCA.</p>
<p>You can use comments in an <code>UPDATE</code> statement to pass instructions, or <span class="italic">hints</span>, to the Oracle optimizer. The optimizer uses <a id="sthref1820"></a>hints to choose an execution plan for the statement.</p>
<p>For more information on this command, see <a href="ch_four.htm#BABEGAEG">Chapter 4, &#34;&nbsp;Using Embedded SQL&#34;</a> and <a href="ch_seven.htm#BABIFBDG">Chapter 7, &#34;Defining and Controlling Transactions&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1169" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1821"></a>
<h3 class="sect2"><a id="sthref1822"></a>Examples</h3>
<p>The following examples illustrate the use of the embedded SQL <code>UPDATE</code> command:</p>
<pre>EXEC SQL UPDATE emp 
 SET sal = :sal, comm = :comm INDICATOR :comm_ind 
 WHERE ename = :ename; 
 
EXEC SQL UPDATE emp 
 SET (sal, comm) = 
 (SELECT AVG(sal)*1.1, AVG(comm)*1.1 
 FROM emp) 
 WHERE ename = &#39;JONES&#39;;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1170" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1823"></a>
<h3 class="sect2">Related Topics</h3>
<p><a href="#BABCDEFJ">&#34;DECLARE DATABASE (Oracle Embedded SQL Directive)&#34;</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABBCDDA"></a>
<div id="ZZPRE1171" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1824"></a><a id="sthref1825"></a>VAR (Oracle Embedded SQL Directive)</h2>
<div id="ZZPRE1172" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1826"></a>
<h3 class="sect2">Purpose</h3>
<p><a id="sthref1827"></a>To perform <span class="italic">host variable equivalencing</span>, or to assign a specific Oracle external datatype to an individual host variable, overriding the default datatype assignment.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1173" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1828"></a>
<h3 class="sect2">Prerequisites</h3>
<p>The host variable must be previously declared in the Declare Section of the embedded SQL program.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1174" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1829"></a>
<h3 class="sect2">Syntax</h3>
<img width="452" height="15" src="img/image045.gif" alt="Syntax diagram: VAR"/><br/>
<a id="sthref1830" href="img_text/image045.htm">Description of the illustration image045.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1175" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1831"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><span class="italic">host_variable</span></p>
<p>is the host variable to be assigned an Oracle external datatype.</p>
<p><span class="italic">datatype</span></p>
<p>is an Oracle external datatype recognized by the Oracle Precompilers (not an Oracle internal datatype). The datatype may include a length, precision, or scale. This external datatype is assigned to the <span class="italic">host_variable</span>. For a list of external datatypes, see <a href="ch_three.htm#BABCBCDA">Chapter 3, &#34;Meeting Program Requirements&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1176" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1832"></a>
<h3 class="sect2">Usage Notes</h3>
<p>Host variable equivalencing is one kind of datatype equivalencing. Datatype equivalencing is useful for any of the following purposes:</p>
<ul>
<li>
<p>to automatically null-terminate a character host variable</p>
</li>
<li>
<p>to store program data as binary data in the database</p>
</li>
<li>
<p>to override default datatype conversion</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1177" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1833"></a>
<h3 class="sect2"><a id="sthref1834"></a>Example</h3>
<p>This example equivalences the host variable <code>DEPT_NAME</code> to</p>
<p>the datatype <code>STRING</code> and the host variable <code>BUFFER</code> to the datatype <code>RAW(2000)</code>:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION; 
 ... 
 dept_name CHARACTER(15); -- default datatype is CHAR 
 EXEC SQL VAR dept_name IS STRING; -- reset to STRING 
 ... 
 buffer CHARACTER(200); -- default datatype is CHAR 
 EXEC SQL VAR buffer IS RAW(200); -- refer to RAW 
 ...
EXEC SQL END DECLARE SECTION;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1178" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1835"></a>
<h3 class="sect2">Related Topics</h3>
<p>None.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHAGDH"></a>
<div id="ZZPRE1179" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1836"></a>WHENEVER<a id="sthref1837"></a> (Embedded SQL Directive)</h2>
<div id="ZZPRE1180" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1838"></a>
<h3 class="sect2">Purpose</h3>
<p>To specify the action to be taken when an error or warning results from executing an embedded SQL program.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1181" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1839"></a>
<h3 class="sect2">Prerequisites</h3>
<p>None.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1182" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1840"></a>
<h3 class="sect2">Syntax</h3>
<p>The following syntax diagram shows how to construct a <code>WHENEVER</code> statement:</p>
<img width="452" height="64" src="img/image046.gif" alt="Syntax diagram: WHENEVER"/><br/>
<a id="sthref1841" href="img_text/image046.htm">Description of the illustration image046.gif</a><br/>
<br/></div>
<!-- class="sect2" -->
<div id="ZZPRE1183" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1842"></a>
<h3 class="sect2">Keywords and Parameters</h3>
<p><code><a id="sthref1843"></a>NOT FOUND</code></p>
<p>identifies any exception condition that returns an error code of +1403 to <code>SQLCODE</code> (or a +100 code when <code>MODE=ANSI</code>).</p>
<p><code><a id="sthref1844"></a>SQLERROR</code></p>
<p>identifies a condition that results in a negative return code.</p>
<p><code><a id="sthref1845"></a>SQLWARNING</code></p>
<p>identifies a non-fatal warning condition.</p>
<p><code>CONTINUE</code></p>
<p><a id="sthref1846"></a>indicates that the program should progress to the next statement.</p>
<p><code>GOTO</code></p>
<p><a id="sthref1847"></a>indicates that the program should branch to the statement named by <span class="italic">label</span>.</p>
<p><code><a id="sthref1848"></a>STOP</code></p>
<p>stops program execution.</p>
<p><code>DO</code></p>
<p><a id="sthref1849"></a>indicates that the program should call a host language routine. The syntax of <span class="italic">routine</span> depends on your host language. See your language-specific Supplement to the Oracle Precompilers Guide.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1184" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1850"></a>
<h3 class="sect2">Usage Notes</h3>
<p><a id="sthref1851"></a>The <code>WHENEVER</code> command allows your program to transfer control to an error handling routine in the event an embedded SQL statement results in an error or warning.</p>
<p>The scope of a <code>WHENEVER</code> statement is positional, rather than logical. A <code>WHENEVER</code> statement applies to all embedded SQL statements that textually follow it in the source file, not in the flow of the program logic. A <code>WHENEVER</code> statement remains in effect until it is superseded by another <code>WHENEVER</code> statement checking for the same condition.</p>
<p>For more information on this command, see <a href="ch_seven.htm#BABIFBDG">Chapter 7, &#34;Defining and Controlling Transactions&#34;</a>. Do not confuse the <code>WHENEVER</code> embedded SQL command with the <code>WHENEVER</code> SQL*Plus command.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE1185" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1852"></a>
<h3 class="sect2">E<a id="sthref1853"></a>xample</h3>
<p>The following example illustrates the use of the <code>WHENEVER</code> command in a Pro*C/C++ embedded SQL program:</p>
<pre>EXEC SQL WHENEVER NOT FOUND CONTINUE;
... 
EXEC SQL WHENEVER SQLERROR GOTO sql_error: 
... 
sql_error: 
 EXEC SQL WHENEVER SQLERROR CONTINUE; 
 EXEC SQL ROLLBACK RELEASE;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE1186" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1854"></a>
<h3 class="sect2">Related Topics</h3>
<p>None.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3238">
<tr>
<td class="cellalignment3247">
<table class="cellalignment3243">
<tr>
<td class="cellalignment3242"><a href="appd.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3242"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3249">
<table class="cellalignment3241">
<tr>
<td class="cellalignment3242"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3242"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3242"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3242"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3242"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3242"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>