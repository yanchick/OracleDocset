<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114747"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Performance%20Tuning"></a><title>Performance Tuning</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-06T18:44:40Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Programmer&#39;s Guide to the Oracle Precompilers"/>
<meta name="dcterms.identifier" content="E53283-01"/>
<meta name="dcterms.isVersionOf" content="ZZPRE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="appb.htm" title="Previous" type="text/html"/>
<link rel="Next" href="appd.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53283-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">17/20</span> <!-- End Header -->
<div id="ZZPRE962" class="appendix"><a id="BABCHGDI"></a>
<h1 class="appendix"><span class="secnum">C</span> Performance Tuning</h1>
<p>This appendix contains the following sections:</p>
<ul>
<li>
<p><a href="#BABCHADJ">What Causes Poor Performance?</a></p>
</li>
<li>
<p><a href="#BABDEDGB">How Can Performance be Improved?</a></p>
</li>
<li>
<p><a href="#BABBFFFA">Using Host Arrays</a></p>
</li>
<li>
<p><a href="#BABIHEBB">Using Embedded PL/SQL</a></p>
</li>
<li>
<p><a href="#BABICBIG">Optimizing SQL Statements</a></p>
</li>
<li>
<p><a href="#BABDCFBF">Using Indexes</a></p>
</li>
<li>
<p><a href="#BABIFBHD">Taking Advantage of Row-Level Locking</a></p>
</li>
<li>
<p><a href="#BABCGGAE">Eliminating Unnecessary Parsing</a></p>
</li>
</ul>
<p>This appendix shows you some simple, easy-to-apply methods for improving the performance of your applications. Using these methods, you can often reduce processing time by 25% or more.</p>
<a id="BABCHADJ"></a>
<div id="ZZPRE963" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">What Causes Poor <a id="sthref1446"></a>Performance?</h2>
<p><a id="sthref1447"></a>One cause of poor performance is high Oracle communication overhead. Oracle must process SQL statements one at a time. Thus, each statement results in another call to Oracle and higher overhead. In a networked environment, SQL statements must be sent over the network, adding to network traffic. Heavy network traffic can slow down your application significantly.</p>
<p>Another cause of poor performance is inefficient SQL statements. Because SQL is so flexible, you can get the same result with two different statements, but one statement might be less efficient. For example, the following two <code>SELECT</code> statements return the same rows (the name and number of every department having at least one employee):</p>
<pre>EXEC SQL SELECT DNAME, DEPTNO
 FROM DEPT
 WHERE DEPTNO IN (SELECT DEPTNO FROM EMP);
EXEC SQL SELECT DNAME, DEPTNO
 FROM DEPT
 WHERE EXISTS
 (SELECT DEPTNO FROM EMP WHERE DEPT.DEPTNO = EMP.DEPTNO);
</pre>
<p>However, the first statement is slower because it does a time-consuming full scan of the <code>EMP</code> table for every department number in the <code>DEPT</code> table. Even if the <code>DEPTNO</code> column in <code>EMP</code> is indexed, the index is not used because the subquery lacks a <code>WHERE</code> clause naming <code>DEPTNO</code>.</p>
<p>A third cause of poor performance is unnecessary parsing and binding. Recall that before executing a SQL statement, Oracle must parse and bind it. Parsing means examining the SQL statement to make sure it follows syntax rules and refers to valid database objects. Binding means associating host variables in the SQL statement with their addresses so that Oracle can read or write their values.</p>
<p>Many applications manage cursors poorly. This results in unnecessary parsing and binding, which adds noticeably to processing overhead.</p>
</div>
<!-- class="sect1" -->
<a id="BABDEDGB"></a>
<div id="ZZPRE964" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">How Can <a id="sthref1448"></a>Performance be Improved?</h2>
<p>If you are unhappy with the performance of your precompiled programs, there are several ways you can reduce overhead.</p>
<p>You can greatly reduce Oracle communication overhead, especially in networked environments, by:</p>
<ul>
<li>
<p>Using host arrays</p>
</li>
<li>
<p>Using embedded PL/SQL</p>
</li>
</ul>
<p>You can reduce processing overhead --sometimes dramatically-- by:</p>
<ul>
<li>
<p>Optimizing SQL statements</p>
</li>
<li>
<p>Using indexes</p>
</li>
<li>
<p>Taking advantage of row-level locking</p>
</li>
<li>
<p>Eliminating unnecessary parsing</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABBFFFA"></a>
<div id="ZZPRE965" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Host Arrays</h2>
<p>Host arrays can boost performance because they let you manipulate an entire collection of data with a single SQL statement. For example, suppose you want to insert salaries for 300 employees into the <code>EMP</code> table. Without arrays your program must do 300 individual inserts--one for each employee. With arrays, only one <code>INSERT</code> is necessary. Consider the following statement:</p>
<pre>EXEC SQL INSERT INTO EMP (SAL) VALUES (:salary);
</pre>
<p><a id="sthref1449"></a>If <span class="italic">salary</span> is a simple host variable, Oracle executes the <code>INSERT</code> statement once, inserting a single row into the <code>EMP</code> table. In that row, the <code>SAL</code> column has the value of <span class="italic">salary</span>. To insert 300 rows this way, you must execute the <code>INSERT</code> statement 300 times.</p>
<p>However, if <span class="italic">salary</span> is a host array of size 300, Oracle inserts all 300 rows into the <code>EMP</code> table at once. In each row, the <code>SAL</code> column has the value of an element in the <span class="italic">salary</span> array.</p>
<p>For more information, see <a href="ch_nine.htm#BABHFECC">Chapter 9, &#34;Using Host Arrays&#34;</a></p>
</div>
<!-- class="sect1" -->
<a id="BABIHEBB"></a>
<div id="ZZPRE966" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Embedded PL/SQL</h2>
<p>As <a href="#BABGCIDB">Figure C-1</a> shows, if your application is database-intensive, you can use control structures to group SQL statements in a PL/SQL block, then send the entire block to Oracle. This can drastically reduce communication between your application and Oracle.</p>
<p><a id="sthref1450"></a>Also, you can use PL/SQL subprograms to reduce calls from your application to Oracle. For example, to execute ten individual SQL statements, ten calls are required, but to execute a subprogram containing ten SQL statements, only one call is required.</p>
<p><a id="sthref1451"></a>Unlike anonymous blocks, PL/SQL subprograms can be compiled separately and stored in an Oracle database. When called, they are passed to the PL/SQL engine immediately. Moreover, only one copy of a subprogram need be loaded into memory for execution by multiple users.</p>
<div id="ZZPRE967" class="figure">
<p class="titleinfigure"><a id="BABGCIDB"></a>Figure C-1 PL/SQL Boosts Performance</p>
<img width="536" height="417" src="img/image015.gif" alt="PL/SQL boosts performance"/><br/>
<a id="sthref1452" href="img_text/image015.htm">Description of &#34;Figure C-1 PL/SQL Boosts Performance&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>PL/SQL can also cooperate with Oracle application development tools such as Oracle Forms and Oracle Reports. By adding procedural processing power to these tools, PL/SQL boosts performance. Using PL/SQL, a tool can do any computation quickly and efficiently without calling on Oracle. This saves time and <a id="sthref1453"></a>reduces network traffic. For more information, see <a href="ch_five.htm#BIHJJIBA">Chapter 5, &#34;Using Embedded PL/SQL&#34;</a> and the <a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="BABICBIG"></a>
<div id="ZZPRE968" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">O<a id="sthref1454"></a>ptimizing SQL Statements</h2>
<p>For every SQL statement, the Oracle optimizer generates an <span class="italic"><a id="sthref1455"></a>execution plan</span>, which is a series of steps that Oracle takes to execute the statement. These steps are determined by rules given in the <a class="olink ADFNS" href="../ADFNS/toc.htm"><span class="italic">Oracle Database Advanced Application Developer&#39;s Guide</span></a>. Following these rules will help you write optimal SQL statements.</p>
<div id="ZZPRE969" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1456"></a>
<h3 class="sect2"><a id="sthref1457"></a>Optimizer Hints</h3>
<p>For every SQL statement, the Oracle optimizer generates an <span class="italic">execution plan</span>, which is a series of steps that Oracle takes to execute the statement. In some cases, you can suggest to Oracle the way to optimize a SQL statement. These suggestions, called <a id="sthref1458"></a><span class="italic">hints</span>, let you influence decisions made by the optimizer.</p>
<p>Hints are not directives; they merely help the optimizer do its job. Some hints limit the scope of information used to optimize a SQL statement, while others suggest overall strategies. You can use hints to specify the:</p>
<ul>
<li>
<p>Optimization approach for a SQL statement</p>
</li>
<li>
<p>Access path for each referenced table</p>
</li>
<li>
<p>Join order for a join</p>
</li>
<li>
<p>Method used to join tables</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ZZPRE970" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1459"></a>
<h3 class="sect2">Giving Hints</h3>
<p>You give hints to the optimizer by placing them in a C-style comment immediately after the verb in a <code>SELECT</code>, <code>UPDATE</code>, or <code>DELETE</code> statement. You can choose rule-based or cost-based optimization. With cost-based optimization, hints help maximize throughput or response time. In the following example, the <code>ALL_ROWS</code> hint helps maximize query throughput:</p>
<pre>EXEC SQL SELECT /*+ ALL_ROWS (cost-based) */ EMPNO, ENAME, SAL
 INTO :emp_number, :emp_name, :salary -- host arrays
 FROM EMP
 WHERE DEPTNO = :dept_number;
</pre>
<p>The plus sign (+), which must immediately follow the comment opener, indicates that the comment contains one or more hints. Notice that the comment can contain remarks and hints.</p>
<p>For more information about optimizer hints, see the <a class="olink ADFNS" href="../ADFNS/toc.htm"><span class="italic">Oracle Database Advanced Application Developer&#39;s Guide</span></a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE971" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1460"></a>
<h3 class="sect2"><a id="sthref1461"></a>Trace Facility</h3>
<p>You can use the SQL trace facility and the <code>EXPLAIN</code> <code>PLAN</code> statement to identify SQL statements that might be slowing down your application. The trace facility generates statistics for every SQL statement executed by Oracle. From these statistics, you can determine which statements take the most time to process. Then, you can concentrate your tuning efforts on those statements.</p>
<p>The <code><a id="sthref1462"></a>EXPLAIN</code> <code>PLAN</code> statement shows the execution plan for each SQL statement in your application. You can use the execution plan to identify inefficient SQL statements.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDCFBF"></a>
<div id="ZZPRE972" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Indexes</h2>
<p><a id="sthref1463"></a>Using rowids, an <span class="italic">index</span> associates each distinct value in a table column with the rows containing that value. An index is created with the <code>CREATE INDEX</code> statement.</p>
<p>You can use indexes to boost the performance of queries that return less than 15% of the rows in a table. A query that returns 15% or more of the rows in a table is executed faster by a <span class="italic">full scan</span><a id="sthref1464"></a>, that is, by reading all rows sequentially. Any query that names an indexed column in its <code>WHERE</code> clause can use the index. For guidelines that help you choose which columns to index, see the <a class="olink ADFNS" href="../ADFNS/toc.htm"><span class="italic">Oracle Database Advanced Application Developer&#39;s Guide</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="BABIFBHD"></a>
<div id="ZZPRE973" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Taking Advantage of Row-Level Locking</h2>
<p><a id="sthref1465"></a>By default, Oracle locks data at the row level rather than the table level. Row-level locking allows multiple users to access different rows in the same table concurrently. The resulting performance gain is significant.</p>
<p>You can specify table-level locking, but it lessens the effectiveness of the transaction processing option. For more information about table locking, see <a href="ch_seven.htm#BABGBEFC">&#34;Using the LOCK TABLE Statement&#34;</a>.</p>
<p>Applications that do online transaction processing benefit most from row-level locking. If your application relies on table-level locking, modify it to take advantage of row-level locking. In general, avoid explicit table-level locking.</p>
</div>
<!-- class="sect1" -->
<a id="BABCGGAE"></a>
<div id="ZZPRE974" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Eliminating Unnecessary Parsing</h2>
<p>Eliminating unnecessary parsing requires correct handling of cursors and selective use of the following cursor management options:</p>
<ul>
<li>
<p><code>MAXOPENCURSORS</code><a id="sthref1466"></a></p>
</li>
<li>
<p><code>HOLD_CURSOR</code></p>
</li>
<li>
<p><code><a id="sthref1467"></a>RELEASE_CURSOR</code></p>
</li>
</ul>
<p>These options affect implicit and explicit cursors, the cursor cache, and private SQL areas.</p>
<p>You can use the ORACA to get cursor cache statistics. See <a href="ch_eight.htm#CEGJHAHF">&#34;Using the Oracle Communications Area&#34;</a>.</p>
<div id="ZZPRE975" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1468"></a>
<h3 class="sect2">Handling Explicit Cursors</h3>
<p>Recall that there are two types of cursors: implicit and explicit. Oracle implicitly declares a cursor for all data definition and data manipulation statements. However, for queries that return more than one row, you must explicitly declare a cursor (or use host arrays). You use the <code>DECLARE CURSOR</code> statement to declare an explicit cursor. How you handle the opening and closing of explicit cursors affects performance.</p>
<p>If you need to reevaluate the active set, simply reopen the cursor. The <code>OPEN</code> statement will use any new host-variable values. You can save processing time if you do not close the cursor first.</p>
<p><a id="sthref1469"></a>To make performance tuning easier, the precompiler lets you reopen an already open cursor. However, this is an Oracle extension to the ANSI/ISO embedded SQL standard. So, when <code>MODE=ANSI</code>, you must close a cursor before reopening it.</p>
<p>Only <code>CLOSE</code> a cursor when you want to free the resources (memory and locks) acquired by opening the cursor. For example, your program should close all cursors before exiting.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE976" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1470"></a>
<h3 class="sect2">Cursor Control</h3>
<p>In general, there are three ways to control an explicitly declared cursor:</p>
<ul>
<li>
<p>Use the <code>DECLARE</code>, <code>OPEN</code>, and <code>CLOSE</code> statements</p>
</li>
<li>
<p>Use the <code>PREPARE</code>, <code>DECLARE</code>, <code>OPEN</code>, and <code>CLOSE</code> statements</p>
</li>
<li>
<p><code>COMMIT</code> closes the cursor when <code>MODE=ANSI</code></p>
</li>
</ul>
<p>With the first way, beware of unnecessary parsing. The <code>OPEN</code> statement does the parsing, but only if the parsed statement is unavailable because the cursor was closed or never opened. Your program should <code>DECLARE</code> the cursor, reopen it every time the value of a host variable changes, and <code>CLOSE</code> it only when the SQL statement is no longer needed.</p>
<p>With the second way (dynamic SQL Methods 3 and 4), the <code>PREPARE</code> statement does the parsing, and the parsed statement is available until a <code>CLOSE</code> statement is executed. Your program should prepare the SQL statement and <code>DECLARE</code> the cursor, reopen the cursor every time the value of a host variable changes, rePREPARE the SQL statement and reopen the cursor if the SQL statement changes, and <code>CLOSE</code> the cursor only when the SQL statement is no longer needed.</p>
<p>When possible, avoid placing <code>OPEN</code> and <code>CLOSE</code> statements in a loop; this is a potential cause of unnecessary reparsing of the SQL statement. In the next example, both the <code>OPEN</code> and <code>CLOSE</code> statements are inside the outer <code>while</code> loop. When <code>MODE=ANSI</code>, the <code>CLOSE</code> statement must be positioned as shown, because ANSI requires a cursor to be closed before being reopened.</p>
<pre>EXEC SQL DECLARE emp_cursor CURSOR FOR 
 SELECT ename, sal from emp where sal &gt; :salary and 
 sal &lt;= :salary + 1000; 
salary = 0; 
while (salary &lt; 5000) 
{ 
 EXEC SQL OPEN emp_cursor; 
 while (SQLCODE==0) 
 { 
 EXEC SQL FETCH emp_cursor INTO .... 
 ... 
 } 
 salary += 1000; 
 EXEC SQL CLOSE emp_cursor; 
}
</pre>
<p>With <code>MODE=ORACLE</code>, however, a <code>CLOSE</code> statement can execute without the cursor being opened. By placing the <code>CLOSE</code> statement outside the outer <code>while</code> loop, you can avoid possible reparsing at each iteration of the <code>OPEN</code> statement.</p>
<pre>... 
while (salary &lt; 5000) 
{ 
 EXEC SQL OPEN emp_cursor; 
 while (sqlca.sqlcode==0) 
 { 
 EXEC SQL FETCH emp_cursor INTO .... 
 ... 
 } 
 salary += 1000; 
} 
EXEC SQL CLOSE emp_cursor;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE977" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1471"></a>
<h3 class="sect2">Using the Cursor Management Options</h3>
<p>A SQL statement need be parsed only once unless you change its makeup. For example, you change the makeup of a query by adding a column to its select list or <code>WHERE</code> clause. The <code>HOLD_CURSOR</code>, <code>RELEASE_CURSOR</code>, and <code>MAXOPENCURSORS</code> options give you some control over how Oracle manages the parsing and reparsing of SQL statements. Declaring an explicit cursor gives you maximum control over parsing.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE978" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1472"></a>
<h3 class="sect2">Private SQL Areas and Cursor Cache</h3>
<p><a id="sthref1473"></a>When a data manipulation statement is executed, its associated cursor is linked to an entry in the cursor cache. The cursor cache is a continuously updated area of memory used for cursor management. The cursor cache entry is in turn linked to a private SQL area.</p>
<p>The <a id="sthref1474"></a>private SQL area, a work area created dynamically at run time by Oracle, contains the parsed SQL statement, the addresses of host variables, and other information needed to process the statement. An explicit cursor lets you name a SQL statement, access the information in its private SQL area, and, to some extent, control its processing.</p>
<p><a href="#BABJGEHE">Figure C-2</a> represents the cursor cache after your program has done an insert and a delete.</p>
<div id="ZZPRE979" class="figure">
<p class="titleinfigure"><a id="BABJGEHE"></a>Figure C-2 Cursors Linked through the Cursor Cache</p>
<img width="536" height="232" src="img/image016.gif" alt="Cursor linked through the cursor cache"/><br/>
<a id="sthref1475" href="img_text/image016.htm">Description of &#34;Figure C-2 Cursors Linked through the Cursor Cache&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<div id="ZZPRE980" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1476"></a>
<h3 class="sect2">Resource Use</h3>
<p>The maximum number of open cursors in each user session is set by the Oracle initialization parameter <code>OPEN_CURSORS</code>.</p>
<p><code>MAXOPENCURSORS</code> specifies the <span class="italic">initial</span> size of the cursor cache. If a new cursor is needed and there are no free cache entries, Oracle tries to reuse an entry. Its success depends on the values of <code>HOLD_CURSOR</code> and <code>RELEASE_CURSOR</code> and, for explicit cursors, on the status of the cursor itself.</p>
<p>If the value of <code>MAXOPENCURSORS</code> is less than the number of cache entries actually needed, Oracle uses the first cache entry marked as reusable. For example, suppose the cache entry <span class="italic">E</span>(1) for an <code>INSERT</code> statement is marked as reusable, and the number of cache entries already equals <code>MAXOPENCURSORS</code>. If the program executes a new statement, cache entry <span class="italic">E</span>(1) and its private SQL area might be reassigned to the new statement. To reexecute the <code>INSERT</code> statement, Oracle would have to reparse it and reassign another cache entry.</p>
<p>Oracle allocates an additional cache entry if it cannot find one to reuse. For example, if <code>MAXOPENCURSORS=8</code> and all eight entries are active, a ninth is created. If necessary, Oracle keeps allocating additional cache entries until it runs out of memory or reaches the limit set by <code>OPEN_CURSORS</code>. This dynamic allocation adds to processing overhead.</p>
<p>Thus, specifying a low value for <code>MAXOPENCURSORS</code> saves memory but causes potentially expensive dynamic allocations and deallocations of new cache entries. Specifying a high value for <code>MAXOPENCURSORS</code> assures speedy execution but uses more memory.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE981" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1477"></a>
<h3 class="sect2">Infrequent Execution</h3>
<p>Sometimes, the link between an <span class="italic">infrequently</span> executed SQL statement and its private SQL area should be temporary.</p>
<p>When <code>HOLD_CURSOR=NO</code> (the default), after Oracle executes the SQL statement and the cursor is closed, the precompiler marks the link between the cursor and cursor cache as reusable. The link is reused as soon as the cursor cache entry to which it points is needed for another SQL statement. This frees memory allocated to the private SQL area and releases parse locks. However, because a prepared cursor must remain active, its link is maintained even when <code>HOLD_CURSOR=NO</code>.</p>
<p><a id="sthref1478"></a>When <code>RELEASE_CURSOR=YES</code>, after Oracle executes the SQL statement and the cursor is closed, the private SQL area is automatically freed and the parsed statement lost. This might be necessary if, for example, <code>MAXOPENCURSORS</code> is set low at your site to conserve memory.</p>
<p>If a data manipulation statement precedes a data definition statement and they reference the same tables, specify <code>RELEASE_CURSOR=YES</code> for the data manipulation statement. This avoids a conflict between the parse lock obtained by the data manipulation statement and the exclusive lock required by the data definition statement.</p>
<p>When <code>RELEASE_CURSOR=YES</code>, the link between the private SQL area and the cache entry is immediately removed and the private SQL area freed. Even if you specify <code>HOLD_CURSOR=YES</code>, Oracle must still reallocate memory for a private SQL area and reparse the SQL statement before executing it because <code>RELEASE_CURSOR=YES</code> overrides <code>HOLD_CURSOR=YES</code>.</p>
<p>Nonetheless, when <code>RELEASE_CURSOR=YES</code>, the reparse might not require extra processing because Oracle caches the parsed representations of SQL statements and PL/SQL blocks in its <span class="italic">Shared SQL Cache</span>. Even if its cursor is closed, the parsed representation remains available until it is aged out of the cache.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE982" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1479"></a>
<h3 class="sect2">Frequent Execution</h3>
<p>The links between a <span class="italic">frequently</span> executed SQL statement and its private SQL area should be maintained, because the private SQL area contains all the information needed to execute the statement. Maintaining access to this information makes subsequent execution of the statement much faster.</p>
<p>When <code>HOLD_CURSOR=YES</code>, the link between the cursor and cursor cache is maintained after Oracle executes the SQL statement. Thus, the parsed statement and allocated memory remain available. This is useful for SQL statements that you want to keep active because it avoids unnecessary reparsing.</p>
<p>When <code>HOLD_CURSOR=YES</code> and <code>RELEASE_CURSOR=NO</code> (the default), the link between the cache entry and the private SQL area is maintained after Oracle executes the SQL statement and is not reused unless the number of open cursors exceeds the value of <code>MAXOPENCURSORS</code>. This is useful for SQL statements that are executed often because the parsed statement and allocated memory remain available.</p>
<p>Using the defaults, <code>HOLD_CURSOR=YES</code> and <code>RELEASE_CURSOR=NO</code>, after executing a SQL statement with an earlier Oracle version, its parsed representation remains available. With Oracle database version 7, under similar conditions, the parsed representation remains available only until it is aged out of the Shared SQL Cache. Normally, this is not a problem, but you might get unexpected results if the definition of a referenced object changes before the SQL statement is reparsed.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE983" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1480"></a>
<h3 class="sect2">Parameter Interactions</h3>
<p><a href="#BABJGAGG">Table C-1</a> shows how <code>HOLD_CURSOR</code> and <code>RELEASE_CURSOR</code> interact. Notice that <code>HOLD_CURSOR=NO</code> overrides <code>RELEASE_CURSOR=NO</code> and that <code>RELEASE_CURSOR=YES</code> overrides <code>HOLD_CURSOR=YES</code>.</p>
<div id="ZZPRE984" class="tblformal">
<p class="titleintable"><a id="sthref1481"></a><a id="BABJGAGG"></a>Table C-1 HOLD_CURSOR RELEASE_CURSOR Interactions</p>
<table class="cellalignment3250" title="HOLD_CURSOR RELEASE_CURSOR Interactions" summary="parameter interactions" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t2">HOLD_CURSOR</th>
<th class="cellalignment3246" id="r1c2-t2">RELEASE_CURSOR</th>
<th class="cellalignment3246" id="r1c3-t2">Links are:</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t2" headers="r1c1-t2">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r2c1-t2 r1c2-t2">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r2c1-t2 r1c3-t2">
<p>marked as reusable</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t2" headers="r1c1-t2">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r3c1-t2 r1c2-t2">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r3c1-t2 r1c3-t2">
<p>maintained</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r4c1-t2" headers="r1c1-t2">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r4c1-t2 r1c2-t2">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r4c1-t2 r1c3-t2">
<p>removed immediately</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r5c1-t2" headers="r1c1-t2">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r5c1-t2 r1c2-t2">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r5c1-t2 r1c3-t2">
<p>removed immediately</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3238">
<tr>
<td class="cellalignment3247">
<table class="cellalignment3243">
<tr>
<td class="cellalignment3242"><a href="appb.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3242"><a href="appd.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3249">
<table class="cellalignment3241">
<tr>
<td class="cellalignment3242"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3242"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3242"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3242"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3242"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3242"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>