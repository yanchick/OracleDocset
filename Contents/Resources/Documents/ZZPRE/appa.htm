<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114745"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/New%20Features"></a><title>New Features</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-06T18:44:39Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Programmer&#39;s Guide to the Oracle Precompilers"/>
<meta name="dcterms.identifier" content="E53283-01"/>
<meta name="dcterms.isVersionOf" content="ZZPRE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="ch_eleven.htm" title="Previous" type="text/html"/>
<link rel="Next" href="appb.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53283-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/20</span> <!-- End Header -->
<div id="ZZPRE942" class="appendix"><a id="BABGEEIJ"></a>
<h1 class="appendix"><span class="secnum">A</span> New Features</h1>
<p><a id="sthref1425"></a>This appendix looks at the improvements and <a id="sthref1426"></a>new features offered by the Oracle Precompilers Release 1.8. Designed to meet the practical needs of professional software developers, these features will help you build effective, reliable applications.</p>
<div id="ZZPRE943" class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref1427"></a>
<h2 class="sect1">Fetching NULLs without Using Indicator Variables</h2>
<p><a id="sthref1428"></a>With releases 1.5, 1.6, and 1.7 of the Oracle Precompilers, source files that <code>FETCH</code> data into host variables without associated indicator variables return an <code>ORA-01405</code> message at run time if a <code>NULL</code> is returned to the host variable. With release 1.8, when you specify <code>MODE=ORACLE</code> and <code>DBMS=V7</code>, you can disable the <code>ORA-01405</code> message by also specifying <code>UNSAFE_NULL=YES</code>.</p>
<p>When developing applications for the Oracle Database, the preferred practice is to include indicator variables for any host variable that might have a <code>NULL</code> returned to it. When migrating applications from Oracle Version 6 to Oracle database version 7, however, the <code>UNSAFE_NULL</code> option can significantly ease the process.</p>
<p>For more information, see <a href="ch_six.htm#BABBBACH">&#34;UNSAFE_NULL&#34;</a> and <a href="ch_four.htm#BABCFFHH">&#34;Using Indicator Variables&#34;</a>.</p>
<div id="ZZPRE944" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1429"></a>
<h3 class="sect2">Using DBMS=V7 and MODE=ORACLE</h3>
<p>Applications precompiled with <code>MODE=ORACLE</code> and <code>DBMS=V7</code> return the <code>ORA-01405</code> error at run time if a <code>NULL</code> is returned to a host variable when there is no associated indicator variable. When upgrading to Oracle database version 7 with these options specified, you will need to migrate your applications in one of two ways:</p>
<ul>
<li>
<p>Modify your source code to include the necessary indicator variables</p>
</li>
<li>
<p>Specify <code>UNSAFE_NULL=YES</code> on the command line</p>
</li>
</ul>
<p>If you are upgrading to Oracle database version 7 and use <code>DBMS=V7</code> when precompiling, or if you intend to use new Oracle database version 7 features that are different from Oracle Version 6, in most instances, the change requires minimal modification to your source files. However, if your application may <code>FETCH</code> null values into host variables without associated indicator variables, specify <code>UNSAFE_NULL</code><code>=YES</code> to disable the <code>ORA-01405</code> message and avoid adding the relevant indicator variables to your source files.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE945" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1430"></a>
<h3 class="sect2">Related Error Messages</h3>
<p>For information about precompile time messages associated with the <code>UNSAFE_NULL</code> option, see <a class="olink ERRMG" href="../ERRMG/toc.htm"><span class="italic">Oracle Database Error Messages</span></a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<div id="ZZPRE946" class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref1431"></a>
<h2 class="sect1">Additional Array Insert/Select Syntax</h2>
<p>The array INSERT and array SELECT syntax of the DB2 precompiler is now supported by the Oracle precompiler. The optional ROWSET and ROWSET STARTING AT clauses are used in the fetch-orientation (FIRST, PRIOR, NEXT, LAST, CURRENT, RELATIVE and ABSOLUTE). For more information about the new INSERT/SELECT syntax, please refer the <a class="olink LNPCB" href="../LNPCB/toc.htm"><span class="italic">Pro*COBOL Programmer&#39;s Guide</span></a> and <a class="olink LNPCC" href="../LNPCC/toc.htm"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a>.</p>
</div>
<!-- class="sect1" -->
<div id="ZZPRE947" class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref1432"></a>
<h2 class="sect1">SQL99 Syntax Support</h2>
<p>The SQL standard enables the portability of SQL applications across all conforming software products. Oracle features are compliant with the ANSI/ISO SQL99 standard, including ANSI compliant joins. Pro*Cobol supports all SQL99 features that are supported by Oracle database, which means that the SQL99 syntax for the SELECT, INSERT, DELETE, and UPDATE statements and the body of the cursor in a DECLARE CURSOR statement are supported.</p>
</div>
<!-- class="sect1" -->
<div id="ZZPRE948" class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref1433"></a>
<h2 class="sect1">Fixing Execution Plans</h2>
<p>To fix execution plans for SQL&#39;s used in Pro*C/C++ or Pro*Cobol development environment, you need to use the outline feature of Oracle at the time of precompiling. An outline is implemented as a set of optimizer hints that are associated with the SQL statement. If you enable the use of the outline for the statement, Oracle automatically considers the stored hints and tries to generate an execution plan in accordance with those hints. In this way, you can ensure that the performance is not affected when the modules are integrated or deployed into different environments.</p>
<p>You can use the following SQL statements to create outlines in Pro*C/C++ and Pro*Cobol:</p>
<ul>
<li>
<p><code>SELECT</code></p>
</li>
<li>
<p><code>DELETE</code></p>
</li>
<li>
<p><code>UPDATE</code></p>
</li>
<li>
<p><code>INSERT... SELECT</code></p>
</li>
<li>
<p><code>CREATE TABLE... AS SELECT</code></p>
</li>
</ul>
<p>If the outline option is set, then the precompiler generates two files, a SQL file and a LOG file at the end of successful precompilation. Command line options <code>outline</code> and <code>outlnprefix</code> control the generation of the outlines.Each generated outline name is unique. Because the file names used in the application are unique, this information is used in generating the outline name. In addition, the category name is also prefixed.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle allows only 30 bytes for the outline name. If you exceed the limit, the precompiler will flag an error. You can restrict the length of the outline name by using the <code>outlnprefix</code> option.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPCB" href="../LNPCB/toc.htm"><span class="italic">Pro*COBOL Programmer&#39;s Guide</span></a>.</p>
</li>
<li>
<p><a class="olink LNPCC" href="../LNPCC/toc.htm"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a>.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<div id="ZZPRE949" class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref1434"></a>
<h2 class="sect1">Using Implicit Buffered Insert</h2>
<p>For improved performance, application developers can reference host arrays in their embedded SQL statements. This provides a means to execute an array of SQL statements with a single round-trip to the database. Despite the significant performance improvements afforded by array execution, some developers choose not to use this capability because it is not ANSI standard. For example, an application written to exploit array execution in Oracle cannot be precompiled using IBM&#39;s precompiler.</p>
<p>One workaround is to use buffered INSERT statements, which enable you to gain performance benefits while retaining ANSI standard embedded SQL syntax.</p>
<p>The command line option &#34;max_row_insert&#34; controls the number of rows to be buffered before executing the INSERT statement. By default it is zero and the feature is disabled. To enable this feature, specify any number greater than zero.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information on using the implicit buffer insert feature, please refer to:
<ul>
<li>
<p><a class="olink LNPCB" href="../LNPCB/toc.htm"><span class="italic">Pro*COBOL Programmer&#39;s Guide</span></a>.</p>
</li>
<li>
<p><a class="olink LNPCC" href="../LNPCC/toc.htm"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a>.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BABEJBFE"></a>
<div id="ZZPRE950" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Dynamic SQL Statement Caching</h2>
<p>Statement caching refers to the feature that provides and manages a cache of statements for each session. In the server, it means that cursors are ready to be used without the statement being parsed again. Statement caching can be enabled in the precompiler applications, which will help in the performance improvement of all applications that rely on the dynamic SQL statements. Performance improvement is achieved by removing the overhead of parsing the dynamic statements on reuse.</p>
<p>You can obtain this performance improvement by using a new command line option, <code>stmt_cache</code> (for the statement cache size), which will enable the statement caching of the dynamic statements. By enabling the new option, the statement cache will be created at session creation time. The caching is only applicable for the dynamic statements and the cursor cache for the static statements co-exists with this feature.</p>
<p>The command line option <code>stmt_cache</code> can be given any value in the range of 0 to 65535. Statement caching is disabled by default (value 0). The <code>stmt_cache</code> option can be set to hold the anticipated number of distinct dynamic SQL statements in the application.</p>
<div id="ZZPRE951" class="example">
<p class="titleinexample"><a id="sthref1435"></a>Example A-1 Using the stmt_cache Option</p>
<p>This example demonstrates the use of the <code>stmt_cache</code> option. In this program, you insert rows into a table and select the inserted rows by using the cursor in the loop. When the stmt_cache option is used to precompile this program, the performance increases compared to a normal precompilation.</p>
<pre>/*
 *  stmtcache.pc
 *
 *  NOTE: 
 *  When this program is used to measure the performance with and without
 *  stmt_cache option, do the following changes in the program,
 *  1. Increase ROWSCNT to high value, say 10000.
 *  2. Remove all the print statements, usually which comsumes significant
 *     portion of the total program execution time.
 * 
 *  HINT: In Linux, gettimeofday() can be used to measure time. 
 */
 
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sqlca.h&gt;
#include &lt;oraca.h&gt;
 
#define ROWSCNT 10
 
char    *username = &#34;scott&#34;;
char    *password = &#34;tiger&#34;;
 
/* Function prototypes */
void sql_error(char *msg);
void selectdata();
void insertdata();
 
int main()
{
  EXEC SQL WHENEVER SQLERROR DO sql_error(&#34;Oracle error&#34;);
 
  /* Connect using the default schema scott/tiger */
  EXEC SQL CONNECT :username IDENTIFIED BY :password;
 
  /* core functions to insert and select the data */
  insertdata();
  selectdata();
 
/* Rollback pll the changes and disconnect from Oracle. */
  EXEC SQL ROLLBACK WORK RELEASE;
 
  exit(0);
}
 
/*Insert the data for ROWSCNT items into tpc2sc01 */
void insertdata()
{
  varchar dynstmt[80];
  int i;
  varchar ename[10];
  float comm;
  char *str;
 
  /* Allocates temporary buffer */
  str = (char *)malloc (11 * sizeof(char));
 
  strcpy ((char *)dynstmt.arr,
          &#34;INSERT INTO bonus (ename, comm) VALUES (:ename, :comm)&#34;);
  dynstmt.len = strlen(dynstmt.arr);
  EXEC SQL PREPARE S FROM :dynstmt;
 
  printf (&#34;Inserts %d rows into bonus table using dynamic SQL statement\n&#34;,
          ROWSCNT);
  for (i=1; i&lt;=ROWSCNT; i++)
  {
    sprintf (str, &#34;EMP_%05d&#34;,i);
    strcpy (ename.arr, str);
    comm = i;
    ename.len = strlen (ename.arr);
    EXEC SQL EXECUTE S USING :ename, :comm;
  }
 
  free(str);
}
 
/* Select the data using the cursor */
void selectdata()
{
  varchar dynstmt[80];
  varchar ename[10];
  float comm;
  int i;
 
  strcpy((char *)dynstmt.arr,
         &#34;SELECT ename, comm FROM bonus WHERE comm = :v1&#34;);
  dynstmt.len = (unsigned short)strlen((char *)dynstmt.arr);
 
  printf (&#34;Fetches the inserted rows using using dynamic SQL statement\n\n&#34;);
  printf (&#34;  ENAME      COMMISSION\n\n&#34;);
 
  for (i=1; i&lt;=ROWSCNT; i++)
  {
    /* Do the prepare in the loop so that the advantage of stmt_caching 
       is visible*/
    EXEC SQL PREPARE S FROM :dynstmt;
 
    EXEC SQL DECLARE C CURSOR FOR S;
    EXEC SQL OPEN C USING :i;
 
    EXEC SQL WHENEVER NOT FOUND DO break;
 
    /* Loop until the NOT FOUND condition is detected. */
    for (;;)
    {
      EXEC SQL FETCH C INTO :ename, :comm;
      ename.arr[ename.len] = &#39;\0&#39;;
      printf (&#34;%10s    %7.2f\n&#34;, ename.arr, comm);
    }
    /* Close the cursor so that the reparsing is not required for stmt_cache */
    EXEC SQL CLOSE C;
  }
}
 
void sql_error(char *msg)
{
    printf(&#34;\n%s&#34;, msg);
    sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = &#39;\0&#39;;
    oraca.orastxt.orastxtc[oraca.orastxt.orastxtl] = &#39;\0&#39;;
    oraca.orasfnm.orasfnmc[oraca.orasfnm.orasfnml] = &#39;\0&#39;;
    printf(&#34;\n%s\n&#34;, sqlca.sqlerrm.sqlerrmc);
    printf(&#34;in \&#34;%s...\&#34;\n&#34;, oraca.orastxt.orastxtc);
    printf(&#34;on line %d of %s.\n\n&#34;, oraca.oraslnr,
       oraca.orasfnm.orasfnmc);
 
   /* Disable ORACLE error checking to avoid an infinite loop
    * should another error occur within this routine.
    */
    EXEC SQL WHENEVER SQLERROR CONTINUE;
 
    /* Release resources associated with the cursor. */
    EXEC SQL CLOSE C;
 
    /* Roll back any pending changes and disconnect from Oracle. */  
    EXEC SQL ROLLBACK WORK RELEASE;
    exit(1);
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<div id="ZZPRE952" class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref1436"></a>
<h2 class="sect1">Scrollable Cursors</h2>
<p>A scrollable cursor is a work area where Oracle executes SQL statements and stores information that is processed during execution.When a cursor is executed, the results of the query are placed into a a set of rows called the result set. The result set can be fetched either sequentially or non-sequentially. Non-sequential result sets are called scrollable cursors. A scrollable cursor enables users to access the rows of a database result set in a forward, backward, and random manner. This scrollable cursor enables the program to fetch any row in the result set. For more information about scrollable cursors, please refer the <a class="olink LNPCB" href="../LNPCB/toc.htm"><span class="italic">Pro*COBOL Programmer&#39;s Guide</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDDBGHB"></a>
<div id="ZZPRE953" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Platform Endianness Support</h2>
<p>Oracle stored unicode data (UTF16) is always in big-endian form. Currently, client applications run on different platforms. Linux and Windows have little-endian representation and Solaris has big-endian representation. When UTF16 data is inserted or selected, Pro*Cobol doesn&#39;t convert endian form between server and the client. This leads to corrupted UTF16 (UCS2) strings in the PIC N variable.</p>
<p>Platform endianness (Little-endian form for Linux and Windows, Big-endian form for Solaris) in PIC N variables can be maintained using the command line option <code>picn_endian</code>.</p>
<p class="subhead2"><a id="ZZPRE954"></a>New Command Line Option</p>
<pre>picn_endian={BIG|OS}
</pre>
<p>If picn_endian=big, then PIC N variables are bound with character set ID AL16UTF16.</p>
<p>If picn_endian=os then PIC N variables are bound with character set ID UCS2.</p>
<p>The default value for this option is &#34;big&#34; to preserve the current behavior. This option is ignored if NLS_NCHAR is not AL16UTF16.</p>
<p>Character set form for PIC N variables can be set by using the existing Pro*Cobol command line option:</p>
<pre>charset_picn={nchar_charset|db_charset}
</pre></div>
<!-- class="sect1" -->
<a id="CHDHFAEE"></a>
<div id="ZZPRE955" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Flexible B Area Length</h2>
<p>The length of B Area for a Pro*Cobol program is limited to 72 when the format is set to ANSI. Cobol compilers now can support B Area length up to 253. This provides a programmer with the flexibility to type a line that is longer than 72 columns. Pro*Cobol now supports B area length up to 253 when a Pro*Cobol application is precompiled with the</p>
<p><code>FORMAT=VARIABLE</code></p>
<p>option.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3238">
<tr>
<td class="cellalignment3247">
<table class="cellalignment3243">
<tr>
<td class="cellalignment3242"><a href="ch_eleven.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3242"><a href="appb.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3249">
<table class="cellalignment3241">
<tr>
<td class="cellalignment3242"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3242"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3242"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3242"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3242"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3242"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>