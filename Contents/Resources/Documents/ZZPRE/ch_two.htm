<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114760"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Learning%20the%20Basics"></a><title>Learning the Basics</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-06T18:44:38Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Programmer&#39;s Guide to the Oracle Precompilers"/>
<meta name="dcterms.identifier" content="E53283-01"/>
<meta name="dcterms.isVersionOf" content="ZZPRE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="ch_one.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ch_three.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53283-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">5/20</span> <!-- End Header -->
<div id="ZZPRE139" class="chapter"><a id="BABBHAGG"></a>
<h1 class="chapter"><span class="secnum">2</span> Learning the Basics</h1>
<p>This chapter explains the following:</p>
<ul>
<li>
<p><a href="#BABEECFH">Key Concepts of Embedded SQL Programming</a></p>
</li>
<li>
<p><a href="#BABGBDCI">Steps in Developing an Embedded SQL Application</a></p>
</li>
<li>
<p><a href="#BABIGFAI">A Sample Program</a></p>
</li>
<li>
<p><a href="#BABCIFGA">Sample Tables</a></p>
</li>
</ul>
<p>This chapter explains how embedded SQL programs function. You examine the special environment in which they operate and the impact of this environment on the design of your applications.</p>
<p>After covering the key concepts of embedded SQL programming and the steps you take in developing an application, this chapter uses a simple program to illustrate the main points.</p>
<a id="BABEECFH"></a>
<div id="ZZPRE140" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Key Concepts of Embedded SQL Programming</h2>
<p>This section lays the conceptual foundation on which later chapters build. It discusses the following topics:</p>
<ul>
<li>
<p><a href="#BABCIDFA">Embedded SQL Statements</a></p>
</li>
<li>
<p><a href="#BABJFGED">Executable versus Declarative Statements</a></p>
</li>
<li>
<p><a href="#BABFDFIA">Embedded SQL Syntax</a></p>
</li>
<li>
<p><a href="#BABJFGEC">Static versus Dynamic SQL Statements</a></p>
</li>
<li>
<p><a href="#BABJHAAJ">Embedded PL/SQL Blocks</a></p>
</li>
<li>
<p><a href="#BABJEGEA">Host and Indicator Variables</a></p>
</li>
<li>
<p><a href="#BABDAJJF">Oracle Datatypes</a></p>
</li>
<li>
<p><a href="#BABCIHEA">Arrays</a></p>
</li>
<li>
<p><a href="#BABGDJAJ">Datatype Equivalencing</a></p>
</li>
<li>
<p><a href="#BABEAAIF">Private SQL Areas, Cursors, and Active Sets</a></p>
</li>
<li>
<p><a href="#BABBHECG">Transactions</a></p>
</li>
<li>
<p><a href="#BABBAAJJ">Errors and Warnings</a></p>
</li>
</ul>
<a id="BABCIDFA"></a>
<div id="ZZPRE141" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Embedded SQL Statements</h3>
<p>The term <span class="italic">embedded SQL</span> refers to SQL statements placed within an application program. Because the application program houses the SQL statements, it is called a <a id="sthref47"></a><span class="italic">host program</span>, and the language in which it is written is called the <a id="sthref48"></a><span class="italic">host language</span>. For example, with the Pro*COBOL Precompiler you can embed SQL statements in a COBOL host program.</p>
<p>For example, to manipulate and query Oracle data, you use the <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, and <code>SELECT</code> statements. <code>INSERT</code> adds rows of data to database tables, <code>UPDATE</code> modifies rows, <code>DELETE</code> removes unwanted rows, and <code>SELECT</code> retrieves rows that meet your search criteria.</p>
<p>The Oracle Precompilers support all Oracle statements. For example, the powerful <code>SET ROLE</code> statement lets you dynamically manage database privileges. A <span class="italic">role</span> is a named group of related system and object privileges, related system or object privileges granted to users or other roles. Role definitions are stored in the Oracle data dictionary. Your applications can use the <code>SET ROLE</code> statement to enable and disable roles as needed.</p>
<p>Only SQL statements--not SQL*Plus statements--are valid in an application program. (SQL*Plus has additional statements for setting environment parameters, editing, and report formatting.)</p>
</div>
<!-- class="sect2" -->
<a id="BABJFGED"></a>
<div id="ZZPRE142" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref49"></a>Executable versus Declarative Statements</h3>
<p>Embedded SQL includes all the interactive SQL statements plus others that allow you to transfer data between Oracle and a host program. There are two types of embedded SQL statements: <span class="italic"><a id="sthref50"></a>executable</span> and <span class="italic">declarative</span>.</p>
<p>Executable statements result in calls to the run-time library <code>SQLLIB</code>. You use them to connect to Oracle, to define, query, and manipulate Oracle data, to control access to Oracle data, and to process transactions. They can be placed wherever any other host-language executable statements can be placed.</p>
<p><a id="sthref51"></a>Declarative statements, however, do not result in calls to <code>SQLLIB</code> and do not operate on Oracle data. You use them to declare Oracle objects, communications areas, and SQL variables. They can be placed wherever host-language declarations can be placed.</p>
<p><a href="#BABFEIEA">Table 2-1</a> groups the various embedded SQL statements and <a href="#BABEGECH">Table 2-2</a> groups the various executable SQL statements.</p>
<div id="ZZPRE143" class="tblformal">
<p class="titleintable"><a id="sthref52"></a><a id="BABFEIEA"></a>Table 2-1 Embedded SQL Statements</p>
<table class="cellalignment3250" title="Embedded SQL Statements" summary="embedded sql statement" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t2">Declarative SQL</th>
<th class="cellalignment3246" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t2" headers="r1c1-t2">
<p><code>STATEMENT</code></p>
</td>
<td class="cellalignment3247" headers="r2c1-t2 r1c2-t2">
<p>PURPOSE</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t2" headers="r1c1-t2">
<p><code>ARRAYLEN</code>*</p>
</td>
<td class="cellalignment3247" headers="r3c1-t2 r1c2-t2">
<p>To use host arrays with PL/SQL</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r4c1-t2" headers="r1c1-t2">
<p><code>BEGIN</code> <code><br/>
DECLARE</code> <code>SECTION</code>* <code><br/>
END</code> <code><br/>
DECLARE</code> <code>SECTION</code>*</p>
</td>
<td class="cellalignment3247" headers="r4c1-t2 r1c2-t2">
<p>To declare host variables</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r5c1-t2" headers="r1c1-t2">
<p><code>DECLARE</code>*</p>
</td>
<td class="cellalignment3247" headers="r5c1-t2 r1c2-t2">
<p>To name Oracle objects</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r6c1-t2" headers="r1c1-t2">
<p><code>INCLUDE</code>*</p>
</td>
<td class="cellalignment3247" headers="r6c1-t2 r1c2-t2">
<p>To copy in files</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r7c1-t2" headers="r1c1-t2">
<p><code>TYPE</code>*</p>
</td>
<td class="cellalignment3247" headers="r7c1-t2 r1c2-t2">
<p>To equivalence datatypes</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r8c1-t2" headers="r1c1-t2">
<p><code>VAR</code>*</p>
</td>
<td class="cellalignment3247" headers="r8c1-t2 r1c2-t2">
<p>To equivalence variables</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r9c1-t2" headers="r1c1-t2">
<p><code>WHENEVER</code>*</p>
</td>
<td class="cellalignment3247" headers="r9c1-t2 r1c2-t2">
<p>To handle run-time errors</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>*Has no interactive counterpart</p>
<div id="ZZPRE144" class="tblformal">
<p class="titleintable"><a id="sthref53"></a><a id="BABEGECH"></a>Table 2-2 Executable SQL Statements and their Descriptions</p>
<table class="cellalignment3250" title="Executable SQL Statements and their Descriptions" summary="executable sql" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t3">Executable SQL</th>
<th class="cellalignment3246" id="r1c2-t3">Descriptions</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t3" headers="r1c1-t3">
<p><code>STATEMENT</code></p>
</td>
<td class="cellalignment3247" headers="r2c1-t3 r1c2-t3">
<p>PURPOSE</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t3" headers="r1c1-t3">
<p><code>ALLOCATE</code>*</p>
</td>
<td class="cellalignment3247" headers="r3c1-t3 r1c2-t3">
<p>To define and control Oracle data</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r4c1-t3" headers="r1c1-t3">
<p><code>ALTER</code></p>
</td>
<td class="cellalignment3247" headers="r4c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r5c1-t3" headers="r1c1-t3">
<p><code>ANALYZE</code></p>
</td>
<td class="cellalignment3247" headers="r5c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r6c1-t3" headers="r1c1-t3">
<p><code>AUDIT</code></p>
</td>
<td class="cellalignment3247" headers="r6c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r7c1-t3" headers="r1c1-t3">
<p><code>COMMENT</code></p>
</td>
<td class="cellalignment3247" headers="r7c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r8c1-t3" headers="r1c1-t3">
<p><code>CONNECT</code>*</p>
</td>
<td class="cellalignment3247" headers="r8c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r9c1-t3" headers="r1c1-t3">
<p><code>CREATE</code></p>
</td>
<td class="cellalignment3247" headers="r9c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r10c1-t3" headers="r1c1-t3">
<p><code>DROP</code></p>
</td>
<td class="cellalignment3247" headers="r10c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r11c1-t3" headers="r1c1-t3">
<p><code>GRANT</code></p>
</td>
<td class="cellalignment3247" headers="r11c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r12c1-t3" headers="r1c1-t3">
<p><code>NOAUDIT</code></p>
</td>
<td class="cellalignment3247" headers="r12c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r13c1-t3" headers="r1c1-t3">
<p><code>RENAME</code></p>
</td>
<td class="cellalignment3247" headers="r13c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r14c1-t3" headers="r1c1-t3">
<p><code>REVOKE</code></p>
</td>
<td class="cellalignment3247" headers="r14c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r15c1-t3" headers="r1c1-t3">
<p><code>TRUNCATE</code></p>
</td>
<td class="cellalignment3247" headers="r15c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r16c1-t3" headers="r1c1-t3">
<p><code>CLOSE</code>*</p>
</td>
<td class="cellalignment3247" headers="r16c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r17c1-t3" headers="r1c1-t3">
<p><code>DELETE</code></p>
</td>
<td class="cellalignment3247" headers="r17c1-t3 r1c2-t3">
<p>To query and manipulate Oracle data</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r18c1-t3" headers="r1c1-t3">
<p><code>EXPLAIN</code> <code>PLAN</code></p>
</td>
<td class="cellalignment3247" headers="r18c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r19c1-t3" headers="r1c1-t3">
<p><code>FETCH</code>*</p>
</td>
<td class="cellalignment3247" headers="r19c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r20c1-t3" headers="r1c1-t3">
<p><code>INSERT</code></p>
</td>
<td class="cellalignment3247" headers="r20c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r21c1-t3" headers="r1c1-t3">
<p><code>LOCK</code> <code>TABLE</code></p>
</td>
<td class="cellalignment3247" headers="r21c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r22c1-t3" headers="r1c1-t3">
<p><code>OPEN</code>*</p>
</td>
<td class="cellalignment3247" headers="r22c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r23c1-t3" headers="r1c1-t3">
<p><code>SELECT</code></p>
</td>
<td class="cellalignment3247" headers="r23c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r24c1-t3" headers="r1c1-t3">
<p><code>UPDATE</code></p>
</td>
<td class="cellalignment3247" headers="r24c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r25c1-t3" headers="r1c1-t3">
<p><code>COMMIT</code></p>
</td>
<td class="cellalignment3247" headers="r25c1-t3 r1c2-t3">
<p>To process transactions</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r26c1-t3" headers="r1c1-t3">
<p><code>ROLLBACK</code></p>
</td>
<td class="cellalignment3247" headers="r26c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r27c1-t3" headers="r1c1-t3">
<p><code>SAVEPOINT</code></p>
</td>
<td class="cellalignment3247" headers="r27c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r28c1-t3" headers="r1c1-t3">
<p><code>SET</code> <code>TRANSACTION</code></p>
</td>
<td class="cellalignment3247" headers="r28c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r29c1-t3" headers="r1c1-t3">
<p><code>DESCRIBE</code>*</p>
</td>
<td class="cellalignment3247" headers="r29c1-t3 r1c2-t3">
<p>To use dynamic SQL</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r30c1-t3" headers="r1c1-t3">
<p><code>EXECUTE</code>*</p>
</td>
<td class="cellalignment3247" headers="r30c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r31c1-t3" headers="r1c1-t3">
<p><code>PREPARE</code>*</p>
</td>
<td class="cellalignment3247" headers="r31c1-t3 r1c2-t3">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r32c1-t3" headers="r1c1-t3">
<p><code>ALTER</code> <code>SESSION</code></p>
</td>
<td class="cellalignment3247" headers="r32c1-t3 r1c2-t3">
<p>To control sessions</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r33c1-t3" headers="r1c1-t3">
<p><code>SET</code> <code>ROLE</code></p>
</td>
<td class="cellalignment3247" headers="r33c1-t3 r1c2-t3">&nbsp;</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>*Has no interactive counterpart</p>
</div>
<!-- class="sect2" -->
<a id="BABFDFIA"></a>
<div id="ZZPRE145" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref54"></a>Embedded<a id="sthref55"></a> SQL Syntax<a id="sthref56"></a></h3>
<p><a id="sthref57"></a>In your application program, you can freely intermix SQL statements with host-language statements and use host-language variables in SQL statements. The only special requirement for building SQL statements into your host program is that you begin them with the keywords EXEC SQL and end them with the SQL statement terminator for your host language. The precompiler translates all executable EXEC SQL statements into calls to the run-time library SQLLIB.</p>
<p><a id="sthref58"></a>Most embedded SQL statements differ from their interactive counterparts only through the adding of a new clause or the use of program variables. Compare the following interactive and embedded ROLLBACK statements:</p>
<pre>ROLLBACK WORK; -- interactive
EXEC SQL ROLLBACK WORK; -- embedded
</pre>
<p>For a summary of embedded SQL syntax, see the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABJFGEC"></a>
<div id="ZZPRE146" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref59"></a>Static versus Dynamic SQL Statements</h3>
<p>Most application programs are designed to process <span class="italic">static</span> SQL statements and fixed transactions. In this case, you know the makeup of each SQL statement and transaction before run time. That is, you know which SQL commands will be issued, which database tables might be changed, which columns will be updated, and so on.</p>
<p>However, some applications are required to accept and process any valid SQL statement at run time. So, you might not know until then all the SQL commands, database tables, and columns involved.</p>
<p><span class="italic">Dynamic</span> SQL is an advanced programming technique that lets your program accept or build SQL statements at run time and take explicit control over datatype conversion.</p>
</div>
<!-- class="sect2" -->
<a id="BABJHAAJ"></a>
<div id="ZZPRE147" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Embedded PL/SQL Blocks</h3>
<p>The Oracle Precompilers treat a PL/SQL block like a single embedded SQL statement. So, you can place a PL/SQL block anywhere in an application program that you can place a SQL statement. To embed PL/SQL in your host program, you simply declare the variables to be shared with PL/SQL and bracket the PL/SQL block with the keywords EXEC SQL EXECUTE and END-EXEC.</p>
<p>From embedded PL/SQL blocks, you can manipulate Oracle data flexibly and safely because PL/SQL supports all SQL data manipulation and transaction processing commands. For more information about PL/SQL, see <a href="ch_five.htm#BIHJJIBA">Chapter 5, &#34;Using Embedded PL/SQL&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABJEGEA"></a>
<div id="ZZPRE148" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Host and Indicator Variables</h3>
<p><a id="sthref60"></a>A<a id="sthref61"></a> <span class="italic">host variable</span> is a scalar or array variable declared in the host language and shared with Oracle, meaning that both your program and Oracle can reference its value. Host variables are the key to communication between Oracle and your program.</p>
<p>Your program uses <span class="italic">input</span> host variables to pass data to Oracle. Oracle uses <span class="italic">output</span> host variables to pass data and status information to your program. The program <a id="sthref62"></a>assigns values to input host variables; Oracle assigns values to output host variables.</p>
<p><a id="sthref63"></a>Host variables can be used anywhere an expression can be used. But, in SQL statements, host variables must be prefixed with a colon (:) to set them apart from Oracle objects.</p>
<p>You can associate any host variable with an optional indicator variable. An <span class="italic">indicator variable</span> is an integer variable that &#34;indicates&#34; the value or condition of its host variable. You use indicator variables to assign nulls to input host variables and to detect nulls or truncated values in output host variables. <a id="sthref64"></a>A <span class="italic">null</span> is a missing, unknown, or inapplicable value.</p>
<p>In SQL statements, an indicator variable must be prefixed with a colon and appended to its associated host variable (unless, to improve readability, you precede the indicator variable with the optional keyword <code>INDICATOR</code>).</p>
</div>
<!-- class="sect2" -->
<a id="BABDAJJF"></a>
<div id="ZZPRE149" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref65"></a>Oracle Datatypes</h3>
<p>Typically, a host program inputs data to Oracle, and Oracle outputs data to the program. Oracle stores input data in database tables and stores output data in program host variables. To store a data item, Oracle must know its <span class="italic">datatype</span>, which specifies a storage format and valid range of values.</p>
<p><a id="sthref66"></a>Oracle recognizes two kinds of datatypes: <span class="italic">internal</span> and <span class="italic">external</span>. Internal datatypes specify how Oracle stores data in database columns. Oracle also uses internal datatypes to represent database pseudocolumns, which return specific data items but are not actual columns in a table.</p>
<p>External datatypes specify how data is stored in host variables. When your host program inputs data to Oracle, if necessary, Oracle converts between the external datatype of the input host variable and the internal datatype of the database column. When Oracle outputs data to your host program, if necessary, Oracle converts between the internal datatype of the database column and the external datatype of the output host variable.</p>
</div>
<!-- class="sect2" -->
<a id="BABCIHEA"></a>
<div id="ZZPRE150" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Arrays</h3>
<p><a id="sthref67"></a>The Oracle Precompilers let you define array host variables (called <span class="italic">host arrays</span>) and operate on them with a single SQL statement. Using the array <code>SELECT</code>, <code>FETCH</code>, <code>DELETE</code>, <code>INSERT</code>, and <code>UPDATE</code> statements, you can query and manipulate large volumes of data with ease.</p>
</div>
<!-- class="sect2" -->
<a id="BABGDJAJ"></a>
<div id="ZZPRE151" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Datatype Equivalencing</h3>
<p>The Oracle Precompilers add flexibility to your applications by letting you <span class="italic">equivalence</span> datatypes. That means you can customize the way Oracle interprets input data and formats output data.</p>
<p>On a variable-by-variable basis, you can equivalence supported host language datatypes to Oracle external datatypes.</p>
</div>
<!-- class="sect2" -->
<a id="BABEAAIF"></a>
<div id="ZZPRE152" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref68"></a>Private SQL Areas, Cursors, and Active Sets</h3>
<p>To process a SQL statement, Oracle opens a work area called a <a id="sthref69"></a><span class="italic">private SQL area</span>. The private SQL area stores information needed to execute the SQL statement. An identifier called a <span class="italic">cursor</span> lets you name a SQL statement, access the information in its private SQL area, and, to some extent, control its processing.</p>
<p>For static SQL statements, there are two types of cursors: <span class="italic">i<a id="sthref70"></a>mplicit</span> and <span class="italic">explicit</span>. Oracle implicitly declares a cursor for all data definition and data manipulation statements, including <code>SELECT</code> statements (queries) that return only one row. However, for queries that return more than one row, to process beyond the first row, you must explicitly declare a cursor (or use host arrays).</p>
<p><a id="sthref71"></a>The set of rows retrieved is called the <span class="italic">active set</span>; its size depends on how many rows meet the query search condition. You use an explicit cursor to identify the row currently being processed, which is called the <span class="italic">current row</span><a id="sthref72"></a>.</p>
<p>Imagine the set of rows being returned to a terminal screen. A screen cursor can point to the first row to be processed, then the next row, and so on. Similarly, an explicit cursor &#34;points&#34; to the current row in the active set, allowing your program to process the rows one at a time.</p>
</div>
<!-- class="sect2" -->
<a id="BABBHECG"></a>
<div id="ZZPRE153" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Transactions</h3>
<p><a id="sthref73"></a>A <span class="italic"><a id="sthref74"></a>transaction</span> is a series of logically related SQL statements (two <code>UPDATE</code>s that credit one bank account and debit another, for example) that Oracle treats as a unit, so that all changes brought about by the statements are made permanent or undone at the same time. The current transaction consists of all data manipulation statements executed since the last data definition, <code>COMMIT</code>, or <code>ROLLBACK</code> statement was executed.</p>
<p><a id="sthref75"></a>To help ensure the consistency of your database, the Oracle Precompilers let you define transactions by using the <code>COMMIT</code>, <code>ROLLBACK</code>, and <code>SAVEPOINT</code> statements. <code>COMMIT</code> makes permanent any changes made during the current transaction. <code>ROLLBACK</code> ends the current transaction and undoes any changes made since the transaction began. <code>SAVEPOINT</code> marks the current point in a transaction; used with <code>ROLLBACK</code>, it undoes part of a transaction.</p>
</div>
<!-- class="sect2" -->
<a id="BABBAAJJ"></a>
<div id="ZZPRE154" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref76"></a>Errors and Warnings</h3>
<p>When you execute an embedded SQL statement, it either succeeds or fails, and might result in an error or warning. You need a way to handle these results. The Oracle Precompilers provide four error handling mechanisms:</p>
<ul>
<li>
<p><code>SQLCODE</code> status variable</p>
</li>
<li>
<p><code>SQLSTATE</code> status variable</p>
</li>
<li>
<p>SQL Communications Area (SQLCA) and <code>WHENEVER</code> statement</p>
</li>
<li>
<p>Oracle Communications Area (ORACA)</p>
</li>
</ul>
<p class="subhead2"><a id="ZZPRE155"></a>SQLCODE/SQLSTATE Status Variables</p>
<p>After executing a SQL statement, the Oracle Server returns a status code to a variable named <code>SQLCODE</code> or <code>SQLSTATE</code>. The status code indicates whether the SQL statement executed successfully or caused an error or warning condition.</p>
<p class="subhead2"><a id="ZZPRE156"></a>SQLCA and WHENEVER Statement</p>
<p>The SQLCA is a data structure that defines program variables used by Oracle to pass run-time status information to the program. With the SQLCA, you can take different actions based on feedback from Oracle about work just attempted. For example, you can verify if a <code>DELETE</code> statement succeeded and if so, how many rows were deleted.</p>
<p><a id="sthref77"></a>With the <code>WHENEVER</code> statement, you can specify actions to be taken automatically when Oracle detects an error or warning condition. These actions include continuing with the next statement, calling a subroutine, branching to a labeled statement, or stopping.</p>
<p class="subhead2"><a id="ZZPRE157"></a>ORACA</p>
<p>When more information is needed about run-time errors than the SQLCA provides, you can use the ORACA. The ORACA is a data structure that handles Oracle communication. It contains cursor statistics, information about the current SQL statement, option settings, and system statistics.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGBDCI"></a>
<div id="ZZPRE158" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Steps in Developing an Embedded SQL Application</h2>
<p><a id="sthref78"></a><a href="#BABFCHJF">Figure 2-1</a> walks you through the embedded SQL application development process.</p>
<div id="ZZPRE159" class="figure">
<p class="titleinfigure"><a id="BABFCHJF"></a>Figure 2-1 Application Development Process</p>
<img width="536" height="676" src="img/image005.gif" alt="Application Development"/><br/>
<a id="sthref79" href="img_text/image005.htm">Description of &#34;Figure 2-1 Application Development Process&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>As you can see, precompiling results in a source file that can be compiled normally. Although precompiling adds a step to the traditional development process, that step is well worth taking because it lets you write very flexible applications.</p>
</div>
<!-- class="sect1" -->
<a id="BABIGFAI"></a>
<div id="ZZPRE160" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">A Sample Program</h2>
<p>A good way to get acquainted with embedded SQL is to look at a sample program example.</p>
<p>Handling errors with the <code>WHENEVER</code> statement, the following program connects to Oracle, prompts the user for an employee number, queries the database for the employee&#39;s name, salary, and commission, then displays the information and exits.</p>
<pre>-- declare host and indicator variables
EXEC SQL BEGIN DECLARE SECTION;
 username CHARACTER(20);
 password CHARACTER(20);
 emp_number INTEGER;
 emp_name CHARACTER(10);
 salary REAL;
 commission REAL;
 ind_comm SMALLINT; -- indicator variable
EXEC SQL END DECLARE SECTION;
-- copy in the SQL Communications Area
EXEC SQL INCLUDE SQLCA;
display &#39;Username? &#39;;
read username;
display &#39;Password? &#39;;
read password;
-- handle processing errors
EXEC SQL WHENEVER SQLERROR DO sql_error;
-- log on to Oracle
EXEC SQL CONNECT :username IDENTIFIED BY :password;
display &#39;Connected to Oracle&#39;; 
display &#39;Employee number? &#39;;
read emp_number;
-- query database for employee&#39;s name, salary, and commission
-- and assign values to host variables
EXEC SQL SELECT ENAME, SAL, COMM
 INTO :emp_name, :salary, :commission:ind_comm
 FROM EMP
 WHERE EMPNO = :emp_number;
display &#39;Employee Salary Commission&#39;;
display &#39;-------- ------ ----------&#39;;
-- display employee&#39;s name, salary, and commission (if not null)
IF ind_comm = -1 THEN -- commission is null
 display emp_name, salary, &#39;Not applicable&#39;;
ELSE
 display emp_name, salary, commission;
ENDIF;
-- release resources and log off the database
EXEC SQL COMMIT WORK RELEASE;
display &#39;Have a good day&#39;;
exit program;
ROUTINE sql_error
BEGIN
 -- avoid an infinite loop if the rollback results in an error
 EXEC SQL WHENEVER SQLERROR CONTINUE; 
 -- release resources and log off the database
 EXEC SQL ROLLBACK WORK RELEASE; 
 display &#39;Processing error&#39;;
 exit program with an error;
END sql_error;
</pre></div>
<!-- class="sect1" -->
<a id="BABCIFGA"></a>
<div id="ZZPRE161" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">S<a id="sthref80"></a><a id="sthref81"></a>ample Tables</h2>
<p><a id="sthref82"></a>Most programming examples in this guide use two sample database tables: <code><a id="sthref83"></a>DEPT</code> and <code>EMP</code>. Their definitions follow:</p>
<pre>CREATE TABLE DEPT
 (DEPTNO NUMBER(2),
 DNAME VARCHAR2(14),
 LOC VARCHAR2(13))
CREATE TABLE EMP
 (EMPNO NUMBER(4) primary key,
 ENAME VARCHAR2(10),
 JOB VARCHAR2(9),
 MGR NUMBER(4),
 HIREDATE DATE,
 SAL NUMBER(7,2),
 COMM NUMBER(7,2),
 DEPTNO NUMBER(2))
</pre>
<div id="ZZPRE162" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref84"></a>
<h3 class="sect2">Sample Data</h3>
<p>Respectively, the <code>DEPT</code> and <code>EMP</code> tables contain the following rows of data:</p>
<pre>DEPTNO DNAME LOC
------- ---------- ---------
10 ACCOUNTING NEW YORK
20 RESEARCH DALLAS
30 SALES CHICAGO
40 OPERATIONS BOSTON
EMPNO ENAME JOB MGR HIREDATE SAL COMM DEPTNO
----- ------- --------- ------ --------- ------ ------ -------
 7369 SMITH CLERK 7902 17-DEC-80 800 20
 7499 ALLEN SALESMAN 7698 20-FEB-81 1600 300 30
 7521 WARD SALESMAN 7698 22-FEB-81 1250 500 30
 7566 JONES MANAGER 7839 02-APR-81 2975 20
 7654 MARTIN SALESMAN 7698 28-SEP-81 1250 1400 30
 7698 BLAKE MANAGER 7839 01-MAY-81 2850 30
 7782 CLARK MANAGER 7839 09-JUN-81 2450 10
 7788 SCOTT ANALYST 7566 19-APR-87 3000 20
 7839 KING PRESIDENT 17-NOV-81 5000 10
 7844 TURNER SALESMAN 7698 08-SEP-81 1500 30
 7876 ADAMS CLERK 7788 23-MAY-87 1100 20
 7900 JAMES CLERK 7698 03-DEC-81 950 30
 7902 FORD ANALYST 7566 03-DEC-81 3000 20
 7934 MILLER CLERK 7782 23-JAN-82 1300 10
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3238">
<tr>
<td class="cellalignment3247">
<table class="cellalignment3243">
<tr>
<td class="cellalignment3242"><a href="ch_one.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3242"><a href="ch_three.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3249">
<table class="cellalignment3241">
<tr>
<td class="cellalignment3242"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3242"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3242"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3242"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3242"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3242"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>