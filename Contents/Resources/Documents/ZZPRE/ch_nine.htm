<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114754"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20Host%20Arrays"></a><title>Using Host Arrays</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-06T18:44:39Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Programmer&#39;s Guide to the Oracle Precompilers"/>
<meta name="dcterms.identifier" content="E53283-01"/>
<meta name="dcterms.isVersionOf" content="ZZPRE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="ch_eight.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ch_ten.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53283-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/20</span> <!-- End Header -->
<div id="ZZPRE841" class="chapter"><a id="BABHFECC"></a>
<h1 class="chapter"><span class="secnum">9</span> Using Host Arrays</h1>
<p>This chapter describes the following:</p>
<ul>
<li>
<p><a href="#BGBHEHFE">What Is a Host Array?</a></p>
</li>
<li>
<p><a href="#BGBGBGAA">Why Use Arrays?</a></p>
</li>
<li>
<p><a href="#BGBIDDFF">Declaring Host Arrays</a></p>
</li>
<li>
<p><a href="#BGBEJBCB">Using Arrays in SQL Statements</a></p>
</li>
<li>
<p><a href="#BGBHBCIH">Selecting into Arrays</a></p>
</li>
<li>
<p><a href="#BGBIIFHB">Using Indicator Arrays</a></p>
</li>
<li>
<p><a href="#BGBBJGBA">Using the FOR Clause</a></p>
</li>
<li>
<p><a href="#BGBGIHDI">Using the WHERE Clause</a></p>
</li>
<li>
<p><a href="#BGBCADBJ">Mimicking the CURRENT OF Clause</a></p>
</li>
<li>
<p><a href="#BGBFJAEJ">Using SQLERRD(3)</a></p>
</li>
</ul>
<p>This chapter looks at using arrays to simplify coding and improve program performance. You learn how to manipulate Oracle data using arrays, how to operate on all the elements of an array with a single SQL statement, and how to limit the number of array elements processed. The following questions are answered:</p>
<ul>
<li>
<p>What is a host array?</p>
</li>
<li>
<p>Why use arrays?</p>
</li>
<li>
<p>How are host arrays declared?</p>
</li>
<li>
<p>How are arrays used in SQL statements?</p>
</li>
</ul>
<a id="BGBHEHFE"></a>
<div id="ZZPRE842" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">What Is a Host Array?</h2>
<p><a id="sthref1204"></a>An <span class="italic">array</span> is a collection of related data items, called <span class="italic">elements</span>, associated with a single variable name. When declared as a host variable, the array is called a<a id="sthref1205"></a> <span class="italic">host array</span>. Likewise, an indicator variable declared as an array is called an <a id="sthref1206"></a><span class="italic">indicator array</span>. An indicator array can be associated with any host array.</p>
</div>
<!-- class="sect1" -->
<a id="BGBGBGAA"></a>
<div id="ZZPRE843" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Why Use Arrays?</h2>
<p>Arrays can ease programming and offer improved performance. When writing an application, you are usually faced with the problem of storing and manipulating large collections of data. Arrays simplify the task of naming and referencing the individual items in each collection.</p>
<p><a id="sthref1207"></a>Using arrays can boost the performance of your application. Arrays let you manipulate an entire collection of data items with a single SQL statement. Thus, Oracle communication overhead is reduced markedly, especially in a networked environment. For example, suppose you want to insert information about 300 employees into the EMP table. Without arrays, your program must do 300 individual <code>INSERTs</code>--one for each employee. With arrays, only one <code>INSERT</code> need be done.</p>
</div>
<!-- class="sect1" -->
<a id="BGBIDDFF"></a>
<div id="ZZPRE844" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Declaring Host Arrays<a id="sthref1208"></a></h2>
<p><a id="sthref1209"></a><a id="sthref1210"></a>You declare host arrays in the Declare Section like simple host variables. You also <span class="italic">dimension</span> (set the size of) host arrays in the Declare Section. In the following example, you declare three host arrays and dimension them with <a id="sthref1211"></a>50 elements:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 emp_name (50) CHARACTER(20);
 emp_number (50) INTEGER;
 salary (50) REAL;
EXEC SQL END DECLARE SECTION;
</pre>
<div id="ZZPRE845" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1212"></a>
<h3 class="sect2">Dimensioning Arrays</h3>
<p><a id="sthref1213"></a>The maximum dimension of a host array is 32,767 elements. If you use a host array that exceeds the maximum, you get a &#34;parameter out of range&#34; run-time error. If you use multiple host arrays in a single SQL statement, their dimensions should be the same. Otherwise, an &#34;array size mismatch&#34; warning message is issued at precompile time. If you ignore this warning, the precompiler uses the <span class="italic">smallest</span> dimension for the SQL operation.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE846" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1214"></a>
<h3 class="sect2">Restrictions</h3>
<p><a id="sthref1215"></a>You cannot declare host arrays of pointers. Also, host arrays that might be <a id="sthref1216"></a>referenced in a SQL statement are limited to one dimension. So, the two-dimensional array declared in the following example is <span class="italic">invalid</span>:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 hi_lo_scores (25, 25) INTEGER; -- not allowed
EXEC SQL END DECLARE SECTION;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBEJBCB"></a>
<div id="ZZPRE847" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Arrays in SQL Statements</h2>
<p>The Oracle Precompilers allow the use of host arrays in data manipulation statements. You can use host arrays as input variables in the <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> statements and as output variables in the <code>INTO</code> clause of <code>SELECT</code> and <code>FETCH</code> statements.</p>
<p><a id="sthref1217"></a>Note that when <code>MODE=ANSI14</code>, array operations are <span class="italic">not</span> allowed. In other words, you can reference host arrays in a SQL statement only when <code>MODE</code>={<code>ANSI|ANSI13|ORACLE}</code>.</p>
<p>The syntax used for host arrays and simple host variables is nearly the same. One difference is the optional FOR clause, which lets you control array processing. Also, there are restrictions on mixing host arrays and simple host variables in a SQL statement.</p>
<p>The following sections illustrate the use of host arrays in data manipulation statements.</p>
</div>
<!-- class="sect1" -->
<a id="BGBHBCIH"></a>
<div id="ZZPRE848" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Selecting into Arrays</h2>
<p><a id="sthref1218"></a>You can <a id="sthref1219"></a>use host arrays as output variables in the <code>SELECT</code> statement. If you know the maximum number of rows the select will return, simply dimension the host arrays with that number of elements. In the following example, you select directly into three host arrays. Knowing the select will return no more than 50 rows, you dimension the arrays with 50 elements:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 emp_name (50) CHARACTER(20);
 emp_number (50) INTEGER;
 salary (50) REAL;
EXEC SQL END DECLARE SECTION;
EXEC SQL SELECT ENAME, EMPNO, SAL
 INTO :emp_name, :emp_number, :salary
 FROM EMP
 WHERE SAL &gt; 1000;
</pre>
<p>In this example, the <code>SELECT</code> statement returns up to 50 rows. If there are fewer than 50 eligible rows or you want to retrieve only 50 rows, this method will suffice. However, if there are more than 50 eligible rows, you cannot retrieve all of them this way. If you reexecute the <code>SELECT</code> statement, it just returns the first 50 rows again, even if more are eligible. You must either dimension a larger array or declare a cursor for use with the <code>FETCH</code> statement.</p>
<p>If a <code>SELECT INTO</code> statement returns more rows than the number of elements you dimensioned, Oracle issues the error message</p>
<pre>SQL-02112: SELECT...INTO returns too many rows
</pre>
<p>unless you specify <code>SELECT_ERROR</code>=<code>NO</code>. For more information about the option <code>SELECT_ERROR</code>, refer to <a href="ch_six.htm#BABECBCG">&#34;SELECT_ERROR&#34;</a></p>
<div id="ZZPRE849" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1220"></a>
<h3 class="sect2"><a id="sthref1221"></a>Batch Fetches</h3>
<p><a id="sthref1222"></a>If you do not know the maximum number of rows a select will return, you can declare <a id="sthref1223"></a>and open a cursor_name fetch from it in &#34;batches.&#34; Batch fetches within a loop let you retrieve a large number of rows with ease. Each fetch returns the next batch of rows from the current active set. In the following example, you fetch in 20-row batches:</p>
<pre><a id="sthref1224"></a>EXEC SQL BEGIN DECLARE SECTION;
 emp_number (20) INTEGER;
 salary (20) REAL;
EXEC SQL END DECLARE SECTION;
EXEC SQL DECLARE emp_cursor CURSOR FOR
 SELECT EMPNO, SAL FROM EMP;
EXEC SQL OPEN emp_cursor;
EXEC SQL WHENEVER NOT FOUND DO <span class="bold">...</span>
LOOP
 EXEC SQL FETCH emp_cursor INTO :emp_number, :salary;
 -- process batch of rows
ENDLOOP;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE850" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1225"></a>
<h3 class="sect2">Number of Rows Fetched<a id="sthref1226"></a></h3>
<p>Each fetch returns, at most, the number of rows in the array dimension. Fewer rows are returned in the following cases:</p>
<ul>
<li>
<p>The end of the active set is reached. The &#34;no data found&#34; Oracle warning code is returned to SQLCODE in the SQLCA. For example, this happens if you fetch into an array of dimension 100 but only 20 rows are returned.</p>
</li>
<li>
<p>Fewer than a full batch of rows remain to be fetched. For example, this happens if you fetch 70 rows into an array of dimension 20 because after the third fetch, only 10 rows remain to be fetched.</p>
</li>
<li>
<p>An error is detected while processing a row. The fetch fails and the applicable Oracle error code is returned to SQLCODE.</p>
</li>
</ul>
<p>The cumulative number of rows returned can be found in the third element of SQLERRD in the SQLCA, called <a id="sthref1227"></a>SQLERRD(3) in this guide. This applies to each open cursor. In the following example, notice how the status of each cursor is maintained separately:</p>
<pre>EXEC SQL OPEN cursor1;
EXEC SQL OPEN cursor2;
EXEC SQL FETCH cursor1 INTO :array_of_20;
 -- now running total in SQLERRD(3) is 20
EXEC SQL FETCH cursor2 INTO :array_of_30;
 -- now running total in SQLERRD(3) is 30, not 50
EXEC SQL FETCH cursor1 INTO :array_of_20;
 -- now running total in SQLERRD(3) is 40 (20 + 20)
EXEC SQL FETCH cursor2 INTO :array_of_30;
 -- now running total in SQLERRD(3) is 60 (30 + 30)
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE851" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1228"></a>
<h3 class="sect2">Restrictions</h3>
<p><a id="sthref1229"></a>Using host arrays in the <code>WHERE</code> clause of a <code>SELECT</code> statement is allowed only in a subquery. (For example, refer to <a href="#BGBGIHDI">&#34;Using the WHERE Clause&#34;</a>.) Also, you cannot mix simple host variables with host arrays in the INTO clause of a <code>SELECT</code> or <code>FETCH</code> statement; if any of the host variables is an array, all must be arrays. <a href="#BGBJFAID">Table 9-1</a> shows which uses of host arrays are valid in a <code>SELECT</code> <code>INTO</code> statement.</p>
<div id="ZZPRE852" class="tblformal">
<p class="titleintable"><a id="sthref1230"></a><a id="BGBJFAID"></a>Table 9-1 Valid Host Arrays for SELECT INTO</p>
<table class="cellalignment3250" title="Valid Host Arrays for SELECT INTO" summary="host arrays valid for select statement" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t2">INTO Clause</th>
<th class="cellalignment3246" id="r1c2-t2">WHERE Clause</th>
<th class="cellalignment3246" id="r1c3-t2">Valid?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t2" headers="r1c1-t2">
<p>array</p>
</td>
<td class="cellalignment3247" headers="r2c1-t2 r1c2-t2">
<p>array</p>
</td>
<td class="cellalignment3247" headers="r2c1-t2 r1c3-t2">
<p>no</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t2" headers="r1c1-t2">
<p>scalar</p>
</td>
<td class="cellalignment3247" headers="r3c1-t2 r1c2-t2">
<p>scalar</p>
</td>
<td class="cellalignment3247" headers="r3c1-t2 r1c3-t2">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r4c1-t2" headers="r1c1-t2">
<p>array</p>
</td>
<td class="cellalignment3247" headers="r4c1-t2 r1c2-t2">
<p>scalar</p>
</td>
<td class="cellalignment3247" headers="r4c1-t2 r1c3-t2">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r5c1-t2" headers="r1c1-t2">
<p>scalar</p>
</td>
<td class="cellalignment3247" headers="r5c1-t2 r1c2-t2">
<p>array</p>
</td>
<td class="cellalignment3247" headers="r5c1-t2 r1c3-t2">
<p>no</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div id="ZZPRE853" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1231"></a>
<h3 class="sect2">Fetching Nulls</h3>
<p>If you select or fetch a null into a host array that lacks an indicator array, Oracle stops processing, sets SQLERRD(3) to the number of rows processed, and issues the following error message:</p>
<pre>ORA-01405: fetched column value is NULL
</pre>
<p>To learn how to find nulls and truncated values, refer to <a href="ch_four.htm#BABCFFHH">&#34;Using Indicator Variables&#34;</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE854" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1232"></a>
<h3 class="sect2">Fetching Truncated Values</h3>
<p>When DBMS=V7, if you select or fetch a truncated column value into a host array that lacks an indicator array, Oracle stops processing, sets SQLERRD(3) to the number of rows processed, and issues the following error message:</p>
<pre>ORA-01406: fetched column value was truncated
</pre>
<p>You can check SQLERRD(3) for the number of rows processed before the truncation occurred. The rows-processed count includes the row that caused the truncation error.</p>
<p>When MODE=ANSI, truncation is not considered an error, so Oracle continues processing.</p>
<p>Again, when doing array selects and fetches, always use indicator arrays. That way, if Oracle assigns one or more truncated column values to an output host array, you can find the original lengths of the column values in the associated indicator array.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE855" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1233"></a>
<h3 class="sect2">Inserting with Arrays</h3>
<p><a id="sthref1234"></a>You can use host arrays as input variables in an <code>INSERT</code> statement. Just make sure your program populates the arrays with data before executing the <code>INSERT</code> statement. If some elements in the arrays are irrelevant, you can use the <code>FOR</code> clause to control the number of rows inserted. Refer to <a href="#BGBBJGBA">Using the FOR Clause</a>.</p>
<p>An example of inserting with host arrays follows:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 emp_name (50) CHARACTER(20);
 emp_number (50) INTEGER;
 salary (50) REAL;
EXEC SQL END DECLARE SECTION;
-- populate the host arrays
EXEC SQL INSERT INTO EMP (ENAME, EMPNO, SAL)
 VALUES (:emp_name, :emp_number, :salary);
</pre>
<p>The cumulative number of rows inserted can be found in SQLERRD(3).</p>
<p>Although functionally equivalent to the following statement, the <code>INSERT</code> statement in the last example is much more efficient because it issues only one call to Oracle:</p>
<pre>FOR i = 1 TO array_dimension
 EXEC SQL INSERT INTO EMP (ENAME, EMPNO, SAL)
 VALUES (:emp_name[i], :emp_number[i], :salary[i]);
ENDFOR;
</pre>
<p>In this imaginary example (imaginary because host variables <span class="italic">cannot</span> be subscripted in a SQL statement), you use a FOR loop to access all array elements in sequential order.</p>
<p class="subhead2"><a id="ZZPRE856"></a><a id="sthref1235"></a>Restrictions</p>
<p>You cannot use an array of pointers in the VALUES clause of an <code>INSERT</code> statement; all array elements must be data items. Also, mixing simple host variables with host arrays in the VALUES clause of an <code>INSERT</code> statement is <span class="italic">not</span> allowed; if any of the host variables is an array, all must be arrays.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE857" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1236"></a>
<h3 class="sect2">Updating with Arrays</h3>
<p><a id="sthref1237"></a>You <a id="sthref1238"></a>can also use host arrays as input variables in an <code>UPDATE</code> statement, as the following example shows:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 emp_number (50) INTEGER;
 salary (50) REAL;
EXEC SQL END DECLARE SECTION;
-- populate the host arrays
EXEC SQL UPDATE EMP SET SAL = :salary WHERE EMPNO = :emp_number;
</pre>
<p>The cumulative number of rows updated can be found in SQLERRD(3). The number does <span class="italic">not</span> include rows processed by an update cascade.</p>
<p>If some elements in the arrays are irrelevant, you can use the FOR clause to limit the number of rows updated.</p>
<p>The last example showed a typical update using a unique key (<span class="italic">emp_number</span>). Each array element qualified just one row for updating. In the following example, each array element qualifies multiple rows:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 job_title (10) CHARACTER(10);
 commission (50) REAL;
EXEC SQL END DECLARE SECTION;
-- populate the host arrays
EXEC SQL UPDATE EMP SET COMM = :commission WHERE JOB = :job_title;
</pre>
<p><span class="bold"><a id="sthref1239"></a>Restrictions:</span> Mixing simple host variables with host arrays in the <code>SET</code> or <code>WHERE</code> clause of an <code>UPDATE</code> statement is <span class="italic">not</span> allowed. If any of the host variables is an array, all must be arrays. Furthermore, if you use a host array in the SET clause, you <span class="italic">must</span> use one in the <code>WHERE</code> clause. However, their dimensions and datatypes need not match.</p>
<p>You cannot use host arrays with the <code>CURRENT</code> OF clause in an UPDATE statement. For an alternative, refer to <a href="#BGBCADBJ">Mimicking the CURRENT OF Clause</a>.</p>
<p><a href="#BGBCJHCH">Table 9-2</a> shows which uses of host arrays are valid in an <code>UPDATE</code> statement:</p>
<div id="ZZPRE858" class="tblformal">
<p class="titleintable"><a id="sthref1240"></a><a id="BGBCJHCH"></a>Table 9-2 Valid Host Arrays for UPDATE</p>
<table class="cellalignment3250" title="Valid Host Arrays for UPDATE" summary="arrays valid in an update statement" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t3">SET Clause</th>
<th class="cellalignment3246" id="r1c2-t3">WHERE Clause</th>
<th class="cellalignment3246" id="r1c3-t3">Valid?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t3" headers="r1c1-t3">
<p>array</p>
</td>
<td class="cellalignment3247" headers="r2c1-t3 r1c2-t3">
<p>array</p>
</td>
<td class="cellalignment3247" headers="r2c1-t3 r1c3-t3">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t3" headers="r1c1-t3">
<p>scalar</p>
</td>
<td class="cellalignment3247" headers="r3c1-t3 r1c2-t3">
<p>scalar</p>
</td>
<td class="cellalignment3247" headers="r3c1-t3 r1c3-t3">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r4c1-t3" headers="r1c1-t3">
<p>array</p>
</td>
<td class="cellalignment3247" headers="r4c1-t3 r1c2-t3">
<p>scalar</p>
</td>
<td class="cellalignment3247" headers="r4c1-t3 r1c3-t3">
<p>no</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r5c1-t3" headers="r1c1-t3">
<p>scalar</p>
</td>
<td class="cellalignment3247" headers="r5c1-t3 r1c2-t3">
<p>array</p>
</td>
<td class="cellalignment3247" headers="r5c1-t3 r1c3-t3">
<p>no</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div id="ZZPRE859" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1241"></a>
<h3 class="sect2">Deleting with Arrays</h3>
<p><a id="sthref1242"></a>You can also use host arrays as input variables in a <code>DELETE</code> statement. It is like executing the <code>DELETE</code> statement repeatedly using successive elements of the host array in the <code>WHERE</code> clause. Thus, each execution might delete zero, one, or more rows from the table. An example of deleting with host arrays follows:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 ...
 emp_number (50) INTEGER;
 EXEC SQL END DECLARE SECTION;
-- populate the host array
EXEC SQL DELETE FROM EMP WHERE EMPNO = :emp_number;
</pre>
<p>The cumulative number of rows deleted can be found in SQLERRD(3). That number does <span class="italic">not</span> include rows processed by a delete cascade.</p>
<p>The last example showed a typical delete using a unique key (<span class="italic">emp_number</span>). Each array element qualified just one row for deletion. In the following example, each array element qualifies multiple rows:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 ...
 job_title (10) CHARACTER(10);
EXEC SQL END DECLARE SECTION;
-- populate the host array
EXEC SQL DELETE FROM EMP WHERE JOB = :job_title;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE860" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1243"></a>
<h3 class="sect2">Restrictions</h3>
<p>Mixing simple host variables with host arrays in the <code>WHERE</code> clause of a <code>DELETE</code> statement is <span class="italic">not</span> allowed; if any of the host variables is an array, all must be arrays. Also, you cannot use host arrays with the <code>CURRENT</code> <code>OF</code> clause in a <code>DELETE</code> statement. For an alternative, refer to <a href="#BGBCADBJ">&#34;Mimicking the CURRENT OF Clause&#34;</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBIIFHB"></a>
<div id="ZZPRE861" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Indicator Arrays</h2>
<p>You use indicator arrays to assign nulls to input host arrays and to detect null or truncated values in output host arrays. The following example shows how to insert with indicator arrays:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 emp_number (50) INTEGER;
 dept_number (50) INTEGER;
 commission (50) REAL;
 ind_comm (50) SMALLINT; -- indicator array
EXEC SQL END DECLARE SECTION;
-- populate the host arrays
-- populate the indicator array; to insert a null into
-- the COMM column, assign -1 to the appropriate element in
-- the indicator array
EXEC SQL INSERT INTO EMP (EMPNO, DEPTNO, COMM)
 VALUES (:emp_number, :dept_number, :commission:ind_comm);
</pre>
<p>The dimension of the indicator array cannot be smaller than the dimension of the host array.</p>
</div>
<!-- class="sect1" -->
<a id="BGBBJGBA"></a>
<div id="ZZPRE862" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the FOR Clause</h2>
<p>You can use the optional FOR clause to set the number of array elements processed by any of the following SQL statements:</p>
<ul>
<li>
<p><code>DELETE</code></p>
</li>
<li>
<p><code>EXECUTE</code></p>
</li>
<li>
<p><code>FETCH</code></p>
</li>
<li>
<p><code>INSERT</code></p>
</li>
<li>
<p><code>OPEN</code></p>
</li>
<li>
<p><code>UPDATE</code></p>
</li>
</ul>
<p><a id="sthref1244"></a>The <code><a id="sthref1245"></a>FOR</code> clause is especially useful in <code>UPDATE</code>, <code>INSERT</code>, and <code>DELETE</code> statements. With these statements, you might not want to use the entire array. The <code>FOR</code> clause lets you limit the elements used to just the number you need, as the following <a id="sthref1246"></a>example shows:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 emp_name (100) CHARACTER(20);
 salary (100) REAL;
 rows_to_insert INTEGER;
EXEC SQL END DECLARE SECTION;
-- populate the host arrays
set rows_to_insert = 25; -- set FOR-clause variable
EXEC SQL FOR :rows_to_insert -- will process only 25 rows
 INSERT INTO EMP (ENAME, SAL)
 VALUES (:emp_name, :salary);
</pre>
<p>The <code>FOR</code> clause must use an integer host variable to count array elements. For example, the following statement is illegal:</p>
<pre>EXEC SQL FOR 25 -- illegal
 INSERT INTO EMP (ENAME, EMPNO, SAL)
 VALUES (:emp_name, :emp_number, :salary);
</pre>
<p><a id="sthref1247"></a>The <code>FOR</code>-clause variable specifies the number of array elements to be processed. Make sure the number does not exceed the smallest array dimension. Also, the number must be positive. If it is negative or zero, no rows are processed.</p>
<div id="ZZPRE863" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1248"></a>
<h3 class="sect2">Restrictions</h3>
<p><a id="sthref1249"></a>Two restrictions keep <code>FOR</code> clause semantics clear.: You cannot use the FOR clause in a <code>SELECT</code> statement or with the <code>CURRENT</code> <code>OF</code> clause.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE864" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1250"></a>
<h3 class="sect2">In a SELECT Statement</h3>
<p>If you use the <code>FOR</code> clause in a <code>SELECT</code> statement, you get the following error message:</p>
<pre>PCC-E-0056: FOR clause not allowed on SELECT statement at ...
</pre>
<p>The <code>FOR</code> clause is not allowed in <code>SELECT</code> statements because its meaning is unclear. Does it mean &#34;execute this <code>SELECT</code> statement <span class="italic">n</span> times&#34;? Or, does it mean &#34;execute this <code>SELECT</code> statement once, but return <span class="italic">n</span> rows&#34;? The problem in the former case is that each execution might return multiple rows. In the latter case, it is better to declare a cursor and use the <code>FOR</code> clause in a <code>FETCH</code> statement, as follows:</p>
<pre>EXEC SQL FOR :limit FETCH emp_cursor INTO ...
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE865" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1251"></a>
<h3 class="sect2">With the CURRENT OF Clause</h3>
<p>You can use the <code>CURRENT OF</code> clause in an <code>UPDATE</code> or <code>DELETE</code> statement to refer to the latest row returned by a <code>FETCH</code> statement, as the following example shows:</p>
<pre>EXEC SQL DECLARE emp_cursor CURSOR FOR
 SELECT ENAME, SAL FROM EMP WHERE EMPNO = :emp_number;
...
EXEC SQL OPEN emp_cursor;
...
EXEC SQL FETCH emp_cursor INTO :emp_name, :salary;
...
EXEC SQL UPDATE EMP SET SAL = :new_salary
 WHERE CURRENT OF emp_cursor;
</pre>
<p>However, you cannot use the FOR clause with the <code>CURRENT</code> <code>OF</code> clause. The following statements are invalid because the only logical value of <span class="italic">limit</span> is 1 (you can only update or delete the current row once):</p>
<pre>EXEC SQL FOR :limit UPDATE EMP SET SAL = :new_salary
 WHERE CURRENT OF emp_cursor;
...
EXEC SQL FOR :limit DELETE FROM EMP
 WHERE CURRENT OF emp_cursor;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBGIHDI"></a>
<div id="ZZPRE866" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the <a id="sthref1252"></a>WHERE Clause</h2>
<p><a id="sthref1253"></a>Oracle treats a SQL statement containing host arrays of dimension <span class="italic">n</span> like the same SQL statement executed <span class="italic">n</span> times with <span class="italic">n</span> different scalar variables (the individual array elements). The precompiler issues the following error message only when such treatment is ambiguous:</p>
<pre>PCC-S-0055: Array &lt;name&gt; not allowed as bind variable at ...
</pre>
<p>For example, assuming the declarations</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 mgr_number (50) INTEGER;
 job_title (50) CHARACTER(20);
EXEC SQL END DECLARE SECTION;
</pre>
<p>it would be ambiguous if the statement</p>
<pre>EXEC SQL SELECT MGR INTO :mgr_number FROM EMP
 WHERE JOB = :job_title;
</pre>
<p>were treated like the imaginary statement</p>
<pre>FOR i = 1 TO 50
 SELECT MGR INTO :mgr_number[i] FROM EMP
 WHERE JOB = :job_title[i];
ENDFOR;
</pre>
<p>because multiple rows might meet the <code>WHERE</code>-clause search condition, but only one output variable is available to receive data. Therefore, an error message is issued.</p>
<p>However, it would not be ambiguous if the statement</p>
<pre>EXEC SQL UPDATE EMP SET MGR = :mgr_number
 WHERE EMPNO IN (SELECT EMPNO FROM EMP WHERE JOB = :job_title);
</pre>
<p>were treated like the imaginary statement</p>
<pre>FOR i = 1 TO 50
 UPDATE EMP SET MGR = :mgr_number[i]
 WHERE EMPNO IN
 (SELECT EMPNO FROM EMP WHERE JOB = :job_title[i]);
ENDFOR;
</pre>
<p>because there is a <span class="italic">mgr_number</span> in the <code>SET</code> clause for each row matching <span class="italic">job_title</span> in the <code>WHERE</code> clause, even if each <span class="italic">job_title</span> matches multiple rows. All rows matching each <span class="italic">job_title</span> can be <code>SET</code> to the same <span class="italic">mgr_number</span>. So, no error message is issued.</p>
</div>
<!-- class="sect1" -->
<a id="BGBCADBJ"></a>
<div id="ZZPRE867" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Mimicking the CURRENT OF Clause</h2>
<p><a id="sthref1254"></a>You use the <code>CURRENT OF</code> <span class="italic">cursor</span> clause in a <code>DELETE</code> or <code>UPDATE</code> statement to refer to the latest row fetched from the cursor. However, you cannot use <code>CURRENT OF</code> with host arrays. Instead, select the <code><a id="sthref1255"></a>ROWID</code> of each row, then use that value to identify the current row during the update or delete. An example follows:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 emp_name (25) CHARACTER(20);
 job_title (25) CHARACTER(15);
 old_title (25) CHARACTER(15);
 row_id (25) CHARACTER(18);
EXEC SQL END DECLARE SECTION;
...
EXEC SQL DECLARE emp_cursor CURSOR FOR
 SELECT ENAME, JOB, ROWID FROM EMP;
...
EXEC SQL OPEN emp_cursor;
EXEC SQL WHENEVER NOT FOUND GOTO <span class="bold">...</span>
...
LOOP
 EXEC SQL FETCH emp_cursor
 INTO :emp_name, :job_title, :row_id;
 ...
 EXEC SQL DELETE FROM EMP
 WHERE JOB = :old_title AND ROWID = :row_id;
 EXEC SQL COMMIT WORK;
ENDLOOP;
</pre>
<p>However, the fetched rows are <span class="italic">not</span> locked because no <code>FOR UPDATE OF</code> clause is used. So, you might get inconsistent results if another user changes a row after you read it but before you delete it.</p>
</div>
<!-- class="sect1" -->
<a id="BGBFJAEJ"></a>
<div id="ZZPRE868" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1256"></a>Using <a id="sthref1257"></a><a id="sthref1258"></a>SQLERRD(3)</h2>
<p><a id="sthref1259"></a>For<a id="sthref1260"></a> <code>INSERT<a id="sthref1261"></a></code>, <code>UPDATE</code>, <code>DELETE</code>, and <code>SELECT</code> <code>INTO</code> statements, SQLERRD(3) records the number of rows processed. For <a id="sthref1262"></a><code>FETCH</code> statements, it records the cumulative sum of rows processed.</p>
<p>When using host arrays with <code>FETCH</code>, to find the number of rows returned by the most recent iteration, subtract the current value of SQLERRD(3) from its previous value (stored in another variable). In the following example, you determine the number of rows returned by the most recent fetch:</p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 emp_number (100) INTEGER;
 emp_name (100) CHARACTER(20);
EXEC SQL END DECLARE SECTION;
...
 rows_to fetch INTEGER;
 rows_before INTEGER;
 rows_this_time INTEGER;
...
EXEC SQL DECLARE emp_cursor CURSOR FOR
 SELECT EMPNO, ENAME
 FROM EMP
 WHERE DEPTNO = 30;
EXEC SQL OPEN emp_cursor;
EXEC SQL WHENEVER NOT FOUND CONTINUE;
...
-- initialize loop variables
set rows_to_fetch = 20; -- number of rows in each &#34;batch&#34;
set rows_before = 0; -- previous value of sqlerrd(3)
set rows_this_time = 20;
WHILE rows_this_time = rows_to_fetch
 LOOP
 EXEC SQL FOR :rows_to_fetch
 FETCH emp_cursor
 INTO :emp_number, :emp_name;
 set rows_this_time = sqlca.sqlerrd(3) - rows_before;
 set rows_before = sqlca.sqlerrd(3);
 ENDLOOP;
ENDWHILE;
</pre>
<p>SQLERRD(3) is also useful when an error occurs during an array operation. Processing stops at the row that caused the error, so SQLERRD(3) gives the number of rows processed successfully.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3238">
<tr>
<td class="cellalignment3247">
<table class="cellalignment3243">
<tr>
<td class="cellalignment3242"><a href="ch_eight.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3242"><a href="ch_ten.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3249">
<table class="cellalignment3241">
<tr>
<td class="cellalignment3242"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3242"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3242"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3242"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3242"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3242"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>