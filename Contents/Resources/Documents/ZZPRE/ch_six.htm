<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114757"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Running%20the%20Oracle%20Precompilers"></a><title>Running the Oracle Precompilers</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-06T18:44:39Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Programmer&#39;s Guide to the Oracle Precompilers"/>
<meta name="dcterms.identifier" content="E53283-01"/>
<meta name="dcterms.isVersionOf" content="ZZPRE"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="ch_five.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ch_seven.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53283-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/20</span> <!-- End Header -->
<div id="ZZPRE325" class="chapter"><a id="BABDDACC"></a>
<h1 class="chapter"><span class="secnum">6</span> Running the Oracle Precompilers</h1>
<p>This chapter contains the following:</p>
<ul>
<li>
<p><a href="#CACEEDCC">The Precompiler Command</a></p>
</li>
<li>
<p><a href="#CACBDDII">What Occurs during Precompilation?</a></p>
</li>
<li>
<p><a href="#CACJAGHI">Precompiler Options</a></p>
</li>
<li>
<p><a href="#CACBDIBF">Entering Options</a></p>
</li>
<li>
<p><a href="#CACIFCFA">Scope of Options</a></p>
</li>
<li>
<p><a href="#CACBDBBD">Quick Reference</a></p>
</li>
<li>
<p><a href="#CACJBGFE">Using the Precompiler Options</a></p>
</li>
<li>
<p><a href="#CACHGBFI">Conditional Precompilations</a></p>
</li>
<li>
<p><a href="#CACFGFJE">Separate Precompilations</a></p>
</li>
<li>
<p><a href="#CACHAFHE">Compiling and Linking</a></p>
</li>
</ul>
<p>This chapter details the requirements for running the Oracle Precompilers. You learn what occurs during precompilation, how to issue the precompiler command, how to specify the many useful precompiler options, and how to do conditional and separate precompilations.</p>
<a id="CACEEDCC"></a>
<div id="ZZPRE326" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">The <a id="sthref592"></a>Precompiler Command</h2>
<p>To run an <a id="sthref593"></a>Oracle Precompiler, you issue one of the language-specific commands shown in <a href="#CACDJBEI">Table 6-1</a>.</p>
<div id="ZZPRE327" class="tblformal">
<p class="titleintable"><a id="sthref594"></a><a id="CACDJBEI"></a>Table 6-1 Precompiler Run Commands</p>
<table class="cellalignment3250" title="Precompiler Run Commands" summary="precompiler command" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t2">Host Language</th>
<th class="cellalignment3246" id="r1c2-t2">Precompiler Command</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t2" headers="r1c1-t2">
<p>COBOL</p>
</td>
<td class="cellalignment3247" headers="r2c1-t2 r1c2-t2">
<p><code>procob</code></p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t2" headers="r1c1-t2">
<p>FORTRAN</p>
</td>
<td class="cellalignment3247" headers="r3c1-t2 r1c2-t2">
<p><code>profor</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>The location of the precompiler differs from system to system. Typically, your system manager or DBA defines environment variables, logicals, or aliases or uses other operating system-specific means to make the precompiler executable accessible.</p>
<p><a id="sthref595"></a>The INAME option specifies the source file to be precompiled. For example, the Pro*COBOL command</p>
<pre>procob INAME=test
</pre>
<p>precompiles the file <span class="italic">test.pco</span> in the current directory, since the precompiler assumes that the filename extension is <span class="italic">.pco</span>. You need not use a<a id="sthref596"></a> file extension when specifying INAME unless the extension is nonstandard.</p>
<p>Input and output filenames need not be accompanied by their respective option names, INAME and ONAME. When the option names are not specified, the precompiler assumes that the first filename specified on the command line is the input filename and that the second filename is the output filename.</p>
<p>Thus, the Pro*FORTRAN command</p>
<pre>profor MODE=ANSI myfile.pfo DBMS=V7 myfile.f
</pre>
<p>is equivalent to</p>
<pre>profor MODE=ANSI INAME=myfile.pfo DBMS=V7 ONAME=myfile.f
</pre>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
Option names and option values that do not name specific operating system objects, such as filenames, are not case-sensitive. In the examples in this guide, option names are written in upper case, and option values are usually in lowercase. Filenames, including the name of the precompiler executable itself, always follow the case conventions used by the operating system on which it is executed.</div>
</div>
<!-- class="sect1" -->
<a id="CACBDDII"></a>
<div id="ZZPRE328" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">What Occurs during <a id="sthref597"></a>Precompilation?</h2>
<p>During precompilation, an Oracle Precompiler generates host-language code that replaces the SQL statements embedded in your host program. The generated code includes data structures that contain the datatype, length, and address of each host variable, and other information required by the Oracle run-time library, SQLLIB. The generated code also contains the calls to SQLLIB routines that perform the embedded SQL operations.</p>
<p>The generated code also includes calls to the SQLLIB routines that perform embedded SQL operations. Note that the precompiler does <span class="italic">not</span> generate calls to Oracle Call Interface (OCI) routines.</p>
<p>The precompiler does <span class="italic">not</span> generate calls to Oracle Call Interface (OCI) routines.</p>
<p>The precompiler can issue warnings and error messages. These messages have the prefix PCC-, and are described in <span class="italic">Oracle Database Error Messages</span>.</p>
</div>
<!-- class="sect1" -->
<a id="CACJAGHI"></a>
<div id="ZZPRE329" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref598"></a>Precompiler Options</h2>
<p><a id="sthref599"></a>Many useful options are available at precompile time. They let you control how resources are used, how errors are reported, how input and output are formatted, and how cursors are managed. To specify a precompiler option, use the following syntax:</p>
<pre>&lt;option_name&gt;=&lt;value&gt;
</pre>
<p>The <span class="italic">value</span> of an option is a string literal, which represents text or numeric values. For example, for the option</p>
<pre>... INAME=my_test
</pre>
<p>the value is a string literal that specifies a filename, but for the option</p>
<pre>... MAXOPENCURSORS=20
</pre>
<p>the value is numeric.</p>
<p>Some options take Boolean values, which you can represent with the strings YES or NO, TRUE or FALSE, or with the integer literals 1 or 0, respectively. For example, the option</p>
<pre>... SELECT_ERROR=YES
</pre>
<p>is equivalent to</p>
<pre>... SELECT_ERROR=TRUE
</pre>
<p>or</p>
<pre>... SELECT_ERROR=1
</pre>
<p>The option value is always separated from the option name by an equal sign, leave no whitespace around the equal sign, because spaces delimit individual options. For example, you might specify the option <code>AUTO_CONNECT</code> on the command line as follows:</p>
<pre>... AUTO_CONNECT=YES
</pre>
<p><a id="sthref600"></a>You can abbreviate the names of options if the abbreviation is unambiguous. For example, you cannot use the abbreviation MAX because it might stand for MAXLITERAL or MAXOPENCURSORS.</p>
<p><a id="sthref601"></a>A handy reference to the precompiler options is available online. To see the online display, enter the precompiler command with no arguments at your operating system prompt. The display gives the name, syntax, default value, and purpose of each option. Options marked with an asterisk (*) can be specified inline and on the command line.</p>
<div id="ZZPRE330" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref602"></a>
<h3 class="sect2">Default Values</h3>
<p>Many of the options have default values, which are determined by:</p>
<ul>
<li>
<p>A value built in to the precompiler</p>
</li>
<li>
<p>A value set in the <span class="italic">system</span> configuration file</p>
</li>
<li>
<p>A value set in a <span class="italic">user</span> configuration file</p>
</li>
<li>
<p>A value set in an inline specification</p>
</li>
</ul>
<p>For example, the option MAXOPENCURSORS specifies the maximum number of cached open cursors. The built-in precompiler default value for this option is 10. However, if MAXOPENCURSORS=32 is specified in the system configuration file, the default becomes 32. The user configuration file could set it to yet another value, which then overrides the system configuration value.</p>
<p>Then, if this option is set on the command line, the new command-line value takes precedence. Finally, an inline specification takes precedence over all preceding defaults. For more information, refer to <a href="#CACGCDCE">Configuration Files</a>&#34;.</p>
</div>
<!-- class="sect2" -->
<a id="CACDGGFI"></a>
<div id="ZZPRE331" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Determining Current Values</h3>
<p>You can interactively determine the current value for one or more options by using a question mark on the command line. For example, if you issue the Pro*COBOL command</p>
<pre>procob ?
</pre>
<p>the complete option set, along with current values, is displayed on your terminal. In this case, the values are those built into the precompiler, overridden by any values in the system configuration file. But if you issue the following command</p>
<pre>procob CONFIG=my_config_file.cfg ?
</pre>
<p>and there is a file named <span class="italic">my_config_file.cfg</span> in the current directory, the options from the <span class="italic">my_config_file.cfg</span> file are listed with the other default values. Values in the user configuration file supply missing values, and they supersede values built into the precompiler or values specified in the system configuration file.</p>
<p>You can also determine the current value of a single option by simply specifying the option name followed by &#34;=?&#34; as in</p>
<pre>procob MAXOPENCURSORS=?
</pre>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
: With some operating systems, the &#34;?&#34; may need to be preceded by an &#34;escape&#34; character, such as a back-slash (\). For example, instead of &#34;procob ?,&#34; you might need to use &#34;procob \?&#34; to list the Pro*COBOL option settings.</div>
</div>
<!-- class="sect2" -->
<div id="ZZPRE332" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref603"></a>
<h3 class="sect2">Case Sensitivity</h3>
<p>In general, you can use either uppercase or lowercase for command-line option names and values. However, if your operating system is case-sensitive, like UNIX, you must specify filename values, including the name of the precompiler executable, using the correct combination of upper and lowercase letters.</p>
</div>
<!-- class="sect2" -->
<a id="CACGCDCE"></a>
<div id="ZZPRE333" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuration Files</h3>
<p>A configuration file is a text file that contains precompiler options. Each record (line) in the file contains one option, with its associated value or values. For example, a configuration file might contain the lines</p>
<pre>FIPS=YES
MODE=ANSI
</pre>
<p>to set defaults for the <code>FIPS</code> and <code>MODE</code> options.</p>
<p>There is a single system configuration file for each system. The name of the system configuration file is precompiler-specific and is shown in <a href="#CACHHHCJ">Table 6-2</a>.</p>
<div id="ZZPRE334" class="tblformal">
<p class="titleintable"><a id="sthref604"></a><a id="CACHHHCJ"></a>Table 6-2 System Configuration Files</p>
<table class="cellalignment3250" title="System Configuration Files" summary="precompiler options" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t5">Precompiler</th>
<th class="cellalignment3246" id="r1c2-t5">Configuration File</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t5" headers="r1c1-t5">
<p>Pro*COBOL</p>
</td>
<td class="cellalignment3247" headers="r2c1-t5 r1c2-t5">
<p><code>pcccob.cfg</code></p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t5" headers="r1c1-t5">
<p>Pro*FORTRAN</p>
</td>
<td class="cellalignment3247" headers="r3c1-t5 r1c2-t5">
<p><code>pccfor.cfg</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>The location of the file is operating system-specific. On most UNIX systems, the Pro*COBOL configuration file is usually located in the <span class="italic">$ORACLE_HOME/procob</span> directory, and the Pro*FORTRAN equivalent is in the <span class="italic">$ORACLE_HOME/profor</span> directory, where <span class="italic">$ORACLE_HOME</span> is the environment variable for the database software.</p>
<p>Each precompiler user can have one or more user configuration files. The name of the configuration file must be specified using the <code>CONFIG</code> command-line option. For more information, refer to <a href="#CACDGGFI">Determining Current Values</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
You cannot nest configuration files. CONFIG is not a valid option inside a configuration file.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACBDIBF"></a>
<div id="ZZPRE335" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Entering <a id="sthref605"></a>Options</h2>
<p>All the precompiler options can be entered on the command line or (except <code>CONFIG</code>) from a configuration file. Many options can also be entered inline. During a given run, the precompiler can accept options from all three sources.</p>
<div id="ZZPRE336" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref606"></a>
<h3 class="sect2"><a id="sthref607"></a>On the Command Line</h3>
<p>You enter precompiler options on the command line using the following <a id="sthref608"></a>syntax:</p>
<pre>... [option_name=value] [option_name=value] ...
</pre>
<p>Separate each option with one or more spaces. For example, you might enter the following options:</p>
<pre>... ERRORS=no LTYPE=short
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE337" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref609"></a>
<h3 class="sect2"><a id="sthref610"></a>Inline</h3>
<p><a id="sthref611"></a>You enter options inline by coding <code>EXEC ORACLE</code> statements, using the following syntax<a id="sthref612"></a>:</p>
<pre>EXEC ORACLE OPTION (option_name=value);
</pre>
<p>For example, you might code the following statement:</p>
<pre>EXEC ORACLE OPTION (RELEASE_CURSOR=YES);
</pre>
<p>An option entered inline overrides the same option entered on the command line.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE338" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref613"></a>
<h3 class="sect2">Advantages</h3>
<p>The <code>EXEC ORACLE</code> feature is especially useful for changing option values during precompilation. For example, you might want to change the <code>HOLD_CURSOR</code> and <code>RELEASE_CURSOR</code> values on a statement-by-statement basis. <a href="appc.htm#BABCHGDI">Appendix C</a> shows you how to use inline options to optimize run-time performance.</p>
<p>Specifying options inline is also helpful if your operating system limits the number of characters you can enter on the command line, and you can store inline options in configuration files, which are discussed in the next section.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE339" class="sect2"><a id="sthref614"></a>
<h3 class="sect2"><a id="sthref615"></a>Scope of EXEC ORACLE</h3>
<p><a id="sthref616"></a>An EXEC ORACLE statement stays in effect until textually superseded by another EXEC ORACLE statement specifying the same option. In the following example, <code>HOLD_CURSOR=NO</code> stays in effect until superseded by <code>HOLD_CURSOR=YES:</code></p>
<pre>EXEC SQL BEGIN DECLARE SECTION;
 emp_name CHARACTER(20);
 emp_number INTEGER;
 salary REAL;
 dept_number INTEGER;
EXEC SQL END DECLARE SECTION;
...
EXEC SQL WHENEVER NOT FOUND GOTO no_more;
EXEC ORACLE OPTION (HOLD_CURSOR=NO);
EXEC SQL DECLARE emp_cursor CURSOR FOR
 SELECT EMPNO, DEPTNO FROM EMP;
EXEC SQL OPEN emp_cursor;
display &#39;Employee Number Dept&#39;;
display &#39;--------------- ----&#39;;
LOOP
 EXEC SQL FETCH emp_cursor INTO :emp_number, :dept_number; 
 display emp_number, dept_number;
ENDLOOP;
no_more:
 EXEC SQL WHENEVER NOT FOUND CONTINUE; 
 LOOP
 display &#39;Employee number? &#39;;
 read emp_number;
 IF emp_number = 0 THEN
 exit loop;
 EXEC ORACLE OPTION (HOLD_CURSOR=YES);
 EXEC SQL SELECT ENAME, SAL
 INTO :emp_name, :salary
 FROM EMP
 WHERE EMPNO = :emp_number; 
 display &#39;Salary for &#39;, emp_name, &#39; is &#39;, salary;
 ENDLOOP;
...
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE340" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref617"></a>
<h3 class="sect2"><a id="sthref618"></a>From a Configuration File</h3>
<p>The Oracle Precompilers can use a configuration file containing preset command-line options. By default, a text file called the <span class="italic">system configuration file</span> is used. However, you <a id="sthref619"></a>can specify any of several alternative files, called <span class="italic">user configuration files</span>, on the command line.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE341" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref620"></a>
<h3 class="sect2">Advantages</h3>
<p><a id="sthref621"></a>Configuration files offer several advantages. The system configuration file lets you standardize a set of options for all projects. User configuration files let you customize a set of options for each project. With configuration files, you need not enter long strings of options on the command line. Also, if your system limits the length of a command line, configuration files let you specify more options than the command line can hold.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE342" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref622"></a>
<h3 class="sect2">Using Configuration Files</h3>
<p>Each record (line) in a configuration file holds one command-line option. For example, a configuration file might contain the following lines, which set defaults for the <code>FIPS</code>, <code>MODE</code>, and SQLCHECK options:</p>
<pre>FIPS=YES
MODE=ANSI
SQLCHECK=SEMANTICS
</pre>
<p>Each Oracle Precompiler can have its own system configuration file. The name and location of the file are language- and system-specific. If the file is not found, you get a warning but the precompiler continues processing.</p>
<p>There is only one system configuration file for a given language, but you can create any number of user configuration files. You use the new command-line option <a id="sthref623"></a><a id="sthref624"></a>CONFIG to specify the name and location of a particular user configuration file, as follows:</p>
<pre>... CONFIG=&lt;filename&gt;
</pre>
<p>You cannot nest configuration files. Therefore, you cannot specify the <code>CONFIG</code> option in a configuration file. Also, you cannot specify <code>CONFIG</code> inline.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE343" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref625"></a>
<h3 class="sect2">Setting Option Values</h3>
<p>Many precompiler run-time options have built-in default values, which can be reset in a configuration file or on the command line. Command-line settings override user configuration file settings, which override system configuration file settings.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACIFCFA"></a>
<div id="ZZPRE344" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref626"></a>Scope of Options</h2>
<p><a id="sthref627"></a>A <a id="sthref628"></a>precompilation unit is a file containing host-language code and one or more embedded SQL statements. The options specified for a given precompilation unit affect only that unit; they have no effect on other units.</p>
<p>For example, if you specify <code>HOLD_CURSOR=YES</code> and <code>RELEASE_CURSOR=YES</code> for unit A but not unit B, SQL statements in unit A run with these <code>HOLD_CURSOR</code> and <code>RELEASE_CURSOR</code> values, but SQL statements in unit B run with the default values. However, the MAXOPENCURSORS setting that is in effect when you connect to Oracle stays in effect for the life of that connection.</p>
<p><a id="sthref629"></a>The scope of an inline option is positional, not logical. That is, an inline option affects SQL statements that follow it in the source file, not in the flow of program logic. An option setting stays in effect until the end-of-file unless you re-specify the option.</p>
</div>
<!-- class="sect1" -->
<a id="CACBDBBD"></a>
<div id="ZZPRE345" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Quick Reference</h2>
<p><a href="#CACJEHID">Table 6-3</a> is a quick reference to the precompiler options. The options marked with an asterisk can be entered inline.</p>
<p>Another handy reference is available online. To see the online display, just enter the <a id="sthref630"></a>precompiler command without options at your operating system prompt. The display provides the name, syntax, default value, and purpose of each option.</p>
<p>There are some platform-specific options. For example, on byte-swapped platforms that use MicroFocus COBOL, the option COMP5 governs the use of certain COMPUTATIONAL items. Check your system-specific Oracle manuals.</p>
<div id="ZZPRE346" class="tblformal">
<p class="titleintable"><a id="sthref631"></a><a id="CACJEHID"></a>Table 6-3 Precompiler Options Quick Reference</p>
<table class="cellalignment3250" title="Precompiler Options Quick Reference" summary="quick ref synrtax" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t7">Syntax</th>
<th class="cellalignment3246" id="r1c2-t7">Default</th>
<th class="cellalignment3246" id="r1c3-t7">Specifies ...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t7" headers="r1c1-t7">
<p>ASACC={YES|NO}</p>
</td>
<td class="cellalignment3247" headers="r2c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r2c1-t7 r1c3-t7">
<p>carriage control for listing</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t7" headers="r1c1-t7">
<p>ASSUME_SQLCODE={YES|NO}</p>
</td>
<td class="cellalignment3247" headers="r3c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r3c1-t7 r1c3-t7">
<p>precompiler presumes that SQLCODE is declared</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r4c1-t7" headers="r1c1-t7">
<p>AUTO_CONNECT={YES|NO}</p>
</td>
<td class="cellalignment3247" headers="r4c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r4c1-t7 r1c3-t7">
<p>automatic logon</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r5c1-t7" headers="r1c1-t7">
<p>CHAR_MAP={VARCHAR2 | CHARZ | STRING | CHARF} *</p>
</td>
<td class="cellalignment3247" headers="r5c1-t7 r1c2-t7">
<p>CHARZ</p>
</td>
<td class="cellalignment3247" headers="r5c1-t7 r1c3-t7">
<p>mapping of character arrays and strings</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r6c1-t7" headers="r1c1-t7">
<p>CHARSET_PICN={NCHAR_CHARSET | DB_CHARSET }</p>
</td>
<td class="cellalignment3247" headers="r6c1-t7 r1c2-t7">
<p>NCHAR_CHARSET</p>
</td>
<td class="cellalignment3247" headers="r6c1-t7 r1c3-t7">
<p>the character set form used by PIC N variables</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r7c1-t7" headers="r1c1-t7">
<p>CHARSET_PICX={NCHAR_CHARSET | DB_CHARSET }</p>
</td>
<td class="cellalignment3247" headers="r7c1-t7 r1c2-t7">
<p>DB_CHARSET</p>
</td>
<td class="cellalignment3247" headers="r7c1-t7 r1c3-t7">
<p>the character set form used by PIC X variables</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r8c1-t7" headers="r1c1-t7">
<p>CINCR</p>
</td>
<td class="cellalignment3247" headers="r8c1-t7 r1c2-t7">
<p>1</p>
</td>
<td class="cellalignment3247" headers="r8c1-t7 r1c3-t7">
<p>CINCR value for connection pool. Allows the application to set the next increment for physical connections to be opened to the database, if the current number of physical connections is less than CMAX</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r9c1-t7" headers="r1c1-t7">
<p>CLOSE_ON_COMMIT={YES | NO}</p>
</td>
<td class="cellalignment3247" headers="r9c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r9c1-t7 r1c3-t7">
<p>close all cursors on COMMIT</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r10c1-t7" headers="r1c1-t7">
<p>CMAX</p>
</td>
<td class="cellalignment3247" headers="r10c1-t7 r1c2-t7">
<p>100</p>
</td>
<td class="cellalignment3247" headers="r10c1-t7 r1c3-t7">
<p>specifies the maximum number of physical connections that can be opened for the database</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r11c1-t7" headers="r1c1-t7">
<p>CMIN</p>
</td>
<td class="cellalignment3247" headers="r11c1-t7 r1c2-t7">
<p>2</p>
</td>
<td class="cellalignment3247" headers="r11c1-t7 r1c3-t7">
<p>specifies the minimum number of physical connections in the connection pool.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r12c1-t7" headers="r1c1-t7">
<p>CNOWAIT</p>
</td>
<td class="cellalignment3247" headers="r12c1-t7 r1c2-t7">
<p>0 (which means not set)</p>
</td>
<td class="cellalignment3247" headers="r12c1-t7 r1c3-t7">
<p>determines if the application must repeatedly try for a physical connection when all other physical connections in the pool are busy, and the total number of physical connections has already reached its maximum. CNOWAIT Value for connection pool</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r13c1-t7" headers="r1c1-t7">
<p>CODE={ANSI_C | KR_C | CPP}</p>
</td>
<td class="cellalignment3247" headers="r13c1-t7 r1c2-t7">
<p>KR_C</p>
</td>
<td class="cellalignment3247" headers="r13c1-t7 r1c3-t7">
<p>type of C code to be generated</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r14c1-t7" headers="r1c1-t7">
<p>COMMON_NAME=<span class="italic">block_name</span> *</p>
</td>
<td class="cellalignment3247" headers="r14c1-t7 r1c2-t7">&nbsp;</td>
<td class="cellalignment3247" headers="r14c1-t7 r1c3-t7">
<p>name of FORTRAN COMMON blocks</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r15c1-t7" headers="r1c1-t7">
<p>COMMON_PARSER</p>
</td>
<td class="cellalignment3247" headers="r15c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r15c1-t7 r1c3-t7">
<p>parse using Common SQL Front End</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r16c1-t7" headers="r1c1-t7">
<p>COMP5</p>
</td>
<td class="cellalignment3247" headers="r16c1-t7 r1c2-t7">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r16c1-t7 r1c3-t7">
<p>generate COMP-5 rather than COMP variables</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r17c1-t7" headers="r1c1-t7">
<p>COMP_CHARSET={MULTI_BYTE | SINGLE_BYTE}</p>
</td>
<td class="cellalignment3247" headers="r17c1-t7 r1c2-t7">
<p>MULTI_BYTE</p>
</td>
<td class="cellalignment3247" headers="r17c1-t7 r1c3-t7">
<p>the character set type the C/C++ compiler supports.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r18c1-t7" headers="r1c1-t7">
<p>CONFIG=<span class="italic">filename</span></p>
</td>
<td class="cellalignment3247" headers="r18c1-t7 r1c2-t7">&nbsp;</td>
<td class="cellalignment3247" headers="r18c1-t7 r1c3-t7">
<p>name of user configuration file</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r19c1-t7" headers="r1c1-t7">
<p>CPOOL</p>
</td>
<td class="cellalignment3247" headers="r19c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r19c1-t7 r1c3-t7">
<p>support connection pooling. Based on this option, the precompiler generates the appropriate code that directs SQLLIB to enable or disable the connection pool feature</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r20c1-t7" headers="r1c1-t7">
<p>CPP_SUFFIX=extension</p>
</td>
<td class="cellalignment3247" headers="r20c1-t7 r1c2-t7">
<p>*none*</p>
</td>
<td class="cellalignment3247" headers="r20c1-t7 r1c3-t7">
<p>override the default C++ filename extension</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r21c1-t7" headers="r1c1-t7">
<p>CTIMEOUT</p>
</td>
<td class="cellalignment3247" headers="r21c1-t7 r1c2-t7">
<p>0</p>
</td>
<td class="cellalignment3247" headers="r21c1-t7 r1c3-t7">
<p>physical connections that are idle for more than the specified time (in seconds) are terminated to maintain an optimum number of open physical connections</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r22c1-t7" headers="r1c1-t7">
<p>DB2_ARRAY={YES |NO}</p>
</td>
<td class="cellalignment3247" headers="r22c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r22c1-t7 r1c3-t7">
<p>support DB2 array insert/select syntax. Based on this option, the precompiler activates the additional array insert/select syntax</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r23c1-t7" headers="r1c1-t7">
<p>DBMS={NATIVE|V7|V8}</p>
</td>
<td class="cellalignment3247" headers="r23c1-t7 r1c2-t7">
<p>NATIVE</p>
</td>
<td class="cellalignment3247" headers="r23c1-t7 r1c3-t7">
<p>version-specific behavior of Oracle at precompile time</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r24c1-t7" headers="r1c1-t7">
<p>DECLARE_SECTION</p>
</td>
<td class="cellalignment3247" headers="r24c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r24c1-t7 r1c3-t7">
<p>if YES, DECLARE SECTION is required</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r25c1-t7" headers="r1c1-t7">
<p>DEF_SQLCODE={NO | YES}</p>
</td>
<td class="cellalignment3247" headers="r25c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r25c1-t7 r1c3-t7">
<p>controls whether the Pro*C/C++ precompiler generates #define&#39;s for SQLCODE</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r26c1-t7" headers="r1c1-t7">
<p>DEFINE=<span class="italic">symbol</span> *</p>
</td>
<td class="cellalignment3247" headers="r26c1-t7 r1c2-t7">&nbsp;</td>
<td class="cellalignment3247" headers="r26c1-t7 r1c3-t7">
<p>symbol used in conditional precompilation</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r27c1-t7" headers="r1c1-t7">
<p>DURATION={TRANSACTION | SESSION}</p>
</td>
<td class="cellalignment3247" headers="r27c1-t7 r1c2-t7">
<p>TRANSACTION</p>
</td>
<td class="cellalignment3247" headers="r27c1-t7 r1c3-t7">
<p>set pin duration for objects in the cache</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r28c1-t7" headers="r1c1-t7">
<p>DYNAMIC={ANSI | ORACLE}</p>
</td>
<td class="cellalignment3247" headers="r28c1-t7 r1c2-t7">
<p>ORACLE</p>
</td>
<td class="cellalignment3247" headers="r28c1-t7 r1c3-t7">
<p>specify Oracle or ANSI SQL semantics.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r29c1-t7" headers="r1c1-t7">
<p>END_OF_FETCH</p>
</td>
<td class="cellalignment3247" headers="r29c1-t7 r1c2-t7">
<p>1403</p>
</td>
<td class="cellalignment3247" headers="r29c1-t7 r1c3-t7">
<p>end-of-fetch SQLCODE value</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r30c1-t7" headers="r1c1-t7">
<p>ERRORS={YES|NO} *</p>
</td>
<td class="cellalignment3247" headers="r30c1-t7 r1c2-t7">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r30c1-t7 r1c3-t7">
<p>whether errors are sent to the terminal</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r31c1-t7" headers="r1c1-t7">
<p>ERRTYPE=<span class="italic">filename</span></p>
</td>
<td class="cellalignment3247" headers="r31c1-t7 r1c2-t7">
<p>*none*</p>
</td>
<td class="cellalignment3247" headers="r31c1-t7 r1c3-t7">
<p>name of the list file for intype file errors</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r32c1-t7" headers="r1c1-t7">
<p>EVENTS</p>
</td>
<td class="cellalignment3247" headers="r32c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r32c1-t7 r1c3-t7">
<p>support publish-subscribe event notifications</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r33c1-t7" headers="r1c1-t7">
<p>FILE_ID</p>
</td>
<td class="cellalignment3247" headers="r33c1-t7 r1c2-t7">
<p>0</p>
</td>
<td class="cellalignment3247" headers="r33c1-t7 r1c3-t7">
<p>unique numeric identifier for the generated COBOL file</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r34c1-t7" headers="r1c1-t7">
<p>FIPS={YES|NO}*</p>
</td>
<td class="cellalignment3247" headers="r34c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r34c1-t7 r1c3-t7">
<p>whether ANSI/ISO extensions are flagged</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r35c1-t7" headers="r1c1-t7">
<p>FORMAT={ANSI|TERMINAL}</p>
</td>
<td class="cellalignment3247" headers="r35c1-t7 r1c2-t7">
<p>ANSI</p>
</td>
<td class="cellalignment3247" headers="r35c1-t7 r1c3-t7">
<p>format of COBOL or FORTRAN input line</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r36c1-t7" headers="r1c1-t7">
<p>Globalization Support_LOCAL={YES|NO}</p>
</td>
<td class="cellalignment3247" headers="r36c1-t7 r1c2-t7">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r36c1-t7 r1c3-t7">
<p>blank-padding operations to be preformed by SQLLIB</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r37c1-t7" headers="r1c1-t7">
<p>HEADER=<span class="italic">extension</span></p>
</td>
<td class="cellalignment3247" headers="r37c1-t7 r1c2-t7">
<p>*none*</p>
</td>
<td class="cellalignment3247" headers="r37c1-t7 r1c3-t7">
<p>name of the listing file for intype file error messages</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r38c1-t7" headers="r1c1-t7">
<p>HOLD_CURSOR={YES|NO}*</p>
</td>
<td class="cellalignment3247" headers="r38c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r38c1-t7 r1c3-t7">
<p>how cursor cache handles SQL statements</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r39c1-t7" headers="r1c1-t7">
<p>HOST={COBOL|COB74}</p>
</td>
<td class="cellalignment3247" headers="r39c1-t7 r1c2-t7">
<p>COBOL</p>
</td>
<td class="cellalignment3247" headers="r39c1-t7 r1c3-t7">
<p>COBOL version of input file</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r40c1-t7" headers="r1c1-t7">
<p>IMPLICIT_SVPT</p>
</td>
<td class="cellalignment3247" headers="r40c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r40c1-t7 r1c3-t7">
<p>implicit savepoint before buffered insert</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r41c1-t7" headers="r1c1-t7">
<p>[INAME=]<span class="italic">filename</span></p>
</td>
<td class="cellalignment3247" headers="r41c1-t7 r1c2-t7">&nbsp;</td>
<td class="cellalignment3247" headers="r41c1-t7 r1c3-t7">
<p>name of input file</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r42c1-t7" headers="r1c1-t7">
<p>INCLUDE=<span class="italic">path</span>*</p>
</td>
<td class="cellalignment3247" headers="r42c1-t7 r1c2-t7">&nbsp;</td>
<td class="cellalignment3247" headers="r42c1-t7 r1c3-t7">
<p>directory path for INCLUDEd files</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r43c1-t7" headers="r1c1-t7">
<p>INTYPE=<span class="italic">filename</span></p>
</td>
<td class="cellalignment3247" headers="r43c1-t7 r1c2-t7">
<p>*none*</p>
</td>
<td class="cellalignment3247" headers="r43c1-t7 r1c3-t7">
<p>name of the input file for type information</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r44c1-t7" headers="r1c1-t7">
<p>IRECLEN=<span class="italic">integer</span></p>
</td>
<td class="cellalignment3247" headers="r44c1-t7 r1c2-t7">
<p>80</p>
</td>
<td class="cellalignment3247" headers="r44c1-t7 r1c3-t7">
<p>record length of input file</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r45c1-t7" headers="r1c1-t7">
<p>LINES={YES | NO}</p>
</td>
<td class="cellalignment3247" headers="r45c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r45c1-t7 r1c3-t7">
<p>whether #line directives are generated</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r46c1-t7" headers="r1c1-t7">
<p>LITDELIM={APOST|QUOTE} *</p>
</td>
<td class="cellalignment3247" headers="r46c1-t7 r1c2-t7">
<p>QUOTE</p>
</td>
<td class="cellalignment3247" headers="r46c1-t7 r1c3-t7">
<p>delimiter for COBOL strings</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r47c1-t7" headers="r1c1-t7">
<p>LNAME=<span class="italic">filename</span></p>
</td>
<td class="cellalignment3247" headers="r47c1-t7 r1c2-t7">&nbsp;</td>
<td class="cellalignment3247" headers="r47c1-t7 r1c3-t7">
<p>name of listing file</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r48c1-t7" headers="r1c1-t7">
<p>LRECLEN=<span class="italic">integer</span></p>
</td>
<td class="cellalignment3247" headers="r48c1-t7 r1c2-t7">
<p>132</p>
</td>
<td class="cellalignment3247" headers="r48c1-t7 r1c3-t7">
<p>record length of listing file</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r49c1-t7" headers="r1c1-t7">
<p>LTYPE={LONG|SHORT|NONE}</p>
</td>
<td class="cellalignment3247" headers="r49c1-t7 r1c2-t7">
<p>LONG</p>
</td>
<td class="cellalignment3247" headers="r49c1-t7 r1c3-t7">
<p>type of listing</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r50c1-t7" headers="r1c1-t7">
<p>MAXLITERAL=<span class="italic">integer</span> *</p>
</td>
<td class="cellalignment3247" headers="r50c1-t7 r1c2-t7">
<p>platform-specific</p>
</td>
<td class="cellalignment3247" headers="r50c1-t7 r1c3-t7">
<p>maximum length of strings</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r51c1-t7" headers="r1c1-t7">
<p>MAXOPENCURSORS=<span class="italic">integer</span> *</p>
</td>
<td class="cellalignment3247" headers="r51c1-t7 r1c2-t7">
<p>10</p>
</td>
<td class="cellalignment3247" headers="r51c1-t7 r1c3-t7">
<p>maximum number of cursors cached</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r52c1-t7" headers="r1c1-t7">
<p>MAX_ROW_INSERT</p>
</td>
<td class="cellalignment3247" headers="r52c1-t7 r1c2-t7">
<p>0</p>
</td>
<td class="cellalignment3247" headers="r52c1-t7 r1c3-t7">
<p>maximum number of rows to buffer on insert</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r53c1-t7" headers="r1c1-t7">
<p>MODE={ORACLE|ANSI|ANSI14|ANSI13}</p>
</td>
<td class="cellalignment3247" headers="r53c1-t7 r1c2-t7">
<p>ORACLE</p>
</td>
<td class="cellalignment3247" headers="r53c1-t7 r1c3-t7">
<p>compliance with the ANSI/ISO SQL standard</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r54c1-t7" headers="r1c1-t7">
<p>MULTISUBPROG={YES|NO}</p>
</td>
<td class="cellalignment3247" headers="r54c1-t7 r1c2-t7">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r54c1-t7 r1c3-t7">
<p>whether FORTRAN COMMON blocks are generated</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r55c1-t7" headers="r1c1-t7">
<p>NATIVE_TYPES</p>
</td>
<td class="cellalignment3247" headers="r55c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r55c1-t7 r1c3-t7">
<p>support for native float/double</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r56c1-t7" headers="r1c1-t7">
<p>NESTED={YES | NO}</p>
</td>
<td class="cellalignment3247" headers="r56c1-t7 r1c2-t7">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r56c1-t7 r1c3-t7">
<p>if YES, nested programs are supported</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r57c1-t7" headers="r1c1-t7">
<p>NLS_CHAR=(<span class="italic">var1</span>, ..., <span class="italic">varn</span>)</p>
</td>
<td class="cellalignment3247" headers="r57c1-t7 r1c2-t7">
<p>*none*</p>
</td>
<td class="cellalignment3247" headers="r57c1-t7 r1c3-t7">
<p>specify multibyte character variables</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r58c1-t7" headers="r1c1-t7">
<p>NLS_LOCAL={YES | NO}</p>
</td>
<td class="cellalignment3247" headers="r58c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r58c1-t7 r1c3-t7">
<p>if YES, use NCHAR semantics of previous Pro*COBOL releases</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r59c1-t7" headers="r1c1-t7">
<p>OBJECTS={YES | NO}</p>
</td>
<td class="cellalignment3247" headers="r59c1-t7 r1c2-t7">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r59c1-t7 r1c3-t7">
<p>Support of object types</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r60c1-t7" headers="r1c1-t7">
<p>OUTLINE</p>
</td>
<td class="cellalignment3247" headers="r60c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r60c1-t7 r1c3-t7">
<p>category in which Outlines are created</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r61c1-t7" headers="r1c1-t7">
<p>OUTLNPREFIX</p>
</td>
<td class="cellalignment3247" headers="r61c1-t7 r1c2-t7">
<p>*none*</p>
</td>
<td class="cellalignment3247" headers="r61c1-t7 r1c3-t7">
<p>outline name prefix</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r62c1-t7" headers="r1c1-t7">
<p>[ONAME=]<span class="italic">filename</span></p>
</td>
<td class="cellalignment3247" headers="r62c1-t7 r1c2-t7">&nbsp;</td>
<td class="cellalignment3247" headers="r62c1-t7 r1c3-t7">
<p>name of output file</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r63c1-t7" headers="r1c1-t7">
<p>ORACA={YES|NO}*</p>
</td>
<td class="cellalignment3247" headers="r63c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r63c1-t7 r1c3-t7">
<p>whether the ORACA is used</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r64c1-t7" headers="r1c1-t7">
<p>ORECLEN=<span class="italic">integer</span></p>
</td>
<td class="cellalignment3247" headers="r64c1-t7 r1c2-t7">
<p>80</p>
</td>
<td class="cellalignment3247" headers="r64c1-t7 r1c3-t7">
<p>record length of output file</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r65c1-t7" headers="r1c1-t7">
<p>PAGELEN=<span class="italic">integer</span></p>
</td>
<td class="cellalignment3247" headers="r65c1-t7 r1c2-t7">
<p>66</p>
</td>
<td class="cellalignment3247" headers="r65c1-t7 r1c3-t7">
<p>lines in each page in listing</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r66c1-t7" headers="r1c1-t7">
<p>PARSE={NONE | PARTIAL | FULL}</p>
</td>
<td class="cellalignment3247" headers="r66c1-t7 r1c2-t7">
<p>FULL</p>
</td>
<td class="cellalignment3247" headers="r66c1-t7 r1c3-t7">
<p>whether Pro*C/C++ parses (with a C parser) the.pc source</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r67c1-t7" headers="r1c1-t7">
<p>PICN_ENDIAN</p>
</td>
<td class="cellalignment3247" headers="r67c1-t7 r1c2-t7">
<p>BIG</p>
</td>
<td class="cellalignment3247" headers="r67c1-t7 r1c3-t7">
<p>endianness in PIC N host variables</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r68c1-t7" headers="r1c1-t7">
<p>PICX</p>
</td>
<td class="cellalignment3247" headers="r68c1-t7 r1c2-t7">
<p>CHARF</p>
</td>
<td class="cellalignment3247" headers="r68c1-t7 r1c3-t7">
<p>datatype of PIC X COBOL variables.</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r69c1-t7" headers="r1c1-t7">
<p>PREFETCH=0..65535</p>
</td>
<td class="cellalignment3247" headers="r69c1-t7 r1c2-t7">
<p>1</p>
</td>
<td class="cellalignment3247" headers="r69c1-t7 r1c3-t7">
<p>speed up queries by pre-fetching a given number of rows</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r70c1-t7" headers="r1c1-t7">
<p>RELEASE_CURSOR={YES|NO} *</p>
</td>
<td class="cellalignment3247" headers="r70c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r70c1-t7 r1c3-t7">
<p>how cursor cache handles SQL statements</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r71c1-t7" headers="r1c1-t7">
<p>RUNOUTLINE</p>
</td>
<td class="cellalignment3247" headers="r71c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r71c1-t7 r1c3-t7">
<p>create Outlines in the database</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r72c1-t7" headers="r1c1-t7">
<p>SELECT_ERROR={YES|NO}*</p>
</td>
<td class="cellalignment3247" headers="r72c1-t7 r1c2-t7">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r72c1-t7 r1c3-t7">
<p>how SELECT errors are handled</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r73c1-t7" headers="r1c1-t7">
<p>SQLCHECK={FULL|SYNTAX|LIMITED|NONE}*</p>
</td>
<td class="cellalignment3247" headers="r73c1-t7 r1c2-t7">
<p>SYNTAX</p>
</td>
<td class="cellalignment3247" headers="r73c1-t7 r1c3-t7">
<p>extent of syntactic and semantic checking</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r74c1-t7" headers="r1c1-t7">
<p>STMT_CACHE</p>
</td>
<td class="cellalignment3247" headers="r74c1-t7 r1c2-t7">
<p>0</p>
</td>
<td class="cellalignment3247" headers="r74c1-t7 r1c3-t7">
<p>size of statement cache</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r75c1-t7" headers="r1c1-t7">
<p>SYS_INCLUDE=pathname</p>
</td>
<td class="cellalignment3247" headers="r75c1-t7 r1c2-t7">
<p>none</p>
</td>
<td class="cellalignment3247" headers="r75c1-t7 r1c3-t7">
<p>directory where system header files, such as iostream.h, are found</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r76c1-t7" headers="r1c1-t7">
<p>THREADS={YES | NO}</p>
</td>
<td class="cellalignment3247" headers="r76c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r76c1-t7 r1c3-t7">
<p>indicates a shared server application</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r77c1-t7" headers="r1c1-t7">
<p>TYPE_CODE={ORACLE | ANSI}</p>
</td>
<td class="cellalignment3247" headers="r77c1-t7 r1c2-t7">
<p>ORACLE</p>
</td>
<td class="cellalignment3247" headers="r77c1-t7 r1c3-t7">
<p>use of Oracle or ANSI type codes for dynamic SQL</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r78c1-t7" headers="r1c1-t7">
<p>UNSAFE_NULL={YES|NO}</p>
</td>
<td class="cellalignment3247" headers="r78c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r78c1-t7 r1c3-t7">
<p>disables the ORA-01405 message</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r79c1-t7" headers="r1c1-t7">
<p>USERID=<span class="italic">username</span>/<span class="italic">password</span></p>
</td>
<td class="cellalignment3247" headers="r79c1-t7 r1c2-t7">&nbsp;</td>
<td class="cellalignment3247" headers="r79c1-t7 r1c3-t7">
<p>valid Oracle username and password</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r80c1-t7" headers="r1c1-t7">
<p>UTF16_CHARSET={NCHAR_CHARSET | DB_CHARSET}</p>
</td>
<td class="cellalignment3247" headers="r80c1-t7 r1c2-t7">
<p>NCHAR_CHARSET</p>
</td>
<td class="cellalignment3247" headers="r80c1-t7 r1c3-t7">
<p>specify the character set form used by UNICODE(UTF16)</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r81c1-t7" headers="r1c1-t7">
<p>VARCHAR={YES|NO}</p>
</td>
<td class="cellalignment3247" headers="r81c1-t7 r1c2-t7">
<p>NO</p>
</td>
<td class="cellalignment3247" headers="r81c1-t7 r1c3-t7">
<p>recognize implicit VARCHAR group items in COBOL</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r82c1-t7" headers="r1c1-t7">
<p>VERSION={ANY | LATEST | RECENT} *</p>
</td>
<td class="cellalignment3247" headers="r82c1-t7 r1c2-t7">
<p>RECENT</p>
</td>
<td class="cellalignment3247" headers="r82c1-t7 r1c3-t7">
<p>Which version of an object is to be returned</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r83c1-t7" headers="r1c1-t7">
<p>XREF={YES|NO}*</p>
</td>
<td class="cellalignment3247" headers="r83c1-t7 r1c2-t7">
<p>YES</p>
</td>
<td class="cellalignment3247" headers="r83c1-t7 r1c3-t7">
<p>cross reference section in listing</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="CACJBGFE"></a>
<div id="ZZPRE347" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="ABC2656651"></a>Using the Precompiler Options</h2>
<p>This section is organized for easy reference. It lists the precompiler options alphabetically, and for each option provides its purpose, syntax, and default value. Usage notes that help you understand how the option works are also provided. Unless the usage notes say otherwise, the option can be entered on the command line, inline, or from a configuration file.</p>
<div id="ZZPRE348" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref632"></a>
<h3 class="sect2"><a id="sthref633"></a>ASACC</h3>
<p class="subhead2"><a id="ZZPRE349"></a><a id="sthref634"></a>Purpose</p>
<p>Specifies whether the listing file follows the ASA convention of using the first column in each line for carriage control.</p>
<p class="subhead2"><a id="ZZPRE350"></a>Syntax</p>
<p><code>ASACC={YES|NO</code>}</p>
<p class="subhead2"><a id="ZZPRE351"></a>Default</p>
<p><code>NO</code></p>
<p class="subhead2"><a id="ZZPRE352"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE353" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref635"></a>
<h3 class="sect2"><a id="sthref636"></a>ASSUME_SQLCODE</h3>
<p class="subhead2"><a id="ZZPRE354"></a><a id="sthref637"></a>Purpose</p>
<p>Instructs the Oracle Precompiler to presume that SQLCODE is declared irrespective of whether it is declared in the Declare Section or of the proper type. ASSUME_SQLCODE=YES causes Releases 1.6 and later of the Oracle Precompilers to behave similarly to Release 1.5 in this respect.</p>
<p class="subhead2"><a id="ZZPRE355"></a>Syntax</p>
<p><code>ASSUME_SQLCODE={YES|NO</code>}</p>
<p class="subhead2"><a id="ZZPRE356"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="ZZPRE357"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>When <code>ASSUME_SQLCODE=NO</code>, <code>SQLCODE</code> is recognized as a status variable if and only if at least one of the following criteria is satisfied:</p>
<ul>
<li>
<p>It is declared in a Declare Section with <span class="italic">exactly</span> the right datatype.</p>
</li>
<li>
<p>The precompiler finds no other status variable.</p>
</li>
</ul>
<p>If the precompiler finds a SQLSTATE declaration (of <span class="italic">exactly</span> the right type of course) in a Declare Section or finds an <code>INCLUDE</code> of the SQLCA, it will <span class="italic">not</span> presume SQLCODE is declared.</p>
<p>When <code>ASSUME_SQLCODE=YES</code>, and when SQLSTATE and SQLCA (Pro*FORTRAN only) are declared as status variables, the precompiler presumes SQLCODE is declared whether it is declared in a Declare Section or of the proper type. This causes Releases 1.6.7 and later to behave like Release 1.5 in this regard.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE358" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref638"></a>
<h3 class="sect2"><a id="sthref639"></a>AUTO_CONNECT</h3>
<p class="subhead2"><a id="ZZPRE359"></a><a id="sthref640"></a>Purpose</p>
<p>Specifies whether your program connects automatically to the default user account.</p>
<p class="subhead2"><a id="ZZPRE360"></a>Syntax</p>
<p><code>AUTO_CONNECT={YES|NO}</code></p>
<p class="subhead1"><a id="ZZPRE361"></a>Default</p>
<p><code>NO</code></p>
<p class="subhead1"><a id="ZZPRE362"></a>Usage Note</p>
<p>Cannot be entered inline.</p>
<p>When <code>AUTO_CONNECT=YES</code>, as soon as the precompiler encounters an executable SQL statement, your program tries to log on to Oracle automatically with the userid</p>
<pre>&lt;prefix&gt;&lt;username&gt;
</pre>
<p>where <span class="italic">prefix</span> is the value of the Oracle initialization parameter <code>OS_AUTHENT_PREFIX</code> (the default value is null) and <span class="italic">username</span> is your operating system user or task name. In this case, you cannot override the default value for MAXOPENCURORS (10), even if you specify a different value on the command line.</p>
<p>When <code>AUTO_CONNECT=NO</code> (the default), you must use the <code>CONNECT</code> statement to log on to Oracle.</p>
</div>
<!-- class="sect2" -->
<a id="i5282"></a>
<div id="ZZPRE363" class="sect2">
<h3 class="sect2">CHAR_MAP<a id="sthref641"></a><a id="sthref642"></a></h3>
<p class="subhead1"><a id="ZZPRE364"></a>Purpose</p>
<p>Specifies the default mapping of C host variables of type char or char[n], and pointers to them, into SQL.</p>
<p class="subhead1"><a id="ZZPRE365"></a>Syntax</p>
<p>CHAR_MAP={VARCHAR2 | CHARZ | STRING | CHARF}</p>
<p class="subhead1"><a id="ZZPRE366"></a>Default</p>
<p>CHARZ</p>
<p class="subhead1"><a id="ZZPRE367"></a>Usage Note</p>
<p>In earlier releases, you had to declare char or char[n] host variables as CHAR, using the SQL DECLARE statement. The external datatypes VARCHAR2 and CHARZ were the default character mappings of Oracle Database version 7.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE368" class="sect2"><a id="sthref643"></a>
<h3 class="sect2">CINCR</h3>
<p class="subhead1"><a id="ZZPRE369"></a><a id="sthref644"></a><a id="sthref645"></a>Purpose</p>
<p>Allows the application to set the next increment for physical connections to be opened to the database.</p>
<p class="subhead1"><a id="ZZPRE370"></a>Syntax</p>
<p>CINCR = Range is 1 to (CMAX-CMIN).</p>
<p class="subhead1"><a id="ZZPRE371"></a>Default</p>
<p>1</p>
<p class="subhead1"><a id="ZZPRE372"></a>Usage Notes</p>
<p>Initially, all physical connections as specified through CMIN are opened to the server. Subsequently, physical connections are opened only when necessary. Users should set CMIN to the total number of planned or expected concurrent statements to be run by the application to get optimum performance. The default value is set to 2.</p>
</div>
<!-- class="sect2" -->
<a id="i9360"></a>
<div id="ZZPRE373" class="sect2">
<h3 class="sect2">CLOSE_ON_COMMIT<a id="sthref646"></a><a id="sthref647"></a></h3>
<p class="subhead1"><a id="ZZPRE374"></a>Purpose</p>
<p>Specifies whether to close cursors on a commit statement.</p>
<p class="subhead1"><a id="ZZPRE375"></a>Syntax</p>
<p>CLOSE_ON_COMMIT={YES | NO}</p>
<p class="subhead1"><a id="ZZPRE376"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="ZZPRE377"></a>Usage Notes</p>
<p>Can be used only on the command line or in a configuration file.</p>
<p>If MODE is specified at a higher level than CLOSE_ON_COMMIT, then MODE takes precedence. For example, the defaults are MODE=ORACLE and CLOSE_ON_COMMIT=NO. If the user specifies MODE=ANSI on the command line, then any cursors will be closed on commit.</p>
<p>When CLOSE_ON_COMMIT=NO (when MODE=ORACLE), issuing a COMMIT or ROLLBACK will close only cursors that are declared using the FOR UPDATE clause or are referenced in a CURRENT OF clause. Other cursors that are not affected by the COMMIT or ROLLBACK statement, remain open, if they are open already. However, when CLOSE_ON_COMMIT=YES (when MODE=ANSI), issuing a COMMIT or ROLLBACK closes all cursors.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE378" class="sect2"><a id="sthref648"></a>
<h3 class="sect2">CMAX</h3>
<p class="subhead1"><a id="ZZPRE379"></a><a id="sthref649"></a><a id="sthref650"></a>Purpose</p>
<p>Specifies the maximum number of physical connections that can be opened for the database.</p>
<p class="subhead1"><a id="ZZPRE380"></a>Syntax</p>
<p>CINCR = Range is 1 to 65535</p>
<p class="subhead1"><a id="ZZPRE381"></a>Default</p>
<p>100</p>
<p class="subhead1"><a id="ZZPRE382"></a>Usage Notes</p>
<p>CMAX value must be at least CMIN+CINCR.After this value is reached, more physical connections cannot be opened.In a typical application, running 100 concurrent database operations is more than sufficient. The user can set an appropriate value.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE383" class="sect2"><a id="sthref651"></a>
<h3 class="sect2">CMIN</h3>
<p class="subhead1"><a id="ZZPRE384"></a><a id="sthref652"></a><a id="sthref653"></a>Purpose</p>
<p>Specifies the minimum number of physical connections that can be opened for the database.</p>
<p class="subhead1"><a id="ZZPRE385"></a>Syntax</p>
<p>CINCR = Range is 1 to (CMAX-CINCR).</p>
<p class="subhead1"><a id="ZZPRE386"></a>Default</p>
<p>2</p>
<p class="subhead1"><a id="ZZPRE387"></a>Usage Notes</p>
<p>CMAX value must be at least CMIN+CINCR.After this value is reached, more physical connections cannot be opened.In a typical application, running 100 concurrent database operations is more than sufficient. The user can set an appropriate value.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE388" class="sect2"><a id="sthref654"></a>
<h3 class="sect2">CNOWAIT</h3>
<p class="subhead1"><a id="ZZPRE389"></a><a id="sthref655"></a><a id="sthref656"></a>Purpose</p>
<p>This attribute determines if the application must repeatedly try for a physical connection when all other physical connections in the pool are busy, and the total number of physical connections has already reached its maximum.</p>
<p class="subhead1"><a id="ZZPRE390"></a>Syntax</p>
<p>CNOWAIT = Range is 1 to 65535.</p>
<p class="subhead1"><a id="ZZPRE391"></a>Default</p>
<p>0 which means not set.</p>
<p class="subhead1"><a id="ZZPRE392"></a>Usage Notes</p>
<p>If physical connections are not available and no more physical connections can be opened, an error is thrown when this attribute is set. Otherwise, the call waits until it acquires another connection. By default, CNOWAIT is not to be set so a thread will wait until it can acquire a free connection, instead of returning an error.</p>
</div>
<!-- class="sect2" -->
<a id="i10030"></a>
<div id="ZZPRE393" class="sect2">
<h3 class="sect2"><a id="sthref657"></a>CODE</h3>
<p class="subhead1"><a id="ZZPRE394"></a><a id="sthref658"></a><a id="sthref659"></a><a id="sthref660"></a>Purpose</p>
<p>Specifies the format of C function prototypes generated by the Pro*C/C++ precompiler. (A <span class="italic">function prototype</span> declares a function and the datatypes of its arguments.) The precompiler generates function prototypes for SQL library routines, so that your C compiler can resolve external references. The CODE option lets you control the prototyping.<a id="sthref661"></a></p>
<p class="subhead1"><a id="ZZPRE395"></a>Syntax</p>
<p>CODE={ANSI_C | KR_C | CPP}</p>
<p class="subhead1"><a id="ZZPRE396"></a>Default</p>
<p>KR_C</p>
<p class="subhead1"><a id="ZZPRE397"></a>Usage Notes</p>
<p>Can be entered on the command line, but not inline.</p>
<p>ANSI C standard X3.159-1989 provides for function prototyping. When CODE=ANSI_C, Pro*C/C++ generates full function prototypes, which conform to the ANSI C standard. An example follows:</p>
<pre>extern void sqlora(long *, void *); 
</pre>
<p>The precompiler can also generate other ANSI-approved constructs such as the <span class="bold">const</span> type qualifier.</p>
<p>When CODE=KR_C (the default), the precompiler comments out the argument lists of generated function prototypes, as shown here:</p>
<pre>extern void sqlora(/*_ long *, void * _*/); 
</pre>
<p>Specify CODE=KR_C if your C compiler is not compliant with the X3.159 standard.</p>
<p>When CODE=CPP, the precompiler generates C++ compatible code.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE398" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref662"></a>
<h3 class="sect2"><a id="sthref663"></a>COMMON_NAME</h3>
<p class="subhead2"><a id="ZZPRE399"></a>Purpose</p>
<p><a id="sthref664"></a>For Pro*FORTRAN only, the <code>COMMON_NAME</code> option specifies a prefix used to name internal FORTRAN <code>COMMON</code> blocks. Your host program does not access the <code>COMMON</code> blocks directly. But, they allow two or more program units in the same precompilation unit to contain SQL statements.</p>
<p class="subhead1"><a id="ZZPRE400"></a>Syntax</p>
<p><code>COMMON_NAME=</code><code><span class="codeinlineitalic">blockname</span></code></p>
<p class="subhead1"><a id="ZZPRE401"></a>Default</p>
<p>First five characters in name of input file</p>
<p class="subhead1"><a id="ZZPRE402"></a>Usage Notes</p>
<p>The Pro*FORTRAN Precompiler uses a special program file called a <span class="italic">block data subprogram</span> to establish <code>COMMON</code> blocks for all the SQL variables in an input file. The block data subprogram defines two COMMON blocks -- one for CHARACTER variables, the other for non-CHARACTER variables -- and uses DATA statements to initialize the variables.</p>
<p><a id="sthref665"></a>The format of a block data subprogram follows:</p>
<pre>BLOCK DATA &lt;subprogram_name&gt;
variable declarations
COMMON statements
DATA statements
END
</pre>
<p>Your host program does not access the <code>COMMON</code> blocks directly. But, they allow two or more program files in the same precompilation file to contain SQL statements.</p>
<p>To name the <code>COMMON</code> blocks, the precompiler uses the name of the input file and the suffixes C, D, and I. At most, the first five characters of the filename are used. For example, if the name of the input file is <code>ACCTSPAY</code>, the precompiler names the <code>COMMON</code> blocks <code>ACCTSC</code>, <code>ACCTSD</code>, and <code>ACCTSI</code>.</p>
<p>The precompiler, however, can give <code>COMMON</code> blocks defined in different output files the same name, as the following schematic shows:</p>
<pre>ACCTSPAY.PFO ===&gt; ACCTSC, ACCTSD, ACCTSI in ACCTSPAY.FOR
ACCTSREC.PFO ===&gt; ACCTSC, ACCTSD, ACCTSI in ACCTSREC.FOR
</pre>
<p>If you were to link <code>ACCTSPAY</code> and <code>ACCTSREC</code> into an executable program, the linker would see three, not six, <code>COMMON</code> blocks.</p>
<p>To solve the problem, you can rename the input files, or you can override the default <code>COMMON</code> block names by specifying <code>COMMON_NAME</code> inline or on the command line as follows:</p>
<pre>COMMON_NAME=&lt;block_name&gt;
</pre>
<p>where <span class="italic">block_name</span> is a legal <code>COMMON</code> block name. For example, if you specify <code>COMMON_NAME=PAY</code>, the precompiler names its <code>COMMON</code> blocks <code>PAYC</code> and <code>PAYI</code>. At most, the first five characters in <span class="italic">block_name</span> are used.</p>
<p>For example, if you specify <code>COMMON_NAME=PAY</code>, the precompiler names its COMMON blocks <code>PAYC</code> and <code>PAYI</code>. At most, the first 5 characters in <span class="italic">block_name</span> are used.</p>
<p>If you specify COMMON_NAME inline, its <code>EXEC ORACLE OPTION</code> statement must precede the FORTRAN PROGRAM, <code>SUBROUTINE</code>, or <code>FUNCTION</code> statement.</p>
<p>You might want to override the default <code>COMMON</code> block names if they conflict with your user-defined <code>COMMON</code> block names. However, the preferred practice is to rename the user-defined <code>COMMON</code> blocks.</p>
<p><code>COMMON_NAME</code> is not needed if you specify MULTISUBPROG.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE403" class="sect2"><a id="sthref666"></a>
<h3 class="sect2">COMMON_PARSER</h3>
<p class="subhead1"><a id="ZZPRE404"></a><a id="sthref667"></a><a id="sthref668"></a><a id="sthref669"></a>Purpose</p>
<p>Specifies that the SQL99 syntax for SELECT, INSERT, DELETE, UPDATE and body of the cursor in a DECLARE CURSOR statement will be supported.</p>
<p class="subhead1"><a id="ZZPRE405"></a>Syntax</p>
<p>COMMON_PARSER={YES | NO}</p>
<p class="subhead1"><a id="ZZPRE406"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="ZZPRE407"></a>Usage Notes</p>
<p>Can be entered in the command line.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE408" class="sect2"><a id="sthref670"></a>
<h3 class="sect2"><a id="sthref671"></a>COMP_CHARSET</h3>
<p class="subhead1"><a id="ZZPRE409"></a><a id="sthref672"></a><a id="sthref673"></a><a id="sthref674"></a>Purpose</p>
<p>Indicates to the Pro*C/C++ Precompiler whether multibyte character sets are (or are not) supported by the compiler to be used. It is intended for use by developers working in a multibyte client-side environment (for example, when NLS_LANG is set to a multibyte character set).</p>
<p class="subhead1"><a id="ZZPRE410"></a>Syntax</p>
<p>COMP_CHARSET={MULTI_BYTE | SINGLE_BYTE}</p>
<p class="subhead1"><a id="ZZPRE411"></a>Default</p>
<p>MULTI_BYTE</p>
<p class="subhead1"><a id="ZZPRE412"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>With COMP_CHARSET=MULTI_BYTE (default), Pro*C/C++ generates C code that is to be compiled by a compiler that supports multibyte character sets.</p>
<p>With COMP_CHARSET=SINGLE_BYTE, Pro*C/C++ generates C code for single-byte compilers that addresses a complication that <span class="italic">may</span> arise from the ASCII equivalent of a backslash (\) character in the second byte of a double-byte character in a multibyte string. In this case, the backslash (\) character is &#34;escaped&#34; with another backslash character preceding it.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The need for this feature is common when developing in a Shift-JIS environment with older C compilers.</div>
<p>This option has no effect when NLS_LANG is set to a single-byte character set.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE413" class="sect2"><a id="sthref675"></a>
<h3 class="sect2"><a id="sthref676"></a>COMP_CHARSET</h3>
<p class="subhead1"><a id="ZZPRE414"></a><a id="sthref677"></a><a id="sthref678"></a><a id="sthref679"></a>Purpose</p>
<p>Indicates to the Pro*C/C++ Precompiler whether multibyte character sets are (or are not) supported by the compiler to be used. It is intended for use by developers working in a multibyte client-side environment (for example, when NLS_LANG is set to a multibyte character set).</p>
<p class="subhead1"><a id="ZZPRE415"></a>Syntax</p>
<p>COMP_CHARSET={MULTI_BYTE | SINGLE_BYTE}</p>
<p class="subhead1"><a id="ZZPRE416"></a>Default</p>
<p>MULTI_BYTE</p>
<p class="subhead1"><a id="ZZPRE417"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>With COMP_CHARSET=MULTI_BYTE (default), Pro*C/C++ generates C code that is to be compiled by a compiler that supports multibyte character sets.</p>
<p>With COMP_CHARSET=SINGLE_BYTE, Pro*C/C++ generates C code for single-byte compilers that addresses a complication that <span class="italic">may</span> arise from the ASCII equivalent of a backslash (\) character in the second byte of a double-byte character in a multibyte string. In this case, the backslash (\) character is &#34;escaped&#34; with another backslash character preceding it.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The need for this feature is common when developing in a Shift-JIS environment with older C compilers.</div>
<p>This option has no effect when NLS_LANG is set to a single-byte character set.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE418" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref680"></a>
<h3 class="sect2"><a id="sthref681"></a>CONFIG</h3>
<p class="subhead2"><a id="ZZPRE419"></a><a id="sthref682"></a><a id="sthref683"></a><a id="sthref684"></a>Purpose</p>
<p>Specifies the name of a user configuration file.</p>
<p class="subhead2"><a id="ZZPRE420"></a>Syntax</p>
<p><code>CONFIG=</code><code><span class="codeinlineitalic">filename</span></code></p>
<p class="subhead2"><a id="ZZPRE421"></a>Default</p>
<p><code>None</code></p>
<p class="subhead2"><a id="ZZPRE422"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>The Oracle Precompilers can use a configuration file containing preset command-line options. By default, a text file called the <span class="italic">system configuration file</span> is used. However, you can specify any of several alternative files, called <span class="italic">user configuration files</span>.</p>
<p>You cannot nest configuration files. Therefore, you cannot specify the option <code>CONFIG</code> in a configuration file.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE423" class="sect2"><a id="sthref685"></a>
<h3 class="sect2">CPOOL</h3>
<p class="subhead1"><a id="ZZPRE424"></a><a id="sthref686"></a><a id="sthref687"></a>Purpose</p>
<p>Based on this option, the precompiler generates the appropriate code that directs SQLLIB to enable or disable the connection pool feature.</p>
<p class="subhead1"><a id="ZZPRE425"></a>Syntax</p>
<p>CPOOL = {YES|NO}</p>
<p class="subhead1"><a id="ZZPRE426"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="ZZPRE427"></a>Usage Notes</p>
<p>If this option is set to NO, other connection pooling options will be ignored by the precompiler.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE428" class="sect2"><a id="sthref688"></a>
<h3 class="sect2"><a id="sthref689"></a>CPP_SUFFIX</h3>
<p class="subhead1"><a id="ZZPRE429"></a><a id="sthref690"></a><a id="sthref691"></a><a id="sthref692"></a>Purpose</p>
<p>The CPP_SUFFIX option provides the ability to specify the filename extension that the precompiler appends to the C++ output file generated when the CODE=CPP option is specified.</p>
<p class="subhead1"><a id="ZZPRE430"></a>Syntax</p>
<p>CPP_SUFFIX=<span class="italic">filename_extension</span></p>
<p class="subhead1"><a id="ZZPRE431"></a>Default</p>
<p>System-specific.</p>
<p class="subhead1"><a id="ZZPRE432"></a>Usage Notes</p>
<p>Most C compilers expect a default extension of &#34;.c&#34; for their input files. Different C++ compilers, however, can expect different filename extensions. The CPP_SUFFIX option provides the ability to specify the filename extension that the precompiler generates. The value of this option is a string, without the quotes or the period. For example, CPP_SUFFIX=cc, or CPP_SUFFIX=C.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE433" class="sect2"><a id="sthref693"></a>
<h3 class="sect2">CTIMEOUT</h3>
<p class="subhead1"><a id="ZZPRE434"></a><a id="sthref694"></a><a id="sthref695"></a>Purpose</p>
<p>Physical connections that are idle for more than the specified time (in seconds) are terminated to maintain an optimum number of open physical connections</p>
<p class="subhead1"><a id="ZZPRE435"></a>Syntax</p>
<p>CTIMEOUT = Range is 1 to 65535.</p>
<p class="subhead1"><a id="ZZPRE436"></a>Default</p>
<p>0 which means not set.</p>
<p class="subhead1"><a id="ZZPRE437"></a>Usage Notes</p>
<p>Physical connections will not be closed until the connection pool is terminated.Creating a new physical connection will cost a round trip to the server.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE438" class="sect2"><a id="sthref696"></a>
<h3 class="sect2">DB2_ARRAY</h3>
<p class="subhead1"><a id="ZZPRE439"></a><a id="sthref697"></a><a id="sthref698"></a>Purpose</p>
<p>Based on this option, the precompiler activates the additional array insert/select syntax.</p>
<p class="subhead1"><a id="ZZPRE440"></a>Syntax</p>
<p>DB2_ARRAY={YES |NO} <a id="sthref699"></a><span class="bold"><a id="sthref700"></a></span></p>
<p class="subhead1"><a id="ZZPRE441"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="ZZPRE442"></a>Usage Notes</p>
<p>If this option is set to NO, the Oracle precompiler syntax is supported, otherwise the DB2 insert/select array syntax is supported.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE443" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref701"></a>
<h3 class="sect2"><a id="sthref702"></a>DBMS</h3>
<p class="subhead2"><a id="ZZPRE444"></a>Purpose</p>
<p><a id="sthref703"></a>Specifies whether Oracle follows the semantic and syntactic rules of Oracle9<span class="italic">i</span>, Oracle8<span class="italic">i</span>, Oracle8, Oracle7, or the native version of Oracle (that is, the version to which your application is connected).</p>
<p class="subhead2"><a id="ZZPRE445"></a>Syntax</p>
<p><code>DBMS={NATIVE|V7|V8}</code></p>
<p class="subhead2"><a id="ZZPRE446"></a>Default</p>
<p><code>NATIVE</code></p>
<p class="subhead2"><a id="ZZPRE447"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>Using the DBMS option, you can control the version-specific behavior of Oracle. When DBMS=NATIVE (the default), Oracle follows the semantic and syntactic rules of the native version of Oracle.</p>
<p>When DBMS=V8, or DBMS=V7, Oracle follows the respective rules for Oracle9<span class="italic">i</span> (which remain the same as for Oracle7, Oracle8, and Oracle8<span class="italic">i</span>).</p>
<p><a href="#BABIBIDD">Table 6-4</a> shows how the compatible <code>DBMS</code> and <code>MODE</code> settings interact. All other combinations are incompatible or not recommended.</p>
<div id="ZZPRE448" class="tblformal">
<p class="titleintable"><a id="sthref704"></a><a id="BABIBIDD"></a>Table 6-4 Compatible DBMS and MODE Settings</p>
<table class="cellalignment3250" title="Compatible DBMS and MODE Settings" summary="situation" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t10">Situation</th>
<th class="cellalignment3246" id="r1c2-t10">DBMS=V7/V8<br/>
MODE=ANSI</th>
<th class="cellalignment3246" id="r1c3-t10">DBMS=V7/V8<br/>
MODE=ORACLE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t10" headers="r1c1-t10">
<p>&#34;no data found&#34; warning code</p>
</td>
<td class="cellalignment3247" headers="r2c1-t10 r1c2-t10">
<p>+100</p>
</td>
<td class="cellalignment3247" headers="r2c1-t10 r1c3-t10">
<p>+1403</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t10" headers="r1c1-t10">
<p>fetch nulls without using indicator variables</p>
</td>
<td class="cellalignment3247" headers="r3c1-t10 r1c2-t10">
<p>error -1405</p>
</td>
<td class="cellalignment3247" headers="r3c1-t10 r1c3-t10">
<p>error -1405</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r4c1-t10" headers="r1c1-t10">
<p>fetch truncated values without using indicator variables</p>
</td>
<td class="cellalignment3247" headers="r4c1-t10 r1c2-t10">
<p>no error but SQLWARN(2) is set</p>
</td>
<td class="cellalignment3247" headers="r4c1-t10 r1c3-t10">
<p>no error but SQLWARN(2) is set</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r5c1-t10" headers="r1c1-t10">
<p>cursors closed by COMMIT or ROLLBACK</p>
</td>
<td class="cellalignment3247" headers="r5c1-t10 r1c2-t10">
<p>all explicit</p>
</td>
<td class="cellalignment3247" headers="r5c1-t10 r1c3-t10">
<p>CURRENT OF only</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r6c1-t10" headers="r1c1-t10">
<p>open an already OPENed cursor</p>
</td>
<td class="cellalignment3247" headers="r6c1-t10 r1c2-t10">
<p>error -2117</p>
</td>
<td class="cellalignment3247" headers="r6c1-t10 r1c3-t10">
<p>no error</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r7c1-t10" headers="r1c1-t10">
<p>close an already CLOSEd cursor</p>
</td>
<td class="cellalignment3247" headers="r7c1-t10 r1c2-t10">
<p>error -2114</p>
</td>
<td class="cellalignment3247" headers="r7c1-t10 r1c3-t10">
<p>no error</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r8c1-t10" headers="r1c1-t10">
<p>SQL group function ignores nulls</p>
</td>
<td class="cellalignment3247" headers="r8c1-t10 r1c2-t10">
<p>no warning</p>
</td>
<td class="cellalignment3247" headers="r8c1-t10 r1c3-t10">
<p>no warning</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r9c1-t10" headers="r1c1-t10">
<p>when SQL group function in multirow query is called</p>
</td>
<td class="cellalignment3247" headers="r9c1-t10 r1c2-t10">
<p>FETCH time</p>
</td>
<td class="cellalignment3247" headers="r9c1-t10 r1c3-t10">
<p>FETCH time</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r10c1-t10" headers="r1c1-t10">
<p>declare SQLCA structure</p>
</td>
<td class="cellalignment3247" headers="r10c1-t10 r1c2-t10">
<p>optional</p>
</td>
<td class="cellalignment3247" headers="r10c1-t10 r1c3-t10">
<p>required</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r11c1-t10" headers="r1c1-t10">
<p>declare SQLCODE or SQLSTATE status variable</p>
</td>
<td class="cellalignment3247" headers="r11c1-t10 r1c2-t10">
<p>required</p>
</td>
<td class="cellalignment3247" headers="r11c1-t10 r1c3-t10">
<p>optional but Oracle ignores</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r12c1-t10" headers="r1c1-t10">
<p>default external datatype of character host variables external datatype used for CHAR in TYPE and VAR statements</p>
</td>
<td class="cellalignment3247" headers="r12c1-t10 r1c2-t10">
<p>CHARF</p>
</td>
<td class="cellalignment3247" headers="r12c1-t10 r1c3-t10">
<p>VARCHAR2</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r13c1-t10" headers="r1c1-t10">
<p>default external datatype of string literals in SQL statements</p>
</td>
<td class="cellalignment3247" headers="r13c1-t10 r1c2-t10">
<p>CHARF</p>
</td>
<td class="cellalignment3247" headers="r13c1-t10 r1c3-t10">
<p>CHARF</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r14c1-t10" headers="r1c1-t10">
<p>default internal datatype of CHAR variables in SQL statements</p>
</td>
<td class="cellalignment3247" headers="r14c1-t10 r1c2-t10">
<p>CHAR</p>
</td>
<td class="cellalignment3247" headers="r14c1-t10 r1c3-t10">
<p>CHAR</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r15c1-t10" headers="r1c1-t10">
<p>default external datatype of CHAR variables in PL/SQL blocks</p>
</td>
<td class="cellalignment3247" headers="r15c1-t10 r1c2-t10">
<p>CHARF</p>
</td>
<td class="cellalignment3247" headers="r15c1-t10 r1c3-t10">
<p>CHARF</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r16c1-t10" headers="r1c1-t10">
<p>default external datatype of value function USER returns</p>
</td>
<td class="cellalignment3247" headers="r16c1-t10 r1c2-t10">
<p>CHARF</p>
</td>
<td class="cellalignment3247" headers="r16c1-t10 r1c3-t10">
<p>CHARF</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r17c1-t10" headers="r1c1-t10">
<p>external datatype code DESCRIBE returns (dynamic SQL Method 4)</p>
</td>
<td class="cellalignment3247" headers="r17c1-t10 r1c2-t10">
<p>96</p>
</td>
<td class="cellalignment3247" headers="r17c1-t10 r1c3-t10">
<p>96</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r18c1-t10" headers="r1c1-t10">
<p>integrity constraints</p>
</td>
<td class="cellalignment3247" headers="r18c1-t10 r1c2-t10">
<p>enabled</p>
</td>
<td class="cellalignment3247" headers="r18c1-t10 r1c3-t10">
<p>enabled</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r19c1-t10" headers="r1c1-t10">
<p>PCTINCREASE for rollback segments</p>
</td>
<td class="cellalignment3247" headers="r19c1-t10 r1c2-t10">
<p>not allowed</p>
</td>
<td class="cellalignment3247" headers="r19c1-t10 r1c3-t10">
<p>not allowed</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r20c1-t10" headers="r1c1-t10">
<p>MAXEXTENTS storage parameters</p>
</td>
<td class="cellalignment3247" headers="r20c1-t10 r1c2-t10">
<p>not allowed</p>
</td>
<td class="cellalignment3247" headers="r20c1-t10 r1c3-t10">
<p>not allowed</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div id="ZZPRE449" class="sect2"><a id="sthref705"></a>
<h3 class="sect2">DEF_SQLCODE</h3>
<p class="subhead1"><a id="ZZPRE450"></a><a id="sthref706"></a><a id="sthref707"></a>Purpose</p>
<p>Controls whether the Pro*C/C++ precompiler generates <span class="bold">#define</span>&#39;s for SQLCODE.</p>
<p class="subhead1"><a id="ZZPRE451"></a>Syntax</p>
<p>DEF_SQLCODE={NO | YES}</p>
<p class="subhead1"><a id="ZZPRE452"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="ZZPRE453"></a>Usage Notes</p>
<p>Can be used only on the command line or in a configuration file.</p>
<p>When DEF_SQLCODE=YES, the precompiler defines SQLCODE in the generated source code as follows:</p>
<pre>#define SQLCODE sqlca.sqlcode
</pre>
<p>You can then use SQLCODE to check the results of executable SQL statement. The DEF_SQLCODE option is supplied for compliance with standards that require the use of SQLCODE.</p>
<p>In addition, you must also include the SQLCA using one of the following entries in your source code:</p>
<pre>#include &lt;sqlca.h&gt;
</pre>
<p>or</p>
<pre>EXEC SQL INCLUDE SQLCA;
</pre>
<p>If the SQLCA is not included, using this option causes a precompile time error.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE454" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref708"></a>
<h3 class="sect2"><a id="sthref709"></a>DEFINE</h3>
<p class="subhead2"><a id="ZZPRE455"></a>Purpose</p>
<p><a id="sthref710"></a>Specifies a user-defined symbol that is used to include or exclude portions of source code during a conditional precompilation.</p>
<p class="subhead2"><a id="ZZPRE456"></a>Syntax</p>
<p><code>DEFINE=</code><code><span class="codeinlineitalic">symbol</span></code></p>
<p class="subhead2"><a id="ZZPRE457"></a>Default</p>
<p><code>None</code></p>
<p class="subhead2"><a id="ZZPRE458"></a>Usage Notes</p>
<p>If you enter <code>DEFINE</code> inline, the EXEC ORACLE statement takes the following form:</p>
<pre>EXEC ORACLE DEFINE &lt;symbol&gt;;
</pre></div>
<!-- class="sect2" -->
<div id="ZZPRE459" class="sect2"><a id="sthref711"></a>
<h3 class="sect2">DURATION</h3>
<p class="subhead1"><a id="ZZPRE460"></a>Purpose</p>
<p>Sets the pin duration used by subsequent EXEC SQL OBJECT CREATE and EXEC SQL OBJECT DEREF statements. Objects in the cache are implicitly unpinned at the end of the duration.</p>
<p class="subhead1"><a id="ZZPRE461"></a>Syntax</p>
<p>DURATION={TRANSACTION | SESSION}</p>
<p class="subhead1"><a id="ZZPRE462"></a>Default</p>
<p>TRANSACTION</p>
<p class="subhead1"><a id="ZZPRE463"></a>Usage Notes</p>
<p>Can be entered inline by use of the EXEC ORACLE OPTION statement.</p>
<p>TRANSACTION means that objects are implicitly unpinned when the transaction completes.</p>
<p>SESSION means that objects are implicitly unpinned when the connection is terminated.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE464" class="sect2"><a id="sthref712"></a>
<h3 class="sect2"><a id="sthref713"></a><a id="sthref714"></a>DYNAMIC</h3>
<p class="subhead1"><a id="ZZPRE465"></a>Purpose</p>
<p>This micro option specifies the descriptor behavior in dynamic SQL Method 4. The setting of MODE determines the setting of DYNAMIC.</p>
<p class="subhead1"><a id="ZZPRE466"></a>Syntax</p>
<p>DYNAMIC={ORACLE | ANSI}</p>
<p class="subhead1"><a id="ZZPRE467"></a>Default</p>
<p>ORACLE</p>
<p class="subhead1"><a id="ZZPRE468"></a>Usage Notes</p>
<p>Cannot be entered inline by use of the EXEC ORACLE OPTION statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE469" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref715"></a>
<h3 class="sect2"><a id="sthref716"></a>ERRORS</h3>
<p class="subhead1"><a id="ZZPRE470"></a>Purpose</p>
<p><a id="sthref717"></a>Specifies whether precompiler error messages are sent to the terminal and listing file or only to the listing file.</p>
<p class="subhead1"><a id="ZZPRE471"></a>Syntax</p>
<p><code>ERRORS={YES|NO</code>}</p>
<p class="subhead1"><a id="ZZPRE472"></a>Default</p>
<p><code>YES</code></p>
<p class="subhead1"><a id="ZZPRE473"></a>Usage Notes</p>
<p>When <code>ERRORS=YES</code>, error messages are sent to the terminal and listing file.</p>
<p>When <code>ERRORS=NO</code>, error messages are sent only to the listing file.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE474" class="sect2"><a id="sthref718"></a>
<h3 class="sect2"><a id="sthref719"></a>ERRTYPE</h3>
<p class="subhead1"><a id="ZZPRE475"></a><a id="sthref720"></a>Purpose</p>
<p>Specifies an output file in which errors generated in processing type files are written. If omitted, errors are output to the screen.</p>
<p class="subhead1"><a id="ZZPRE476"></a>Syntax</p>
<p>ERRTYPE=<span class="italic">filename</span></p>
<p class="subhead1"><a id="ZZPRE477"></a>Default</p>
<p>None</p>
<p class="subhead1"><a id="ZZPRE478"></a>Usage Notes</p>
<p>Only one error file will be produced. If multiple values are entered, the last one is used by the precompiler.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE479" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref721"></a>
<h3 class="sect2">EVENTS</h3>
<p class="subhead1"><a id="ZZPRE480"></a><a id="sthref722"></a><a id="sthref723"></a>Purpose</p>
<p>Specifies that the application is interested in registering for and receiving notifications.</p>
<p class="subhead1"><a id="ZZPRE481"></a>Syntax</p>
<p>EVENTS={YES | NO}</p>
<p class="subhead1"><a id="ZZPRE482"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="ZZPRE483"></a>Usage Notes</p>
<p>Can only be entered in the command line.</p>
</div>
<!-- class="sect2" -->
<a id="BABEAFGG"></a>
<div id="ZZPRE484" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref724"></a>FIPS</h3>
<p class="subhead2"><a id="ZZPRE485"></a>Purpose</p>
<p><a id="sthref725"></a>Specifies whether extensions to ANSI/ISO SQL are flagged (by the FIPS Flagger). An extension is any SQL element that violates ANSI/ISO format or syntax rules, except privilege enforcement rules.</p>
<p class="subhead1"><a id="ZZPRE486"></a>Syntax</p>
<p><code>FIPS={YES|NO}</code></p>
<p class="subhead1"><a id="ZZPRE487"></a>Default</p>
<p><code>NO</code></p>
<p class="subhead1"><a id="ZZPRE488"></a>Usage Notes</p>
<p>When <code>FIPS=YES</code>, the <code>FIPS</code> Flagger issues warning (not error) messages if you use an Oracle extension to the ANSI/ISO embedded SQL standard (SQL92) or use a SQL92 feature in a nonconforming manner.</p>
<p><a id="sthref726"></a>The following extensions to ANSI/ISO SQL are flagged at precompile time:</p>
<ul>
<li>
<p>Array interface including the FOR clause</p>
</li>
<li>
<p>SQLCA, ORACA, and SQLDA data structures</p>
</li>
<li>
<p>Dynamic SQL including the <code>DESCRIBE</code> statement</p>
</li>
<li>
<p>Embedded PL/SQL blocks</p>
</li>
<li>
<p>Automatic datatype conversion</p>
</li>
<li>
<p>DATE, COMP-3 (Pro*COBOL only), <code>NUMBER</code>, <code>RAW</code>, <code>LONG</code> <code>RAW</code>, <code>VARRAW</code>, <code>ROWID</code>, and <code>VARCHAR</code> datatypes</p>
</li>
<li>
<p>ORACLE OPTION statement for specifying run-time options</p>
</li>
<li>
<p>EXEC IAF and EXEC TOOLS statements in user exits</p>
</li>
<li>
<p><code>CONNECT</code> statement</p>
</li>
<li>
<p><code>TYPE</code> and VAR datatype equivalencing statements</p>
</li>
<li>
<p>AT <span class="italic">db_name</span> clause</p>
</li>
<li>
<p><code>DECLARE</code>...<code>DATABASE</code>, ...<code>STATEMENT</code>, and ...<code>TABLE</code> statements</p>
</li>
<li>
<p>SQLWARNING condition in <code>WHENEVER</code> statement</p>
</li>
<li>
<p><code>DO</code> and <code>STOP</code> actions in <code>WHENEVER</code> statement</p>
</li>
<li>
<p><code>COMMENT</code> and <code>FORCE</code> <code>TRANSACTION</code> clauses in <code>COMMIT</code> statement</p>
</li>
<li>
<p><code>FORCE</code> <code>TRANSACTION</code> and <code>TO</code> <code>SAVEPOINT</code> clauses in <code>ROLLBACK</code> statement</p>
</li>
<li>
<p><code>RELEASE</code> parameter in <code>COMMIT</code> and <code>ROLLBACK</code> statements</p>
</li>
<li>
<p>Optional colon-prefixing of <code>WHENEVER</code>...DO labels and of host variables in the <code>INTO</code> clause</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ZZPRE489" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref727"></a>
<h3 class="sect2"><a id="sthref728"></a>FORMAT</h3>
<p class="subhead2"><a id="ZZPRE490"></a>Purpose</p>
<p><a id="sthref729"></a>Specifies the format of COBOL or FORTRAN input lines.</p>
<p class="subhead1"><a id="ZZPRE491"></a>Syntax</p>
<p><code>FORMAT={ANSI|TERMINAL}</code></p>
<p class="subhead2"><a id="ZZPRE492"></a>Default</p>
<p><code>ANSI</code></p>
<p class="subhead2"><a id="ZZPRE493"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The format of input lines is system-dependent. Check your system-specific Oracle manuals.</p>
<p>When <code>FORMAT=ANSI</code>, the format of input lines conforms as much as possible to the current ANSI standard.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE494" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref730"></a>
<h3 class="sect2"><a id="sthref731"></a>Globalization Support_LOCAL</h3>
<p class="subhead2"><a id="ZZPRE495"></a>Purpose</p>
<p>For Pro*COBOL only, the Globalization Support_LOCAL option determines whether Globalization Support character conversions are performed by the precompiler run-time library or by the Oracle Server.</p>
<p class="subhead1"><a id="ZZPRE496"></a>Syntax</p>
<p><code>Globalization Support_LOCAL={YES|NO}</code></p>
<p class="subhead2"><a id="ZZPRE497"></a>Default</p>
<p><code>NO</code></p>
<p class="subhead2"><a id="ZZPRE498"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>When <code>Globalization Support_LOCAL=YES</code>, the run-time library (SQLLIB) locally performs blank-padding and blank-stripping for host variables that have multibyte Globalization Support datatypes.</p>
<p>When Globalization <code>Support_LOCAL=NO</code>, blank-padding and blank-stripping operations are <span class="italic">not</span> performed locally for host variables that have multibyte Globalization Support datatypes.</p>
<p>Oracle does not perform any blank-padding or blank-stripping of Globalization Support variables. When Globalization Support_LOCAL=NO, the Oracle Server returns an error upon executing a SQL statement that uses multibyte Globalization Support data.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE499" class="sect2"><a id="sthref732"></a>
<h3 class="sect2"><a id="sthref733"></a><a id="sthref734"></a>HEADER</h3>
<p class="subhead1"><a id="ZZPRE500"></a><a id="sthref735"></a><a id="sthref736"></a>Purpose</p>
<p>Permits precompiled header files. Specifies the file extension for precompiled header files.</p>
<p class="subhead1"><a id="ZZPRE501"></a>Syntax</p>
<p>HEADER=<span class="italic">extension</span></p>
<p class="subhead1"><a id="ZZPRE502"></a>Default</p>
<p>NONE</p>
<p class="subhead1"><a id="ZZPRE503"></a>Usage Notes</p>
<p>When precompiling a header file, this option is required and is used to specify the file extension for the output file that is created by precompiling that header file.</p>
<p>When precompiling an ordinary Pro*C/C++ program this option is optional. When given, it enables the use of the precompiled header mechanism during the precompilation of that Pro*C/C++ program.</p>
<p>In both cases, this option also specifies the file extension to use when processing a #include directive. If an #include file exists with the specified extension, Pro*C/C++ assumes the file is a precompiled header file previously generated by Pro*C/C++. Pro*C/C++ will then instantiate the data from that file rather than process the #include directive and precompile the included header file.</p>
<p>This option is only allowed on the command line or in a configuration file. It is not allowed inline. When using this option, specify the file extension only. Do not include any file separators. For example, do not include a period &#39;.&#39; in the extension.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE504" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref737"></a>
<h3 class="sect2"><a id="sthref738"></a>HOLD_CURSOR</h3>
<p class="subhead1"><a id="ZZPRE505"></a><a id="sthref739"></a><a id="sthref740"></a>Purpose</p>
<p>Specifies how the cursors for SQL statements and PL/SQL blocks are handled in the cursor cache.</p>
<p class="subhead1"><a id="ZZPRE506"></a>Syntax</p>
<p><code>HOLD_CURSOR={YES|NO}</code></p>
<p class="subhead1"><a id="ZZPRE507"></a>Default</p>
<p><code>NO</code></p>
<p class="subhead1"><a id="ZZPRE508"></a>Usage Notes</p>
<p>You can use <code>HOLD_CURSOR</code> to improve the performance of your program. For more information, refer to <a href="appc.htm#BABCHGDI">Appendix C</a></p>
<p>When a SQL data manipulation statement is executed, its associated cursor is linked to an entry in the cursor cache. The cursor cache entry is in turn linked to an Oracle private SQL area, which stores information needed to process the statement. <code>HOLD_CURSOR</code> controls what happens to the link between the cursor and cursor cache.</p>
<p>When <code>HOLD_CURSOR=NO</code>, after Oracle executes the SQL statement and the cursor is closed, the precompiler marks the link as reusable. The link is reused as soon as the cursor cache entry to which it points is needed for another SQL statement. This frees memory allocated to the private SQL area and releases parse locks.</p>
<p>When <code>HOLD_CURSOR=YES</code> and <code>RELEASE_CURSOR=NO</code>, the link is maintained; the precompiler does not reuse it. This is useful for SQL statements that are executed often because it speeds up subsequent executions. There is no need to reparse the statement or allocate memory for an Oracle private SQL area.</p>
<p>For inline use with implicit cursors, set <code>HOLD_CURSOR</code> before executing the SQL statement. For inline use with explicit cursors, set <code>HOLD_CURSOR</code> before opening the cursor.</p>
<p>Note that <code>RELEASE_CURSOR=YES</code> overrides <code>HOLD_CURSOR=YES</code> and that <code>HOLD_CURSOR</code>=<code>NO</code> overrides <code>RELEASE_CURSOR=NO</code>. For information showing how these two options interact, refer to <a href="appc.htm#BABJGAGG">Table C-1</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE509" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref741"></a>
<h3 class="sect2"><a id="sthref742"></a>HOST</h3>
<p class="subhead2"><a id="ZZPRE510"></a>Purpose</p>
<p><a id="sthref743"></a>Specifies the host language to be used.</p>
<p class="subhead2"><a id="ZZPRE511"></a>Syntax</p>
<p><code>HOST={COB74|COBOL}</code></p>
<p class="subhead2"><a id="ZZPRE512"></a>Default</p>
<p>COBOL</p>
<p class="subhead2"><a id="ZZPRE513"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>COB74 refers to the 1974 version of ANSI-approved COBOL. COBOL refers to 1985 version. Other values might be available on your platform.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE514" class="sect2"><a id="sthref744"></a>
<h3 class="sect2">IMPLICIT_SVPT</h3>
<p class="subhead1"><a id="ZZPRE515"></a><a id="sthref745"></a><a id="sthref746"></a>Purpose</p>
<p>Controls whether an implicit savepoint is taken before the start of a new batched insert.</p>
<p class="subhead1"><a id="ZZPRE516"></a>Syntax</p>
<p>implicit_svpt={YES|NO}</p>
<p class="subhead1"><a id="ZZPRE517"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="ZZPRE518"></a>Usage Notes</p>
<p>If implict_svpt=yes, a savepoint is taken before the start of a new batch of rows. If an error occurs on the insert, an implicit &#34;rollback to savepoint&#34; is executed. This option exists for DB/2 compatibility, the obvious downside being the extra round-trip.</p>
<p>If implict_svpt=no, there is no implicit savepoint taken. If an error occurs on the buffered insert, then it is reported back to the application, but no rollback is executed.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE519" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref747"></a>
<h3 class="sect2"><a id="sthref748"></a>INAME</h3>
<p class="subhead2"><a id="ZZPRE520"></a>Purpose</p>
<p><a id="sthref749"></a>Specifies the name of the input file.</p>
<p class="subhead2"><a id="ZZPRE521"></a>Syntax</p>
<p><code>INAME=</code><code><span class="codeinlineitalic">filename</span></code></p>
<p class="subhead2"><a id="ZZPRE522"></a>Default</p>
<p><code>None</code></p>
<p class="subhead2"><a id="ZZPRE523"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>When specifying the name of your input file on the command line, the keyword <span class="bold">INAME</span> is optional. For example, in Pro*COBOL, you can specify <span class="italic">myprog.pco</span> instead of <code>INAME=myprog.pco</code>.</p>
<p>The precompiler assumes the standard input file extension (refer to <a href="#CACFAHAH">Table 6-5</a>). So, you need not use a file extension when specifying INAME unless the extension is nonstandard. For example, in Pro*FORTRAN, you can specify <span class="italic">myprog</span> instead of <span class="italic">myprog.pfo</span>.</p>
<div id="ZZPRE524" class="tblformal">
<p class="titleintable"><a id="sthref750"></a><a id="CACFAHAH"></a>Table 6-5 Input File Extensions</p>
<table class="cellalignment3250" title="Input File Extensions" summary="host language" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t11">Host Language</th>
<th class="cellalignment3246" id="r1c2-t11">Standard File Extension</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t11" headers="r1c1-t11">
<p>COBOL</p>
</td>
<td class="cellalignment3247" headers="r2c1-t11 r1c2-t11">
<p><code>pco</code></p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t11" headers="r1c1-t11">
<p>FORTRAN</p>
</td>
<td class="cellalignment3247" headers="r3c1-t11 r1c2-t11">
<p><code>pfo</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>For Pro*COBOL only, if you use a nonstandard input file extension when specifying <code>INAME</code>, you must also specify HOST.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE525" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref751"></a>
<h3 class="sect2"><a id="sthref752"></a>INCLUDE</h3>
<p class="subhead2"><a id="ZZPRE526"></a>Purpose</p>
<p><a id="sthref753"></a>Specifies a directory path for EXEC SQL INCLUDE files. It only applies to operating systems that use directories.</p>
<p class="subhead2"><a id="ZZPRE527"></a>Syntax</p>
<p><code>INCLUDE=path</code></p>
<p class="subhead2"><a id="ZZPRE528"></a>Default</p>
<p>Current directory</p>
<p class="subhead2"><a id="ZZPRE529"></a>Usage Notes</p>
<p>Typically, you use <code>INCLUDE</code> to specify a directory path for the SQLCA and ORACA files. The precompiler searches first in the current directory, then in the directory specified by <code>INCLUDE</code>, and finally in a directory for standard <code>INCLUDE</code> files. Hence, you need not specify a directory path for standard files such as the SQLCA and ORACA.</p>
<p>You must still use <code>INCLUDE</code> to specify a directory path for nonstandard files unless they are stored in the current directory. You can specify more than one path on the command line, as follows:</p>
<pre>... INCLUDE=&lt;path1&gt; INCLUDE=&lt;path2&gt; ...
</pre>
<p>The precompiler searches first in the current directory, then in the directory named by <span class="italic">path1</span>, then in the directory named by <span class="italic">path2</span>, and finally in the directory for standard <code>INCLUDE</code> files.</p>
<p>Remember, the precompiler searches for a file in the current directory first--even if you specify a directory path. So, if the file you want to <code>INCLUDE</code> resides in another directory, make sure no file with the same name resides in the current directory.</p>
<p>The syntax for specifying a directory path is system-specific. Follow the conventions of your operating system.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE530" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref754"></a>
<h3 class="sect2"><a id="sthref755"></a>IRECLEN</h3>
<p class="subhead2"><a id="ZZPRE531"></a>Purpose</p>
<p><a id="sthref756"></a>Specifies the record length of the input file.</p>
<p class="subhead2"><a id="ZZPRE532"></a>Syntax</p>
<p><code>IRECLEN=</code><code><span class="codeinlineitalic">integer</span></code></p>
<p class="subhead2"><a id="ZZPRE533"></a>Default</p>
<p><code>80</code></p>
<p class="subhead2"><a id="ZZPRE534"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The value you specify for IRECLEN should not exceed the value of ORECLEN. The maximum value allowed is system-dependent.</p>
</div>
<!-- class="sect2" -->
<a id="i5331"></a>
<div id="ZZPRE535" class="sect2">
<h3 class="sect2">INTYPE</h3>
<p class="subhead1"><a id="ZZPRE536"></a><a id="sthref757"></a><a id="sthref758"></a>Purpose</p>
<p>Specifies one or more OTT-generated type files (only needed if Object types are used in the application).</p>
<p class="subhead1"><a id="ZZPRE537"></a>Syntax</p>
<p>INTYPE=(<span class="italic">file_1</span>,<span class="italic">file_2</span>,...,<span class="italic">file_n</span>)</p>
<p class="subhead1"><a id="ZZPRE538"></a>Default</p>
<p>None</p>
<p class="subhead1"><a id="ZZPRE539"></a>Usage Notes</p>
<p>There will be one type file for each Object type in the Pro*C/C++ code.</p>
</div>
<!-- class="sect2" -->
<a id="i10983"></a>
<div id="ZZPRE540" class="sect2">
<h3 class="sect2">LINES</h3>
<p class="subhead1"><a id="ZZPRE541"></a><a id="sthref759"></a><a id="sthref760"></a>Purpose</p>
<p>Specifies whether the Pro*C/C++ precompiler adds <span class="bold">#line</span> preprocessor directives to its output file.</p>
<p class="subhead1"><a id="ZZPRE542"></a>Syntax</p>
<p>LINES={YES | NO}</p>
<p class="subhead1"><a id="ZZPRE543"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="ZZPRE544"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>The LINES option helps with debugging.</p>
<p>When LINES=YES, the Pro*C/C++ precompiler adds <span class="bold">#line</span> preprocessor directives to its output file.</p>
<p>Normally, your C compiler increments its line count after each input line is processed. The <span class="bold">#line</span> directives force the compiler to reset its input line counter so that lines of precompiler-generated code are not counted. Moreover, when the name of the input file changes, the next <span class="bold">#line</span> directive specifies the new filename.</p>
<p>The C compiler uses the line numbers and filenames to show the location of errors. Thus, error messages issued by the C compiler always refer to your original source files, not the modified (precompiled) source file. This also enables stepping through the original source code using most debuggers.</p>
<p>When LINES=NO (the default), the precompiler adds no <span class="bold">#line</span> directives to its output file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Pro*C/C++ precompiler does not support the <span class="bold">#line</span> directive. You cannot directly code <span class="bold">#line</span> directives in the precompiler source. But you can still use the LINES= option to have the precompiler insert <span class="bold">#line</span> directives for you.</div>
</div>
<!-- class="sect2" -->
<div id="ZZPRE545" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref761"></a>
<h3 class="sect2"><a id="sthref762"></a>LITDELIM<a id="sthref763"></a></h3>
<p class="subhead2"><a id="ZZPRE546"></a><a id="sthref764"></a>Purpose</p>
<p><a id="sthref765"></a>For Pro*COBOL only, the LITDELIM option specifies the delimiter for string constants and literals.</p>
<p class="subhead1"><a id="ZZPRE547"></a>Syntax</p>
<p><code>LITDELIM={APOST|QUOTE}</code></p>
<p class="subhead1"><a id="ZZPRE548"></a>Default</p>
<p><code>QUOTE</code></p>
<p class="subhead1"><a id="ZZPRE549"></a>Usage Notes</p>
<p>When <code>LITDELIM=APOST</code>, the precompiler uses apostrophes when generating COBOL code. If you specify <code>LITDELIM=QUOTE</code>, quotation marks are used, as in</p>
<pre>CALL &#34;SQLROL&#34; USING SQL-TMP0.
</pre>
<p>In SQL statements, you must use quotation marks to delimit identifiers containing special or lowercase characters, as in</p>
<pre>EXEC SQL CREATE TABLE &#34;Emp2&#34; END-EXEC.
</pre>
<p>but you must use apostrophes to delimit string constants, as in</p>
<pre>EXEC SQL SELECT ENAME FROM EMP WHERE JOB = &#39;CLERK&#39; END-EXEC.
</pre>
<p>Regardless of which delimiter is used in the Pro*COBOL source file, the precompiler generates the delimiter specified by the LITDELIM value.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE550" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref766"></a>
<h3 class="sect2"><a id="sthref767"></a>LNAME<a id="sthref768"></a></h3>
<p class="subhead2"><a id="ZZPRE551"></a>Purpose</p>
<p>Specifies a nondefault name for the listing file.</p>
<p class="subhead2"><a id="ZZPRE552"></a>Syntax</p>
<p><code>LNAME=filename</code></p>
<p class="subhead2"><a id="ZZPRE553"></a>Default</p>
<p><span class="italic">input</span>.LIS, where <span class="italic">input</span> is the base name of the input file.</p>
<p class="subhead2"><a id="ZZPRE554"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>By default, the listing file is written to the current directory.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE555" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref769"></a>
<h3 class="sect2"><a id="sthref770"></a>LRECLEN</h3>
<p class="subhead2"><a id="ZZPRE556"></a>Purpose</p>
<p><a id="sthref771"></a>Specifies the record length of the listing file.</p>
<p class="subhead2"><a id="ZZPRE557"></a>Syntax</p>
<p><code>LRECLEN=</code><code><span class="codeinlineitalic">integer</span></code></p>
<p class="subhead2"><a id="ZZPRE558"></a>Default</p>
<p><code>132</code></p>
<p class="subhead2"><a id="ZZPRE559"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The value of LRECLEN can range from 80 through 255. If you specify a value the range, 80 is used instead. If you specify a value earlier the range, 255 is used instead. LRECLEN should exceed IRECLEN by at least 8 to allow for the insertion of line numbers.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE560" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref772"></a>
<h3 class="sect2"><a id="sthref773"></a>LTYPE</h3>
<p class="subhead2"><a id="ZZPRE561"></a>Purpose</p>
<p><a id="sthref774"></a>Specifies the listing type.</p>
<p class="subhead2"><a id="ZZPRE562"></a>Syntax</p>
<p><code>LTYPE={LONG|SHORT|NONE}</code></p>
<p class="subhead2"><a id="ZZPRE563"></a>Default</p>
<p><code>LONG</code></p>
<p class="subhead2"><a id="ZZPRE564"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>When <code>LTYPE=LONG</code>, input lines appear in the listing file. When <code>LTYPE=SHORT</code>, input lines do <span class="italic">not</span> appear in the listing file. When <code>LTYPE=NONE</code>, no listing file is created.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE565" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref775"></a>
<h3 class="sect2"><a id="sthref776"></a>MAXLITERAL<a id="sthref777"></a></h3>
<p class="subhead2"><a id="ZZPRE566"></a>Purpose</p>
<p>Specifies the maximum length of string literals generated by the precompiler so that compiler limits are not exceeded. For example, if your compiler cannot handle string literals longer than 132 characters, you can specify MAXLITERAL=132 on the command line.</p>
<p class="subhead2"><a id="ZZPRE567"></a>Syntax</p>
<p><code>MAXLITERAL=</code><code><span class="codeinlineitalic">integer</span></code></p>
<p class="subhead2"><a id="ZZPRE568"></a>Default</p>
<p>The default is precompiler-specific as shown here:</p>
<div class="inftblinformal">
<table class="cellalignment3245" title="percompiler" summary="percompiler" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t13">Precompiler</th>
<th class="cellalignment3246" id="r1c2-t13">Default</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t13" headers="r1c1-t13">Pro*COBOL</td>
<td class="cellalignment3247" headers="r2c1-t13 r1c2-t13">256</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t13" headers="r1c1-t13">Pro*FORTRAN</td>
<td class="cellalignment3247" headers="r3c1-t13 r1c2-t13">1000</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead2"><a id="ZZPRE569"></a>Usage Notes</p>
<p>The maximum value of <code>MAXLITERAL</code> is compiler-dependent. The default value is language-dependent, but you might have to specify a lower value. For example, some COBOL compilers cannot handle string literals longer than 132 characters, so you would specify <code>MAXLITERAL=132.</code></p>
<p>Strings that exceed the length specified by <code>MAXLITERAL</code> are divided during precompilation, then recombined (concatenated) at run time.</p>
<p>You can enter <code>MAXLITERAL</code> inline but your program can set its value just once, and the EXEC ORACLE statement must precede the first EXEC SQL statement. Otherwise, the precompiler issues a warning message, ignores the extra or misplaced EXEC ORACLE statement, and continues processing.</p>
</div>
<!-- class="sect2" -->
<a id="BABFHDDH"></a>
<div id="ZZPRE570" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref778"></a>MAXOPENCURSORS<a id="sthref779"></a></h3>
<p class="subhead2"><a id="ZZPRE571"></a>Purpose</p>
<p>Specifies the number of concurrently open cursors that the precompiler tries to keep cached.</p>
<p class="subhead2"><a id="ZZPRE572"></a>Syntax</p>
<p><code>MAXOPENCURSORS=</code><code><span class="codeinlineitalic">integer</span></code></p>
<p class="subhead2"><a id="ZZPRE573"></a>Default</p>
<p>10</p>
<p class="subhead2"><a id="ZZPRE574"></a>Usage Notes</p>
<p>You can use MAXOPENCURSORS to improve the performance of your program. For more information, refer to <a href="appc.htm#BABCHGDI">Appendix C</a></p>
<p>When precompiling separately, use MAXOPENCURSORS as described in &#34;Separate Precompilations&#34;.</p>
<p>MAXOPENCURSORS specifies the <span class="italic">initial</span> size of the SQLLIB cursor cache. If a new cursor is needed, and there are no free cache entries, Oracle tries to reuse an entry. Its success depends on the values of HOLD_CURSOR and RELEASE_CURSOR, and, for explicit cursors, on the status of the cursor itself. Oracle allocates an additional cache entry if it cannot find one to reuse. If necessary, Oracle keeps allocating additional cache entries until it runs out of memory or reaches the limit set by OPEN_CURSORS. To avoid a &#34;maximum open cursors exceeded&#34; Oracle error, MAXOPENCURSORS must be lower than OPEN_CURSORS by at least 6.</p>
<p>As your program&#39;s need for concurrently open cursors grows, you might want to re-specify MAXOPENCURSORS to match the need. A value of 45 to 50 is not uncommon, but remember that each cursor requires another private SQL area in the user process memory space. The default value of 10 is adequate for most programs.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE575" class="sect2"><a id="sthref780"></a>
<h3 class="sect2">MAX_ROW_INSERT</h3>
<p class="subhead1"><a id="ZZPRE576"></a><a id="sthref781"></a><a id="sthref782"></a>Purpose</p>
<p>Controls the number of rows that need to be buffered before executing the INSERT statement.</p>
<p class="subhead1"><a id="ZZPRE577"></a>Syntax</p>
<p>max_row_insert={number of rows to be buffered}</p>
<p class="subhead1"><a id="ZZPRE578"></a>Default</p>
<p>0</p>
<p class="subhead1"><a id="ZZPRE579"></a>Usage Notes</p>
<p>Any number greater than zero enables buffered insert feature and buffers that many rows before executing the INSERT statement.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE580" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref783"></a>
<h3 class="sect2"><a id="sthref784"></a>MODE</h3>
<p class="subhead2"><a id="ZZPRE581"></a>Purpose</p>
<p><a id="sthref785"></a>Specifies whether your program observes Oracle practices or complies with the current ANSI SQL standard.</p>
<p class="subhead2"><a id="ZZPRE582"></a>Syntax</p>
<p><code>MODE={ANSI|ISO|ANSI14|ISO14|ANSI13|ISO13|ORACLE}</code></p>
<p class="subhead2"><a id="ZZPRE583"></a>Default</p>
<p><code>ORACLE</code></p>
<p class="subhead2"><a id="ZZPRE584"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The following pairs of <code>MODE</code> values are equivalent: ANSI and ISO, ANSI14 and ISO14, ANSI13 and ISO13.</p>
<p>When <code>MODE=ORACLE</code> (the default), your embedded SQL program observes Oracle practices.</p>
<p>When <code>MODE={ANSI14|ANSI13}</code>, your program complies closely with the current ANSI SQL standard.</p>
<p>When <code>MODE=ANSI</code>, your program complies <span class="italic">fully</span> with the ANSI standard and the following changes go into effect:</p>
<ul>
<li>
<p>CHAR column values, <code>USER</code> pseudocolumn values, character host values, and quoted literals are treated like ANSI fixed-length character strings. And, ANSI-compliant blank-padding semantics are used when you assign, compare, <code>INSERT</code>, <code>UPDATE</code>, <code>SELECT</code>, or <code>FETCH</code> such values.</p>
</li>
<li>
<p>Issuing a <code>COMMIT</code> or <code>ROLLBACK</code> closes all explicit cursors. (When <code>MODE={ANSI13|ORACLE}</code>, a commit or rollback closes only cursors referenced in a <code>CURRENT OF</code> clause.)</p>
</li>
<li>
<p>You cannot OPEN a cursor that is already open or <code>CLOSE</code> a cursor that is already closed. (When <code>MODE=ORACLE</code>, you can reOPEN an open cursor to avoid reparsing.)</p>
</li>
<li>
<p>The &#34;no data found&#34; Oracle warning code returned to SQLCODE becomes +100 instead of +1403. The error message text does not change.</p>
</li>
<li>
<p>No error message is issued if Oracle assigns a truncated column value to an output host variable.</p>
</li>
</ul>
<p>When <code>MODE={ANSI|ANSI14},</code> a 4-byte integer variable named SQLCODE (SQLCOD in FORTRAN) or a 5-byte character variable named SQLSTATE (SQLSTA in FORTRAN) must be declared. For more information, refer to <a href="ch_eight.htm#CEGJICIG">&#34;Error Handling Alternatives&#34;</a>.</p>
<p><a href="#BABIBIDD">Table 6-4</a> shows how the MODE and DBMS settings interact. Other combinations are incompatible or are not recommended.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE585" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref786"></a>
<h3 class="sect2"><a id="sthref787"></a>MULTISUBPROG<a id="sthref788"></a></h3>
<p class="subhead2"><a id="ZZPRE586"></a>Purpose</p>
<p>For Pro*FORTRAN only, the MULTISUBPROG option specifies whether the Pro*FORTRAN precompiler generates <code>COMMON</code> statements and <code>BLOCK DATA</code> subprograms.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This option allows Pro*FORTRAN release 1.3 applications to migrate to later releases. You can ignore the MUTISUBPROG option if you are not migrating Pro*FORTRAN release 1.3 source code.</div>
<p class="subhead2"><a id="ZZPRE587"></a>Syntax</p>
<p><code>MULTISUBPROG={YES|NO}</code></p>
<p class="subhead2"><a id="ZZPRE588"></a>Default</p>
<p><code>YES</code></p>
<p class="subhead2"><a id="ZZPRE589"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>When <code>MULTISUBPROG=YES</code>, the precompiler generates <code>COMMON</code> statements and <code>BLOCK DATA</code> subprograms. Your host program does not access the <code>COMMON</code> blocks directly, but it allows two or more program units in the same precompilation unit to contain SQL statements.</p>
<p>However, the precompiler can give <code>COMMON</code> blocks defined in different output files the same name. If you link the files into an executable program, you get a link-time or run-time error. To solve this problem, you can rename the input files or override the default COMMON block names by specifying the option <code>COMMON_NAME</code>. To avoid the problem, specify <code>MULTISUBPROG=NO</code>.</p>
<p>Specify <code>MULTISUBPROG=NO</code> if your Pro*FORTRAN source code has only a single subprogram in each source file (this was the restriction in release 1.3). When <code>MULTISUBPROG=NO</code>, the <code>COMMON_BLOCK</code> option is ignored and the precompiler generates no <code>COMMON</code> statements or <code>BLOCK DATA</code> subprograms. Every program unit that contains executable SQL statements <span class="italic">must</span> have a Declare Section. Otherwise, you get a precompilation error. For input files that contain more than one embedded SQL program unit, the precompiler generates the same declarations in each unit.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE590" class="sect2"><a id="sthref789"></a>
<h3 class="sect2">NATIVE_TYPES</h3>
<p class="subhead1"><a id="ZZPRE591"></a><a id="sthref790"></a><a id="sthref791"></a>Purpose</p>
<p>Support for native float/double.</p>
<p class="subhead1"><a id="ZZPRE592"></a>Syntax</p>
<p>NATIVE_TYPES = {YES|NO}</p>
<p class="subhead1"><a id="ZZPRE593"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="ZZPRE594"></a>Usage Notes</p>
<p>The native float and native double datatypes represent the single-precision and double-precision floating point values. They are represented natively, that is, in the host system&#39;s floating point format.</p>
</div>
<!-- class="sect2" -->
<a id="i8234"></a>
<div id="ZZPRE595" class="sect2">
<h3 class="sect2">NLS_CHAR</h3>
<p class="subhead1"><a id="ZZPRE596"></a><a id="sthref792"></a><a id="sthref793"></a>Purpose</p>
<p>Specifies which C host character variables are treated by the precompiler as multibyte character variables.</p>
<p class="subhead1"><a id="ZZPRE597"></a>Syntax</p>
<p>NLS_CHAR=<span class="italic">varname</span> or NLS_CHAR=(<span class="italic">var_1</span>,<span class="italic">var_2</span>,...,<span class="italic">var_n</span>)</p>
<p class="subhead1"><a id="ZZPRE598"></a>Default</p>
<p>None.</p>
<p class="subhead1"><a id="ZZPRE599"></a>Usage Notes</p>
<p>Can be entered only on the command line, or in a configuration file.</p>
<p>This option provides the ability to specify at precompile time a list of the names of one or more host variables that the precompiler must treat as multibyte character variables. You can specify only C <span class="italic">char</span> variables or Pro*C/C++ VARCHARs using this option.</p>
<p>If you specify in the option list a variable that is not declared in your program, then the precompiler generates no error.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE600" class="sect2"><a id="sthref794"></a>
<h3 class="sect2">NLS_LOCAL</h3>
<p class="subhead1"><a id="ZZPRE601"></a><a id="sthref795"></a><a id="sthref796"></a>Purpose</p>
<p>Determines whether multibyte character set conversions are performed by the precompiler run-time library, SQLLIB, or by the database server.</p>
<p class="subhead1"><a id="ZZPRE602"></a>Syntax</p>
<p>NLS_LOCAL={NO | YES}</p>
<p class="subhead1"><a id="ZZPRE603"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="ZZPRE604"></a>Usage Notes</p>
<p>When set to YES, local multibyte support is provided by Pro*C/C++ and the SQLLIB library. The option NLS_CHAR must be used to indicate which C host variables are multibyte.</p>
<p>When set to NO, Pro*C/C++ will use the database server support for multibyte objects. Set NLS_LOCAL to NO for all new applications.</p>
<p>Environment variable NLS_NCHAR must be set to a valid fixed-width National Character Set. Variable-width National Character Sets are not supported.</p>
<p>Can be entered only on the command line, or in a configuration file.</p>
</div>
<!-- class="sect2" -->
<a id="i5481"></a>
<div id="ZZPRE605" class="sect2">
<h3 class="sect2">OBJECTS</h3>
<p class="subhead1"><a id="ZZPRE606"></a><a id="sthref797"></a><a id="sthref798"></a>Purpose</p>
<p>Requests support for object types.</p>
<p class="subhead1"><a id="ZZPRE607"></a>Syntax</p>
<p>OBJECTS={YES | NO}</p>
<p class="subhead1"><a id="ZZPRE608"></a>Default</p>
<p>YES</p>
<p class="subhead1"><a id="ZZPRE609"></a>Usage Notes</p>
<p>Can only be entered in the command line.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE610" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref799"></a>
<h3 class="sect2"><a id="sthref800"></a><a id="sthref801"></a>ONAME</h3>
<p class="subhead2"><a id="ZZPRE611"></a>Purpose</p>
<p>Specifies the name of the output file.</p>
<p class="subhead1"><a id="ZZPRE612"></a>Syntax</p>
<p><code>ONAME=</code><code><span class="codeinlineitalic">filename</span></code></p>
<p class="subhead1"><a id="ZZPRE613"></a>Default</p>
<p><code>System-dependent</code></p>
<p class="subhead1"><a id="ZZPRE614"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>Use this option to specify the name of the output file, where the name differs from that of the input file. For example, if you issue</p>
<pre>procob INAME=my_test
</pre>
<p>the default output filename is <span class="italic">my_test.cob</span>. If you want the output filename to be <span class="italic">my_test_1.cob</span>, issue the command</p>
<pre>procob INAME=my_test ONAME=my_test_1.cob
</pre>
<p>Note that you should add the <span class="italic">.cob</span> extension to files specified using ONAME. There is no default extension with the ONAME option.</p>
<p>Oracle recommends that you not let the output filename default, but rather name it explicitly using ONAME.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE615" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref802"></a>
<h3 class="sect2"><a id="sthref803"></a><a id="sthref804"></a>ORACA</h3>
<p class="subhead2"><a id="ZZPRE616"></a>Purpose</p>
<p>Specifies whether a program can use the Oracle Communications Area (ORACA).</p>
<p class="subhead1"><a id="ZZPRE617"></a>Syntax</p>
<p><code>ORACA={YES|NO}</code></p>
<p class="subhead1"><a id="ZZPRE618"></a>Default</p>
<p><code>NO</code></p>
<p class="subhead1"><a id="ZZPRE619"></a>Usage Notes</p>
<p>When <code>ORACA=YE</code>S, you must place the <code>INCLUDE</code> ORACA statement in your program.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE620" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref805"></a>
<h3 class="sect2"><a id="sthref806"></a><a id="sthref807"></a>ORECLEN</h3>
<p class="subhead2"><a id="ZZPRE621"></a>Purpose</p>
<p>Specifies the record length of the output file.</p>
<p class="subhead2"><a id="ZZPRE622"></a>Syntax</p>
<p><code>ORECLEN=</code><code><span class="codeinlineitalic">integer</span></code></p>
<p class="subhead2"><a id="ZZPRE623"></a>Default</p>
<p><span class="bold">80</span></p>
<p class="subhead1"><a id="ZZPRE624"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The value you specify for ORECLEN should equal or exceed the value of IRECLEN. The maximum value allowed is system-dependent.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE625" class="sect2"><a id="sthref808"></a>
<h3 class="sect2">OUTLINE</h3>
<p class="subhead1"><a id="ZZPRE626"></a><a id="sthref809"></a><a id="sthref810"></a>Purpose</p>
<p>Indicates that the outline SQL file must be generated for the SQL statements.</p>
<p class="subhead1"><a id="ZZPRE627"></a>Syntax</p>
<p>outline={yes | no | category_name}</p>
<p class="subhead1"><a id="ZZPRE628"></a>Default</p>
<p>no</p>
<p class="subhead1"><a id="ZZPRE629"></a>Usage Notes</p>
<p>The outline SQL file should be in the DEFAULT category if the value is <code>yes</code> and the generated outline format is</p>
<pre>DEFAULT_&lt;filename&gt;_&lt;filetype&gt;_&lt;sequence_no&gt;
</pre>
<p>If the category name is mentioned, then the SQL file should be generated in the category mentioned. The generated outline format for this is</p>
<pre>&lt;category_name&gt;_&lt;filename&gt;_&lt;filetype&gt;_&lt;sequence_no&gt;
</pre>
<p>The outline SQL file is not generated if the value is <code>no</code>.</p>
<p>Semantic check should be full when this option is turned on, which means option sqlcheck=full/semantics. If sqlcheck=syntax/limited/none, then error will be generated.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE630" class="sect2"><a id="sthref811"></a>
<h3 class="sect2">OUTLNPREFIX</h3>
<p class="subhead1"><a id="ZZPRE631"></a><a id="sthref812"></a><a id="sthref813"></a>Purpose</p>
<p>Controls the generation of the outline names.</p>
<p class="subhead1"><a id="ZZPRE632"></a>Syntax</p>
<p>outlnprefix={none | prefix_name}</p>
<p class="subhead1"><a id="ZZPRE633"></a>Default</p>
<p>no</p>
<p class="subhead1"><a id="ZZPRE634"></a>Usage Notes</p>
<p>If outlnprefix=prefix_name, then the outline format</p>
<pre>&lt;category_name&gt;_&lt;filename&gt;_&lt;filetype&gt;
</pre>
<p>is replaced with <code>&lt;prefix_name&gt;</code> for the outline names.</p>
<p>If the length of the outline name exceeds 30 bytes, then this option is helpful for the user who can just specify the prefix name.</p>
<p>If outlnprefix=none, then the outline names are generated by the system. The generated format is</p>
<pre>&lt;category_name&gt;_&lt;filename&gt;_&lt;filetype&gt;_&lt;sequence_no&gt;
</pre>
<p>Semantic check should be full when this option is turned on, which means option sqlcheck=full/semantics. If sqlcheck=syntax/limited/none, or outline=false, or both, then an error will be generated.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE635" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref814"></a>
<h3 class="sect2"><a id="sthref815"></a><a id="sthref816"></a>PAGELEN</h3>
<p class="subhead2"><a id="ZZPRE636"></a>Purpose</p>
<p>Specifies the number of lines in each physical page of the listing file.</p>
<p class="subhead1"><a id="ZZPRE637"></a>Syntax</p>
<p><code>PAGELEN=</code><code><span class="codeinlineitalic">integer</span></code></p>
<p class="subhead1"><a id="ZZPRE638"></a>Default</p>
<p><code>66</code></p>
<p class="subhead1"><a id="ZZPRE639"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The maximum value allowed is system-dependent.</p>
</div>
<!-- class="sect2" -->
<a id="i10029"></a>
<div id="ZZPRE640" class="sect2">
<h3 class="sect2">PARSE</h3>
<p class="subhead1"><a id="ZZPRE641"></a><a id="sthref817"></a><a id="sthref818"></a>Purpose</p>
<p>Specifies the way that the Pro*C/C++ precompiler parses the source file.</p>
<p class="subhead1"><a id="ZZPRE642"></a>Syntax</p>
<p>PARSE={FULL | PARTIAL | NONE}</p>
<p class="subhead1"><a id="ZZPRE643"></a>Default</p>
<p>FULL</p>
<p class="subhead1"><a id="ZZPRE644"></a>Usage Notes</p>
<p>To generate C++ compatible code, the PARSE option must be either NONE or PARTIAL.</p>
<p>If PARSE=NONE or PARSE=PARTIAL, all host variables must be declared inside a Declare Section.</p>
<p>The variable SQLCODE must also be declared inside a declare section, or it cannot be relied on to detect errors. Check the default value of PARSE for your platform.</p>
<p>If PARSE=FULL, the C parser is used, and it does not understand C++ constructs, such as classes, in your code.</p>
<p>With PARSE=FULL or PARSE=PARTIAL Pro*C/C++ fully supports C preprocessor directives, such as <span class="bold">#define</span>, <span class="bold">#ifdef</span>, and so on. However, with PARSE=NONE conditional preprocessing is supported by EXEC ORACLE statements.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Some platforms have the default value of PARSE as other than FULL. See your system-dependent documentation.</div>
</div>
<!-- class="sect2" -->
<div id="ZZPRE645" class="sect2"><a id="sthref819"></a>
<h3 class="sect2">PREFETCH<a id="sthref820"></a><a id="sthref821"></a></h3>
<p class="subhead1"><a id="ZZPRE646"></a>Purpose</p>
<p>Use this option to speed up queries by pre-fetching several rows.</p>
<p class="subhead1"><a id="ZZPRE647"></a>Syntax</p>
<p>PREFETCH=<span class="italic">integer</span></p>
<p class="subhead1"><a id="ZZPRE648"></a>Default</p>
<p>1</p>
<p class="subhead1"><a id="ZZPRE649"></a>Usage Notes</p>
<p>Can be used in a configuration file or on the command-line. The value of the integer is used for execution of all queries using explicit cursors, subject to the rules of precedence.</p>
<p>When used inline it must placed before OPEN statements with explicit cursors. Then the number of rows pre-fetched when that OPEN is done is determined by the last inline PREFETCH option in effect.</p>
<p>The value range allowed is 0.. 65535.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE650" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref822"></a>
<h3 class="sect2"><a id="sthref823"></a><a id="sthref824"></a>RELEASE_CURSOR</h3>
<p class="subhead2"><a id="ZZPRE651"></a>Purpose</p>
<p>Specifies how the cursors for SQL statements and PL/SQL blocks are handled in the cursor cache.</p>
<p class="subhead1"><a id="ZZPRE652"></a>Syntax</p>
<p><code>RELEASE_CURSOR={YES|NO}</code></p>
<p class="subhead1"><a id="ZZPRE653"></a>Default</p>
<p><code>NO</code></p>
<p class="subhead1"><a id="ZZPRE654"></a>Usage Notes</p>
<p>You can use <code>RELEASE_CURSOR</code> to improve the performance of your program. For more information, refer to <a href="appc.htm#BABCHGDI">Appendix C</a>.</p>
<p>When a SQL data manipulation statement is executed, its associated cursor is linked to an entry in the cursor cache. The cursor cache entry is in turn linked to an Oracle private SQL area, which stores information needed to process the statement. <code>RELEASE_CURSOR</code> controls what happens to the link between the cursor cache and private SQL area.</p>
<p>When <code>RELEASE_CURSOR=YES</code>, after Oracle executes the SQL statement and the cursor is closed, the precompiler immediately removes the link. This frees memory allocated to the private SQL area and releases parse locks. To make sure that associated resources are freed when you CLOSE a cursor, you must specify <code>RELEASE_CURSOR=YES</code>.</p>
<p>When <code>RELEASE_CURSOR=NO</code> and <code>HOLD_CURSOR=YES</code>, the link is maintained. The precompiler does not reuse the link unless the number of open cursors exceeds the value of MAXOPENCURSORS. This is useful for SQL statements that are executed often because it speeds up subsequent executions. There is no need to reparse the statement or allocate memory for an Oracle private SQL area.</p>
<p>For inline use with implicit cursors, set <code>RELEASE_CURSOR</code> before executing the SQL statement. For inline use with explicit cursors, set <code>RELEASE_CURSOR</code> before opening the cursor.</p>
<p>Note that R<code>ELEASE_CURSOR=YES</code> overrides <code>HOLD_CURSOR=YES</code> and that <code>HOLD_CURSOR=NO</code> overrides <code>RELEASE_CURSOR=NO</code>. For information showing how these two options interact, refer to <a href="appc.htm#BABJGAGG">Appendix C</a></p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE655" class="sect2"><a id="sthref825"></a>
<h3 class="sect2">RUNOUTLINE</h3>
<p class="subhead1"><a id="ZZPRE656"></a><a id="sthref826"></a><a id="sthref827"></a>Purpose</p>
<p>Provides the developer with the option of executing &#34;create outline&#34; statements either by using precompiler or by the developer manually at a later time.</p>
<p class="subhead1"><a id="ZZPRE657"></a>Syntax</p>
<p>runoutline={yes | no}</p>
<p class="subhead1"><a id="ZZPRE658"></a>Default</p>
<p>no</p>
<p class="subhead1"><a id="ZZPRE659"></a>Usage Notes</p>
<p>If runoutline=yes, then the generated &#39;create outline&#39; statements are executed by the precompiler/translator at the end of a successful precompilation.</p>
<p>The outline option should be set to true or category_name when runoutline is used. Semantic check should be full when this option is turned on, which means option sqlcheck=full/semantics. If sqlcheck=syntax/limited/none, then error will be generated.</p>
</div>
<!-- class="sect2" -->
<a id="BABECBCG"></a>
<div id="ZZPRE660" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref828"></a><a id="sthref829"></a>SELECT_ERROR</h3>
<p class="subhead2"><a id="ZZPRE661"></a>Purpose</p>
<p>Specifies whether your program generates an error when a single-row <code>SELECT</code> statement returns more than one row or more rows than a host array can accommodate.</p>
<p class="subhead1"><a id="ZZPRE662"></a>Syntax</p>
<p><code>SELECT_ERROR={YES|NO}</code></p>
<p class="subhead1"><a id="ZZPRE663"></a>Default</p>
<p><code>YES</code></p>
<p class="subhead1"><a id="ZZPRE664"></a>Usage Notes</p>
<p>When <span class="bold">SELECT_ERROR=YES</span>, an error is generated if a single-row select returns too many rows or an array select returns more rows than the host array can accommodate.</p>
<p>When <span class="bold">SELECT_ERROR=NO</span>, no error is generated when a single-row select returns too many rows or when an array select returns more rows than the host array can accommodate.</p>
<p>Whether you specify <span class="bold">YES</span> or <span class="bold">NO</span>, a random row is selected from the table. To ensure a specific ordering of rows, use the <span class="bold">ORDER BY</span> clause in your <code>SELECT</code> statement. When <code>SELECT_ERROR=NO</code> and you use <code>ORDER BY</code>, Oracle returns the first row, or the first <span class="italic">n</span> rows if you are selecting into an array. When <code>SELECT_ERROR=YES</code>, whether you use <code>ORDER BY</code>, an error is generated if too many rows are returned.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE665" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref830"></a>
<h3 class="sect2"><a id="sthref831"></a><a id="sthref832"></a>SQLCHECK</h3>
<p class="subhead2"><a id="ZZPRE666"></a>Purpose</p>
<p>Specifies the type and extent of syntactic and semantic checking.</p>
<p class="subhead1"><a id="ZZPRE667"></a>Syntax</p>
<p><code>SQLCHECK={SEMANTICS|FULL|SYNTAX|LIMITED|NONE}</code></p>
<p class="subhead1"><a id="ZZPRE668"></a>Default</p>
<p><code>SYNTAX</code></p>
<p class="subhead1"><a id="ZZPRE669"></a>Usage Notes</p>
<p>The values <code>SEMANTICS</code> and <code>FULL</code> are equivalent, as are the values <code>SYNTAX</code> and <code>LIMITED.</code></p>
<p>The Oracle Precompilers can help you debug a program by checking the syntax and semantics of embedded SQL statements and PL/SQL blocks. Any errors found are reported at precompile time.</p>
<p>You control the level of checking by entering the SQLCHECK option inline and on the command line, inline and on the command line. However, the level of checking you specify inline cannot be higher than the level you specify (or accept by default) on the command line. For example, if you specify <code>SQLCHECK=NONE</code> on the command line, you cannot specify <code>SQLCHECK=SYNTAX</code> inline.</p>
<p>If <code>SQLCHECK=SYNTAX|SEMANTICS</code>, the precompiler generates an error when PL/SQL reserved words are used in SQL statements, even though the SQL statements are not themselves PL/SQL. If a PL/SQL reserved word must be used as an identifier, you can enclose it in double-quotes.</p>
<p>When <code>SQLCHECK=SEMANTICS</code>, the precompiler checks the syntax and semantics of</p>
<ul>
<li>
<p>Data manipulation statements such as <code>INSERT</code> and <code>UPDATE</code></p>
</li>
<li>
<p>PL/SQL blocks</p>
</li>
</ul>
<p>However, the precompiler checks only the syntax of remote data manipulation statements (those using the AT <span class="italic">db_name</span> clause).</p>
<p>The precompiler gets the information for a semantic check from embedded <code>DECLARE</code> <code>TABLE</code> statements or, if you specify the option <code>USERID</code>, by connecting to Oracle and accessing the data dictionary. You need not connect to Oracle if every table referenced in a data manipulation statement or PL/SQL block is defined in a <code>DECLARE TABLE</code> statement.</p>
<p>If you connect to Oracle but some information cannot be found in the data dictionary, you must use <code>DECLARE TABLE</code> statements to supply the missing information. During precompilation, a <code>DECLARE TABLE</code> definition overrides a data dictionary definition if they conflict.</p>
<p>Specify <code>SQLCHECK=SEMANTICS</code> when precompiling new programs. If you embed PL/SQL blocks in a host program, you <span class="italic">must</span> specify <code>SQLCHECK=SEMANTICS</code> and the option <code>USERID</code>.</p>
<p>When <code>SQLCHECK=SYNTAX</code>, the precompiler checks the syntax of</p>
<ul>
<li>
<p>Data manipulation statements</p>
</li>
<li>
<p>PL/SQL blocks</p>
</li>
</ul>
<p>No semantic checking is done. <code>DECLARE TABLE</code> statements are ignored and PL/SQL blocks are not allowed. When checking data manipulation statements, the precompiler uses Oracle database version 7 syntax rules, which are downwardly compatible. Specify <code>SQLCHECK=SYNTAX</code> when migrating your precompiled programs.</p>
<p>When <code>SQLCHECK=NONE</code>, no syntactic or semantic checking is done. DECLARE TABLE statements are ignored and PL/SQL blocks are not allowed. Specify <code>SQLCHECK=NONE</code> if your program</p>
<ul>
<li>
<p>Contains non-Oracle SQL (for example, because it will connect to a non-Oracle server through Open Gateway)</p>
</li>
<li>
<p>References tables not yet created and lacks <code>DECLARE TABLE</code> statements for them</p>
</li>
</ul>
<p><a href="#BABHHCGF">Table 6-6</a> summarizes the checking done by SQLCHECK. For more information about syntactic and semantic checking, refer to <a href="appd.htm#BABFFIIF">Appendix D</a>.</p>
<div id="ZZPRE670" class="tblformalwide">
<p class="titleintable"><a id="sthref833"></a><a id="BABHHCGF"></a>Table 6-6 SQLCHECK Checking</p>
<table class="cellalignment3245" title="SQLCHECK Checking" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3239">
<th class="cellalignment3246" id="r1c1-t16"><br/></th>
<th class="cellalignment3246" id="r1c2-t16" colspan="2">SQLCHECK=SEMANTIC</th>
<th class="cellalignment3246" id="r1c3-t16" colspan="2">SQLCHECK=SYNTAX</th>
<th class="cellalignment3246" id="r1c4-t16" colspan="2">SQLCHECK=NONE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r2c1-t16" headers="r1c1-t16">&nbsp;</td>
<td class="cellalignment3247" headers="r2c1-t16 r1c2-t16">
<p>Syntax</p>
</td>
<td class="cellalignment3247" headers="r2c1-t16 r1c2-t16 r1c3-t16">
<p>Semantic</p>
</td>
<td class="cellalignment3247" headers="r2c1-t16 r1c3-t16 r1c4-t16">
<p>Syntax</p>
</td>
<td class="cellalignment3247" headers="r2c1-t16 r1c4-t16">
<p>Semantic</p>
</td>
<td class="cellalignment3247" headers="r2c1-t16">
<p>Syntax</p>
</td>
<td class="cellalignment3247" headers="r2c1-t16">
<p>Semantic</p>
</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r3c1-t16" headers="r1c1-t16">
<p>DML</p>
</td>
<td class="cellalignment3247" headers="r3c1-t16 r1c2-t16">
<p>Y</p>
</td>
<td class="cellalignment3247" headers="r3c1-t16 r1c2-t16 r1c3-t16">
<p>Y</p>
</td>
<td class="cellalignment3247" headers="r3c1-t16 r1c3-t16 r1c4-t16">
<p>Y</p>
</td>
<td class="cellalignment3247" headers="r3c1-t16 r1c4-t16">&nbsp;</td>
<td class="cellalignment3247" headers="r3c1-t16">&nbsp;</td>
<td class="cellalignment3247" headers="r3c1-t16">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r4c1-t16" headers="r1c1-t16">
<p>Remote DML</p>
</td>
<td class="cellalignment3247" headers="r4c1-t16 r1c2-t16">
<p>Y</p>
</td>
<td class="cellalignment3247" headers="r4c1-t16 r1c2-t16 r1c3-t16">&nbsp;</td>
<td class="cellalignment3247" headers="r4c1-t16 r1c3-t16 r1c4-t16">
<p>Y</p>
</td>
<td class="cellalignment3247" headers="r4c1-t16 r1c4-t16">&nbsp;</td>
<td class="cellalignment3247" headers="r4c1-t16">&nbsp;</td>
<td class="cellalignment3247" headers="r4c1-t16">&nbsp;</td>
</tr>
<tr class="cellalignment3239">
<td class="cellalignment3247" id="r5c1-t16" headers="r1c1-t16">
<p>PL/SQL</p>
</td>
<td class="cellalignment3247" headers="r5c1-t16 r1c2-t16">
<p>Y</p>
</td>
<td class="cellalignment3247" headers="r5c1-t16 r1c2-t16 r1c3-t16">
<p>Y</p>
</td>
<td class="cellalignment3247" headers="r5c1-t16 r1c3-t16 r1c4-t16">&nbsp;</td>
<td class="cellalignment3247" headers="r5c1-t16 r1c4-t16">&nbsp;</td>
<td class="cellalignment3247" headers="r5c1-t16">&nbsp;</td>
<td class="cellalignment3247" headers="r5c1-t16">&nbsp;</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ZZPRE671" class="sect2"><a id="sthref834"></a>
<h3 class="sect2">STMT_CACHE</h3>
<p class="subhead1"><a id="ZZPRE672"></a><a id="sthref835"></a><a id="sthref836"></a>Purpose</p>
<p>Denotes the Statement cache size for the dynamic SQL statements.</p>
<p class="subhead1"><a id="ZZPRE673"></a>Syntax</p>
<p>STMT_CACHE = Range is 0 to 65535</p>
<p class="subhead1"><a id="ZZPRE674"></a>Default</p>
<p>0</p>
<p class="subhead1"><a id="ZZPRE675"></a>Usage Notes</p>
<p>The stmt_cache option can be set to hold the anticipated number of distinct dynamic SQL statements in the application.</p>
</div>
<!-- class="sect2" -->
<a id="i10832"></a>
<div id="ZZPRE682" class="sect2">
<h3 class="sect2">THREADS</h3>
<p class="subhead1"><a id="ZZPRE683"></a><a id="sthref837"></a><a id="sthref838"></a>Purpose</p>
<p>When THREADS=YES, the precompiler searches for context declarations.</p>
<p class="subhead1"><a id="ZZPRE684"></a>Syntax</p>
<p>THREADS={YES | NO}</p>
<p class="subhead1"><a id="ZZPRE685"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="ZZPRE686"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>This precompiler option is required for any program that requires multithreading support.</p>
<p>With THREADS=YES, the precompiler generates an error if no EXEC SQL CONTEXT USE directive is encountered before the first context is visible and an executable SQL statement is found.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE687" class="sect2"><a id="sthref839"></a>
<h3 class="sect2">TYPE_CODE<a id="sthref840"></a></h3>
<p class="subhead1"><a id="ZZPRE688"></a><a id="sthref841"></a>Purpose</p>
<p>This micro option specifies whether ANSI or Oracle datatype codes are used in dynamic SQL Method 4. Its setting is the same as the setting of MODE option.</p>
<p class="subhead1"><a id="ZZPRE689"></a>Syntax</p>
<p>TYPE_CODE={ORACLE | ANSI}</p>
<p class="subhead1"><a id="ZZPRE690"></a>Default</p>
<p>ORACLE</p>
<p class="subhead1"><a id="ZZPRE691"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
</div>
<!-- class="sect2" -->
<a id="BABBBACH"></a>
<div id="ZZPRE692" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref842"></a><a id="sthref843"></a>UNSAFE_NULL</h3>
<p class="subhead2"><a id="ZZPRE693"></a>Purpose</p>
<p>Specifying <code>UNSAFE_NULL=YES</code> prevents generation of <code>ORA-01405</code> messages when fetching <code>NULLs</code> without using indicator variables.</p>
<p class="subhead1"><a id="ZZPRE694"></a>Syntax</p>
<p><code>UNSAFE_NULL={YES|NO}</code></p>
<p class="subhead1"><a id="ZZPRE695"></a>Default</p>
<p><code>NO</code></p>
<p class="subhead1"><a id="ZZPRE696"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The <code>UNSAFE_NULL=YES</code> is allowed only when <code>MODE=ORACLE</code> and DBMS=V7.</p>
<p>The <code>UNSAFE_NULL</code> option has no effect on host variables in an embedded PL/SQL block. You <span class="italic">must</span> use indicator variables to avoid <code>ORA-01405</code> errors.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE697" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref844"></a>
<h3 class="sect2"><a id="sthref845"></a><a id="sthref846"></a>USERID</h3>
<p class="subhead2"><a id="ZZPRE698"></a>Purpose</p>
<p>Specifies an Oracle username and password.</p>
<p class="subhead1"><a id="ZZPRE699"></a>Syntax</p>
<p><code>USERID=</code><code><span class="codeinlineitalic">username</span></code><code>/</code><code><span class="codeinlineitalic">password</span></code></p>
<p class="subhead1"><a id="ZZPRE700"></a>Default</p>
<p><code>None</code></p>
<p class="subhead1"><a id="ZZPRE701"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>Do not specify this option when using the automatic logon feature, which accepts your Oracle username prefixed with the value of the Oracle initialization parameter <code>OS_AUTHENT_PREFIX</code>.</p>
<p>When <code>SQLCHECK=SEMANTICS,</code> if you want the precompiler to get needed information by connecting to Oracle and accessing the data dictionary, you must also specify USERID.</p>
</div>
<!-- class="sect2" -->
<a id="i11933"></a>
<div id="ZZPRE702" class="sect2">
<h3 class="sect2">UTF16_CHARSET</h3>
<p class="subhead1"><a id="ZZPRE703"></a>Purpose</p>
<p>Specify the character set form used by UNICODE(UTF16) variables.</p>
<p class="subhead1"><a id="ZZPRE704"></a>Syntax</p>
<pre>UTF16_CHARSET={NCHAR_CHARSET | DB_CHARSET}
</pre>
<p class="subhead1"><a id="ZZPRE705"></a>Default</p>
<pre>NCHAR_CHARSET
</pre>
<p class="subhead1"><a id="ZZPRE706"></a>Usage Notes</p>
<p>Can be used only on the command line or in a configuration file, but not inline.</p>
<p>If UTF16_CHARSET=NCHAR_CHARSET (the default), the UNICODE(UTF16) bind / define buffer is converted according to the server side National Character Set. There may be a performance impact when the target column is CHAR.</p>
<p>If UTF16_CHAR=DB_CHARSET, the UNICODE(UTF16) bind / define buffer is converted according to the database character set.</p>
<div class="infoboxnotewarn">
<p class="notep1">Caution:</p>
<p class="warnsp">There may be data loss when the target column is NCHAR.</p>
</div>
</div>
<!-- class="sect2" -->
<div id="ZZPRE707" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref847"></a>
<h3 class="sect2"><a id="sthref848"></a><a id="sthref849"></a><a id="sthref850"></a>VARCHAR</h3>
<p class="subhead2"><a id="ZZPRE708"></a>Purpose</p>
<p>For Pro*COBOL only, the <code>VARCHAR</code> option instructs the precompiler to treat the COBOL group item described in Chapter 1 of the <a class="olink LNPCB" href="../LNPCB/toc.htm"><span class="italic">Pro*COBOL Programmer&#39;s Guide</span></a> as a <code>VARCHAR</code> datatype.</p>
<p class="subhead2"><a id="ZZPRE709"></a>Syntax</p>
<p><code>VARCHAR={YES|NO}</code></p>
<p class="subhead2"><a id="ZZPRE710"></a>Default</p>
<p><code>NO</code></p>
<p class="subhead2"><a id="ZZPRE711"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>When <code>VARCHAR=YES</code>, the implicit group item described in Chapter 1 of the <a class="olink LNPCB" href="../LNPCB/toc.htm"><span class="italic">Pro*COBOL Programmer&#39;s Guide</span></a> is accepted as an Oracle VARCHAR external datatype with a length field and a string field.</p>
<p>When <code>VARCHAR=NO,</code> the Pro*COBOL Precompiler does not accept the implicit group items as <code>VARCHAR</code> external datatypes.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE712" class="sect2"><a id="sthref851"></a>
<h3 class="sect2"><a id="sthref852"></a><a id="sthref853"></a>VERSION</h3>
<p class="subhead1"><a id="ZZPRE713"></a>Purpose</p>
<p>Determines which version of the object will be returned by the EXEC SQL OBJECT DEREF statement.</p>
<p class="subhead1"><a id="ZZPRE714"></a>Syntax</p>
<p>VERSION={RECENT | LATEST | ANY}</p>
<p class="subhead1"><a id="ZZPRE715"></a>Default</p>
<p>RECENT</p>
<p class="subhead1"><a id="ZZPRE716"></a>Usage Notes</p>
<p>Can be entered inline using the EXEC ORACLE OPTION statement.</p>
<p>RECENT means that if the object has been selected into the object cache in the current transaction, then that object is returned. For transactions running in serializable mode, this option has the same effect as LATEST without incurring as many network round trips. Most applications should use RECENT.</p>
<p>LATEST means that if the object does not reside in the object cache, it is retrieved from the database. If It does reside in the object cache, it is refreshed from the server. Use LATEST with caution because it incurs the greatest number of network round trips. Use LATEST only when it is imperative that the object cache is kept as coherent as possible with the server buffer cache</p>
<p>ANY means that if the object already resides in the object cache, return that object. If not, retrieve the object from the server. ANY incurs the fewest network round trips. Use in applications that access read-only objects or when a user will have exclusive access to the objects.<a id="sthref854"></a></p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE717" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref855"></a>
<h3 class="sect2"><a id="sthref856"></a><a id="sthref857"></a>XREF</h3>
<p class="subhead2"><a id="ZZPRE718"></a>Purpose</p>
<p>Specifies whether a cross-reference section is included in the listing file.</p>
<p class="subhead2"><a id="ZZPRE719"></a>Syntax</p>
<p><code>XREF={YES|NO}</code></p>
<p class="subhead2"><a id="ZZPRE720"></a>Default</p>
<p><code>YES</code></p>
<p class="subhead2"><a id="ZZPRE721"></a>Usage Notes</p>
<p>When <code>XREF=YES</code>, cross references are included for host variables, cursor names, and statement names. The cross references show where each object is defined and referenced in your program.</p>
<p>When <code>XREF=NO</code>, the cross-reference section is not included.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACHGBFI"></a>
<div id="ZZPRE722" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Conditional <a id="sthref858"></a>Precompilations</h2>
<p><a id="sthref859"></a>Conditional precompilation includes (or excludes) sections of code in your host program based on certain conditions. For example, you might want to include one section of code when precompiling under UNIX and another section when precompiling under VMS. Conditional precompilation lets you write programs that can run in different environments.</p>
<p><a id="sthref860"></a>Conditional sections of code are marked by statements that define the environment and actions to take. You can code host-language statements and EXEC SQL statements in these sections. The following statements let you exercise conditional control over precompilation:</p>
<pre><a id="sthref861"></a>EXEC ORACLE DEFINE symbol; -- define a symbol
<a id="sthref862"></a>EXEC ORACLE IFDEF symbol; -- if symbol is defined
<a id="sthref863"></a>EXEC ORACLE IFNDEF symbol; -- if symbol is not defined
<a id="sthref864"></a>EXEC ORACLE ELSE; -- otherwise
<a id="sthref865"></a>EXEC ORACLE ENDIF; -- end this control block
</pre>
<p>All EXEC ORACLE statements must be terminated with the statement terminator for your host language. For example, in Pro*COBOL, a conditional statement must be terminated with &#34;<code>END-EXEC</code>.&#34; and in Pro*FORTRAN it must be terminated by a return character.</p>
<div id="ZZPRE723" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref866"></a>
<h3 class="sect2">An Example</h3>
<p><a id="sthref867"></a>In the following example, the <code>SELECT</code> statement is precompiled only when the symbol <span class="italic">site2</span> is defined:</p>
<pre>EXEC ORACLE IFDEF site2;
 EXEC SQL SELECT DNAME
 INTO :dept_name
 FROM DEPT
 WHERE DEPTNO = :dept_number;
EXEC ORACLE ENDIF;
</pre>
<p>Blocks of conditions can be nested as shown in the following example:</p>
<pre>EXEC ORACLE IFDEF outer;
 EXEC ORACLE IFDEF inner;
 ...
 EXEC ORACLE ENDIF;
EXEC ORACLE ENDIF;
</pre>
<p>You can &#34;comment out&#34; host-language or embedded SQL code by placing it between IFDEF and ENDIF and <span class="italic">not</span> defining the symbol.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE724" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref868"></a>
<h3 class="sect2">Defining Symbols</h3>
<p><a id="sthref869"></a>You can define a symbol in two ways. Either include the statement</p>
<pre>EXEC ORACLE DEFINE symbol;
</pre>
<p>in your host program or define the symbol on the command line using the syntax</p>
<pre>... INAME=filename ... DEFINE=symbol
</pre>
<p>where <span class="italic">symbol</span> is not case-sensitive.</p>
<p>Some port-specific symbols are predefined for you when the Oracle Precompilers are installed on your system. For example, predefined operating system symbols include CMS, MVS, MS-DOS, UNIX, and VMS.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACFGFJE"></a>
<div id="ZZPRE725" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref870"></a>Separate <a id="sthref871"></a>Precompilations</h2>
<p>With the Oracle Precompilers, you can precompile several host program modules separately, then link them into one executable program. This supports modular programming, which is required when the functional components of a program are written and debugged by different programmers. The individual program modules need not be written in the same language.</p>
<div id="ZZPRE726" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref872"></a>
<h3 class="sect2"><a id="sthref873"></a>Guidelines</h3>
<p><a id="sthref874"></a>The following guidelines will help you avoid some common problems.</p>
<p class="subhead2"><a id="ZZPRE727"></a>Referencing Cursors</p>
<p>Cursor names are SQL identifiers, whose scope is the precompilation unit. Hence, cursor operations cannot span precompilation units (files). That is, you cannot declare a cursor in one file and open or fetch from it in another file. So, when doing a separate precompilation, make sure all definitions and references to a given cursor are in one file.</p>
<p class="subhead2"><a id="ZZPRE728"></a>Specifying MAXOPENCURSORS<a id="sthref875"></a></p>
<p>When you precompile the program module that connects to Oracle, specify a value for MAXOPENCURSORS that is high enough for any of the program modules. If you use it for another program module, MAXOPENCURSORS is ignored. Only the value in effect for the connect is used at run time.</p>
<p class="subhead2"><a id="ZZPRE729"></a><a id="sthref876"></a>Using a Single SQLCA</p>
<p>If you want to use just one SQLCA, you must declare it globally in one of the program modules.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE730" class="sect2"><a id="sthref877"></a>
<h3 class="sect2"><a id="sthref878"></a>Restrictions</h3>
<p><a id="sthref879"></a>All references to an explicit cursor must be in the same program file. You cannot perform operations on a cursor that was DECLAREd in a different module. Refer to <a href="ch_four.htm#BABEGAEG">&nbsp;Using Embedded SQL</a> for more information about cursors.</p>
<p><a id="sthref880"></a>Also, any program file that contains SQL statements must have a SQLCA that is in the scope of the local SQL statements.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACHAFHE"></a>
<div id="ZZPRE731" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Compiling and Linking<a id="sthref881"></a></h2>
<p><a id="sthref882"></a>To get an executable program, you must compile the source file(s) produced by the precompiler, then link the resulting object module with any modules needed from SQLLIB and system-specific Oracle libraries. Also, if you are embedding OCI calls, make sure to link in the OCI run-time library (OCILIB).</p>
<p>The linker resolves symbolic references in the object modules. If these references conflict, the link fails. This can happen when you try to link third party software into a precompiled program. Not all third-party software is compatible with Oracle, so you might have problems. Check with Oracle Customer Services to see if the software is supported.</p>
<p>Compiling and linking are system-dependent. For instructions, see your system-specific Oracle manuals.</p>
<div id="ZZPRE732" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref883"></a>
<h3 class="sect2">System-Dependent</h3>
<p>Compiling and linking are system-dependent. For example, on some systems, you must turn off compiler optimization when compiling a host language program. For instructions, refer to your system-specific Oracle documentation.</p>
</div>
<!-- class="sect2" -->
<div id="ZZPRE733" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref884"></a>
<h3 class="sect2">Multibyte Globalization Support Compatibility</h3>
<p>When using multibyte Globalization Support features, you must link your object files to the current version of the SQLLIB run-time library. The multibyte Globalization Support features in this release are supported by the SQLLIB run-time library and <span class="italic">not</span> by the Oracle Server. The resulting application can then be executed with any release of the Oracle database.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3238">
<tr>
<td class="cellalignment3247">
<table class="cellalignment3243">
<tr>
<td class="cellalignment3242"><a href="ch_five.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3242"><a href="ch_seven.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2008, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3249">
<table class="cellalignment3241">
<tr>
<td class="cellalignment3242"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3242"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3242"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3242"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3242"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3242"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>