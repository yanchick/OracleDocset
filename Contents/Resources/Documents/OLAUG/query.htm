<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-86410"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Querying%20Dimensional%20Objects"></a><title>Querying Dimensional Objects</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-06-27T10:40:4Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="OLAP User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53237-01"/>
<meta name="dcterms.isVersionOf" content="OLAUG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="awgloss.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="cubes.htm" title="Previous" type="text/html"/>
<link rel="Next" href="calculations.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53237-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/17</span> <!-- End Header -->
<div id="OLAUG400" class="chapter"><a id="BGBFGBIB"></a>
<h1 class="chapter"><span class="secnum">4</span> Querying Dimensional Objects</h1>
<p><a id="sthref298"></a>Oracle OLAP adds power to your SQL applications by providing extensive analytic content and fast query response times. A SQL query interface enables any application to query cubes and dimensions without any knowledge of OLAP.</p>
<p>The OLAP option automatically generates a set of relational views on cubes, dimensions, and hierarchies. SQL applications query these views to display the information-rich contents of these objects to analysts and decision makers. You can also create custom views that follow the structure expected by your applications, using the system-generated views like base tables.</p>
<p>In this chapter, you learn the basic methods for querying dimensional objects in SQL. It contains the following topics:</p>
<ul>
<li>
<p><a href="#CBABBCID">Exploring the OLAP Views</a></p>
</li>
<li>
<p><a href="#CBAEDEGC">Creating Basic Queries</a></p>
</li>
<li>
<p><a href="#CBACBFEC">Creating Hierarchical Queries</a></p>
</li>
<li>
<p><a href="#CBAIEHBA">Using Calculations in Queries</a></p>
</li>
<li>
<p><a href="#CBABGEII">Using Attributes for Aggregation</a></p>
</li>
<li>
<p><a href="#BGBCABGE">Joining Cubes to Tables and Views</a></p>
</li>
<li>
<p><a href="#CHDDHGII">Viewing Execution Plans</a></p>
</li>
<li>
<p><a href="#CBABFFGJ">Querying the Data Dictionary</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="overview.htm#CJAGIHDI">&#34;Developing Reports and Dashboards Using SQL Tools and Application&nbsp;Builders&#34;</a> for a sample dashboard created using Oracle Application Express</p>
</li>
<li>
<p><a href="overview.htm#i1017034">&#34;Overview of the Dimensional Data Model&#34;</a> for a discussion of cubes, dimensions, and hierarchies</p>
</li>
</ul>
</div>
<a id="CBABBCID"></a>
<div id="OLAUG9159" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Exploring the OLAP Views</h2>
<p>The system-generated views are created in the same schema as the analytic workspace. Oracle OLAP provides three types of views:</p>
<ul>
<li>
<p>Cube views</p>
</li>
<li>
<p>Dimension views</p>
</li>
<li>
<p>Hierarchy views</p>
</li>
</ul>
<p>These views are related in the same way as fact and dimension tables are in a star schema. Cube views serve the same function as fact tables, and hierarchy views and dimension views serve the same function as dimension tables. Typical queries join a cube view with either a hierarchy view or a dimension view.</p>
<a id="CBAHIDEC"></a>
<div id="OLAUG9160" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Cube Views</h3>
<p><a id="sthref299"></a>Each cube has a cube view that presents the data for all the measures and calculated measures in the cube. You can use a cube view like a fact table in a star or snowflake schema. However, the cube view contains all the summary data in addition to the detail level data.</p>
<div id="OLAUG9161" class="sect3"><a id="sthref300"></a>
<h4 class="sect3">Discovering the Names of the Cube Views</h4>
<p>The default name for a cube view is <code><span class="codeinlineitalic">cube</span></code><code>_VIEW</code>. To find the view for <code>UNITS_CUBE</code> in your schema, you might issue a query like this one:</p>
<pre>SELECT view_name FROM user_views WHERE view_name LIKE &#39;UNITS_CUBE%&#39;;

VIEW_NAME
------------------------------
UNITS_CUBE_VIEW
</pre>
<p>The next query returns the names of all the cube views in your schema from <code>USER_CUBE_VIEWS</code>:</p>
<pre>SELECT view_name FROM user_cube_views;
 
VIEW_NAME
------------------------------
UNITS_CUBE_VIEW
PRICE_CUBE_VIEW
</pre></div>
<!-- class="sect3" -->
<div id="OLAUG9162" class="sect3"><a id="sthref301"></a>
<h4 class="sect3">Discovering the Columns of a Cube View</h4>
<p>Like a fact table, a cube view contains a column for each measure, calculated measure, and dimension in the cube. In the following example, <code>UNITS_CUBE_VIEW</code> has columns for the <code>SALES</code>, <code>UNITS</code>, and <code>COST</code> measures, for several calculated measures on <code>SALES</code>, and for the <code>TIME</code>, <code>CUSTOMER</code>, <code>PRODUCT</code>, and <code>CHANNEL</code> dimensions.</p>
<pre>DESCRIBE units_cube_view
Name                                      Null?    Type
----------------------------------------- -------- ----------------------------
SALES                                              NUMBER
UNITS                                              NUMBER
COST                                               NUMBER
SALES_PP                                           NUMBER
SALES_CHG_PP                                       NUMBER
SALES_PCTCHG_PP                                    NUMBER
SALES_PROD_SHARE_PARENT                            NUMBER
SALES_PROD_SHARE_TOTAL                             NUMBER
SALES_PROD_RANK_PARENT_PP                          NUMBER
TIME                                               VARCHAR2(100)
CUSTOMER                                           VARCHAR2(100)
PRODUCT                                            VARCHAR2(100)
CHANNEL                                            VARCHAR2(100)
</pre>
<p>The <a id="sthref302"></a><code>USER_CUBE_VIEW_COLUMNS</code> data dictionary view describes the columns of a cube view, as shown by the following query.</p>
<pre>SELECT column_name, column_type FROM user_cube_view_columns
     WHERE view_name = &#39;UNITS_CUBE_VIEW&#39;;
 
COLUMN_NAME                    COLUMN_TYPE
------------------------------ --------------
SALES                          MEASURE
UNITS                          MEASURE
COST                           MEASURE
SALES_PP                       MEASURE
SALES_CHG_PP                   MEASURE
SALES_PCTCHG_PP                MEASURE
SALES_PROD_SHARE_PARENT        MEASURE
SALES_PROD_SHARE_TOTAL         MEASURE
SALES_PROD_RANK_PARENT_PP      MEASURE
TIME                           KEY
CUSTOMER                       KEY
PRODUCT                        KEY
CHANNEL                        KEY
 
13 rows selected.
</pre></div>
<!-- class="sect3" -->
<div id="OLAUG9163" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref303"></a>
<h4 class="sect3">Displaying the Contents of a Cube View</h4>
<p>You can display the contents of a cube view quickly with a query like this one. All levels of the data are contained in the cube, from the detail level to the top.</p>
<pre>SELECT sales, units, time, customer, product, channel
     FROM units_cube_view WHERE ROWNUM &lt; 15;

     SALES      UNITS TIME       CUSTOMER   PRODUCT    CHANNEL
---------- ---------- ---------- ---------- ---------- --------
1120292752    4000968 TOTAL      TOTAL      TOTAL      TOTAL
 134109248     330425 CY1999     TOTAL      TOTAL      TOTAL
 130276514     534069 CY2003     TOTAL      TOTAL      TOTAL
 100870877     253816 CY1998     TOTAL      TOTAL      TOTAL
 136986572     565718 CY2005     TOTAL      TOTAL      TOTAL
 140138317     584929 CY2006     TOTAL      TOTAL      TOTAL
 144290686     587419 CY2004     TOTAL      TOTAL      TOTAL
 124173522     364233 CY2000     TOTAL      TOTAL      TOTAL
  92515295     364965 CY2002     TOTAL      TOTAL      TOTAL
 116931722     415394 CY2001     TOTAL      TOTAL      TOTAL
31522409.5      88484 CY2000.Q1  TOTAL      TOTAL      TOTAL
27798426.6      97346 CY2001.Q2  TOTAL      TOTAL      TOTAL
29691668.2     105704 CY2001.Q3  TOTAL      TOTAL      TOTAL
32617248.6     138953 CY2005.Q3  TOTAL      TOTAL      TOTAL
 
14 rows selected.
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CBAIGGBA"></a>
<div id="OLAUG9164" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Dimension and Hierarchy Views</h3>
<p><a id="sthref304"></a>Each dimension has one dimension view plus a hierarchy view for each hierarchy associated with the dimension. For example, a Time dimension might have these three views:</p>
<ul>
<li>
<p>Time dimension view</p>
</li>
<li>
<p>Calendar hierarchy view</p>
</li>
<li>
<p>Fiscal hierarchy view</p>
</li>
</ul>
<p><a id="sthref305"></a>You can use dimension views and hierarchy views like dimension tables in a star schema.</p>
<div id="OLAUG9165" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref306"></a>
<h4 class="sect3">Discovering the Names of Dimension and Hierarchy Views</h4>
<p><a id="sthref307"></a><code>USER_CUBE_DIM_VIEWS</code> identifies the dimension views for all dimensions. The default name for a dimension view is <code><span class="codeinlineitalic">dimension</span></code><code>_VIEW</code>.</p>
<pre>SELECT * FROM user_cube_dim_views;
 
DIMENSION_NAME                 VIEW_NAME
------------------------------ ------------------------------
PRODUCT                        PRODUCT_VIEW
CUSTOMER                       CUSTOMER_VIEW
CHANNEL                        CHANNEL_VIEW
TIME                           TIME_VIEW
</pre>
<p><code><a id="sthref308"></a>USER_CUBE_HIER_VIEWS</code> identifies the hierarchy views for all the dimensions. For a hierarchy view, the default name is <code><span class="codeinlineitalic">dimension_hierarchy</span></code><code>_VIEW</code>. The following query returns the dimension, hierarchy, and view names.</p>
<pre>SELECT * FROM user_cube_hier_views ORDER BY dimension_name;
 
DIMENSION_NAME  HIERARCHY_NAME  VIEW_NAME
--------------- --------------- ------------------------------
CHANNEL         PRIMARY         CHANNEL_PRIMARY_VIEW
CUSTOMER        MARKET          CUSTOMER_MARKET_VIEW
CUSTOMER        SHIPMENTS       CUSTOMER_SHIPMENTS_VIEW
PRODUCT         PRIMARY         PRODUCT_PRIMARY_VIEW
TIME            FISCAL          TIME_FISCAL_VIEW
TIME            CALENDAR        TIME_CALENDAR_VIEW
</pre></div>
<!-- class="sect3" -->
<div id="OLAUG9166" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref309"></a>
<h4 class="sect3">Discovering the Columns of a Dimension View</h4>
<p>Like a dimension table, a dimension view contains a key column, level name, level keys for every level of every hierarchy associated with the dimension, and attribute columns. In the following example, <code>TIME_VIEW</code> has a column for the dimension keys, the level name, and the dimension attributes.</p>
<pre>DESCRIBE time_view
Name                                      Null?    Type
----------------------------------------- -------- ----------------------------
DIM_KEY                                            VARCHAR2(100)
LEVEL_NAME                                         VARCHAR2(30)
DIM_ORDER                                          NUMBER
END_DATE                                           DATE
LONG_DESCRIPTION                                   VARCHAR2(100)
SHORT_DESCRIPTION                                  VARCHAR2(100)
TIME_SPAN                                          NUMBER
</pre>
<p><code><a id="sthref310"></a>USER_CUBE_DIM_VIEW_COLUMNS</code> describes the information in each column, as shown in this query.</p>
<pre>SELECT column_name, column_type FROM user_cube_dim_view_columns
     WHERE view_name =&#39;TIME_VIEW&#39;;
 
COLUMN_NAME                    COLUMN_TYPE
------------------------------ --------------------
DIM_KEY                        KEY
LEVEL_NAME                     LEVEL_NAME
DIM_ORDER                      DIM_ORDER
END_DATE                       ATTRIBUTE
TIME_SPAN                      ATTRIBUTE
LONG_DESCRIPTION               ATTRIBUTE
SHORT_DESCRIPTION              ATTRIBUTE
</pre></div>
<!-- class="sect3" -->
<div id="OLAUG9167" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref311"></a>
<h4 class="sect3">Displaying the Contents of a Dimension View</h4>
<p>The following query displays the level and attributes of each dimension key.</p>
<pre>SELECT dim_key, level_name, long_description description, time_span, end_date
     FROM time_view WHERE dim_key LIKE &#39;%2005%&#39;;
 
DIM_KEY      LEVEL_NAME           DESCRIPTION   TIME_SPAN END_DATE
------------ -------------------- ------------ ---------- ---------
CY2005       CALENDAR_YEAR        2005                365 31-DEC-05
CY2005.Q2    CALENDAR_QUARTER     Q2.05                91 30-JUN-05
CY2005.Q4    CALENDAR_QUARTER     Q4.05                92 31-DEC-05
CY2005.Q3    CALENDAR_QUARTER     Q3.05                92 30-SEP-05
CY2005.Q1    CALENDAR_QUARTER     Q1.05                90 31-MAR-05
2005.01      MONTH                JAN-05               31 31-JAN-05
2005.05      MONTH                MAY-05               31 31-MAY-05
2005.07      MONTH                JUL-05               31 31-JUL-05
2005.03      MONTH                MAR-05               31 31-MAR-05
2005.04      MONTH                APR-05               30 30-APR-05
2005.08      MONTH                AUG-05               31 31-AUG-05
2005.09      MONTH                SEP-05               30 30-SEP-05
2005.02      MONTH                FEB-05               28 28-FEB-05
2005.11      MONTH                NOV-05               30 30-NOV-05
2005.06      MONTH                JUN-05               30 30-JUN-05
2005.10      MONTH                OCT-05               31 31-OCT-05
2005.12      MONTH                DEC-05               31 31-DEC-05
FY2005       FISCAL_YEAR          FY2005              365 30-JUN-05
FY2005.Q4    FISCAL_QUARTER       Q4 FY-05             91 30-JUN-05
FY2005.Q1    FISCAL_QUARTER       Q1 FY-05             92 30-SEP-04
FY2005.Q2    FISCAL_QUARTER       Q2 FY-05             92 31-DEC-04
FY2005.Q3    FISCAL_QUARTER       Q3 FY-05             90 31-MAR-05
 
22 rows selected.
</pre></div>
<!-- class="sect3" -->
<div id="OLAUG9168" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref312"></a>
<h4 class="sect3">Discovering the Columns of a Hierarchy View</h4>
<p>Like the dimension views, the hierarchy views also contain columns for the dimension key, level name, and level keys. However, all of the rows and columns are associated with the dimension keys that belong to the hierarchy.</p>
<pre>DESCRIBE time_calendar_view
Name                                      Null?    Type
----------------------------------------- -------- ----------------------------
DIM_KEY                                            VARCHAR2(100)
LEVEL_NAME                                         VARCHAR2(30)
DIM_ORDER                                          NUMBER
HIER_ORDER                                         NUMBER
LONG_DESCRIPTION                                   VARCHAR2(100)
SHORT_DESCRIPTION                                  VARCHAR2(100)
END_DATE                                           DATE
TIME_SPAN                                          NUMBER
PARENT                                             VARCHAR2(100)
TOTAL                                              VARCHAR2(100)
CALENDAR_YEAR                                      VARCHAR2(100)
CALENDAR_QUARTER                                   VARCHAR2(100)
MONTH                                              VARCHAR2(100)
</pre></div>
<!-- class="sect3" -->
<a id="CBAJGBEF"></a>
<div id="OLAUG9169" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Displaying the Contents of a Hierarchy View</h4>
<p>The following query displays the dimension keys, parent key, and the full ancestry for calendar year 2005.</p>
<pre>SELECT dim_key, long_description description, parent, calendar_year year,
       calendar_quarter quarter, month FROM time_calendar_view
       WHERE calendar_year=&#39;CY2005&#39;
       ORDER BY level_name, end_date;

DIM_KEY      DESCRIPTION  PARENT       YEAR         QUARTER      MONTH
------------ ------------ ------------ ------------ ------------ ------------
CY2005.Q1    Q1.05        CY2005       CY2005       CY2005.Q1
CY2005.Q2    Q2.05        CY2005       CY2005       CY2005.Q2
CY2005.Q3    Q3.05        CY2005       CY2005       CY2005.Q3
CY2005.Q4    Q4.05        CY2005       CY2005       CY2005.Q4
CY2005       2005         TOTAL        CY2005
2005.01      JAN-05       CY2005.Q1    CY2005       CY2005.Q1    2005.01
2005.02      FEB-05       CY2005.Q1    CY2005       CY2005.Q1    2005.02
2005.03      MAR-05       CY2005.Q1    CY2005       CY2005.Q1    2005.03
2005.04      APR-05       CY2005.Q2    CY2005       CY2005.Q2    2005.04
2005.05      MAY-05       CY2005.Q2    CY2005       CY2005.Q2    2005.05
2005.06      JUN-05       CY2005.Q2    CY2005       CY2005.Q2    2005.06
2005.07      JUL-05       CY2005.Q3    CY2005       CY2005.Q3    2005.07
2005.08      AUG-05       CY2005.Q3    CY2005       CY2005.Q3    2005.08
2005.09      SEP-05       CY2005.Q3    CY2005       CY2005.Q3    2005.09
2005.10      OCT-05       CY2005.Q4    CY2005       CY2005.Q4    2005.10
2005.11      NOV-05       CY2005.Q4    CY2005       CY2005.Q4    2005.11
2005.12      DEC-05       CY2005.Q4    CY2005       CY2005.Q4    2005.12
 
17 rows selected.
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBAEDEGC"></a>
<div id="OLAUG9170" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating Basic Queries</h2>
<p>Querying a cube is similar to querying a star schema. In a star schema, you join a fact table to a dimension table. The fact table provides the numeric business measures, and the dimension table provides descriptive attributes that give meaning to the data. Similarly, you join a cube view with either a dimension view or a hierarchy view to provide fully identified and meaningful data to your users.</p>
<p>For dimensions with no hierarchies, use the dimension views in your queries. For dimensions with hierarchies, use the hierarchy views, because they contain more information than the dimension views.</p>
<p>When querying a cube, remember these guidelines:</p>
<ul>
<li>
<p>Apply a filter to every dimension.</p>
<p>The cube contains both detail level and aggregated data. A query with an unfiltered dimension typically returns more data than users need, which negatively impacts performance.</p>
</li>
<li>
<p>Let the cube aggregate the data.</p>
<p>Because the aggregations are calculated in the cube, a typical query does not need a <code>GROUP BY</code> clause. Simply select the aggregations you want by using the appropriate filters on the dimension keys or attributes.</p>
</li>
</ul>
<div id="OLAUG9171" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref313"></a>
<h3 class="sect2">Applying a Filter to Every Dimension</h3>
<p><a id="sthref314"></a><a id="sthref315"></a>To create a level filter, you must know the names of the dimension levels. You can easily acquire them by querying the dimension or hierarchy views:</p>
<pre>SELECT DISTINCT level_name FROM time_calendar_view;
 
LEVEL_NAME
------------------------------
CALENDAR_YEAR
CALENDAR_QUARTER
MONTH
TOTAL
</pre>
<p>Several data dictionary views list the names of the levels. The following example queries <code><a id="sthref316"></a>USER_CUBE_HIER_LEVELS</code>.</p>
<pre>SELECT level_name FROM user_cube_hier_levels
     WHERE dimension_name = &#39;TIME&#39; AND hierarchy_name =&#39;CALENDAR&#39;;
 
LEVEL_NAME
--------------------
TOTAL
CALENDAR_YEAR
CALENDAR_QUARTER
MONTH
</pre>
<p>To see the importance of applying a filter to every dimension, consider the query in <a href="#CBAEFEHJ">Example 4-1</a>, which has no filter on the time dimension.</p>
<div id="OLAUG9469" class="example">
<p class="titleinexample"><a id="CBAEFEHJ"></a>Example 4-1 Displaying Aggregates at All Levels of Time</p>
<pre>/* Select key descriptions and facts */
SELECT t.long_description time,
     ROUND(f.sales) sales
/* From dimension views and cube view */
  FROM time_calendar_view t,
     product_primary_view p,
     customer_shipments_view cu,
     channel_primary_view ch,
     units_cube_view f
/* No filter on Time */
  WHERE p.level_name = &#39;TOTAL&#39; 
     AND cu.level_name = &#39;TOTAL&#39;
     AND ch.level_name = &#39;TOTAL&#39;
/* Join dimension views to cube view */
     AND t.dim_key = f.time
     AND p.dim_key = f.product
     AND cu.dim_key = f.customer
     AND ch.dim_key = f.channel
  ORDER BY t.end_date;
</pre></div>
<!-- class="example" -->
<p>Without a filter on the Time dimension, the query returns values for every level of time. This is more data than users typically want to see, and the volume of data returned can negatively impact performance.</p>
<pre>TIME            SALES
---------- ----------
JAN-98        8338545
FEB-98        7972132
Q1.98        24538588
MAR-98        8227911
APR-98        8470315
MAY-98        8160573
JUN-98        8362386
Q2.98        24993273
JUL-98        8296226
AUG-98        8377587
SEP-98        8406728
Q3.98        25080541
OCT-98        8316169
NOV-98        8984156
Q4.98        26258474
1998        100870877
                .
                .
                .
</pre>
<p>Now consider the results when a filter restricts Time to yearly data.</p>
<p><a href="#CBAFBDDD">Example 4-2</a> shows a basic query. It selects the Sales measure from <code>UNITS_CUBE_VIEW</code>, and joins the keys from the cube view to the hierarchy views to get descriptions of the keys.</p>
<div id="OLAUG9470" class="example">
<p class="titleinexample"><a id="CBAFBDDD"></a>Example 4-2 Basic Cube View Query</p>
<pre>/* Select key descriptions and facts */
SELECT t.long_description time,
     ROUND(f.sales) sales
/* From dimension views and cube view */
  FROM time_calendar_view t,
     product_primary_view p,
     customer_shipments_view cu,
     channel_primary_view ch,
     units_cube_view f
/* Create level filters */
  WHERE t.level_name = &#39;CALENDAR_YEAR&#39;
     AND p.level_name = &#39;TOTAL&#39;
     AND cu.level_name = &#39;TOTAL&#39;
     AND ch.level_name = &#39;TOTAL&#39;
/* Join dimension views to cube view */
     AND t.dim_key = f.time
     AND p.dim_key = f.product
     AND cu.dim_key = f.customer
     AND ch.dim_key = f.channel
  ORDER BY t.end_date;
</pre></div>
<!-- class="example" -->
<p><a href="#CBAFBDDD">Example 4-2</a> selects the following rows. For <code>CUSTOMER</code>, <code>PRODUCT</code>, and <code>CHANNEL</code>, only one value is at the top level. <code>TIME</code> has a value for each calendar year.</p>
<pre>TIME          SALES
-------- ----------
1998      100870877
1999      134109248
2000      124173522
2001      116931722
2002       92515295
2003      130276514
2004      144290686
2005      136986572
2006      140138317

</pre>
<p>Dimension attributes also provide a useful way to select the data for a query. The <code>WHERE</code> clause in <a href="#CBAIFFGC">Example 4-3</a> uses attributes values to filter all of the dimensions.</p>
<div id="OLAUG9471" class="example">
<p class="titleinexample"><a id="CBAIFFGC"></a>Example 4-3 Selecting Data with Attribute Filters</p>
<pre>/* Select key descriptions and facts */
SELECT t.long_description time,
     p.long_description product,
     cu.long_description customer,
     ch.long_description channel,
     ROUND(f.sales) sales
/* From dimension views and cube view */
FROM time_calendar_view t,
     product_primary_view p,
     customer_shipments_view cu,
     channel_primary_view ch,
     units_cube_view f
/* Create attribute filters */
WHERE t.long_description in (&#39;2005&#39;, &#39;2006&#39;)
    AND p.package = &#39;Laptop Value Pack&#39;
    AND cu.long_description LIKE &#39;%Boston%&#39;
    AND ch.long_description = &#39;Internet&#39;
/* Join dimension views to cube view */
    AND t.dim_key = f.time
    AND p.dim_key = f.product
    AND cu.dim_key = f.customer
    AND ch.dim_key = f.channel
ORDER BY time, customer;
</pre></div>
<!-- class="example" -->
<p>The query selects two calendar years, the products in the Laptop Value Pack, the customers in Boston, and the Internet channel.</p>
<pre>TIME   PRODUCT                        CUSTOMER              CHANNEL       SALES
------ ------------------------------ --------------------- -------- ----------
2005   Laptop carrying case           KOSH Entrpr Boston    Internet       5936
2005   56Kbps V.92 Type II Fax/Modem  KOSH Entrpr Boston    Internet      45285
2005   Internal 48X CD-ROM            KOSH Entrpr Boston    Internet       2828
2005   Standard Mouse                 KOSH Entrpr Boston    Internet        638
2005   Envoy Standard                 Warren Systems Boston Internet      19359
2005   Laptop carrying case           Warren Systems Boston Internet      13434
2005   Standard Mouse                 Warren Systems Boston Internet        130
2006   Standard Mouse                 KOSH Entrpr Boston    Internet        555
2006   Laptop carrying case           KOSH Entrpr Boston    Internet       6357
2006   56Kbps V.92 Type II Fax/Modem  KOSH Entrpr Boston    Internet      38042
2006   Internal 48X CD-ROM            KOSH Entrpr Boston    Internet       3343
2006   Envoy Standard                 Warren Systems Boston Internet      24198
2006   Laptop carrying case           Warren Systems Boston Internet      13153
2006   Standard Mouse                 Warren Systems Boston Internet         83
 
14 rows selected.
</pre></div>
<!-- class="sect2" -->
<div id="OLAUG9172" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref317"></a>
<h3 class="sect2">Allowing the Cube to Aggregate the Data</h3>
<p>A cube contains all of the aggregate data. As shown in this chapter, a query against a cube just selects the aggregate data. It does not calculate the values.</p>
<p>The following is a basic query against a fact table:</p>
<pre>/* Querying a fact table */
SELECT t.calendar_year_dsc time,
     SUM(f.sales) sales
  FROM time_dim t, units_fact f
  WHERE t.calendar_year_dsc IN (&#39;2005&#39;, &#39;2006&#39;)
     AND t.month_id = f.month_id
  GROUP BY t.calendar_year_dsc;
</pre>
<p>The next query fetches the exact same results from a cube using filters:</p>
<pre>/* Querying a cube */
SELECT t.long_description time, f.sales sales
  FROM time_calendar_view t, 
     product_primary_view p,
     customer_shipments_view cu,
     channel_primary_view ch,
     units_cube_view f
/* Apply filters to every dimension */
  WHERE t.long_description IN (&#39;2005&#39;, &#39;2006&#39;)
     AND p.level_name = &#39;TOTAL&#39;
     AND cu.level_name = &#39;TOTAL&#39;
     AND ch.level_name = &#39;TOTAL&#39;
/* Join dimension views to cube view */
     AND t.dim_key = f.TIME
     AND p.dim_key = f.product
     AND cu.dim_key = f.customer
     AND ch.dim_key = f.channel
  ORDER BY time;
</pre>
<p>Both queries return these results:</p>
<pre>TIME       SALES
----- ----------
2005   136986572
2006   140138317
</pre>
<p>The query against the cube does not compute the aggregate values with a <code>SUM</code> operator and <code>GROUP BY</code> clause. Because the aggregates exist in the cube, this would re-aggregate previously aggregated data. Instead, the query selects the aggregates directly from the cube and specifies the desired aggregates by applying the appropriate filter to each dimension.</p>
</div>
<!-- class="sect2" -->
<div id="OLAUG9173" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref318"></a>
<h3 class="sect2">Query Processing</h3>
<p>The most efficient queries allow the OLAP engine to filter the data, so that the minimum number of rows required by the query are returned to SQL.</p>
<p>The following are among the <a id="sthref319"></a><code>WHERE</code> clause operations that are pushed into the OLAP engine for processing:</p>
<ul>
<li>
<p><code>=</code></p>
</li>
<li>
<p><code>!=</code></p>
</li>
<li>
<p><code>&gt;</code></p>
</li>
<li>
<p><code>!&gt;</code></p>
</li>
<li>
<p><code>&lt;</code></p>
</li>
<li>
<p><code>!&lt;</code></p>
</li>
<li>
<p><code>IN</code></p>
</li>
<li>
<p><code>NOT IN</code></p>
</li>
<li>
<p><code>IS NULL</code></p>
</li>
<li>
<p><code>LIKE</code></p>
</li>
<li>
<p><code>NOT LIKE</code></p>
</li>
</ul>
<p>The OLAP engine also processes nested <a id="sthref320"></a><a id="sthref321"></a><a id="sthref322"></a>character functions, including <code>INSTR</code>, <code>LENGTH</code>, <code>NVL</code>, <code>LOWER</code>, <code>UPPER</code>, <code>LTRIM</code>, <code>RTRIM</code>, <code>TRIM</code>, <code>LPAD</code>, <code>RPAD</code>, and <code>SUBSTR</code>.</p>
<p>SQL processes other operations and functions in the <code>WHERE</code> clause, and all operations in other parts of the <code>SELECT</code> syntax.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBACBFEC"></a>
<div id="OLAUG9174" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating Hierarchical Queries</h2>
<p>Drilling is an important capability in business analysis. In a dashboard or an application, users click a dimension key to change the selection of data. Decision makers frequently want to drill down to see the contributors to a data value, or drill up to see how a particular data value contributes to the whole. For example, the Boston regional sales manager might start at total Boston sales, drill down to see the contributions of each sales representative, then drill up to see how the Boston region contributes to the New England sales total.</p>
<p>The hierarchy views include a <code>PARENT</code> column that identifies the parent of every dimension key. This column encapsulates all of the hierarchical information of the dimension: If you know the parent of every key, then you can derive the ancestors, the children, and the descendants.</p>
<p>For level-based hierarchies, the <code>LEVEL_NAME</code> column supplements this information by providing a convenient way to identify all the keys at the same depth in the hierarchy, from the top to the base. For value-based hierarchies, the <code>PARENT</code> column provides all the information about the hierarchy.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reports.htm#CHDDDHED">Chapter 6, &#34;Developing Reports and Dashboards&#34;</a> about using bind variables to support drilling</div>
<div id="OLAUG9175" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref323"></a>
<h3 class="sect2">Drilling Down to Children</h3>
<p>You can use the <code>PARENT</code> column of a hierarchy view to select only the children of a particular value. The following <code>WHERE</code> clause selects the children of calendar year <code>2005</code>.</p>
<pre>/* Select children of calendar year 2005 */
WHERE  t.parent = &#39;CY2005&#39;
   AND p.dim_key = &#39;TOTAL&#39;
   AND cu.dim_key = &#39;TOTAL&#39;
   AND ch.dim_key = &#39;TOTAL&#39;
</pre>
<p>The query drills down from Year to Quarter. The four quarters <code>Q1-05</code> to <code>Q4-05</code> are the children of year <code>CY2005</code> in the Calendar hierarchy.</p>
<pre>TIME          SALES
-------- ----------
Q1.05      31381338
Q2.05      37642741
Q3.05      32617249
Q4.05      35345244
</pre></div>
<!-- class="sect2" -->
<div id="OLAUG9176" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref324"></a>
<h3 class="sect2">Drilling Up to Parents</h3>
<p>The <code>PARENT</code> column of a hierarchy view identifies the parent of each dimension key. Columns of level keys identify the full heritage. The following <code>WHERE</code> clause selects the parent of a Time key based on its <code>LONG_DESCRIPTION</code> attribute.</p>
<pre><a id="CBAIFBDF"></a>
/* Select the parent of a Time key*/
WHERE t.dim_key = 
   (SELECT DISTINCT parent
      FROM time_calendar_view
      WHERE long_description=&#39;JAN-05&#39;)
   AND p.dim_key= &#39;TOTAL&#39;
   AND cu.dim_key = &#39;TOTAL&#39;
   AND ch.dim_key = &#39;TOTAL&#39;
</pre>
<p>The query drills up from Month to Quarter. The parent of month <code>JAN-05</code> is the quarter <code>Q1-05</code> in the Calendar hierarchy.</p>
<pre>TIME          SALES
-------- ----------
Q1.05      31381338
</pre></div>
<!-- class="sect2" -->
<div id="OLAUG9177" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref325"></a>
<h3 class="sect2">Drilling Down to Descendants</h3>
<p>The following <code>WHERE</code> clause selects the descendants of calendar year <code>2005</code> by selecting the rows with a <code>LEVEL_NAME</code> of <code>MONTH</code> and a <code>CALENDAR_YEAR</code> of <code>CY2005</code>.</p>
<pre>/* Select Time level and ancestor */
WHERE t.level_name = &#39;MONTH&#39;
    AND t.calendar_year = &#39;CY2005&#39;
    AND p.dim_key = &#39;TOTAL&#39;
    AND cu.dim_key = &#39;TOTAL&#39;
    AND ch.dim_key = &#39;TOTAL&#39;
</pre>
<p>The query drills down two levels, from year to quarter to month. The 12 months <code>Jan-05</code> to <code>Dec-05</code> are the descendants of year <code>2005</code> in the Calendar hierarchy.</p>
<pre>TIME          SALES
-------- ----------
JAN-05     12093518
FEB-05     10103162
MAR-05      9184658
APR-05      9185964
MAY-05     11640216
JUN-05     16816561
JUL-05     11110903
AUG-05      9475807
SEP-05     12030538
OCT-05     11135032
NOV-05     11067754
DEC-05     13142459
</pre></div>
<!-- class="sect2" -->
<div id="OLAUG9178" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref326"></a>
<h3 class="sect2">Drilling Up to Ancestors</h3>
<p>The hierarchy views provide the full ancestry of each dimension key, as shown in <a href="#CBAJGBEF">&#34;Displaying the Contents of a Hierarchy View&#34;</a>. The following <code>WHERE</code> clause uses the <code>CALENDAR_YEAR</code> level key column to identify the ancestor of a <code>MONTH</code> dimension key.</p>
<pre>/* Select the ancestor of a Time key based on its Long Description attribute */
WHERE t.dim_key =
   (SELECT calendar_year
      FROM time_calendar_view
      WHERE long_description = &#39;JAN-05&#39;)
   AND p.dim_key = &#39;TOTAL&#39;
   AND cu.dim_key = &#39;TOTAL&#39;
   AND ch.dim_key = &#39;TOTAL&#39;
</pre>
<p>The query drills up two levels from month to quarter to year. The ancestor of month <code>Jan-05</code> is the year <code>2005</code> in the Calendar hierarchy.</p>
<pre><a id="CBAGIBFF"></a>
TIME          SALES
-------- ----------
2005      136986572
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBAIEHBA"></a>
<div id="OLAUG9179" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Calculations in Queries</h2>
<p><a id="sthref327"></a>A DBA can create calculated measures in Analytic Workspace Manager, so they are available to all applications. This not only simplifies application development, but ensures that all applications use the same name for the same calculation.</p>
<p>Nonetheless, you may want to develop queries that include your own calculations. In this case, you can use an inner query to select aggregate data from the cube, then perform calculations in an outer query. You can select data from cubes that use any type of aggregation operators, and you can use any functions or operators in the query. You must ensure only that you select the data from the cube at the appropriate levels for the calculation, and that the combination of operators in the cube and in the query create the calculation you want.</p>
<p><a href="#CBAHIIGG">Example 4-4</a> shows a query that answers the question, What was the average sales of Sentinel Standard computers to Government customers for the third quarter of fiscal year 2005. <code>UNITS_CUBE</code> is summed over all dimensions, so that <code>FY2005.Q3</code> is a total for July, August, and September. The inner query extracts the data for these months, and the outer query uses the <code>MIN</code>, <code>MAX</code>, and <code>AVG</code> operators and a <code>GROUP BY</code> clause to calculate the averages.</p>
<div id="OLAUG9472" class="example">
<p class="titleinexample"><a id="CBAHIIGG"></a>Example 4-4 Calculating Average Sales Across Customers</p>
<pre>SELECT customer, ROUND(MIN(sales)) minimum, ROUND(MAX(sales)) maximum, 
   ROUND(AVG(sales)) average
FROM
   (SELECT cu.long_description customer,
       t.month_long_description time
       f.sales sales
   FROM time_fiscal_view t,
     product_primary_view p,
     customer_market_view cu,
     channel_primary_view ch,
     units_cube_view f
   WHERE t.parent = &#39;FY2005.Q3&#39;
     AND p.dim_key = &#39;SENT STD&#39;
     AND cu.parent = &#39;GOV&#39;
     AND ch.level_name = &#39;TOTAL&#39;
     AND t.dim_key = f.time
     AND p.dim_key = f.product
     AND cu.dim_key = f.customer
     AND ch.dim_key = f.channel
   )
GROUP BY customer
ORDER BY customer;
</pre></div>
<!-- class="example" -->
<p>This is the data extracted from the cube by the inner query:</p>
<pre>CUSTOMER                                 TIME          SALES
---------------------------------------- -------- ----------
Dept. of Labor                           JAN-05      1553.26
Dept. of Labor                           MAR-05       1555.6
Ministry of Intl Trade                   JAN-05      1553.26
Ministry of Intl Trade                   FEB-05      1554.56
Ministry of Intl Trade                   MAR-05       1555.6
Royal Air Force                          JAN-05      1553.26
Royal Air Force                          FEB-05      6218.23
UK Environmental Department              JAN-05      4659.78
UK Environmental Department              FEB-05      3109.12
</pre>
<p>The outer query calculates the minimum, maximum, and average sales for each customer:</p>
<pre>CUSTOMER                          MINIMUM    MAXIMUM    AVERAGE
------------------------------ ---------- ---------- ----------
Dept. of Labor                       1553       1556       1554
Ministry of Intl Trade               1553       1556       1554
Royal Air Force                      1553       6218       3886
UK Environmental Department          3109       4660       3884
</pre></div>
<!-- class="sect1" -->
<a id="CBABGEII"></a>
<div id="OLAUG9180" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Attributes for Aggregation</h2>
<p><a id="sthref328"></a><a id="sthref329"></a>An OLAP cube aggregates the data within its hierarchies, using the parent-child relationships revealed in the hierarchy views. The OLAP engine does not calculate aggregates over dimension attribute values.</p>
<p>Nonetheless, you may want to aggregate products over color or size, or customers by age, zip code, or population density. This is the situation when you can use a <code>GROUP BY</code> clause when querying a cube. Your query can extract data from the cube, then use SQL to aggregate by attribute value.</p>
<p><a id="sthref330"></a>The cube must use the same aggregation operator for all dimensions, and the aggregation operator in the <code>SELECT</code> list of the query must match the aggregation operator of the cube. You can use a <code>GROUP BY</code> clause to query cubes that use these operators:</p>
<ul>
<li>
<p>First Non-NA Value</p>
</li>
<li>
<p>Last Non-NA Value</p>
</li>
<li>
<p>Maximum</p>
</li>
<li>
<p>Minimum</p>
</li>
<li>
<p>Sum</p>
</li>
</ul>
<a id="CBAJHGIA"></a>
<div id="OLAUG9181" class="sect2">
<h3 class="sect2">Aggregating Measures Over Attributes</h3>
<p><a href="#CBABAGBE">Example 4-5</a> shows a query that aggregates over an attribute named Package. It returns these results:</p>
<pre>TIME   PACKAGE                 SALES
------ ------------------ ----------
2005   All                1809157.64
2005   Multimedia         18083256.3
2005   Executive            19836977
2005   Laptop Value Pack  9547494.81
</pre>
<p>Units Cube uses the <code>SUM</code> operator for all dimensions, and the query uses the <code>SUM</code> operator to aggregate over Sales. The Package attribute applies only to the Item level of the Product dimension, so the query selects the Item level of Product. It also eliminates nulls for Package, so that only products that belong to a package are included in the calculation. The <code>GROUP BY</code> clause breaks out Total Sales by Time and Package.</p>
<div id="OLAUG9473" class="example">
<p class="titleinexample"><a id="CBABAGBE"></a>Example 4-5 Aggregating Over an Attribute</p>
<pre>SELECT t.long_description time,
     p.package package,
     SUM(f.sales) sales
  FROM time_calendar_view t,
     product_primary_view p,
     customer_shipments_view cu,
     channel_primary_view ch,
     units_cube_view f
/* Select Product by level and attribute */
  WHERE p.level_name = &#39;ITEM&#39;
     AND p.package IS NOT NULL
     AND t.long_description = &#39;2005&#39;
     AND cu.level_name = &#39;TOTAL&#39;
     AND ch.level_name = &#39;TOTAL&#39;
/* Join dimensions and cube */
     AND t.dim_key = f.time
     AND p.dim_key = f.product
     AND cu.dim_key = f.customer
     AND ch.dim_key = f.channel
  GROUP BY t.long_description, p.package;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CBAIBBGI"></a>
<div id="OLAUG9182" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Aggregating Calculated Measures Over Attributes</h3>
<p><a id="sthref331"></a>Before using the technique described in <a href="#CBAJHGIA">&#34;Aggregating Measures Over Attributes&#34;</a>, ensure that the calculation is meaningful. For example, the common calculation Percent Change might be defined as a calculated measure in a cube. Summing over Percent Change would produce unexpected results, because the calculation for Percent Change (<code><span class="codeinlineitalic">(a-b)/b</span></code>,) is not additive.</p>
<p>Consider the following rows of data. The correct Total Percent Change is <code>.33</code>, whereas the sum of the percent change for the first two rows is <code>.75</code>.</p>
<div class="inftblinformal">
<table class="cellalignment3633" title="Adding Calculated Measures" summary="Example of adding a nonadditive measure" dir="ltr">
<thead>
<tr class="cellalignment3624">
<th class="cellalignment3634" id="r1c1-t4">Row</th>
<th class="cellalignment3634" id="r1c2-t4">Sales</th>
<th class="cellalignment3634" id="r1c3-t4">Sales Prior Period</th>
<th class="cellalignment3634" id="r1c4-t4">Percent Change</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r2c1-t4" headers="r1c1-t4">1</td>
<td class="cellalignment3630" headers="r2c1-t4 r1c2-t4"><code>15</code></td>
<td class="cellalignment3630" headers="r2c1-t4 r1c3-t4"><code>10</code></td>
<td class="cellalignment3630" headers="r2c1-t4 r1c4-t4"><code>.50</code></td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r3c1-t4" headers="r1c1-t4">2</td>
<td class="cellalignment3630" headers="r3c1-t4 r1c2-t4"><code>25</code></td>
<td class="cellalignment3630" headers="r3c1-t4 r1c3-t4"><code>20</code></td>
<td class="cellalignment3630" headers="r3c1-t4 r1c4-t4"><code>.25</code></td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r4c1-t4" headers="r1c1-t4"><span class="bold">Total</span></td>
<td class="cellalignment3630" headers="r4c1-t4 r1c2-t4"><code><span class="codeinlinebold">40</span></code></td>
<td class="cellalignment3630" headers="r4c1-t4 r1c3-t4"><code><span class="codeinlinebold">30</span></code></td>
<td class="cellalignment3630" headers="r4c1-t4 r1c4-t4"><code><span class="codeinlinebold">.33</span></code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p><a href="#CBAFHFIH">Example 4-6</a> shows a query that aggregates over the Package attribute and calculates Percent Change From Prior Period. The inner query aggregates Sales and Sales Prior Period over the attributes, and the outer query uses the results to compute the percent change. These are the results of the query, which show the expected results for <code>PCT_CHG_PP</code>:</p>
<pre>TIME   PACKAGE                 SALES PRIOR_PERIOD PCT_CHG_PP
------ ------------------ ---------- ------------ ----------
2005   All                1809157.64   1853928.06 -.02414895
2006   All                1720399.03   1809157.64 -.04906074
2005   Executive            19836977   20603879.8 -.03722128
2006   Executive          19580638.4     19836977 -.01292226
2005   Laptop Value Pack  9547494.81   10047298.6 -.04974509
2006   Laptop Value Pack  9091450.58   9547494.81 -.04776585
2005   Multimedia         18083256.3   19607675.5 -.07774604
2006   Multimedia         18328678.7   18083256.3 .013571806
 
8 rows selected.
</pre>
<div id="OLAUG9474" class="example">
<p class="titleinexample"><a id="CBAFHFIH"></a>Example 4-6 Querying Over Attributes Using Calculated Measures</p>
<pre>/* Calculate Percent Change */
SELECT TIME, package, sales, prior_period,
     ((sales - prior_period) / prior_period) pct_chg_pp
FROM
/* Fetch data from the cube and aggregate over Package */
     (SELECT t.long_description time,
          p.package package,
          SUM(f.sales) sales,
          SUM(f.sales_pp) prior_period
       FROM time_calendar_view t,
          product_primary_view p,
          customer_shipments_view cu,
          channel_primary_view ch,
          units_cube_view f
/* Create filters */
       WHERE p.level_name = &#39;ITEM&#39;
          AND p.package IS NOT NULL
          AND t.long_description IN (&#39;2005&#39;, &#39;2006&#39;)
          AND cu.level_name = &#39;TOTAL&#39;
          AND ch.level_name = &#39;TOTAL&#39;
/* Join dimension views to cube view */
          AND t.dim_key = f.time
          AND p.dim_key = f.product
          AND cu.dim_key = f.customer
          AND ch.dim_key = f.channel
       GROUP BY t.long_description, p.package
       ORDER BY p.package);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBCABGE"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Joining Cubes to Tables and Views</h2>
<p><a id="sthref332"></a><a id="sthref333"></a>You can join cubes to other cubes and to relational objects such as:</p>
<ul>
<li>
<p>Tables</p>
</li>
<li>
<p>Views including external tables and PL/SQL table functions</p>
</li>
<li>
<p>Other row source types, like other joins</p>
</li>
</ul>
<p><a id="sthref334"></a>Typically, you do not need a fully aggregated cube when joining it to a table or view, and a <code>CUBE JOIN</code> operation limits the number of fetched values to improve performance automatically. The cube must be on the right side of the equation. If the query does not support <code>CUBE JOIN</code>, then the more expensive <code>HASH JOIN</code>, <code>MERGE JOIN</code>, or <code>NESTED LOOPS</code> are commonly used.</p>
<p><a id="sthref335"></a><a id="sthref336"></a>You can use hints in the query to influence the use of <code>CUBE JOIN</code>:</p>
<ul>
<li>
<p><code>USE_CUBE</code> forces a <code>CUBE JOIN</code> if possible.</p>
</li>
<li>
<p><code>NO_USE_CUBE</code> prevents a <code>CUBE JOIN</code>.</p>
</li>
</ul>
<p>See <a href="#CHDDHGII">&#34;Viewing Execution Plans&#34;</a> for more information about <code>CUBE JOIN</code>.</p>
<p><a href="#BGBHEBGH">Example 4-7</a> joins a table that contains French descriptions of the Customer dimension to a cube that supports only English. The query returns these results:</p>
<pre>CUSTOMER                                        SALES
---------------------------------------- ------------
La Marine des USA Washington                   600.34
Monolith Motor Co. Chattanooga               17946.51
Piedmont, Inc. San Jose                      24874.41
Ministere du Commerce Int. Nagano            27595.97
Depart. des commun. - Stuttgart              30706.10
Min. Env. Brit. Londres                      38125.77
Departement de travail Nouvelle-Orleans      42507.50
Ministere des Finances Sorbonne              43607.58
Monolith Motor Co. Knoxville                 50874.53
Serv. des USA de recherche Wyo               54497.19
Depart. des commun. - Bonn                   58944.97
     .
     .
     .
</pre>
<div id="OLAUG9562" class="example">
<p class="titleinexample"><a id="BGBHEBGH"></a>Example 4-7 Joining a Cube and a Table</p>
<pre>SELECT cu.ship_to_dsc_french customer,
     f.sales sales
FROM time_calendar_view t,
     product_primary_view p,
     customer_dim cu,
     channel_primary_view ch,
     units_cube_view f
WHERE t.dim_key = &#39;CY2006&#39;
    AND p.level_name = &#39;TOTAL&#39;
    AND ch.level_name = &#39;TOTAL&#39;
    AND t.dim_key = f.TIME
    AND p.dim_key = f.product
    AND cu.ship_to_id = f.customer
    AND ch.dim_key = f.channel
ORDER BY f.sales;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CHDDHGII"></a>
<div id="OLAUG9183" class="sect1">
<h2 class="sect1">Viewing Execution Plans</h2>
<p><a id="sthref337"></a>You can generate and view execution plans for queries against cubes and dimensions the same as for those against relational tables.</p>
<p>The SQL <a id="sthref338"></a><code>EXPLAIN PLAN</code> command creates a table with the content of the explain plan. The default table name is <code><a id="sthref339"></a>PLAN_TABLE</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TGSQL94618" href="../TGSQL/tgsql_interp.htm#TGSQL94618"><span class="italic">Oracle Database SQL Tuning Guide</span></a> for a complete discussion of execution plans</div>
<div id="OLAUG9184" class="sect2"><a id="sthref340"></a>
<h3 class="sect2">Generating Execution Plans</h3>
<p>The following command creates an execution plan for a basic query on a cube:</p>
<pre>EXPLAIN PLAN FOR
  SELECT t.long_description time,
     p.long_description product,
     cu.long_description customer,
     ch.long_description channel,
     f.sales sales
  FROM time_calendar_view t,
     product_primary_view p,
     customer_shipments_view cu,
     channel_primary_view ch,
     units_cube_view f
  WHERE t.level_name = &#39;CALENDAR_YEAR&#39;
     AND p.level_name = &#39;TOTAL&#39;
     AND cu.level_name = &#39;TOTAL&#39;
     AND ch.level_name = &#39;TOTAL&#39;
     AND t.dim_key = f.TIME
     AND p.dim_key = f.product
     AND cu.dim_key = f.customer
     AND ch.dim_key = f.channel
  ORDER BY t.end_date;
</pre>
<p>The <code>DISPLAY</code> table function of the <code>DBMS_XPLAN</code> PL/SQL package formats and displays information from an execution plan, as shown in <a href="#BAJEJJDJ">Example 4-8</a>.</p>
<div id="OLAUG9476" class="example">
<p class="titleinexample"><a id="BAJEJJDJ"></a>Example 4-8 Execution Plan for a Cube Query</p>
<pre>SQL&gt; SELECT plan_table_output FROM TABLE(dbms_xplan.display());
 
PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------
Plan hash value: 1667678335
 
----------------------------------------------------------------------------------------------
| Id  | Operation                       | Name       | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                |            |     1 |   100 |   104   (3)| 00:00:02 |
|   1 |  SORT ORDER BY                  |            |     1 |   100 |   104   (3)| 00:00:02 |
|   2 |   JOINED CUBE SCAN PARTIAL OUTER|            |       |       |            |          |
|   3 |    CUBE ACCESS                  | UNITS_CUBE |       |       |            |          |
|   4 |    CUBE ACCESS                  | CHANNEL    |       |       |            |          |
|   5 |    CUBE ACCESS                  | CUSTOMER   |       |       |            |          |
|   6 |    CUBE ACCESS                  | PRODUCT    |       |       |            |          |
|*  7 |    CUBE ACCESS                  | TIME       |     1 |   100 |   103   (2)| 00:00:02 |
----------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   7 - filter(SYS_OP_ATG(VALUE(KOKBF$),12,13,2)=&#39;CALENDAR_YEAR&#39; AND
              SYS_OP_ATG(VALUE(KOKBF$),43,44,2)=&#39;TOTAL&#39; AND
              SYS_OP_ATG(VALUE(KOKBF$),33,34,2)=&#39;TOTAL&#39; AND
              SYS_OP_ATG(VALUE(KOKBF$),23,24,2)=&#39;TOTAL&#39;)
 
22 rows selected.
</pre></div>
<!-- class="example" -->
<p><a href="#BGBBGIAE">Example 4-9</a> shows an execution plan for a query that joins a cube and a table. See <a href="#BGBCABGE">&#34;Joining Cubes to Tables and Views&#34;</a> for the query.</p>
<div id="OLAUG9563" class="example">
<p class="titleinexample"><a id="BGBBGIAE"></a>Example 4-9 Execution Plan for a Cube Join</p>
<pre>PLAN_TABLE_OUTPUT
-------------------------------------------------------------------------------------------------
Plan hash value: 3634608218
-------------------------------------------------------------------------------------------------
| Id  | Operation                        |Name        |Rows | Bytes |TempSpc|Cost (%CPU)| Time    |
--------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                 |            |1464 |   128K|       | 1524  (94)| 00:00:19|
|   1 |  SORT ORDER BY                   |            |1464 |   128K|   152K| 1524  (94)| 00:00:19|
|*  2 |   CUBE JOIN                      |            |1464 |   128K|       | 1422 (100)| 00:00:18|
|   3 |    TABLE ACCESS FULL             |CUSTOMER_DIM|  61 |  2379 |       |    4   (0)| 00:00:01|
|   4 |    JOINED CUBE SCAN PARTIAL OUTER|            |     |       |       |           |         |
|   5 |     CUBE ACCESS                  |UNITS_CUBE  |     |       |       |           |         |
|   6 |     CUBE ACCESS                  |CHANNEL     |     |       |       |           |         |
|   7 |     CUBE ACCESS                  |PRODUCT     |     |       |       |           |         |
|*  8 |     CUBE ACCESS                  |TIME        |2520 |   125K|       | 1417 (100)| 00:00:18|
--------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------
   2 - access(&#34;CU&#34;.&#34;SHIP_TO_ID&#34;=SYS_OP_ATG(VALUE(KOKBF$),76,77,2))
   8 - filter(SYS_OP_ATG(VALUE(KOKBF$),32,33,2)=&#39;CY2006&#39; AND
              SYS_OP_ATG(VALUE(KOKBF$),85,86,2)=&#39;TOTAL&#39; AND 
              SYS_OP_ATG(VALUE(KOKBF$),65,66,2)=&#39;TOTAL&#39;)

22 rows selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CBAFDCAB"></a>
<div id="OLAUG9185" class="sect2">
<h3 class="sect2">Types of Execution Plans</h3>
<p><a href="#BAJEJAFJ">Table 4-1</a> describes the types of execution plans for cubes.</p>
<div id="OLAUG9477" class="tblhruleformal">
<p class="titleintable"><a id="sthref341"></a><a id="BAJEJAFJ"></a>Table 4-1 Descriptions of Execution Plans for Cubes and Dimensions</p>
<table class="cellalignment3633" title="Descriptions of Execution Plans for Cubes and Dimensions" summary="Execution Plans" dir="ltr">
<thead>
<tr class="cellalignment3624">
<th class="cellalignment3634" id="r1c1-t6">Operation</th>
<th class="cellalignment3634" id="r1c2-t6">Option</th>
<th class="cellalignment3634" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r2c1-t6" headers="r1c1-t6">
<p><code>CUBE JOIN</code></p>
</td>
<td class="cellalignment3630" headers="r2c1-t6 r1c2-t6">
<p>--</p>
</td>
<td class="cellalignment3630" headers="r2c1-t6 r1c3-t6">
<p>Joins a table or view on the left and a cube on the right.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r3c1-t6" headers="r1c1-t6">
<p><code>CUBE JOIN</code></p>
</td>
<td class="cellalignment3630" headers="r3c1-t6 r1c2-t6">
<p><code>ANTI</code></p>
</td>
<td class="cellalignment3630" headers="r3c1-t6 r1c3-t6">
<p>Uses an antijoin for a table or view on the left and a cube on the right.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r4c1-t6" headers="r1c1-t6">
<p><code>CUBE JOIN</code></p>
</td>
<td class="cellalignment3630" headers="r4c1-t6 r1c2-t6">
<p><code>ANTI SNA</code></p>
</td>
<td class="cellalignment3630" headers="r4c1-t6 r1c3-t6">
<p>Uses an antijoin (Single-sided Null Aware) for a table or view on the left and a cube on the right. The join column on the right (cube side) is <code>NOT NULL</code>. For example:</p>
<pre>SELECT cols FROM table 
   WHERE table.c1 NOT IN 
      (SELECT col FROM cube 
         WHERE cube.col IS NOT NULL)
</pre></td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r5c1-t6" headers="r1c1-t6">
<p><code>CUBE JOIN</code></p>
</td>
<td class="cellalignment3630" headers="r5c1-t6 r1c2-t6">
<p><code>OUTER</code></p>
</td>
<td class="cellalignment3630" headers="r5c1-t6 r1c3-t6">
<p>Uses an outer join for a table or view on the left and a cube on the right.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r6c1-t6" headers="r1c1-t6">
<p><code>CUBE JOIN</code></p>
</td>
<td class="cellalignment3630" headers="r6c1-t6 r1c2-t6">
<p><code>RIGHT SEMI</code></p>
</td>
<td class="cellalignment3630" headers="r6c1-t6 r1c3-t6">
<p>Uses a right semijoin for a table or view on the left and a cube on the right.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r7c1-t6" headers="r1c1-t6">
<p><code>CUBE SCAN</code></p>
</td>
<td class="cellalignment3630" headers="r7c1-t6 r1c2-t6">
<p>--</p>
</td>
<td class="cellalignment3630" headers="r7c1-t6 r1c3-t6">
<p><a id="sthref342"></a>Uses inner joins for all cube access.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r8c1-t6" headers="r1c1-t6">
<p><code>CUBE SCAN</code></p>
</td>
<td class="cellalignment3630" headers="r8c1-t6 r1c2-t6">
<p><code><a id="sthref343"></a>PARTIAL OUTER</code></p>
</td>
<td class="cellalignment3630" headers="r8c1-t6 r1c3-t6">
<p>Uses an outer join for least one dimension, and inner joins for the other dimensions.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r9c1-t6" headers="r1c1-t6">
<p><code>CUBE SCAN</code></p>
</td>
<td class="cellalignment3630" headers="r9c1-t6 r1c2-t6">
<p><code><a id="sthref344"></a>OUTER</code></p>
</td>
<td class="cellalignment3630" headers="r9c1-t6 r1c3-t6">
<p>Uses outer joins for all cube access.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF30046" href="../SQLRF/queries006.htm#SQLRF30046"><span class="italic">Oracle Database SQL Language Reference</span></a> for descriptions of these join types.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBABFFGJ"></a>
<div id="OLAUG9186" class="sect1">
<h2 class="sect1">Querying the Data Dictionary</h2>
<p>If you are developing a generic application -- that is, one where the names of the dimensional objects are not known -- then your application can retrieve this information from the data dictionary.</p>
<p><a id="sthref345"></a><a id="sthref346"></a>Among the static views of the database data dictionary are those that provide information about dimensional objects. All OLAP metadata is stored in the data dictionary. A few of the data dictionary views were introduced previously in this chapter.</p>
<p><a href="#CBAHIDHG">Table 4-2</a> provides brief descriptions of the <code>ALL</code> views. There are corresponding <code>DBA</code> and <code>USER</code> views.</p>
<div id="OLAUG9478" class="tblhruleformal">
<p class="titleintable"><a id="sthref347"></a><a id="CBAHIDHG"></a>Table 4-2 Static Data Dictionary Views for OLAP</p>
<table class="cellalignment3633" title="Static Data Dictionary Views for OLAP" summary="Descriptions of static data dictionary views for OLAP" dir="ltr">
<thead>
<tr class="cellalignment3624">
<th class="cellalignment3634" id="r1c1-t8">View</th>
<th class="cellalignment3634" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r2c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20691" href="../REFRN/GUID-95859EB9-508F-42D5-BC71-48118FE99858.htm#REFRN20691"><code>ALL_CUBE_ATTR_VISIBILITY</code></a></p>
</td>
<td class="cellalignment3630" headers="r2c1-t8 r1c2-t8">
<p>Describes the visibility of the attributes for cube dimensions.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r3c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20671" href="../REFRN/GUID-B513762A-E25C-490D-86D3-BF2CC528BE9C.htm#REFRN20671"><code>ALL_CUBE_ATTRIBUTES</code></a></p>
</td>
<td class="cellalignment3630" headers="r3c1-t8 r1c2-t8">
<p>Describes the attributes for cube dimensions.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r4c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20718" href="../REFRN/GUID-4E0F4EE5-F424-462A-A95B-83815E2E7186.htm#REFRN20718"><code>ALL_CUBE_BUILD_PROCESSES</code></a></p>
</td>
<td class="cellalignment3630" headers="r4c1-t8 r1c2-t8">
<p>Describes the cube build processes and maintenance scripts.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r5c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20672" href="../REFRN/GUID-AA95D7A5-7911-42B0-9648-0CFB899DBE90.htm#REFRN20672"><code>ALL_CUBE_CALCULATED_MEMBERS</code></a></p>
</td>
<td class="cellalignment3630" headers="r5c1-t8 r1c2-t8">
<p>Describes the calculated members (keys) for cube dimensions.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r6c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20677" href="../REFRN/GUID-6BDFE08F-6DF5-4F7F-94AB-20B844F679A1.htm#REFRN20677"><code>ALL_CUBE_DIM_LEVELS</code></a></p>
</td>
<td class="cellalignment3630" headers="r6c1-t8 r1c2-t8">
<p>Describes the cube dimension levels.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r7c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20678" href="../REFRN/GUID-85050C84-0161-434C-9028-75A1B98623FA.htm#REFRN20678"><code>ALL_CUBE_DIM_MODELS</code></a></p>
</td>
<td class="cellalignment3630" headers="r7c1-t8 r1c2-t8">
<p>Describes the models for cube dimensions.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r8c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20680" href="../REFRN/GUID-C160B524-4AD9-49E7-84AB-132C283F27C8.htm#REFRN20680"><code>ALL_CUBE_DIM_VIEW_COLUMNS</code></a></p>
</td>
<td class="cellalignment3630" headers="r8c1-t8 r1c2-t8">
<p>Describes the columns of the system-generated relational views of cube dimensions.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r9c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20679" href="../REFRN/GUID-A4488C96-7BD2-41EA-A776-4665E8A65F83.htm#REFRN20679"><code>ALL_CUBE_DIM_VIEWS</code></a></p>
</td>
<td class="cellalignment3630" headers="r9c1-t8 r1c2-t8">
<p>Describes the system-generated relational views of OLAP dimensions.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r10c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20674" href="../REFRN/GUID-FF41D4D8-5B17-41EE-8B0D-2FE453D286BF.htm#REFRN20674"><code>ALL_CUBE_DIMENSIONALITY</code></a></p>
</td>
<td class="cellalignment3630" headers="r10c1-t8 r1c2-t8">
<p>Describes the dimension order of the OLAP cubes.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r11c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20690" href="../REFRN/GUID-AE1DDEB9-5E08-4360-A4F1-DBDF3D35F88C.htm#REFRN20690"><code>ALL_CUBE_DIMENSIONS</code></a></p>
</td>
<td class="cellalignment3630" headers="r11c1-t8 r1c2-t8">
<p>Describes the cube dimensions.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r12c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20685" href="../REFRN/GUID-741B5CFA-8CFD-45E2-B001-8DD9ED721BEC.htm#REFRN20685"><code>ALL_CUBE_HIER_LEVELS</code></a></p>
</td>
<td class="cellalignment3630" headers="r12c1-t8 r1c2-t8">
<p>Describes the hierarchy levels for cube dimensions.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r13c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20687" href="../REFRN/GUID-BBB157FF-D2F1-4024-A01D-65B5C93545ED.htm#REFRN20687"><code>ALL_CUBE_HIER_VIEW_COLUMNS</code></a></p>
</td>
<td class="cellalignment3630" headers="r13c1-t8 r1c2-t8">
<p>Describes the columns of relational hierarchy views of cube dimensions.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r14c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20686" href="../REFRN/GUID-8F9252E0-F7B2-4FF2-A7F7-CD04867E2A4A.htm#REFRN20686"><code>ALL_CUBE_HIER_VIEWS</code></a></p>
</td>
<td class="cellalignment3630" headers="r14c1-t8 r1c2-t8">
<p>Describes the hierarchies for cube dimensions.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r15c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20684" href="../REFRN/GUID-63650180-0424-421F-A78C-39BF13D21A1C.htm#REFRN20684"><code>ALL_CUBE_HIERARCHIES</code></a></p>
</td>
<td class="cellalignment3630" headers="r15c1-t8 r1c2-t8">
<p>Describes the OLAP dimension hierarchies.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r16c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20688" href="../REFRN/GUID-25A44E87-3ACA-4C9A-9BA6-92F4430C1A53.htm#REFRN20688"><code>ALL_CUBE_MEASURES</code></a></p>
</td>
<td class="cellalignment3630" headers="r16c1-t8 r1c2-t8">
<p>Describes the measures in the OLAP cubes.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r17c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20676" href="../REFRN/GUID-29F51300-B371-4A2E-9598-A513382B7F94.htm#REFRN20676"><code>ALL_CUBE_VIEW_COLUMNS</code></a></p>
</td>
<td class="cellalignment3630" headers="r17c1-t8 r1c2-t8">
<p>Describes the columns of the relational views of OLAP cubes.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r18c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20675" href="../REFRN/GUID-746B1CD0-86FA-403B-A8B6-7BDDEA0F6EC8.htm#REFRN20675"><code>ALL_CUBE_VIEWS</code></a></p>
</td>
<td class="cellalignment3630" headers="r18c1-t8 r1c2-t8">
<p>Describes the system-generated relational views of OLAP cubes.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r19c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20673" href="../REFRN/GUID-43F161E6-A9F8-42DE-8264-009035348905.htm#REFRN20673"><code>ALL_CUBES</code></a></p>
</td>
<td class="cellalignment3630" headers="r19c1-t8 r1c2-t8">
<p>Describes the OLAP cubes.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r20c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20716" href="../REFRN/GUID-D367F8EA-273A-4848-A718-B7F23BAC873A.htm#REFRN20716"><code>ALL_MEASURE_FOLDER_CONTENTS</code></a></p>
</td>
<td class="cellalignment3630" headers="r20c1-t8 r1c2-t8">
<p>Describes the contents of OLAP measure folders.</p>
</td>
</tr>
<tr class="cellalignment3624">
<td class="cellalignment3630" id="r21c1-t8" headers="r1c1-t8">
<p><a class="olink REFRN20689" href="../REFRN/GUID-BD73E73A-A9D4-4995-A010-26B0EB3D6688.htm#REFRN20689"><code>ALL_MEASURE_FOLDERS</code></a></p>
</td>
<td class="cellalignment3630" headers="r21c1-t8 r1c2-t8">
<p>Describes the OLAP measure folders.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN20691" href="../REFRN/GUID-95859EB9-508F-42D5-BC71-48118FE99858.htm#REFRN20691"><span class="italic">Oracle Database Reference</span></a> for full descriptions of data dictionary views.</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3623">
<tr>
<td class="cellalignment3630">
<table class="cellalignment3628">
<tr>
<td class="cellalignment3627"><a href="cubes.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3627"><a href="calculations.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3632">
<table class="cellalignment3626">
<tr>
<td class="cellalignment3627"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3627"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3627"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3627"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3627"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3627"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>